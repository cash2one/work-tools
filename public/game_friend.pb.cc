// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* GetFriendListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContactListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContactListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlacklistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlacklistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlacklistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlacklistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBlacklistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBlacklistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBlacklistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBlacklistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlacklistRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlacklistRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlacklistResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlacklistResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriendNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindPlayerResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5ffriend_2eproto() {
  protobuf_AddDesc_game_5ffriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_friend.proto");
  GOOGLE_CHECK(file != NULL);
  GetFriendListRequest_descriptor_ = file->message_type(0);
  static const int GetFriendListRequest_offsets_[1] = {
  };
  GetFriendListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListRequest_descriptor_,
      GetFriendListRequest::default_instance_,
      GetFriendListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListRequest));
  GetFriendListResponse_descriptor_ = file->message_type(1);
  static const int GetFriendListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, player_list_),
  };
  GetFriendListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendListResponse_descriptor_,
      GetFriendListResponse::default_instance_,
      GetFriendListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendListResponse));
  GetContactListRequest_descriptor_ = file->message_type(2);
  static const int GetContactListRequest_offsets_[1] = {
  };
  GetContactListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactListRequest_descriptor_,
      GetContactListRequest::default_instance_,
      GetContactListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactListRequest));
  GetContactListResponse_descriptor_ = file->message_type(3);
  static const int GetContactListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListResponse, player_list_),
  };
  GetContactListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContactListResponse_descriptor_,
      GetContactListResponse::default_instance_,
      GetContactListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContactListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContactListResponse));
  AddBlacklistRequest_descriptor_ = file->message_type(4);
  static const int AddBlacklistRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistRequest, dst_guid_),
  };
  AddBlacklistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlacklistRequest_descriptor_,
      AddBlacklistRequest::default_instance_,
      AddBlacklistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlacklistRequest));
  AddBlacklistResponse_descriptor_ = file->message_type(5);
  static const int AddBlacklistResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistResponse, error_code_),
  };
  AddBlacklistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlacklistResponse_descriptor_,
      AddBlacklistResponse::default_instance_,
      AddBlacklistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlacklistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlacklistResponse));
  DeleteBlacklistRequest_descriptor_ = file->message_type(6);
  static const int DeleteBlacklistRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistRequest, dst_guid_),
  };
  DeleteBlacklistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBlacklistRequest_descriptor_,
      DeleteBlacklistRequest::default_instance_,
      DeleteBlacklistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBlacklistRequest));
  DeleteBlacklistResponse_descriptor_ = file->message_type(7);
  static const int DeleteBlacklistResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistResponse, error_code_),
  };
  DeleteBlacklistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBlacklistResponse_descriptor_,
      DeleteBlacklistResponse::default_instance_,
      DeleteBlacklistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBlacklistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBlacklistResponse));
  GetBlacklistRequest_descriptor_ = file->message_type(8);
  static const int GetBlacklistRequest_offsets_[1] = {
  };
  GetBlacklistRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlacklistRequest_descriptor_,
      GetBlacklistRequest::default_instance_,
      GetBlacklistRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlacklistRequest));
  GetBlacklistResponse_descriptor_ = file->message_type(9);
  static const int GetBlacklistResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistResponse, player_list_),
  };
  GetBlacklistResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlacklistResponse_descriptor_,
      GetBlacklistResponse::default_instance_,
      GetBlacklistResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlacklistResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlacklistResponse));
  ApplyFriendRequest_descriptor_ = file->message_type(10);
  static const int ApplyFriendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendRequest, dst_guid_),
  };
  ApplyFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFriendRequest_descriptor_,
      ApplyFriendRequest::default_instance_,
      ApplyFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFriendRequest));
  ApplyFriendResponse_descriptor_ = file->message_type(11);
  static const int ApplyFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResponse, error_code_),
  };
  ApplyFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFriendResponse_descriptor_,
      ApplyFriendResponse::default_instance_,
      ApplyFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFriendResponse));
  ApplyFriendNotify_descriptor_ = file->message_type(12);
  static const int ApplyFriendNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendNotify, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendNotify, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendNotify, src_server_id_),
  };
  ApplyFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFriendNotify_descriptor_,
      ApplyFriendNotify::default_instance_,
      ApplyFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFriendNotify));
  AnswerFriendRequest_descriptor_ = file->message_type(13);
  static const int AnswerFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendRequest, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendRequest, accept_flag_),
  };
  AnswerFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerFriendRequest_descriptor_,
      AnswerFriendRequest::default_instance_,
      AnswerFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerFriendRequest));
  AnswerFriendResponse_descriptor_ = file->message_type(14);
  static const int AnswerFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendResponse, error_code_),
  };
  AnswerFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerFriendResponse_descriptor_,
      AnswerFriendResponse::default_instance_,
      AnswerFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerFriendResponse));
  AnswerFriendNotify_descriptor_ = file->message_type(15);
  static const int AnswerFriendNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, dst_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, accept_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, dst_server_id_),
  };
  AnswerFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerFriendNotify_descriptor_,
      AnswerFriendNotify::default_instance_,
      AnswerFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerFriendNotify));
  DeleteFriendRequest_descriptor_ = file->message_type(16);
  static const int DeleteFriendRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, dst_guid_),
  };
  DeleteFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendRequest_descriptor_,
      DeleteFriendRequest::default_instance_,
      DeleteFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendRequest));
  DeleteFriendResponse_descriptor_ = file->message_type(17);
  static const int DeleteFriendResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, error_code_),
  };
  DeleteFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendResponse_descriptor_,
      DeleteFriendResponse::default_instance_,
      DeleteFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendResponse));
  DeleteFriendNotify_descriptor_ = file->message_type(18);
  static const int DeleteFriendNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, src_guid_),
  };
  DeleteFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriendNotify_descriptor_,
      DeleteFriendNotify::default_instance_,
      DeleteFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriendNotify));
  FriendStatusNotify_descriptor_ = file->message_type(19);
  static const int FriendStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNotify, status_),
  };
  FriendStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendStatusNotify_descriptor_,
      FriendStatusNotify::default_instance_,
      FriendStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendStatusNotify));
  FindPlayerRequest_descriptor_ = file->message_type(20);
  static const int FindPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerRequest, name_),
  };
  FindPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindPlayerRequest_descriptor_,
      FindPlayerRequest::default_instance_,
      FindPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindPlayerRequest));
  FindPlayerResponse_descriptor_ = file->message_type(21);
  static const int FindPlayerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerResponse, guid_list_),
  };
  FindPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindPlayerResponse_descriptor_,
      FindPlayerResponse::default_instance_,
      FindPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindPlayerResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5ffriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListRequest_descriptor_, &GetFriendListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendListResponse_descriptor_, &GetFriendListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactListRequest_descriptor_, &GetContactListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContactListResponse_descriptor_, &GetContactListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlacklistRequest_descriptor_, &AddBlacklistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlacklistResponse_descriptor_, &AddBlacklistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBlacklistRequest_descriptor_, &DeleteBlacklistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBlacklistResponse_descriptor_, &DeleteBlacklistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlacklistRequest_descriptor_, &GetBlacklistRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlacklistResponse_descriptor_, &GetBlacklistResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFriendRequest_descriptor_, &ApplyFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFriendResponse_descriptor_, &ApplyFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFriendNotify_descriptor_, &ApplyFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerFriendRequest_descriptor_, &AnswerFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerFriendResponse_descriptor_, &AnswerFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerFriendNotify_descriptor_, &AnswerFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendRequest_descriptor_, &DeleteFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendResponse_descriptor_, &DeleteFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriendNotify_descriptor_, &DeleteFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendStatusNotify_descriptor_, &FriendStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindPlayerRequest_descriptor_, &FindPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindPlayerResponse_descriptor_, &FindPlayerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5ffriend_2eproto() {
  delete GetFriendListRequest::default_instance_;
  delete GetFriendListRequest_reflection_;
  delete GetFriendListResponse::default_instance_;
  delete GetFriendListResponse_reflection_;
  delete GetContactListRequest::default_instance_;
  delete GetContactListRequest_reflection_;
  delete GetContactListResponse::default_instance_;
  delete GetContactListResponse_reflection_;
  delete AddBlacklistRequest::default_instance_;
  delete AddBlacklistRequest_reflection_;
  delete AddBlacklistResponse::default_instance_;
  delete AddBlacklistResponse_reflection_;
  delete DeleteBlacklistRequest::default_instance_;
  delete DeleteBlacklistRequest_reflection_;
  delete DeleteBlacklistResponse::default_instance_;
  delete DeleteBlacklistResponse_reflection_;
  delete GetBlacklistRequest::default_instance_;
  delete GetBlacklistRequest_reflection_;
  delete GetBlacklistResponse::default_instance_;
  delete GetBlacklistResponse_reflection_;
  delete ApplyFriendRequest::default_instance_;
  delete ApplyFriendRequest_reflection_;
  delete ApplyFriendResponse::default_instance_;
  delete ApplyFriendResponse_reflection_;
  delete ApplyFriendNotify::default_instance_;
  delete ApplyFriendNotify_reflection_;
  delete AnswerFriendRequest::default_instance_;
  delete AnswerFriendRequest_reflection_;
  delete AnswerFriendResponse::default_instance_;
  delete AnswerFriendResponse_reflection_;
  delete AnswerFriendNotify::default_instance_;
  delete AnswerFriendNotify_reflection_;
  delete DeleteFriendRequest::default_instance_;
  delete DeleteFriendRequest_reflection_;
  delete DeleteFriendResponse::default_instance_;
  delete DeleteFriendResponse_reflection_;
  delete DeleteFriendNotify::default_instance_;
  delete DeleteFriendNotify_reflection_;
  delete FriendStatusNotify::default_instance_;
  delete FriendStatusNotify_reflection_;
  delete FindPlayerRequest::default_instance_;
  delete FindPlayerRequest_reflection_;
  delete FindPlayerResponse::default_instance_;
  delete FindPlayerResponse_reflection_;
}

void protobuf_AddDesc_game_5ffriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021game_friend.proto\022\020protocols.common\032\021g"
    "ame_common.proto\"\026\n\024GetFriendListRequest"
    "\"^\n\025GetFriendListResponse\022\022\n\nerror_code\030"
    "\001 \002(\005\0221\n\013player_list\030\002 \003(\0132\034.protocols.c"
    "ommon.PlayerInfo\"\027\n\025GetContactListReques"
    "t\"_\n\026GetContactListResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\0221\n\013player_list\030\002 \003(\0132\034.protocols"
    ".common.PlayerInfo\"\'\n\023AddBlacklistReques"
    "t\022\020\n\010dst_guid\030\001 \002(\003\"*\n\024AddBlacklistRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\"*\n\026DeleteBlackli"
    "stRequest\022\020\n\010dst_guid\030\001 \002(\003\"-\n\027DeleteBla"
    "cklistResponse\022\022\n\nerror_code\030\001 \002(\005\"\025\n\023Ge"
    "tBlacklistRequest\"]\n\024GetBlacklistRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\0221\n\013player_list\030\002 \003"
    "(\0132\034.protocols.common.PlayerInfo\"&\n\022Appl"
    "yFriendRequest\022\020\n\010dst_guid\030\001 \002(\003\")\n\023Appl"
    "yFriendResponse\022\022\n\nerror_code\030\001 \002(\005\"N\n\021A"
    "pplyFriendNotify\022\020\n\010src_guid\030\001 \002(\003\022\020\n\010sr"
    "c_name\030\002 \001(\t\022\025\n\rsrc_server_id\030\003 \001(\005\"<\n\023A"
    "nswerFriendRequest\022\020\n\010src_guid\030\001 \002(\003\022\023\n\013"
    "accept_flag\030\002 \002(\010\"*\n\024AnswerFriendRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\"d\n\022AnswerFriendNot"
    "ify\022\020\n\010dst_guid\030\001 \002(\003\022\023\n\013accept_flag\030\002 \002"
    "(\010\022\020\n\010dst_name\030\003 \001(\t\022\025\n\rdst_server_id\030\004 "
    "\001(\005\"\'\n\023DeleteFriendRequest\022\020\n\010dst_guid\030\001"
    " \002(\003\"*\n\024DeleteFriendResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"&\n\022DeleteFriendNotify\022\020\n\010src_gu"
    "id\030\001 \002(\003\"2\n\022FriendStatusNotify\022\014\n\004guid\030\001"
    " \001(\003\022\016\n\006status\030\002 \001(\005\"!\n\021FindPlayerReques"
    "t\022\014\n\004name\030\001 \001(\t\";\n\022FindPlayerResponse\022\022\n"
    "\nerror_code\030\001 \002(\005\022\021\n\tguid_list\030\002 \003(\003", 1236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_friend.proto", &protobuf_RegisterTypes);
  GetFriendListRequest::default_instance_ = new GetFriendListRequest();
  GetFriendListResponse::default_instance_ = new GetFriendListResponse();
  GetContactListRequest::default_instance_ = new GetContactListRequest();
  GetContactListResponse::default_instance_ = new GetContactListResponse();
  AddBlacklistRequest::default_instance_ = new AddBlacklistRequest();
  AddBlacklistResponse::default_instance_ = new AddBlacklistResponse();
  DeleteBlacklistRequest::default_instance_ = new DeleteBlacklistRequest();
  DeleteBlacklistResponse::default_instance_ = new DeleteBlacklistResponse();
  GetBlacklistRequest::default_instance_ = new GetBlacklistRequest();
  GetBlacklistResponse::default_instance_ = new GetBlacklistResponse();
  ApplyFriendRequest::default_instance_ = new ApplyFriendRequest();
  ApplyFriendResponse::default_instance_ = new ApplyFriendResponse();
  ApplyFriendNotify::default_instance_ = new ApplyFriendNotify();
  AnswerFriendRequest::default_instance_ = new AnswerFriendRequest();
  AnswerFriendResponse::default_instance_ = new AnswerFriendResponse();
  AnswerFriendNotify::default_instance_ = new AnswerFriendNotify();
  DeleteFriendRequest::default_instance_ = new DeleteFriendRequest();
  DeleteFriendResponse::default_instance_ = new DeleteFriendResponse();
  DeleteFriendNotify::default_instance_ = new DeleteFriendNotify();
  FriendStatusNotify::default_instance_ = new FriendStatusNotify();
  FindPlayerRequest::default_instance_ = new FindPlayerRequest();
  FindPlayerResponse::default_instance_ = new FindPlayerResponse();
  GetFriendListRequest::default_instance_->InitAsDefaultInstance();
  GetFriendListResponse::default_instance_->InitAsDefaultInstance();
  GetContactListRequest::default_instance_->InitAsDefaultInstance();
  GetContactListResponse::default_instance_->InitAsDefaultInstance();
  AddBlacklistRequest::default_instance_->InitAsDefaultInstance();
  AddBlacklistResponse::default_instance_->InitAsDefaultInstance();
  DeleteBlacklistRequest::default_instance_->InitAsDefaultInstance();
  DeleteBlacklistResponse::default_instance_->InitAsDefaultInstance();
  GetBlacklistRequest::default_instance_->InitAsDefaultInstance();
  GetBlacklistResponse::default_instance_->InitAsDefaultInstance();
  ApplyFriendRequest::default_instance_->InitAsDefaultInstance();
  ApplyFriendResponse::default_instance_->InitAsDefaultInstance();
  ApplyFriendNotify::default_instance_->InitAsDefaultInstance();
  AnswerFriendRequest::default_instance_->InitAsDefaultInstance();
  AnswerFriendResponse::default_instance_->InitAsDefaultInstance();
  AnswerFriendNotify::default_instance_->InitAsDefaultInstance();
  DeleteFriendRequest::default_instance_->InitAsDefaultInstance();
  DeleteFriendResponse::default_instance_->InitAsDefaultInstance();
  DeleteFriendNotify::default_instance_->InitAsDefaultInstance();
  FriendStatusNotify::default_instance_->InitAsDefaultInstance();
  FindPlayerRequest::default_instance_->InitAsDefaultInstance();
  FindPlayerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5ffriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5ffriend_2eproto {
  StaticDescriptorInitializer_game_5ffriend_2eproto() {
    protobuf_AddDesc_game_5ffriend_2eproto();
  }
} static_descriptor_initializer_game_5ffriend_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFriendListRequest::GetFriendListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendListRequest::InitAsDefaultInstance() {
}

GetFriendListRequest::GetFriendListRequest(const GetFriendListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListRequest::~GetFriendListRequest() {
  SharedDtor();
}

void GetFriendListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListRequest_descriptor_;
}

const GetFriendListRequest& GetFriendListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetFriendListRequest* GetFriendListRequest::default_instance_ = NULL;

GetFriendListRequest* GetFriendListRequest::New() const {
  return new GetFriendListRequest;
}

void GetFriendListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetFriendListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListRequest::MergeFrom(const GetFriendListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListRequest::CopyFrom(const GetFriendListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListRequest::IsInitialized() const {
  
  return true;
}

void GetFriendListRequest::Swap(GetFriendListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListRequest_descriptor_;
  metadata.reflection = GetFriendListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendListResponse::kErrorCodeFieldNumber;
const int GetFriendListResponse::kPlayerListFieldNumber;
#endif  // !_MSC_VER

GetFriendListResponse::GetFriendListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendListResponse::InitAsDefaultInstance() {
}

GetFriendListResponse::GetFriendListResponse(const GetFriendListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendListResponse::~GetFriendListResponse() {
  SharedDtor();
}

void GetFriendListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendListResponse_descriptor_;
}

const GetFriendListResponse& GetFriendListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetFriendListResponse* GetFriendListResponse::default_instance_ = NULL;

GetFriendListResponse* GetFriendListResponse::New() const {
  return new GetFriendListResponse;
}

void GetFriendListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo player_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.PlayerInfo player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendListResponse::MergeFrom(const GetFriendListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendListResponse::CopyFrom(const GetFriendListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetFriendListResponse::Swap(GetFriendListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendListResponse_descriptor_;
  metadata.reflection = GetFriendListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetContactListRequest::GetContactListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactListRequest::InitAsDefaultInstance() {
}

GetContactListRequest::GetContactListRequest(const GetContactListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactListRequest::~GetContactListRequest() {
  SharedDtor();
}

void GetContactListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetContactListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactListRequest_descriptor_;
}

const GetContactListRequest& GetContactListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetContactListRequest* GetContactListRequest::default_instance_ = NULL;

GetContactListRequest* GetContactListRequest::New() const {
  return new GetContactListRequest;
}

void GetContactListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetContactListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactListRequest::MergeFrom(const GetContactListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactListRequest::CopyFrom(const GetContactListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactListRequest::IsInitialized() const {
  
  return true;
}

void GetContactListRequest::Swap(GetContactListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactListRequest_descriptor_;
  metadata.reflection = GetContactListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetContactListResponse::kErrorCodeFieldNumber;
const int GetContactListResponse::kPlayerListFieldNumber;
#endif  // !_MSC_VER

GetContactListResponse::GetContactListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContactListResponse::InitAsDefaultInstance() {
}

GetContactListResponse::GetContactListResponse(const GetContactListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContactListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContactListResponse::~GetContactListResponse() {
  SharedDtor();
}

void GetContactListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetContactListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContactListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContactListResponse_descriptor_;
}

const GetContactListResponse& GetContactListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetContactListResponse* GetContactListResponse::default_instance_ = NULL;

GetContactListResponse* GetContactListResponse::New() const {
  return new GetContactListResponse;
}

void GetContactListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContactListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo player_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContactListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContactListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContactListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.PlayerInfo player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContactListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContactListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContactListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContactListResponse::MergeFrom(const GetContactListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContactListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContactListResponse::CopyFrom(const GetContactListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContactListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetContactListResponse::Swap(GetContactListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContactListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContactListResponse_descriptor_;
  metadata.reflection = GetContactListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlacklistRequest::kDstGuidFieldNumber;
#endif  // !_MSC_VER

AddBlacklistRequest::AddBlacklistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBlacklistRequest::InitAsDefaultInstance() {
}

AddBlacklistRequest::AddBlacklistRequest(const AddBlacklistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBlacklistRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlacklistRequest::~AddBlacklistRequest() {
  SharedDtor();
}

void AddBlacklistRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddBlacklistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlacklistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlacklistRequest_descriptor_;
}

const AddBlacklistRequest& AddBlacklistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

AddBlacklistRequest* AddBlacklistRequest::default_instance_ = NULL;

AddBlacklistRequest* AddBlacklistRequest::New() const {
  return new AddBlacklistRequest;
}

void AddBlacklistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlacklistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBlacklistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBlacklistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBlacklistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlacklistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlacklistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlacklistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlacklistRequest::MergeFrom(const AddBlacklistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlacklistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlacklistRequest::CopyFrom(const AddBlacklistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlacklistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddBlacklistRequest::Swap(AddBlacklistRequest* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlacklistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlacklistRequest_descriptor_;
  metadata.reflection = AddBlacklistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlacklistResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AddBlacklistResponse::AddBlacklistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBlacklistResponse::InitAsDefaultInstance() {
}

AddBlacklistResponse::AddBlacklistResponse(const AddBlacklistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBlacklistResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlacklistResponse::~AddBlacklistResponse() {
  SharedDtor();
}

void AddBlacklistResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlacklistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlacklistResponse_descriptor_;
}

const AddBlacklistResponse& AddBlacklistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

AddBlacklistResponse* AddBlacklistResponse::default_instance_ = NULL;

AddBlacklistResponse* AddBlacklistResponse::New() const {
  return new AddBlacklistResponse;
}

void AddBlacklistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlacklistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBlacklistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBlacklistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBlacklistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlacklistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlacklistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlacklistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlacklistResponse::MergeFrom(const AddBlacklistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlacklistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlacklistResponse::CopyFrom(const AddBlacklistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlacklistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddBlacklistResponse::Swap(AddBlacklistResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlacklistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlacklistResponse_descriptor_;
  metadata.reflection = AddBlacklistResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBlacklistRequest::kDstGuidFieldNumber;
#endif  // !_MSC_VER

DeleteBlacklistRequest::DeleteBlacklistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteBlacklistRequest::InitAsDefaultInstance() {
}

DeleteBlacklistRequest::DeleteBlacklistRequest(const DeleteBlacklistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteBlacklistRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBlacklistRequest::~DeleteBlacklistRequest() {
  SharedDtor();
}

void DeleteBlacklistRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteBlacklistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBlacklistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBlacklistRequest_descriptor_;
}

const DeleteBlacklistRequest& DeleteBlacklistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

DeleteBlacklistRequest* DeleteBlacklistRequest::default_instance_ = NULL;

DeleteBlacklistRequest* DeleteBlacklistRequest::New() const {
  return new DeleteBlacklistRequest;
}

void DeleteBlacklistRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBlacklistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteBlacklistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteBlacklistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteBlacklistRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBlacklistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBlacklistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBlacklistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBlacklistRequest::MergeFrom(const DeleteBlacklistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBlacklistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBlacklistRequest::CopyFrom(const DeleteBlacklistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlacklistRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteBlacklistRequest::Swap(DeleteBlacklistRequest* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBlacklistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBlacklistRequest_descriptor_;
  metadata.reflection = DeleteBlacklistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBlacklistResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeleteBlacklistResponse::DeleteBlacklistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteBlacklistResponse::InitAsDefaultInstance() {
}

DeleteBlacklistResponse::DeleteBlacklistResponse(const DeleteBlacklistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteBlacklistResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBlacklistResponse::~DeleteBlacklistResponse() {
  SharedDtor();
}

void DeleteBlacklistResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBlacklistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBlacklistResponse_descriptor_;
}

const DeleteBlacklistResponse& DeleteBlacklistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

DeleteBlacklistResponse* DeleteBlacklistResponse::default_instance_ = NULL;

DeleteBlacklistResponse* DeleteBlacklistResponse::New() const {
  return new DeleteBlacklistResponse;
}

void DeleteBlacklistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBlacklistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteBlacklistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteBlacklistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteBlacklistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBlacklistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBlacklistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBlacklistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBlacklistResponse::MergeFrom(const DeleteBlacklistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBlacklistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBlacklistResponse::CopyFrom(const DeleteBlacklistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBlacklistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteBlacklistResponse::Swap(DeleteBlacklistResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBlacklistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBlacklistResponse_descriptor_;
  metadata.reflection = DeleteBlacklistResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetBlacklistRequest::GetBlacklistRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlacklistRequest::InitAsDefaultInstance() {
}

GetBlacklistRequest::GetBlacklistRequest(const GetBlacklistRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlacklistRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlacklistRequest::~GetBlacklistRequest() {
  SharedDtor();
}

void GetBlacklistRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlacklistRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlacklistRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlacklistRequest_descriptor_;
}

const GetBlacklistRequest& GetBlacklistRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetBlacklistRequest* GetBlacklistRequest::default_instance_ = NULL;

GetBlacklistRequest* GetBlacklistRequest::New() const {
  return new GetBlacklistRequest;
}

void GetBlacklistRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlacklistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetBlacklistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlacklistRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlacklistRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlacklistRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlacklistRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlacklistRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlacklistRequest::MergeFrom(const GetBlacklistRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlacklistRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlacklistRequest::CopyFrom(const GetBlacklistRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlacklistRequest::IsInitialized() const {
  
  return true;
}

void GetBlacklistRequest::Swap(GetBlacklistRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlacklistRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlacklistRequest_descriptor_;
  metadata.reflection = GetBlacklistRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlacklistResponse::kErrorCodeFieldNumber;
const int GetBlacklistResponse::kPlayerListFieldNumber;
#endif  // !_MSC_VER

GetBlacklistResponse::GetBlacklistResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlacklistResponse::InitAsDefaultInstance() {
}

GetBlacklistResponse::GetBlacklistResponse(const GetBlacklistResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlacklistResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlacklistResponse::~GetBlacklistResponse() {
  SharedDtor();
}

void GetBlacklistResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBlacklistResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlacklistResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlacklistResponse_descriptor_;
}

const GetBlacklistResponse& GetBlacklistResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

GetBlacklistResponse* GetBlacklistResponse::default_instance_ = NULL;

GetBlacklistResponse* GetBlacklistResponse::New() const {
  return new GetBlacklistResponse;
}

void GetBlacklistResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlacklistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo player_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBlacklistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlacklistResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlacklistResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.PlayerInfo player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlacklistResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlacklistResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlacklistResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlacklistResponse::MergeFrom(const GetBlacklistResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlacklistResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlacklistResponse::CopyFrom(const GetBlacklistResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlacklistResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetBlacklistResponse::Swap(GetBlacklistResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlacklistResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlacklistResponse_descriptor_;
  metadata.reflection = GetBlacklistResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyFriendRequest::kDstGuidFieldNumber;
#endif  // !_MSC_VER

ApplyFriendRequest::ApplyFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyFriendRequest::InitAsDefaultInstance() {
}

ApplyFriendRequest::ApplyFriendRequest(const ApplyFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFriendRequest::~ApplyFriendRequest() {
  SharedDtor();
}

void ApplyFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendRequest_descriptor_;
}

const ApplyFriendRequest& ApplyFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

ApplyFriendRequest* ApplyFriendRequest::default_instance_ = NULL;

ApplyFriendRequest* ApplyFriendRequest::New() const {
  return new ApplyFriendRequest;
}

void ApplyFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFriendRequest::MergeFrom(const ApplyFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFriendRequest::CopyFrom(const ApplyFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyFriendRequest::Swap(ApplyFriendRequest* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFriendRequest_descriptor_;
  metadata.reflection = ApplyFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyFriendResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyFriendResponse::ApplyFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyFriendResponse::InitAsDefaultInstance() {
}

ApplyFriendResponse::ApplyFriendResponse(const ApplyFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFriendResponse::~ApplyFriendResponse() {
  SharedDtor();
}

void ApplyFriendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendResponse_descriptor_;
}

const ApplyFriendResponse& ApplyFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

ApplyFriendResponse* ApplyFriendResponse::default_instance_ = NULL;

ApplyFriendResponse* ApplyFriendResponse::New() const {
  return new ApplyFriendResponse;
}

void ApplyFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFriendResponse::MergeFrom(const ApplyFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFriendResponse::CopyFrom(const ApplyFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyFriendResponse::Swap(ApplyFriendResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFriendResponse_descriptor_;
  metadata.reflection = ApplyFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyFriendNotify::kSrcGuidFieldNumber;
const int ApplyFriendNotify::kSrcNameFieldNumber;
const int ApplyFriendNotify::kSrcServerIdFieldNumber;
#endif  // !_MSC_VER

ApplyFriendNotify::ApplyFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyFriendNotify::InitAsDefaultInstance() {
}

ApplyFriendNotify::ApplyFriendNotify(const ApplyFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_LONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFriendNotify::~ApplyFriendNotify() {
  SharedDtor();
}

void ApplyFriendNotify::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (this != default_instance_) {
  }
}

void ApplyFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendNotify_descriptor_;
}

const ApplyFriendNotify& ApplyFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

ApplyFriendNotify* ApplyFriendNotify::default_instance_ = NULL;

ApplyFriendNotify* ApplyFriendNotify::New() const {
  return new ApplyFriendNotify;
}

void ApplyFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_LONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    src_server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }
      
      // optional string src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_name().data(), this->src_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_server_id;
        break;
      }
      
      // optional int32 src_server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_id_)));
          set_has_src_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_guid(), output);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->src_name(), output);
  }
  
  // optional int32 src_server_id = 3;
  if (has_src_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->src_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_guid(), target);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_name(), target);
  }
  
  // optional int32 src_server_id = 3;
  if (has_src_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->src_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyFriendNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_guid());
    }
    
    // optional string src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_name());
    }
    
    // optional int32 src_server_id = 3;
    if (has_src_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFriendNotify::MergeFrom(const ApplyFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_src_server_id()) {
      set_src_server_id(from.src_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFriendNotify::CopyFrom(const ApplyFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFriendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyFriendNotify::Swap(ApplyFriendNotify* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(src_name_, other->src_name_);
    std::swap(src_server_id_, other->src_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFriendNotify_descriptor_;
  metadata.reflection = ApplyFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerFriendRequest::kSrcGuidFieldNumber;
const int AnswerFriendRequest::kAcceptFlagFieldNumber;
#endif  // !_MSC_VER

AnswerFriendRequest::AnswerFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerFriendRequest::InitAsDefaultInstance() {
}

AnswerFriendRequest::AnswerFriendRequest(const AnswerFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_LONGLONG(0);
  accept_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerFriendRequest::~AnswerFriendRequest() {
  SharedDtor();
}

void AnswerFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerFriendRequest_descriptor_;
}

const AnswerFriendRequest& AnswerFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

AnswerFriendRequest* AnswerFriendRequest::default_instance_ = NULL;

AnswerFriendRequest* AnswerFriendRequest::New() const {
  return new AnswerFriendRequest;
}

void AnswerFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_LONGLONG(0);
    accept_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_flag;
        break;
      }
      
      // required bool accept_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_flag_)));
          set_has_accept_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_guid(), output);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_guid(), target);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_guid());
    }
    
    // required bool accept_flag = 2;
    if (has_accept_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerFriendRequest::MergeFrom(const AnswerFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_accept_flag()) {
      set_accept_flag(from.accept_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerFriendRequest::CopyFrom(const AnswerFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnswerFriendRequest::Swap(AnswerFriendRequest* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(accept_flag_, other->accept_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerFriendRequest_descriptor_;
  metadata.reflection = AnswerFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerFriendResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AnswerFriendResponse::AnswerFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerFriendResponse::InitAsDefaultInstance() {
}

AnswerFriendResponse::AnswerFriendResponse(const AnswerFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerFriendResponse::~AnswerFriendResponse() {
  SharedDtor();
}

void AnswerFriendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerFriendResponse_descriptor_;
}

const AnswerFriendResponse& AnswerFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

AnswerFriendResponse* AnswerFriendResponse::default_instance_ = NULL;

AnswerFriendResponse* AnswerFriendResponse::New() const {
  return new AnswerFriendResponse;
}

void AnswerFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerFriendResponse::MergeFrom(const AnswerFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerFriendResponse::CopyFrom(const AnswerFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AnswerFriendResponse::Swap(AnswerFriendResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerFriendResponse_descriptor_;
  metadata.reflection = AnswerFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerFriendNotify::kDstGuidFieldNumber;
const int AnswerFriendNotify::kAcceptFlagFieldNumber;
const int AnswerFriendNotify::kDstNameFieldNumber;
const int AnswerFriendNotify::kDstServerIdFieldNumber;
#endif  // !_MSC_VER

AnswerFriendNotify::AnswerFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerFriendNotify::InitAsDefaultInstance() {
}

AnswerFriendNotify::AnswerFriendNotify(const AnswerFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  accept_flag_ = false;
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerFriendNotify::~AnswerFriendNotify() {
  SharedDtor();
}

void AnswerFriendNotify::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void AnswerFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerFriendNotify_descriptor_;
}

const AnswerFriendNotify& AnswerFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

AnswerFriendNotify* AnswerFriendNotify::default_instance_ = NULL;

AnswerFriendNotify* AnswerFriendNotify::New() const {
  return new AnswerFriendNotify;
}

void AnswerFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
    accept_flag_ = false;
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
    dst_server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_flag;
        break;
      }
      
      // required bool accept_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_flag_)));
          set_has_accept_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dst_name;
        break;
      }
      
      // optional string dst_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst_name().data(), this->dst_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_server_id;
        break;
      }
      
      // optional int32 dst_server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_server_id_)));
          set_has_dst_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept_flag(), output);
  }
  
  // optional string dst_name = 3;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dst_name(), output);
  }
  
  // optional int32 dst_server_id = 4;
  if (has_dst_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept_flag(), target);
  }
  
  // optional string dst_name = 3;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dst_name(), target);
  }
  
  // optional int32 dst_server_id = 4;
  if (has_dst_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerFriendNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
    // required bool accept_flag = 2;
    if (has_accept_flag()) {
      total_size += 1 + 1;
    }
    
    // optional string dst_name = 3;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_name());
    }
    
    // optional int32 dst_server_id = 4;
    if (has_dst_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerFriendNotify::MergeFrom(const AnswerFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
    if (from.has_accept_flag()) {
      set_accept_flag(from.accept_flag());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
    if (from.has_dst_server_id()) {
      set_dst_server_id(from.dst_server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerFriendNotify::CopyFrom(const AnswerFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerFriendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnswerFriendNotify::Swap(AnswerFriendNotify* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(accept_flag_, other->accept_flag_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(dst_server_id_, other->dst_server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerFriendNotify_descriptor_;
  metadata.reflection = AnswerFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendRequest::kDstGuidFieldNumber;
#endif  // !_MSC_VER

DeleteFriendRequest::DeleteFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFriendRequest::InitAsDefaultInstance() {
}

DeleteFriendRequest::DeleteFriendRequest(const DeleteFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendRequest::~DeleteFriendRequest() {
  SharedDtor();
}

void DeleteFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendRequest_descriptor_;
}

const DeleteFriendRequest& DeleteFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

DeleteFriendRequest* DeleteFriendRequest::default_instance_ = NULL;

DeleteFriendRequest* DeleteFriendRequest::New() const {
  return new DeleteFriendRequest;
}

void DeleteFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFriendRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendRequest::MergeFrom(const DeleteFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendRequest::CopyFrom(const DeleteFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteFriendRequest::Swap(DeleteFriendRequest* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendRequest_descriptor_;
  metadata.reflection = DeleteFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeleteFriendResponse::DeleteFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFriendResponse::InitAsDefaultInstance() {
}

DeleteFriendResponse::DeleteFriendResponse(const DeleteFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendResponse::~DeleteFriendResponse() {
  SharedDtor();
}

void DeleteFriendResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendResponse_descriptor_;
}

const DeleteFriendResponse& DeleteFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

DeleteFriendResponse* DeleteFriendResponse::default_instance_ = NULL;

DeleteFriendResponse* DeleteFriendResponse::New() const {
  return new DeleteFriendResponse;
}

void DeleteFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFriendResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendResponse::MergeFrom(const DeleteFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendResponse::CopyFrom(const DeleteFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteFriendResponse::Swap(DeleteFriendResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendResponse_descriptor_;
  metadata.reflection = DeleteFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriendNotify::kSrcGuidFieldNumber;
#endif  // !_MSC_VER

DeleteFriendNotify::DeleteFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFriendNotify::InitAsDefaultInstance() {
}

DeleteFriendNotify::DeleteFriendNotify(const DeleteFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriendNotify::~DeleteFriendNotify() {
  SharedDtor();
}

void DeleteFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriendNotify_descriptor_;
}

const DeleteFriendNotify& DeleteFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

DeleteFriendNotify* DeleteFriendNotify::default_instance_ = NULL;

DeleteFriendNotify* DeleteFriendNotify::New() const {
  return new DeleteFriendNotify;
}

void DeleteFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFriendNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriendNotify::MergeFrom(const DeleteFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriendNotify::CopyFrom(const DeleteFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteFriendNotify::Swap(DeleteFriendNotify* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriendNotify_descriptor_;
  metadata.reflection = DeleteFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendStatusNotify::kGuidFieldNumber;
const int FriendStatusNotify::kStatusFieldNumber;
#endif  // !_MSC_VER

FriendStatusNotify::FriendStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendStatusNotify::InitAsDefaultInstance() {
}

FriendStatusNotify::FriendStatusNotify(const FriendStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendStatusNotify::~FriendStatusNotify() {
  SharedDtor();
}

void FriendStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendStatusNotify_descriptor_;
}

const FriendStatusNotify& FriendStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

FriendStatusNotify* FriendStatusNotify::default_instance_ = NULL;

FriendStatusNotify* FriendStatusNotify::New() const {
  return new FriendStatusNotify;
}

void FriendStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendStatusNotify::MergeFrom(const FriendStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendStatusNotify::CopyFrom(const FriendStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendStatusNotify::IsInitialized() const {
  
  return true;
}

void FriendStatusNotify::Swap(FriendStatusNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendStatusNotify_descriptor_;
  metadata.reflection = FriendStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindPlayerRequest::kNameFieldNumber;
#endif  // !_MSC_VER

FindPlayerRequest::FindPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindPlayerRequest::InitAsDefaultInstance() {
}

FindPlayerRequest::FindPlayerRequest(const FindPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindPlayerRequest::~FindPlayerRequest() {
  SharedDtor();
}

void FindPlayerRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FindPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindPlayerRequest_descriptor_;
}

const FindPlayerRequest& FindPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

FindPlayerRequest* FindPlayerRequest::default_instance_ = NULL;

FindPlayerRequest* FindPlayerRequest::New() const {
  return new FindPlayerRequest;
}

void FindPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindPlayerRequest::MergeFrom(const FindPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindPlayerRequest::CopyFrom(const FindPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPlayerRequest::IsInitialized() const {
  
  return true;
}

void FindPlayerRequest::Swap(FindPlayerRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindPlayerRequest_descriptor_;
  metadata.reflection = FindPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindPlayerResponse::kErrorCodeFieldNumber;
const int FindPlayerResponse::kGuidListFieldNumber;
#endif  // !_MSC_VER

FindPlayerResponse::FindPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindPlayerResponse::InitAsDefaultInstance() {
}

FindPlayerResponse::FindPlayerResponse(const FindPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindPlayerResponse::~FindPlayerResponse() {
  SharedDtor();
}

void FindPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindPlayerResponse_descriptor_;
}

const FindPlayerResponse& FindPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffriend_2eproto();  return *default_instance_;
}

FindPlayerResponse* FindPlayerResponse::default_instance_ = NULL;

FindPlayerResponse* FindPlayerResponse::New() const {
  return new FindPlayerResponse;
}

void FindPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  guid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FindPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid_list;
        break;
      }
      
      // repeated int64 guid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FindPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated int64 guid_list = 2;
  for (int i = 0; i < this->guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->guid_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated int64 guid_list = 2;
  for (int i = 0; i < this->guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->guid_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated int64 guid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->guid_list(i));
    }
    total_size += 1 * this->guid_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FindPlayerResponse::MergeFrom(const FindPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_list_.MergeFrom(from.guid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FindPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindPlayerResponse::CopyFrom(const FindPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FindPlayerResponse::Swap(FindPlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    guid_list_.Swap(&other->guid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FindPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindPlayerResponse_descriptor_;
  metadata.reflection = FindPlayerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
