// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInviteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInviteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildMemberListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildMemberListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildMemberListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildMemberListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerJoinGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerJoinGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerJoinGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerJoinGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerJoinGuildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerJoinGuildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinGuildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinGuildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildInviteListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildInviteListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildInviteListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildInviteListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildApplyListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildApplyListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildApplyListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildApplyListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildTitleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildTitleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyJoinGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyJoinGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyJoinGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyJoinGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGuildMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGuildMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGuildMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGuildMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteGuildMemberNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteGuildMemberNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildMemberTitleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildMemberTitleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildMemberTitleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildMemberTitleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildNoticeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildNoticeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildNoticeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildNoticeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGuildMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGuildMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGuildMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGuildMapResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildMemberStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildMemberTitle_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fguild_2eproto() {
  protobuf_AddDesc_game_5fguild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_guild.proto");
  GOOGLE_CHECK(file != NULL);
  GuildInfo_descriptor_ = file->message_type(0);
  static const int GuildInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, total_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, online_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, max_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, self_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leader_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leader_gender_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  GuildMemberInfo_descriptor_ = file->message_type(1);
  static const int GuildMemberInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, member_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, devote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, online_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, gender_),
  };
  GuildMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberInfo_descriptor_,
      GuildMemberInfo::default_instance_,
      GuildMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberInfo));
  GuildDetail_descriptor_ = file->message_type(2);
  static const int GuildDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, member_list_),
  };
  GuildDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDetail_descriptor_,
      GuildDetail::default_instance_,
      GuildDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDetail));
  GuildInviteInfo_descriptor_ = file->message_type(3);
  static const int GuildInviteInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, member_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, member_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, guild_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, gender_),
  };
  GuildInviteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInviteInfo_descriptor_,
      GuildInviteInfo::default_instance_,
      GuildInviteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInviteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInviteInfo));
  GuildApplyInfo_descriptor_ = file->message_type(4);
  static const int GuildApplyInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, fight_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, gender_),
  };
  GuildApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildApplyInfo_descriptor_,
      GuildApplyInfo::default_instance_,
      GuildApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildApplyInfo));
  CreateGuildRequest_descriptor_ = file->message_type(5);
  static const int CreateGuildRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildRequest, name_),
  };
  CreateGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildRequest_descriptor_,
      CreateGuildRequest::default_instance_,
      CreateGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildRequest));
  CreateGuildResponse_descriptor_ = file->message_type(6);
  static const int CreateGuildResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildResponse, detail_),
  };
  CreateGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildResponse_descriptor_,
      CreateGuildResponse::default_instance_,
      CreateGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildResponse));
  DeleteGuildRequest_descriptor_ = file->message_type(7);
  static const int DeleteGuildRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildRequest, guild_id_),
  };
  DeleteGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGuildRequest_descriptor_,
      DeleteGuildRequest::default_instance_,
      DeleteGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGuildRequest));
  DeleteGuildResponse_descriptor_ = file->message_type(8);
  static const int DeleteGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildResponse, error_code_),
  };
  DeleteGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGuildResponse_descriptor_,
      DeleteGuildResponse::default_instance_,
      DeleteGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGuildResponse));
  GetGuildListRequest_descriptor_ = file->message_type(9);
  static const int GetGuildListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListRequest, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListRequest, count_),
  };
  GetGuildListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildListRequest_descriptor_,
      GetGuildListRequest::default_instance_,
      GetGuildListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildListRequest));
  GetGuildListResponse_descriptor_ = file->message_type(10);
  static const int GetGuildListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListResponse, guild_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListResponse, total_count_),
  };
  GetGuildListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildListResponse_descriptor_,
      GetGuildListResponse::default_instance_,
      GetGuildListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildListResponse));
  GetGuildDetailRequest_descriptor_ = file->message_type(11);
  static const int GetGuildDetailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailRequest, guild_id_),
  };
  GetGuildDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildDetailRequest_descriptor_,
      GetGuildDetailRequest::default_instance_,
      GetGuildDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildDetailRequest));
  GetGuildDetailResponse_descriptor_ = file->message_type(12);
  static const int GetGuildDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailResponse, detail_),
  };
  GetGuildDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildDetailResponse_descriptor_,
      GetGuildDetailResponse::default_instance_,
      GetGuildDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildDetailResponse));
  GetGuildMemberListRequest_descriptor_ = file->message_type(13);
  static const int GetGuildMemberListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListRequest, status_),
  };
  GetGuildMemberListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildMemberListRequest_descriptor_,
      GetGuildMemberListRequest::default_instance_,
      GetGuildMemberListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildMemberListRequest));
  GetGuildMemberListResponse_descriptor_ = file->message_type(14);
  static const int GetGuildMemberListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListResponse, member_list_),
  };
  GetGuildMemberListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildMemberListResponse_descriptor_,
      GetGuildMemberListResponse::default_instance_,
      GetGuildMemberListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildMemberListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildMemberListResponse));
  ApplyJoinGuildRequest_descriptor_ = file->message_type(15);
  static const int ApplyJoinGuildRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildRequest, apply_flag_),
  };
  ApplyJoinGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinGuildRequest_descriptor_,
      ApplyJoinGuildRequest::default_instance_,
      ApplyJoinGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinGuildRequest));
  ApplyJoinGuildResponse_descriptor_ = file->message_type(16);
  static const int ApplyJoinGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildResponse, error_code_),
  };
  ApplyJoinGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinGuildResponse_descriptor_,
      ApplyJoinGuildResponse::default_instance_,
      ApplyJoinGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinGuildResponse));
  AnswerJoinGuildRequest_descriptor_ = file->message_type(17);
  static const int AnswerJoinGuildRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildRequest, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildRequest, accept_flag_),
  };
  AnswerJoinGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerJoinGuildRequest_descriptor_,
      AnswerJoinGuildRequest::default_instance_,
      AnswerJoinGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerJoinGuildRequest));
  AnswerJoinGuildResponse_descriptor_ = file->message_type(18);
  static const int AnswerJoinGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildResponse, error_code_),
  };
  AnswerJoinGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerJoinGuildResponse_descriptor_,
      AnswerJoinGuildResponse::default_instance_,
      AnswerJoinGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerJoinGuildResponse));
  AnswerJoinGuildNotify_descriptor_ = file->message_type(19);
  static const int AnswerJoinGuildNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildNotify, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildNotify, accept_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildNotify, guild_name_),
  };
  AnswerJoinGuildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerJoinGuildNotify_descriptor_,
      AnswerJoinGuildNotify::default_instance_,
      AnswerJoinGuildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerJoinGuildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerJoinGuildNotify));
  InviteJoinGuildRequest_descriptor_ = file->message_type(20);
  static const int InviteJoinGuildRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildRequest, member_guid_),
  };
  InviteJoinGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinGuildRequest_descriptor_,
      InviteJoinGuildRequest::default_instance_,
      InviteJoinGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinGuildRequest));
  InviteJoinGuildResponse_descriptor_ = file->message_type(21);
  static const int InviteJoinGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildResponse, error_code_),
  };
  InviteJoinGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinGuildResponse_descriptor_,
      InviteJoinGuildResponse::default_instance_,
      InviteJoinGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinGuildResponse));
  InviteJoinGuildNotify_descriptor_ = file->message_type(22);
  static const int InviteJoinGuildNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, member_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, member_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, guild_grade_),
  };
  InviteJoinGuildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinGuildNotify_descriptor_,
      InviteJoinGuildNotify::default_instance_,
      InviteJoinGuildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinGuildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinGuildNotify));
  GetGuildInviteListRequest_descriptor_ = file->message_type(23);
  static const int GetGuildInviteListRequest_offsets_[1] = {
  };
  GetGuildInviteListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildInviteListRequest_descriptor_,
      GetGuildInviteListRequest::default_instance_,
      GetGuildInviteListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildInviteListRequest));
  GetGuildInviteListResponse_descriptor_ = file->message_type(24);
  static const int GetGuildInviteListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListResponse, invite_list_),
  };
  GetGuildInviteListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildInviteListResponse_descriptor_,
      GetGuildInviteListResponse::default_instance_,
      GetGuildInviteListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInviteListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildInviteListResponse));
  GetGuildApplyListRequest_descriptor_ = file->message_type(25);
  static const int GetGuildApplyListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListRequest, guild_id_),
  };
  GetGuildApplyListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildApplyListRequest_descriptor_,
      GetGuildApplyListRequest::default_instance_,
      GetGuildApplyListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildApplyListRequest));
  GetGuildApplyListResponse_descriptor_ = file->message_type(26);
  static const int GetGuildApplyListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListResponse, apply_list_),
  };
  GetGuildApplyListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildApplyListResponse_descriptor_,
      GetGuildApplyListResponse::default_instance_,
      GetGuildApplyListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildApplyListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildApplyListResponse));
  GuildMemberNotify_descriptor_ = file->message_type(27);
  static const int GuildMemberNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, member_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, guild_name_),
  };
  GuildMemberNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberNotify_descriptor_,
      GuildMemberNotify::default_instance_,
      GuildMemberNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberNotify));
  GuildTitleNotify_descriptor_ = file->message_type(28);
  static const int GuildTitleNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTitleNotify, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTitleNotify, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTitleNotify, guild_id_),
  };
  GuildTitleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildTitleNotify_descriptor_,
      GuildTitleNotify::default_instance_,
      GuildTitleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTitleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildTitleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildTitleNotify));
  ReplyJoinGuildRequest_descriptor_ = file->message_type(29);
  static const int ReplyJoinGuildRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildRequest, accept_flag_),
  };
  ReplyJoinGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyJoinGuildRequest_descriptor_,
      ReplyJoinGuildRequest::default_instance_,
      ReplyJoinGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyJoinGuildRequest));
  ReplyJoinGuildResponse_descriptor_ = file->message_type(30);
  static const int ReplyJoinGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildResponse, error_code_),
  };
  ReplyJoinGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyJoinGuildResponse_descriptor_,
      ReplyJoinGuildResponse::default_instance_,
      ReplyJoinGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyJoinGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyJoinGuildResponse));
  DeleteGuildMemberRequest_descriptor_ = file->message_type(31);
  static const int DeleteGuildMemberRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberRequest, member_guid_),
  };
  DeleteGuildMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGuildMemberRequest_descriptor_,
      DeleteGuildMemberRequest::default_instance_,
      DeleteGuildMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGuildMemberRequest));
  DeleteGuildMemberResponse_descriptor_ = file->message_type(32);
  static const int DeleteGuildMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberResponse, error_code_),
  };
  DeleteGuildMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGuildMemberResponse_descriptor_,
      DeleteGuildMemberResponse::default_instance_,
      DeleteGuildMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGuildMemberResponse));
  DeleteGuildMemberNotify_descriptor_ = file->message_type(33);
  static const int DeleteGuildMemberNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberNotify, guild_id_),
  };
  DeleteGuildMemberNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteGuildMemberNotify_descriptor_,
      DeleteGuildMemberNotify::default_instance_,
      DeleteGuildMemberNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteGuildMemberNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteGuildMemberNotify));
  SetGuildMemberTitleRequest_descriptor_ = file->message_type(34);
  static const int SetGuildMemberTitleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleRequest, member_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleRequest, member_title_),
  };
  SetGuildMemberTitleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildMemberTitleRequest_descriptor_,
      SetGuildMemberTitleRequest::default_instance_,
      SetGuildMemberTitleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildMemberTitleRequest));
  SetGuildMemberTitleResponse_descriptor_ = file->message_type(35);
  static const int SetGuildMemberTitleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleResponse, error_code_),
  };
  SetGuildMemberTitleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildMemberTitleResponse_descriptor_,
      SetGuildMemberTitleResponse::default_instance_,
      SetGuildMemberTitleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildMemberTitleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildMemberTitleResponse));
  SetGuildNoticeRequest_descriptor_ = file->message_type(36);
  static const int SetGuildNoticeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRequest, content_),
  };
  SetGuildNoticeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildNoticeRequest_descriptor_,
      SetGuildNoticeRequest::default_instance_,
      SetGuildNoticeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildNoticeRequest));
  SetGuildNoticeResponse_descriptor_ = file->message_type(37);
  static const int SetGuildNoticeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeResponse, error_code_),
  };
  SetGuildNoticeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildNoticeResponse_descriptor_,
      SetGuildNoticeResponse::default_instance_,
      SetGuildNoticeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildNoticeResponse));
  EnterGuildMapRequest_descriptor_ = file->message_type(38);
  static const int EnterGuildMapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapRequest, npc_id_),
  };
  EnterGuildMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildMapRequest_descriptor_,
      EnterGuildMapRequest::default_instance_,
      EnterGuildMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildMapRequest));
  EnterGuildMapResponse_descriptor_ = file->message_type(39);
  static const int EnterGuildMapResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, map_y_),
  };
  EnterGuildMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildMapResponse_descriptor_,
      EnterGuildMapResponse::default_instance_,
      EnterGuildMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildMapResponse));
  LeaveGuildMapRequest_descriptor_ = file->message_type(40);
  static const int LeaveGuildMapRequest_offsets_[1] = {
  };
  LeaveGuildMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGuildMapRequest_descriptor_,
      LeaveGuildMapRequest::default_instance_,
      LeaveGuildMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGuildMapRequest));
  LeaveGuildMapResponse_descriptor_ = file->message_type(41);
  static const int LeaveGuildMapResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, map_y_),
  };
  LeaveGuildMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGuildMapResponse_descriptor_,
      LeaveGuildMapResponse::default_instance_,
      LeaveGuildMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGuildMapResponse));
  GuildMemberStatus_descriptor_ = file->enum_type(0);
  GuildMemberTitle_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fguild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberInfo_descriptor_, &GuildMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDetail_descriptor_, &GuildDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInviteInfo_descriptor_, &GuildInviteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildApplyInfo_descriptor_, &GuildApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildRequest_descriptor_, &CreateGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildResponse_descriptor_, &CreateGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGuildRequest_descriptor_, &DeleteGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGuildResponse_descriptor_, &DeleteGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildListRequest_descriptor_, &GetGuildListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildListResponse_descriptor_, &GetGuildListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildDetailRequest_descriptor_, &GetGuildDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildDetailResponse_descriptor_, &GetGuildDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildMemberListRequest_descriptor_, &GetGuildMemberListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildMemberListResponse_descriptor_, &GetGuildMemberListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinGuildRequest_descriptor_, &ApplyJoinGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinGuildResponse_descriptor_, &ApplyJoinGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerJoinGuildRequest_descriptor_, &AnswerJoinGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerJoinGuildResponse_descriptor_, &AnswerJoinGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerJoinGuildNotify_descriptor_, &AnswerJoinGuildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinGuildRequest_descriptor_, &InviteJoinGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinGuildResponse_descriptor_, &InviteJoinGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinGuildNotify_descriptor_, &InviteJoinGuildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildInviteListRequest_descriptor_, &GetGuildInviteListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildInviteListResponse_descriptor_, &GetGuildInviteListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildApplyListRequest_descriptor_, &GetGuildApplyListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildApplyListResponse_descriptor_, &GetGuildApplyListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberNotify_descriptor_, &GuildMemberNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildTitleNotify_descriptor_, &GuildTitleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyJoinGuildRequest_descriptor_, &ReplyJoinGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyJoinGuildResponse_descriptor_, &ReplyJoinGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGuildMemberRequest_descriptor_, &DeleteGuildMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGuildMemberResponse_descriptor_, &DeleteGuildMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteGuildMemberNotify_descriptor_, &DeleteGuildMemberNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildMemberTitleRequest_descriptor_, &SetGuildMemberTitleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildMemberTitleResponse_descriptor_, &SetGuildMemberTitleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildNoticeRequest_descriptor_, &SetGuildNoticeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildNoticeResponse_descriptor_, &SetGuildNoticeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildMapRequest_descriptor_, &EnterGuildMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildMapResponse_descriptor_, &EnterGuildMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGuildMapRequest_descriptor_, &LeaveGuildMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGuildMapResponse_descriptor_, &LeaveGuildMapResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fguild_2eproto() {
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete GuildMemberInfo::default_instance_;
  delete GuildMemberInfo_reflection_;
  delete GuildDetail::default_instance_;
  delete GuildDetail_reflection_;
  delete GuildInviteInfo::default_instance_;
  delete GuildInviteInfo_reflection_;
  delete GuildApplyInfo::default_instance_;
  delete GuildApplyInfo_reflection_;
  delete CreateGuildRequest::default_instance_;
  delete CreateGuildRequest_reflection_;
  delete CreateGuildResponse::default_instance_;
  delete CreateGuildResponse_reflection_;
  delete DeleteGuildRequest::default_instance_;
  delete DeleteGuildRequest_reflection_;
  delete DeleteGuildResponse::default_instance_;
  delete DeleteGuildResponse_reflection_;
  delete GetGuildListRequest::default_instance_;
  delete GetGuildListRequest_reflection_;
  delete GetGuildListResponse::default_instance_;
  delete GetGuildListResponse_reflection_;
  delete GetGuildDetailRequest::default_instance_;
  delete GetGuildDetailRequest_reflection_;
  delete GetGuildDetailResponse::default_instance_;
  delete GetGuildDetailResponse_reflection_;
  delete GetGuildMemberListRequest::default_instance_;
  delete GetGuildMemberListRequest_reflection_;
  delete GetGuildMemberListResponse::default_instance_;
  delete GetGuildMemberListResponse_reflection_;
  delete ApplyJoinGuildRequest::default_instance_;
  delete ApplyJoinGuildRequest_reflection_;
  delete ApplyJoinGuildResponse::default_instance_;
  delete ApplyJoinGuildResponse_reflection_;
  delete AnswerJoinGuildRequest::default_instance_;
  delete AnswerJoinGuildRequest_reflection_;
  delete AnswerJoinGuildResponse::default_instance_;
  delete AnswerJoinGuildResponse_reflection_;
  delete AnswerJoinGuildNotify::default_instance_;
  delete AnswerJoinGuildNotify_reflection_;
  delete InviteJoinGuildRequest::default_instance_;
  delete InviteJoinGuildRequest_reflection_;
  delete InviteJoinGuildResponse::default_instance_;
  delete InviteJoinGuildResponse_reflection_;
  delete InviteJoinGuildNotify::default_instance_;
  delete InviteJoinGuildNotify_reflection_;
  delete GetGuildInviteListRequest::default_instance_;
  delete GetGuildInviteListRequest_reflection_;
  delete GetGuildInviteListResponse::default_instance_;
  delete GetGuildInviteListResponse_reflection_;
  delete GetGuildApplyListRequest::default_instance_;
  delete GetGuildApplyListRequest_reflection_;
  delete GetGuildApplyListResponse::default_instance_;
  delete GetGuildApplyListResponse_reflection_;
  delete GuildMemberNotify::default_instance_;
  delete GuildMemberNotify_reflection_;
  delete GuildTitleNotify::default_instance_;
  delete GuildTitleNotify_reflection_;
  delete ReplyJoinGuildRequest::default_instance_;
  delete ReplyJoinGuildRequest_reflection_;
  delete ReplyJoinGuildResponse::default_instance_;
  delete ReplyJoinGuildResponse_reflection_;
  delete DeleteGuildMemberRequest::default_instance_;
  delete DeleteGuildMemberRequest_reflection_;
  delete DeleteGuildMemberResponse::default_instance_;
  delete DeleteGuildMemberResponse_reflection_;
  delete DeleteGuildMemberNotify::default_instance_;
  delete DeleteGuildMemberNotify_reflection_;
  delete SetGuildMemberTitleRequest::default_instance_;
  delete SetGuildMemberTitleRequest_reflection_;
  delete SetGuildMemberTitleResponse::default_instance_;
  delete SetGuildMemberTitleResponse_reflection_;
  delete SetGuildNoticeRequest::default_instance_;
  delete SetGuildNoticeRequest_reflection_;
  delete SetGuildNoticeResponse::default_instance_;
  delete SetGuildNoticeResponse_reflection_;
  delete EnterGuildMapRequest::default_instance_;
  delete EnterGuildMapRequest_reflection_;
  delete EnterGuildMapResponse::default_instance_;
  delete EnterGuildMapResponse_reflection_;
  delete LeaveGuildMapRequest::default_instance_;
  delete LeaveGuildMapRequest_reflection_;
  delete LeaveGuildMapResponse::default_instance_;
  delete LeaveGuildMapResponse_reflection_;
}

void protobuf_AddDesc_game_5fguild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020game_guild.proto\022\020protocols.common\032\021ga"
    "me_common.proto\"\271\002\n\tGuildInfo\022\020\n\010guild_i"
    "d\030\001 \001(\005\022\020\n\005grade\030\002 \001(\005:\0011\022\024\n\014total_membe"
    "r\030\003 \001(\005\022\030\n\ronline_member\030\004 \001(\005:\0010\022\021\n\tlea"
    "der_id\030\005 \001(\003\022\022\n\nguild_name\030\006 \001(\t\022\023\n\013lead"
    "er_name\030\007 \001(\t\022\022\n\nmax_member\030\010 \001(\005\022\023\n\013sel"
    "f_status\030\t \001(\005\022\017\n\004rank\030\n \001(\005:\0010\022\033\n\020leade"
    "r_vip_level\030\013 \001(\005:\0010\022\016\n\006notice\030\014 \001(\t\0225\n\r"
    "leader_gender\030\r \001(\0162\030.protocols.common.G"
    "ender:\004MALE\"\243\002\n\017GuildMemberInfo\022\023\n\013membe"
    "r_guid\030\001 \002(\003\022\027\n\014member_level\030\002 \001(\005:\0011\022\021\n"
    "\006devote\030\003 \001(\005:\0010\022\020\n\005title\030\005 \001(\005:\0010\022\020\n\010jo"
    "b_type\030\007 \001(\005\022\016\n\006status\030\010 \001(\005\022\032\n\013online_f"
    "lag\030\006 \001(\010:\005false\022\014\n\004name\030\004 \001(\t\022\024\n\tvip_le"
    "vel\030\t \001(\005:\0010\022\024\n\tserver_id\030\n \001(\005:\0010\022\025\n\nlo"
    "gin_time\030\013 \001(\005:\0010\022.\n\006gender\030\014 \001(\0162\030.prot"
    "ocols.common.Gender:\004MALE\"\257\001\n\013GuildDetai"
    "l\022)\n\004info\030\001 \001(\0132\033.protocols.common.Guild"
    "Info\022\020\n\005money\030\002 \001(\005:\0010\022\016\n\003exp\030\003 \001(\005:\0010\022\013"
    "\n\003fee\030\005 \001(\005\022\016\n\006notice\030\006 \001(\t\0226\n\013member_li"
    "st\030\004 \003(\0132!.protocols.common.GuildMemberI"
    "nfo\"\317\001\n\017GuildInviteInfo\022\023\n\013member_guid\030\001"
    " \001(\003\022\023\n\013member_name\030\002 \001(\t\022\020\n\010guild_id\030\003 "
    "\001(\005\022\021\n\tserver_id\030\005 \001(\005\022\022\n\nguild_name\030\004 \001"
    "(\t\022\024\n\014member_level\030\006 \001(\005\022\023\n\013guild_grade\030"
    "\007 \001(\005\022.\n\006gender\030\010 \001(\0162\030.protocols.common"
    ".Gender:\004MALE\"\300\001\n\016GuildApplyInfo\022\014\n\004guid"
    "\030\001 \001(\003\022\026\n\016fight_capacity\030\002 \001(\005\022\020\n\010job_ty"
    "pe\030\003 \001(\005\022\022\n\nrole_level\030\004 \001(\005\022\021\n\tvip_leve"
    "l\030\005 \001(\005\022\021\n\tserver_id\030\006 \001(\005\022\014\n\004name\030\007 \001(\t"
    "\022.\n\006gender\030\010 \001(\0162\030.protocols.common.Gend"
    "er:\004MALE\"\"\n\022CreateGuildRequest\022\014\n\004name\030\001"
    " \001(\t\"X\n\023CreateGuildResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\022-\n\006detail\030\002 \001(\0132\035.protocols.comm"
    "on.GuildDetail\"&\n\022DeleteGuildRequest\022\020\n\010"
    "guild_id\030\001 \001(\005\")\n\023DeleteGuildResponse\022\022\n"
    "\nerror_code\030\001 \002(\005\"3\n\023GetGuildListRequest"
    "\022\r\n\005begin\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"p\n\024GetGui"
    "ldListResponse\022\022\n\nerror_code\030\001 \002(\005\022/\n\ngu"
    "ild_list\030\002 \003(\0132\033.protocols.common.GuildI"
    "nfo\022\023\n\013total_count\030\003 \001(\005\")\n\025GetGuildDeta"
    "ilRequest\022\020\n\010guild_id\030\001 \001(\005\"[\n\026GetGuildD"
    "etailResponse\022\022\n\nerror_code\030\001 \002(\005\022-\n\006det"
    "ail\030\002 \001(\0132\035.protocols.common.GuildDetail"
    "\"+\n\031GetGuildMemberListRequest\022\016\n\006status\030"
    "\001 \001(\005\"h\n\032GetGuildMemberListResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\0226\n\013member_list\030\002 \003(\0132!.p"
    "rotocols.common.GuildMemberInfo\"C\n\025Apply"
    "JoinGuildRequest\022\020\n\010guild_id\030\001 \002(\005\022\030\n\nap"
    "ply_flag\030\002 \001(\010:\004true\",\n\026ApplyJoinGuildRe"
    "sponse\022\022\n\nerror_code\030\001 \002(\005\"B\n\026AnswerJoin"
    "GuildRequest\022\023\n\013member_guid\030\002 \002(\003\022\023\n\013acc"
    "ept_flag\030\003 \002(\010\"-\n\027AnswerJoinGuildRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\"R\n\025AnswerJoinGuild"
    "Notify\022\020\n\010guild_id\030\001 \002(\005\022\023\n\013accept_flag\030"
    "\002 \002(\010\022\022\n\nguild_name\030\003 \001(\t\"-\n\026InviteJoinG"
    "uildRequest\022\023\n\013member_guid\030\001 \002(\003\"-\n\027Invi"
    "teJoinGuildResponse\022\022\n\nerror_code\030\001 \002(\005\""
    "\245\001\n\025InviteJoinGuildNotify\022\023\n\013member_guid"
    "\030\001 \001(\003\022\023\n\013member_name\030\002 \001(\t\022\020\n\010guild_id\030"
    "\003 \001(\005\022\021\n\tserver_id\030\005 \001(\005\022\022\n\nguild_name\030\004"
    " \001(\t\022\024\n\014member_level\030\006 \001(\005\022\023\n\013guild_grad"
    "e\030\007 \001(\005\"\033\n\031GetGuildInviteListRequest\"h\n\032"
    "GetGuildInviteListResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\0226\n\013invite_list\030\002 \003(\0132!.protocols."
    "common.GuildInviteInfo\",\n\030GetGuildApplyL"
    "istRequest\022\020\n\010guild_id\030\001 \001(\005\"e\n\031GetGuild"
    "ApplyListResponse\022\022\n\nerror_code\030\001 \002(\005\0224\n"
    "\napply_list\030\002 \003(\0132 .protocols.common.Gui"
    "ldApplyInfo\"\201\001\n\021GuildMemberNotify\0226\n\013mem"
    "ber_info\030\001 \001(\0132!.protocols.common.GuildM"
    "emberInfo\022\016\n\006status\030\002 \001(\005\022\020\n\010guild_id\030\003 "
    "\002(\005\022\022\n\nguild_name\030\004 \001(\t\"H\n\020GuildTitleNot"
    "ify\022\023\n\013member_guid\030\001 \001(\003\022\r\n\005title\030\002 \001(\005\022"
    "\020\n\010guild_id\030\003 \001(\005\"D\n\025ReplyJoinGuildReque"
    "st\022\020\n\010guild_id\030\001 \002(\005\022\031\n\013accept_flag\030\002 \001("
    "\010:\004true\",\n\026ReplyJoinGuildResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\"/\n\030DeleteGuildMemberReques"
    "t\022\023\n\013member_guid\030\001 \002(\003\"/\n\031DeleteGuildMem"
    "berResponse\022\022\n\nerror_code\030\001 \002(\005\"+\n\027Delet"
    "eGuildMemberNotify\022\020\n\010guild_id\030\001 \002(\005\"G\n\032"
    "SetGuildMemberTitleRequest\022\023\n\013member_gui"
    "d\030\001 \002(\003\022\024\n\014member_title\030\002 \001(\005\"1\n\033SetGuil"
    "dMemberTitleResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\"(\n\025SetGuildNoticeRequest\022\017\n\007content\030\001 \001"
    "(\t\",\n\026SetGuildNoticeResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\")\n\024EnterGuildMapRequest\022\021\n\006npc_"
    "id\030\001 \001(\005:\0010\"b\n\025EnterGuildMapResponse\022\022\n\n"
    "error_code\030\001 \002(\005\022\021\n\006map_id\030\003 \001(\005:\0010\022\020\n\005m"
    "ap_x\030\004 \001(\005:\0010\022\020\n\005map_y\030\005 \001(\005:\0010\"\026\n\024Leave"
    "GuildMapRequest\"b\n\025LeaveGuildMapResponse"
    "\022\022\n\nerror_code\030\001 \002(\005\022\021\n\006map_id\030\003 \001(\005:\0010\022"
    "\020\n\005map_x\030\004 \001(\005:\0010\022\020\n\005map_y\030\005 \001(\005:\0010*}\n\021G"
    "uildMemberStatus\022\027\n\023MEMBER_STATUS_APPLY\020"
    "\001\022\030\n\024MEMBER_STATUS_INVITE\020\002\022\032\n\026MEMBER_ST"
    "ATUS_ACCEPTED\020\003\022\031\n\025MEMBER_STATUS_DELETED"
    "\020\004*\222\001\n\020GuildMemberTitle\022\027\n\023MEMBER_TITLE_"
    "NORMAL\020\000\022\026\n\022MEMBER_TITLE_ELITE\020\001\022\026\n\022MEMB"
    "ER_TITLE_ELDER\020\002\022\034\n\030MEMBER_TITLE_VICE_LE"
    "ADER\020\003\022\027\n\023MEMBER_TITLE_LEADER\020\004", 3991);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_guild.proto", &protobuf_RegisterTypes);
  GuildInfo::default_instance_ = new GuildInfo();
  GuildMemberInfo::default_instance_ = new GuildMemberInfo();
  GuildDetail::default_instance_ = new GuildDetail();
  GuildInviteInfo::default_instance_ = new GuildInviteInfo();
  GuildApplyInfo::default_instance_ = new GuildApplyInfo();
  CreateGuildRequest::default_instance_ = new CreateGuildRequest();
  CreateGuildResponse::default_instance_ = new CreateGuildResponse();
  DeleteGuildRequest::default_instance_ = new DeleteGuildRequest();
  DeleteGuildResponse::default_instance_ = new DeleteGuildResponse();
  GetGuildListRequest::default_instance_ = new GetGuildListRequest();
  GetGuildListResponse::default_instance_ = new GetGuildListResponse();
  GetGuildDetailRequest::default_instance_ = new GetGuildDetailRequest();
  GetGuildDetailResponse::default_instance_ = new GetGuildDetailResponse();
  GetGuildMemberListRequest::default_instance_ = new GetGuildMemberListRequest();
  GetGuildMemberListResponse::default_instance_ = new GetGuildMemberListResponse();
  ApplyJoinGuildRequest::default_instance_ = new ApplyJoinGuildRequest();
  ApplyJoinGuildResponse::default_instance_ = new ApplyJoinGuildResponse();
  AnswerJoinGuildRequest::default_instance_ = new AnswerJoinGuildRequest();
  AnswerJoinGuildResponse::default_instance_ = new AnswerJoinGuildResponse();
  AnswerJoinGuildNotify::default_instance_ = new AnswerJoinGuildNotify();
  InviteJoinGuildRequest::default_instance_ = new InviteJoinGuildRequest();
  InviteJoinGuildResponse::default_instance_ = new InviteJoinGuildResponse();
  InviteJoinGuildNotify::default_instance_ = new InviteJoinGuildNotify();
  GetGuildInviteListRequest::default_instance_ = new GetGuildInviteListRequest();
  GetGuildInviteListResponse::default_instance_ = new GetGuildInviteListResponse();
  GetGuildApplyListRequest::default_instance_ = new GetGuildApplyListRequest();
  GetGuildApplyListResponse::default_instance_ = new GetGuildApplyListResponse();
  GuildMemberNotify::default_instance_ = new GuildMemberNotify();
  GuildTitleNotify::default_instance_ = new GuildTitleNotify();
  ReplyJoinGuildRequest::default_instance_ = new ReplyJoinGuildRequest();
  ReplyJoinGuildResponse::default_instance_ = new ReplyJoinGuildResponse();
  DeleteGuildMemberRequest::default_instance_ = new DeleteGuildMemberRequest();
  DeleteGuildMemberResponse::default_instance_ = new DeleteGuildMemberResponse();
  DeleteGuildMemberNotify::default_instance_ = new DeleteGuildMemberNotify();
  SetGuildMemberTitleRequest::default_instance_ = new SetGuildMemberTitleRequest();
  SetGuildMemberTitleResponse::default_instance_ = new SetGuildMemberTitleResponse();
  SetGuildNoticeRequest::default_instance_ = new SetGuildNoticeRequest();
  SetGuildNoticeResponse::default_instance_ = new SetGuildNoticeResponse();
  EnterGuildMapRequest::default_instance_ = new EnterGuildMapRequest();
  EnterGuildMapResponse::default_instance_ = new EnterGuildMapResponse();
  LeaveGuildMapRequest::default_instance_ = new LeaveGuildMapRequest();
  LeaveGuildMapResponse::default_instance_ = new LeaveGuildMapResponse();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMemberInfo::default_instance_->InitAsDefaultInstance();
  GuildDetail::default_instance_->InitAsDefaultInstance();
  GuildInviteInfo::default_instance_->InitAsDefaultInstance();
  GuildApplyInfo::default_instance_->InitAsDefaultInstance();
  CreateGuildRequest::default_instance_->InitAsDefaultInstance();
  CreateGuildResponse::default_instance_->InitAsDefaultInstance();
  DeleteGuildRequest::default_instance_->InitAsDefaultInstance();
  DeleteGuildResponse::default_instance_->InitAsDefaultInstance();
  GetGuildListRequest::default_instance_->InitAsDefaultInstance();
  GetGuildListResponse::default_instance_->InitAsDefaultInstance();
  GetGuildDetailRequest::default_instance_->InitAsDefaultInstance();
  GetGuildDetailResponse::default_instance_->InitAsDefaultInstance();
  GetGuildMemberListRequest::default_instance_->InitAsDefaultInstance();
  GetGuildMemberListResponse::default_instance_->InitAsDefaultInstance();
  ApplyJoinGuildRequest::default_instance_->InitAsDefaultInstance();
  ApplyJoinGuildResponse::default_instance_->InitAsDefaultInstance();
  AnswerJoinGuildRequest::default_instance_->InitAsDefaultInstance();
  AnswerJoinGuildResponse::default_instance_->InitAsDefaultInstance();
  AnswerJoinGuildNotify::default_instance_->InitAsDefaultInstance();
  InviteJoinGuildRequest::default_instance_->InitAsDefaultInstance();
  InviteJoinGuildResponse::default_instance_->InitAsDefaultInstance();
  InviteJoinGuildNotify::default_instance_->InitAsDefaultInstance();
  GetGuildInviteListRequest::default_instance_->InitAsDefaultInstance();
  GetGuildInviteListResponse::default_instance_->InitAsDefaultInstance();
  GetGuildApplyListRequest::default_instance_->InitAsDefaultInstance();
  GetGuildApplyListResponse::default_instance_->InitAsDefaultInstance();
  GuildMemberNotify::default_instance_->InitAsDefaultInstance();
  GuildTitleNotify::default_instance_->InitAsDefaultInstance();
  ReplyJoinGuildRequest::default_instance_->InitAsDefaultInstance();
  ReplyJoinGuildResponse::default_instance_->InitAsDefaultInstance();
  DeleteGuildMemberRequest::default_instance_->InitAsDefaultInstance();
  DeleteGuildMemberResponse::default_instance_->InitAsDefaultInstance();
  DeleteGuildMemberNotify::default_instance_->InitAsDefaultInstance();
  SetGuildMemberTitleRequest::default_instance_->InitAsDefaultInstance();
  SetGuildMemberTitleResponse::default_instance_->InitAsDefaultInstance();
  SetGuildNoticeRequest::default_instance_->InitAsDefaultInstance();
  SetGuildNoticeResponse::default_instance_->InitAsDefaultInstance();
  EnterGuildMapRequest::default_instance_->InitAsDefaultInstance();
  EnterGuildMapResponse::default_instance_->InitAsDefaultInstance();
  LeaveGuildMapRequest::default_instance_->InitAsDefaultInstance();
  LeaveGuildMapResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fguild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fguild_2eproto {
  StaticDescriptorInitializer_game_5fguild_2eproto() {
    protobuf_AddDesc_game_5fguild_2eproto();
  }
} static_descriptor_initializer_game_5fguild_2eproto_;

const ::google::protobuf::EnumDescriptor* GuildMemberStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberStatus_descriptor_;
}
bool GuildMemberStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildMemberTitle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberTitle_descriptor_;
}
bool GuildMemberTitle_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kGuildIdFieldNumber;
const int GuildInfo::kGradeFieldNumber;
const int GuildInfo::kTotalMemberFieldNumber;
const int GuildInfo::kOnlineMemberFieldNumber;
const int GuildInfo::kLeaderIdFieldNumber;
const int GuildInfo::kGuildNameFieldNumber;
const int GuildInfo::kLeaderNameFieldNumber;
const int GuildInfo::kMaxMemberFieldNumber;
const int GuildInfo::kSelfStatusFieldNumber;
const int GuildInfo::kRankFieldNumber;
const int GuildInfo::kLeaderVipLevelFieldNumber;
const int GuildInfo::kNoticeFieldNumber;
const int GuildInfo::kLeaderGenderFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInfo::InitAsDefaultInstance() {
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  grade_ = 1;
  total_member_ = 0;
  online_member_ = 0;
  leader_id_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_member_ = 0;
  self_status_ = 0;
  rank_ = 0;
  leader_vip_level_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_gender_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    grade_ = 1;
    total_member_ = 0;
    online_member_ = 0;
    leader_id_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    max_member_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    self_status_ = 0;
    rank_ = 0;
    leader_vip_level_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    leader_gender_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_member;
        break;
      }
      
      // optional int32 total_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_member_)));
          set_has_total_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_online_member;
        break;
      }
      
      // optional int32 online_member = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_member_)));
          set_has_online_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader_id;
        break;
      }
      
      // optional int64 leader_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_leader_name;
        break;
      }
      
      // optional string leader_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_member;
        break;
      }
      
      // optional int32 max_member = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_member_)));
          set_has_max_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_self_status;
        break;
      }
      
      // optional int32 self_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_status_)));
          set_has_self_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_leader_vip_level;
        break;
      }
      
      // optional int32 leader_vip_level = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_vip_level_)));
          set_has_leader_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_notice;
        break;
      }
      
      // optional string notice = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_leader_gender;
        break;
      }
      
      // optional .protocols.common.Gender leader_gender = 13 [default = MALE];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_leader_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // optional int32 grade = 2 [default = 1];
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  // optional int32 total_member = 3;
  if (has_total_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_member(), output);
  }
  
  // optional int32 online_member = 4 [default = 0];
  if (has_online_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->online_member(), output);
  }
  
  // optional int64 leader_id = 5;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->leader_id(), output);
  }
  
  // optional string guild_name = 6;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guild_name(), output);
  }
  
  // optional string leader_name = 7;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->leader_name(), output);
  }
  
  // optional int32 max_member = 8;
  if (has_max_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_member(), output);
  }
  
  // optional int32 self_status = 9;
  if (has_self_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->self_status(), output);
  }
  
  // optional int32 rank = 10 [default = 0];
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rank(), output);
  }
  
  // optional int32 leader_vip_level = 11 [default = 0];
  if (has_leader_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->leader_vip_level(), output);
  }
  
  // optional string notice = 12;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->notice(), output);
  }
  
  // optional .protocols.common.Gender leader_gender = 13 [default = MALE];
  if (has_leader_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->leader_gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // optional int32 grade = 2 [default = 1];
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  // optional int32 total_member = 3;
  if (has_total_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_member(), target);
  }
  
  // optional int32 online_member = 4 [default = 0];
  if (has_online_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->online_member(), target);
  }
  
  // optional int64 leader_id = 5;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->leader_id(), target);
  }
  
  // optional string guild_name = 6;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guild_name(), target);
  }
  
  // optional string leader_name = 7;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leader_name(), target);
  }
  
  // optional int32 max_member = 8;
  if (has_max_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_member(), target);
  }
  
  // optional int32 self_status = 9;
  if (has_self_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->self_status(), target);
  }
  
  // optional int32 rank = 10 [default = 0];
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rank(), target);
  }
  
  // optional int32 leader_vip_level = 11 [default = 0];
  if (has_leader_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->leader_vip_level(), target);
  }
  
  // optional string notice = 12;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->notice(), target);
  }
  
  // optional .protocols.common.Gender leader_gender = 13 [default = MALE];
  if (has_leader_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->leader_gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional int32 grade = 2 [default = 1];
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional int32 total_member = 3;
    if (has_total_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_member());
    }
    
    // optional int32 online_member = 4 [default = 0];
    if (has_online_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_member());
    }
    
    // optional int64 leader_id = 5;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_id());
    }
    
    // optional string guild_name = 6;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional string leader_name = 7;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // optional int32 max_member = 8;
    if (has_max_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_member());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 self_status = 9;
    if (has_self_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_status());
    }
    
    // optional int32 rank = 10 [default = 0];
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int32 leader_vip_level = 11 [default = 0];
    if (has_leader_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_vip_level());
    }
    
    // optional string notice = 12;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
    // optional .protocols.common.Gender leader_gender = 13 [default = MALE];
    if (has_leader_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leader_gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_total_member()) {
      set_total_member(from.total_member());
    }
    if (from.has_online_member()) {
      set_online_member(from.online_member());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_max_member()) {
      set_max_member(from.max_member());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_self_status()) {
      set_self_status(from.self_status());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_leader_vip_level()) {
      set_leader_vip_level(from.leader_vip_level());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_leader_gender()) {
      set_leader_gender(from.leader_gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {
  
  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(grade_, other->grade_);
    std::swap(total_member_, other->total_member_);
    std::swap(online_member_, other->online_member_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(max_member_, other->max_member_);
    std::swap(self_status_, other->self_status_);
    std::swap(rank_, other->rank_);
    std::swap(leader_vip_level_, other->leader_vip_level_);
    std::swap(notice_, other->notice_);
    std::swap(leader_gender_, other->leader_gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberInfo::kMemberGuidFieldNumber;
const int GuildMemberInfo::kMemberLevelFieldNumber;
const int GuildMemberInfo::kDevoteFieldNumber;
const int GuildMemberInfo::kTitleFieldNumber;
const int GuildMemberInfo::kJobTypeFieldNumber;
const int GuildMemberInfo::kStatusFieldNumber;
const int GuildMemberInfo::kOnlineFlagFieldNumber;
const int GuildMemberInfo::kNameFieldNumber;
const int GuildMemberInfo::kVipLevelFieldNumber;
const int GuildMemberInfo::kServerIdFieldNumber;
const int GuildMemberInfo::kLoginTimeFieldNumber;
const int GuildMemberInfo::kGenderFieldNumber;
#endif  // !_MSC_VER

GuildMemberInfo::GuildMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberInfo::InitAsDefaultInstance() {
}

GuildMemberInfo::GuildMemberInfo(const GuildMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  member_level_ = 1;
  devote_ = 0;
  title_ = 0;
  job_type_ = 0;
  status_ = 0;
  online_flag_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_level_ = 0;
  server_id_ = 0;
  login_time_ = 0;
  gender_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberInfo::~GuildMemberInfo() {
  SharedDtor();
}

void GuildMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberInfo_descriptor_;
}

const GuildMemberInfo& GuildMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildMemberInfo* GuildMemberInfo::default_instance_ = NULL;

GuildMemberInfo* GuildMemberInfo::New() const {
  return new GuildMemberInfo;
}

void GuildMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    member_level_ = 1;
    devote_ = 0;
    title_ = 0;
    job_type_ = 0;
    status_ = 0;
    online_flag_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_level_ = 0;
    server_id_ = 0;
    login_time_ = 0;
    gender_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_level;
        break;
      }
      
      // optional int32 member_level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_level_)));
          set_has_member_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_devote;
        break;
      }
      
      // optional int32 devote = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devote_)));
          set_has_devote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }
      
      // optional int32 title = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online_flag;
        break;
      }
      
      // optional bool online_flag = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_flag_)));
          set_has_online_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job_type;
        break;
      }
      
      // optional int32 job_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_type_)));
          set_has_job_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }
      
      // optional int32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_login_time;
        break;
      }
      
      // optional int32 login_time = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 12 [default = MALE];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  // optional int32 member_level = 2 [default = 1];
  if (has_member_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->member_level(), output);
  }
  
  // optional int32 devote = 3 [default = 0];
  if (has_devote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->devote(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 title = 5 [default = 0];
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->title(), output);
  }
  
  // optional bool online_flag = 6 [default = false];
  if (has_online_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->online_flag(), output);
  }
  
  // optional int32 job_type = 7;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job_type(), output);
  }
  
  // optional int32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }
  
  // optional int32 vip_level = 9 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip_level(), output);
  }
  
  // optional int32 server_id = 10 [default = 0];
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_id(), output);
  }
  
  // optional int32 login_time = 11 [default = 0];
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->login_time(), output);
  }
  
  // optional .protocols.common.Gender gender = 12 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  // optional int32 member_level = 2 [default = 1];
  if (has_member_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->member_level(), target);
  }
  
  // optional int32 devote = 3 [default = 0];
  if (has_devote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->devote(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 title = 5 [default = 0];
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->title(), target);
  }
  
  // optional bool online_flag = 6 [default = false];
  if (has_online_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->online_flag(), target);
  }
  
  // optional int32 job_type = 7;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job_type(), target);
  }
  
  // optional int32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->status(), target);
  }
  
  // optional int32 vip_level = 9 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip_level(), target);
  }
  
  // optional int32 server_id = 10 [default = 0];
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_id(), target);
  }
  
  // optional int32 login_time = 11 [default = 0];
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->login_time(), target);
  }
  
  // optional .protocols.common.Gender gender = 12 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // optional int32 member_level = 2 [default = 1];
    if (has_member_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_level());
    }
    
    // optional int32 devote = 3 [default = 0];
    if (has_devote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devote());
    }
    
    // optional int32 title = 5 [default = 0];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }
    
    // optional int32 job_type = 7;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_type());
    }
    
    // optional int32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional bool online_flag = 6 [default = false];
    if (has_online_flag()) {
      total_size += 1 + 1;
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip_level = 9 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional int32 server_id = 10 [default = 0];
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 login_time = 11 [default = 0];
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_time());
    }
    
    // optional .protocols.common.Gender gender = 12 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberInfo::MergeFrom(const GuildMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_member_level()) {
      set_member_level(from.member_level());
    }
    if (from.has_devote()) {
      set_devote(from.devote());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_online_flag()) {
      set_online_flag(from.online_flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberInfo::CopyFrom(const GuildMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildMemberInfo::Swap(GuildMemberInfo* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(member_level_, other->member_level_);
    std::swap(devote_, other->devote_);
    std::swap(title_, other->title_);
    std::swap(job_type_, other->job_type_);
    std::swap(status_, other->status_);
    std::swap(online_flag_, other->online_flag_);
    std::swap(name_, other->name_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(server_id_, other->server_id_);
    std::swap(login_time_, other->login_time_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberInfo_descriptor_;
  metadata.reflection = GuildMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDetail::kInfoFieldNumber;
const int GuildDetail::kMoneyFieldNumber;
const int GuildDetail::kExpFieldNumber;
const int GuildDetail::kFeeFieldNumber;
const int GuildDetail::kNoticeFieldNumber;
const int GuildDetail::kMemberListFieldNumber;
#endif  // !_MSC_VER

GuildDetail::GuildDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDetail::InitAsDefaultInstance() {
  info_ = const_cast< ::protocols::common::GuildInfo*>(&::protocols::common::GuildInfo::default_instance());
}

GuildDetail::GuildDetail(const GuildDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDetail::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  money_ = 0;
  exp_ = 0;
  fee_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDetail::~GuildDetail() {
  SharedDtor();
}

void GuildDetail::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDetail_descriptor_;
}

const GuildDetail& GuildDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildDetail* GuildDetail::default_instance_ = NULL;

GuildDetail* GuildDetail::New() const {
  return new GuildDetail;
}

void GuildDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::protocols::common::GuildInfo::Clear();
    }
    money_ = 0;
    exp_ = 0;
    fee_ = 0;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional int32 money = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        break;
      }
      
      // repeated .protocols.common.GuildMemberInfo member_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        if (input->ExpectTag(40)) goto parse_fee;
        break;
      }
      
      // optional int32 fee = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }
      
      // optional string notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional int32 money = 2 [default = 0];
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  // repeated .protocols.common.GuildMemberInfo member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member_list(i), output);
  }
  
  // optional int32 fee = 5;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fee(), output);
  }
  
  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->notice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional int32 money = 2 [default = 0];
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }
  
  // optional int32 exp = 3 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  // repeated .protocols.common.GuildMemberInfo member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member_list(i), target);
  }
  
  // optional int32 fee = 5;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fee(), target);
  }
  
  // optional string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional int32 money = 2 [default = 0];
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 exp = 3 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 fee = 5;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fee());
    }
    
    // optional string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }
    
  }
  // repeated .protocols.common.GuildMemberInfo member_list = 4;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDetail::MergeFrom(const GuildDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::protocols::common::GuildInfo::MergeFrom(from.info());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDetail::CopyFrom(const GuildDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDetail::IsInitialized() const {
  
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildDetail::Swap(GuildDetail* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(money_, other->money_);
    std::swap(exp_, other->exp_);
    std::swap(fee_, other->fee_);
    std::swap(notice_, other->notice_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDetail_descriptor_;
  metadata.reflection = GuildDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInviteInfo::kMemberGuidFieldNumber;
const int GuildInviteInfo::kMemberNameFieldNumber;
const int GuildInviteInfo::kGuildIdFieldNumber;
const int GuildInviteInfo::kServerIdFieldNumber;
const int GuildInviteInfo::kGuildNameFieldNumber;
const int GuildInviteInfo::kMemberLevelFieldNumber;
const int GuildInviteInfo::kGuildGradeFieldNumber;
const int GuildInviteInfo::kGenderFieldNumber;
#endif  // !_MSC_VER

GuildInviteInfo::GuildInviteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInviteInfo::InitAsDefaultInstance() {
}

GuildInviteInfo::GuildInviteInfo(const GuildInviteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInviteInfo::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = 0;
  server_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_level_ = 0;
  guild_grade_ = 0;
  gender_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInviteInfo::~GuildInviteInfo() {
  SharedDtor();
}

void GuildInviteInfo::SharedDtor() {
  if (member_name_ != &::google::protobuf::internal::kEmptyString) {
    delete member_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildInviteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInviteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInviteInfo_descriptor_;
}

const GuildInviteInfo& GuildInviteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildInviteInfo* GuildInviteInfo::default_instance_ = NULL;

GuildInviteInfo* GuildInviteInfo::New() const {
  return new GuildInviteInfo;
}

void GuildInviteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::kEmptyString) {
        member_name_->clear();
      }
    }
    guild_id_ = 0;
    server_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    member_level_ = 0;
    guild_grade_ = 0;
    gender_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInviteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_name;
        break;
      }
      
      // optional string member_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member_name().data(), this->member_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_member_level;
        break;
      }
      
      // optional int32 member_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_level_)));
          set_has_member_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guild_grade;
        break;
      }
      
      // optional int32 guild_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_grade_)));
          set_has_guild_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 8 [default = MALE];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInviteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  // optional string member_name = 2;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->member_name(), output);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_id(), output);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }
  
  // optional int32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }
  
  // optional int32 member_level = 6;
  if (has_member_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->member_level(), output);
  }
  
  // optional int32 guild_grade = 7;
  if (has_guild_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_grade(), output);
  }
  
  // optional .protocols.common.Gender gender = 8 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInviteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  // optional string member_name = 2;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->member_name(), target);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_id(), target);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }
  
  // optional int32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }
  
  // optional int32 member_level = 6;
  if (has_member_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->member_level(), target);
  }
  
  // optional int32 guild_grade = 7;
  if (has_guild_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_grade(), target);
  }
  
  // optional .protocols.common.Gender gender = 8 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInviteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // optional string member_name = 2;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }
    
    // optional int32 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional int32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional int32 member_level = 6;
    if (has_member_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_level());
    }
    
    // optional int32 guild_grade = 7;
    if (has_guild_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_grade());
    }
    
    // optional .protocols.common.Gender gender = 8 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInviteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInviteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInviteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInviteInfo::MergeFrom(const GuildInviteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_member_level()) {
      set_member_level(from.member_level());
    }
    if (from.has_guild_grade()) {
      set_guild_grade(from.guild_grade());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInviteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInviteInfo::CopyFrom(const GuildInviteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInviteInfo::IsInitialized() const {
  
  return true;
}

void GuildInviteInfo::Swap(GuildInviteInfo* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(member_name_, other->member_name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(member_level_, other->member_level_);
    std::swap(guild_grade_, other->guild_grade_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInviteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInviteInfo_descriptor_;
  metadata.reflection = GuildInviteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApplyInfo::kGuidFieldNumber;
const int GuildApplyInfo::kFightCapacityFieldNumber;
const int GuildApplyInfo::kJobTypeFieldNumber;
const int GuildApplyInfo::kRoleLevelFieldNumber;
const int GuildApplyInfo::kVipLevelFieldNumber;
const int GuildApplyInfo::kServerIdFieldNumber;
const int GuildApplyInfo::kNameFieldNumber;
const int GuildApplyInfo::kGenderFieldNumber;
#endif  // !_MSC_VER

GuildApplyInfo::GuildApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildApplyInfo::InitAsDefaultInstance() {
}

GuildApplyInfo::GuildApplyInfo(const GuildApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  fight_capacity_ = 0;
  job_type_ = 0;
  role_level_ = 0;
  vip_level_ = 0;
  server_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApplyInfo::~GuildApplyInfo() {
  SharedDtor();
}

void GuildApplyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildApplyInfo_descriptor_;
}

const GuildApplyInfo& GuildApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildApplyInfo* GuildApplyInfo::default_instance_ = NULL;

GuildApplyInfo* GuildApplyInfo::New() const {
  return new GuildApplyInfo;
}

void GuildApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    fight_capacity_ = 0;
    job_type_ = 0;
    role_level_ = 0;
    vip_level_ = 0;
    server_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gender_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_type;
        break;
      }
      
      // optional int32 job_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_type_)));
          set_has_job_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 8 [default = MALE];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 fight_capacity = 2;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fight_capacity(), output);
  }
  
  // optional int32 job_type = 3;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_type(), output);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_level(), output);
  }
  
  // optional int32 vip_level = 5;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_level(), output);
  }
  
  // optional int32 server_id = 6;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_id(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  // optional .protocols.common.Gender gender = 8 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 fight_capacity = 2;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fight_capacity(), target);
  }
  
  // optional int32 job_type = 3;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_type(), target);
  }
  
  // optional int32 role_level = 4;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_level(), target);
  }
  
  // optional int32 vip_level = 5;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_level(), target);
  }
  
  // optional int32 server_id = 6;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_id(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  // optional .protocols.common.Gender gender = 8 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildApplyInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 fight_capacity = 2;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
    // optional int32 job_type = 3;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_type());
    }
    
    // optional int32 role_level = 4;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 vip_level = 5;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional int32 server_id = 6;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .protocols.common.Gender gender = 8 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildApplyInfo::MergeFrom(const GuildApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApplyInfo::CopyFrom(const GuildApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyInfo::IsInitialized() const {
  
  return true;
}

void GuildApplyInfo::Swap(GuildApplyInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(job_type_, other->job_type_);
    std::swap(role_level_, other->role_level_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(server_id_, other->server_id_);
    std::swap(name_, other->name_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildApplyInfo_descriptor_;
  metadata.reflection = GuildApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CreateGuildRequest::CreateGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGuildRequest::InitAsDefaultInstance() {
}

CreateGuildRequest::CreateGuildRequest(const CreateGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildRequest::~CreateGuildRequest() {
  SharedDtor();
}

void CreateGuildRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildRequest_descriptor_;
}

const CreateGuildRequest& CreateGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

CreateGuildRequest* CreateGuildRequest::default_instance_ = NULL;

CreateGuildRequest* CreateGuildRequest::New() const {
  return new CreateGuildRequest;
}

void CreateGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGuildRequest::MergeFrom(const CreateGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGuildRequest::CopyFrom(const CreateGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGuildRequest::IsInitialized() const {
  
  return true;
}

void CreateGuildRequest::Swap(CreateGuildRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildRequest_descriptor_;
  metadata.reflection = CreateGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildResponse::kErrorCodeFieldNumber;
const int CreateGuildResponse::kDetailFieldNumber;
#endif  // !_MSC_VER

CreateGuildResponse::CreateGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGuildResponse::InitAsDefaultInstance() {
  detail_ = const_cast< ::protocols::common::GuildDetail*>(&::protocols::common::GuildDetail::default_instance());
}

CreateGuildResponse::CreateGuildResponse(const CreateGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildResponse::~CreateGuildResponse() {
  SharedDtor();
}

void CreateGuildResponse::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void CreateGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildResponse_descriptor_;
}

const CreateGuildResponse& CreateGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

CreateGuildResponse* CreateGuildResponse::default_instance_ = NULL;

CreateGuildResponse* CreateGuildResponse::New() const {
  return new CreateGuildResponse;
}

void CreateGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::protocols::common::GuildDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }
      
      // optional .protocols.common.GuildDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.GuildDetail detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.GuildDetail detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.GuildDetail detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGuildResponse::MergeFrom(const CreateGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_detail()) {
      mutable_detail()->::protocols::common::GuildDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGuildResponse::CopyFrom(const CreateGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void CreateGuildResponse::Swap(CreateGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildResponse_descriptor_;
  metadata.reflection = CreateGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGuildRequest::kGuildIdFieldNumber;
#endif  // !_MSC_VER

DeleteGuildRequest::DeleteGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGuildRequest::InitAsDefaultInstance() {
}

DeleteGuildRequest::DeleteGuildRequest(const DeleteGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGuildRequest::~DeleteGuildRequest() {
  SharedDtor();
}

void DeleteGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGuildRequest_descriptor_;
}

const DeleteGuildRequest& DeleteGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

DeleteGuildRequest* DeleteGuildRequest::default_instance_ = NULL;

DeleteGuildRequest* DeleteGuildRequest::New() const {
  return new DeleteGuildRequest;
}

void DeleteGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGuildRequest::MergeFrom(const DeleteGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildRequest::CopyFrom(const DeleteGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildRequest::IsInitialized() const {
  
  return true;
}

void DeleteGuildRequest::Swap(DeleteGuildRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGuildRequest_descriptor_;
  metadata.reflection = DeleteGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGuildResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeleteGuildResponse::DeleteGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGuildResponse::InitAsDefaultInstance() {
}

DeleteGuildResponse::DeleteGuildResponse(const DeleteGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGuildResponse::~DeleteGuildResponse() {
  SharedDtor();
}

void DeleteGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGuildResponse_descriptor_;
}

const DeleteGuildResponse& DeleteGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

DeleteGuildResponse* DeleteGuildResponse::default_instance_ = NULL;

DeleteGuildResponse* DeleteGuildResponse::New() const {
  return new DeleteGuildResponse;
}

void DeleteGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGuildResponse::MergeFrom(const DeleteGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildResponse::CopyFrom(const DeleteGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteGuildResponse::Swap(DeleteGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGuildResponse_descriptor_;
  metadata.reflection = DeleteGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildListRequest::kBeginFieldNumber;
const int GetGuildListRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetGuildListRequest::GetGuildListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildListRequest::InitAsDefaultInstance() {
}

GetGuildListRequest::GetGuildListRequest(const GetGuildListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildListRequest::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildListRequest::~GetGuildListRequest() {
  SharedDtor();
}

void GetGuildListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildListRequest_descriptor_;
}

const GetGuildListRequest& GetGuildListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildListRequest* GetGuildListRequest::default_instance_ = NULL;

GetGuildListRequest* GetGuildListRequest::New() const {
  return new GetGuildListRequest;
}

void GetGuildListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildListRequest::MergeFrom(const GetGuildListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildListRequest::CopyFrom(const GetGuildListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildListRequest::IsInitialized() const {
  
  return true;
}

void GetGuildListRequest::Swap(GetGuildListRequest* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildListRequest_descriptor_;
  metadata.reflection = GetGuildListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildListResponse::kErrorCodeFieldNumber;
const int GetGuildListResponse::kGuildListFieldNumber;
const int GetGuildListResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

GetGuildListResponse::GetGuildListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildListResponse::InitAsDefaultInstance() {
}

GetGuildListResponse::GetGuildListResponse(const GetGuildListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  total_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildListResponse::~GetGuildListResponse() {
  SharedDtor();
}

void GetGuildListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildListResponse_descriptor_;
}

const GetGuildListResponse& GetGuildListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildListResponse* GetGuildListResponse::default_instance_ = NULL;

GetGuildListResponse* GetGuildListResponse::New() const {
  return new GetGuildListResponse;
}

void GetGuildListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    total_count_ = 0;
  }
  guild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_list;
        break;
      }
      
      // repeated .protocols.common.GuildInfo guild_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_list;
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }
      
      // optional int32 total_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.GuildInfo guild_list = 2;
  for (int i = 0; i < this->guild_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_list(i), output);
  }
  
  // optional int32 total_count = 3;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.GuildInfo guild_list = 2;
  for (int i = 0; i < this->guild_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_list(i), target);
  }
  
  // optional int32 total_count = 3;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 total_count = 3;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_count());
    }
    
  }
  // repeated .protocols.common.GuildInfo guild_list = 2;
  total_size += 1 * this->guild_list_size();
  for (int i = 0; i < this->guild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildListResponse::MergeFrom(const GetGuildListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_list_.MergeFrom(from.guild_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildListResponse::CopyFrom(const GetGuildListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGuildListResponse::Swap(GetGuildListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    guild_list_.Swap(&other->guild_list_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildListResponse_descriptor_;
  metadata.reflection = GetGuildListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildDetailRequest::kGuildIdFieldNumber;
#endif  // !_MSC_VER

GetGuildDetailRequest::GetGuildDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildDetailRequest::InitAsDefaultInstance() {
}

GetGuildDetailRequest::GetGuildDetailRequest(const GetGuildDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildDetailRequest::~GetGuildDetailRequest() {
  SharedDtor();
}

void GetGuildDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildDetailRequest_descriptor_;
}

const GetGuildDetailRequest& GetGuildDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildDetailRequest* GetGuildDetailRequest::default_instance_ = NULL;

GetGuildDetailRequest* GetGuildDetailRequest::New() const {
  return new GetGuildDetailRequest;
}

void GetGuildDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildDetailRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildDetailRequest::MergeFrom(const GetGuildDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildDetailRequest::CopyFrom(const GetGuildDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildDetailRequest::IsInitialized() const {
  
  return true;
}

void GetGuildDetailRequest::Swap(GetGuildDetailRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildDetailRequest_descriptor_;
  metadata.reflection = GetGuildDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildDetailResponse::kErrorCodeFieldNumber;
const int GetGuildDetailResponse::kDetailFieldNumber;
#endif  // !_MSC_VER

GetGuildDetailResponse::GetGuildDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildDetailResponse::InitAsDefaultInstance() {
  detail_ = const_cast< ::protocols::common::GuildDetail*>(&::protocols::common::GuildDetail::default_instance());
}

GetGuildDetailResponse::GetGuildDetailResponse(const GetGuildDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildDetailResponse::~GetGuildDetailResponse() {
  SharedDtor();
}

void GetGuildDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void GetGuildDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildDetailResponse_descriptor_;
}

const GetGuildDetailResponse& GetGuildDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildDetailResponse* GetGuildDetailResponse::default_instance_ = NULL;

GetGuildDetailResponse* GetGuildDetailResponse::New() const {
  return new GetGuildDetailResponse;
}

void GetGuildDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::protocols::common::GuildDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }
      
      // optional .protocols.common.GuildDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.GuildDetail detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.GuildDetail detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildDetailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.GuildDetail detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildDetailResponse::MergeFrom(const GetGuildDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_detail()) {
      mutable_detail()->::protocols::common::GuildDetail::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildDetailResponse::CopyFrom(const GetGuildDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_detail()) {
    if (!this->detail().IsInitialized()) return false;
  }
  return true;
}

void GetGuildDetailResponse::Swap(GetGuildDetailResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildDetailResponse_descriptor_;
  metadata.reflection = GetGuildDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildMemberListRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

GetGuildMemberListRequest::GetGuildMemberListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildMemberListRequest::InitAsDefaultInstance() {
}

GetGuildMemberListRequest::GetGuildMemberListRequest(const GetGuildMemberListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildMemberListRequest::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildMemberListRequest::~GetGuildMemberListRequest() {
  SharedDtor();
}

void GetGuildMemberListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildMemberListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildMemberListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildMemberListRequest_descriptor_;
}

const GetGuildMemberListRequest& GetGuildMemberListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildMemberListRequest* GetGuildMemberListRequest::default_instance_ = NULL;

GetGuildMemberListRequest* GetGuildMemberListRequest::New() const {
  return new GetGuildMemberListRequest;
}

void GetGuildMemberListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildMemberListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildMemberListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildMemberListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildMemberListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildMemberListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildMemberListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildMemberListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildMemberListRequest::MergeFrom(const GetGuildMemberListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildMemberListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildMemberListRequest::CopyFrom(const GetGuildMemberListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildMemberListRequest::IsInitialized() const {
  
  return true;
}

void GetGuildMemberListRequest::Swap(GetGuildMemberListRequest* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildMemberListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildMemberListRequest_descriptor_;
  metadata.reflection = GetGuildMemberListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildMemberListResponse::kErrorCodeFieldNumber;
const int GetGuildMemberListResponse::kMemberListFieldNumber;
#endif  // !_MSC_VER

GetGuildMemberListResponse::GetGuildMemberListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildMemberListResponse::InitAsDefaultInstance() {
}

GetGuildMemberListResponse::GetGuildMemberListResponse(const GetGuildMemberListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildMemberListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildMemberListResponse::~GetGuildMemberListResponse() {
  SharedDtor();
}

void GetGuildMemberListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildMemberListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildMemberListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildMemberListResponse_descriptor_;
}

const GetGuildMemberListResponse& GetGuildMemberListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildMemberListResponse* GetGuildMemberListResponse::default_instance_ = NULL;

GetGuildMemberListResponse* GetGuildMemberListResponse::New() const {
  return new GetGuildMemberListResponse;
}

void GetGuildMemberListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildMemberListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        break;
      }
      
      // repeated .protocols.common.GuildMemberInfo member_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildMemberListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.GuildMemberInfo member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildMemberListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.GuildMemberInfo member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildMemberListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.GuildMemberInfo member_list = 2;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildMemberListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildMemberListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildMemberListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildMemberListResponse::MergeFrom(const GetGuildMemberListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildMemberListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildMemberListResponse::CopyFrom(const GetGuildMemberListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildMemberListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildMemberListResponse::Swap(GetGuildMemberListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildMemberListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildMemberListResponse_descriptor_;
  metadata.reflection = GetGuildMemberListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinGuildRequest::kGuildIdFieldNumber;
const int ApplyJoinGuildRequest::kApplyFlagFieldNumber;
#endif  // !_MSC_VER

ApplyJoinGuildRequest::ApplyJoinGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinGuildRequest::InitAsDefaultInstance() {
}

ApplyJoinGuildRequest::ApplyJoinGuildRequest(const ApplyJoinGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  apply_flag_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinGuildRequest::~ApplyJoinGuildRequest() {
  SharedDtor();
}

void ApplyJoinGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinGuildRequest_descriptor_;
}

const ApplyJoinGuildRequest& ApplyJoinGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

ApplyJoinGuildRequest* ApplyJoinGuildRequest::default_instance_ = NULL;

ApplyJoinGuildRequest* ApplyJoinGuildRequest::New() const {
  return new ApplyJoinGuildRequest;
}

void ApplyJoinGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    apply_flag_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_flag;
        break;
      }
      
      // optional bool apply_flag = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_flag_)));
          set_has_apply_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // optional bool apply_flag = 2 [default = true];
  if (has_apply_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->apply_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // optional bool apply_flag = 2 [default = true];
  if (has_apply_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->apply_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional bool apply_flag = 2 [default = true];
    if (has_apply_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinGuildRequest::MergeFrom(const ApplyJoinGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_apply_flag()) {
      set_apply_flag(from.apply_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinGuildRequest::CopyFrom(const ApplyJoinGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinGuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinGuildRequest::Swap(ApplyJoinGuildRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(apply_flag_, other->apply_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinGuildRequest_descriptor_;
  metadata.reflection = ApplyJoinGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinGuildResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyJoinGuildResponse::ApplyJoinGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinGuildResponse::InitAsDefaultInstance() {
}

ApplyJoinGuildResponse::ApplyJoinGuildResponse(const ApplyJoinGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinGuildResponse::~ApplyJoinGuildResponse() {
  SharedDtor();
}

void ApplyJoinGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinGuildResponse_descriptor_;
}

const ApplyJoinGuildResponse& ApplyJoinGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

ApplyJoinGuildResponse* ApplyJoinGuildResponse::default_instance_ = NULL;

ApplyJoinGuildResponse* ApplyJoinGuildResponse::New() const {
  return new ApplyJoinGuildResponse;
}

void ApplyJoinGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinGuildResponse::MergeFrom(const ApplyJoinGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinGuildResponse::CopyFrom(const ApplyJoinGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinGuildResponse::Swap(ApplyJoinGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinGuildResponse_descriptor_;
  metadata.reflection = ApplyJoinGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerJoinGuildRequest::kMemberGuidFieldNumber;
const int AnswerJoinGuildRequest::kAcceptFlagFieldNumber;
#endif  // !_MSC_VER

AnswerJoinGuildRequest::AnswerJoinGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerJoinGuildRequest::InitAsDefaultInstance() {
}

AnswerJoinGuildRequest::AnswerJoinGuildRequest(const AnswerJoinGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerJoinGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  accept_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerJoinGuildRequest::~AnswerJoinGuildRequest() {
  SharedDtor();
}

void AnswerJoinGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerJoinGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerJoinGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerJoinGuildRequest_descriptor_;
}

const AnswerJoinGuildRequest& AnswerJoinGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

AnswerJoinGuildRequest* AnswerJoinGuildRequest::default_instance_ = NULL;

AnswerJoinGuildRequest* AnswerJoinGuildRequest::New() const {
  return new AnswerJoinGuildRequest;
}

void AnswerJoinGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    accept_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerJoinGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 member_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_flag;
        break;
      }
      
      // required bool accept_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_flag_)));
          set_has_accept_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerJoinGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 member_guid = 2;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->member_guid(), output);
  }
  
  // required bool accept_flag = 3;
  if (has_accept_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->accept_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerJoinGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 member_guid = 2;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->member_guid(), target);
  }
  
  // required bool accept_flag = 3;
  if (has_accept_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->accept_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerJoinGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 member_guid = 2;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // required bool accept_flag = 3;
    if (has_accept_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerJoinGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerJoinGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerJoinGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerJoinGuildRequest::MergeFrom(const AnswerJoinGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_accept_flag()) {
      set_accept_flag(from.accept_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerJoinGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerJoinGuildRequest::CopyFrom(const AnswerJoinGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerJoinGuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnswerJoinGuildRequest::Swap(AnswerJoinGuildRequest* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(accept_flag_, other->accept_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerJoinGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerJoinGuildRequest_descriptor_;
  metadata.reflection = AnswerJoinGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerJoinGuildResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AnswerJoinGuildResponse::AnswerJoinGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerJoinGuildResponse::InitAsDefaultInstance() {
}

AnswerJoinGuildResponse::AnswerJoinGuildResponse(const AnswerJoinGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerJoinGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerJoinGuildResponse::~AnswerJoinGuildResponse() {
  SharedDtor();
}

void AnswerJoinGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerJoinGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerJoinGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerJoinGuildResponse_descriptor_;
}

const AnswerJoinGuildResponse& AnswerJoinGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

AnswerJoinGuildResponse* AnswerJoinGuildResponse::default_instance_ = NULL;

AnswerJoinGuildResponse* AnswerJoinGuildResponse::New() const {
  return new AnswerJoinGuildResponse;
}

void AnswerJoinGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerJoinGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerJoinGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerJoinGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerJoinGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerJoinGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerJoinGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerJoinGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerJoinGuildResponse::MergeFrom(const AnswerJoinGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerJoinGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerJoinGuildResponse::CopyFrom(const AnswerJoinGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerJoinGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AnswerJoinGuildResponse::Swap(AnswerJoinGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerJoinGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerJoinGuildResponse_descriptor_;
  metadata.reflection = AnswerJoinGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerJoinGuildNotify::kGuildIdFieldNumber;
const int AnswerJoinGuildNotify::kAcceptFlagFieldNumber;
const int AnswerJoinGuildNotify::kGuildNameFieldNumber;
#endif  // !_MSC_VER

AnswerJoinGuildNotify::AnswerJoinGuildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerJoinGuildNotify::InitAsDefaultInstance() {
}

AnswerJoinGuildNotify::AnswerJoinGuildNotify(const AnswerJoinGuildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerJoinGuildNotify::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  accept_flag_ = false;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerJoinGuildNotify::~AnswerJoinGuildNotify() {
  SharedDtor();
}

void AnswerJoinGuildNotify::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void AnswerJoinGuildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerJoinGuildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerJoinGuildNotify_descriptor_;
}

const AnswerJoinGuildNotify& AnswerJoinGuildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

AnswerJoinGuildNotify* AnswerJoinGuildNotify::default_instance_ = NULL;

AnswerJoinGuildNotify* AnswerJoinGuildNotify::New() const {
  return new AnswerJoinGuildNotify;
}

void AnswerJoinGuildNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    accept_flag_ = false;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerJoinGuildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_flag;
        break;
      }
      
      // required bool accept_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_flag_)));
          set_has_accept_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerJoinGuildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept_flag(), output);
  }
  
  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guild_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerJoinGuildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // required bool accept_flag = 2;
  if (has_accept_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept_flag(), target);
  }
  
  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerJoinGuildNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // required bool accept_flag = 2;
    if (has_accept_flag()) {
      total_size += 1 + 1;
    }
    
    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerJoinGuildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerJoinGuildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerJoinGuildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerJoinGuildNotify::MergeFrom(const AnswerJoinGuildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_accept_flag()) {
      set_accept_flag(from.accept_flag());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerJoinGuildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerJoinGuildNotify::CopyFrom(const AnswerJoinGuildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerJoinGuildNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnswerJoinGuildNotify::Swap(AnswerJoinGuildNotify* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(accept_flag_, other->accept_flag_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerJoinGuildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerJoinGuildNotify_descriptor_;
  metadata.reflection = AnswerJoinGuildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinGuildRequest::kMemberGuidFieldNumber;
#endif  // !_MSC_VER

InviteJoinGuildRequest::InviteJoinGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinGuildRequest::InitAsDefaultInstance() {
}

InviteJoinGuildRequest::InviteJoinGuildRequest(const InviteJoinGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinGuildRequest::~InviteJoinGuildRequest() {
  SharedDtor();
}

void InviteJoinGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinGuildRequest_descriptor_;
}

const InviteJoinGuildRequest& InviteJoinGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

InviteJoinGuildRequest* InviteJoinGuildRequest::default_instance_ = NULL;

InviteJoinGuildRequest* InviteJoinGuildRequest::New() const {
  return new InviteJoinGuildRequest;
}

void InviteJoinGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinGuildRequest::MergeFrom(const InviteJoinGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinGuildRequest::CopyFrom(const InviteJoinGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinGuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinGuildRequest::Swap(InviteJoinGuildRequest* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinGuildRequest_descriptor_;
  metadata.reflection = InviteJoinGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinGuildResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

InviteJoinGuildResponse::InviteJoinGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinGuildResponse::InitAsDefaultInstance() {
}

InviteJoinGuildResponse::InviteJoinGuildResponse(const InviteJoinGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinGuildResponse::~InviteJoinGuildResponse() {
  SharedDtor();
}

void InviteJoinGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinGuildResponse_descriptor_;
}

const InviteJoinGuildResponse& InviteJoinGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

InviteJoinGuildResponse* InviteJoinGuildResponse::default_instance_ = NULL;

InviteJoinGuildResponse* InviteJoinGuildResponse::New() const {
  return new InviteJoinGuildResponse;
}

void InviteJoinGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinGuildResponse::MergeFrom(const InviteJoinGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinGuildResponse::CopyFrom(const InviteJoinGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinGuildResponse::Swap(InviteJoinGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinGuildResponse_descriptor_;
  metadata.reflection = InviteJoinGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinGuildNotify::kMemberGuidFieldNumber;
const int InviteJoinGuildNotify::kMemberNameFieldNumber;
const int InviteJoinGuildNotify::kGuildIdFieldNumber;
const int InviteJoinGuildNotify::kServerIdFieldNumber;
const int InviteJoinGuildNotify::kGuildNameFieldNumber;
const int InviteJoinGuildNotify::kMemberLevelFieldNumber;
const int InviteJoinGuildNotify::kGuildGradeFieldNumber;
#endif  // !_MSC_VER

InviteJoinGuildNotify::InviteJoinGuildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinGuildNotify::InitAsDefaultInstance() {
}

InviteJoinGuildNotify::InviteJoinGuildNotify(const InviteJoinGuildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinGuildNotify::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  member_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = 0;
  server_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_level_ = 0;
  guild_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinGuildNotify::~InviteJoinGuildNotify() {
  SharedDtor();
}

void InviteJoinGuildNotify::SharedDtor() {
  if (member_name_ != &::google::protobuf::internal::kEmptyString) {
    delete member_name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void InviteJoinGuildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinGuildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinGuildNotify_descriptor_;
}

const InviteJoinGuildNotify& InviteJoinGuildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

InviteJoinGuildNotify* InviteJoinGuildNotify::default_instance_ = NULL;

InviteJoinGuildNotify* InviteJoinGuildNotify::New() const {
  return new InviteJoinGuildNotify;
}

void InviteJoinGuildNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    if (has_member_name()) {
      if (member_name_ != &::google::protobuf::internal::kEmptyString) {
        member_name_->clear();
      }
    }
    guild_id_ = 0;
    server_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    member_level_ = 0;
    guild_grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinGuildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_name;
        break;
      }
      
      // optional string member_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->member_name().data(), this->member_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_member_level;
        break;
      }
      
      // optional int32 member_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_level_)));
          set_has_member_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guild_grade;
        break;
      }
      
      // optional int32 guild_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_grade_)));
          set_has_guild_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinGuildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  // optional string member_name = 2;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->member_name(), output);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_id(), output);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }
  
  // optional int32 server_id = 5;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_id(), output);
  }
  
  // optional int32 member_level = 6;
  if (has_member_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->member_level(), output);
  }
  
  // optional int32 guild_grade = 7;
  if (has_guild_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinGuildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  // optional string member_name = 2;
  if (has_member_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->member_name().data(), this->member_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->member_name(), target);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_id(), target);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }
  
  // optional int32 server_id = 5;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_id(), target);
  }
  
  // optional int32 member_level = 6;
  if (has_member_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->member_level(), target);
  }
  
  // optional int32 guild_grade = 7;
  if (has_guild_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinGuildNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // optional string member_name = 2;
    if (has_member_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->member_name());
    }
    
    // optional int32 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional int32 server_id = 5;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional int32 member_level = 6;
    if (has_member_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_level());
    }
    
    // optional int32 guild_grade = 7;
    if (has_guild_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinGuildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinGuildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinGuildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinGuildNotify::MergeFrom(const InviteJoinGuildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_member_name()) {
      set_member_name(from.member_name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_member_level()) {
      set_member_level(from.member_level());
    }
    if (from.has_guild_grade()) {
      set_guild_grade(from.guild_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinGuildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinGuildNotify::CopyFrom(const InviteJoinGuildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinGuildNotify::IsInitialized() const {
  
  return true;
}

void InviteJoinGuildNotify::Swap(InviteJoinGuildNotify* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(member_name_, other->member_name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(member_level_, other->member_level_);
    std::swap(guild_grade_, other->guild_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinGuildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinGuildNotify_descriptor_;
  metadata.reflection = InviteJoinGuildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildInviteListRequest::GetGuildInviteListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildInviteListRequest::InitAsDefaultInstance() {
}

GetGuildInviteListRequest::GetGuildInviteListRequest(const GetGuildInviteListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildInviteListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildInviteListRequest::~GetGuildInviteListRequest() {
  SharedDtor();
}

void GetGuildInviteListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildInviteListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildInviteListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildInviteListRequest_descriptor_;
}

const GetGuildInviteListRequest& GetGuildInviteListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildInviteListRequest* GetGuildInviteListRequest::default_instance_ = NULL;

GetGuildInviteListRequest* GetGuildInviteListRequest::New() const {
  return new GetGuildInviteListRequest;
}

void GetGuildInviteListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildInviteListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetGuildInviteListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildInviteListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildInviteListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildInviteListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildInviteListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildInviteListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildInviteListRequest::MergeFrom(const GetGuildInviteListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildInviteListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildInviteListRequest::CopyFrom(const GetGuildInviteListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildInviteListRequest::IsInitialized() const {
  
  return true;
}

void GetGuildInviteListRequest::Swap(GetGuildInviteListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildInviteListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildInviteListRequest_descriptor_;
  metadata.reflection = GetGuildInviteListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildInviteListResponse::kErrorCodeFieldNumber;
const int GetGuildInviteListResponse::kInviteListFieldNumber;
#endif  // !_MSC_VER

GetGuildInviteListResponse::GetGuildInviteListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildInviteListResponse::InitAsDefaultInstance() {
}

GetGuildInviteListResponse::GetGuildInviteListResponse(const GetGuildInviteListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildInviteListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildInviteListResponse::~GetGuildInviteListResponse() {
  SharedDtor();
}

void GetGuildInviteListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildInviteListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildInviteListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildInviteListResponse_descriptor_;
}

const GetGuildInviteListResponse& GetGuildInviteListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildInviteListResponse* GetGuildInviteListResponse::default_instance_ = NULL;

GetGuildInviteListResponse* GetGuildInviteListResponse::New() const {
  return new GetGuildInviteListResponse;
}

void GetGuildInviteListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  invite_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildInviteListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invite_list;
        break;
      }
      
      // repeated .protocols.common.GuildInviteInfo invite_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invite_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invite_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildInviteListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.GuildInviteInfo invite_list = 2;
  for (int i = 0; i < this->invite_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invite_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildInviteListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.GuildInviteInfo invite_list = 2;
  for (int i = 0; i < this->invite_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invite_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildInviteListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.GuildInviteInfo invite_list = 2;
  total_size += 1 * this->invite_list_size();
  for (int i = 0; i < this->invite_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invite_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildInviteListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildInviteListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildInviteListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildInviteListResponse::MergeFrom(const GetGuildInviteListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  invite_list_.MergeFrom(from.invite_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildInviteListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildInviteListResponse::CopyFrom(const GetGuildInviteListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildInviteListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGuildInviteListResponse::Swap(GetGuildInviteListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    invite_list_.Swap(&other->invite_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildInviteListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildInviteListResponse_descriptor_;
  metadata.reflection = GetGuildInviteListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildApplyListRequest::kGuildIdFieldNumber;
#endif  // !_MSC_VER

GetGuildApplyListRequest::GetGuildApplyListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildApplyListRequest::InitAsDefaultInstance() {
}

GetGuildApplyListRequest::GetGuildApplyListRequest(const GetGuildApplyListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildApplyListRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildApplyListRequest::~GetGuildApplyListRequest() {
  SharedDtor();
}

void GetGuildApplyListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildApplyListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildApplyListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildApplyListRequest_descriptor_;
}

const GetGuildApplyListRequest& GetGuildApplyListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildApplyListRequest* GetGuildApplyListRequest::default_instance_ = NULL;

GetGuildApplyListRequest* GetGuildApplyListRequest::New() const {
  return new GetGuildApplyListRequest;
}

void GetGuildApplyListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildApplyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildApplyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildApplyListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildApplyListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildApplyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildApplyListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildApplyListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildApplyListRequest::MergeFrom(const GetGuildApplyListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildApplyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildApplyListRequest::CopyFrom(const GetGuildApplyListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildApplyListRequest::IsInitialized() const {
  
  return true;
}

void GetGuildApplyListRequest::Swap(GetGuildApplyListRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildApplyListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildApplyListRequest_descriptor_;
  metadata.reflection = GetGuildApplyListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildApplyListResponse::kErrorCodeFieldNumber;
const int GetGuildApplyListResponse::kApplyListFieldNumber;
#endif  // !_MSC_VER

GetGuildApplyListResponse::GetGuildApplyListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildApplyListResponse::InitAsDefaultInstance() {
}

GetGuildApplyListResponse::GetGuildApplyListResponse(const GetGuildApplyListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildApplyListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildApplyListResponse::~GetGuildApplyListResponse() {
  SharedDtor();
}

void GetGuildApplyListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildApplyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildApplyListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildApplyListResponse_descriptor_;
}

const GetGuildApplyListResponse& GetGuildApplyListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GetGuildApplyListResponse* GetGuildApplyListResponse::default_instance_ = NULL;

GetGuildApplyListResponse* GetGuildApplyListResponse::New() const {
  return new GetGuildApplyListResponse;
}

void GetGuildApplyListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildApplyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply_list;
        break;
      }
      
      // repeated .protocols.common.GuildApplyInfo apply_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildApplyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.GuildApplyInfo apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildApplyListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.GuildApplyInfo apply_list = 2;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildApplyListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.GuildApplyInfo apply_list = 2;
  total_size += 1 * this->apply_list_size();
  for (int i = 0; i < this->apply_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildApplyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildApplyListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildApplyListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildApplyListResponse::MergeFrom(const GetGuildApplyListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildApplyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildApplyListResponse::CopyFrom(const GetGuildApplyListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildApplyListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGuildApplyListResponse::Swap(GetGuildApplyListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildApplyListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildApplyListResponse_descriptor_;
  metadata.reflection = GetGuildApplyListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberNotify::kMemberInfoFieldNumber;
const int GuildMemberNotify::kStatusFieldNumber;
const int GuildMemberNotify::kGuildIdFieldNumber;
const int GuildMemberNotify::kGuildNameFieldNumber;
#endif  // !_MSC_VER

GuildMemberNotify::GuildMemberNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMemberNotify::InitAsDefaultInstance() {
  member_info_ = const_cast< ::protocols::common::GuildMemberInfo*>(&::protocols::common::GuildMemberInfo::default_instance());
}

GuildMemberNotify::GuildMemberNotify(const GuildMemberNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  member_info_ = NULL;
  status_ = 0;
  guild_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberNotify::~GuildMemberNotify() {
  SharedDtor();
}

void GuildMemberNotify::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete member_info_;
  }
}

void GuildMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberNotify_descriptor_;
}

const GuildMemberNotify& GuildMemberNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildMemberNotify* GuildMemberNotify::default_instance_ = NULL;

GuildMemberNotify* GuildMemberNotify::New() const {
  return new GuildMemberNotify;
}

void GuildMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_member_info()) {
      if (member_info_ != NULL) member_info_->::protocols::common::GuildMemberInfo::Clear();
    }
    status_ = 0;
    guild_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildMemberInfo member_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }
      
      // required int32 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildMemberInfo member_info = 1;
  if (has_member_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_info(), output);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required int32 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_id(), output);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMemberNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildMemberInfo member_info = 1;
  if (has_member_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_info(), target);
  }
  
  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required int32 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_id(), target);
  }
  
  // optional string guild_name = 4;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMemberNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildMemberInfo member_info = 1;
    if (has_member_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_info());
    }
    
    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional string guild_name = 4;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberNotify::MergeFrom(const GuildMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_info()) {
      mutable_member_info()->::protocols::common::GuildMemberInfo::MergeFrom(from.member_info());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberNotify::CopyFrom(const GuildMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_member_info()) {
    if (!this->member_info().IsInitialized()) return false;
  }
  return true;
}

void GuildMemberNotify::Swap(GuildMemberNotify* other) {
  if (other != this) {
    std::swap(member_info_, other->member_info_);
    std::swap(status_, other->status_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberNotify_descriptor_;
  metadata.reflection = GuildMemberNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildTitleNotify::kMemberGuidFieldNumber;
const int GuildTitleNotify::kTitleFieldNumber;
const int GuildTitleNotify::kGuildIdFieldNumber;
#endif  // !_MSC_VER

GuildTitleNotify::GuildTitleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildTitleNotify::InitAsDefaultInstance() {
}

GuildTitleNotify::GuildTitleNotify(const GuildTitleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildTitleNotify::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  title_ = 0;
  guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildTitleNotify::~GuildTitleNotify() {
  SharedDtor();
}

void GuildTitleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildTitleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildTitleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildTitleNotify_descriptor_;
}

const GuildTitleNotify& GuildTitleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

GuildTitleNotify* GuildTitleNotify::default_instance_ = NULL;

GuildTitleNotify* GuildTitleNotify::New() const {
  return new GuildTitleNotify;
}

void GuildTitleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    title_ = 0;
    guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildTitleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }
      
      // optional int32 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildTitleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  // optional int32 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->title(), output);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildTitleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  // optional int32 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->title(), target);
  }
  
  // optional int32 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildTitleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // optional int32 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }
    
    // optional int32 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildTitleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildTitleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildTitleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildTitleNotify::MergeFrom(const GuildTitleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildTitleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildTitleNotify::CopyFrom(const GuildTitleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildTitleNotify::IsInitialized() const {
  
  return true;
}

void GuildTitleNotify::Swap(GuildTitleNotify* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(title_, other->title_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildTitleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildTitleNotify_descriptor_;
  metadata.reflection = GuildTitleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyJoinGuildRequest::kGuildIdFieldNumber;
const int ReplyJoinGuildRequest::kAcceptFlagFieldNumber;
#endif  // !_MSC_VER

ReplyJoinGuildRequest::ReplyJoinGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyJoinGuildRequest::InitAsDefaultInstance() {
}

ReplyJoinGuildRequest::ReplyJoinGuildRequest(const ReplyJoinGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyJoinGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  accept_flag_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyJoinGuildRequest::~ReplyJoinGuildRequest() {
  SharedDtor();
}

void ReplyJoinGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyJoinGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyJoinGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyJoinGuildRequest_descriptor_;
}

const ReplyJoinGuildRequest& ReplyJoinGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

ReplyJoinGuildRequest* ReplyJoinGuildRequest::default_instance_ = NULL;

ReplyJoinGuildRequest* ReplyJoinGuildRequest::New() const {
  return new ReplyJoinGuildRequest;
}

void ReplyJoinGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    accept_flag_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyJoinGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_flag;
        break;
      }
      
      // optional bool accept_flag = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_flag_)));
          set_has_accept_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyJoinGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // optional bool accept_flag = 2 [default = true];
  if (has_accept_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyJoinGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // optional bool accept_flag = 2 [default = true];
  if (has_accept_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyJoinGuildRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional bool accept_flag = 2 [default = true];
    if (has_accept_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyJoinGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyJoinGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyJoinGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyJoinGuildRequest::MergeFrom(const ReplyJoinGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_accept_flag()) {
      set_accept_flag(from.accept_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyJoinGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyJoinGuildRequest::CopyFrom(const ReplyJoinGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyJoinGuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReplyJoinGuildRequest::Swap(ReplyJoinGuildRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(accept_flag_, other->accept_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyJoinGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyJoinGuildRequest_descriptor_;
  metadata.reflection = ReplyJoinGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyJoinGuildResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ReplyJoinGuildResponse::ReplyJoinGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyJoinGuildResponse::InitAsDefaultInstance() {
}

ReplyJoinGuildResponse::ReplyJoinGuildResponse(const ReplyJoinGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyJoinGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyJoinGuildResponse::~ReplyJoinGuildResponse() {
  SharedDtor();
}

void ReplyJoinGuildResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyJoinGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyJoinGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyJoinGuildResponse_descriptor_;
}

const ReplyJoinGuildResponse& ReplyJoinGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

ReplyJoinGuildResponse* ReplyJoinGuildResponse::default_instance_ = NULL;

ReplyJoinGuildResponse* ReplyJoinGuildResponse::New() const {
  return new ReplyJoinGuildResponse;
}

void ReplyJoinGuildResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyJoinGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyJoinGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyJoinGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyJoinGuildResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyJoinGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyJoinGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyJoinGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyJoinGuildResponse::MergeFrom(const ReplyJoinGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyJoinGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyJoinGuildResponse::CopyFrom(const ReplyJoinGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyJoinGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReplyJoinGuildResponse::Swap(ReplyJoinGuildResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyJoinGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyJoinGuildResponse_descriptor_;
  metadata.reflection = ReplyJoinGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGuildMemberRequest::kMemberGuidFieldNumber;
#endif  // !_MSC_VER

DeleteGuildMemberRequest::DeleteGuildMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGuildMemberRequest::InitAsDefaultInstance() {
}

DeleteGuildMemberRequest::DeleteGuildMemberRequest(const DeleteGuildMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGuildMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGuildMemberRequest::~DeleteGuildMemberRequest() {
  SharedDtor();
}

void DeleteGuildMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGuildMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGuildMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGuildMemberRequest_descriptor_;
}

const DeleteGuildMemberRequest& DeleteGuildMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

DeleteGuildMemberRequest* DeleteGuildMemberRequest::default_instance_ = NULL;

DeleteGuildMemberRequest* DeleteGuildMemberRequest::New() const {
  return new DeleteGuildMemberRequest;
}

void DeleteGuildMemberRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGuildMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGuildMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGuildMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGuildMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGuildMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGuildMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGuildMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGuildMemberRequest::MergeFrom(const DeleteGuildMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGuildMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildMemberRequest::CopyFrom(const DeleteGuildMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildMemberRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteGuildMemberRequest::Swap(DeleteGuildMemberRequest* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGuildMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGuildMemberRequest_descriptor_;
  metadata.reflection = DeleteGuildMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGuildMemberResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeleteGuildMemberResponse::DeleteGuildMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGuildMemberResponse::InitAsDefaultInstance() {
}

DeleteGuildMemberResponse::DeleteGuildMemberResponse(const DeleteGuildMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGuildMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGuildMemberResponse::~DeleteGuildMemberResponse() {
  SharedDtor();
}

void DeleteGuildMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGuildMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGuildMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGuildMemberResponse_descriptor_;
}

const DeleteGuildMemberResponse& DeleteGuildMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

DeleteGuildMemberResponse* DeleteGuildMemberResponse::default_instance_ = NULL;

DeleteGuildMemberResponse* DeleteGuildMemberResponse::New() const {
  return new DeleteGuildMemberResponse;
}

void DeleteGuildMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGuildMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGuildMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGuildMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGuildMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGuildMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGuildMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGuildMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGuildMemberResponse::MergeFrom(const DeleteGuildMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGuildMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildMemberResponse::CopyFrom(const DeleteGuildMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteGuildMemberResponse::Swap(DeleteGuildMemberResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGuildMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGuildMemberResponse_descriptor_;
  metadata.reflection = DeleteGuildMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteGuildMemberNotify::kGuildIdFieldNumber;
#endif  // !_MSC_VER

DeleteGuildMemberNotify::DeleteGuildMemberNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteGuildMemberNotify::InitAsDefaultInstance() {
}

DeleteGuildMemberNotify::DeleteGuildMemberNotify(const DeleteGuildMemberNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteGuildMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteGuildMemberNotify::~DeleteGuildMemberNotify() {
  SharedDtor();
}

void DeleteGuildMemberNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteGuildMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteGuildMemberNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteGuildMemberNotify_descriptor_;
}

const DeleteGuildMemberNotify& DeleteGuildMemberNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

DeleteGuildMemberNotify* DeleteGuildMemberNotify::default_instance_ = NULL;

DeleteGuildMemberNotify* DeleteGuildMemberNotify::New() const {
  return new DeleteGuildMemberNotify;
}

void DeleteGuildMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteGuildMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteGuildMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteGuildMemberNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteGuildMemberNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteGuildMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteGuildMemberNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteGuildMemberNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteGuildMemberNotify::MergeFrom(const DeleteGuildMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteGuildMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteGuildMemberNotify::CopyFrom(const DeleteGuildMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteGuildMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteGuildMemberNotify::Swap(DeleteGuildMemberNotify* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteGuildMemberNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteGuildMemberNotify_descriptor_;
  metadata.reflection = DeleteGuildMemberNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildMemberTitleRequest::kMemberGuidFieldNumber;
const int SetGuildMemberTitleRequest::kMemberTitleFieldNumber;
#endif  // !_MSC_VER

SetGuildMemberTitleRequest::SetGuildMemberTitleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildMemberTitleRequest::InitAsDefaultInstance() {
}

SetGuildMemberTitleRequest::SetGuildMemberTitleRequest(const SetGuildMemberTitleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildMemberTitleRequest::SharedCtor() {
  _cached_size_ = 0;
  member_guid_ = GOOGLE_LONGLONG(0);
  member_title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildMemberTitleRequest::~SetGuildMemberTitleRequest() {
  SharedDtor();
}

void SetGuildMemberTitleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildMemberTitleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildMemberTitleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildMemberTitleRequest_descriptor_;
}

const SetGuildMemberTitleRequest& SetGuildMemberTitleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

SetGuildMemberTitleRequest* SetGuildMemberTitleRequest::default_instance_ = NULL;

SetGuildMemberTitleRequest* SetGuildMemberTitleRequest::New() const {
  return new SetGuildMemberTitleRequest;
}

void SetGuildMemberTitleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    member_guid_ = GOOGLE_LONGLONG(0);
    member_title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildMemberTitleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 member_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_member_title;
        break;
      }
      
      // optional int32 member_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_title_)));
          set_has_member_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuildMemberTitleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->member_guid(), output);
  }
  
  // optional int32 member_title = 2;
  if (has_member_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->member_title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildMemberTitleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 member_guid = 1;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->member_guid(), target);
  }
  
  // optional int32 member_title = 2;
  if (has_member_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->member_title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildMemberTitleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 member_guid = 1;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
    // optional int32 member_title = 2;
    if (has_member_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildMemberTitleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildMemberTitleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildMemberTitleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildMemberTitleRequest::MergeFrom(const SetGuildMemberTitleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
    if (from.has_member_title()) {
      set_member_title(from.member_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildMemberTitleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildMemberTitleRequest::CopyFrom(const SetGuildMemberTitleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildMemberTitleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetGuildMemberTitleRequest::Swap(SetGuildMemberTitleRequest* other) {
  if (other != this) {
    std::swap(member_guid_, other->member_guid_);
    std::swap(member_title_, other->member_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildMemberTitleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildMemberTitleRequest_descriptor_;
  metadata.reflection = SetGuildMemberTitleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildMemberTitleResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SetGuildMemberTitleResponse::SetGuildMemberTitleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildMemberTitleResponse::InitAsDefaultInstance() {
}

SetGuildMemberTitleResponse::SetGuildMemberTitleResponse(const SetGuildMemberTitleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildMemberTitleResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildMemberTitleResponse::~SetGuildMemberTitleResponse() {
  SharedDtor();
}

void SetGuildMemberTitleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildMemberTitleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildMemberTitleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildMemberTitleResponse_descriptor_;
}

const SetGuildMemberTitleResponse& SetGuildMemberTitleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

SetGuildMemberTitleResponse* SetGuildMemberTitleResponse::default_instance_ = NULL;

SetGuildMemberTitleResponse* SetGuildMemberTitleResponse::New() const {
  return new SetGuildMemberTitleResponse;
}

void SetGuildMemberTitleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildMemberTitleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuildMemberTitleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildMemberTitleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildMemberTitleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildMemberTitleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildMemberTitleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildMemberTitleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildMemberTitleResponse::MergeFrom(const SetGuildMemberTitleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildMemberTitleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildMemberTitleResponse::CopyFrom(const SetGuildMemberTitleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildMemberTitleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetGuildMemberTitleResponse::Swap(SetGuildMemberTitleResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildMemberTitleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildMemberTitleResponse_descriptor_;
  metadata.reflection = SetGuildMemberTitleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildNoticeRequest::kContentFieldNumber;
#endif  // !_MSC_VER

SetGuildNoticeRequest::SetGuildNoticeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildNoticeRequest::InitAsDefaultInstance() {
}

SetGuildNoticeRequest::SetGuildNoticeRequest(const SetGuildNoticeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildNoticeRequest::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildNoticeRequest::~SetGuildNoticeRequest() {
  SharedDtor();
}

void SetGuildNoticeRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SetGuildNoticeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildNoticeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildNoticeRequest_descriptor_;
}

const SetGuildNoticeRequest& SetGuildNoticeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

SetGuildNoticeRequest* SetGuildNoticeRequest::default_instance_ = NULL;

SetGuildNoticeRequest* SetGuildNoticeRequest::New() const {
  return new SetGuildNoticeRequest;
}

void SetGuildNoticeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildNoticeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuildNoticeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildNoticeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildNoticeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildNoticeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildNoticeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildNoticeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildNoticeRequest::MergeFrom(const SetGuildNoticeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildNoticeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildNoticeRequest::CopyFrom(const SetGuildNoticeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildNoticeRequest::IsInitialized() const {
  
  return true;
}

void SetGuildNoticeRequest::Swap(SetGuildNoticeRequest* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildNoticeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildNoticeRequest_descriptor_;
  metadata.reflection = SetGuildNoticeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildNoticeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SetGuildNoticeResponse::SetGuildNoticeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildNoticeResponse::InitAsDefaultInstance() {
}

SetGuildNoticeResponse::SetGuildNoticeResponse(const SetGuildNoticeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildNoticeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildNoticeResponse::~SetGuildNoticeResponse() {
  SharedDtor();
}

void SetGuildNoticeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildNoticeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildNoticeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildNoticeResponse_descriptor_;
}

const SetGuildNoticeResponse& SetGuildNoticeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

SetGuildNoticeResponse* SetGuildNoticeResponse::default_instance_ = NULL;

SetGuildNoticeResponse* SetGuildNoticeResponse::New() const {
  return new SetGuildNoticeResponse;
}

void SetGuildNoticeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildNoticeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetGuildNoticeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildNoticeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildNoticeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildNoticeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildNoticeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildNoticeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildNoticeResponse::MergeFrom(const SetGuildNoticeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildNoticeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildNoticeResponse::CopyFrom(const SetGuildNoticeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildNoticeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetGuildNoticeResponse::Swap(SetGuildNoticeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildNoticeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildNoticeResponse_descriptor_;
  metadata.reflection = SetGuildNoticeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildMapRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

EnterGuildMapRequest::EnterGuildMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGuildMapRequest::InitAsDefaultInstance() {
}

EnterGuildMapRequest::EnterGuildMapRequest(const EnterGuildMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGuildMapRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildMapRequest::~EnterGuildMapRequest() {
  SharedDtor();
}

void EnterGuildMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGuildMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildMapRequest_descriptor_;
}

const EnterGuildMapRequest& EnterGuildMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

EnterGuildMapRequest* EnterGuildMapRequest::default_instance_ = NULL;

EnterGuildMapRequest* EnterGuildMapRequest::New() const {
  return new EnterGuildMapRequest;
}

void EnterGuildMapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGuildMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_id = 1 [default = 0];
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGuildMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc_id = 1 [default = 0];
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGuildMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_id = 1 [default = 0];
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildMapRequest::MergeFrom(const EnterGuildMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildMapRequest::CopyFrom(const EnterGuildMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildMapRequest::IsInitialized() const {
  
  return true;
}

void EnterGuildMapRequest::Swap(EnterGuildMapRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildMapRequest_descriptor_;
  metadata.reflection = EnterGuildMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildMapResponse::kErrorCodeFieldNumber;
const int EnterGuildMapResponse::kMapIdFieldNumber;
const int EnterGuildMapResponse::kMapXFieldNumber;
const int EnterGuildMapResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

EnterGuildMapResponse::EnterGuildMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGuildMapResponse::InitAsDefaultInstance() {
}

EnterGuildMapResponse::EnterGuildMapResponse(const EnterGuildMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGuildMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildMapResponse::~EnterGuildMapResponse() {
  SharedDtor();
}

void EnterGuildMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGuildMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildMapResponse_descriptor_;
}

const EnterGuildMapResponse& EnterGuildMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

EnterGuildMapResponse* EnterGuildMapResponse::default_instance_ = NULL;

EnterGuildMapResponse* EnterGuildMapResponse::New() const {
  return new EnterGuildMapResponse;
}

void EnterGuildMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGuildMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGuildMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGuildMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildMapResponse::MergeFrom(const EnterGuildMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildMapResponse::CopyFrom(const EnterGuildMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterGuildMapResponse::Swap(EnterGuildMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildMapResponse_descriptor_;
  metadata.reflection = EnterGuildMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveGuildMapRequest::LeaveGuildMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGuildMapRequest::InitAsDefaultInstance() {
}

LeaveGuildMapRequest::LeaveGuildMapRequest(const LeaveGuildMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGuildMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGuildMapRequest::~LeaveGuildMapRequest() {
  SharedDtor();
}

void LeaveGuildMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGuildMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGuildMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGuildMapRequest_descriptor_;
}

const LeaveGuildMapRequest& LeaveGuildMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

LeaveGuildMapRequest* LeaveGuildMapRequest::default_instance_ = NULL;

LeaveGuildMapRequest* LeaveGuildMapRequest::New() const {
  return new LeaveGuildMapRequest;
}

void LeaveGuildMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGuildMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveGuildMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGuildMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGuildMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGuildMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGuildMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGuildMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGuildMapRequest::MergeFrom(const LeaveGuildMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGuildMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGuildMapRequest::CopyFrom(const LeaveGuildMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGuildMapRequest::IsInitialized() const {
  
  return true;
}

void LeaveGuildMapRequest::Swap(LeaveGuildMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGuildMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGuildMapRequest_descriptor_;
  metadata.reflection = LeaveGuildMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGuildMapResponse::kErrorCodeFieldNumber;
const int LeaveGuildMapResponse::kMapIdFieldNumber;
const int LeaveGuildMapResponse::kMapXFieldNumber;
const int LeaveGuildMapResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

LeaveGuildMapResponse::LeaveGuildMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGuildMapResponse::InitAsDefaultInstance() {
}

LeaveGuildMapResponse::LeaveGuildMapResponse(const LeaveGuildMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGuildMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGuildMapResponse::~LeaveGuildMapResponse() {
  SharedDtor();
}

void LeaveGuildMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGuildMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGuildMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGuildMapResponse_descriptor_;
}

const LeaveGuildMapResponse& LeaveGuildMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fguild_2eproto();  return *default_instance_;
}

LeaveGuildMapResponse* LeaveGuildMapResponse::default_instance_ = NULL;

LeaveGuildMapResponse* LeaveGuildMapResponse::New() const {
  return new LeaveGuildMapResponse;
}

void LeaveGuildMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGuildMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveGuildMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGuildMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGuildMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGuildMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGuildMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGuildMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGuildMapResponse::MergeFrom(const LeaveGuildMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGuildMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGuildMapResponse::CopyFrom(const LeaveGuildMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGuildMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveGuildMapResponse::Swap(LeaveGuildMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGuildMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGuildMapResponse_descriptor_;
  metadata.reflection = LeaveGuildMapResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
