// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* OpenChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkChannelNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkChannelNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightResultBroadcastNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightResultBroadcastNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fchat_2eproto() {
  protobuf_AddDesc_game_5fchat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_chat.proto");
  GOOGLE_CHECK(file != NULL);
  OpenChannelRequest_descriptor_ = file->message_type(0);
  static const int OpenChannelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelRequest, channel_list_),
  };
  OpenChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenChannelRequest_descriptor_,
      OpenChannelRequest::default_instance_,
      OpenChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenChannelRequest));
  OpenChannelResponse_descriptor_ = file->message_type(1);
  static const int OpenChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelResponse, error_code_),
  };
  OpenChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenChannelResponse_descriptor_,
      OpenChannelResponse::default_instance_,
      OpenChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenChannelResponse));
  CloseChannelRequest_descriptor_ = file->message_type(2);
  static const int CloseChannelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelRequest, channel_list_),
  };
  CloseChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseChannelRequest_descriptor_,
      CloseChannelRequest::default_instance_,
      CloseChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseChannelRequest));
  CloseChannelResponse_descriptor_ = file->message_type(3);
  static const int CloseChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelResponse, error_code_),
  };
  CloseChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseChannelResponse_descriptor_,
      CloseChannelResponse::default_instance_,
      CloseChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseChannelResponse));
  TalkChannelRequest_descriptor_ = file->message_type(4);
  static const int TalkChannelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, data_),
  };
  TalkChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkChannelRequest_descriptor_,
      TalkChannelRequest::default_instance_,
      TalkChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkChannelRequest));
  TalkChannelResponse_descriptor_ = file->message_type(5);
  static const int TalkChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelResponse, error_code_),
  };
  TalkChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkChannelResponse_descriptor_,
      TalkChannelResponse::default_instance_,
      TalkChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkChannelResponse));
  TalkChannelNotify_descriptor_ = file->message_type(6);
  static const int TalkChannelNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, src_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, data_),
  };
  TalkChannelNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkChannelNotify_descriptor_,
      TalkChannelNotify::default_instance_,
      TalkChannelNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkChannelNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkChannelNotify));
  TalkPlayerRequest_descriptor_ = file->message_type(7);
  static const int TalkPlayerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, dst_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, data_),
  };
  TalkPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkPlayerRequest_descriptor_,
      TalkPlayerRequest::default_instance_,
      TalkPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkPlayerRequest));
  TalkPlayerResponse_descriptor_ = file->message_type(8);
  static const int TalkPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerResponse, error_code_),
  };
  TalkPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkPlayerResponse_descriptor_,
      TalkPlayerResponse::default_instance_,
      TalkPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkPlayerResponse));
  TalkPlayerNotify_descriptor_ = file->message_type(9);
  static const int TalkPlayerNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, src_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, data_),
  };
  TalkPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkPlayerNotify_descriptor_,
      TalkPlayerNotify::default_instance_,
      TalkPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkPlayerNotify));
  FightResultBroadcastNotify_descriptor_ = file->message_type(10);
  static const int FightResultBroadcastNotify_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, channel_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, fight_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, attacker_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, attacker_gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, attacker_in_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, attacker_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, defender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, defender_in_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, defender_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, is_attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, sender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, sender_gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, sender_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, sender_name_),
  };
  FightResultBroadcastNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightResultBroadcastNotify_descriptor_,
      FightResultBroadcastNotify::default_instance_,
      FightResultBroadcastNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResultBroadcastNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightResultBroadcastNotify));
  ChannelType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fchat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenChannelRequest_descriptor_, &OpenChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenChannelResponse_descriptor_, &OpenChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseChannelRequest_descriptor_, &CloseChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseChannelResponse_descriptor_, &CloseChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkChannelRequest_descriptor_, &TalkChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkChannelResponse_descriptor_, &TalkChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkChannelNotify_descriptor_, &TalkChannelNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkPlayerRequest_descriptor_, &TalkPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkPlayerResponse_descriptor_, &TalkPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkPlayerNotify_descriptor_, &TalkPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightResultBroadcastNotify_descriptor_, &FightResultBroadcastNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fchat_2eproto() {
  delete OpenChannelRequest::default_instance_;
  delete OpenChannelRequest_reflection_;
  delete OpenChannelResponse::default_instance_;
  delete OpenChannelResponse_reflection_;
  delete CloseChannelRequest::default_instance_;
  delete CloseChannelRequest_reflection_;
  delete CloseChannelResponse::default_instance_;
  delete CloseChannelResponse_reflection_;
  delete TalkChannelRequest::default_instance_;
  delete TalkChannelRequest_reflection_;
  delete TalkChannelResponse::default_instance_;
  delete TalkChannelResponse_reflection_;
  delete TalkChannelNotify::default_instance_;
  delete TalkChannelNotify_reflection_;
  delete TalkPlayerRequest::default_instance_;
  delete TalkPlayerRequest_reflection_;
  delete TalkPlayerResponse::default_instance_;
  delete TalkPlayerResponse_reflection_;
  delete TalkPlayerNotify::default_instance_;
  delete TalkPlayerNotify_reflection_;
  delete FightResultBroadcastNotify::default_instance_;
  delete FightResultBroadcastNotify_reflection_;
}

void protobuf_AddDesc_game_5fchat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017game_chat.proto\022\020protocols.common\032\021gam"
    "e_common.proto\"I\n\022OpenChannelRequest\0223\n\014"
    "channel_list\030\001 \003(\0162\035.protocols.common.Ch"
    "annelType\")\n\023OpenChannelResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"J\n\023CloseChannelRequest\0223\n\014c"
    "hannel_list\030\001 \003(\0162\035.protocols.common.Cha"
    "nnelType\"*\n\024CloseChannelResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"t\n\022TalkChannelRequest\022.\n\007ch"
    "annel\030\001 \002(\0162\035.protocols.common.ChannelTy"
    "pe\022\017\n\007content\030\002 \002(\t\022\017\n\004flag\030\003 \001(\005:\0010\022\014\n\004"
    "data\030\004 \001(\t\")\n\023TalkChannelResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\"\367\001\n\021TalkChannelNotify\022\020\n\010s"
    "rc_guid\030\001 \002(\003\022\020\n\010src_name\030\002 \001(\t\022.\n\007chann"
    "el\030\003 \001(\0162\035.protocols.common.ChannelType\022"
    "\017\n\007content\030\004 \002(\t\022\017\n\004flag\030\005 \001(\005:\0010\022.\n\006gen"
    "der\030\006 \001(\0162\030.protocols.common.Gender:\004MAL"
    "E\022\030\n\rsrc_server_id\030\007 \001(\005:\0010\022\024\n\tvip_level"
    "\030\010 \001(\005:\0010\022\014\n\004data\030\t \001(\t\"U\n\021TalkPlayerReq"
    "uest\022\020\n\010dst_guid\030\001 \002(\003\022\017\n\007content\030\002 \002(\t\022"
    "\017\n\004flag\030\003 \001(\005:\0010\022\014\n\004data\030\004 \001(\t\"(\n\022TalkPl"
    "ayerResponse\022\022\n\nerror_code\030\001 \002(\005\"\306\001\n\020Tal"
    "kPlayerNotify\022\020\n\010src_guid\030\001 \002(\003\022\020\n\010src_n"
    "ame\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022\017\n\004flag\030\004 \001(\005"
    ":\0010\022.\n\006gender\030\005 \001(\0162\030.protocols.common.G"
    "ender:\004MALE\022\030\n\rsrc_server_id\030\006 \001(\005:\0010\022\024\n"
    "\tvip_level\030\007 \001(\005:\0010\022\014\n\004data\030\010 \001(\t\"\256\003\n\032Fi"
    "ghtResultBroadcastNotify\022\024\n\014channel_type"
    "\030\001 \002(\005\022\021\n\tfight_key\030\002 \002(\003\022\022\n\nfight_type\030"
    "\014 \001(\005\022\025\n\rattacker_guid\030\003 \002(\003\022\025\n\rattacker"
    "_name\030\004 \002(\t\022\027\n\017attacker_gender\030\r \001(\005\022\030\n\020"
    "attacker_in_team\030\005 \002(\005\022\032\n\022attacker_vip_l"
    "evel\030\006 \001(\005\022\025\n\rdefender_guid\030\016 \002(\003\022\025\n\rdef"
    "ender_name\030\017 \002(\t\022\030\n\020defender_in_team\030\t \002"
    "(\005\022\032\n\022defender_vip_level\030\n \001(\005\022\027\n\017is_att"
    "acker_win\030\013 \001(\005\022\023\n\013sender_guid\030\020 \001(\003\022\025\n\r"
    "sender_gender\030\021 \001(\005\022\030\n\020sender_vip_level\030"
    "\022 \001(\005\022\023\n\013sender_name\030\023 \001(\t*\202\001\n\013ChannelTy"
    "pe\022\022\n\016CHANNEL_SYSTEM\020\001\022\020\n\014CHANNEL_TEAM\020\002"
    "\022\020\n\014CHANNEL_VIEW\020\003\022\021\n\rCHANNEL_GUILD\020\004\022\021\n"
    "\rCHANNEL_WORLD\020\005\022\025\n\021CHANNEL_BROADCAST\020\006", 1599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_chat.proto", &protobuf_RegisterTypes);
  OpenChannelRequest::default_instance_ = new OpenChannelRequest();
  OpenChannelResponse::default_instance_ = new OpenChannelResponse();
  CloseChannelRequest::default_instance_ = new CloseChannelRequest();
  CloseChannelResponse::default_instance_ = new CloseChannelResponse();
  TalkChannelRequest::default_instance_ = new TalkChannelRequest();
  TalkChannelResponse::default_instance_ = new TalkChannelResponse();
  TalkChannelNotify::default_instance_ = new TalkChannelNotify();
  TalkPlayerRequest::default_instance_ = new TalkPlayerRequest();
  TalkPlayerResponse::default_instance_ = new TalkPlayerResponse();
  TalkPlayerNotify::default_instance_ = new TalkPlayerNotify();
  FightResultBroadcastNotify::default_instance_ = new FightResultBroadcastNotify();
  OpenChannelRequest::default_instance_->InitAsDefaultInstance();
  OpenChannelResponse::default_instance_->InitAsDefaultInstance();
  CloseChannelRequest::default_instance_->InitAsDefaultInstance();
  CloseChannelResponse::default_instance_->InitAsDefaultInstance();
  TalkChannelRequest::default_instance_->InitAsDefaultInstance();
  TalkChannelResponse::default_instance_->InitAsDefaultInstance();
  TalkChannelNotify::default_instance_->InitAsDefaultInstance();
  TalkPlayerRequest::default_instance_->InitAsDefaultInstance();
  TalkPlayerResponse::default_instance_->InitAsDefaultInstance();
  TalkPlayerNotify::default_instance_->InitAsDefaultInstance();
  FightResultBroadcastNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fchat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fchat_2eproto {
  StaticDescriptorInitializer_game_5fchat_2eproto() {
    protobuf_AddDesc_game_5fchat_2eproto();
  }
} static_descriptor_initializer_game_5fchat_2eproto_;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelType_descriptor_;
}
bool ChannelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OpenChannelRequest::kChannelListFieldNumber;
#endif  // !_MSC_VER

OpenChannelRequest::OpenChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenChannelRequest::InitAsDefaultInstance() {
}

OpenChannelRequest::OpenChannelRequest(const OpenChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenChannelRequest::~OpenChannelRequest() {
  SharedDtor();
}

void OpenChannelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenChannelRequest_descriptor_;
}

const OpenChannelRequest& OpenChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

OpenChannelRequest* OpenChannelRequest::default_instance_ = NULL;

OpenChannelRequest* OpenChannelRequest::New() const {
  return new OpenChannelRequest;
}

void OpenChannelRequest::Clear() {
  channel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.ChannelType channel_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_list:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ChannelType_IsValid(value)) {
            add_channel_list(static_cast< protocols::common::ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &protocols::common::ChannelType_IsValid,
                 this->mutable_channel_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_channel_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.ChannelType channel_list = 1;
  for (int i = 0; i < this->channel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.ChannelType channel_list = 1;
  for (int i = 0; i < this->channel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenChannelRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.ChannelType channel_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel_list(i));
    }
    total_size += 1 * this->channel_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenChannelRequest::MergeFrom(const OpenChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_list_.MergeFrom(from.channel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChannelRequest::CopyFrom(const OpenChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChannelRequest::IsInitialized() const {
  
  return true;
}

void OpenChannelRequest::Swap(OpenChannelRequest* other) {
  if (other != this) {
    channel_list_.Swap(&other->channel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenChannelRequest_descriptor_;
  metadata.reflection = OpenChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenChannelResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

OpenChannelResponse::OpenChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenChannelResponse::InitAsDefaultInstance() {
}

OpenChannelResponse::OpenChannelResponse(const OpenChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenChannelResponse::~OpenChannelResponse() {
  SharedDtor();
}

void OpenChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenChannelResponse_descriptor_;
}

const OpenChannelResponse& OpenChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

OpenChannelResponse* OpenChannelResponse::default_instance_ = NULL;

OpenChannelResponse* OpenChannelResponse::New() const {
  return new OpenChannelResponse;
}

void OpenChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenChannelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenChannelResponse::MergeFrom(const OpenChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChannelResponse::CopyFrom(const OpenChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OpenChannelResponse::Swap(OpenChannelResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenChannelResponse_descriptor_;
  metadata.reflection = OpenChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseChannelRequest::kChannelListFieldNumber;
#endif  // !_MSC_VER

CloseChannelRequest::CloseChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseChannelRequest::InitAsDefaultInstance() {
}

CloseChannelRequest::CloseChannelRequest(const CloseChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseChannelRequest::~CloseChannelRequest() {
  SharedDtor();
}

void CloseChannelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseChannelRequest_descriptor_;
}

const CloseChannelRequest& CloseChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

CloseChannelRequest* CloseChannelRequest::default_instance_ = NULL;

CloseChannelRequest* CloseChannelRequest::New() const {
  return new CloseChannelRequest;
}

void CloseChannelRequest::Clear() {
  channel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.ChannelType channel_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_list:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ChannelType_IsValid(value)) {
            add_channel_list(static_cast< protocols::common::ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &protocols::common::ChannelType_IsValid,
                 this->mutable_channel_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_channel_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.ChannelType channel_list = 1;
  for (int i = 0; i < this->channel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.ChannelType channel_list = 1;
  for (int i = 0; i < this->channel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseChannelRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.ChannelType channel_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->channel_list(i));
    }
    total_size += 1 * this->channel_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseChannelRequest::MergeFrom(const CloseChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  channel_list_.MergeFrom(from.channel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseChannelRequest::CopyFrom(const CloseChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseChannelRequest::IsInitialized() const {
  
  return true;
}

void CloseChannelRequest::Swap(CloseChannelRequest* other) {
  if (other != this) {
    channel_list_.Swap(&other->channel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseChannelRequest_descriptor_;
  metadata.reflection = CloseChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseChannelResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CloseChannelResponse::CloseChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseChannelResponse::InitAsDefaultInstance() {
}

CloseChannelResponse::CloseChannelResponse(const CloseChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseChannelResponse::~CloseChannelResponse() {
  SharedDtor();
}

void CloseChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseChannelResponse_descriptor_;
}

const CloseChannelResponse& CloseChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

CloseChannelResponse* CloseChannelResponse::default_instance_ = NULL;

CloseChannelResponse* CloseChannelResponse::New() const {
  return new CloseChannelResponse;
}

void CloseChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseChannelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseChannelResponse::MergeFrom(const CloseChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseChannelResponse::CopyFrom(const CloseChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CloseChannelResponse::Swap(CloseChannelResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseChannelResponse_descriptor_;
  metadata.reflection = CloseChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkChannelRequest::kChannelFieldNumber;
const int TalkChannelRequest::kContentFieldNumber;
const int TalkChannelRequest::kFlagFieldNumber;
const int TalkChannelRequest::kDataFieldNumber;
#endif  // !_MSC_VER

TalkChannelRequest::TalkChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkChannelRequest::InitAsDefaultInstance() {
}

TalkChannelRequest::TalkChannelRequest(const TalkChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkChannelRequest::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkChannelRequest::~TalkChannelRequest() {
  SharedDtor();
}

void TalkChannelRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TalkChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkChannelRequest_descriptor_;
}

const TalkChannelRequest& TalkChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkChannelRequest* TalkChannelRequest::default_instance_ = NULL;

TalkChannelRequest* TalkChannelRequest::New() const {
  return new TalkChannelRequest;
}

void TalkChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    flag_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ChannelType channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ChannelType_IsValid(value)) {
            set_channel(static_cast< protocols::common::ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // optional string data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ChannelType channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional int32 flag = 3 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }
  
  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ChannelType channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional int32 flag = 3 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }
  
  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkChannelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.ChannelType channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }
    
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 flag = 3 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkChannelRequest::MergeFrom(const TalkChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkChannelRequest::CopyFrom(const TalkChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TalkChannelRequest::Swap(TalkChannelRequest* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(flag_, other->flag_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkChannelRequest_descriptor_;
  metadata.reflection = TalkChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkChannelResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TalkChannelResponse::TalkChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkChannelResponse::InitAsDefaultInstance() {
}

TalkChannelResponse::TalkChannelResponse(const TalkChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkChannelResponse::~TalkChannelResponse() {
  SharedDtor();
}

void TalkChannelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkChannelResponse_descriptor_;
}

const TalkChannelResponse& TalkChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkChannelResponse* TalkChannelResponse::default_instance_ = NULL;

TalkChannelResponse* TalkChannelResponse::New() const {
  return new TalkChannelResponse;
}

void TalkChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkChannelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkChannelResponse::MergeFrom(const TalkChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkChannelResponse::CopyFrom(const TalkChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TalkChannelResponse::Swap(TalkChannelResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkChannelResponse_descriptor_;
  metadata.reflection = TalkChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkChannelNotify::kSrcGuidFieldNumber;
const int TalkChannelNotify::kSrcNameFieldNumber;
const int TalkChannelNotify::kChannelFieldNumber;
const int TalkChannelNotify::kContentFieldNumber;
const int TalkChannelNotify::kFlagFieldNumber;
const int TalkChannelNotify::kGenderFieldNumber;
const int TalkChannelNotify::kSrcServerIdFieldNumber;
const int TalkChannelNotify::kVipLevelFieldNumber;
const int TalkChannelNotify::kDataFieldNumber;
#endif  // !_MSC_VER

TalkChannelNotify::TalkChannelNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkChannelNotify::InitAsDefaultInstance() {
}

TalkChannelNotify::TalkChannelNotify(const TalkChannelNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkChannelNotify::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_LONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  gender_ = 1;
  src_server_id_ = 0;
  vip_level_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkChannelNotify::~TalkChannelNotify() {
  SharedDtor();
}

void TalkChannelNotify::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TalkChannelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkChannelNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkChannelNotify_descriptor_;
}

const TalkChannelNotify& TalkChannelNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkChannelNotify* TalkChannelNotify::default_instance_ = NULL;

TalkChannelNotify* TalkChannelNotify::New() const {
  return new TalkChannelNotify;
}

void TalkChannelNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_LONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    channel_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    flag_ = 0;
    gender_ = 1;
    src_server_id_ = 0;
    vip_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkChannelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }
      
      // optional string src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_name().data(), this->src_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }
      
      // optional .protocols.common.ChannelType channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ChannelType_IsValid(value)) {
            set_channel(static_cast< protocols::common::ChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 6 [default = MALE];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_src_server_id;
        break;
      }
      
      // optional int32 src_server_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_id_)));
          set_has_src_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }
      
      // optional string data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkChannelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_guid(), output);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->src_name(), output);
  }
  
  // optional .protocols.common.ChannelType channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel(), output);
  }
  
  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  // optional int32 flag = 5 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }
  
  // optional .protocols.common.Gender gender = 6 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gender(), output);
  }
  
  // optional int32 src_server_id = 7 [default = 0];
  if (has_src_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->src_server_id(), output);
  }
  
  // optional int32 vip_level = 8 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip_level(), output);
  }
  
  // optional string data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkChannelNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_guid(), target);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_name(), target);
  }
  
  // optional .protocols.common.ChannelType channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel(), target);
  }
  
  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  // optional int32 flag = 5 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }
  
  // optional .protocols.common.Gender gender = 6 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gender(), target);
  }
  
  // optional int32 src_server_id = 7 [default = 0];
  if (has_src_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->src_server_id(), target);
  }
  
  // optional int32 vip_level = 8 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip_level(), target);
  }
  
  // optional string data = 9;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkChannelNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_guid());
    }
    
    // optional string src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_name());
    }
    
    // optional .protocols.common.ChannelType channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }
    
    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 flag = 5 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional .protocols.common.Gender gender = 6 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 src_server_id = 7 [default = 0];
    if (has_src_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_id());
    }
    
    // optional int32 vip_level = 8 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string data = 9;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkChannelNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkChannelNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkChannelNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkChannelNotify::MergeFrom(const TalkChannelNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_src_server_id()) {
      set_src_server_id(from.src_server_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkChannelNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkChannelNotify::CopyFrom(const TalkChannelNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkChannelNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  return true;
}

void TalkChannelNotify::Swap(TalkChannelNotify* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(src_name_, other->src_name_);
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(flag_, other->flag_);
    std::swap(gender_, other->gender_);
    std::swap(src_server_id_, other->src_server_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkChannelNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkChannelNotify_descriptor_;
  metadata.reflection = TalkChannelNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkPlayerRequest::kDstGuidFieldNumber;
const int TalkPlayerRequest::kContentFieldNumber;
const int TalkPlayerRequest::kFlagFieldNumber;
const int TalkPlayerRequest::kDataFieldNumber;
#endif  // !_MSC_VER

TalkPlayerRequest::TalkPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkPlayerRequest::InitAsDefaultInstance() {
}

TalkPlayerRequest::TalkPlayerRequest(const TalkPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_guid_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkPlayerRequest::~TalkPlayerRequest() {
  SharedDtor();
}

void TalkPlayerRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TalkPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkPlayerRequest_descriptor_;
}

const TalkPlayerRequest& TalkPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkPlayerRequest* TalkPlayerRequest::default_instance_ = NULL;

TalkPlayerRequest* TalkPlayerRequest::New() const {
  return new TalkPlayerRequest;
}

void TalkPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_guid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    flag_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dst_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dst_guid_)));
          set_has_dst_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // optional string data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dst_guid(), output);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  // optional int32 flag = 3 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }
  
  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dst_guid = 1;
  if (has_dst_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dst_guid(), target);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  // optional int32 flag = 3 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }
  
  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dst_guid = 1;
    if (has_dst_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dst_guid());
    }
    
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 flag = 3 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkPlayerRequest::MergeFrom(const TalkPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_guid()) {
      set_dst_guid(from.dst_guid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkPlayerRequest::CopyFrom(const TalkPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TalkPlayerRequest::Swap(TalkPlayerRequest* other) {
  if (other != this) {
    std::swap(dst_guid_, other->dst_guid_);
    std::swap(content_, other->content_);
    std::swap(flag_, other->flag_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkPlayerRequest_descriptor_;
  metadata.reflection = TalkPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkPlayerResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TalkPlayerResponse::TalkPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkPlayerResponse::InitAsDefaultInstance() {
}

TalkPlayerResponse::TalkPlayerResponse(const TalkPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkPlayerResponse::~TalkPlayerResponse() {
  SharedDtor();
}

void TalkPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkPlayerResponse_descriptor_;
}

const TalkPlayerResponse& TalkPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkPlayerResponse* TalkPlayerResponse::default_instance_ = NULL;

TalkPlayerResponse* TalkPlayerResponse::New() const {
  return new TalkPlayerResponse;
}

void TalkPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkPlayerResponse::MergeFrom(const TalkPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkPlayerResponse::CopyFrom(const TalkPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkPlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TalkPlayerResponse::Swap(TalkPlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkPlayerResponse_descriptor_;
  metadata.reflection = TalkPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkPlayerNotify::kSrcGuidFieldNumber;
const int TalkPlayerNotify::kSrcNameFieldNumber;
const int TalkPlayerNotify::kContentFieldNumber;
const int TalkPlayerNotify::kFlagFieldNumber;
const int TalkPlayerNotify::kGenderFieldNumber;
const int TalkPlayerNotify::kSrcServerIdFieldNumber;
const int TalkPlayerNotify::kVipLevelFieldNumber;
const int TalkPlayerNotify::kDataFieldNumber;
#endif  // !_MSC_VER

TalkPlayerNotify::TalkPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkPlayerNotify::InitAsDefaultInstance() {
}

TalkPlayerNotify::TalkPlayerNotify(const TalkPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_LONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  gender_ = 1;
  src_server_id_ = 0;
  vip_level_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkPlayerNotify::~TalkPlayerNotify() {
  SharedDtor();
}

void TalkPlayerNotify::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TalkPlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkPlayerNotify_descriptor_;
}

const TalkPlayerNotify& TalkPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

TalkPlayerNotify* TalkPlayerNotify::default_instance_ = NULL;

TalkPlayerNotify* TalkPlayerNotify::New() const {
  return new TalkPlayerNotify;
}

void TalkPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_LONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    flag_ = 0;
    gender_ = 1;
    src_server_id_ = 0;
    vip_level_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src_name;
        break;
      }
      
      // optional string src_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_name().data(), this->src_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 5 [default = MALE];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_server_id;
        break;
      }
      
      // optional int32 src_server_id = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_server_id_)));
          set_has_src_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }
      
      // optional string data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->src_guid(), output);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->src_name(), output);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  // optional int32 flag = 4 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }
  
  // optional .protocols.common.Gender gender = 5 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }
  
  // optional int32 src_server_id = 6 [default = 0];
  if (has_src_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->src_server_id(), output);
  }
  
  // optional int32 vip_level = 7 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_level(), output);
  }
  
  // optional string data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->src_guid(), target);
  }
  
  // optional string src_name = 2;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_name().data(), this->src_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_name(), target);
  }
  
  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  // optional int32 flag = 4 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }
  
  // optional .protocols.common.Gender gender = 5 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gender(), target);
  }
  
  // optional int32 src_server_id = 6 [default = 0];
  if (has_src_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->src_server_id(), target);
  }
  
  // optional int32 vip_level = 7 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_level(), target);
  }
  
  // optional string data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->src_guid());
    }
    
    // optional string src_name = 2;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_name());
    }
    
    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 flag = 4 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional .protocols.common.Gender gender = 5 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 src_server_id = 6 [default = 0];
    if (has_src_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_server_id());
    }
    
    // optional int32 vip_level = 7 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional string data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkPlayerNotify::MergeFrom(const TalkPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_src_server_id()) {
      set_src_server_id(from.src_server_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkPlayerNotify::CopyFrom(const TalkPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkPlayerNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TalkPlayerNotify::Swap(TalkPlayerNotify* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(src_name_, other->src_name_);
    std::swap(content_, other->content_);
    std::swap(flag_, other->flag_);
    std::swap(gender_, other->gender_);
    std::swap(src_server_id_, other->src_server_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkPlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkPlayerNotify_descriptor_;
  metadata.reflection = TalkPlayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightResultBroadcastNotify::kChannelTypeFieldNumber;
const int FightResultBroadcastNotify::kFightKeyFieldNumber;
const int FightResultBroadcastNotify::kFightTypeFieldNumber;
const int FightResultBroadcastNotify::kAttackerGuidFieldNumber;
const int FightResultBroadcastNotify::kAttackerNameFieldNumber;
const int FightResultBroadcastNotify::kAttackerGenderFieldNumber;
const int FightResultBroadcastNotify::kAttackerInTeamFieldNumber;
const int FightResultBroadcastNotify::kAttackerVipLevelFieldNumber;
const int FightResultBroadcastNotify::kDefenderGuidFieldNumber;
const int FightResultBroadcastNotify::kDefenderNameFieldNumber;
const int FightResultBroadcastNotify::kDefenderInTeamFieldNumber;
const int FightResultBroadcastNotify::kDefenderVipLevelFieldNumber;
const int FightResultBroadcastNotify::kIsAttackerWinFieldNumber;
const int FightResultBroadcastNotify::kSenderGuidFieldNumber;
const int FightResultBroadcastNotify::kSenderGenderFieldNumber;
const int FightResultBroadcastNotify::kSenderVipLevelFieldNumber;
const int FightResultBroadcastNotify::kSenderNameFieldNumber;
#endif  // !_MSC_VER

FightResultBroadcastNotify::FightResultBroadcastNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightResultBroadcastNotify::InitAsDefaultInstance() {
}

FightResultBroadcastNotify::FightResultBroadcastNotify(const FightResultBroadcastNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightResultBroadcastNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_type_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  fight_type_ = 0;
  attacker_guid_ = GOOGLE_LONGLONG(0);
  attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_gender_ = 0;
  attacker_in_team_ = 0;
  attacker_vip_level_ = 0;
  defender_guid_ = GOOGLE_LONGLONG(0);
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_in_team_ = 0;
  defender_vip_level_ = 0;
  is_attacker_win_ = 0;
  sender_guid_ = GOOGLE_LONGLONG(0);
  sender_gender_ = 0;
  sender_vip_level_ = 0;
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightResultBroadcastNotify::~FightResultBroadcastNotify() {
  SharedDtor();
}

void FightResultBroadcastNotify::SharedDtor() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void FightResultBroadcastNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightResultBroadcastNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightResultBroadcastNotify_descriptor_;
}

const FightResultBroadcastNotify& FightResultBroadcastNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fchat_2eproto();  return *default_instance_;
}

FightResultBroadcastNotify* FightResultBroadcastNotify::default_instance_ = NULL;

FightResultBroadcastNotify* FightResultBroadcastNotify::New() const {
  return new FightResultBroadcastNotify;
}

void FightResultBroadcastNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_type_ = 0;
    fight_key_ = GOOGLE_LONGLONG(0);
    fight_type_ = 0;
    attacker_guid_ = GOOGLE_LONGLONG(0);
    if (has_attacker_name()) {
      if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_name_->clear();
      }
    }
    attacker_gender_ = 0;
    attacker_in_team_ = 0;
    attacker_vip_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defender_guid_ = GOOGLE_LONGLONG(0);
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
        defender_name_->clear();
      }
    }
    defender_in_team_ = 0;
    defender_vip_level_ = 0;
    is_attacker_win_ = 0;
    sender_guid_ = GOOGLE_LONGLONG(0);
    sender_gender_ = 0;
    sender_vip_level_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightResultBroadcastNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 channel_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_type_)));
          set_has_channel_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_key;
        break;
      }
      
      // required int64 fight_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attacker_guid;
        break;
      }
      
      // required int64 attacker_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attacker_guid_)));
          set_has_attacker_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attacker_name;
        break;
      }
      
      // required string attacker_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attacker_in_team;
        break;
      }
      
      // required int32 attacker_in_team = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_in_team_)));
          set_has_attacker_in_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attacker_vip_level;
        break;
      }
      
      // optional int32 attacker_vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_vip_level_)));
          set_has_attacker_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defender_in_team;
        break;
      }
      
      // required int32 defender_in_team = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defender_in_team_)));
          set_has_defender_in_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_defender_vip_level;
        break;
      }
      
      // optional int32 defender_vip_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defender_vip_level_)));
          set_has_defender_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_attacker_win;
        break;
      }
      
      // optional int32 is_attacker_win = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_attacker_win_)));
          set_has_is_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fight_type;
        break;
      }
      
      // optional int32 fight_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_type_)));
          set_has_fight_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attacker_gender;
        break;
      }
      
      // optional int32 attacker_gender = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_gender_)));
          set_has_attacker_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_defender_guid;
        break;
      }
      
      // required int64 defender_guid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defender_guid_)));
          set_has_defender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_defender_name;
        break;
      }
      
      // required string defender_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sender_guid;
        break;
      }
      
      // optional int64 sender_guid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_guid_)));
          set_has_sender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sender_gender;
        break;
      }
      
      // optional int32 sender_gender = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_gender_)));
          set_has_sender_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sender_vip_level;
        break;
      }
      
      // optional int32 sender_vip_level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_vip_level_)));
          set_has_sender_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_sender_name;
        break;
      }
      
      // optional string sender_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightResultBroadcastNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 channel_type = 1;
  if (has_channel_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel_type(), output);
  }
  
  // required int64 fight_key = 2;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fight_key(), output);
  }
  
  // required int64 attacker_guid = 3;
  if (has_attacker_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attacker_guid(), output);
  }
  
  // required string attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attacker_name(), output);
  }
  
  // required int32 attacker_in_team = 5;
  if (has_attacker_in_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attacker_in_team(), output);
  }
  
  // optional int32 attacker_vip_level = 6;
  if (has_attacker_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attacker_vip_level(), output);
  }
  
  // required int32 defender_in_team = 9;
  if (has_defender_in_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->defender_in_team(), output);
  }
  
  // optional int32 defender_vip_level = 10;
  if (has_defender_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->defender_vip_level(), output);
  }
  
  // optional int32 is_attacker_win = 11;
  if (has_is_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_attacker_win(), output);
  }
  
  // optional int32 fight_type = 12;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fight_type(), output);
  }
  
  // optional int32 attacker_gender = 13;
  if (has_attacker_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attacker_gender(), output);
  }
  
  // required int64 defender_guid = 14;
  if (has_defender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->defender_guid(), output);
  }
  
  // required string defender_name = 15;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->defender_name(), output);
  }
  
  // optional int64 sender_guid = 16;
  if (has_sender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->sender_guid(), output);
  }
  
  // optional int32 sender_gender = 17;
  if (has_sender_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sender_gender(), output);
  }
  
  // optional int32 sender_vip_level = 18;
  if (has_sender_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sender_vip_level(), output);
  }
  
  // optional string sender_name = 19;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->sender_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightResultBroadcastNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 channel_type = 1;
  if (has_channel_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel_type(), target);
  }
  
  // required int64 fight_key = 2;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fight_key(), target);
  }
  
  // required int64 attacker_guid = 3;
  if (has_attacker_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attacker_guid(), target);
  }
  
  // required string attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attacker_name(), target);
  }
  
  // required int32 attacker_in_team = 5;
  if (has_attacker_in_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attacker_in_team(), target);
  }
  
  // optional int32 attacker_vip_level = 6;
  if (has_attacker_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attacker_vip_level(), target);
  }
  
  // required int32 defender_in_team = 9;
  if (has_defender_in_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->defender_in_team(), target);
  }
  
  // optional int32 defender_vip_level = 10;
  if (has_defender_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->defender_vip_level(), target);
  }
  
  // optional int32 is_attacker_win = 11;
  if (has_is_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_attacker_win(), target);
  }
  
  // optional int32 fight_type = 12;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->fight_type(), target);
  }
  
  // optional int32 attacker_gender = 13;
  if (has_attacker_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attacker_gender(), target);
  }
  
  // required int64 defender_guid = 14;
  if (has_defender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->defender_guid(), target);
  }
  
  // required string defender_name = 15;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->defender_name(), target);
  }
  
  // optional int64 sender_guid = 16;
  if (has_sender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->sender_guid(), target);
  }
  
  // optional int32 sender_gender = 17;
  if (has_sender_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sender_gender(), target);
  }
  
  // optional int32 sender_vip_level = 18;
  if (has_sender_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sender_vip_level(), target);
  }
  
  // optional string sender_name = 19;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->sender_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightResultBroadcastNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 channel_type = 1;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_type());
    }
    
    // required int64 fight_key = 2;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
    // optional int32 fight_type = 12;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_type());
    }
    
    // required int64 attacker_guid = 3;
    if (has_attacker_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attacker_guid());
    }
    
    // required string attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }
    
    // optional int32 attacker_gender = 13;
    if (has_attacker_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_gender());
    }
    
    // required int32 attacker_in_team = 5;
    if (has_attacker_in_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_in_team());
    }
    
    // optional int32 attacker_vip_level = 6;
    if (has_attacker_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_vip_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 defender_guid = 14;
    if (has_defender_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defender_guid());
    }
    
    // required string defender_name = 15;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }
    
    // required int32 defender_in_team = 9;
    if (has_defender_in_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defender_in_team());
    }
    
    // optional int32 defender_vip_level = 10;
    if (has_defender_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defender_vip_level());
    }
    
    // optional int32 is_attacker_win = 11;
    if (has_is_attacker_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_attacker_win());
    }
    
    // optional int64 sender_guid = 16;
    if (has_sender_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sender_guid());
    }
    
    // optional int32 sender_gender = 17;
    if (has_sender_gender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_gender());
    }
    
    // optional int32 sender_vip_level = 18;
    if (has_sender_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_vip_level());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string sender_name = 19;
    if (has_sender_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightResultBroadcastNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightResultBroadcastNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightResultBroadcastNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightResultBroadcastNotify::MergeFrom(const FightResultBroadcastNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_type()) {
      set_channel_type(from.channel_type());
    }
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_attacker_guid()) {
      set_attacker_guid(from.attacker_guid());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_attacker_gender()) {
      set_attacker_gender(from.attacker_gender());
    }
    if (from.has_attacker_in_team()) {
      set_attacker_in_team(from.attacker_in_team());
    }
    if (from.has_attacker_vip_level()) {
      set_attacker_vip_level(from.attacker_vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defender_guid()) {
      set_defender_guid(from.defender_guid());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_defender_in_team()) {
      set_defender_in_team(from.defender_in_team());
    }
    if (from.has_defender_vip_level()) {
      set_defender_vip_level(from.defender_vip_level());
    }
    if (from.has_is_attacker_win()) {
      set_is_attacker_win(from.is_attacker_win());
    }
    if (from.has_sender_guid()) {
      set_sender_guid(from.sender_guid());
    }
    if (from.has_sender_gender()) {
      set_sender_gender(from.sender_gender());
    }
    if (from.has_sender_vip_level()) {
      set_sender_vip_level(from.sender_vip_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightResultBroadcastNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightResultBroadcastNotify::CopyFrom(const FightResultBroadcastNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightResultBroadcastNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000075b) != 0x0000075b) return false;
  
  return true;
}

void FightResultBroadcastNotify::Swap(FightResultBroadcastNotify* other) {
  if (other != this) {
    std::swap(channel_type_, other->channel_type_);
    std::swap(fight_key_, other->fight_key_);
    std::swap(fight_type_, other->fight_type_);
    std::swap(attacker_guid_, other->attacker_guid_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_gender_, other->attacker_gender_);
    std::swap(attacker_in_team_, other->attacker_in_team_);
    std::swap(attacker_vip_level_, other->attacker_vip_level_);
    std::swap(defender_guid_, other->defender_guid_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(defender_in_team_, other->defender_in_team_);
    std::swap(defender_vip_level_, other->defender_vip_level_);
    std::swap(is_attacker_win_, other->is_attacker_win_);
    std::swap(sender_guid_, other->sender_guid_);
    std::swap(sender_gender_, other->sender_gender_);
    std::swap(sender_vip_level_, other->sender_vip_level_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightResultBroadcastNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightResultBroadcastNotify_descriptor_;
  metadata.reflection = FightResultBroadcastNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
