// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "error_code.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuddyErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LineupErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArenaErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FightErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GiftErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LivenessErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConfigErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InstanceErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_error_5fcode_2eproto() {
  protobuf_AddDesc_error_5fcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "error_code.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorCode_descriptor_ = file->enum_type(0);
  BuddyErrorCode_descriptor_ = file->enum_type(1);
  SkillErrorCode_descriptor_ = file->enum_type(2);
  ItemErrorCode_descriptor_ = file->enum_type(3);
  LineupErrorCode_descriptor_ = file->enum_type(4);
  ArenaErrorCode_descriptor_ = file->enum_type(5);
  QuestErrorCode_descriptor_ = file->enum_type(6);
  TeamErrorCode_descriptor_ = file->enum_type(7);
  FightErrorCode_descriptor_ = file->enum_type(8);
  ChatErrorCode_descriptor_ = file->enum_type(9);
  FriendErrorCode_descriptor_ = file->enum_type(10);
  GuildErrorCode_descriptor_ = file->enum_type(11);
  GiftErrorCode_descriptor_ = file->enum_type(12);
  LivenessErrorCode_descriptor_ = file->enum_type(13);
  ConfigErrorCode_descriptor_ = file->enum_type(14);
  InstanceErrorCode_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_error_5fcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_error_5fcode_2eproto() {
}

void protobuf_AddDesc_error_5fcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020error_code.proto\022\020protocols.common*\242\t\n"
    "\tErrorCode\022\016\n\nEC_SUCCESS\020\000\022\026\n\022EC_INVALID"
    "_REQUEST\020\001\022\022\n\016EC_ACTION_DENY\020\002\022\021\n\rEC_DAT"
    "A_ERROR\020\003\022\027\n\023EC_INVALID_ARGUMENT\020\004\022\"\n\036EC"
    "_DISCONNECT_BY_ANOTHER_LOGIN\020\005\022\032\n\026EC_SER"
    "VER_IS_SHUT_DOWN\020\006\022\024\n\020EC_PLAYER_BANNED\020\007"
    "\022\027\n\023EC_USER_ID_EXHAUSED\020\010\022\023\n\017EC_INVALID_"
    "NAME\020\t\022\034\n\030EC_NAME_LENGTH_TOO_SHORT\020\n\022\033\n\027"
    "EC_NAME_LENGTH_TOO_LONG\020!\022\"\n\036EC_NAME_WIT"
    "H_INVALID_CHARACTER\020\013\022\021\n\rEC_NAME_EXIST\020\014"
    "\022\036\n\032EC_CONDITION_NOT_SATISFIED\020\r\022\031\n\025EC_P"
    "ROFESSION_INVALID\020\016\022\026\n\022EC_NO_ENOUGH_MONE"
    "Y\020\017\022\030\n\024EC_NO_ENOUGH_DIAMOND\020\020\022\022\n\016EC_LEVE"
    "L_LIMIT\020\021\022\023\n\017EC_NUMBER_LIMIT\020\022\022\031\n\025EC_TIM"
    "E_NOT_SATISFIED\020\023\022\023\n\017EC_PLAYER_EXIST\020\024\022\027"
    "\n\023EC_PLAYER_NOT_EXIST\020\025\022\026\n\022EC_STILL_COOL"
    "_DOWN\020\026\022\027\n\023EC_CONFIG_NOT_FOUND\020\027\022\032\n\026EC_D"
    "AILY_GIFT_ACCEPTED\020\030\022\025\n\021EC_PLAYER_OFFLIN"
    "E\020\031\022\036\n\032EC_CREATE_PLAYER_NAME_USED\020\032\022\035\n\031E"
    "C_PLAYER_FLAG_ALREAD_SET\020\033\022\024\n\020EC_NPC_NOT"
    "_FOUND\020\034\022!\n\035EC_ENTER_INSTANCE_COUNT_LIMI"
    "T\020\035\022\023\n\017EC_SERVER_ERROR\020\036\022\025\n\021EC_FUNCTION_"
    "LIMIT\020\037\022\027\n\023EC_NO_ENOUGH_COUPON\020 \022,\n(EC_N"
    "O_ENOUGH_MONSTER_EXP_BUFF_TIMES_LEFT\020\"\022\034"
    "\n\030EC_DAILY_LIMIT_CANT_FIND\020#\022!\n\035EC_DAILY"
    "_HUNT_LIMIT_CANT_FIND\020$\022\033\n\027EC_CANT_FIND_"
    "FIGHT_DATA\020%\022\027\n\023EC_SAVE_FIGHT_ERROR\020&\022\033\n"
    "\027EC_NPC_CONFIG_NOT_FOUND\020\'\022\034\n\030EC_NPC_TOO"
    "_LONG_DISTANCE\020(\022\024\n\020EC_PLAYER_FREEZE\020)\022\031"
    "\n\025EC_PHY_STR_NOT_ENOUGH\020*\022\016\n\nEC_NOT_VIP\020"
    "+\022\026\n\022EC_VIP_LEVEL_LIMIT\020,*\226\010\n\016BuddyError"
    "Code\022\025\n\021EC_YINGLING_EXIST\020e\022\031\n\025EC_YINGLI"
    "NG_NOT_EXIST\020f\022\033\n\027EC_CREATE_YINGLING_FAI"
    "L\020g\022\030\n\024EC_NOT_HAVE_YINGLING\020h\022!\n\035EC_YING"
    "LING_NOT_EXIST_ON_FIRE\020i\022\036\n\032EC_YINGLING_"
    "NO_FIRE_MYSELF\020j\022\033\n\027EC_YINGLING_SLOT_OPE"
    "NED\020k\022#\n\037EC_YINGLING_ILLEGAL_HIRING_SLOT"
    "\020l\022 \n\034EC_YINGLING_ILLEGAL_HIRE_POS\020m\022\031\n\025"
    "EC_YINGLING_ON_LINEUP\020n\022\035\n\031EC_YINGLING_A"
    "LREADY_HIRED\020o\022&\n\"EC_YINGLING_HIRE_NOT_E"
    "NOUGH_LINGLI\020p\022\'\n#EC_YINGLING_NO_CHALLEN"
    "GE_SPACE_TIME\020q\022\034\n\030EC_YINGLING_ILLEGAL_S"
    "LOT\020r\022\"\n\036EC_YINGLING_HIRE_REACH_MAX_NUM\020"
    "s\022\037\n\033EC_YINGLING_SLOT_OPENED_MAX\020t\022\"\n\036EC"
    "_YINGLING_HIRING_SLOT_OPENED\020u\022&\n\"EC_YIN"
    "GLING_NO_FIRE_WITH_EQUIPMENT\020v\022+\n\'EC_YIN"
    "GLING_NO_FIRE_WITH_PRACTICE_SKILL\020w\022\035\n\031E"
    "C_YINGLING_NO_SOUL_STONE\020x\022%\n!EC_YINGLIN"
    "G_NOT_ENOUGH_SOUL_STONE\020y\022\036\n\032EC_YINGLING"
    "_NO_FOUND_BUDDY\020z\022\036\n\032EC_YINGLING_REACH_M"
    "AX_SOUL\020{\022\037\n\033EC_YINGLING_NOT_ENOUGH_COIN"
    "\020|\022#\n\037EC_YINGLING_REACH_MAX_SPACETIME\020}\022"
    "\'\n#EC_YINGLING_NOT_LINEUP_ON_CHALLENGE\020~"
    "\022\037\n\033EC_YINGLING_NO_PROTECT_ITEM\020\177\022%\n EC_"
    "YINGLING_NO_CHALLENGE_IN_TEAM\020\200\001\022*\n%EC_Y"
    "INGLING_CHALLENGE_STILL_COOL_DOWN\020\201\001\022$\n\037"
    "EC_YINGLING_NO_FIRE_WITH_FOLLOW\020\202\001*\211\003\n\016S"
    "killErrorCode\022\033\n\026EC_SKILL_NOT_IMPLEMENT\020"
    "\311\001\022\027\n\022EC_SKILL_NOT_FOUND\020\312\001\022\025\n\020EC_SKILL_"
    "INVALID\020\313\001\022\033\n\026EC_SKILL_SLOT_NOT_OPEN\020\314\001\022"
    "\027\n\022EC_ALREADY_LEARNED\020\315\001\022\035\n\030EC_SKILL_LEV"
    "EL_NO_CONFIG\020\316\001\022\031\n\024EC_SKILL_LEVEL_LIMIT\020"
    "\317\001\022\033\n\026EC_SKILL_IN_PRACTICING\020\320\001\022\034\n\027EC_SK"
    "ILL_CONFIG_INVALID\020\321\001\022\032\n\025EC_SKILL_TYPE_I"
    "NVALID\020\322\001\022\032\n\025EC_SKILL_IS_MAX_LEVEL\020\323\001\022 \n"
    "\033EC_SKILL_PRACTICE_MAX_LIMIT\020\324\001\022%\n EC_SK"
    "ILL_CANT_DROP_WHILE_EQUIPED\020\325\001*\367\006\n\rItemE"
    "rrorCode\022\024\n\017EC_ITEM_SUCCESS\020\255\002\022\033\n\026EC_ITE"
    "M_INVALID_PLAYER\020\256\002\022\031\n\024EC_ITEM_INVALID_S"
    "HOP\020\257\002\022\031\n\024EC_ITEM_INVALID_ITEM\020\260\002\022\032\n\025EC_"
    "ITEM_INVALID_COUNT\020\261\002\022\035\n\030EC_ITEM_INVALID"
    "_POSITION\020\262\002\022\034\n\027EC_ITEM_NO_ENOUGH_MONEY\020"
    "\263\002\022\027\n\022EC_ITEM_CANNOT_USE\020\264\002\022\033\n\026EC_ITEM_M"
    "ISMATCHED_JOB\020\265\002\022 \n\033EC_ITEM_MISMATCHED_P"
    "OSITION\020\266\002\022\026\n\021EC_ITEM_NOT_FOUND\020\267\002\022\023\n\016EC"
    "_BAG_IS_FULL\020\270\002\022\036\n\031EC_ADD_ITEM_TO_BAG_FA"
    "ILED\020\271\002\022%\n EC_SHENGXING_NOT_FOUND_EQUIPM"
    "ENT\020\272\002\022%\n EC_SHENGXING_NOT_ENOUGH_MATERI"
    "AL\020\273\002\022\"\n\035EC_SHENGXING_NOT_ENOUGH_MONEY\020\274"
    "\002\022*\n%EC_SHENGXING_REACH_MAX_STRENGTH_LEV"
    "EL\020\275\002\022 \n\033EC_SHENGXING_UNSTRENGTHABLE\020\276\002\022"
    "\"\n\035EC_XILIAN_NOT_ENOUGH_MATERIAL\020\277\002\022\037\n\032E"
    "C_XILIAN_NOT_ENOUGH_MONEY\020\300\002\022\033\n\026EC_XILIA"
    "N_UNXILIANABLE\020\301\002\022\032\n\025EC_NO_MOVE_QUEST_IT"
    "EM\020\302\002\022\037\n\032EC_INHERIT_LEVEL_OUT_RANGE\020\305\002\022\""
    "\n\035EC_INHERIT_EQUIP_POS_MISMATCH\020\306\002\022#\n\036EC"
    "_INHERIT_NOT_ENOUGH_MATERIAL\020\307\002\022\035\n\030EC_MA"
    "KE_SOCKET_REACH_MAX\020\312\002\022\033\n\026EC_NOT_ENOUGH_"
    "MATERIAL\020\313\002\022\033\n\026EC_GEM_NO_INSERT_EQUIP\020\314\002"
    "*\332\002\n\017LineupErrorCode\022\033\n\026EC_LINEUP_NAME_I"
    "NVALID\020\221\003\022\034\n\027EC_LINEUP_CREATE_FAILED\020\222\003\022"
    "\030\n\023EC_LINEUP_NOT_EXIST\020\223\003\022\032\n\025EC_LINEUP_M"
    "EMBER_FULL\020\224\003\022\033\n\026EC_LINEUP_NO_MAIN_ROLE\020"
    "\225\003\022\033\n\026EC_LINEUP_NUMBER_LIMIT\020\226\003\022\033\n\026EC_LI"
    "NEUP_MEMBER_LIMIT\020\227\003\022!\n\034EC_LINEUP_ONE_YI"
    "NGLING_LIMIT\020\230\003\022\037\n\032EC_LINEUP_TWO_YINGLIN"
    "G_MAX\020\231\003\022\034\n\027EC_CREATE_LINEUP_FAILED\020\232\003\022\035"
    "\n\030EC_LINEUP_INDEX_OVERFLOW\020\233\003*\220\002\n\016ArenaE"
    "rrorCode\022\031\n\024EC_SELF_RANK_CHANGED\020\365\003\022\036\n\031E"
    "C_CHALLEGEE_RANK_CHANGED\020\366\003\022\035\n\030EC_SNAP_P"
    "LAYER_NOT_FOUND\020\367\003\022\036\n\031EC_CHALLENGE_TIME_"
    "USE_OUT\020\370\003\022\031\n\024EC_BOX_ALREADY_TAKEN\020\371\003\022%\n"
    " EC_ARENA_CHALLENGEE_IN_COOL_DOWN\020\372\003\022\035\n\030"
    "EC_CHALLENGE_LEVEL_LIMIT\020\373\003\022#\n\036EC_ARENA_"
    "CHALLENGEE_NOT_ENOUGH\020\374\003*\230\006\n\016QuestErrorC"
    "ode\022\036\n\031EC_QUEST_ALREADY_ACCEPTED\020\331\004\022\032\n\025E"
    "C_QUEST_NOT_ACCEPTED\020\332\004\022&\n!EC_QUEST_INVE"
    "NTORY_FULL_ON_ACCEPT\020\333\004\022%\n EC_QUEST_COND"
    "ITION_NOT_SATISFIED\020\334\004\022#\n\036EC_QUEST_DAILY"
    "_STILL_COOL_DOWN\020\335\004\022#\n\036EC_QUEST_DAILY_QU"
    "EST_NO_CANCEL\020\336\004\022,\n\'EC_QUEST_REFRESH_DAI"
    "LY_QUEST_NO_YUANBAO\020\337\004\022&\n!EC_QUEST_REACH"
    "_MAX_PURCHASE_COUNT\020\340\004\022#\n\036EC_QUEST_REACH"
    "_MAX_DAILY_COUNT\020\341\004\022/\n*EC_QUEST_GENERATE"
    "_REACH_MAX_PURCHASE_COUNT\020\342\004\022,\n\'EC_QUEST"
    "_GENERATE_REACH_MAX_DAILY_COUNT\020\343\004\022,\n\'EC"
    "_QUEST_REACH_MAX_DAILY_ACCEPTED_COUNT\020\344\004"
    "\022\037\n\032EC_DAILY_QUEST_COUNT_LIMIT\020\345\004\022\034\n\027EC_"
    "DAILY_QUEST_COME_MAX\020\346\004\022\'\n\"EC_XUNLUO_QUE"
    "ST_ACCEPT_NOT_IN_TEAM\020\347\004\022,\n\'EC_XUNLUO_QU"
    "EST_ACCEPT_LESS_TEAM_MEMBER\020\350\004\022-\n(EC_XUN"
    "LUO_QUEST_ACCEPT_MEMBER_LEVEL_LESS\020\351\004\0221\n"
    ",EC_XUNLUO_QUEST_ACCEPT_MEMBER_ALREADY_A"
    "CCEPT\020\352\004\0221\n,EC_XUNLUO_QUEST_ACCEPT_MEMBE"
    "R_STILL_COOLDOWN\020\353\004*\265\004\n\rTeamErrorCode\022\034\n"
    "\027EC_TEAM_INVALID_REQUEST\020\275\005\022\035\n\030EC_TEAM_N"
    "O_SUITABLE_TEAM\020\276\005\022\033\n\026EC_TEAM_PLAYER_IN_"
    "TEAM\020\277\005\022\034\n\027EC_TEAM_ALREADY_APPLIED\020\300\005\022\033\n"
    "\026EC_TEAM_PLAYER_OFFLINE\020\301\005\022\"\n\035EC_TEAM_PL"
    "AYER_IN_CUSTOM_PASS\020\302\005\022\035\n\030EC_TEAM_PLAYER"
    "_NOT_EXIST\020\303\005\022\024\n\017EC_TEAM_IS_FULL\020\304\005\022\'\n\"E"
    "C_TEAM_PLAYER_LEVEL_NOT_SATISFIED\020\305\005\022\032\n\025"
    "EC_TEAM_CREATE_FAILED\020\306\005\022\026\n\021EC_TEAM_NOT_"
    "EXIST\020\307\005\022\026\n\021EC_TEAM_NO_LEADER\020\310\005\022\034\n\027EC_T"
    "EAM_INVITE_REJECTED\020\311\005\022\036\n\031EC_TEAM_FIGHTE"
    "R_NOT_FOUND\020\312\005\022\036\n\031EC_CANT_CHALLENGE_IN_T"
    "EAM\020\313\005\022\034\n\027EC_TEAM_NOT_AT_SAME_MAP\020\314\005\022$\n\037"
    "EC_TEAM_NOT_ALLOWED_IN_INSTANCE\020\315\005\022\037\n\032EC"
    "_TEAM_MEMBER_ACTION_DENY\020\316\005*\220\007\n\016FightErr"
    "orCode\022\023\n\016EC_FIGHT_ERROR\020\241\006\022\032\n\025EC_DEFEND"
    "ER_NOT_FOUND\020\242\006\022 \n\033EC_DEFENDER_SKILL_NOT"
    "_FOUND\020\243\006\022\036\n\031EC_SKILL_HIT_TYPE_INVALID\020\244"
    "\006\022\034\n\027EC_SKILL_TARGET_INVALID\020\245\006\022\034\n\027EC_CH"
    "OOSE_COWORKER_FAIL\020\246\006\022!\n\034EC_PLAYER_FIGHT"
    "_IN_COOL_DOWN\020\247\006\022!\n\034EC_PLAYER_NO_FREE_SK"
    "IP_FIGHT\020\250\006\022 \n\033EC_PLAYER_NOT_IN_AUTO_FIG"
    "HT\020\251\006\022%\n EC_BATTLE_GROUP_CONFIG_NOT_FOUN"
    "D\020\261\006\022\035\n\030EC_ALREADY_IN_AUTO_FIGHT\020\252\006\022\036\n\031E"
    "C_SCENE_AUTO_FIGHT_LIMIT\020\253\006\022$\n\037EC_SCENE_"
    "AUTO_FIGHT_LEVEL_LIMIT\020\254\006\022\035\n\030EC_TEAM_AUT"
    "O_FIGHT_LIMIT\020\255\006\022\"\n\035EC_AUTO_FIGHT_NO_ENO"
    "UGH_TIMES\020\256\006\022-\n(EC_SERVER_CREATE_AUTO_FI"
    "GHT_TIMER_FAILED\020\257\006\022*\n%EC_CANT_JOIN_TEAM"
    "_WHILE_IN_AUTO_FIGHT\020\261\006\022\032\n\025EC_SPEED_UP_V"
    "IP_LIMIT\020\260\006\022\027\n\022EC_SENDER_IN_FIGHT\020\264\006\022\030\n\023"
    "EC_INVITEE_IN_FIGHT\020\265\006\022!\n\034EC_SENDER_NOT_"
    "IN_FIGHT_SCENE\020\266\006\022\"\n\035EC_INVITEE_NOT_IN_F"
    "IGHT_SCENE\020\267\006\022%\n EC_TEAM_MEMBER_CANT_INV"
    "ITE_FIGHT\020\270\006\022\033\n\026EC_INVITEE_NO_RESPONSE\020\271"
    "\006\022\032\n\025EC_INVITEE_NOT_ONLINE\020\272\006\022%\n EC_TEAM"
    "_MEMBER_CANT_ACCEPT_FIGHT\020\273\006\022 \n\033EC_CANT_"
    "FIGHT_WITH_OWN_TEAM\020\274\006*\303\001\n\rChatErrorCode"
    "\022\034\n\027EC_CHAT_INVALID_CHANNEL\020\205\007\022\033\n\026EC_CHA"
    "T_INVALID_PLAYER\020\206\007\022\025\n\020EC_CHAT_TOO_FAST\020"
    "\207\007\022\025\n\020EC_CHAT_TOO_LONG\020\210\007\022\026\n\021EC_CHAT_BLA"
    "CKLIST\020\211\007\022\036\n\031EC_CHAT_WORLD_LEVEL_LIMIT\020\212"
    "\007\022\021\n\014EC_CHAT_MUTE\020\213\007*\274\001\n\017FriendErrorCode"
    "\022\035\n\030EC_FRIEND_INVALID_PLAYER\020\351\007\022\031\n\024EC_FR"
    "IEND_NOT_FRIEND\020\352\007\022\035\n\030EC_FRIEND_ALREADY_"
    "FRIEND\020\353\007\022\036\n\031EC_FRIEND_TOO_MANY_FRIEND\020\354"
    "\007\022\033\n\026EC_FRIEND_IN_BLACKLIST\020\355\007\022\023\n\016EC_FRI"
    "END_DENY\020\356\007*\227\003\n\016GuildErrorCode\022%\n EC_GUI"
    "LD_CREATE_LEVEL_NOT_ENOUGH\020\315\010\022\032\n\025EC_GUIL"
    "D_INVALID_NAME\020\316\010\022\037\n\032EC_GUILD_NAME_LENGT"
    "H_LIMIT\020\317\010\022\023\n\016EC_GUILD_EXIST\020\320\010\022\027\n\022EC_GU"
    "ILD_NOT_EXIST\020\321\010\022\032\n\025EC_GUILD_MEMBER_EXIS"
    "T\020\322\010\022\036\n\031EC_GUILD_MEMBER_NOT_EXIST\020\323\010\022\035\n\030"
    "EC_GUILD_PERMISSION_DENY\020\324\010\022\033\n\026EC_CREATE"
    "_GUILD_FAILED\020\325\010\022&\n!EC_INVITE_MEMBER_ALR"
    "EADY_IN_GUILD\020\326\010\022\036\n\031EC_GUILD_JOIN_LEVEL_"
    "LIMIT\020\327\010\022\031\n\024EC_GUILD_MEMBER_FULL\020\330\010\022\030\n\023E"
    "C_GUILD_TIME_LIMIT\020\331\010*o\n\rGiftErrorCode\022\035"
    "\n\030EC_INVALID_EXCHANGE_CODE\020\261\t\022\032\n\025EC_USED"
    "_EXCHANGE_CODE\020\262\t\022#\n\036EC_ALREADY_EXCHANGE"
    "D_THIS_TYPE\020\263\t*s\n\021LivenessErrorCode\022\036\n\031E"
    "C_LIVENESS_INVALID_AWARD\020\343\t\022\034\n\027EC_LIVENE"
    "SS_TAKEN_AWARD\020\344\t\022 \n\033EC_LIVENESS_CONDITI"
    "ON_LIMIT\020\345\t*\211\001\n\017ConfigErrorCode\022\037\n\032EC_CO"
    "NFIG_DENY_TEAM_INVITE\020\201\n\022 \n\033EC_CONFIG_DE"
    "NY_GUILD_INVITE\020\202\n\022\031\n\024EC_CONFIG_DENY_FIG"
    "HT\020\203\n\022\030\n\023EC_CONFIG_DENY_TALK\020\204\n*\223\003\n\021Inst"
    "anceErrorCode\022\037\n\032EC_INSTANCE_TELEPORT_LI"
    "MIT\020\225\n\022\032\n\025EC_INSTANCE_NEED_TEAM\020\226\n\022\034\n\027EC"
    "_INSTANCE_NEED_SINGLE\020\227\n\022\034\n\027EC_INSTANCE_"
    "GRADE_LIMIT\020\230\n\022\036\n\031EC_NO_INSTANCE_DATA_FO"
    "UND\020\231\n\022%\n EC_INSTANCE_WANTED_DB_DATA_ERR"
    "OR\020\232\n\022$\n\037EC_NO_INSTANCE_WANTED_TIME_LEFT"
    "\020\233\n\022%\n EC_INSTANCE_CARD_ALREADY_FLIPPED\020"
    "\234\n\022&\n!EC_NO_INSTANCE_WANTED_CONFIG_DATA\020"
    "\235\n\022)\n$EC_WRONG_INSTANCE_WANTED_CONFIG_DA"
    "TA\020\236\n\022\036\n\031EC_INSTANCE_USE_ITEM_DENY\020\237\n", 8037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "error_code.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_error_5fcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_error_5fcode_2eproto {
  StaticDescriptorInitializer_error_5fcode_2eproto() {
    protobuf_AddDesc_error_5fcode_2eproto();
  }
} static_descriptor_initializer_error_5fcode_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuddyErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyErrorCode_descriptor_;
}
bool BuddyErrorCode_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillErrorCode_descriptor_;
}
bool SkillErrorCode_IsValid(int value) {
  switch(value) {
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemErrorCode_descriptor_;
}
bool ItemErrorCode_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 325:
    case 326:
    case 327:
    case 330:
    case 331:
    case 332:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LineupErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineupErrorCode_descriptor_;
}
bool LineupErrorCode_IsValid(int value) {
  switch(value) {
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArenaErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaErrorCode_descriptor_;
}
bool ArenaErrorCode_IsValid(int value) {
  switch(value) {
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestErrorCode_descriptor_;
}
bool QuestErrorCode_IsValid(int value) {
  switch(value) {
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TeamErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamErrorCode_descriptor_;
}
bool TeamErrorCode_IsValid(int value) {
  switch(value) {
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FightErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightErrorCode_descriptor_;
}
bool FightErrorCode_IsValid(int value) {
  switch(value) {
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatErrorCode_descriptor_;
}
bool ChatErrorCode_IsValid(int value) {
  switch(value) {
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendErrorCode_descriptor_;
}
bool FriendErrorCode_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildErrorCode_descriptor_;
}
bool GuildErrorCode_IsValid(int value) {
  switch(value) {
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GiftErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftErrorCode_descriptor_;
}
bool GiftErrorCode_IsValid(int value) {
  switch(value) {
    case 1201:
    case 1202:
    case 1203:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LivenessErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessErrorCode_descriptor_;
}
bool LivenessErrorCode_IsValid(int value) {
  switch(value) {
    case 1251:
    case 1252:
    case 1253:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConfigErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigErrorCode_descriptor_;
}
bool ConfigErrorCode_IsValid(int value) {
  switch(value) {
    case 1281:
    case 1282:
    case 1283:
    case 1284:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InstanceErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceErrorCode_descriptor_;
}
bool InstanceErrorCode_IsValid(int value) {
  switch(value) {
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
