// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* InitConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitConnectionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitConnectionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UrlParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UrlParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountReloginNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountReloginNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerShutdownNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerShutdownNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeleportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeleportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeleportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeleportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListPassInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListPassInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListPassInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListPassInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassInstanceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassInstanceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyDetailInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyDetailInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyDetailInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyDetailInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickPlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyError_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingHiringStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingHiringStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingHiringStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingHiringStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenYinglingHiringSlotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenYinglingHiringSlotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenYinglingHiringSlotNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenYinglingHiringSlotNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenYinglingSlotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenYinglingSlotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenYinglingSlotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenYinglingSlotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenYinglingSlotNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenYinglingSlotNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefeshYinglingHiringListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefeshYinglingHiringListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoRefeshYinglingHiringListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoRefeshYinglingHiringListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoRefeshYinglingHiringListRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoRefeshYinglingHiringListRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* HiringYingling_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HiringYingling_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefeshYinglingHiringListNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefeshYinglingHiringListNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* HireYinglingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HireYinglingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLingliRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLingliRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvertYinglingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvertYinglingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LingliUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LingliUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddYinglingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddYinglingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelHiringYinglingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelHiringYinglingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireYinglingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireYinglingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelYinglingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelYinglingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingComboDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingComboDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingComboDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingComboDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetYinglingComboDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetYinglingComboDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeYinglingComboRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeYinglingComboRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeYinglingComboResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeYinglingComboResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveStartRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveStartRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveStartResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveStartResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterViewNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterViewNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveViewNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveViewNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeMapNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeMapNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChooseAutoFightNPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChooseAutoFightNPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChooseAutoFightNPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChooseAutoFightNPCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightMonsterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightMonsterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightMonsterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightMonsterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAutoFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAutoFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAutoFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAutoFightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightMonsterUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightMonsterUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpAutoFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpAutoFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpAutoFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpAutoFightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerViewRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerViewRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerViewResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerViewResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSkillListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSkillListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSkillListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSkillListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBattleSkillListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBattleSkillListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBattleSkillListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBattleSkillListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBattleSkillNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBattleSkillNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPoolChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPoolChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSkillNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSkillNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeBattleSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeBattleSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeBattleSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeBattleSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeBattleSkillNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeBattleSkillNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeBattleSkillNotify_BattleSkillLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateYouliNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateYouliNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEquipDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEquipDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEquipDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEquipDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLineupListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLineupListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLineupListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLineupListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLineupFightCapacityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLineupFightCapacityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLineupFightCapacityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLineupFightCapacityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineUpOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineUpOperationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineUpOperationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineUpOperationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnequipAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnequipAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnequipAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnequipAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnloadSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnloadSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnloadSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnloadSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InjectSkillExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InjectSkillExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InjectSkillExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InjectSkillExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedupPracticeSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedupPracticeSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedupPracticeSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedupPracticeSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopPracticeSkillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopPracticeSkillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopPracticeSkillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopPracticeSkillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeSkillNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeSkillNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelUpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelUpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMoneyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMoneyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateExpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateExpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestsListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestsListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestActionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestActionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptXunluoQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptXunluoQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptXunluoQuestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptXunluoQuestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyInjectSoulRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyInjectSoulRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyInjectSoulResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyInjectSoulResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddySpaceTimeStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddySpaceTimeStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddySpaceTimeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddySpaceTimeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddySpaceTimeStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddySpaceTimeStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyChanllengeSpaceTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyChanllengeSpaceTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyChanllengeSpaceTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyChanllengeSpaceTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddySoulUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddySoulUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentShengxingOpenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentShengxingOpenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentShengxingOpenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentShengxingOpenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentShengxingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentShengxingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentShengxingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentShengxingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* XilianData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XilianData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentXilianStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentXilianStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentXilianStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentXilianStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentXilianRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentXilianRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentXilianResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentXilianResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentLockXilianAttrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentLockXilianAttrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentLockXilianAttrResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentLockXilianAttrResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentInheritRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentInheritRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentInheritResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentInheritResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRecycleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRecycleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentRecycleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentRecycleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyDetailUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyDetailUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItemListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownClearRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownClearRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownClearResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownClearResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyLimitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyLimitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyLimitUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyLimitUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseLimitCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseLimitCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurchaseLimitCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurchaseLimitCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuestListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuestListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuestListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuestListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshDailyQuestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshDailyQuestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshDailyQuestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshDailyQuestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeCodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeCodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeCodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeCodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSetFlagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSetFlagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSetFlagResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSetFlagResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHideNpcRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHideNpcRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHideNpcResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHideNpcResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHideNpcUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHideNpcUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartCollectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartCollectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartCollectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartCollectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishCollectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishCollectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishCollectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishCollectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTrainAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTrainAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTrainAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTrainAttributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainAttributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainAttributeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainAttributeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTrainAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTrainAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTrainAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTrainAttributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfoUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfoUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipInfoUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInfoUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionLimitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionLimitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionLimitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionLimitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionLimitUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionLimitUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyGiftInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyGiftInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDailyGiftInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDailyGiftInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyGiftInfoUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyGiftInfoUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyDailyGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyDailyGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyDailyGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyDailyGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStackableOnlineGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStackableOnlineGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StackableOnlineGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackableOnlineGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStackableOnlineGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStackableOnlineGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StackableOnlineGiftUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StackableOnlineGiftUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyStackableOnlineGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyStackableOnlineGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyStackableOnlineGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyStackableOnlineGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnouncementNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnouncementNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemUpgradeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemUpgradeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemUpgrateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemUpgrateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemInsertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemInsertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemInsertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemInsertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeSocketRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeSocketRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeSocketResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeSocketResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStartupActivityStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStartupActivityStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStartupActivityStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStartupActivityStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartupActivityStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartupActivityStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartupActivityStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartupActivityStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildCrystalStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildCrystalStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildCrystalStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildCrystalStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildStartCrystalTowerActivityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildStartCrystalTowerActivityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildStartCrystalTowerActivityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildStartCrystalTowerActivityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDonateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDonateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDonateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDonateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildContribNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildContribNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCrystalTowerActivityNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCrystalTowerActivityNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickGuildCrystalRewardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickGuildCrystalRewardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickGuildCrystalRewardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickGuildCrystalRewardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickGuildCrystalRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickGuildCrystalRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryYouliMapDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryYouliMapDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryYouliMapDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryYouliMapDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapDiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapDiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapDiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapAutoDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapAutoDiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapAutoDiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapAutoDiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapDiceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapResetMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapResetMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouliMapResetMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouliMapResetMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckGuildCircleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckGuildCircleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckGuildCircleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckGuildCircleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamLineupSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamLineupSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamLineupSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamLineupSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSettingModifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSettingModifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSettingModifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSettingModifyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamOperationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamOperationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamOperationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamOperationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamListNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamListNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamReplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamReplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamReplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamReplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamReplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamReplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamReplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamReplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamReplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTeamDetailInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTeamDetailInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecruitTeamMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecruitTeamMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPlayerKickedOutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPlayerKickedOutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecruitTeamMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecruitTeamMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncTeamInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncTeamInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetArenaInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetArenaInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateArenaInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateArenaInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetArenaRankListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetArenaRankListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetArenaRankListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetArenaRankListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengePlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengePlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengePlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengePlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTreasureBoxRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTreasureBoxRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTreasureBoxResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTreasureBoxResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaSelfNoticeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaSelfNoticeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPublicNoticeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPublicNoticeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRecentMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRecentMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublicNoticeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublicNoticeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeBonusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeBonusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTimeBonusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTimeBonusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTimeBonusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTimeBonusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceWantedListInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceWantedListInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceWantedListInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceWantedListInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoInstanceWantedOnceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoInstanceWantedOnceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoInstanceWantedOnceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoInstanceWantedOnceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastInstanceWantedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastInstanceWantedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastInstanceWantedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastInstanceWantedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedAllResetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedAllResetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedAllResetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedAllResetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedResetCostRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedResetCostRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedResetCostResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedResetCostResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenMonsterExpBuffRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenMonsterExpBuffRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenMonsterExpBuffResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenMonsterExpBuffResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeMonsterExpBuffRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeMonsterExpBuffRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeMonsterExpBuffResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeMonsterExpBuffResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberOpenMonsterExpBuffNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberOpenMonsterExpBuffNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLivenessInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLivenessInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLivenessInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLivenessInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeLivenessAwardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeLivenessAwardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeLivenessAwardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeLivenessAwardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivenessUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivenessUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayerConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayerConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPlayerConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPlayerConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayerConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayerConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightWithOtherPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightWithOtherPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightWithOtherPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightWithOtherPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFightInvitationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFightInvitationNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightInviteReplyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightInviteReplyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightInviteReplyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightInviteReplyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightInviteReplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightInviteReplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMonsterBuffNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMonsterBuffNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamChannelMemberNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamChannelMemberNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBitNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBitNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishQuestionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishQuestionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendQAResultNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendQAResultNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPhyStrengthUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPhyStrengthUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowBuddyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowBuddyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowBuddyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowBuddyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowBuddyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowBuddyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActLuckyOnceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActLuckyOnceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActLuckyOnceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActLuckyOnceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActExchangeItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActExchangeItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActExchangeItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActExchangeItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRoleTitleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRoleTitleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRoleTitleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRoleTitleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRoleTitleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRoleTitleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoleTitleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoleTitleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOfflineGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOfflineGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOfflineGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOfflineGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOpenedActivityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOpenedActivityRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOpenedActivityResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOpenedActivityResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityChangeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeExpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeExpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingSoulInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingSoulInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulExchangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulExchangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulExchangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulExchangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyCustomPassInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyCustomPassInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomPassWaitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomPassWaitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyCustomPassInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyCustomPassInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEnterPassRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterPassRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEnterPassRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterPassRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCreatePassRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCreatePassRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCreatePassRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCreatePassRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassRoomInfoUpdateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassRoomInfoUpdateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitePlayerJoinRoomRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitePlayerJoinRoomRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitePlayerJoinRoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitePlayerJoinRoomResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassRoomInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassRoomInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassLobbyPlayerListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassLobbyPlayerListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassLobbyPlayerListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassLobbyPlayerListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerKickFormRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerKickFormRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderStartRoomInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderStartRoomInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderStartRoomInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderStartRoomInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitYellowDuckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitYellowDuckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitYellowDuckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitYellowDuckResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fclient_2eproto() {
  protobuf_AddDesc_game_5fclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_client.proto");
  GOOGLE_CHECK(file != NULL);
  InitConnectionRequest_descriptor_ = file->message_type(0);
  static const int InitConnectionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionRequest, ver_),
  };
  InitConnectionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitConnectionRequest_descriptor_,
      InitConnectionRequest::default_instance_,
      InitConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitConnectionRequest));
  InitConnectionResponse_descriptor_ = file->message_type(1);
  static const int InitConnectionResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, begin_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, merge_flag_),
  };
  InitConnectionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitConnectionResponse_descriptor_,
      InitConnectionResponse::default_instance_,
      InitConnectionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitConnectionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitConnectionResponse));
  HeartBeatRequest_descriptor_ = file->message_type(2);
  static const int HeartBeatRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, value_),
  };
  HeartBeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatRequest_descriptor_,
      HeartBeatRequest::default_instance_,
      HeartBeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatRequest));
  HeartBeatResponse_descriptor_ = file->message_type(3);
  static const int HeartBeatResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, server_time_),
  };
  HeartBeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatResponse_descriptor_,
      HeartBeatResponse::default_instance_,
      HeartBeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatResponse));
  UrlParam_descriptor_ = file->message_type(4);
  static const int UrlParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlParam, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlParam, value_),
  };
  UrlParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UrlParam_descriptor_,
      UrlParam::default_instance_,
      UrlParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UrlParam));
  AccountLoginRequest_descriptor_ = file->message_type(5);
  static const int AccountLoginRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, t_),
  };
  AccountLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginRequest_descriptor_,
      AccountLoginRequest::default_instance_,
      AccountLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginRequest));
  AccountLoginResponse_descriptor_ = file->message_type(6);
  static const int AccountLoginResponse_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, random_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, role_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, name_gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, banned_sec_),
  };
  AccountLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginResponse_descriptor_,
      AccountLoginResponse::default_instance_,
      AccountLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginResponse));
  AccountReloginNotify_descriptor_ = file->message_type(7);
  static const int AccountReloginNotify_offsets_[1] = {
  };
  AccountReloginNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountReloginNotify_descriptor_,
      AccountReloginNotify::default_instance_,
      AccountReloginNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReloginNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountReloginNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountReloginNotify));
  CreatePlayerRequest_descriptor_ = file->message_type(8);
  static const int CreatePlayerRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, url_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, login_ip_),
  };
  CreatePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerRequest_descriptor_,
      CreatePlayerRequest::default_instance_,
      CreatePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerRequest));
  CreatePlayerResponse_descriptor_ = file->message_type(9);
  static const int CreatePlayerResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, random_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, server_id_),
  };
  CreatePlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerResponse_descriptor_,
      CreatePlayerResponse::default_instance_,
      CreatePlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerResponse));
  RandomNameRequest_descriptor_ = file->message_type(10);
  static const int RandomNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameRequest, server_id_),
  };
  RandomNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomNameRequest_descriptor_,
      RandomNameRequest::default_instance_,
      RandomNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNameRequest));
  RandomNameResponse_descriptor_ = file->message_type(11);
  static const int RandomNameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameResponse, random_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameResponse, server_id_),
  };
  RandomNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomNameResponse_descriptor_,
      RandomNameResponse::default_instance_,
      RandomNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomNameResponse));
  DeletePlayerRequest_descriptor_ = file->message_type(12);
  static const int DeletePlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerRequest, guid_),
  };
  DeletePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePlayerRequest_descriptor_,
      DeletePlayerRequest::default_instance_,
      DeletePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePlayerRequest));
  DeletePlayerResponse_descriptor_ = file->message_type(13);
  static const int DeletePlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerResponse, error_code_),
  };
  DeletePlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePlayerResponse_descriptor_,
      DeletePlayerResponse::default_instance_,
      DeletePlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePlayerResponse));
  PlayerLoginRequest_descriptor_ = file->message_type(14);
  static const int PlayerLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, url_param_),
  };
  PlayerLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginRequest_descriptor_,
      PlayerLoginRequest::default_instance_,
      PlayerLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginRequest));
  PlayerLoginResponse_descriptor_ = file->message_type(15);
  static const int PlayerLoginResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, int_key_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, startup_time_),
  };
  PlayerLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoginResponse_descriptor_,
      PlayerLoginResponse::default_instance_,
      PlayerLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoginResponse));
  ServerShutdownNotify_descriptor_ = file->message_type(16);
  static const int ServerShutdownNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerShutdownNotify, count_down_sec_),
  };
  ServerShutdownNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerShutdownNotify_descriptor_,
      ServerShutdownNotify::default_instance_,
      ServerShutdownNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerShutdownNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerShutdownNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerShutdownNotify));
  EnterMapRequest_descriptor_ = file->message_type(17);
  static const int EnterMapRequest_offsets_[1] = {
  };
  EnterMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterMapRequest_descriptor_,
      EnterMapRequest::default_instance_,
      EnterMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterMapRequest));
  EnterMapResponse_descriptor_ = file->message_type(18);
  static const int EnterMapResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapResponse, view_),
  };
  EnterMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterMapResponse_descriptor_,
      EnterMapResponse::default_instance_,
      EnterMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterMapResponse));
  TransportRequest_descriptor_ = file->message_type(19);
  static const int TransportRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRequest, npc_id_),
  };
  TransportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportRequest_descriptor_,
      TransportRequest::default_instance_,
      TransportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportRequest));
  TransportResponse_descriptor_ = file->message_type(20);
  static const int TransportResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, map_y_),
  };
  TransportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportResponse_descriptor_,
      TransportResponse::default_instance_,
      TransportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportResponse));
  TeleportRequest_descriptor_ = file->message_type(21);
  static const int TeleportRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportRequest, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportRequest, map_y_),
  };
  TeleportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeleportRequest_descriptor_,
      TeleportRequest::default_instance_,
      TeleportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeleportRequest));
  TeleportResponse_descriptor_ = file->message_type(22);
  static const int TeleportResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, map_y_),
  };
  TeleportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeleportResponse_descriptor_,
      TeleportResponse::default_instance_,
      TeleportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeleportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeleportResponse));
  EnterInstanceRequest_descriptor_ = file->message_type(23);
  static const int EnterInstanceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceRequest, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceRequest, grade_),
  };
  EnterInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterInstanceRequest_descriptor_,
      EnterInstanceRequest::default_instance_,
      EnterInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterInstanceRequest));
  EnterInstanceResponse_descriptor_ = file->message_type(24);
  static const int EnterInstanceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceResponse, instance_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceResponse, member_guid_),
  };
  EnterInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterInstanceResponse_descriptor_,
      EnterInstanceResponse::default_instance_,
      EnterInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterInstanceResponse));
  LeaveInstanceRequest_descriptor_ = file->message_type(25);
  static const int LeaveInstanceRequest_offsets_[1] = {
  };
  LeaveInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveInstanceRequest_descriptor_,
      LeaveInstanceRequest::default_instance_,
      LeaveInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveInstanceRequest));
  LeaveInstanceResponse_descriptor_ = file->message_type(26);
  static const int LeaveInstanceResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, map_y_),
  };
  LeaveInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveInstanceResponse_descriptor_,
      LeaveInstanceResponse::default_instance_,
      LeaveInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveInstanceResponse));
  GetInstanceItemRequest_descriptor_ = file->message_type(27);
  static const int GetInstanceItemRequest_offsets_[1] = {
  };
  GetInstanceItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceItemRequest_descriptor_,
      GetInstanceItemRequest::default_instance_,
      GetInstanceItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceItemRequest));
  GetInstanceItemResponse_descriptor_ = file->message_type(28);
  static const int GetInstanceItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceItemResponse, error_code_),
  };
  GetInstanceItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceItemResponse_descriptor_,
      GetInstanceItemResponse::default_instance_,
      GetInstanceItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceItemResponse));
  ListPassInstanceRequest_descriptor_ = file->message_type(29);
  static const int ListPassInstanceRequest_offsets_[1] = {
  };
  ListPassInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListPassInstanceRequest_descriptor_,
      ListPassInstanceRequest::default_instance_,
      ListPassInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListPassInstanceRequest));
  ListPassInstanceResponse_descriptor_ = file->message_type(30);
  static const int ListPassInstanceResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceResponse, instance_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceResponse, access_count_),
  };
  ListPassInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListPassInstanceResponse_descriptor_,
      ListPassInstanceResponse::default_instance_,
      ListPassInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListPassInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListPassInstanceResponse));
  GetInstanceDetailRequest_descriptor_ = file->message_type(31);
  static const int GetInstanceDetailRequest_offsets_[1] = {
  };
  GetInstanceDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceDetailRequest_descriptor_,
      GetInstanceDetailRequest::default_instance_,
      GetInstanceDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceDetailRequest));
  GetInstanceDetailResponse_descriptor_ = file->message_type(32);
  static const int GetInstanceDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailResponse, instance_detail_),
  };
  GetInstanceDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceDetailResponse_descriptor_,
      GetInstanceDetailResponse::default_instance_,
      GetInstanceDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceDetailResponse));
  PassInstanceNotify_descriptor_ = file->message_type(33);
  static const int PassInstanceNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, vip_coin_),
  };
  PassInstanceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassInstanceNotify_descriptor_,
      PassInstanceNotify::default_instance_,
      PassInstanceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassInstanceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassInstanceNotify));
  PlayerInfoRequest_descriptor_ = file->message_type(34);
  static const int PlayerInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, guid_),
  };
  PlayerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoRequest_descriptor_,
      PlayerInfoRequest::default_instance_,
      PlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoRequest));
  PlayerInfoResponse_descriptor_ = file->message_type(35);
  static const int PlayerInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, player_info_),
  };
  PlayerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoResponse_descriptor_,
      PlayerInfoResponse::default_instance_,
      PlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoResponse));
  BuddyDetailInfoRequest_descriptor_ = file->message_type(36);
  static const int BuddyDetailInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoRequest, guid_),
  };
  BuddyDetailInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyDetailInfoRequest_descriptor_,
      BuddyDetailInfoRequest::default_instance_,
      BuddyDetailInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyDetailInfoRequest));
  BuddyDetailInfoResponse_descriptor_ = file->message_type(37);
  static const int BuddyDetailInfoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoResponse, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoResponse, buddy_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoResponse, error_code_),
  };
  BuddyDetailInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyDetailInfoResponse_descriptor_,
      BuddyDetailInfoResponse::default_instance_,
      BuddyDetailInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyDetailInfoResponse));
  AttrChangeNotify_descriptor_ = file->message_type(38);
  static const int AttrChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrChangeNotify, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrChangeNotify, lineup_capacity_),
  };
  AttrChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrChangeNotify_descriptor_,
      AttrChangeNotify::default_instance_,
      AttrChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrChangeNotify));
  PlayerLogout_descriptor_ = file->message_type(39);
  static const int PlayerLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, guid_),
  };
  PlayerLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLogout_descriptor_,
      PlayerLogout::default_instance_,
      PlayerLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLogout));
  KickPlayerRequest_descriptor_ = file->message_type(40);
  static const int KickPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequest, role_id_),
  };
  KickPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPlayerRequest_descriptor_,
      KickPlayerRequest::default_instance_,
      KickPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPlayerRequest));
  KickPlayerResponse_descriptor_ = file->message_type(41);
  static const int KickPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerResponse, error_code_),
  };
  KickPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPlayerResponse_descriptor_,
      KickPlayerResponse::default_instance_,
      KickPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPlayerResponse));
  KickPlayerNotify_descriptor_ = file->message_type(42);
  static const int KickPlayerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerNotify, reason_),
  };
  KickPlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPlayerNotify_descriptor_,
      KickPlayerNotify::default_instance_,
      KickPlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPlayerNotify));
  GetYinglingListRequest_descriptor_ = file->message_type(43);
  static const int GetYinglingListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListRequest, guid_),
  };
  GetYinglingListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingListRequest_descriptor_,
      GetYinglingListRequest::default_instance_,
      GetYinglingListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingListRequest));
  GetYinglingListResponse_descriptor_ = file->message_type(44);
  static const int GetYinglingListResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, yinglings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, hired_slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, hired_slot_next_open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, hired_slot_cost_yuanbao_),
  };
  GetYinglingListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingListResponse_descriptor_,
      GetYinglingListResponse::default_instance_,
      GetYinglingListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingListResponse));
  NotifyError_descriptor_ = file->message_type(45);
  static const int NotifyError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyError, error_code_),
  };
  NotifyError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyError_descriptor_,
      NotifyError::default_instance_,
      NotifyError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyError));
  GetYinglingHiringStatusReq_descriptor_ = file->message_type(46);
  static const int GetYinglingHiringStatusReq_offsets_[1] = {
  };
  GetYinglingHiringStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingHiringStatusReq_descriptor_,
      GetYinglingHiringStatusReq::default_instance_,
      GetYinglingHiringStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingHiringStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingHiringStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingHiringStatusReq));
  YinglingHiringStatusNotify_descriptor_ = file->message_type(47);
  static const int YinglingHiringStatusNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, cool_down_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, max_none_cooldown_hiring_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, cur_none_cooldown_hiring_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, opened_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, yingling_),
  };
  YinglingHiringStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingHiringStatusNotify_descriptor_,
      YinglingHiringStatusNotify::default_instance_,
      YinglingHiringStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingHiringStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingHiringStatusNotify));
  OpenYinglingHiringSlotReq_descriptor_ = file->message_type(48);
  static const int OpenYinglingHiringSlotReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotReq, pos_),
  };
  OpenYinglingHiringSlotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenYinglingHiringSlotReq_descriptor_,
      OpenYinglingHiringSlotReq::default_instance_,
      OpenYinglingHiringSlotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenYinglingHiringSlotReq));
  OpenYinglingHiringSlotNtf_descriptor_ = file->message_type(49);
  static const int OpenYinglingHiringSlotNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotNtf, pos_),
  };
  OpenYinglingHiringSlotNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenYinglingHiringSlotNtf_descriptor_,
      OpenYinglingHiringSlotNtf::default_instance_,
      OpenYinglingHiringSlotNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingHiringSlotNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenYinglingHiringSlotNtf));
  OpenYinglingSlotReq_descriptor_ = file->message_type(50);
  static const int OpenYinglingSlotReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotReq, pos_),
  };
  OpenYinglingSlotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenYinglingSlotReq_descriptor_,
      OpenYinglingSlotReq::default_instance_,
      OpenYinglingSlotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenYinglingSlotReq));
  OpenYinglingSlotResponse_descriptor_ = file->message_type(51);
  static const int OpenYinglingSlotResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotResponse, nex_slot_cost_yuanbao_),
  };
  OpenYinglingSlotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenYinglingSlotResponse_descriptor_,
      OpenYinglingSlotResponse::default_instance_,
      OpenYinglingSlotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenYinglingSlotResponse));
  OpenYinglingSlotNtf_descriptor_ = file->message_type(52);
  static const int OpenYinglingSlotNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotNtf, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotNtf, opened_by_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotNtf, openen_by_yuanbao_),
  };
  OpenYinglingSlotNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenYinglingSlotNtf_descriptor_,
      OpenYinglingSlotNtf::default_instance_,
      OpenYinglingSlotNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenYinglingSlotNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenYinglingSlotNtf));
  RefeshYinglingHiringListReq_descriptor_ = file->message_type(53);
  static const int RefeshYinglingHiringListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListReq, use_yuan_bao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListReq, gen_type_),
  };
  RefeshYinglingHiringListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefeshYinglingHiringListReq_descriptor_,
      RefeshYinglingHiringListReq::default_instance_,
      RefeshYinglingHiringListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefeshYinglingHiringListReq));
  AutoRefeshYinglingHiringListReq_descriptor_ = file->message_type(54);
  static const int AutoRefeshYinglingHiringListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListReq, until_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListReq, max_count_),
  };
  AutoRefeshYinglingHiringListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoRefeshYinglingHiringListReq_descriptor_,
      AutoRefeshYinglingHiringListReq::default_instance_,
      AutoRefeshYinglingHiringListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoRefeshYinglingHiringListReq));
  AutoRefeshYinglingHiringListRep_descriptor_ = file->message_type(55);
  static const int AutoRefeshYinglingHiringListRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListRep, error_code_),
  };
  AutoRefeshYinglingHiringListRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoRefeshYinglingHiringListRep_descriptor_,
      AutoRefeshYinglingHiringListRep::default_instance_,
      AutoRefeshYinglingHiringListRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoRefeshYinglingHiringListRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoRefeshYinglingHiringListRep));
  HiringYingling_descriptor_ = file->message_type(56);
  static const int HiringYingling_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, t_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, is_hired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, once_hired_),
  };
  HiringYingling_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HiringYingling_descriptor_,
      HiringYingling::default_instance_,
      HiringYingling_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiringYingling, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HiringYingling));
  RefeshYinglingHiringListNtf_descriptor_ = file->message_type(57);
  static const int RefeshYinglingHiringListNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListNtf, yingling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListNtf, rand_num_),
  };
  RefeshYinglingHiringListNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefeshYinglingHiringListNtf_descriptor_,
      RefeshYinglingHiringListNtf::default_instance_,
      RefeshYinglingHiringListNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefeshYinglingHiringListNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefeshYinglingHiringListNtf));
  HireYinglingRequest_descriptor_ = file->message_type(58);
  static const int HireYinglingRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireYinglingRequest, yingling_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireYinglingRequest, yingling_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireYinglingRequest, special_hire_),
  };
  HireYinglingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HireYinglingRequest_descriptor_,
      HireYinglingRequest::default_instance_,
      HireYinglingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireYinglingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HireYinglingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HireYinglingRequest));
  GetLingliRequest_descriptor_ = file->message_type(59);
  static const int GetLingliRequest_offsets_[1] = {
  };
  GetLingliRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLingliRequest_descriptor_,
      GetLingliRequest::default_instance_,
      GetLingliRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLingliRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLingliRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLingliRequest));
  ConvertYinglingRequest_descriptor_ = file->message_type(60);
  static const int ConvertYinglingRequest_offsets_[1] = {
  };
  ConvertYinglingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvertYinglingRequest_descriptor_,
      ConvertYinglingRequest::default_instance_,
      ConvertYinglingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertYinglingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvertYinglingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvertYinglingRequest));
  LingliUpdateNotify_descriptor_ = file->message_type(61);
  static const int LingliUpdateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingliUpdateNotify, current_lingli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingliUpdateNotify, added_lingli_),
  };
  LingliUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LingliUpdateNotify_descriptor_,
      LingliUpdateNotify::default_instance_,
      LingliUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingliUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LingliUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LingliUpdateNotify));
  AddYinglingNotify_descriptor_ = file->message_type(62);
  static const int AddYinglingNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddYinglingNotify, yingling_),
  };
  AddYinglingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddYinglingNotify_descriptor_,
      AddYinglingNotify::default_instance_,
      AddYinglingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddYinglingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddYinglingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddYinglingNotify));
  DelHiringYinglingNotify_descriptor_ = file->message_type(63);
  static const int DelHiringYinglingNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelHiringYinglingNotify, pos_),
  };
  DelHiringYinglingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelHiringYinglingNotify_descriptor_,
      DelHiringYinglingNotify::default_instance_,
      DelHiringYinglingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelHiringYinglingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelHiringYinglingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelHiringYinglingNotify));
  FireYinglingRequest_descriptor_ = file->message_type(64);
  static const int FireYinglingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireYinglingRequest, yingling_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireYinglingRequest, forced_),
  };
  FireYinglingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireYinglingRequest_descriptor_,
      FireYinglingRequest::default_instance_,
      FireYinglingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireYinglingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireYinglingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireYinglingRequest));
  DelYinglingNotify_descriptor_ = file->message_type(65);
  static const int DelYinglingNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelYinglingNotify, yingling_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelYinglingNotify, error_code_),
  };
  DelYinglingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelYinglingNotify_descriptor_,
      DelYinglingNotify::default_instance_,
      DelYinglingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelYinglingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelYinglingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelYinglingNotify));
  GetYinglingComboDataRequest_descriptor_ = file->message_type(66);
  static const int GetYinglingComboDataRequest_offsets_[1] = {
  };
  GetYinglingComboDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingComboDataRequest_descriptor_,
      GetYinglingComboDataRequest::default_instance_,
      GetYinglingComboDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingComboDataRequest));
  GetYinglingComboDataResponse_descriptor_ = file->message_type(67);
  static const int GetYinglingComboDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataResponse, error_code_),
  };
  GetYinglingComboDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingComboDataResponse_descriptor_,
      GetYinglingComboDataResponse::default_instance_,
      GetYinglingComboDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingComboDataResponse));
  GetYinglingComboDataNotify_descriptor_ = file->message_type(68);
  static const int GetYinglingComboDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataNotify, combo_status_),
  };
  GetYinglingComboDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetYinglingComboDataNotify_descriptor_,
      GetYinglingComboDataNotify::default_instance_,
      GetYinglingComboDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetYinglingComboDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetYinglingComboDataNotify));
  UpgradeYinglingComboRequest_descriptor_ = file->message_type(69);
  static const int UpgradeYinglingComboRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboRequest, combo_id_),
  };
  UpgradeYinglingComboRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeYinglingComboRequest_descriptor_,
      UpgradeYinglingComboRequest::default_instance_,
      UpgradeYinglingComboRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeYinglingComboRequest));
  UpgradeYinglingComboResponse_descriptor_ = file->message_type(70);
  static const int UpgradeYinglingComboResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboResponse, error_code_),
  };
  UpgradeYinglingComboResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeYinglingComboResponse_descriptor_,
      UpgradeYinglingComboResponse::default_instance_,
      UpgradeYinglingComboResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeYinglingComboResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeYinglingComboResponse));
  MoveStartRequest_descriptor_ = file->message_type(71);
  static const int MoveStartRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, src_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, src_map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, dst_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, dst_map_y_),
  };
  MoveStartRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveStartRequest_descriptor_,
      MoveStartRequest::default_instance_,
      MoveStartRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveStartRequest));
  MoveStartResponse_descriptor_ = file->message_type(72);
  static const int MoveStartResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, map_y_),
  };
  MoveStartResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveStartResponse_descriptor_,
      MoveStartResponse::default_instance_,
      MoveStartResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveStartResponse));
  MoveStartNotify_descriptor_ = file->message_type(73);
  static const int MoveStartNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, src_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, src_map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, dst_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, dst_map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, time_ms_),
  };
  MoveStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveStartNotify_descriptor_,
      MoveStartNotify::default_instance_,
      MoveStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveStartNotify));
  EnterViewNotify_descriptor_ = file->message_type(74);
  static const int EnterViewNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterViewNotify, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterViewNotify, movements_),
  };
  EnterViewNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterViewNotify_descriptor_,
      EnterViewNotify::default_instance_,
      EnterViewNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterViewNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterViewNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterViewNotify));
  LeaveViewNotify_descriptor_ = file->message_type(75);
  static const int LeaveViewNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveViewNotify, guids_),
  };
  LeaveViewNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveViewNotify_descriptor_,
      LeaveViewNotify::default_instance_,
      LeaveViewNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveViewNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveViewNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveViewNotify));
  GameStatusNotify_descriptor_ = file->message_type(76);
  static const int GameStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNotify, status_),
  };
  GameStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStatusNotify_descriptor_,
      GameStatusNotify::default_instance_,
      GameStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStatusNotify));
  ChangeMapNotify_descriptor_ = file->message_type(77);
  static const int ChangeMapNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, map_instance_id_),
  };
  ChangeMapNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeMapNotify_descriptor_,
      ChangeMapNotify::default_instance_,
      ChangeMapNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeMapNotify));
  ChooseAutoFightNPCRequest_descriptor_ = file->message_type(78);
  static const int ChooseAutoFightNPCRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCRequest, battle_npc_id_),
  };
  ChooseAutoFightNPCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChooseAutoFightNPCRequest_descriptor_,
      ChooseAutoFightNPCRequest::default_instance_,
      ChooseAutoFightNPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChooseAutoFightNPCRequest));
  ChooseAutoFightNPCResponse_descriptor_ = file->message_type(79);
  static const int ChooseAutoFightNPCResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, exp_bonus_one_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, vip_bonus_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, left_free_auto_fight_times_),
  };
  ChooseAutoFightNPCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChooseAutoFightNPCResponse_descriptor_,
      ChooseAutoFightNPCResponse::default_instance_,
      ChooseAutoFightNPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChooseAutoFightNPCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChooseAutoFightNPCResponse));
  AutoFightMonsterRequest_descriptor_ = file->message_type(80);
  static const int AutoFightMonsterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterRequest, battle_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterRequest, fight_times_),
  };
  AutoFightMonsterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightMonsterRequest_descriptor_,
      AutoFightMonsterRequest::default_instance_,
      AutoFightMonsterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightMonsterRequest));
  AutoFightMonsterResponse_descriptor_ = file->message_type(81);
  static const int AutoFightMonsterResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterResponse, left_auto_fight_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterResponse, free_bag_size_),
  };
  AutoFightMonsterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightMonsterResponse_descriptor_,
      AutoFightMonsterResponse::default_instance_,
      AutoFightMonsterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightMonsterResponse));
  StopAutoFightRequest_descriptor_ = file->message_type(82);
  static const int StopAutoFightRequest_offsets_[1] = {
  };
  StopAutoFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAutoFightRequest_descriptor_,
      StopAutoFightRequest::default_instance_,
      StopAutoFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAutoFightRequest));
  StopAutoFightResponse_descriptor_ = file->message_type(83);
  static const int StopAutoFightResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightResponse, error_code_),
  };
  StopAutoFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAutoFightResponse_descriptor_,
      StopAutoFightResponse::default_instance_,
      StopAutoFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAutoFightResponse));
  AutoFightMonsterUpdateNotify_descriptor_ = file->message_type(84);
  static const int AutoFightMonsterUpdateNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, is_fight_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, finish_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, cur_fight_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, left_auto_fight_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, free_bag_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, skill_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, drop_item_),
  };
  AutoFightMonsterUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightMonsterUpdateNotify_descriptor_,
      AutoFightMonsterUpdateNotify::default_instance_,
      AutoFightMonsterUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightMonsterUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightMonsterUpdateNotify));
  SpeedUpAutoFightRequest_descriptor_ = file->message_type(85);
  static const int SpeedUpAutoFightRequest_offsets_[1] = {
  };
  SpeedUpAutoFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpAutoFightRequest_descriptor_,
      SpeedUpAutoFightRequest::default_instance_,
      SpeedUpAutoFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpAutoFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpAutoFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpAutoFightRequest));
  SpeedUpAutoFightResponse_descriptor_ = file->message_type(86);
  static const int SpeedUpAutoFightResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpAutoFightResponse, error_code_),
  };
  SpeedUpAutoFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpAutoFightResponse_descriptor_,
      SpeedUpAutoFightResponse::default_instance_,
      SpeedUpAutoFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpAutoFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpAutoFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpAutoFightResponse));
  GetPlayerViewRequest_descriptor_ = file->message_type(87);
  static const int GetPlayerViewRequest_offsets_[1] = {
  };
  GetPlayerViewRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerViewRequest_descriptor_,
      GetPlayerViewRequest::default_instance_,
      GetPlayerViewRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerViewRequest));
  GetPlayerViewResponse_descriptor_ = file->message_type(88);
  static const int GetPlayerViewResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewResponse, view_),
  };
  GetPlayerViewResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerViewResponse_descriptor_,
      GetPlayerViewResponse::default_instance_,
      GetPlayerViewResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerViewResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerViewResponse));
  GetSkillListRequest_descriptor_ = file->message_type(89);
  static const int GetSkillListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListRequest, guid_),
  };
  GetSkillListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSkillListRequest_descriptor_,
      GetSkillListRequest::default_instance_,
      GetSkillListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSkillListRequest));
  GetSkillListResponse_descriptor_ = file->message_type(90);
  static const int GetSkillListResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, open_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, skill_exp_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, practice_skill_limit_),
  };
  GetSkillListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSkillListResponse_descriptor_,
      GetSkillListResponse::default_instance_,
      GetSkillListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSkillListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSkillListResponse));
  GetBattleSkillListRequest_descriptor_ = file->message_type(91);
  static const int GetBattleSkillListRequest_offsets_[1] = {
  };
  GetBattleSkillListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBattleSkillListRequest_descriptor_,
      GetBattleSkillListRequest::default_instance_,
      GetBattleSkillListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBattleSkillListRequest));
  GetBattleSkillListResponse_descriptor_ = file->message_type(92);
  static const int GetBattleSkillListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListResponse, battle_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListResponse, youli_num_),
  };
  GetBattleSkillListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBattleSkillListResponse_descriptor_,
      GetBattleSkillListResponse::default_instance_,
      GetBattleSkillListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattleSkillListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBattleSkillListResponse));
  UpdateBattleSkillNotify_descriptor_ = file->message_type(93);
  static const int UpdateBattleSkillNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, level_),
  };
  UpdateBattleSkillNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBattleSkillNotify_descriptor_,
      UpdateBattleSkillNotify::default_instance_,
      UpdateBattleSkillNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBattleSkillNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBattleSkillNotify));
  SkillPoolChangeNotify_descriptor_ = file->message_type(94);
  static const int SkillPoolChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPoolChangeNotify, buddy_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPoolChangeNotify, skill_pool_exp_),
  };
  SkillPoolChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPoolChangeNotify_descriptor_,
      SkillPoolChangeNotify::default_instance_,
      SkillPoolChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPoolChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPoolChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPoolChangeNotify));
  UpdateSkillNotify_descriptor_ = file->message_type(95);
  static const int UpdateSkillNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkillNotify, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkillNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkillNotify, new_flag_),
  };
  UpdateSkillNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSkillNotify_descriptor_,
      UpdateSkillNotify::default_instance_,
      UpdateSkillNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkillNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSkillNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSkillNotify));
  UpgradeBattleSkillRequest_descriptor_ = file->message_type(96);
  static const int UpgradeBattleSkillRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillRequest, battle_skill_id_),
  };
  UpgradeBattleSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeBattleSkillRequest_descriptor_,
      UpgradeBattleSkillRequest::default_instance_,
      UpgradeBattleSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeBattleSkillRequest));
  UpgradeBattleSkillResponse_descriptor_ = file->message_type(97);
  static const int UpgradeBattleSkillResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillResponse, error_code_),
  };
  UpgradeBattleSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeBattleSkillResponse_descriptor_,
      UpgradeBattleSkillResponse::default_instance_,
      UpgradeBattleSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeBattleSkillResponse));
  UpgradeBattleSkillNotify_descriptor_ = file->message_type(98);
  static const int UpgradeBattleSkillNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify, skill_info_),
  };
  UpgradeBattleSkillNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeBattleSkillNotify_descriptor_,
      UpgradeBattleSkillNotify::default_instance_,
      UpgradeBattleSkillNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeBattleSkillNotify));
  UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_ = UpgradeBattleSkillNotify_descriptor_->nested_type(0);
  static const int UpgradeBattleSkillNotify_BattleSkillLevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify_BattleSkillLevelInfo, battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify_BattleSkillLevelInfo, level_),
  };
  UpgradeBattleSkillNotify_BattleSkillLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_,
      UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance_,
      UpgradeBattleSkillNotify_BattleSkillLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify_BattleSkillLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeBattleSkillNotify_BattleSkillLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeBattleSkillNotify_BattleSkillLevelInfo));
  UpdateYouliNotify_descriptor_ = file->message_type(99);
  static const int UpdateYouliNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYouliNotify, youli_num_),
  };
  UpdateYouliNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateYouliNotify_descriptor_,
      UpdateYouliNotify::default_instance_,
      UpdateYouliNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYouliNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateYouliNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateYouliNotify));
  GetEquipDetailRequest_descriptor_ = file->message_type(100);
  static const int GetEquipDetailRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailRequest, item_id_list_),
  };
  GetEquipDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEquipDetailRequest_descriptor_,
      GetEquipDetailRequest::default_instance_,
      GetEquipDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEquipDetailRequest));
  GetEquipDetailResponse_descriptor_ = file->message_type(101);
  static const int GetEquipDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailResponse, equip_list_),
  };
  GetEquipDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEquipDetailResponse_descriptor_,
      GetEquipDetailResponse::default_instance_,
      GetEquipDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEquipDetailResponse));
  GetLineupListRequest_descriptor_ = file->message_type(102);
  static const int GetLineupListRequest_offsets_[1] = {
  };
  GetLineupListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLineupListRequest_descriptor_,
      GetLineupListRequest::default_instance_,
      GetLineupListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLineupListRequest));
  GetLineupListResponse_descriptor_ = file->message_type(103);
  static const int GetLineupListResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, learned_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, default_lineup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, lineup_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, max_lineup_size_),
  };
  GetLineupListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLineupListResponse_descriptor_,
      GetLineupListResponse::default_instance_,
      GetLineupListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLineupListResponse));
  GetLineupFightCapacityRequest_descriptor_ = file->message_type(104);
  static const int GetLineupFightCapacityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityRequest, lineup_id_),
  };
  GetLineupFightCapacityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLineupFightCapacityRequest_descriptor_,
      GetLineupFightCapacityRequest::default_instance_,
      GetLineupFightCapacityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLineupFightCapacityRequest));
  GetLineupFightCapacityResponse_descriptor_ = file->message_type(105);
  static const int GetLineupFightCapacityResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityResponse, fight_capacity_),
  };
  GetLineupFightCapacityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLineupFightCapacityResponse_descriptor_,
      GetLineupFightCapacityResponse::default_instance_,
      GetLineupFightCapacityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLineupFightCapacityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLineupFightCapacityResponse));
  LineUpOperationRequest_descriptor_ = file->message_type(106);
  static const int LineUpOperationRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationRequest, set_as_default_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationRequest, lineup_),
  };
  LineUpOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineUpOperationRequest_descriptor_,
      LineUpOperationRequest::default_instance_,
      LineUpOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineUpOperationRequest));
  LineUpOperationResponse_descriptor_ = file->message_type(107);
  static const int LineUpOperationResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, default_lineup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, lineup_),
  };
  LineUpOperationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineUpOperationResponse_descriptor_,
      LineUpOperationResponse::default_instance_,
      LineUpOperationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineUpOperationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineUpOperationResponse));
  UnequipAllRequest_descriptor_ = file->message_type(108);
  static const int UnequipAllRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllRequest, buddy_id_),
  };
  UnequipAllRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnequipAllRequest_descriptor_,
      UnequipAllRequest::default_instance_,
      UnequipAllRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnequipAllRequest));
  UnequipAllResponse_descriptor_ = file->message_type(109);
  static const int UnequipAllResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllResponse, error_code_),
  };
  UnequipAllResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnequipAllResponse_descriptor_,
      UnequipAllResponse::default_instance_,
      UnequipAllResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnequipAllResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnequipAllResponse));
  PlayerUpdateNotify_descriptor_ = file->message_type(110);
  static const int PlayerUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateNotify, bank_),
  };
  PlayerUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerUpdateNotify_descriptor_,
      PlayerUpdateNotify::default_instance_,
      PlayerUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerUpdateNotify));
  EquipSkillRequest_descriptor_ = file->message_type(111);
  static const int EquipSkillRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillRequest, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillRequest, equiped_slot_index_),
  };
  EquipSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSkillRequest_descriptor_,
      EquipSkillRequest::default_instance_,
      EquipSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSkillRequest));
  EquipSkillResponse_descriptor_ = file->message_type(112);
  static const int EquipSkillResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, equiped_slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, equiped_slot_skillid_),
  };
  EquipSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSkillResponse_descriptor_,
      EquipSkillResponse::default_instance_,
      EquipSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSkillResponse));
  UnloadSkillRequest_descriptor_ = file->message_type(113);
  static const int UnloadSkillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillRequest, equiped_slot_index_),
  };
  UnloadSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnloadSkillRequest_descriptor_,
      UnloadSkillRequest::default_instance_,
      UnloadSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnloadSkillRequest));
  UnloadSkillResponse_descriptor_ = file->message_type(114);
  static const int UnloadSkillResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillResponse, equiped_slot_index_),
  };
  UnloadSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnloadSkillResponse_descriptor_,
      UnloadSkillResponse::default_instance_,
      UnloadSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnloadSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnloadSkillResponse));
  InjectSkillExpRequest_descriptor_ = file->message_type(115);
  static const int InjectSkillExpRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpRequest, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpRequest, inject_exp_),
  };
  InjectSkillExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InjectSkillExpRequest_descriptor_,
      InjectSkillExpRequest::default_instance_,
      InjectSkillExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InjectSkillExpRequest));
  InjectSkillExpResponse_descriptor_ = file->message_type(116);
  static const int InjectSkillExpResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, skill_pool_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, skill_),
  };
  InjectSkillExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InjectSkillExpResponse_descriptor_,
      InjectSkillExpResponse::default_instance_,
      InjectSkillExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InjectSkillExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InjectSkillExpResponse));
  PracticeSkillRequest_descriptor_ = file->message_type(117);
  static const int PracticeSkillRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, practice_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, practice_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, cost_),
  };
  PracticeSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeSkillRequest_descriptor_,
      PracticeSkillRequest::default_instance_,
      PracticeSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeSkillRequest));
  PracticeSkillResponse_descriptor_ = file->message_type(118);
  static const int PracticeSkillResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillResponse, skill_),
  };
  PracticeSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeSkillResponse_descriptor_,
      PracticeSkillResponse::default_instance_,
      PracticeSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeSkillResponse));
  SpeedupPracticeSkillRequest_descriptor_ = file->message_type(119);
  static const int SpeedupPracticeSkillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillRequest, skill_id_),
  };
  SpeedupPracticeSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedupPracticeSkillRequest_descriptor_,
      SpeedupPracticeSkillRequest::default_instance_,
      SpeedupPracticeSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedupPracticeSkillRequest));
  SpeedupPracticeSkillResponse_descriptor_ = file->message_type(120);
  static const int SpeedupPracticeSkillResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, left_time_),
  };
  SpeedupPracticeSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedupPracticeSkillResponse_descriptor_,
      SpeedupPracticeSkillResponse::default_instance_,
      SpeedupPracticeSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedupPracticeSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedupPracticeSkillResponse));
  StopPracticeSkillRequest_descriptor_ = file->message_type(121);
  static const int StopPracticeSkillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillRequest, skill_id_),
  };
  StopPracticeSkillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopPracticeSkillRequest_descriptor_,
      StopPracticeSkillRequest::default_instance_,
      StopPracticeSkillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopPracticeSkillRequest));
  StopPracticeSkillResponse_descriptor_ = file->message_type(122);
  static const int StopPracticeSkillResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillResponse, skill_),
  };
  StopPracticeSkillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopPracticeSkillResponse_descriptor_,
      StopPracticeSkillResponse::default_instance_,
      StopPracticeSkillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopPracticeSkillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopPracticeSkillResponse));
  PracticeSkillNotify_descriptor_ = file->message_type(123);
  static const int PracticeSkillNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillNotify, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillNotify, finished_),
  };
  PracticeSkillNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeSkillNotify_descriptor_,
      PracticeSkillNotify::default_instance_,
      PracticeSkillNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeSkillNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeSkillNotify));
  LevelUpNotify_descriptor_ = file->message_type(124);
  static const int LevelUpNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, new_level_),
  };
  LevelUpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelUpNotify_descriptor_,
      LevelUpNotify::default_instance_,
      LevelUpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelUpNotify));
  UpdateMoneyNotify_descriptor_ = file->message_type(125);
  static const int UpdateMoneyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMoneyNotify, money_),
  };
  UpdateMoneyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMoneyNotify_descriptor_,
      UpdateMoneyNotify::default_instance_,
      UpdateMoneyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMoneyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMoneyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMoneyNotify));
  UpdateItemNotify_descriptor_ = file->message_type(126);
  static const int UpdateItemNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemNotify, items_),
  };
  UpdateItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateItemNotify_descriptor_,
      UpdateItemNotify::default_instance_,
      UpdateItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateItemNotify));
  UpdateExpNotify_descriptor_ = file->message_type(127);
  static const int UpdateExpNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExpNotify, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExpNotify, cur_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExpNotify, add_exp_),
  };
  UpdateExpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateExpNotify_descriptor_,
      UpdateExpNotify::default_instance_,
      UpdateExpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateExpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateExpNotify));
  GetQuestListRequest_descriptor_ = file->message_type(128);
  static const int GetQuestListRequest_offsets_[1] = {
  };
  GetQuestListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestListRequest_descriptor_,
      GetQuestListRequest::default_instance_,
      GetQuestListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestListRequest));
  GetQuestsListResponse_descriptor_ = file->message_type(129);
  static const int GetQuestsListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestsListResponse, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestsListResponse, error_code_),
  };
  GetQuestsListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestsListResponse_descriptor_,
      GetQuestsListResponse::default_instance_,
      GetQuestsListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestsListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestsListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestsListResponse));
  AcceptQuestRequest_descriptor_ = file->message_type(130);
  static const int AcceptQuestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestRequest, quest_id_),
  };
  AcceptQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptQuestRequest_descriptor_,
      AcceptQuestRequest::default_instance_,
      AcceptQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptQuestRequest));
  FinishQuestRequest_descriptor_ = file->message_type(131);
  static const int FinishQuestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishQuestRequest, quest_id_),
  };
  FinishQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishQuestRequest_descriptor_,
      FinishQuestRequest::default_instance_,
      FinishQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishQuestRequest));
  CancelQuestRequest_descriptor_ = file->message_type(132);
  static const int CancelQuestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelQuestRequest, quest_id_),
  };
  CancelQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelQuestRequest_descriptor_,
      CancelQuestRequest::default_instance_,
      CancelQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelQuestRequest));
  QuestActionRequest_descriptor_ = file->message_type(133);
  static const int QuestActionRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionRequest, quest_id_),
  };
  QuestActionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestActionRequest_descriptor_,
      QuestActionRequest::default_instance_,
      QuestActionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestActionRequest));
  QuestsNotify_descriptor_ = file->message_type(134);
  static const int QuestsNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestsNotify, quests_),
  };
  QuestsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestsNotify_descriptor_,
      QuestsNotify::default_instance_,
      QuestsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestsNotify));
  AcceptXunluoQuestRequest_descriptor_ = file->message_type(135);
  static const int AcceptXunluoQuestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestRequest, cancel_quest_),
  };
  AcceptXunluoQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptXunluoQuestRequest_descriptor_,
      AcceptXunluoQuestRequest::default_instance_,
      AcceptXunluoQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptXunluoQuestRequest));
  AcceptXunluoQuestResponse_descriptor_ = file->message_type(136);
  static const int AcceptXunluoQuestResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestResponse, error_code_),
  };
  AcceptXunluoQuestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptXunluoQuestResponse_descriptor_,
      AcceptXunluoQuestResponse::default_instance_,
      AcceptXunluoQuestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptXunluoQuestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptXunluoQuestResponse));
  BuddyInjectSoulRequest_descriptor_ = file->message_type(137);
  static const int BuddyInjectSoulRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulRequest, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulRequest, use_protect_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulRequest, auto_fill_),
  };
  BuddyInjectSoulRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyInjectSoulRequest_descriptor_,
      BuddyInjectSoulRequest::default_instance_,
      BuddyInjectSoulRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyInjectSoulRequest));
  BuddyInjectSoulResponse_descriptor_ = file->message_type(138);
  static const int BuddyInjectSoulResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, inject_sucess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, soul_stone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, protect_item_num_),
  };
  BuddyInjectSoulResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyInjectSoulResponse_descriptor_,
      BuddyInjectSoulResponse::default_instance_,
      BuddyInjectSoulResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyInjectSoulResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyInjectSoulResponse));
  BuddySpaceTimeStatusRequest_descriptor_ = file->message_type(139);
  static const int BuddySpaceTimeStatusRequest_offsets_[1] = {
  };
  BuddySpaceTimeStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddySpaceTimeStatusRequest_descriptor_,
      BuddySpaceTimeStatusRequest::default_instance_,
      BuddySpaceTimeStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddySpaceTimeStatusRequest));
  BuddySpaceTimeStatus_descriptor_ = file->message_type(140);
  static const int BuddySpaceTimeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatus, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatus, spacetime_level_),
  };
  BuddySpaceTimeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddySpaceTimeStatus_descriptor_,
      BuddySpaceTimeStatus::default_instance_,
      BuddySpaceTimeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddySpaceTimeStatus));
  BuddySpaceTimeStatusResponse_descriptor_ = file->message_type(141);
  static const int BuddySpaceTimeStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusResponse, soul_stone_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusResponse, protect_item_num_),
  };
  BuddySpaceTimeStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddySpaceTimeStatusResponse_descriptor_,
      BuddySpaceTimeStatusResponse::default_instance_,
      BuddySpaceTimeStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySpaceTimeStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddySpaceTimeStatusResponse));
  BuddyChanllengeSpaceTimeRequest_descriptor_ = file->message_type(142);
  static const int BuddyChanllengeSpaceTimeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeRequest, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeRequest, challenge_level_),
  };
  BuddyChanllengeSpaceTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyChanllengeSpaceTimeRequest_descriptor_,
      BuddyChanllengeSpaceTimeRequest::default_instance_,
      BuddyChanllengeSpaceTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyChanllengeSpaceTimeRequest));
  BuddyChanllengeSpaceTimeResponse_descriptor_ = file->message_type(143);
  static const int BuddyChanllengeSpaceTimeResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, challenge_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, sucess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, error_code_),
  };
  BuddyChanllengeSpaceTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyChanllengeSpaceTimeResponse_descriptor_,
      BuddyChanllengeSpaceTimeResponse::default_instance_,
      BuddyChanllengeSpaceTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyChanllengeSpaceTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyChanllengeSpaceTimeResponse));
  BuddySoulUpdateNotify_descriptor_ = file->message_type(144);
  static const int BuddySoulUpdateNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySoulUpdateNotify, buddy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySoulUpdateNotify, cur_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySoulUpdateNotify, cur_max_soul_),
  };
  BuddySoulUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddySoulUpdateNotify_descriptor_,
      BuddySoulUpdateNotify::default_instance_,
      BuddySoulUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySoulUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddySoulUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddySoulUpdateNotify));
  EquipmentShengxingOpenRequest_descriptor_ = file->message_type(145);
  static const int EquipmentShengxingOpenRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenRequest, need_push_buddy_detail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenRequest, need_push_inventory_),
  };
  EquipmentShengxingOpenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentShengxingOpenRequest_descriptor_,
      EquipmentShengxingOpenRequest::default_instance_,
      EquipmentShengxingOpenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentShengxingOpenRequest));
  EquipmentShengxingOpenResponse_descriptor_ = file->message_type(146);
  static const int EquipmentShengxingOpenResponse_offsets_[1] = {
  };
  EquipmentShengxingOpenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentShengxingOpenResponse_descriptor_,
      EquipmentShengxingOpenResponse::default_instance_,
      EquipmentShengxingOpenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingOpenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentShengxingOpenResponse));
  EquipmentShengxingRequest_descriptor_ = file->message_type(147);
  static const int EquipmentShengxingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingRequest, auto_fill_),
  };
  EquipmentShengxingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentShengxingRequest_descriptor_,
      EquipmentShengxingRequest::default_instance_,
      EquipmentShengxingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentShengxingRequest));
  EquipmentShengxingResponse_descriptor_ = file->message_type(148);
  static const int EquipmentShengxingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingResponse, success_),
  };
  EquipmentShengxingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentShengxingResponse_descriptor_,
      EquipmentShengxingResponse::default_instance_,
      EquipmentShengxingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentShengxingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentShengxingResponse));
  XilianData_descriptor_ = file->message_type(149);
  static const int XilianData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianData, extra_attr_list_),
  };
  XilianData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XilianData_descriptor_,
      XilianData::default_instance_,
      XilianData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XilianData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XilianData));
  EquipmentXilianStatusRequest_descriptor_ = file->message_type(150);
  static const int EquipmentXilianStatusRequest_offsets_[1] = {
  };
  EquipmentXilianStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentXilianStatusRequest_descriptor_,
      EquipmentXilianStatusRequest::default_instance_,
      EquipmentXilianStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentXilianStatusRequest));
  EquipmentXilianStatusResponse_descriptor_ = file->message_type(151);
  static const int EquipmentXilianStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusResponse, extra_attr_list_),
  };
  EquipmentXilianStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentXilianStatusResponse_descriptor_,
      EquipmentXilianStatusResponse::default_instance_,
      EquipmentXilianStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentXilianStatusResponse));
  EquipmentXilianRequest_descriptor_ = file->message_type(152);
  static const int EquipmentXilianRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianRequest, lock_attr_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianRequest, auto_fill_),
  };
  EquipmentXilianRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentXilianRequest_descriptor_,
      EquipmentXilianRequest::default_instance_,
      EquipmentXilianRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentXilianRequest));
  EquipmentXilianResponse_descriptor_ = file->message_type(153);
  static const int EquipmentXilianResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianResponse, error_code_),
  };
  EquipmentXilianResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentXilianResponse_descriptor_,
      EquipmentXilianResponse::default_instance_,
      EquipmentXilianResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentXilianResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentXilianResponse));
  EquipmentLockXilianAttrRequest_descriptor_ = file->message_type(154);
  static const int EquipmentLockXilianAttrRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrRequest, lock_attr_index_),
  };
  EquipmentLockXilianAttrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentLockXilianAttrRequest_descriptor_,
      EquipmentLockXilianAttrRequest::default_instance_,
      EquipmentLockXilianAttrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentLockXilianAttrRequest));
  EquipmentLockXilianAttrResponse_descriptor_ = file->message_type(155);
  static const int EquipmentLockXilianAttrResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrResponse, error_code_),
  };
  EquipmentLockXilianAttrResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentLockXilianAttrResponse_descriptor_,
      EquipmentLockXilianAttrResponse::default_instance_,
      EquipmentLockXilianAttrResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentLockXilianAttrResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentLockXilianAttrResponse));
  EquipmentInheritRequest_descriptor_ = file->message_type(156);
  static const int EquipmentInheritRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritRequest, inherited_equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritRequest, inherit_equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritRequest, auto_fill_),
  };
  EquipmentInheritRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentInheritRequest_descriptor_,
      EquipmentInheritRequest::default_instance_,
      EquipmentInheritRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentInheritRequest));
  EquipmentInheritResponse_descriptor_ = file->message_type(157);
  static const int EquipmentInheritResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritResponse, error_code_),
  };
  EquipmentInheritResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentInheritResponse_descriptor_,
      EquipmentInheritResponse::default_instance_,
      EquipmentInheritResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInheritResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentInheritResponse));
  EquipmentRecycleRequest_descriptor_ = file->message_type(158);
  static const int EquipmentRecycleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleRequest, equip_id_),
  };
  EquipmentRecycleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRecycleRequest_descriptor_,
      EquipmentRecycleRequest::default_instance_,
      EquipmentRecycleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRecycleRequest));
  EquipmentRecycleResponse_descriptor_ = file->message_type(159);
  static const int EquipmentRecycleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleResponse, error_code_),
  };
  EquipmentRecycleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentRecycleResponse_descriptor_,
      EquipmentRecycleResponse::default_instance_,
      EquipmentRecycleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentRecycleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentRecycleResponse));
  BuddyDetailUpdateNotify_descriptor_ = file->message_type(160);
  static const int BuddyDetailUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailUpdateNotify, buddy_),
  };
  BuddyDetailUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyDetailUpdateNotify_descriptor_,
      BuddyDetailUpdateNotify::default_instance_,
      BuddyDetailUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyDetailUpdateNotify));
  BagItemListNotify_descriptor_ = file->message_type(161);
  static const int BagItemListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemListNotify, bag_items_),
  };
  BagItemListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemListNotify_descriptor_,
      BagItemListNotify::default_instance_,
      BagItemListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemListNotify));
  EquipUpdateNotify_descriptor_ = file->message_type(162);
  static const int EquipUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdateNotify, equips_),
  };
  EquipUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUpdateNotify_descriptor_,
      EquipUpdateNotify::default_instance_,
      EquipUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUpdateNotify));
  RoleCoolDownRequest_descriptor_ = file->message_type(163);
  static const int RoleCoolDownRequest_offsets_[1] = {
  };
  RoleCoolDownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownRequest_descriptor_,
      RoleCoolDownRequest::default_instance_,
      RoleCoolDownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownRequest));
  RoleCoolDownNotify_descriptor_ = file->message_type(164);
  static const int RoleCoolDownNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownNotify, cool_down_),
  };
  RoleCoolDownNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownNotify_descriptor_,
      RoleCoolDownNotify::default_instance_,
      RoleCoolDownNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownNotify));
  RoleCoolDownClearRequest_descriptor_ = file->message_type(165);
  static const int RoleCoolDownClearRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearRequest, type_),
  };
  RoleCoolDownClearRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownClearRequest_descriptor_,
      RoleCoolDownClearRequest::default_instance_,
      RoleCoolDownClearRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownClearRequest));
  RoleCoolDownClearResponse_descriptor_ = file->message_type(166);
  static const int RoleCoolDownClearResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearResponse, error_code_),
  };
  RoleCoolDownClearResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownClearResponse_descriptor_,
      RoleCoolDownClearResponse::default_instance_,
      RoleCoolDownClearResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownClearResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownClearResponse));
  RoleDailyLimitRequest_descriptor_ = file->message_type(167);
  static const int RoleDailyLimitRequest_offsets_[1] = {
  };
  RoleDailyLimitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyLimitRequest_descriptor_,
      RoleDailyLimitRequest::default_instance_,
      RoleDailyLimitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyLimitRequest));
  RoleDailyLimitUpdateNotify_descriptor_ = file->message_type(168);
  static const int RoleDailyLimitUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitUpdateNotify, daily_limit_),
  };
  RoleDailyLimitUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyLimitUpdateNotify_descriptor_,
      RoleDailyLimitUpdateNotify::default_instance_,
      RoleDailyLimitUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyLimitUpdateNotify));
  PurchaseLimitCountRequest_descriptor_ = file->message_type(169);
  static const int PurchaseLimitCountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountRequest, type_),
  };
  PurchaseLimitCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseLimitCountRequest_descriptor_,
      PurchaseLimitCountRequest::default_instance_,
      PurchaseLimitCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseLimitCountRequest));
  PurchaseLimitCountResponse_descriptor_ = file->message_type(170);
  static const int PurchaseLimitCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountResponse, error_code_),
  };
  PurchaseLimitCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurchaseLimitCountResponse_descriptor_,
      PurchaseLimitCountResponse::default_instance_,
      PurchaseLimitCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurchaseLimitCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurchaseLimitCountResponse));
  DailyQuestListRequest_descriptor_ = file->message_type(171);
  static const int DailyQuestListRequest_offsets_[1] = {
  };
  DailyQuestListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuestListRequest_descriptor_,
      DailyQuestListRequest::default_instance_,
      DailyQuestListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuestListRequest));
  DailyQuestListNotify_descriptor_ = file->message_type(172);
  static const int DailyQuestListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestListNotify, daily_quest_),
  };
  DailyQuestListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuestListNotify_descriptor_,
      DailyQuestListNotify::default_instance_,
      DailyQuestListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuestListNotify));
  RefreshDailyQuestRequest_descriptor_ = file->message_type(173);
  static const int RefreshDailyQuestRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestRequest, use_yuanbao_),
  };
  RefreshDailyQuestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshDailyQuestRequest_descriptor_,
      RefreshDailyQuestRequest::default_instance_,
      RefreshDailyQuestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshDailyQuestRequest));
  RefreshDailyQuestResponse_descriptor_ = file->message_type(174);
  static const int RefreshDailyQuestResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestResponse, error_code_),
  };
  RefreshDailyQuestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshDailyQuestResponse_descriptor_,
      RefreshDailyQuestResponse::default_instance_,
      RefreshDailyQuestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshDailyQuestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshDailyQuestResponse));
  ExchangeCodeRequest_descriptor_ = file->message_type(175);
  static const int ExchangeCodeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeRequest, code_),
  };
  ExchangeCodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeCodeRequest_descriptor_,
      ExchangeCodeRequest::default_instance_,
      ExchangeCodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeCodeRequest));
  ExchangeCodeResponse_descriptor_ = file->message_type(176);
  static const int ExchangeCodeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeResponse, error_code_),
  };
  ExchangeCodeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeCodeResponse_descriptor_,
      ExchangeCodeResponse::default_instance_,
      ExchangeCodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeCodeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeCodeResponse));
  PlayerFlagsRequest_descriptor_ = file->message_type(177);
  static const int PlayerFlagsRequest_offsets_[1] = {
  };
  PlayerFlagsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagsRequest_descriptor_,
      PlayerFlagsRequest::default_instance_,
      PlayerFlagsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagsRequest));
  PlayerFlagsResponse_descriptor_ = file->message_type(178);
  static const int PlayerFlagsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsResponse, error_code_),
  };
  PlayerFlagsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagsResponse_descriptor_,
      PlayerFlagsResponse::default_instance_,
      PlayerFlagsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagsResponse));
  PlayerSetFlagRequest_descriptor_ = file->message_type(179);
  static const int PlayerSetFlagRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagRequest, flag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagRequest, value_),
  };
  PlayerSetFlagRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSetFlagRequest_descriptor_,
      PlayerSetFlagRequest::default_instance_,
      PlayerSetFlagRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSetFlagRequest));
  PlayerSetFlagResponse_descriptor_ = file->message_type(180);
  static const int PlayerSetFlagResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagResponse, error_code_),
  };
  PlayerSetFlagResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSetFlagResponse_descriptor_,
      PlayerSetFlagResponse::default_instance_,
      PlayerSetFlagResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetFlagResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSetFlagResponse));
  PlayerFlagUpdateNotify_descriptor_ = file->message_type(181);
  static const int PlayerFlagUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagUpdateNotify, flag_),
  };
  PlayerFlagUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagUpdateNotify_descriptor_,
      PlayerFlagUpdateNotify::default_instance_,
      PlayerFlagUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagUpdateNotify));
  PlayerHideNpcRequest_descriptor_ = file->message_type(182);
  static const int PlayerHideNpcRequest_offsets_[1] = {
  };
  PlayerHideNpcRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHideNpcRequest_descriptor_,
      PlayerHideNpcRequest::default_instance_,
      PlayerHideNpcRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHideNpcRequest));
  PlayerHideNpcResponse_descriptor_ = file->message_type(183);
  static const int PlayerHideNpcResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcResponse, error_code_),
  };
  PlayerHideNpcResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHideNpcResponse_descriptor_,
      PlayerHideNpcResponse::default_instance_,
      PlayerHideNpcResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHideNpcResponse));
  PlayerHideNpcUpdateNotify_descriptor_ = file->message_type(184);
  static const int PlayerHideNpcUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcUpdateNotify, npc_),
  };
  PlayerHideNpcUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHideNpcUpdateNotify_descriptor_,
      PlayerHideNpcUpdateNotify::default_instance_,
      PlayerHideNpcUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHideNpcUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHideNpcUpdateNotify));
  StartCollectRequest_descriptor_ = file->message_type(185);
  static const int StartCollectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectRequest, start_tick_),
  };
  StartCollectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartCollectRequest_descriptor_,
      StartCollectRequest::default_instance_,
      StartCollectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartCollectRequest));
  StartCollectResponse_descriptor_ = file->message_type(186);
  static const int StartCollectResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectResponse, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectResponse, need_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectResponse, error_code_),
  };
  StartCollectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartCollectResponse_descriptor_,
      StartCollectResponse::default_instance_,
      StartCollectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartCollectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartCollectResponse));
  FinishCollectRequest_descriptor_ = file->message_type(187);
  static const int FinishCollectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectRequest, finish_tick_),
  };
  FinishCollectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishCollectRequest_descriptor_,
      FinishCollectRequest::default_instance_,
      FinishCollectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishCollectRequest));
  FinishCollectResponse_descriptor_ = file->message_type(188);
  static const int FinishCollectResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectResponse, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectResponse, error_code_),
  };
  FinishCollectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishCollectResponse_descriptor_,
      FinishCollectResponse::default_instance_,
      FinishCollectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishCollectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishCollectResponse));
  GetTrainAttributeRequest_descriptor_ = file->message_type(189);
  static const int GetTrainAttributeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeRequest, guid_),
  };
  GetTrainAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTrainAttributeRequest_descriptor_,
      GetTrainAttributeRequest::default_instance_,
      GetTrainAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTrainAttributeRequest));
  GetTrainAttributeResponse_descriptor_ = file->message_type(190);
  static const int GetTrainAttributeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeResponse, error_code_),
  };
  GetTrainAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTrainAttributeResponse_descriptor_,
      GetTrainAttributeResponse::default_instance_,
      GetTrainAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTrainAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTrainAttributeResponse));
  TrainAttributeRequest_descriptor_ = file->message_type(191);
  static const int TrainAttributeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeRequest, train_type_),
  };
  TrainAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainAttributeRequest_descriptor_,
      TrainAttributeRequest::default_instance_,
      TrainAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainAttributeRequest));
  TrainAttributeResponse_descriptor_ = file->message_type(192);
  static const int TrainAttributeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeResponse, error_code_),
  };
  TrainAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainAttributeResponse_descriptor_,
      TrainAttributeResponse::default_instance_,
      TrainAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainAttributeResponse));
  TrainAttributeNotify_descriptor_ = file->message_type(193);
  static const int TrainAttributeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, coin_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, yb_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, yb_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, alter_item_id_),
  };
  TrainAttributeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainAttributeNotify_descriptor_,
      TrainAttributeNotify::default_instance_,
      TrainAttributeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttributeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainAttributeNotify));
  SaveTrainAttributeRequest_descriptor_ = file->message_type(194);
  static const int SaveTrainAttributeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeRequest, cancel_),
  };
  SaveTrainAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTrainAttributeRequest_descriptor_,
      SaveTrainAttributeRequest::default_instance_,
      SaveTrainAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTrainAttributeRequest));
  SaveTrainAttributeResponse_descriptor_ = file->message_type(195);
  static const int SaveTrainAttributeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeResponse, error_code_),
  };
  SaveTrainAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTrainAttributeResponse_descriptor_,
      SaveTrainAttributeResponse::default_instance_,
      SaveTrainAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTrainAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTrainAttributeResponse));
  GuildInfoUpdateNotify_descriptor_ = file->message_type(196);
  static const int GuildInfoUpdateNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, guild_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, guild_name_),
  };
  GuildInfoUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfoUpdateNotify_descriptor_,
      GuildInfoUpdateNotify::default_instance_,
      GuildInfoUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfoUpdateNotify));
  VipInfoUpdateNotify_descriptor_ = file->message_type(197);
  static const int VipInfoUpdateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoUpdateNotify, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoUpdateNotify, duration_sec_),
  };
  VipInfoUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInfoUpdateNotify_descriptor_,
      VipInfoUpdateNotify::default_instance_,
      VipInfoUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInfoUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInfoUpdateNotify));
  FunctionLimitRequest_descriptor_ = file->message_type(198);
  static const int FunctionLimitRequest_offsets_[1] = {
  };
  FunctionLimitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionLimitRequest_descriptor_,
      FunctionLimitRequest::default_instance_,
      FunctionLimitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionLimitRequest));
  FunctionLimitResponse_descriptor_ = file->message_type(199);
  static const int FunctionLimitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitResponse, open_flags_),
  };
  FunctionLimitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionLimitResponse_descriptor_,
      FunctionLimitResponse::default_instance_,
      FunctionLimitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionLimitResponse));
  FunctionLimitUpdateNotify_descriptor_ = file->message_type(200);
  static const int FunctionLimitUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitUpdateNotify, open_flags_),
  };
  FunctionLimitUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionLimitUpdateNotify_descriptor_,
      FunctionLimitUpdateNotify::default_instance_,
      FunctionLimitUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionLimitUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionLimitUpdateNotify));
  GetDailyGiftInfoRequest_descriptor_ = file->message_type(201);
  static const int GetDailyGiftInfoRequest_offsets_[1] = {
  };
  GetDailyGiftInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyGiftInfoRequest_descriptor_,
      GetDailyGiftInfoRequest::default_instance_,
      GetDailyGiftInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyGiftInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyGiftInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyGiftInfoRequest));
  GetDailyGiftInfoResponse_descriptor_ = file->message_type(202);
  static const int GetDailyGiftInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyGiftInfoResponse, error_code_),
  };
  GetDailyGiftInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDailyGiftInfoResponse_descriptor_,
      GetDailyGiftInfoResponse::default_instance_,
      GetDailyGiftInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyGiftInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyGiftInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDailyGiftInfoResponse));
  DailyGiftInfoUpdateNotify_descriptor_ = file->message_type(203);
  static const int DailyGiftInfoUpdateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyGiftInfoUpdateNotify, gift_pack_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyGiftInfoUpdateNotify, applied_),
  };
  DailyGiftInfoUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyGiftInfoUpdateNotify_descriptor_,
      DailyGiftInfoUpdateNotify::default_instance_,
      DailyGiftInfoUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyGiftInfoUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyGiftInfoUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyGiftInfoUpdateNotify));
  ApplyDailyGiftRequest_descriptor_ = file->message_type(204);
  static const int ApplyDailyGiftRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftRequest, apply_first_reward_on_vip_),
  };
  ApplyDailyGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyDailyGiftRequest_descriptor_,
      ApplyDailyGiftRequest::default_instance_,
      ApplyDailyGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyDailyGiftRequest));
  ApplyDailyGiftResponse_descriptor_ = file->message_type(205);
  static const int ApplyDailyGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftResponse, error_code_),
  };
  ApplyDailyGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyDailyGiftResponse_descriptor_,
      ApplyDailyGiftResponse::default_instance_,
      ApplyDailyGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyDailyGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyDailyGiftResponse));
  GetStackableOnlineGiftRequest_descriptor_ = file->message_type(206);
  static const int GetStackableOnlineGiftRequest_offsets_[1] = {
  };
  GetStackableOnlineGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStackableOnlineGiftRequest_descriptor_,
      GetStackableOnlineGiftRequest::default_instance_,
      GetStackableOnlineGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStackableOnlineGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStackableOnlineGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStackableOnlineGiftRequest));
  StackableOnlineGift_descriptor_ = file->message_type(207);
  static const int StackableOnlineGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGift, online_day_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGift, pack_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGift, applied_),
  };
  StackableOnlineGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StackableOnlineGift_descriptor_,
      StackableOnlineGift::default_instance_,
      StackableOnlineGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StackableOnlineGift));
  GetStackableOnlineGiftResponse_descriptor_ = file->message_type(208);
  static const int GetStackableOnlineGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStackableOnlineGiftResponse, error_code_),
  };
  GetStackableOnlineGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStackableOnlineGiftResponse_descriptor_,
      GetStackableOnlineGiftResponse::default_instance_,
      GetStackableOnlineGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStackableOnlineGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStackableOnlineGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStackableOnlineGiftResponse));
  StackableOnlineGiftUpdateNotify_descriptor_ = file->message_type(209);
  static const int StackableOnlineGiftUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGiftUpdateNotify, gifts_),
  };
  StackableOnlineGiftUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StackableOnlineGiftUpdateNotify_descriptor_,
      StackableOnlineGiftUpdateNotify::default_instance_,
      StackableOnlineGiftUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGiftUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StackableOnlineGiftUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StackableOnlineGiftUpdateNotify));
  ApplyStackableOnlineGiftRequest_descriptor_ = file->message_type(210);
  static const int ApplyStackableOnlineGiftRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftRequest, online_day_),
  };
  ApplyStackableOnlineGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyStackableOnlineGiftRequest_descriptor_,
      ApplyStackableOnlineGiftRequest::default_instance_,
      ApplyStackableOnlineGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyStackableOnlineGiftRequest));
  ApplyStackableOnlineGiftResponse_descriptor_ = file->message_type(211);
  static const int ApplyStackableOnlineGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftResponse, error_code_),
  };
  ApplyStackableOnlineGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyStackableOnlineGiftResponse_descriptor_,
      ApplyStackableOnlineGiftResponse::default_instance_,
      ApplyStackableOnlineGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyStackableOnlineGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyStackableOnlineGiftResponse));
  AnnouncementNotify_descriptor_ = file->message_type(212);
  static const int AnnouncementNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, announce_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, int_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, yinglings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, items_),
  };
  AnnouncementNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnouncementNotify_descriptor_,
      AnnouncementNotify::default_instance_,
      AnnouncementNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnouncementNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnouncementNotify));
  GemUpgradeRequest_descriptor_ = file->message_type(213);
  static const int GemUpgradeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgradeRequest, gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgradeRequest, gem_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgradeRequest, auto_fill_),
  };
  GemUpgradeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemUpgradeRequest_descriptor_,
      GemUpgradeRequest::default_instance_,
      GemUpgradeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgradeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgradeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemUpgradeRequest));
  GemUpgrateResponse_descriptor_ = file->message_type(214);
  static const int GemUpgrateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgrateResponse, error_code_),
  };
  GemUpgrateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemUpgrateResponse_descriptor_,
      GemUpgrateResponse::default_instance_,
      GemUpgrateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgrateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemUpgrateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemUpgrateResponse));
  GemInsertRequest_descriptor_ = file->message_type(215);
  static const int GemInsertRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertRequest, equip_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertRequest, socket_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertRequest, item_uid_),
  };
  GemInsertRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemInsertRequest_descriptor_,
      GemInsertRequest::default_instance_,
      GemInsertRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemInsertRequest));
  GemInsertResponse_descriptor_ = file->message_type(216);
  static const int GemInsertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertResponse, error_code_),
  };
  GemInsertResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemInsertResponse_descriptor_,
      GemInsertResponse::default_instance_,
      GemInsertResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemInsertResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemInsertResponse));
  GemRemoveRequest_descriptor_ = file->message_type(217);
  static const int GemRemoveRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveRequest, equip_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveRequest, socket_index_),
  };
  GemRemoveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemRemoveRequest_descriptor_,
      GemRemoveRequest::default_instance_,
      GemRemoveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemRemoveRequest));
  GemRemoveResponse_descriptor_ = file->message_type(218);
  static const int GemRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveResponse, error_code_),
  };
  GemRemoveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemRemoveResponse_descriptor_,
      GemRemoveResponse::default_instance_,
      GemRemoveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemRemoveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemRemoveResponse));
  MakeSocketRequest_descriptor_ = file->message_type(219);
  static const int MakeSocketRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketRequest, equip_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketRequest, socket_index_),
  };
  MakeSocketRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeSocketRequest_descriptor_,
      MakeSocketRequest::default_instance_,
      MakeSocketRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeSocketRequest));
  MakeSocketResponse_descriptor_ = file->message_type(220);
  static const int MakeSocketResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketResponse, error_code_),
  };
  MakeSocketResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeSocketResponse_descriptor_,
      MakeSocketResponse::default_instance_,
      MakeSocketResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeSocketResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeSocketResponse));
  GetStartupActivityStatusRequest_descriptor_ = file->message_type(221);
  static const int GetStartupActivityStatusRequest_offsets_[1] = {
  };
  GetStartupActivityStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStartupActivityStatusRequest_descriptor_,
      GetStartupActivityStatusRequest::default_instance_,
      GetStartupActivityStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStartupActivityStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStartupActivityStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStartupActivityStatusRequest));
  GetStartupActivityStatusResponse_descriptor_ = file->message_type(222);
  static const int GetStartupActivityStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStartupActivityStatusResponse, error_code_),
  };
  GetStartupActivityStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStartupActivityStatusResponse_descriptor_,
      GetStartupActivityStatusResponse::default_instance_,
      GetStartupActivityStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStartupActivityStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStartupActivityStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStartupActivityStatusResponse));
  StartupActivityStatus_descriptor_ = file->message_type(223);
  static const int StartupActivityStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatus, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatus, start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatus, end_sec_),
  };
  StartupActivityStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartupActivityStatus_descriptor_,
      StartupActivityStatus::default_instance_,
      StartupActivityStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartupActivityStatus));
  StartupActivityStatusNotify_descriptor_ = file->message_type(224);
  static const int StartupActivityStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatusNotify, status_),
  };
  StartupActivityStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartupActivityStatusNotify_descriptor_,
      StartupActivityStatusNotify::default_instance_,
      StartupActivityStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartupActivityStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartupActivityStatusNotify));
  GetGuildCrystalStatusRequest_descriptor_ = file->message_type(225);
  static const int GetGuildCrystalStatusRequest_offsets_[1] = {
  };
  GetGuildCrystalStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildCrystalStatusRequest_descriptor_,
      GetGuildCrystalStatusRequest::default_instance_,
      GetGuildCrystalStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCrystalStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCrystalStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildCrystalStatusRequest));
  GetGuildCrystalStatusResponse_descriptor_ = file->message_type(226);
  static const int GetGuildCrystalStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCrystalStatusResponse, error_code_),
  };
  GetGuildCrystalStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildCrystalStatusResponse_descriptor_,
      GetGuildCrystalStatusResponse::default_instance_,
      GetGuildCrystalStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCrystalStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCrystalStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildCrystalStatusResponse));
  GuildStartCrystalTowerActivityRequest_descriptor_ = file->message_type(227);
  static const int GuildStartCrystalTowerActivityRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityRequest, tower_quality_),
  };
  GuildStartCrystalTowerActivityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildStartCrystalTowerActivityRequest_descriptor_,
      GuildStartCrystalTowerActivityRequest::default_instance_,
      GuildStartCrystalTowerActivityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildStartCrystalTowerActivityRequest));
  GuildStartCrystalTowerActivityResponse_descriptor_ = file->message_type(228);
  static const int GuildStartCrystalTowerActivityResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityResponse, error_code_),
  };
  GuildStartCrystalTowerActivityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildStartCrystalTowerActivityResponse_descriptor_,
      GuildStartCrystalTowerActivityResponse::default_instance_,
      GuildStartCrystalTowerActivityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildStartCrystalTowerActivityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildStartCrystalTowerActivityResponse));
  GuildDonateRequest_descriptor_ = file->message_type(229);
  static const int GuildDonateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateRequest, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateRequest, money_num_),
  };
  GuildDonateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDonateRequest_descriptor_,
      GuildDonateRequest::default_instance_,
      GuildDonateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDonateRequest));
  GuildDonateResponse_descriptor_ = file->message_type(230);
  static const int GuildDonateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateResponse, error_code_),
  };
  GuildDonateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDonateResponse_descriptor_,
      GuildDonateResponse::default_instance_,
      GuildDonateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDonateResponse));
  GuildContribNotify_descriptor_ = file->message_type(231);
  static const int GuildContribNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildContribNotify, guild_contrib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildContribNotify, guild_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildContribNotify, guild_money_),
  };
  GuildContribNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildContribNotify_descriptor_,
      GuildContribNotify::default_instance_,
      GuildContribNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildContribNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildContribNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildContribNotify));
  GuildCrystalTowerActivityNotify_descriptor_ = file->message_type(232);
  static const int GuildCrystalTowerActivityNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityNotify, activity_data_),
  };
  GuildCrystalTowerActivityNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCrystalTowerActivityNotify_descriptor_,
      GuildCrystalTowerActivityNotify::default_instance_,
      GuildCrystalTowerActivityNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCrystalTowerActivityNotify));
  PickGuildCrystalRewardRequest_descriptor_ = file->message_type(233);
  static const int PickGuildCrystalRewardRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardRequest, item_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardRequest, finish_collect_),
  };
  PickGuildCrystalRewardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickGuildCrystalRewardRequest_descriptor_,
      PickGuildCrystalRewardRequest::default_instance_,
      PickGuildCrystalRewardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickGuildCrystalRewardRequest));
  PickGuildCrystalRewardResponse_descriptor_ = file->message_type(234);
  static const int PickGuildCrystalRewardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardResponse, error_code_),
  };
  PickGuildCrystalRewardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickGuildCrystalRewardResponse_descriptor_,
      PickGuildCrystalRewardResponse::default_instance_,
      PickGuildCrystalRewardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickGuildCrystalRewardResponse));
  PickGuildCrystalRewardNotify_descriptor_ = file->message_type(235);
  static const int PickGuildCrystalRewardNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardNotify, rewards_),
  };
  PickGuildCrystalRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickGuildCrystalRewardNotify_descriptor_,
      PickGuildCrystalRewardNotify::default_instance_,
      PickGuildCrystalRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickGuildCrystalRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickGuildCrystalRewardNotify));
  QueryYouliMapDataRequest_descriptor_ = file->message_type(236);
  static const int QueryYouliMapDataRequest_offsets_[1] = {
  };
  QueryYouliMapDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryYouliMapDataRequest_descriptor_,
      QueryYouliMapDataRequest::default_instance_,
      QueryYouliMapDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryYouliMapDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryYouliMapDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryYouliMapDataRequest));
  QueryYouliMapDataResponse_descriptor_ = file->message_type(237);
  static const int QueryYouliMapDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryYouliMapDataResponse, error_code_),
  };
  QueryYouliMapDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryYouliMapDataResponse_descriptor_,
      QueryYouliMapDataResponse::default_instance_,
      QueryYouliMapDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryYouliMapDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryYouliMapDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryYouliMapDataResponse));
  YouliMapDataNotify_descriptor_ = file->message_type(238);
  static const int YouliMapDataNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDataNotify, map_data_),
  };
  YouliMapDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapDataNotify_descriptor_,
      YouliMapDataNotify::default_instance_,
      YouliMapDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapDataNotify));
  YouliMapDiceRequest_descriptor_ = file->message_type(239);
  static const int YouliMapDiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceRequest, dice_number_),
  };
  YouliMapDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapDiceRequest_descriptor_,
      YouliMapDiceRequest::default_instance_,
      YouliMapDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapDiceRequest));
  YouliMapDiceResponse_descriptor_ = file->message_type(240);
  static const int YouliMapDiceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceResponse, error_code_),
  };
  YouliMapDiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapDiceResponse_descriptor_,
      YouliMapDiceResponse::default_instance_,
      YouliMapDiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapDiceResponse));
  YouliMapAutoDiceRequest_descriptor_ = file->message_type(241);
  static const int YouliMapAutoDiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceRequest, type_),
  };
  YouliMapAutoDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapAutoDiceRequest_descriptor_,
      YouliMapAutoDiceRequest::default_instance_,
      YouliMapAutoDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapAutoDiceRequest));
  YouliMapAutoDiceResponse_descriptor_ = file->message_type(242);
  static const int YouliMapAutoDiceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceResponse, error_code_),
  };
  YouliMapAutoDiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapAutoDiceResponse_descriptor_,
      YouliMapAutoDiceResponse::default_instance_,
      YouliMapAutoDiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapAutoDiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapAutoDiceResponse));
  YouliMapDiceNotify_descriptor_ = file->message_type(243);
  static const int YouliMapDiceNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceNotify, dice_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceNotify, get_youli_),
  };
  YouliMapDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapDiceNotify_descriptor_,
      YouliMapDiceNotify::default_instance_,
      YouliMapDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapDiceNotify));
  YouliMapResetMapRequest_descriptor_ = file->message_type(244);
  static const int YouliMapResetMapRequest_offsets_[1] = {
  };
  YouliMapResetMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapResetMapRequest_descriptor_,
      YouliMapResetMapRequest::default_instance_,
      YouliMapResetMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapResetMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapResetMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapResetMapRequest));
  YouliMapResetMapResponse_descriptor_ = file->message_type(245);
  static const int YouliMapResetMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapResetMapResponse, error_code_),
  };
  YouliMapResetMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouliMapResetMapResponse_descriptor_,
      YouliMapResetMapResponse::default_instance_,
      YouliMapResetMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapResetMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouliMapResetMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouliMapResetMapResponse));
  CheckGuildCircleRequest_descriptor_ = file->message_type(246);
  static const int CheckGuildCircleRequest_offsets_[1] = {
  };
  CheckGuildCircleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckGuildCircleRequest_descriptor_,
      CheckGuildCircleRequest::default_instance_,
      CheckGuildCircleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckGuildCircleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckGuildCircleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckGuildCircleRequest));
  CheckGuildCircleResponse_descriptor_ = file->message_type(247);
  static const int CheckGuildCircleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckGuildCircleResponse, error_code_),
  };
  CheckGuildCircleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckGuildCircleResponse_descriptor_,
      CheckGuildCircleResponse::default_instance_,
      CheckGuildCircleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckGuildCircleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckGuildCircleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckGuildCircleResponse));
  TakeGiftRequest_descriptor_ = file->message_type(248);
  static const int TakeGiftRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftRequest, gift_flag_),
  };
  TakeGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeGiftRequest_descriptor_,
      TakeGiftRequest::default_instance_,
      TakeGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeGiftRequest));
  TakeGiftResponse_descriptor_ = file->message_type(249);
  static const int TakeGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftResponse, error_code_),
  };
  TakeGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeGiftResponse_descriptor_,
      TakeGiftResponse::default_instance_,
      TakeGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeGiftResponse));
  CreateTeamRequest_descriptor_ = file->message_type(250);
  static const int CreateTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRequest, team_info_),
  };
  CreateTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeamRequest_descriptor_,
      CreateTeamRequest::default_instance_,
      CreateTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeamRequest));
  CreateTeamResponse_descriptor_ = file->message_type(251);
  static const int CreateTeamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamResponse, team_info_),
  };
  CreateTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeamResponse_descriptor_,
      CreateTeamResponse::default_instance_,
      CreateTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeamResponse));
  SearchTeamRequest_descriptor_ = file->message_type(252);
  static const int SearchTeamRequest_offsets_[1] = {
  };
  SearchTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchTeamRequest_descriptor_,
      SearchTeamRequest::default_instance_,
      SearchTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchTeamRequest));
  SearchTeamResponse_descriptor_ = file->message_type(253);
  static const int SearchTeamResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamResponse, team_info_),
  };
  SearchTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchTeamResponse_descriptor_,
      SearchTeamResponse::default_instance_,
      SearchTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchTeamResponse));
  TeamLineupSetRequest_descriptor_ = file->message_type(254);
  static const int TeamLineupSetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetRequest, team_battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetRequest, fighter_info_),
  };
  TeamLineupSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamLineupSetRequest_descriptor_,
      TeamLineupSetRequest::default_instance_,
      TeamLineupSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamLineupSetRequest));
  TeamLineupSetResponse_descriptor_ = file->message_type(255);
  static const int TeamLineupSetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetResponse, team_info_),
  };
  TeamLineupSetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamLineupSetResponse_descriptor_,
      TeamLineupSetResponse::default_instance_,
      TeamLineupSetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLineupSetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamLineupSetResponse));
  TeamSettingModifyRequest_descriptor_ = file->message_type(256);
  static const int TeamSettingModifyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyRequest, team_info_),
  };
  TeamSettingModifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSettingModifyRequest_descriptor_,
      TeamSettingModifyRequest::default_instance_,
      TeamSettingModifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSettingModifyRequest));
  TeamSettingModifyResponse_descriptor_ = file->message_type(257);
  static const int TeamSettingModifyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyResponse, team_info_),
  };
  TeamSettingModifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSettingModifyResponse_descriptor_,
      TeamSettingModifyResponse::default_instance_,
      TeamSettingModifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSettingModifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSettingModifyResponse));
  TeamOperationRequest_descriptor_ = file->message_type(258);
  static const int TeamOperationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationRequest, object_guid_),
  };
  TeamOperationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamOperationRequest_descriptor_,
      TeamOperationRequest::default_instance_,
      TeamOperationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamOperationRequest));
  TeamOperationResponse_descriptor_ = file->message_type(259);
  static const int TeamOperationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationResponse, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationResponse, team_info_),
  };
  TeamOperationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamOperationResponse_descriptor_,
      TeamOperationResponse::default_instance_,
      TeamOperationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamOperationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamOperationResponse));
  ApplyJoinTeamRequest_descriptor_ = file->message_type(260);
  static const int ApplyJoinTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRequest, team_id_),
  };
  ApplyJoinTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamRequest_descriptor_,
      ApplyJoinTeamRequest::default_instance_,
      ApplyJoinTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamRequest));
  ApplyJoinTeamResponse_descriptor_ = file->message_type(261);
  static const int ApplyJoinTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamResponse, error_code_),
  };
  ApplyJoinTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamResponse_descriptor_,
      ApplyJoinTeamResponse::default_instance_,
      ApplyJoinTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamResponse));
  ApplyJoinTeamListNotify_descriptor_ = file->message_type(262);
  static const int ApplyJoinTeamListNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamListNotify, applier_),
  };
  ApplyJoinTeamListNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamListNotify_descriptor_,
      ApplyJoinTeamListNotify::default_instance_,
      ApplyJoinTeamListNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamListNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamListNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamListNotify));
  ApplyJoinTeamReplyRequest_descriptor_ = file->message_type(263);
  static const int ApplyJoinTeamReplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyRequest, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyRequest, result_),
  };
  ApplyJoinTeamReplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamReplyRequest_descriptor_,
      ApplyJoinTeamReplyRequest::default_instance_,
      ApplyJoinTeamReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamReplyRequest));
  ApplyJoinTeamReplyResponse_descriptor_ = file->message_type(264);
  static const int ApplyJoinTeamReplyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyResponse, error_code_),
  };
  ApplyJoinTeamReplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamReplyResponse_descriptor_,
      ApplyJoinTeamReplyResponse::default_instance_,
      ApplyJoinTeamReplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamReplyResponse));
  ApplyJoinTeamReplyNotify_descriptor_ = file->message_type(265);
  static const int ApplyJoinTeamReplyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyNotify, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyNotify, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyNotify, result_),
  };
  ApplyJoinTeamReplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamReplyNotify_descriptor_,
      ApplyJoinTeamReplyNotify::default_instance_,
      ApplyJoinTeamReplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamReplyNotify));
  InviteJoinTeamRequest_descriptor_ = file->message_type(266);
  static const int InviteJoinTeamRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRequest, object_guid_),
  };
  InviteJoinTeamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamRequest_descriptor_,
      InviteJoinTeamRequest::default_instance_,
      InviteJoinTeamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamRequest));
  InviteJoinTeamResponse_descriptor_ = file->message_type(267);
  static const int InviteJoinTeamResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamResponse, error_code_),
  };
  InviteJoinTeamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamResponse_descriptor_,
      InviteJoinTeamResponse::default_instance_,
      InviteJoinTeamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamResponse));
  InviteJoinTeamNotify_descriptor_ = file->message_type(268);
  static const int InviteJoinTeamNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, inviter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, team_id_),
  };
  InviteJoinTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamNotify_descriptor_,
      InviteJoinTeamNotify::default_instance_,
      InviteJoinTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamNotify));
  InviteJoinTeamReplyRequest_descriptor_ = file->message_type(269);
  static const int InviteJoinTeamReplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyRequest, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyRequest, result_),
  };
  InviteJoinTeamReplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamReplyRequest_descriptor_,
      InviteJoinTeamReplyRequest::default_instance_,
      InviteJoinTeamReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamReplyRequest));
  InviteJoinTeamReplyResponse_descriptor_ = file->message_type(270);
  static const int InviteJoinTeamReplyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyResponse, error_code_),
  };
  InviteJoinTeamReplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamReplyResponse_descriptor_,
      InviteJoinTeamReplyResponse::default_instance_,
      InviteJoinTeamReplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamReplyResponse));
  InviteJoinTeamReplyNotify_descriptor_ = file->message_type(271);
  static const int InviteJoinTeamReplyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyNotify, error_code_),
  };
  InviteJoinTeamReplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamReplyNotify_descriptor_,
      InviteJoinTeamReplyNotify::default_instance_,
      InviteJoinTeamReplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamReplyNotify));
  GetTeamDetailInfoRequest_descriptor_ = file->message_type(272);
  static const int GetTeamDetailInfoRequest_offsets_[1] = {
  };
  GetTeamDetailInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTeamDetailInfoRequest_descriptor_,
      GetTeamDetailInfoRequest::default_instance_,
      GetTeamDetailInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamDetailInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTeamDetailInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTeamDetailInfoRequest));
  RecruitTeamMemberRequest_descriptor_ = file->message_type(273);
  static const int RecruitTeamMemberRequest_offsets_[1] = {
  };
  RecruitTeamMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecruitTeamMemberRequest_descriptor_,
      RecruitTeamMemberRequest::default_instance_,
      RecruitTeamMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitTeamMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitTeamMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecruitTeamMemberRequest));
  TeamPlayerKickedOutNotify_descriptor_ = file->message_type(274);
  static const int TeamPlayerKickedOutNotify_offsets_[1] = {
  };
  TeamPlayerKickedOutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPlayerKickedOutNotify_descriptor_,
      TeamPlayerKickedOutNotify::default_instance_,
      TeamPlayerKickedOutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerKickedOutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerKickedOutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPlayerKickedOutNotify));
  RecruitTeamMemberResponse_descriptor_ = file->message_type(275);
  static const int RecruitTeamMemberResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitTeamMemberResponse, nearby_player_),
  };
  RecruitTeamMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecruitTeamMemberResponse_descriptor_,
      RecruitTeamMemberResponse::default_instance_,
      RecruitTeamMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitTeamMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecruitTeamMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecruitTeamMemberResponse));
  TeamInfoUpdateNotify_descriptor_ = file->message_type(276);
  static const int TeamInfoUpdateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoUpdateNotify, team_info_),
  };
  TeamInfoUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfoUpdateNotify_descriptor_,
      TeamInfoUpdateNotify::default_instance_,
      TeamInfoUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfoUpdateNotify));
  SyncTeamInfoNotify_descriptor_ = file->message_type(277);
  static const int SyncTeamInfoNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, sync_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, member_guid_),
  };
  SyncTeamInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncTeamInfoNotify_descriptor_,
      SyncTeamInfoNotify::default_instance_,
      SyncTeamInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTeamInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncTeamInfoNotify));
  GetArenaInfoRequest_descriptor_ = file->message_type(278);
  static const int GetArenaInfoRequest_offsets_[1] = {
  };
  GetArenaInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetArenaInfoRequest_descriptor_,
      GetArenaInfoRequest::default_instance_,
      GetArenaInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetArenaInfoRequest));
  UpdateArenaInfoNotify_descriptor_ = file->message_type(279);
  static const int UpdateArenaInfoNotify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, self_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, top_ten_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, challenge_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, is_box_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, time_need_to_next_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, left_challenge_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, already_buy_times_today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, time_need_to_new_challenge_),
  };
  UpdateArenaInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateArenaInfoNotify_descriptor_,
      UpdateArenaInfoNotify::default_instance_,
      UpdateArenaInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArenaInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateArenaInfoNotify));
  GetArenaRankListRequest_descriptor_ = file->message_type(280);
  static const int GetArenaRankListRequest_offsets_[1] = {
  };
  GetArenaRankListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetArenaRankListRequest_descriptor_,
      GetArenaRankListRequest::default_instance_,
      GetArenaRankListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetArenaRankListRequest));
  GetArenaRankListResponse_descriptor_ = file->message_type(281);
  static const int GetArenaRankListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListResponse, rank_list_),
  };
  GetArenaRankListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetArenaRankListResponse_descriptor_,
      GetArenaRankListResponse::default_instance_,
      GetArenaRankListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetArenaRankListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetArenaRankListResponse));
  ChallengePlayerRequest_descriptor_ = file->message_type(282);
  static const int ChallengePlayerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerRequest, self_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerRequest, defender_info_),
  };
  ChallengePlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengePlayerRequest_descriptor_,
      ChallengePlayerRequest::default_instance_,
      ChallengePlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengePlayerRequest));
  ChallengePlayerResponse_descriptor_ = file->message_type(283);
  static const int ChallengePlayerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerResponse, is_win_),
  };
  ChallengePlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengePlayerResponse_descriptor_,
      ChallengePlayerResponse::default_instance_,
      ChallengePlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengePlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengePlayerResponse));
  TakeTreasureBoxRequest_descriptor_ = file->message_type(284);
  static const int TakeTreasureBoxRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxRequest, box_id_),
  };
  TakeTreasureBoxRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTreasureBoxRequest_descriptor_,
      TakeTreasureBoxRequest::default_instance_,
      TakeTreasureBoxRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTreasureBoxRequest));
  TakeTreasureBoxResponse_descriptor_ = file->message_type(285);
  static const int TakeTreasureBoxResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxResponse, error_code_),
  };
  TakeTreasureBoxResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTreasureBoxResponse_descriptor_,
      TakeTreasureBoxResponse::default_instance_,
      TakeTreasureBoxResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTreasureBoxResponse));
  ArenaSelfNoticeNotify_descriptor_ = file->message_type(286);
  static const int ArenaSelfNoticeNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, notice_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, challenger_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, challenger_new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, fight_key_),
  };
  ArenaSelfNoticeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaSelfNoticeNotify_descriptor_,
      ArenaSelfNoticeNotify::default_instance_,
      ArenaSelfNoticeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaSelfNoticeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaSelfNoticeNotify));
  ArenaPublicNoticeNotify_descriptor_ = file->message_type(287);
  static const int ArenaPublicNoticeNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, notice_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, challenger_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, cont_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, challenger_new_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, fight_key_),
  };
  ArenaPublicNoticeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPublicNoticeNotify_descriptor_,
      ArenaPublicNoticeNotify::default_instance_,
      ArenaPublicNoticeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPublicNoticeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPublicNoticeNotify));
  ArenaRecentMessageNotify_descriptor_ = file->message_type(288);
  static const int ArenaRecentMessageNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecentMessageNotify, self_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecentMessageNotify, arena_msg_),
  };
  ArenaRecentMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRecentMessageNotify_descriptor_,
      ArenaRecentMessageNotify::default_instance_,
      ArenaRecentMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecentMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecentMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRecentMessageNotify));
  PublicNoticeNotify_descriptor_ = file->message_type(289);
  static const int PublicNoticeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicNoticeNotify, notice_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicNoticeNotify, int_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicNoticeNotify, str_arg_),
  };
  PublicNoticeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublicNoticeNotify_descriptor_,
      PublicNoticeNotify::default_instance_,
      PublicNoticeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicNoticeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicNoticeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublicNoticeNotify));
  GetOnlineTimeRequest_descriptor_ = file->message_type(290);
  static const int GetOnlineTimeRequest_offsets_[1] = {
  };
  GetOnlineTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineTimeRequest_descriptor_,
      GetOnlineTimeRequest::default_instance_,
      GetOnlineTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineTimeRequest));
  TimeBonusNotify_descriptor_ = file->message_type(291);
  static const int TimeBonusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBonusNotify, time_need_for_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBonusNotify, bonus_id_),
  };
  TimeBonusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeBonusNotify_descriptor_,
      TimeBonusNotify::default_instance_,
      TimeBonusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBonusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeBonusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeBonusNotify));
  TakeTimeBonusRequest_descriptor_ = file->message_type(292);
  static const int TakeTimeBonusRequest_offsets_[1] = {
  };
  TakeTimeBonusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTimeBonusRequest_descriptor_,
      TakeTimeBonusRequest::default_instance_,
      TakeTimeBonusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTimeBonusRequest));
  TakeTimeBonusResponse_descriptor_ = file->message_type(293);
  static const int TakeTimeBonusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusResponse, item_),
  };
  TakeTimeBonusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTimeBonusResponse_descriptor_,
      TakeTimeBonusResponse::default_instance_,
      TakeTimeBonusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTimeBonusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTimeBonusResponse));
  GetInstanceWantedListInfoRequest_descriptor_ = file->message_type(294);
  static const int GetInstanceWantedListInfoRequest_offsets_[1] = {
  };
  GetInstanceWantedListInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceWantedListInfoRequest_descriptor_,
      GetInstanceWantedListInfoRequest::default_instance_,
      GetInstanceWantedListInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceWantedListInfoRequest));
  GetInstanceWantedListInfoResponse_descriptor_ = file->message_type(295);
  static const int GetInstanceWantedListInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoResponse, instance_wanted_info_),
  };
  GetInstanceWantedListInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceWantedListInfoResponse_descriptor_,
      GetInstanceWantedListInfoResponse::default_instance_,
      GetInstanceWantedListInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceWantedListInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceWantedListInfoResponse));
  DoInstanceWantedOnceRequest_descriptor_ = file->message_type(296);
  static const int DoInstanceWantedOnceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceRequest, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceRequest, card_index_),
  };
  DoInstanceWantedOnceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoInstanceWantedOnceRequest_descriptor_,
      DoInstanceWantedOnceRequest::default_instance_,
      DoInstanceWantedOnceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoInstanceWantedOnceRequest));
  DoInstanceWantedOnceResponse_descriptor_ = file->message_type(297);
  static const int DoInstanceWantedOnceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceResponse, instance_info_),
  };
  DoInstanceWantedOnceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoInstanceWantedOnceResponse_descriptor_,
      DoInstanceWantedOnceResponse::default_instance_,
      DoInstanceWantedOnceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoInstanceWantedOnceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoInstanceWantedOnceResponse));
  FastInstanceWantedRequest_descriptor_ = file->message_type(298);
  static const int FastInstanceWantedRequest_offsets_[1] = {
  };
  FastInstanceWantedRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastInstanceWantedRequest_descriptor_,
      FastInstanceWantedRequest::default_instance_,
      FastInstanceWantedRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastInstanceWantedRequest));
  FastInstanceWantedResponse_descriptor_ = file->message_type(299);
  static const int FastInstanceWantedResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedResponse, instance_info_),
  };
  FastInstanceWantedResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastInstanceWantedResponse_descriptor_,
      FastInstanceWantedResponse::default_instance_,
      FastInstanceWantedResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastInstanceWantedResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastInstanceWantedResponse));
  InstanceWantedAllResetRequest_descriptor_ = file->message_type(300);
  static const int InstanceWantedAllResetRequest_offsets_[1] = {
  };
  InstanceWantedAllResetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedAllResetRequest_descriptor_,
      InstanceWantedAllResetRequest::default_instance_,
      InstanceWantedAllResetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedAllResetRequest));
  InstanceWantedAllResetResponse_descriptor_ = file->message_type(301);
  static const int InstanceWantedAllResetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetResponse, instance_info_),
  };
  InstanceWantedAllResetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedAllResetResponse_descriptor_,
      InstanceWantedAllResetResponse::default_instance_,
      InstanceWantedAllResetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedAllResetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedAllResetResponse));
  InstanceWantedResetCostRequest_descriptor_ = file->message_type(302);
  static const int InstanceWantedResetCostRequest_offsets_[1] = {
  };
  InstanceWantedResetCostRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedResetCostRequest_descriptor_,
      InstanceWantedResetCostRequest::default_instance_,
      InstanceWantedResetCostRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedResetCostRequest));
  InstanceWantedResetCostResponse_descriptor_ = file->message_type(303);
  static const int InstanceWantedResetCostResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostResponse, need_diamond_),
  };
  InstanceWantedResetCostResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedResetCostResponse_descriptor_,
      InstanceWantedResetCostResponse::default_instance_,
      InstanceWantedResetCostResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedResetCostResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedResetCostResponse));
  OpenMonsterExpBuffRequest_descriptor_ = file->message_type(304);
  static const int OpenMonsterExpBuffRequest_offsets_[1] = {
  };
  OpenMonsterExpBuffRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenMonsterExpBuffRequest_descriptor_,
      OpenMonsterExpBuffRequest::default_instance_,
      OpenMonsterExpBuffRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenMonsterExpBuffRequest));
  OpenMonsterExpBuffResponse_descriptor_ = file->message_type(305);
  static const int OpenMonsterExpBuffResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffResponse, left_can_take_times_),
  };
  OpenMonsterExpBuffResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenMonsterExpBuffResponse_descriptor_,
      OpenMonsterExpBuffResponse::default_instance_,
      OpenMonsterExpBuffResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenMonsterExpBuffResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenMonsterExpBuffResponse));
  TakeMonsterExpBuffRequest_descriptor_ = file->message_type(306);
  static const int TakeMonsterExpBuffRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffRequest, take_times_),
  };
  TakeMonsterExpBuffRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeMonsterExpBuffRequest_descriptor_,
      TakeMonsterExpBuffRequest::default_instance_,
      TakeMonsterExpBuffRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeMonsterExpBuffRequest));
  TakeMonsterExpBuffResponse_descriptor_ = file->message_type(307);
  static const int TakeMonsterExpBuffResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffResponse, left_monster_exp_buff_times_),
  };
  TakeMonsterExpBuffResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeMonsterExpBuffResponse_descriptor_,
      TakeMonsterExpBuffResponse::default_instance_,
      TakeMonsterExpBuffResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeMonsterExpBuffResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeMonsterExpBuffResponse));
  TeamMemberOpenMonsterExpBuffNotify_descriptor_ = file->message_type(308);
  static const int TeamMemberOpenMonsterExpBuffNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberOpenMonsterExpBuffNotify, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberOpenMonsterExpBuffNotify, left_can_take_times_),
  };
  TeamMemberOpenMonsterExpBuffNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberOpenMonsterExpBuffNotify_descriptor_,
      TeamMemberOpenMonsterExpBuffNotify::default_instance_,
      TeamMemberOpenMonsterExpBuffNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberOpenMonsterExpBuffNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberOpenMonsterExpBuffNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberOpenMonsterExpBuffNotify));
  GetLivenessInfoRequest_descriptor_ = file->message_type(309);
  static const int GetLivenessInfoRequest_offsets_[1] = {
  };
  GetLivenessInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLivenessInfoRequest_descriptor_,
      GetLivenessInfoRequest::default_instance_,
      GetLivenessInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLivenessInfoRequest));
  GetLivenessInfoResponse_descriptor_ = file->message_type(310);
  static const int GetLivenessInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, liveness_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, liveness_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, award_list_),
  };
  GetLivenessInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLivenessInfoResponse_descriptor_,
      GetLivenessInfoResponse::default_instance_,
      GetLivenessInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLivenessInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLivenessInfoResponse));
  TakeLivenessAwardRequest_descriptor_ = file->message_type(311);
  static const int TakeLivenessAwardRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardRequest, award_id_),
  };
  TakeLivenessAwardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeLivenessAwardRequest_descriptor_,
      TakeLivenessAwardRequest::default_instance_,
      TakeLivenessAwardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeLivenessAwardRequest));
  TakeLivenessAwardResponse_descriptor_ = file->message_type(312);
  static const int TakeLivenessAwardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardResponse, error_code_),
  };
  TakeLivenessAwardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeLivenessAwardResponse_descriptor_,
      TakeLivenessAwardResponse::default_instance_,
      TakeLivenessAwardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeLivenessAwardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeLivenessAwardResponse));
  LivenessUpdateNotify_descriptor_ = file->message_type(313);
  static const int LivenessUpdateNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessUpdateNotify, liveness_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessUpdateNotify, liveness_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessUpdateNotify, award_list_),
  };
  LivenessUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivenessUpdateNotify_descriptor_,
      LivenessUpdateNotify::default_instance_,
      LivenessUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivenessUpdateNotify));
  GetPlayerConfigRequest_descriptor_ = file->message_type(314);
  static const int GetPlayerConfigRequest_offsets_[1] = {
  };
  GetPlayerConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerConfigRequest_descriptor_,
      GetPlayerConfigRequest::default_instance_,
      GetPlayerConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerConfigRequest));
  SetPlayerConfigRequest_descriptor_ = file->message_type(315);
  static const int SetPlayerConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigRequest, config_list_),
  };
  SetPlayerConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayerConfigRequest_descriptor_,
      SetPlayerConfigRequest::default_instance_,
      SetPlayerConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayerConfigRequest));
  SetPlayerConfigResponse_descriptor_ = file->message_type(316);
  static const int SetPlayerConfigResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigResponse, error_code_),
  };
  SetPlayerConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPlayerConfigResponse_descriptor_,
      SetPlayerConfigResponse::default_instance_,
      SetPlayerConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPlayerConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPlayerConfigResponse));
  GetPlayerConfigResponse_descriptor_ = file->message_type(317);
  static const int GetPlayerConfigResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigResponse, config_list_),
  };
  GetPlayerConfigResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPlayerConfigResponse_descriptor_,
      GetPlayerConfigResponse::default_instance_,
      GetPlayerConfigResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayerConfigResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPlayerConfigResponse));
  FightWithOtherPlayerRequest_descriptor_ = file->message_type(318);
  static const int FightWithOtherPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerRequest, object_guid_),
  };
  FightWithOtherPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightWithOtherPlayerRequest_descriptor_,
      FightWithOtherPlayerRequest::default_instance_,
      FightWithOtherPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightWithOtherPlayerRequest));
  FightWithOtherPlayerResponse_descriptor_ = file->message_type(319);
  static const int FightWithOtherPlayerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerResponse, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerResponse, is_object_in_team_),
  };
  FightWithOtherPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightWithOtherPlayerResponse_descriptor_,
      FightWithOtherPlayerResponse::default_instance_,
      FightWithOtherPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightWithOtherPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightWithOtherPlayerResponse));
  SendFightInvitationNotify_descriptor_ = file->message_type(320);
  static const int SendFightInvitationNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, sender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, sender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, sender_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, is_sender_team_leader_),
  };
  SendFightInvitationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFightInvitationNotify_descriptor_,
      SendFightInvitationNotify::default_instance_,
      SendFightInvitationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightInvitationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFightInvitationNotify));
  FightInviteReplyRequest_descriptor_ = file->message_type(321);
  static const int FightInviteReplyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyRequest, inviter_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyRequest, agree_to_fight_),
  };
  FightInviteReplyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightInviteReplyRequest_descriptor_,
      FightInviteReplyRequest::default_instance_,
      FightInviteReplyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightInviteReplyRequest));
  FightInviteReplyResponse_descriptor_ = file->message_type(322);
  static const int FightInviteReplyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyResponse, error_code_),
  };
  FightInviteReplyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightInviteReplyResponse_descriptor_,
      FightInviteReplyResponse::default_instance_,
      FightInviteReplyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightInviteReplyResponse));
  FightInviteReplyNotify_descriptor_ = file->message_type(323);
  static const int FightInviteReplyNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyNotify, is_agree_to_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyNotify, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyNotify, is_object_in_team_),
  };
  FightInviteReplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightInviteReplyNotify_descriptor_,
      FightInviteReplyNotify::default_instance_,
      FightInviteReplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInviteReplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightInviteReplyNotify));
  UpdateMonsterBuffNotify_descriptor_ = file->message_type(324);
  static const int UpdateMonsterBuffNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMonsterBuffNotify, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMonsterBuffNotify, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMonsterBuffNotify, left_time_),
  };
  UpdateMonsterBuffNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMonsterBuffNotify_descriptor_,
      UpdateMonsterBuffNotify::default_instance_,
      UpdateMonsterBuffNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMonsterBuffNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMonsterBuffNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMonsterBuffNotify));
  TeamChannelMemberNotify_descriptor_ = file->message_type(325);
  static const int TeamChannelMemberNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, team_leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, object_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, item_),
  };
  TeamChannelMemberNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamChannelMemberNotify_descriptor_,
      TeamChannelMemberNotify::default_instance_,
      TeamChannelMemberNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChannelMemberNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamChannelMemberNotify));
  UpdateBitRequest_descriptor_ = file->message_type(326);
  static const int UpdateBitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, value_),
  };
  UpdateBitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBitRequest_descriptor_,
      UpdateBitRequest::default_instance_,
      UpdateBitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBitRequest));
  UpdateBitResponse_descriptor_ = file->message_type(327);
  static const int UpdateBitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitResponse, error_code_),
  };
  UpdateBitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBitResponse_descriptor_,
      UpdateBitResponse::default_instance_,
      UpdateBitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBitResponse));
  UpdateBitNotify_descriptor_ = file->message_type(328);
  static const int UpdateBitNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitNotify, bit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitNotify, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitNotify, value_),
  };
  UpdateBitNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBitNotify_descriptor_,
      UpdateBitNotify::default_instance_,
      UpdateBitNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBitNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBitNotify));
  PublishQuestionNotify_descriptor_ = file->message_type(329);
  static const int PublishQuestionNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishQuestionNotify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishQuestionNotify, question_desc_),
  };
  PublishQuestionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishQuestionNotify_descriptor_,
      PublishQuestionNotify::default_instance_,
      PublishQuestionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishQuestionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishQuestionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishQuestionNotify));
  SendQAResultNotify_descriptor_ = file->message_type(330);
  static const int SendQAResultNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, winner_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, top_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, question_),
  };
  SendQAResultNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendQAResultNotify_descriptor_,
      SendQAResultNotify::default_instance_,
      SendQAResultNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendQAResultNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendQAResultNotify));
  PlayerPhyStrengthUpdate_descriptor_ = file->message_type(331);
  static const int PlayerPhyStrengthUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthUpdate, phy_strength_info_),
  };
  PlayerPhyStrengthUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPhyStrengthUpdate_descriptor_,
      PlayerPhyStrengthUpdate::default_instance_,
      PlayerPhyStrengthUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPhyStrengthUpdate));
  FollowBuddyRequest_descriptor_ = file->message_type(332);
  static const int FollowBuddyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyRequest, buddy_guid_),
  };
  FollowBuddyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowBuddyRequest_descriptor_,
      FollowBuddyRequest::default_instance_,
      FollowBuddyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowBuddyRequest));
  FollowBuddyResponse_descriptor_ = file->message_type(333);
  static const int FollowBuddyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyResponse, buddy_guid_),
  };
  FollowBuddyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowBuddyResponse_descriptor_,
      FollowBuddyResponse::default_instance_,
      FollowBuddyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowBuddyResponse));
  FollowBuddyNotify_descriptor_ = file->message_type(334);
  static const int FollowBuddyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyNotify, owner_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyNotify, buddy_guid_),
  };
  FollowBuddyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowBuddyNotify_descriptor_,
      FollowBuddyNotify::default_instance_,
      FollowBuddyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowBuddyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowBuddyNotify));
  ServerStatusRequest_descriptor_ = file->message_type(335);
  static const int ServerStatusRequest_offsets_[1] = {
  };
  ServerStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatusRequest_descriptor_,
      ServerStatusRequest::default_instance_,
      ServerStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatusRequest));
  ServerStatusResponse_descriptor_ = file->message_type(336);
  static const int ServerStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, avg_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, max_delay_),
  };
  ServerStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerStatusResponse_descriptor_,
      ServerStatusResponse::default_instance_,
      ServerStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerStatusResponse));
  ActLuckyOnceRequest_descriptor_ = file->message_type(337);
  static const int ActLuckyOnceRequest_offsets_[1] = {
  };
  ActLuckyOnceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActLuckyOnceRequest_descriptor_,
      ActLuckyOnceRequest::default_instance_,
      ActLuckyOnceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActLuckyOnceRequest));
  ActLuckyOnceResponse_descriptor_ = file->message_type(338);
  static const int ActLuckyOnceResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, bonus_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, left_lucky_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, id_),
  };
  ActLuckyOnceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActLuckyOnceResponse_descriptor_,
      ActLuckyOnceResponse::default_instance_,
      ActLuckyOnceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActLuckyOnceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActLuckyOnceResponse));
  ActExchangeItemRequest_descriptor_ = file->message_type(339);
  static const int ActExchangeItemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemRequest, item_id_),
  };
  ActExchangeItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActExchangeItemRequest_descriptor_,
      ActExchangeItemRequest::default_instance_,
      ActExchangeItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActExchangeItemRequest));
  ActExchangeItemResponse_descriptor_ = file->message_type(340);
  static const int ActExchangeItemResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemResponse, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemResponse, item_count_),
  };
  ActExchangeItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActExchangeItemResponse_descriptor_,
      ActExchangeItemResponse::default_instance_,
      ActExchangeItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActExchangeItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActExchangeItemResponse));
  GetTitleListRequest_descriptor_ = file->message_type(341);
  static const int GetTitleListRequest_offsets_[1] = {
  };
  GetTitleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitleListRequest_descriptor_,
      GetTitleListRequest::default_instance_,
      GetTitleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitleListRequest));
  GetTitleListResponse_descriptor_ = file->message_type(342);
  static const int GetTitleListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResponse, titles_),
  };
  GetTitleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitleListResponse_descriptor_,
      GetTitleListResponse::default_instance_,
      GetTitleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitleListResponse));
  SetRoleTitleRequest_descriptor_ = file->message_type(343);
  static const int SetRoleTitleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleRequest, title_),
  };
  SetRoleTitleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRoleTitleRequest_descriptor_,
      SetRoleTitleRequest::default_instance_,
      SetRoleTitleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRoleTitleRequest));
  SetRoleTitleResponse_descriptor_ = file->message_type(344);
  static const int SetRoleTitleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleResponse, error_code_),
  };
  SetRoleTitleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRoleTitleResponse_descriptor_,
      SetRoleTitleResponse::default_instance_,
      SetRoleTitleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRoleTitleResponse));
  SetRoleTitleNotify_descriptor_ = file->message_type(345);
  static const int SetRoleTitleNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleNotify, title_),
  };
  SetRoleTitleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRoleTitleNotify_descriptor_,
      SetRoleTitleNotify::default_instance_,
      SetRoleTitleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoleTitleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRoleTitleNotify));
  GetRoleTitleNotify_descriptor_ = file->message_type(346);
  static const int GetRoleTitleNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleTitleNotify, add_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleTitleNotify, remove_title_),
  };
  GetRoleTitleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoleTitleNotify_descriptor_,
      GetRoleTitleNotify::default_instance_,
      GetRoleTitleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleTitleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoleTitleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoleTitleNotify));
  GetOfflineGiftRequest_descriptor_ = file->message_type(347);
  static const int GetOfflineGiftRequest_offsets_[1] = {
  };
  GetOfflineGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOfflineGiftRequest_descriptor_,
      GetOfflineGiftRequest::default_instance_,
      GetOfflineGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOfflineGiftRequest));
  GetOfflineGiftResponse_descriptor_ = file->message_type(348);
  static const int GetOfflineGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineGiftResponse, error_code_),
  };
  GetOfflineGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOfflineGiftResponse_descriptor_,
      GetOfflineGiftResponse::default_instance_,
      GetOfflineGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOfflineGiftResponse));
  GetOpenedActivityRequest_descriptor_ = file->message_type(349);
  static const int GetOpenedActivityRequest_offsets_[1] = {
  };
  GetOpenedActivityRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOpenedActivityRequest_descriptor_,
      GetOpenedActivityRequest::default_instance_,
      GetOpenedActivityRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOpenedActivityRequest));
  GetOpenedActivityResponse_descriptor_ = file->message_type(350);
  static const int GetOpenedActivityResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityResponse, activities_),
  };
  GetOpenedActivityResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOpenedActivityResponse_descriptor_,
      GetOpenedActivityResponse::default_instance_,
      GetOpenedActivityResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOpenedActivityResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOpenedActivityResponse));
  ActivityChangeNotify_descriptor_ = file->message_type(351);
  static const int ActivityChangeNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeNotify, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeNotify, status_),
  };
  ActivityChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityChangeNotify_descriptor_,
      ActivityChangeNotify::default_instance_,
      ActivityChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityChangeNotify));
  PracticeExpRequest_descriptor_ = file->message_type(352);
  static const int PracticeExpRequest_offsets_[1] = {
  };
  PracticeExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeExpRequest_descriptor_,
      PracticeExpRequest::default_instance_,
      PracticeExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeExpRequest));
  PracticeExpResponse_descriptor_ = file->message_type(353);
  static const int PracticeExpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpResponse, error_code_),
  };
  PracticeExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeExpResponse_descriptor_,
      PracticeExpResponse::default_instance_,
      PracticeExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeExpResponse));
  PracticeExpNotify_descriptor_ = file->message_type(354);
  static const int PracticeExpNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpNotify, exp_),
  };
  PracticeExpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeExpNotify_descriptor_,
      PracticeExpNotify::default_instance_,
      PracticeExpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeExpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeExpNotify));
  YinglingSoulInfo_descriptor_ = file->message_type(355);
  static const int YinglingSoulInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingSoulInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingSoulInfo, soul_),
  };
  YinglingSoulInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingSoulInfo_descriptor_,
      YinglingSoulInfo::default_instance_,
      YinglingSoulInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingSoulInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingSoulInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingSoulInfo));
  SoulExchangeRequest_descriptor_ = file->message_type(356);
  static const int SoulExchangeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeRequest, exchange_flag_),
  };
  SoulExchangeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulExchangeRequest_descriptor_,
      SoulExchangeRequest::default_instance_,
      SoulExchangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulExchangeRequest));
  SoulExchangeResponse_descriptor_ = file->message_type(357);
  static const int SoulExchangeResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, yingling_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, stone_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, feather_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, lingli_exchange_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, item_exchange_count_),
  };
  SoulExchangeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulExchangeResponse_descriptor_,
      SoulExchangeResponse::default_instance_,
      SoulExchangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulExchangeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulExchangeResponse));
  LobbyCustomPassInfoRequest_descriptor_ = file->message_type(358);
  static const int LobbyCustomPassInfoRequest_offsets_[1] = {
  };
  LobbyCustomPassInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyCustomPassInfoRequest_descriptor_,
      LobbyCustomPassInfoRequest::default_instance_,
      LobbyCustomPassInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyCustomPassInfoRequest));
  CustomPassWaitInfo_descriptor_ = file->message_type(359);
  static const int CustomPassWaitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomPassWaitInfo, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomPassWaitInfo, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomPassWaitInfo, wait_player_count_),
  };
  CustomPassWaitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomPassWaitInfo_descriptor_,
      CustomPassWaitInfo::default_instance_,
      CustomPassWaitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomPassWaitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomPassWaitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomPassWaitInfo));
  LobbyCustomPassInfoResponse_descriptor_ = file->message_type(360);
  static const int LobbyCustomPassInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoResponse, all_pass_info_),
  };
  LobbyCustomPassInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyCustomPassInfoResponse_descriptor_,
      LobbyCustomPassInfoResponse::default_instance_,
      LobbyCustomPassInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyCustomPassInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyCustomPassInfoResponse));
  PlayerEnterPassRoomRequest_descriptor_ = file->message_type(361);
  static const int PlayerEnterPassRoomRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomRequest, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomRequest, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomRequest, enter_or_refrash_or_leave_),
  };
  PlayerEnterPassRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterPassRoomRequest_descriptor_,
      PlayerEnterPassRoomRequest::default_instance_,
      PlayerEnterPassRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterPassRoomRequest));
  RoomInfo_descriptor_ = file->message_type(362);
  static const int RoomInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, room_owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, is_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, current_player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, max_player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, leader_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, leader_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, grade_id_),
  };
  RoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInfo_descriptor_,
      RoomInfo::default_instance_,
      RoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInfo));
  PlayerEnterPassRoomResponse_descriptor_ = file->message_type(363);
  static const int PlayerEnterPassRoomResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, room_info_),
  };
  PlayerEnterPassRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterPassRoomResponse_descriptor_,
      PlayerEnterPassRoomResponse::default_instance_,
      PlayerEnterPassRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterPassRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterPassRoomResponse));
  PlayerCreatePassRoomRequest_descriptor_ = file->message_type(364);
  static const int PlayerCreatePassRoomRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, create_or_enter_or_random_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, max_player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, pwd_),
  };
  PlayerCreatePassRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCreatePassRoomRequest_descriptor_,
      PlayerCreatePassRoomRequest::default_instance_,
      PlayerCreatePassRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCreatePassRoomRequest));
  PlayerCreatePassRoomResponse_descriptor_ = file->message_type(365);
  static const int PlayerCreatePassRoomResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, grade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, team_info_),
  };
  PlayerCreatePassRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCreatePassRoomResponse_descriptor_,
      PlayerCreatePassRoomResponse::default_instance_,
      PlayerCreatePassRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCreatePassRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCreatePassRoomResponse));
  OperateRoomRequest_descriptor_ = file->message_type(366);
  static const int OperateRoomRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, ready_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, new_pwd_),
  };
  OperateRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateRoomRequest_descriptor_,
      OperateRoomRequest::default_instance_,
      OperateRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateRoomRequest));
  OperateRoomResponse_descriptor_ = file->message_type(367);
  static const int OperateRoomResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomResponse, operation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomResponse, team_info_),
  };
  OperateRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateRoomResponse_descriptor_,
      OperateRoomResponse::default_instance_,
      OperateRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateRoomResponse));
  PassRoomInfoUpdateNotify_descriptor_ = file->message_type(368);
  static const int PassRoomInfoUpdateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInfoUpdateNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInfoUpdateNotify, team_info_),
  };
  PassRoomInfoUpdateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassRoomInfoUpdateNotify_descriptor_,
      PassRoomInfoUpdateNotify::default_instance_,
      PassRoomInfoUpdateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInfoUpdateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInfoUpdateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassRoomInfoUpdateNotify));
  InvitePlayerJoinRoomRequest_descriptor_ = file->message_type(369);
  static const int InvitePlayerJoinRoomRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomRequest, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomRequest, is_fast_invite_),
  };
  InvitePlayerJoinRoomRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitePlayerJoinRoomRequest_descriptor_,
      InvitePlayerJoinRoomRequest::default_instance_,
      InvitePlayerJoinRoomRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitePlayerJoinRoomRequest));
  InvitePlayerJoinRoomResponse_descriptor_ = file->message_type(370);
  static const int InvitePlayerJoinRoomResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomResponse, error_code_),
  };
  InvitePlayerJoinRoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitePlayerJoinRoomResponse_descriptor_,
      InvitePlayerJoinRoomResponse::default_instance_,
      InvitePlayerJoinRoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerJoinRoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitePlayerJoinRoomResponse));
  PassRoomInviteNotify_descriptor_ = file->message_type(371);
  static const int PassRoomInviteNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, leader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, grade_id_),
  };
  PassRoomInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassRoomInviteNotify_descriptor_,
      PassRoomInviteNotify::default_instance_,
      PassRoomInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassRoomInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassRoomInviteNotify));
  PassLobbyPlayerListRequest_descriptor_ = file->message_type(372);
  static const int PassLobbyPlayerListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListRequest, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListRequest, grade_id_),
  };
  PassLobbyPlayerListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassLobbyPlayerListRequest_descriptor_,
      PassLobbyPlayerListRequest::default_instance_,
      PassLobbyPlayerListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassLobbyPlayerListRequest));
  PassLobbyPlayerListResponse_descriptor_ = file->message_type(373);
  static const int PassLobbyPlayerListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListResponse, player_list_),
  };
  PassLobbyPlayerListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassLobbyPlayerListResponse_descriptor_,
      PassLobbyPlayerListResponse::default_instance_,
      PassLobbyPlayerListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassLobbyPlayerListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassLobbyPlayerListResponse));
  PlayerKickFormRoomNotify_descriptor_ = file->message_type(374);
  static const int PlayerKickFormRoomNotify_offsets_[1] = {
  };
  PlayerKickFormRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerKickFormRoomNotify_descriptor_,
      PlayerKickFormRoomNotify::default_instance_,
      PlayerKickFormRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKickFormRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKickFormRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerKickFormRoomNotify));
  LeaderStartRoomInstanceRequest_descriptor_ = file->message_type(375);
  static const int LeaderStartRoomInstanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceRequest, room_id_),
  };
  LeaderStartRoomInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderStartRoomInstanceRequest_descriptor_,
      LeaderStartRoomInstanceRequest::default_instance_,
      LeaderStartRoomInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderStartRoomInstanceRequest));
  LeaderStartRoomInstanceResponse_descriptor_ = file->message_type(376);
  static const int LeaderStartRoomInstanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceResponse, error_code_),
  };
  LeaderStartRoomInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderStartRoomInstanceResponse_descriptor_,
      LeaderStartRoomInstanceResponse::default_instance_,
      LeaderStartRoomInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderStartRoomInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderStartRoomInstanceResponse));
  HitYellowDuckRequest_descriptor_ = file->message_type(377);
  static const int HitYellowDuckRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckRequest, coin_),
  };
  HitYellowDuckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitYellowDuckRequest_descriptor_,
      HitYellowDuckRequest::default_instance_,
      HitYellowDuckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitYellowDuckRequest));
  HitYellowDuckResponse_descriptor_ = file->message_type(378);
  static const int HitYellowDuckResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckResponse, error_code_),
  };
  HitYellowDuckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitYellowDuckResponse_descriptor_,
      HitYellowDuckResponse::default_instance_,
      HitYellowDuckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitYellowDuckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitYellowDuckResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitConnectionRequest_descriptor_, &InitConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitConnectionResponse_descriptor_, &InitConnectionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatRequest_descriptor_, &HeartBeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatResponse_descriptor_, &HeartBeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UrlParam_descriptor_, &UrlParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginRequest_descriptor_, &AccountLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginResponse_descriptor_, &AccountLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountReloginNotify_descriptor_, &AccountReloginNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerRequest_descriptor_, &CreatePlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerResponse_descriptor_, &CreatePlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNameRequest_descriptor_, &RandomNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomNameResponse_descriptor_, &RandomNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePlayerRequest_descriptor_, &DeletePlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePlayerResponse_descriptor_, &DeletePlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginRequest_descriptor_, &PlayerLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoginResponse_descriptor_, &PlayerLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerShutdownNotify_descriptor_, &ServerShutdownNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterMapRequest_descriptor_, &EnterMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterMapResponse_descriptor_, &EnterMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportRequest_descriptor_, &TransportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportResponse_descriptor_, &TransportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeleportRequest_descriptor_, &TeleportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeleportResponse_descriptor_, &TeleportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterInstanceRequest_descriptor_, &EnterInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterInstanceResponse_descriptor_, &EnterInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveInstanceRequest_descriptor_, &LeaveInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveInstanceResponse_descriptor_, &LeaveInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceItemRequest_descriptor_, &GetInstanceItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceItemResponse_descriptor_, &GetInstanceItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListPassInstanceRequest_descriptor_, &ListPassInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListPassInstanceResponse_descriptor_, &ListPassInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceDetailRequest_descriptor_, &GetInstanceDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceDetailResponse_descriptor_, &GetInstanceDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassInstanceNotify_descriptor_, &PassInstanceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoRequest_descriptor_, &PlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoResponse_descriptor_, &PlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyDetailInfoRequest_descriptor_, &BuddyDetailInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyDetailInfoResponse_descriptor_, &BuddyDetailInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrChangeNotify_descriptor_, &AttrChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLogout_descriptor_, &PlayerLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPlayerRequest_descriptor_, &KickPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPlayerResponse_descriptor_, &KickPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPlayerNotify_descriptor_, &KickPlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingListRequest_descriptor_, &GetYinglingListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingListResponse_descriptor_, &GetYinglingListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyError_descriptor_, &NotifyError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingHiringStatusReq_descriptor_, &GetYinglingHiringStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingHiringStatusNotify_descriptor_, &YinglingHiringStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenYinglingHiringSlotReq_descriptor_, &OpenYinglingHiringSlotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenYinglingHiringSlotNtf_descriptor_, &OpenYinglingHiringSlotNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenYinglingSlotReq_descriptor_, &OpenYinglingSlotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenYinglingSlotResponse_descriptor_, &OpenYinglingSlotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenYinglingSlotNtf_descriptor_, &OpenYinglingSlotNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefeshYinglingHiringListReq_descriptor_, &RefeshYinglingHiringListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoRefeshYinglingHiringListReq_descriptor_, &AutoRefeshYinglingHiringListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoRefeshYinglingHiringListRep_descriptor_, &AutoRefeshYinglingHiringListRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HiringYingling_descriptor_, &HiringYingling::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefeshYinglingHiringListNtf_descriptor_, &RefeshYinglingHiringListNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HireYinglingRequest_descriptor_, &HireYinglingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLingliRequest_descriptor_, &GetLingliRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvertYinglingRequest_descriptor_, &ConvertYinglingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LingliUpdateNotify_descriptor_, &LingliUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddYinglingNotify_descriptor_, &AddYinglingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelHiringYinglingNotify_descriptor_, &DelHiringYinglingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireYinglingRequest_descriptor_, &FireYinglingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelYinglingNotify_descriptor_, &DelYinglingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingComboDataRequest_descriptor_, &GetYinglingComboDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingComboDataResponse_descriptor_, &GetYinglingComboDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetYinglingComboDataNotify_descriptor_, &GetYinglingComboDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeYinglingComboRequest_descriptor_, &UpgradeYinglingComboRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeYinglingComboResponse_descriptor_, &UpgradeYinglingComboResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveStartRequest_descriptor_, &MoveStartRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveStartResponse_descriptor_, &MoveStartResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveStartNotify_descriptor_, &MoveStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterViewNotify_descriptor_, &EnterViewNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveViewNotify_descriptor_, &LeaveViewNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStatusNotify_descriptor_, &GameStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeMapNotify_descriptor_, &ChangeMapNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChooseAutoFightNPCRequest_descriptor_, &ChooseAutoFightNPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChooseAutoFightNPCResponse_descriptor_, &ChooseAutoFightNPCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightMonsterRequest_descriptor_, &AutoFightMonsterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightMonsterResponse_descriptor_, &AutoFightMonsterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAutoFightRequest_descriptor_, &StopAutoFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAutoFightResponse_descriptor_, &StopAutoFightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightMonsterUpdateNotify_descriptor_, &AutoFightMonsterUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpAutoFightRequest_descriptor_, &SpeedUpAutoFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpAutoFightResponse_descriptor_, &SpeedUpAutoFightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerViewRequest_descriptor_, &GetPlayerViewRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerViewResponse_descriptor_, &GetPlayerViewResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSkillListRequest_descriptor_, &GetSkillListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSkillListResponse_descriptor_, &GetSkillListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBattleSkillListRequest_descriptor_, &GetBattleSkillListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBattleSkillListResponse_descriptor_, &GetBattleSkillListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBattleSkillNotify_descriptor_, &UpdateBattleSkillNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPoolChangeNotify_descriptor_, &SkillPoolChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSkillNotify_descriptor_, &UpdateSkillNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeBattleSkillRequest_descriptor_, &UpgradeBattleSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeBattleSkillResponse_descriptor_, &UpgradeBattleSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeBattleSkillNotify_descriptor_, &UpgradeBattleSkillNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_, &UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateYouliNotify_descriptor_, &UpdateYouliNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEquipDetailRequest_descriptor_, &GetEquipDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEquipDetailResponse_descriptor_, &GetEquipDetailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLineupListRequest_descriptor_, &GetLineupListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLineupListResponse_descriptor_, &GetLineupListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLineupFightCapacityRequest_descriptor_, &GetLineupFightCapacityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLineupFightCapacityResponse_descriptor_, &GetLineupFightCapacityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineUpOperationRequest_descriptor_, &LineUpOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineUpOperationResponse_descriptor_, &LineUpOperationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnequipAllRequest_descriptor_, &UnequipAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnequipAllResponse_descriptor_, &UnequipAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerUpdateNotify_descriptor_, &PlayerUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSkillRequest_descriptor_, &EquipSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSkillResponse_descriptor_, &EquipSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnloadSkillRequest_descriptor_, &UnloadSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnloadSkillResponse_descriptor_, &UnloadSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InjectSkillExpRequest_descriptor_, &InjectSkillExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InjectSkillExpResponse_descriptor_, &InjectSkillExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeSkillRequest_descriptor_, &PracticeSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeSkillResponse_descriptor_, &PracticeSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedupPracticeSkillRequest_descriptor_, &SpeedupPracticeSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedupPracticeSkillResponse_descriptor_, &SpeedupPracticeSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopPracticeSkillRequest_descriptor_, &StopPracticeSkillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopPracticeSkillResponse_descriptor_, &StopPracticeSkillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeSkillNotify_descriptor_, &PracticeSkillNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelUpNotify_descriptor_, &LevelUpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMoneyNotify_descriptor_, &UpdateMoneyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateItemNotify_descriptor_, &UpdateItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateExpNotify_descriptor_, &UpdateExpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestListRequest_descriptor_, &GetQuestListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestsListResponse_descriptor_, &GetQuestsListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptQuestRequest_descriptor_, &AcceptQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishQuestRequest_descriptor_, &FinishQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelQuestRequest_descriptor_, &CancelQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestActionRequest_descriptor_, &QuestActionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestsNotify_descriptor_, &QuestsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptXunluoQuestRequest_descriptor_, &AcceptXunluoQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptXunluoQuestResponse_descriptor_, &AcceptXunluoQuestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyInjectSoulRequest_descriptor_, &BuddyInjectSoulRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyInjectSoulResponse_descriptor_, &BuddyInjectSoulResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddySpaceTimeStatusRequest_descriptor_, &BuddySpaceTimeStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddySpaceTimeStatus_descriptor_, &BuddySpaceTimeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddySpaceTimeStatusResponse_descriptor_, &BuddySpaceTimeStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyChanllengeSpaceTimeRequest_descriptor_, &BuddyChanllengeSpaceTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyChanllengeSpaceTimeResponse_descriptor_, &BuddyChanllengeSpaceTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddySoulUpdateNotify_descriptor_, &BuddySoulUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentShengxingOpenRequest_descriptor_, &EquipmentShengxingOpenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentShengxingOpenResponse_descriptor_, &EquipmentShengxingOpenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentShengxingRequest_descriptor_, &EquipmentShengxingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentShengxingResponse_descriptor_, &EquipmentShengxingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XilianData_descriptor_, &XilianData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentXilianStatusRequest_descriptor_, &EquipmentXilianStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentXilianStatusResponse_descriptor_, &EquipmentXilianStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentXilianRequest_descriptor_, &EquipmentXilianRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentXilianResponse_descriptor_, &EquipmentXilianResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentLockXilianAttrRequest_descriptor_, &EquipmentLockXilianAttrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentLockXilianAttrResponse_descriptor_, &EquipmentLockXilianAttrResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentInheritRequest_descriptor_, &EquipmentInheritRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentInheritResponse_descriptor_, &EquipmentInheritResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRecycleRequest_descriptor_, &EquipmentRecycleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentRecycleResponse_descriptor_, &EquipmentRecycleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyDetailUpdateNotify_descriptor_, &BuddyDetailUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemListNotify_descriptor_, &BagItemListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUpdateNotify_descriptor_, &EquipUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownRequest_descriptor_, &RoleCoolDownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownNotify_descriptor_, &RoleCoolDownNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownClearRequest_descriptor_, &RoleCoolDownClearRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownClearResponse_descriptor_, &RoleCoolDownClearResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyLimitRequest_descriptor_, &RoleDailyLimitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyLimitUpdateNotify_descriptor_, &RoleDailyLimitUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseLimitCountRequest_descriptor_, &PurchaseLimitCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurchaseLimitCountResponse_descriptor_, &PurchaseLimitCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuestListRequest_descriptor_, &DailyQuestListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuestListNotify_descriptor_, &DailyQuestListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshDailyQuestRequest_descriptor_, &RefreshDailyQuestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshDailyQuestResponse_descriptor_, &RefreshDailyQuestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeCodeRequest_descriptor_, &ExchangeCodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeCodeResponse_descriptor_, &ExchangeCodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagsRequest_descriptor_, &PlayerFlagsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagsResponse_descriptor_, &PlayerFlagsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSetFlagRequest_descriptor_, &PlayerSetFlagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSetFlagResponse_descriptor_, &PlayerSetFlagResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagUpdateNotify_descriptor_, &PlayerFlagUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHideNpcRequest_descriptor_, &PlayerHideNpcRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHideNpcResponse_descriptor_, &PlayerHideNpcResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHideNpcUpdateNotify_descriptor_, &PlayerHideNpcUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartCollectRequest_descriptor_, &StartCollectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartCollectResponse_descriptor_, &StartCollectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishCollectRequest_descriptor_, &FinishCollectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishCollectResponse_descriptor_, &FinishCollectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTrainAttributeRequest_descriptor_, &GetTrainAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTrainAttributeResponse_descriptor_, &GetTrainAttributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainAttributeRequest_descriptor_, &TrainAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainAttributeResponse_descriptor_, &TrainAttributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainAttributeNotify_descriptor_, &TrainAttributeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTrainAttributeRequest_descriptor_, &SaveTrainAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTrainAttributeResponse_descriptor_, &SaveTrainAttributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfoUpdateNotify_descriptor_, &GuildInfoUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInfoUpdateNotify_descriptor_, &VipInfoUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionLimitRequest_descriptor_, &FunctionLimitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionLimitResponse_descriptor_, &FunctionLimitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionLimitUpdateNotify_descriptor_, &FunctionLimitUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyGiftInfoRequest_descriptor_, &GetDailyGiftInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDailyGiftInfoResponse_descriptor_, &GetDailyGiftInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyGiftInfoUpdateNotify_descriptor_, &DailyGiftInfoUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyDailyGiftRequest_descriptor_, &ApplyDailyGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyDailyGiftResponse_descriptor_, &ApplyDailyGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStackableOnlineGiftRequest_descriptor_, &GetStackableOnlineGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StackableOnlineGift_descriptor_, &StackableOnlineGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStackableOnlineGiftResponse_descriptor_, &GetStackableOnlineGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StackableOnlineGiftUpdateNotify_descriptor_, &StackableOnlineGiftUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyStackableOnlineGiftRequest_descriptor_, &ApplyStackableOnlineGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyStackableOnlineGiftResponse_descriptor_, &ApplyStackableOnlineGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnouncementNotify_descriptor_, &AnnouncementNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemUpgradeRequest_descriptor_, &GemUpgradeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemUpgrateResponse_descriptor_, &GemUpgrateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemInsertRequest_descriptor_, &GemInsertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemInsertResponse_descriptor_, &GemInsertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemRemoveRequest_descriptor_, &GemRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemRemoveResponse_descriptor_, &GemRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeSocketRequest_descriptor_, &MakeSocketRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeSocketResponse_descriptor_, &MakeSocketResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStartupActivityStatusRequest_descriptor_, &GetStartupActivityStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStartupActivityStatusResponse_descriptor_, &GetStartupActivityStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartupActivityStatus_descriptor_, &StartupActivityStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartupActivityStatusNotify_descriptor_, &StartupActivityStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildCrystalStatusRequest_descriptor_, &GetGuildCrystalStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildCrystalStatusResponse_descriptor_, &GetGuildCrystalStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildStartCrystalTowerActivityRequest_descriptor_, &GuildStartCrystalTowerActivityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildStartCrystalTowerActivityResponse_descriptor_, &GuildStartCrystalTowerActivityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDonateRequest_descriptor_, &GuildDonateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDonateResponse_descriptor_, &GuildDonateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildContribNotify_descriptor_, &GuildContribNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCrystalTowerActivityNotify_descriptor_, &GuildCrystalTowerActivityNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickGuildCrystalRewardRequest_descriptor_, &PickGuildCrystalRewardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickGuildCrystalRewardResponse_descriptor_, &PickGuildCrystalRewardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickGuildCrystalRewardNotify_descriptor_, &PickGuildCrystalRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryYouliMapDataRequest_descriptor_, &QueryYouliMapDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryYouliMapDataResponse_descriptor_, &QueryYouliMapDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapDataNotify_descriptor_, &YouliMapDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapDiceRequest_descriptor_, &YouliMapDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapDiceResponse_descriptor_, &YouliMapDiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapAutoDiceRequest_descriptor_, &YouliMapAutoDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapAutoDiceResponse_descriptor_, &YouliMapAutoDiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapDiceNotify_descriptor_, &YouliMapDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapResetMapRequest_descriptor_, &YouliMapResetMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouliMapResetMapResponse_descriptor_, &YouliMapResetMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckGuildCircleRequest_descriptor_, &CheckGuildCircleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckGuildCircleResponse_descriptor_, &CheckGuildCircleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeGiftRequest_descriptor_, &TakeGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeGiftResponse_descriptor_, &TakeGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeamRequest_descriptor_, &CreateTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeamResponse_descriptor_, &CreateTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchTeamRequest_descriptor_, &SearchTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchTeamResponse_descriptor_, &SearchTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamLineupSetRequest_descriptor_, &TeamLineupSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamLineupSetResponse_descriptor_, &TeamLineupSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSettingModifyRequest_descriptor_, &TeamSettingModifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSettingModifyResponse_descriptor_, &TeamSettingModifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamOperationRequest_descriptor_, &TeamOperationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamOperationResponse_descriptor_, &TeamOperationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamRequest_descriptor_, &ApplyJoinTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamResponse_descriptor_, &ApplyJoinTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamListNotify_descriptor_, &ApplyJoinTeamListNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamReplyRequest_descriptor_, &ApplyJoinTeamReplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamReplyResponse_descriptor_, &ApplyJoinTeamReplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamReplyNotify_descriptor_, &ApplyJoinTeamReplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamRequest_descriptor_, &InviteJoinTeamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamResponse_descriptor_, &InviteJoinTeamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamNotify_descriptor_, &InviteJoinTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamReplyRequest_descriptor_, &InviteJoinTeamReplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamReplyResponse_descriptor_, &InviteJoinTeamReplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamReplyNotify_descriptor_, &InviteJoinTeamReplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTeamDetailInfoRequest_descriptor_, &GetTeamDetailInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecruitTeamMemberRequest_descriptor_, &RecruitTeamMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPlayerKickedOutNotify_descriptor_, &TeamPlayerKickedOutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecruitTeamMemberResponse_descriptor_, &RecruitTeamMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfoUpdateNotify_descriptor_, &TeamInfoUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncTeamInfoNotify_descriptor_, &SyncTeamInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetArenaInfoRequest_descriptor_, &GetArenaInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateArenaInfoNotify_descriptor_, &UpdateArenaInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetArenaRankListRequest_descriptor_, &GetArenaRankListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetArenaRankListResponse_descriptor_, &GetArenaRankListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengePlayerRequest_descriptor_, &ChallengePlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengePlayerResponse_descriptor_, &ChallengePlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTreasureBoxRequest_descriptor_, &TakeTreasureBoxRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTreasureBoxResponse_descriptor_, &TakeTreasureBoxResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaSelfNoticeNotify_descriptor_, &ArenaSelfNoticeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPublicNoticeNotify_descriptor_, &ArenaPublicNoticeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRecentMessageNotify_descriptor_, &ArenaRecentMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublicNoticeNotify_descriptor_, &PublicNoticeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineTimeRequest_descriptor_, &GetOnlineTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeBonusNotify_descriptor_, &TimeBonusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTimeBonusRequest_descriptor_, &TakeTimeBonusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTimeBonusResponse_descriptor_, &TakeTimeBonusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceWantedListInfoRequest_descriptor_, &GetInstanceWantedListInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceWantedListInfoResponse_descriptor_, &GetInstanceWantedListInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoInstanceWantedOnceRequest_descriptor_, &DoInstanceWantedOnceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoInstanceWantedOnceResponse_descriptor_, &DoInstanceWantedOnceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastInstanceWantedRequest_descriptor_, &FastInstanceWantedRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastInstanceWantedResponse_descriptor_, &FastInstanceWantedResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedAllResetRequest_descriptor_, &InstanceWantedAllResetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedAllResetResponse_descriptor_, &InstanceWantedAllResetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedResetCostRequest_descriptor_, &InstanceWantedResetCostRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedResetCostResponse_descriptor_, &InstanceWantedResetCostResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenMonsterExpBuffRequest_descriptor_, &OpenMonsterExpBuffRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenMonsterExpBuffResponse_descriptor_, &OpenMonsterExpBuffResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeMonsterExpBuffRequest_descriptor_, &TakeMonsterExpBuffRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeMonsterExpBuffResponse_descriptor_, &TakeMonsterExpBuffResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberOpenMonsterExpBuffNotify_descriptor_, &TeamMemberOpenMonsterExpBuffNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLivenessInfoRequest_descriptor_, &GetLivenessInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLivenessInfoResponse_descriptor_, &GetLivenessInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeLivenessAwardRequest_descriptor_, &TakeLivenessAwardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeLivenessAwardResponse_descriptor_, &TakeLivenessAwardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivenessUpdateNotify_descriptor_, &LivenessUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerConfigRequest_descriptor_, &GetPlayerConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayerConfigRequest_descriptor_, &SetPlayerConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPlayerConfigResponse_descriptor_, &SetPlayerConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPlayerConfigResponse_descriptor_, &GetPlayerConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightWithOtherPlayerRequest_descriptor_, &FightWithOtherPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightWithOtherPlayerResponse_descriptor_, &FightWithOtherPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFightInvitationNotify_descriptor_, &SendFightInvitationNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightInviteReplyRequest_descriptor_, &FightInviteReplyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightInviteReplyResponse_descriptor_, &FightInviteReplyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightInviteReplyNotify_descriptor_, &FightInviteReplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMonsterBuffNotify_descriptor_, &UpdateMonsterBuffNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamChannelMemberNotify_descriptor_, &TeamChannelMemberNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBitRequest_descriptor_, &UpdateBitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBitResponse_descriptor_, &UpdateBitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBitNotify_descriptor_, &UpdateBitNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishQuestionNotify_descriptor_, &PublishQuestionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendQAResultNotify_descriptor_, &SendQAResultNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPhyStrengthUpdate_descriptor_, &PlayerPhyStrengthUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowBuddyRequest_descriptor_, &FollowBuddyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowBuddyResponse_descriptor_, &FollowBuddyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowBuddyNotify_descriptor_, &FollowBuddyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatusRequest_descriptor_, &ServerStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerStatusResponse_descriptor_, &ServerStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActLuckyOnceRequest_descriptor_, &ActLuckyOnceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActLuckyOnceResponse_descriptor_, &ActLuckyOnceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActExchangeItemRequest_descriptor_, &ActExchangeItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActExchangeItemResponse_descriptor_, &ActExchangeItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitleListRequest_descriptor_, &GetTitleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitleListResponse_descriptor_, &GetTitleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRoleTitleRequest_descriptor_, &SetRoleTitleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRoleTitleResponse_descriptor_, &SetRoleTitleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRoleTitleNotify_descriptor_, &SetRoleTitleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoleTitleNotify_descriptor_, &GetRoleTitleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOfflineGiftRequest_descriptor_, &GetOfflineGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOfflineGiftResponse_descriptor_, &GetOfflineGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOpenedActivityRequest_descriptor_, &GetOpenedActivityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOpenedActivityResponse_descriptor_, &GetOpenedActivityResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityChangeNotify_descriptor_, &ActivityChangeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeExpRequest_descriptor_, &PracticeExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeExpResponse_descriptor_, &PracticeExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeExpNotify_descriptor_, &PracticeExpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingSoulInfo_descriptor_, &YinglingSoulInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulExchangeRequest_descriptor_, &SoulExchangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulExchangeResponse_descriptor_, &SoulExchangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyCustomPassInfoRequest_descriptor_, &LobbyCustomPassInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomPassWaitInfo_descriptor_, &CustomPassWaitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyCustomPassInfoResponse_descriptor_, &LobbyCustomPassInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterPassRoomRequest_descriptor_, &PlayerEnterPassRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInfo_descriptor_, &RoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterPassRoomResponse_descriptor_, &PlayerEnterPassRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCreatePassRoomRequest_descriptor_, &PlayerCreatePassRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCreatePassRoomResponse_descriptor_, &PlayerCreatePassRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateRoomRequest_descriptor_, &OperateRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateRoomResponse_descriptor_, &OperateRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassRoomInfoUpdateNotify_descriptor_, &PassRoomInfoUpdateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitePlayerJoinRoomRequest_descriptor_, &InvitePlayerJoinRoomRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitePlayerJoinRoomResponse_descriptor_, &InvitePlayerJoinRoomResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassRoomInviteNotify_descriptor_, &PassRoomInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassLobbyPlayerListRequest_descriptor_, &PassLobbyPlayerListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassLobbyPlayerListResponse_descriptor_, &PassLobbyPlayerListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerKickFormRoomNotify_descriptor_, &PlayerKickFormRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderStartRoomInstanceRequest_descriptor_, &LeaderStartRoomInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderStartRoomInstanceResponse_descriptor_, &LeaderStartRoomInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitYellowDuckRequest_descriptor_, &HitYellowDuckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitYellowDuckResponse_descriptor_, &HitYellowDuckResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fclient_2eproto() {
  delete InitConnectionRequest::default_instance_;
  delete InitConnectionRequest_reflection_;
  delete InitConnectionResponse::default_instance_;
  delete InitConnectionResponse_reflection_;
  delete HeartBeatRequest::default_instance_;
  delete HeartBeatRequest_reflection_;
  delete HeartBeatResponse::default_instance_;
  delete HeartBeatResponse_reflection_;
  delete UrlParam::default_instance_;
  delete UrlParam_reflection_;
  delete AccountLoginRequest::default_instance_;
  delete AccountLoginRequest_reflection_;
  delete AccountLoginResponse::default_instance_;
  delete AccountLoginResponse_reflection_;
  delete AccountReloginNotify::default_instance_;
  delete AccountReloginNotify_reflection_;
  delete CreatePlayerRequest::default_instance_;
  delete CreatePlayerRequest_reflection_;
  delete CreatePlayerResponse::default_instance_;
  delete CreatePlayerResponse_reflection_;
  delete RandomNameRequest::default_instance_;
  delete RandomNameRequest_reflection_;
  delete RandomNameResponse::default_instance_;
  delete RandomNameResponse_reflection_;
  delete DeletePlayerRequest::default_instance_;
  delete DeletePlayerRequest_reflection_;
  delete DeletePlayerResponse::default_instance_;
  delete DeletePlayerResponse_reflection_;
  delete PlayerLoginRequest::default_instance_;
  delete PlayerLoginRequest_reflection_;
  delete PlayerLoginResponse::default_instance_;
  delete PlayerLoginResponse_reflection_;
  delete ServerShutdownNotify::default_instance_;
  delete ServerShutdownNotify_reflection_;
  delete EnterMapRequest::default_instance_;
  delete EnterMapRequest_reflection_;
  delete EnterMapResponse::default_instance_;
  delete EnterMapResponse_reflection_;
  delete TransportRequest::default_instance_;
  delete TransportRequest_reflection_;
  delete TransportResponse::default_instance_;
  delete TransportResponse_reflection_;
  delete TeleportRequest::default_instance_;
  delete TeleportRequest_reflection_;
  delete TeleportResponse::default_instance_;
  delete TeleportResponse_reflection_;
  delete EnterInstanceRequest::default_instance_;
  delete EnterInstanceRequest_reflection_;
  delete EnterInstanceResponse::default_instance_;
  delete EnterInstanceResponse_reflection_;
  delete LeaveInstanceRequest::default_instance_;
  delete LeaveInstanceRequest_reflection_;
  delete LeaveInstanceResponse::default_instance_;
  delete LeaveInstanceResponse_reflection_;
  delete GetInstanceItemRequest::default_instance_;
  delete GetInstanceItemRequest_reflection_;
  delete GetInstanceItemResponse::default_instance_;
  delete GetInstanceItemResponse_reflection_;
  delete ListPassInstanceRequest::default_instance_;
  delete ListPassInstanceRequest_reflection_;
  delete ListPassInstanceResponse::default_instance_;
  delete ListPassInstanceResponse_reflection_;
  delete GetInstanceDetailRequest::default_instance_;
  delete GetInstanceDetailRequest_reflection_;
  delete GetInstanceDetailResponse::default_instance_;
  delete GetInstanceDetailResponse_reflection_;
  delete PassInstanceNotify::default_instance_;
  delete PassInstanceNotify_reflection_;
  delete PlayerInfoRequest::default_instance_;
  delete PlayerInfoRequest_reflection_;
  delete PlayerInfoResponse::default_instance_;
  delete PlayerInfoResponse_reflection_;
  delete BuddyDetailInfoRequest::default_instance_;
  delete BuddyDetailInfoRequest_reflection_;
  delete BuddyDetailInfoResponse::default_instance_;
  delete BuddyDetailInfoResponse_reflection_;
  delete AttrChangeNotify::default_instance_;
  delete AttrChangeNotify_reflection_;
  delete PlayerLogout::default_instance_;
  delete PlayerLogout_reflection_;
  delete KickPlayerRequest::default_instance_;
  delete KickPlayerRequest_reflection_;
  delete KickPlayerResponse::default_instance_;
  delete KickPlayerResponse_reflection_;
  delete KickPlayerNotify::default_instance_;
  delete KickPlayerNotify_reflection_;
  delete GetYinglingListRequest::default_instance_;
  delete GetYinglingListRequest_reflection_;
  delete GetYinglingListResponse::default_instance_;
  delete GetYinglingListResponse_reflection_;
  delete NotifyError::default_instance_;
  delete NotifyError_reflection_;
  delete GetYinglingHiringStatusReq::default_instance_;
  delete GetYinglingHiringStatusReq_reflection_;
  delete YinglingHiringStatusNotify::default_instance_;
  delete YinglingHiringStatusNotify_reflection_;
  delete OpenYinglingHiringSlotReq::default_instance_;
  delete OpenYinglingHiringSlotReq_reflection_;
  delete OpenYinglingHiringSlotNtf::default_instance_;
  delete OpenYinglingHiringSlotNtf_reflection_;
  delete OpenYinglingSlotReq::default_instance_;
  delete OpenYinglingSlotReq_reflection_;
  delete OpenYinglingSlotResponse::default_instance_;
  delete OpenYinglingSlotResponse_reflection_;
  delete OpenYinglingSlotNtf::default_instance_;
  delete OpenYinglingSlotNtf_reflection_;
  delete RefeshYinglingHiringListReq::default_instance_;
  delete RefeshYinglingHiringListReq_reflection_;
  delete AutoRefeshYinglingHiringListReq::default_instance_;
  delete AutoRefeshYinglingHiringListReq_reflection_;
  delete AutoRefeshYinglingHiringListRep::default_instance_;
  delete AutoRefeshYinglingHiringListRep_reflection_;
  delete HiringYingling::default_instance_;
  delete HiringYingling_reflection_;
  delete RefeshYinglingHiringListNtf::default_instance_;
  delete RefeshYinglingHiringListNtf_reflection_;
  delete HireYinglingRequest::default_instance_;
  delete HireYinglingRequest_reflection_;
  delete GetLingliRequest::default_instance_;
  delete GetLingliRequest_reflection_;
  delete ConvertYinglingRequest::default_instance_;
  delete ConvertYinglingRequest_reflection_;
  delete LingliUpdateNotify::default_instance_;
  delete LingliUpdateNotify_reflection_;
  delete AddYinglingNotify::default_instance_;
  delete AddYinglingNotify_reflection_;
  delete DelHiringYinglingNotify::default_instance_;
  delete DelHiringYinglingNotify_reflection_;
  delete FireYinglingRequest::default_instance_;
  delete FireYinglingRequest_reflection_;
  delete DelYinglingNotify::default_instance_;
  delete DelYinglingNotify_reflection_;
  delete GetYinglingComboDataRequest::default_instance_;
  delete GetYinglingComboDataRequest_reflection_;
  delete GetYinglingComboDataResponse::default_instance_;
  delete GetYinglingComboDataResponse_reflection_;
  delete GetYinglingComboDataNotify::default_instance_;
  delete GetYinglingComboDataNotify_reflection_;
  delete UpgradeYinglingComboRequest::default_instance_;
  delete UpgradeYinglingComboRequest_reflection_;
  delete UpgradeYinglingComboResponse::default_instance_;
  delete UpgradeYinglingComboResponse_reflection_;
  delete MoveStartRequest::default_instance_;
  delete MoveStartRequest_reflection_;
  delete MoveStartResponse::default_instance_;
  delete MoveStartResponse_reflection_;
  delete MoveStartNotify::default_instance_;
  delete MoveStartNotify_reflection_;
  delete EnterViewNotify::default_instance_;
  delete EnterViewNotify_reflection_;
  delete LeaveViewNotify::default_instance_;
  delete LeaveViewNotify_reflection_;
  delete GameStatusNotify::default_instance_;
  delete GameStatusNotify_reflection_;
  delete ChangeMapNotify::default_instance_;
  delete ChangeMapNotify_reflection_;
  delete ChooseAutoFightNPCRequest::default_instance_;
  delete ChooseAutoFightNPCRequest_reflection_;
  delete ChooseAutoFightNPCResponse::default_instance_;
  delete ChooseAutoFightNPCResponse_reflection_;
  delete AutoFightMonsterRequest::default_instance_;
  delete AutoFightMonsterRequest_reflection_;
  delete AutoFightMonsterResponse::default_instance_;
  delete AutoFightMonsterResponse_reflection_;
  delete StopAutoFightRequest::default_instance_;
  delete StopAutoFightRequest_reflection_;
  delete StopAutoFightResponse::default_instance_;
  delete StopAutoFightResponse_reflection_;
  delete AutoFightMonsterUpdateNotify::default_instance_;
  delete AutoFightMonsterUpdateNotify_reflection_;
  delete SpeedUpAutoFightRequest::default_instance_;
  delete SpeedUpAutoFightRequest_reflection_;
  delete SpeedUpAutoFightResponse::default_instance_;
  delete SpeedUpAutoFightResponse_reflection_;
  delete GetPlayerViewRequest::default_instance_;
  delete GetPlayerViewRequest_reflection_;
  delete GetPlayerViewResponse::default_instance_;
  delete GetPlayerViewResponse_reflection_;
  delete GetSkillListRequest::default_instance_;
  delete GetSkillListRequest_reflection_;
  delete GetSkillListResponse::default_instance_;
  delete GetSkillListResponse_reflection_;
  delete GetBattleSkillListRequest::default_instance_;
  delete GetBattleSkillListRequest_reflection_;
  delete GetBattleSkillListResponse::default_instance_;
  delete GetBattleSkillListResponse_reflection_;
  delete UpdateBattleSkillNotify::default_instance_;
  delete UpdateBattleSkillNotify_reflection_;
  delete SkillPoolChangeNotify::default_instance_;
  delete SkillPoolChangeNotify_reflection_;
  delete UpdateSkillNotify::default_instance_;
  delete UpdateSkillNotify_reflection_;
  delete UpgradeBattleSkillRequest::default_instance_;
  delete UpgradeBattleSkillRequest_reflection_;
  delete UpgradeBattleSkillResponse::default_instance_;
  delete UpgradeBattleSkillResponse_reflection_;
  delete UpgradeBattleSkillNotify::default_instance_;
  delete UpgradeBattleSkillNotify_reflection_;
  delete UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance_;
  delete UpgradeBattleSkillNotify_BattleSkillLevelInfo_reflection_;
  delete UpdateYouliNotify::default_instance_;
  delete UpdateYouliNotify_reflection_;
  delete GetEquipDetailRequest::default_instance_;
  delete GetEquipDetailRequest_reflection_;
  delete GetEquipDetailResponse::default_instance_;
  delete GetEquipDetailResponse_reflection_;
  delete GetLineupListRequest::default_instance_;
  delete GetLineupListRequest_reflection_;
  delete GetLineupListResponse::default_instance_;
  delete GetLineupListResponse_reflection_;
  delete GetLineupFightCapacityRequest::default_instance_;
  delete GetLineupFightCapacityRequest_reflection_;
  delete GetLineupFightCapacityResponse::default_instance_;
  delete GetLineupFightCapacityResponse_reflection_;
  delete LineUpOperationRequest::default_instance_;
  delete LineUpOperationRequest_reflection_;
  delete LineUpOperationResponse::default_instance_;
  delete LineUpOperationResponse_reflection_;
  delete UnequipAllRequest::default_instance_;
  delete UnequipAllRequest_reflection_;
  delete UnequipAllResponse::default_instance_;
  delete UnequipAllResponse_reflection_;
  delete PlayerUpdateNotify::default_instance_;
  delete PlayerUpdateNotify_reflection_;
  delete EquipSkillRequest::default_instance_;
  delete EquipSkillRequest_reflection_;
  delete EquipSkillResponse::default_instance_;
  delete EquipSkillResponse_reflection_;
  delete UnloadSkillRequest::default_instance_;
  delete UnloadSkillRequest_reflection_;
  delete UnloadSkillResponse::default_instance_;
  delete UnloadSkillResponse_reflection_;
  delete InjectSkillExpRequest::default_instance_;
  delete InjectSkillExpRequest_reflection_;
  delete InjectSkillExpResponse::default_instance_;
  delete InjectSkillExpResponse_reflection_;
  delete PracticeSkillRequest::default_instance_;
  delete PracticeSkillRequest_reflection_;
  delete PracticeSkillResponse::default_instance_;
  delete PracticeSkillResponse_reflection_;
  delete SpeedupPracticeSkillRequest::default_instance_;
  delete SpeedupPracticeSkillRequest_reflection_;
  delete SpeedupPracticeSkillResponse::default_instance_;
  delete SpeedupPracticeSkillResponse_reflection_;
  delete StopPracticeSkillRequest::default_instance_;
  delete StopPracticeSkillRequest_reflection_;
  delete StopPracticeSkillResponse::default_instance_;
  delete StopPracticeSkillResponse_reflection_;
  delete PracticeSkillNotify::default_instance_;
  delete PracticeSkillNotify_reflection_;
  delete LevelUpNotify::default_instance_;
  delete LevelUpNotify_reflection_;
  delete UpdateMoneyNotify::default_instance_;
  delete UpdateMoneyNotify_reflection_;
  delete UpdateItemNotify::default_instance_;
  delete UpdateItemNotify_reflection_;
  delete UpdateExpNotify::default_instance_;
  delete UpdateExpNotify_reflection_;
  delete GetQuestListRequest::default_instance_;
  delete GetQuestListRequest_reflection_;
  delete GetQuestsListResponse::default_instance_;
  delete GetQuestsListResponse_reflection_;
  delete AcceptQuestRequest::default_instance_;
  delete AcceptQuestRequest_reflection_;
  delete FinishQuestRequest::default_instance_;
  delete FinishQuestRequest_reflection_;
  delete CancelQuestRequest::default_instance_;
  delete CancelQuestRequest_reflection_;
  delete QuestActionRequest::default_instance_;
  delete QuestActionRequest_reflection_;
  delete QuestsNotify::default_instance_;
  delete QuestsNotify_reflection_;
  delete AcceptXunluoQuestRequest::default_instance_;
  delete AcceptXunluoQuestRequest_reflection_;
  delete AcceptXunluoQuestResponse::default_instance_;
  delete AcceptXunluoQuestResponse_reflection_;
  delete BuddyInjectSoulRequest::default_instance_;
  delete BuddyInjectSoulRequest_reflection_;
  delete BuddyInjectSoulResponse::default_instance_;
  delete BuddyInjectSoulResponse_reflection_;
  delete BuddySpaceTimeStatusRequest::default_instance_;
  delete BuddySpaceTimeStatusRequest_reflection_;
  delete BuddySpaceTimeStatus::default_instance_;
  delete BuddySpaceTimeStatus_reflection_;
  delete BuddySpaceTimeStatusResponse::default_instance_;
  delete BuddySpaceTimeStatusResponse_reflection_;
  delete BuddyChanllengeSpaceTimeRequest::default_instance_;
  delete BuddyChanllengeSpaceTimeRequest_reflection_;
  delete BuddyChanllengeSpaceTimeResponse::default_instance_;
  delete BuddyChanllengeSpaceTimeResponse_reflection_;
  delete BuddySoulUpdateNotify::default_instance_;
  delete BuddySoulUpdateNotify_reflection_;
  delete EquipmentShengxingOpenRequest::default_instance_;
  delete EquipmentShengxingOpenRequest_reflection_;
  delete EquipmentShengxingOpenResponse::default_instance_;
  delete EquipmentShengxingOpenResponse_reflection_;
  delete EquipmentShengxingRequest::default_instance_;
  delete EquipmentShengxingRequest_reflection_;
  delete EquipmentShengxingResponse::default_instance_;
  delete EquipmentShengxingResponse_reflection_;
  delete XilianData::default_instance_;
  delete XilianData_reflection_;
  delete EquipmentXilianStatusRequest::default_instance_;
  delete EquipmentXilianStatusRequest_reflection_;
  delete EquipmentXilianStatusResponse::default_instance_;
  delete EquipmentXilianStatusResponse_reflection_;
  delete EquipmentXilianRequest::default_instance_;
  delete EquipmentXilianRequest_reflection_;
  delete EquipmentXilianResponse::default_instance_;
  delete EquipmentXilianResponse_reflection_;
  delete EquipmentLockXilianAttrRequest::default_instance_;
  delete EquipmentLockXilianAttrRequest_reflection_;
  delete EquipmentLockXilianAttrResponse::default_instance_;
  delete EquipmentLockXilianAttrResponse_reflection_;
  delete EquipmentInheritRequest::default_instance_;
  delete EquipmentInheritRequest_reflection_;
  delete EquipmentInheritResponse::default_instance_;
  delete EquipmentInheritResponse_reflection_;
  delete EquipmentRecycleRequest::default_instance_;
  delete EquipmentRecycleRequest_reflection_;
  delete EquipmentRecycleResponse::default_instance_;
  delete EquipmentRecycleResponse_reflection_;
  delete BuddyDetailUpdateNotify::default_instance_;
  delete BuddyDetailUpdateNotify_reflection_;
  delete BagItemListNotify::default_instance_;
  delete BagItemListNotify_reflection_;
  delete EquipUpdateNotify::default_instance_;
  delete EquipUpdateNotify_reflection_;
  delete RoleCoolDownRequest::default_instance_;
  delete RoleCoolDownRequest_reflection_;
  delete RoleCoolDownNotify::default_instance_;
  delete RoleCoolDownNotify_reflection_;
  delete RoleCoolDownClearRequest::default_instance_;
  delete RoleCoolDownClearRequest_reflection_;
  delete RoleCoolDownClearResponse::default_instance_;
  delete RoleCoolDownClearResponse_reflection_;
  delete RoleDailyLimitRequest::default_instance_;
  delete RoleDailyLimitRequest_reflection_;
  delete RoleDailyLimitUpdateNotify::default_instance_;
  delete RoleDailyLimitUpdateNotify_reflection_;
  delete PurchaseLimitCountRequest::default_instance_;
  delete PurchaseLimitCountRequest_reflection_;
  delete PurchaseLimitCountResponse::default_instance_;
  delete PurchaseLimitCountResponse_reflection_;
  delete DailyQuestListRequest::default_instance_;
  delete DailyQuestListRequest_reflection_;
  delete DailyQuestListNotify::default_instance_;
  delete DailyQuestListNotify_reflection_;
  delete RefreshDailyQuestRequest::default_instance_;
  delete RefreshDailyQuestRequest_reflection_;
  delete RefreshDailyQuestResponse::default_instance_;
  delete RefreshDailyQuestResponse_reflection_;
  delete ExchangeCodeRequest::default_instance_;
  delete ExchangeCodeRequest_reflection_;
  delete ExchangeCodeResponse::default_instance_;
  delete ExchangeCodeResponse_reflection_;
  delete PlayerFlagsRequest::default_instance_;
  delete PlayerFlagsRequest_reflection_;
  delete PlayerFlagsResponse::default_instance_;
  delete PlayerFlagsResponse_reflection_;
  delete PlayerSetFlagRequest::default_instance_;
  delete PlayerSetFlagRequest_reflection_;
  delete PlayerSetFlagResponse::default_instance_;
  delete PlayerSetFlagResponse_reflection_;
  delete PlayerFlagUpdateNotify::default_instance_;
  delete PlayerFlagUpdateNotify_reflection_;
  delete PlayerHideNpcRequest::default_instance_;
  delete PlayerHideNpcRequest_reflection_;
  delete PlayerHideNpcResponse::default_instance_;
  delete PlayerHideNpcResponse_reflection_;
  delete PlayerHideNpcUpdateNotify::default_instance_;
  delete PlayerHideNpcUpdateNotify_reflection_;
  delete StartCollectRequest::default_instance_;
  delete StartCollectRequest_reflection_;
  delete StartCollectResponse::default_instance_;
  delete StartCollectResponse_reflection_;
  delete FinishCollectRequest::default_instance_;
  delete FinishCollectRequest_reflection_;
  delete FinishCollectResponse::default_instance_;
  delete FinishCollectResponse_reflection_;
  delete GetTrainAttributeRequest::default_instance_;
  delete GetTrainAttributeRequest_reflection_;
  delete GetTrainAttributeResponse::default_instance_;
  delete GetTrainAttributeResponse_reflection_;
  delete TrainAttributeRequest::default_instance_;
  delete TrainAttributeRequest_reflection_;
  delete TrainAttributeResponse::default_instance_;
  delete TrainAttributeResponse_reflection_;
  delete TrainAttributeNotify::default_instance_;
  delete TrainAttributeNotify_reflection_;
  delete SaveTrainAttributeRequest::default_instance_;
  delete SaveTrainAttributeRequest_reflection_;
  delete SaveTrainAttributeResponse::default_instance_;
  delete SaveTrainAttributeResponse_reflection_;
  delete GuildInfoUpdateNotify::default_instance_;
  delete GuildInfoUpdateNotify_reflection_;
  delete VipInfoUpdateNotify::default_instance_;
  delete VipInfoUpdateNotify_reflection_;
  delete FunctionLimitRequest::default_instance_;
  delete FunctionLimitRequest_reflection_;
  delete FunctionLimitResponse::default_instance_;
  delete FunctionLimitResponse_reflection_;
  delete FunctionLimitUpdateNotify::default_instance_;
  delete FunctionLimitUpdateNotify_reflection_;
  delete GetDailyGiftInfoRequest::default_instance_;
  delete GetDailyGiftInfoRequest_reflection_;
  delete GetDailyGiftInfoResponse::default_instance_;
  delete GetDailyGiftInfoResponse_reflection_;
  delete DailyGiftInfoUpdateNotify::default_instance_;
  delete DailyGiftInfoUpdateNotify_reflection_;
  delete ApplyDailyGiftRequest::default_instance_;
  delete ApplyDailyGiftRequest_reflection_;
  delete ApplyDailyGiftResponse::default_instance_;
  delete ApplyDailyGiftResponse_reflection_;
  delete GetStackableOnlineGiftRequest::default_instance_;
  delete GetStackableOnlineGiftRequest_reflection_;
  delete StackableOnlineGift::default_instance_;
  delete StackableOnlineGift_reflection_;
  delete GetStackableOnlineGiftResponse::default_instance_;
  delete GetStackableOnlineGiftResponse_reflection_;
  delete StackableOnlineGiftUpdateNotify::default_instance_;
  delete StackableOnlineGiftUpdateNotify_reflection_;
  delete ApplyStackableOnlineGiftRequest::default_instance_;
  delete ApplyStackableOnlineGiftRequest_reflection_;
  delete ApplyStackableOnlineGiftResponse::default_instance_;
  delete ApplyStackableOnlineGiftResponse_reflection_;
  delete AnnouncementNotify::default_instance_;
  delete AnnouncementNotify_reflection_;
  delete GemUpgradeRequest::default_instance_;
  delete GemUpgradeRequest_reflection_;
  delete GemUpgrateResponse::default_instance_;
  delete GemUpgrateResponse_reflection_;
  delete GemInsertRequest::default_instance_;
  delete GemInsertRequest_reflection_;
  delete GemInsertResponse::default_instance_;
  delete GemInsertResponse_reflection_;
  delete GemRemoveRequest::default_instance_;
  delete GemRemoveRequest_reflection_;
  delete GemRemoveResponse::default_instance_;
  delete GemRemoveResponse_reflection_;
  delete MakeSocketRequest::default_instance_;
  delete MakeSocketRequest_reflection_;
  delete MakeSocketResponse::default_instance_;
  delete MakeSocketResponse_reflection_;
  delete GetStartupActivityStatusRequest::default_instance_;
  delete GetStartupActivityStatusRequest_reflection_;
  delete GetStartupActivityStatusResponse::default_instance_;
  delete GetStartupActivityStatusResponse_reflection_;
  delete StartupActivityStatus::default_instance_;
  delete StartupActivityStatus_reflection_;
  delete StartupActivityStatusNotify::default_instance_;
  delete StartupActivityStatusNotify_reflection_;
  delete GetGuildCrystalStatusRequest::default_instance_;
  delete GetGuildCrystalStatusRequest_reflection_;
  delete GetGuildCrystalStatusResponse::default_instance_;
  delete GetGuildCrystalStatusResponse_reflection_;
  delete GuildStartCrystalTowerActivityRequest::default_instance_;
  delete GuildStartCrystalTowerActivityRequest_reflection_;
  delete GuildStartCrystalTowerActivityResponse::default_instance_;
  delete GuildStartCrystalTowerActivityResponse_reflection_;
  delete GuildDonateRequest::default_instance_;
  delete GuildDonateRequest_reflection_;
  delete GuildDonateResponse::default_instance_;
  delete GuildDonateResponse_reflection_;
  delete GuildContribNotify::default_instance_;
  delete GuildContribNotify_reflection_;
  delete GuildCrystalTowerActivityNotify::default_instance_;
  delete GuildCrystalTowerActivityNotify_reflection_;
  delete PickGuildCrystalRewardRequest::default_instance_;
  delete PickGuildCrystalRewardRequest_reflection_;
  delete PickGuildCrystalRewardResponse::default_instance_;
  delete PickGuildCrystalRewardResponse_reflection_;
  delete PickGuildCrystalRewardNotify::default_instance_;
  delete PickGuildCrystalRewardNotify_reflection_;
  delete QueryYouliMapDataRequest::default_instance_;
  delete QueryYouliMapDataRequest_reflection_;
  delete QueryYouliMapDataResponse::default_instance_;
  delete QueryYouliMapDataResponse_reflection_;
  delete YouliMapDataNotify::default_instance_;
  delete YouliMapDataNotify_reflection_;
  delete YouliMapDiceRequest::default_instance_;
  delete YouliMapDiceRequest_reflection_;
  delete YouliMapDiceResponse::default_instance_;
  delete YouliMapDiceResponse_reflection_;
  delete YouliMapAutoDiceRequest::default_instance_;
  delete YouliMapAutoDiceRequest_reflection_;
  delete YouliMapAutoDiceResponse::default_instance_;
  delete YouliMapAutoDiceResponse_reflection_;
  delete YouliMapDiceNotify::default_instance_;
  delete YouliMapDiceNotify_reflection_;
  delete YouliMapResetMapRequest::default_instance_;
  delete YouliMapResetMapRequest_reflection_;
  delete YouliMapResetMapResponse::default_instance_;
  delete YouliMapResetMapResponse_reflection_;
  delete CheckGuildCircleRequest::default_instance_;
  delete CheckGuildCircleRequest_reflection_;
  delete CheckGuildCircleResponse::default_instance_;
  delete CheckGuildCircleResponse_reflection_;
  delete TakeGiftRequest::default_instance_;
  delete TakeGiftRequest_reflection_;
  delete TakeGiftResponse::default_instance_;
  delete TakeGiftResponse_reflection_;
  delete CreateTeamRequest::default_instance_;
  delete CreateTeamRequest_reflection_;
  delete CreateTeamResponse::default_instance_;
  delete CreateTeamResponse_reflection_;
  delete SearchTeamRequest::default_instance_;
  delete SearchTeamRequest_reflection_;
  delete SearchTeamResponse::default_instance_;
  delete SearchTeamResponse_reflection_;
  delete TeamLineupSetRequest::default_instance_;
  delete TeamLineupSetRequest_reflection_;
  delete TeamLineupSetResponse::default_instance_;
  delete TeamLineupSetResponse_reflection_;
  delete TeamSettingModifyRequest::default_instance_;
  delete TeamSettingModifyRequest_reflection_;
  delete TeamSettingModifyResponse::default_instance_;
  delete TeamSettingModifyResponse_reflection_;
  delete TeamOperationRequest::default_instance_;
  delete TeamOperationRequest_reflection_;
  delete TeamOperationResponse::default_instance_;
  delete TeamOperationResponse_reflection_;
  delete ApplyJoinTeamRequest::default_instance_;
  delete ApplyJoinTeamRequest_reflection_;
  delete ApplyJoinTeamResponse::default_instance_;
  delete ApplyJoinTeamResponse_reflection_;
  delete ApplyJoinTeamListNotify::default_instance_;
  delete ApplyJoinTeamListNotify_reflection_;
  delete ApplyJoinTeamReplyRequest::default_instance_;
  delete ApplyJoinTeamReplyRequest_reflection_;
  delete ApplyJoinTeamReplyResponse::default_instance_;
  delete ApplyJoinTeamReplyResponse_reflection_;
  delete ApplyJoinTeamReplyNotify::default_instance_;
  delete ApplyJoinTeamReplyNotify_reflection_;
  delete InviteJoinTeamRequest::default_instance_;
  delete InviteJoinTeamRequest_reflection_;
  delete InviteJoinTeamResponse::default_instance_;
  delete InviteJoinTeamResponse_reflection_;
  delete InviteJoinTeamNotify::default_instance_;
  delete InviteJoinTeamNotify_reflection_;
  delete InviteJoinTeamReplyRequest::default_instance_;
  delete InviteJoinTeamReplyRequest_reflection_;
  delete InviteJoinTeamReplyResponse::default_instance_;
  delete InviteJoinTeamReplyResponse_reflection_;
  delete InviteJoinTeamReplyNotify::default_instance_;
  delete InviteJoinTeamReplyNotify_reflection_;
  delete GetTeamDetailInfoRequest::default_instance_;
  delete GetTeamDetailInfoRequest_reflection_;
  delete RecruitTeamMemberRequest::default_instance_;
  delete RecruitTeamMemberRequest_reflection_;
  delete TeamPlayerKickedOutNotify::default_instance_;
  delete TeamPlayerKickedOutNotify_reflection_;
  delete RecruitTeamMemberResponse::default_instance_;
  delete RecruitTeamMemberResponse_reflection_;
  delete TeamInfoUpdateNotify::default_instance_;
  delete TeamInfoUpdateNotify_reflection_;
  delete SyncTeamInfoNotify::default_instance_;
  delete SyncTeamInfoNotify_reflection_;
  delete GetArenaInfoRequest::default_instance_;
  delete GetArenaInfoRequest_reflection_;
  delete UpdateArenaInfoNotify::default_instance_;
  delete UpdateArenaInfoNotify_reflection_;
  delete GetArenaRankListRequest::default_instance_;
  delete GetArenaRankListRequest_reflection_;
  delete GetArenaRankListResponse::default_instance_;
  delete GetArenaRankListResponse_reflection_;
  delete ChallengePlayerRequest::default_instance_;
  delete ChallengePlayerRequest_reflection_;
  delete ChallengePlayerResponse::default_instance_;
  delete ChallengePlayerResponse_reflection_;
  delete TakeTreasureBoxRequest::default_instance_;
  delete TakeTreasureBoxRequest_reflection_;
  delete TakeTreasureBoxResponse::default_instance_;
  delete TakeTreasureBoxResponse_reflection_;
  delete ArenaSelfNoticeNotify::default_instance_;
  delete ArenaSelfNoticeNotify_reflection_;
  delete ArenaPublicNoticeNotify::default_instance_;
  delete ArenaPublicNoticeNotify_reflection_;
  delete ArenaRecentMessageNotify::default_instance_;
  delete ArenaRecentMessageNotify_reflection_;
  delete PublicNoticeNotify::default_instance_;
  delete PublicNoticeNotify_reflection_;
  delete GetOnlineTimeRequest::default_instance_;
  delete GetOnlineTimeRequest_reflection_;
  delete TimeBonusNotify::default_instance_;
  delete TimeBonusNotify_reflection_;
  delete TakeTimeBonusRequest::default_instance_;
  delete TakeTimeBonusRequest_reflection_;
  delete TakeTimeBonusResponse::default_instance_;
  delete TakeTimeBonusResponse_reflection_;
  delete GetInstanceWantedListInfoRequest::default_instance_;
  delete GetInstanceWantedListInfoRequest_reflection_;
  delete GetInstanceWantedListInfoResponse::default_instance_;
  delete GetInstanceWantedListInfoResponse_reflection_;
  delete DoInstanceWantedOnceRequest::default_instance_;
  delete DoInstanceWantedOnceRequest_reflection_;
  delete DoInstanceWantedOnceResponse::default_instance_;
  delete DoInstanceWantedOnceResponse_reflection_;
  delete FastInstanceWantedRequest::default_instance_;
  delete FastInstanceWantedRequest_reflection_;
  delete FastInstanceWantedResponse::default_instance_;
  delete FastInstanceWantedResponse_reflection_;
  delete InstanceWantedAllResetRequest::default_instance_;
  delete InstanceWantedAllResetRequest_reflection_;
  delete InstanceWantedAllResetResponse::default_instance_;
  delete InstanceWantedAllResetResponse_reflection_;
  delete InstanceWantedResetCostRequest::default_instance_;
  delete InstanceWantedResetCostRequest_reflection_;
  delete InstanceWantedResetCostResponse::default_instance_;
  delete InstanceWantedResetCostResponse_reflection_;
  delete OpenMonsterExpBuffRequest::default_instance_;
  delete OpenMonsterExpBuffRequest_reflection_;
  delete OpenMonsterExpBuffResponse::default_instance_;
  delete OpenMonsterExpBuffResponse_reflection_;
  delete TakeMonsterExpBuffRequest::default_instance_;
  delete TakeMonsterExpBuffRequest_reflection_;
  delete TakeMonsterExpBuffResponse::default_instance_;
  delete TakeMonsterExpBuffResponse_reflection_;
  delete TeamMemberOpenMonsterExpBuffNotify::default_instance_;
  delete TeamMemberOpenMonsterExpBuffNotify_reflection_;
  delete GetLivenessInfoRequest::default_instance_;
  delete GetLivenessInfoRequest_reflection_;
  delete GetLivenessInfoResponse::default_instance_;
  delete GetLivenessInfoResponse_reflection_;
  delete TakeLivenessAwardRequest::default_instance_;
  delete TakeLivenessAwardRequest_reflection_;
  delete TakeLivenessAwardResponse::default_instance_;
  delete TakeLivenessAwardResponse_reflection_;
  delete LivenessUpdateNotify::default_instance_;
  delete LivenessUpdateNotify_reflection_;
  delete GetPlayerConfigRequest::default_instance_;
  delete GetPlayerConfigRequest_reflection_;
  delete SetPlayerConfigRequest::default_instance_;
  delete SetPlayerConfigRequest_reflection_;
  delete SetPlayerConfigResponse::default_instance_;
  delete SetPlayerConfigResponse_reflection_;
  delete GetPlayerConfigResponse::default_instance_;
  delete GetPlayerConfigResponse_reflection_;
  delete FightWithOtherPlayerRequest::default_instance_;
  delete FightWithOtherPlayerRequest_reflection_;
  delete FightWithOtherPlayerResponse::default_instance_;
  delete FightWithOtherPlayerResponse_reflection_;
  delete SendFightInvitationNotify::default_instance_;
  delete SendFightInvitationNotify_reflection_;
  delete FightInviteReplyRequest::default_instance_;
  delete FightInviteReplyRequest_reflection_;
  delete FightInviteReplyResponse::default_instance_;
  delete FightInviteReplyResponse_reflection_;
  delete FightInviteReplyNotify::default_instance_;
  delete FightInviteReplyNotify_reflection_;
  delete UpdateMonsterBuffNotify::default_instance_;
  delete UpdateMonsterBuffNotify_reflection_;
  delete TeamChannelMemberNotify::default_instance_;
  delete TeamChannelMemberNotify_reflection_;
  delete UpdateBitRequest::default_instance_;
  delete UpdateBitRequest_reflection_;
  delete UpdateBitResponse::default_instance_;
  delete UpdateBitResponse_reflection_;
  delete UpdateBitNotify::default_instance_;
  delete UpdateBitNotify_reflection_;
  delete PublishQuestionNotify::default_instance_;
  delete PublishQuestionNotify_reflection_;
  delete SendQAResultNotify::default_instance_;
  delete SendQAResultNotify_reflection_;
  delete PlayerPhyStrengthUpdate::default_instance_;
  delete PlayerPhyStrengthUpdate_reflection_;
  delete FollowBuddyRequest::default_instance_;
  delete FollowBuddyRequest_reflection_;
  delete FollowBuddyResponse::default_instance_;
  delete FollowBuddyResponse_reflection_;
  delete FollowBuddyNotify::default_instance_;
  delete FollowBuddyNotify_reflection_;
  delete ServerStatusRequest::default_instance_;
  delete ServerStatusRequest_reflection_;
  delete ServerStatusResponse::default_instance_;
  delete ServerStatusResponse_reflection_;
  delete ActLuckyOnceRequest::default_instance_;
  delete ActLuckyOnceRequest_reflection_;
  delete ActLuckyOnceResponse::default_instance_;
  delete ActLuckyOnceResponse_reflection_;
  delete ActExchangeItemRequest::default_instance_;
  delete ActExchangeItemRequest_reflection_;
  delete ActExchangeItemResponse::default_instance_;
  delete ActExchangeItemResponse_reflection_;
  delete GetTitleListRequest::default_instance_;
  delete GetTitleListRequest_reflection_;
  delete GetTitleListResponse::default_instance_;
  delete GetTitleListResponse_reflection_;
  delete SetRoleTitleRequest::default_instance_;
  delete SetRoleTitleRequest_reflection_;
  delete SetRoleTitleResponse::default_instance_;
  delete SetRoleTitleResponse_reflection_;
  delete SetRoleTitleNotify::default_instance_;
  delete SetRoleTitleNotify_reflection_;
  delete GetRoleTitleNotify::default_instance_;
  delete GetRoleTitleNotify_reflection_;
  delete GetOfflineGiftRequest::default_instance_;
  delete GetOfflineGiftRequest_reflection_;
  delete GetOfflineGiftResponse::default_instance_;
  delete GetOfflineGiftResponse_reflection_;
  delete GetOpenedActivityRequest::default_instance_;
  delete GetOpenedActivityRequest_reflection_;
  delete GetOpenedActivityResponse::default_instance_;
  delete GetOpenedActivityResponse_reflection_;
  delete ActivityChangeNotify::default_instance_;
  delete ActivityChangeNotify_reflection_;
  delete PracticeExpRequest::default_instance_;
  delete PracticeExpRequest_reflection_;
  delete PracticeExpResponse::default_instance_;
  delete PracticeExpResponse_reflection_;
  delete PracticeExpNotify::default_instance_;
  delete PracticeExpNotify_reflection_;
  delete YinglingSoulInfo::default_instance_;
  delete YinglingSoulInfo_reflection_;
  delete SoulExchangeRequest::default_instance_;
  delete SoulExchangeRequest_reflection_;
  delete SoulExchangeResponse::default_instance_;
  delete SoulExchangeResponse_reflection_;
  delete LobbyCustomPassInfoRequest::default_instance_;
  delete LobbyCustomPassInfoRequest_reflection_;
  delete CustomPassWaitInfo::default_instance_;
  delete CustomPassWaitInfo_reflection_;
  delete LobbyCustomPassInfoResponse::default_instance_;
  delete LobbyCustomPassInfoResponse_reflection_;
  delete PlayerEnterPassRoomRequest::default_instance_;
  delete PlayerEnterPassRoomRequest_reflection_;
  delete RoomInfo::default_instance_;
  delete RoomInfo_reflection_;
  delete PlayerEnterPassRoomResponse::default_instance_;
  delete PlayerEnterPassRoomResponse_reflection_;
  delete PlayerCreatePassRoomRequest::default_instance_;
  delete PlayerCreatePassRoomRequest_reflection_;
  delete PlayerCreatePassRoomResponse::default_instance_;
  delete PlayerCreatePassRoomResponse_reflection_;
  delete OperateRoomRequest::default_instance_;
  delete OperateRoomRequest_reflection_;
  delete OperateRoomResponse::default_instance_;
  delete OperateRoomResponse_reflection_;
  delete PassRoomInfoUpdateNotify::default_instance_;
  delete PassRoomInfoUpdateNotify_reflection_;
  delete InvitePlayerJoinRoomRequest::default_instance_;
  delete InvitePlayerJoinRoomRequest_reflection_;
  delete InvitePlayerJoinRoomResponse::default_instance_;
  delete InvitePlayerJoinRoomResponse_reflection_;
  delete PassRoomInviteNotify::default_instance_;
  delete PassRoomInviteNotify_reflection_;
  delete PassLobbyPlayerListRequest::default_instance_;
  delete PassLobbyPlayerListRequest_reflection_;
  delete PassLobbyPlayerListResponse::default_instance_;
  delete PassLobbyPlayerListResponse_reflection_;
  delete PlayerKickFormRoomNotify::default_instance_;
  delete PlayerKickFormRoomNotify_reflection_;
  delete LeaderStartRoomInstanceRequest::default_instance_;
  delete LeaderStartRoomInstanceRequest_reflection_;
  delete LeaderStartRoomInstanceResponse::default_instance_;
  delete LeaderStartRoomInstanceResponse_reflection_;
  delete HitYellowDuckRequest::default_instance_;
  delete HitYellowDuckRequest_reflection_;
  delete HitYellowDuckResponse::default_instance_;
  delete HitYellowDuckResponse_reflection_;
}

void protobuf_AddDesc_game_5fclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021game_client.proto\022\020protocols.common\032\021g"
    "ame_common.proto\"$\n\025InitConnectionReques"
    "t\022\013\n\003ver\030\001 \001(\005\"\202\001\n\026InitConnectionRespons"
    "e\022\022\n\nerror_code\030\001 \001(\005\022\021\n\tbegin_seq\030\002 \001(\005"
    "\022\023\n\013server_time\030\003 \001(\003\022\021\n\tserver_id\030\004 \001(\005"
    "\022\031\n\nmerge_flag\030\005 \001(\010:\005false\"!\n\020HeartBeat"
    "Request\022\r\n\005value\030\001 \001(\005\"7\n\021HeartBeatRespo"
    "nse\022\r\n\005value\030\001 \001(\005\022\023\n\013server_time\030\002 \001(\003\""
    "&\n\010UrlParam\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\""
    "O\n\023AccountLoginRequest\022\013\n\003uid\030\001 \002(\005\022\r\n\005t"
    "oken\030\002 \002(\014\022\021\n\tserver_id\030\003 \001(\005\022\t\n\001t\030\005 \001(\005"
    "\"\343\001\n\024AccountLoginResponse\022+\n\005roles\030\001 \003(\013"
    "2\034.protocols.common.PlayerInfo\022\022\n\nerror_"
    "code\030\002 \001(\005\022\023\n\013random_name\030\003 \001(\t\022\023\n\013serve"
    "r_time\030\004 \001(\003\022\017\n\007role_id\030\005 \001(\005\022\023\n\013role_st"
    "atus\030\006 \001(\005\022\023\n\013name_gender\030\007 \001(\005\022\021\n\tserve"
    "r_id\030\010 \001(\005\022\022\n\nbanned_sec\030\t \001(\005\"\026\n\024Accoun"
    "tReloginNotify\"\335\001\n\023CreatePlayerRequest\022("
    "\n\006gender\030\001 \002(\0162\030.protocols.common.Gender"
    "\022)\n\003job\030\002 \002(\0162\034.protocols.common.Profess"
    "ion\022\014\n\004name\030\003 \002(\t\022\021\n\tserver_id\030\004 \001(\005\022-\n\t"
    "url_param\030\005 \003(\0132\032.protocols.common.UrlPa"
    "ram\022\017\n\007role_id\030\007 \001(\005\022\020\n\010login_ip\030\010 \001(\t\"\200"
    "\001\n\024CreatePlayerResponse\022,\n\006player\030\001 \001(\0132"
    "\034.protocols.common.PlayerInfo\022\022\n\nerror_c"
    "ode\030\002 \002(\005\022\023\n\013random_name\030\003 \001(\t\022\021\n\tserver"
    "_id\030\004 \001(\005\"P\n\021RandomNameRequest\022(\n\006gender"
    "\030\001 \002(\0162\030.protocols.common.Gender\022\021\n\tserv"
    "er_id\030\002 \001(\005\"<\n\022RandomNameResponse\022\023\n\013ran"
    "dom_name\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\005\"#\n\023Del"
    "etePlayerRequest\022\014\n\004guid\030\001 \002(\003\"*\n\024Delete"
    "PlayerResponse\022\022\n\nerror_code\030\001 \002(\005\"c\n\022Pl"
    "ayerLoginRequest\022\014\n\004guid\030\001 \002(\003\022\020\n\010login_"
    "ip\030\002 \001(\t\022-\n\turl_param\030\003 \003(\0132\032.protocols."
    "common.UrlParam\"\320\001\n\023PlayerLoginResponse\022"
    "\022\n\nerror_code\030\003 \002(\005\022(\n\004bank\030\004 \001(\0132\032.prot"
    "ocols.common.BankInfo\0221\n\013player_info\030\005 \001"
    "(\0132\034.protocols.common.PlayerInfo\0222\n\rint_"
    "key_limit\030\006 \003(\0132\033.protocols.common.PBInt"
    "Pair\022\024\n\014startup_time\030\007 \001(\005\".\n\024ServerShut"
    "downNotify\022\026\n\016count_down_sec\030\001 \001(\005\"\021\n\017En"
    "terMapRequest\"W\n\020EnterMapResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\022/\n\004view\030\002 \001(\0132!.protocols."
    "common.EnterViewNotify\"\"\n\020TransportReque"
    "st\022\016\n\006npc_id\030\001 \002(\005\"^\n\021TransportResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\022\021\n\006map_id\030\003 \001(\005:\0010\022\020"
    "\n\005map_x\030\004 \001(\005:\0010\022\020\n\005map_y\030\005 \001(\005:\0010\"H\n\017Te"
    "leportRequest\022\021\n\006map_id\030\003 \001(\005:\0010\022\020\n\005map_"
    "x\030\004 \001(\005:\0010\022\020\n\005map_y\030\005 \001(\005:\0010\"k\n\020Teleport"
    "Response\022\022\n\nerror_code\030\001 \002(\005\022\014\n\004coin\030\002 \001"
    "(\005\022\021\n\006map_id\030\003 \001(\005:\0010\022\020\n\005map_x\030\004 \001(\005:\0010\022"
    "\020\n\005map_y\030\005 \001(\005:\0010\":\n\024EnterInstanceReques"
    "t\022\023\n\013instance_id\030\001 \002(\005\022\r\n\005grade\030\002 \001(\005\"{\n"
    "\025EnterInstanceResponse\022\022\n\nerror_code\030\001 \002"
    "(\005\0229\n\017instance_detail\030\002 \001(\0132 .protocols."
    "common.InstanceDetail\022\023\n\013member_guid\030\003 \001"
    "(\003\"\026\n\024LeaveInstanceRequest\"b\n\025LeaveInsta"
    "nceResponse\022\022\n\nerror_code\030\001 \002(\005\022\021\n\006map_i"
    "d\030\003 \001(\005:\0010\022\020\n\005map_x\030\004 \001(\005:\0010\022\020\n\005map_y\030\005 "
    "\001(\005:\0010\"\030\n\026GetInstanceItemRequest\"-\n\027GetI"
    "nstanceItemResponse\022\022\n\nerror_code\030\001 \002(\005\""
    "\031\n\027ListPassInstanceRequest\"{\n\030ListPassIn"
    "stanceResponse\022\022\n\nerror_code\030\001 \002(\005\0225\n\rin"
    "stance_list\030\002 \003(\0132\036.protocols.common.Ins"
    "tanceInfo\022\024\n\014access_count\030\003 \001(\005\"\032\n\030GetIn"
    "stanceDetailRequest\"j\n\031GetInstanceDetail"
    "Response\022\022\n\nerror_code\030\001 \002(\005\0229\n\017instance"
    "_detail\030\002 \001(\0132 .protocols.common.Instanc"
    "eDetail\"\301\001\n\022PassInstanceNotify\0225\n\rinstan"
    "ce_info\030\001 \001(\0132\036.protocols.common.Instanc"
    "eInfo\022\016\n\003exp\030\002 \001(\005:\0010\022\017\n\004coin\030\003 \001(\005:\0010\022\023"
    "\n\010item_tid\030\004 \001(\005:\0010\022\025\n\nitem_count\030\005 \001(\005:"
    "\0010\022\022\n\007vip_exp\030\006 \001(\005:\0010\022\023\n\010vip_coin\030\007 \001(\005"
    ":\0010\"!\n\021PlayerInfoRequest\022\014\n\004guid\030\001 \002(\003\"["
    "\n\022PlayerInfoResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\0221\n\013player_info\030\002 \001(\0132\034.protocols.common"
    ".PlayerInfo\"&\n\026BuddyDetailInfoRequest\022\014\n"
    "\004guid\030\001 \002(\003\"\231\001\n\027BuddyDetailInfoResponse\022"
    "1\n\013player_info\030\003 \001(\0132\034.protocols.common."
    "PlayerInfo\0227\n\014buddy_detail\030\001 \001(\0132!.proto"
    "cols.common.BuddyDetailInfo\022\022\n\nerror_cod"
    "e\030\002 \002(\005\">\n\020AttrChangeNotify\022\021\n\tattr_type"
    "\030\001 \002(\005\022\027\n\017lineup_capacity\030\002 \001(\005\"\034\n\014Playe"
    "rLogout\022\014\n\004guid\030\001 \002(\003\"$\n\021KickPlayerReque"
    "st\022\017\n\007role_id\030\001 \001(\005\"(\n\022KickPlayerRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\"\"\n\020KickPlayerNotif"
    "y\022\016\n\006reason\030\001 \001(\005\"&\n\026GetYinglingListRequ"
    "est\022\014\n\004guid\030\001 \002(\003\"\275\001\n\027GetYinglingListRes"
    "ponse\022\022\n\nerror_code\030\001 \002(\005\0221\n\tyinglings\030\002"
    " \003(\0132\036.protocols.common.YinglingInfo\022\026\n\016"
    "hired_slot_num\030\003 \001(\005\022\"\n\032hired_slot_next_"
    "open_level\030\004 \001(\005\022\037\n\027hired_slot_cost_yuan"
    "bao\030\005 \001(\005\"!\n\013NotifyError\022\022\n\nerror_code\030\001"
    " \001(\005\"\034\n\032GetYinglingHiringStatusReq\"\314\001\n\032Y"
    "inglingHiringStatusNotify\022\026\n\016cool_down_t"
    "ick\030\001 \001(\005\022&\n\036max_none_cooldown_hiring_co"
    "unt\030\002 \001(\005\022&\n\036cur_none_cooldown_hiring_co"
    "unt\030\003 \001(\005\022\022\n\nopened_pos\030\004 \001(\005\0222\n\010yinglin"
    "g\030\005 \003(\0132 .protocols.common.HiringYinglin"
    "g\"(\n\031OpenYinglingHiringSlotReq\022\013\n\003pos\030\001 "
    "\001(\005\"(\n\031OpenYinglingHiringSlotNtf\022\013\n\003pos\030"
    "\001 \001(\005\"\"\n\023OpenYinglingSlotReq\022\013\n\003pos\030\001 \001("
    "\005\"M\n\030OpenYinglingSlotResponse\022\022\n\nerror_c"
    "ode\030\001 \002(\005\022\035\n\025nex_slot_cost_yuanbao\030\002 \001(\005"
    "\"V\n\023OpenYinglingSlotNtf\022\013\n\003pos\030\001 \001(\005\022\027\n\017"
    "opened_by_level\030\002 \001(\005\022\031\n\021openen_by_yuanb"
    "ao\030\003 \001(\005\"w\n\033RefeshYinglingHiringListReq\022"
    "\033\n\014use_yuan_bao\030\001 \001(\010:\005false\022;\n\010gen_type"
    "\030\002 \001(\0162).protocols.common.RefreshYinglin"
    "gListType\"K\n\037AutoRefeshYinglingHiringLis"
    "tReq\022\025\n\runtil_quality\030\001 \001(\005\022\021\n\tmax_count"
    "\030\002 \001(\005\"5\n\037AutoRefeshYinglingHiringListRe"
    "p\022\022\n\nerror_code\030\001 \001(\005\"X\n\016HiringYingling\022"
    "\013\n\003pos\030\001 \001(\005\022\014\n\004t_id\030\002 \001(\005\022\027\n\010is_hired\030\003"
    " \001(\010:\005false\022\022\n\nonce_hired\030\004 \001(\010\"c\n\033Refes"
    "hYinglingHiringListNtf\0222\n\010yingling\030\001 \003(\013"
    "2 .protocols.common.HiringYingling\022\020\n\010ra"
    "nd_num\030\002 \001(\005\"W\n\023HireYinglingRequest\022\024\n\014y"
    "ingling_tid\030\001 \001(\005\022\024\n\014yingling_pos\030\002 \001(\005\022"
    "\024\n\014special_hire\030\003 \001(\005\"\022\n\020GetLingliReques"
    "t\"\030\n\026ConvertYinglingRequest\"B\n\022LingliUpd"
    "ateNotify\022\026\n\016current_lingli\030\001 \002(\005\022\024\n\014add"
    "ed_lingli\030\002 \001(\005\"H\n\021AddYinglingNotify\0223\n\010"
    "yingling\030\001 \003(\0132!.protocols.common.BuddyD"
    "etailInfo\"&\n\027DelHiringYinglingNotify\022\013\n\003"
    "pos\030\001 \003(\005\":\n\023FireYinglingRequest\022\023\n\013ying"
    "ling_id\030\001 \001(\003\022\016\n\006forced\030\002 \001(\010\"\?\n\021DelYing"
    "lingNotify\022\023\n\013yingling_id\030\001 \003(\003\022\025\n\nerror"
    "_code\030\002 \001(\005:\0010\"\035\n\033GetYinglingComboDataRe"
    "quest\"2\n\034GetYinglingComboDataResponse\022\022\n"
    "\nerror_code\030\001 \001(\005\"Y\n\032GetYinglingComboDat"
    "aNotify\022;\n\014combo_status\030\001 \001(\0132%.protocol"
    "s.common.YinglingComboStatus\"/\n\033UpgradeY"
    "inglingComboRequest\022\020\n\010combo_id\030\001 \001(\005\"2\n"
    "\034UpgradeYinglingComboResponse\022\022\n\nerror_c"
    "ode\030\001 \001(\005\"^\n\020MoveStartRequest\022\021\n\tsrc_map"
    "_x\030\002 \002(\005\022\021\n\tsrc_map_y\030\003 \002(\005\022\021\n\tdst_map_x"
    "\030\004 \002(\005\022\021\n\tdst_map_y\030\005 \002(\005\"V\n\021MoveStartRe"
    "sponse\022\022\n\nerror_code\030\001 \002(\005\022\017\n\007time_ms\030\002 "
    "\001(\005\022\r\n\005map_x\030\003 \001(\005\022\r\n\005map_y\030\004 \001(\005\"|\n\017Mov"
    "eStartNotify\022\014\n\004guid\030\001 \002(\003\022\021\n\tsrc_map_x\030"
    "\002 \002(\005\022\021\n\tsrc_map_y\030\003 \002(\005\022\021\n\tdst_map_x\030\004 "
    "\002(\005\022\021\n\tdst_map_y\030\005 \002(\005\022\017\n\007time_ms\030\006 \002(\005\""
    "v\n\017EnterViewNotify\022-\n\007players\030\001 \003(\0132\034.pr"
    "otocols.common.PlayerInfo\0224\n\tmovements\030\002"
    " \003(\0132!.protocols.common.MoveStartNotify\""
    " \n\017LeaveViewNotify\022\r\n\005guids\030\001 \003(\003\"N\n\020Gam"
    "eStatusNotify\022\014\n\004guid\030\001 \002(\003\022,\n\006status\030\002 "
    "\002(\0162\034.protocols.common.GameStatus\"d\n\017Cha"
    "ngeMapNotify\022\021\n\006map_id\030\001 \001(\005:\0010\022\020\n\005map_x"
    "\030\002 \001(\005:\0010\022\020\n\005map_y\030\003 \001(\005:\0010\022\032\n\017map_insta"
    "nce_id\030\004 \001(\005:\0010\"B\n\031ChooseAutoFightNPCReq"
    "uest\022\016\n\006npc_id\030\001 \002(\005\022\025\n\rbattle_npc_id\030\002 "
    "\001(\005\"\212\001\n\032ChooseAutoFightNPCResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\022\032\n\022exp_bonus_one_time\030\002 \001"
    "(\005\022\030\n\020vip_bonus_factor\030\004 \001(\005\022\"\n\032left_fre"
    "e_auto_fight_times\030\003 \001(\005\"U\n\027AutoFightMon"
    "sterRequest\022\016\n\006npc_id\030\001 \001(\005\022\025\n\rbattle_np"
    "c_id\030\002 \001(\005\022\023\n\013fight_times\030\003 \002(\005\"d\n\030AutoF"
    "ightMonsterResponse\022\022\n\nerror_code\030\001 \002(\005\022"
    "\035\n\025left_auto_fight_times\030\002 \001(\005\022\025\n\rfree_b"
    "ag_size\030\003 \001(\005\"\026\n\024StopAutoFightRequest\"+\n"
    "\025StopAutoFightResponse\022\022\n\nerror_code\030\001 \002"
    "(\005\"\231\002\n\034AutoFightMonsterUpdateNotify\022\027\n\017i"
    "s_fight_finish\030\007 \001(\005\022\031\n\021finish_error_cod"
    "e\030\010 \001(\005\022\026\n\016cur_fight_time\030\001 \001(\005\022\035\n\025left_"
    "auto_fight_times\030\002 \001(\005\022\025\n\rfree_bag_size\030"
    "\003 \001(\005\022\021\n\texp_bonus\030\004 \001(\005\0225\n\017skill_exp_bo"
    "nus\030\005 \003(\0132\034.protocols.common.SkillBonus\022"
    "-\n\tdrop_item\030\006 \003(\0132\032.protocols.common.It"
    "emInfo\"\031\n\027SpeedUpAutoFightRequest\".\n\030Spe"
    "edUpAutoFightResponse\022\022\n\nerror_code\030\001 \002("
    "\005\"\026\n\024GetPlayerViewRequest\"\\\n\025GetPlayerVi"
    "ewResponse\022\022\n\nerror_code\030\001 \002(\005\022/\n\004view\030\002"
    " \001(\0132!.protocols.common.EnterViewNotify\""
    "#\n\023GetSkillListRequest\022\014\n\004guid\030\001 \002(\003\"\262\001\n"
    "\024GetSkillListResponse\022\022\n\nerror_code\030\001 \002("
    "\005\022\014\n\004guid\030\002 \002(\003\022\021\n\topen_slot\030\003 \002(\005\022/\n\nsk"
    "ill_list\030\004 \003(\0132\033.protocols.common.SkillI"
    "nfo\022\026\n\016skill_exp_pool\030\005 \001(\005\022\034\n\024practice_"
    "skill_limit\030\006 \001(\005\"\033\n\031GetBattleSkillListR"
    "equest\"|\n\032GetBattleSkillListResponse\022\022\n\n"
    "error_code\030\001 \002(\005\0227\n\014battle_skill\030\002 \003(\0132!"
    ".protocols.common.BattleSkillInfo\022\021\n\tyou"
    "li_num\030\003 \001(\005\"\205\001\n\027UpdateBattleSkillNotify"
    "\0228\n\004type\030\001 \002(\0162*.protocols.common.UPDATE"
    "_BATTLE_SKILL_TYPE\022\020\n\010skill_id\030\002 \002(\005\022\017\n\007"
    "cur_exp\030\003 \002(\005\022\r\n\005level\030\004 \001(\005\"C\n\025SkillPoo"
    "lChangeNotify\022\022\n\nbuddy_guid\030\001 \002(\003\022\026\n\016ski"
    "ll_pool_exp\030\002 \001(\005\"d\n\021UpdateSkillNotify\022/"
    "\n\nskill_info\030\001 \001(\0132\033.protocols.common.Sk"
    "illInfo\022\014\n\004guid\030\002 \001(\003\022\020\n\010new_flag\030\003 \001(\005\""
    "4\n\031UpgradeBattleSkillRequest\022\027\n\017battle_s"
    "kill_id\030\001 \001(\005\"0\n\032UpgradeBattleSkillRespo"
    "nse\022\022\n\nerror_code\030\001 \001(\005\"\257\001\n\030UpgradeBattl"
    "eSkillNotify\022S\n\nskill_info\030\001 \003(\0132\?.proto"
    "cols.common.UpgradeBattleSkillNotify.Bat"
    "tleSkillLevelInfo\032>\n\024BattleSkillLevelInf"
    "o\022\027\n\017battle_skill_id\030\001 \001(\005\022\r\n\005level\030\002 \001("
    "\005\"&\n\021UpdateYouliNotify\022\021\n\tyouli_num\030\001 \001("
    "\005\";\n\025GetEquipDetailRequest\022\014\n\004guid\030\002 \001(\003"
    "\022\024\n\014item_id_list\030\001 \003(\003\"_\n\026GetEquipDetail"
    "Response\022\022\n\nerror_code\030\001 \002(\005\0221\n\nequip_li"
    "st\030\002 \003(\0132\035.protocols.common.EquipDetail\""
    "\026\n\024GetLineupListRequest\"\311\001\n\025GetLineupLis"
    "tResponse\022\022\n\nerror_code\030\001 \002(\005\0222\n\rlearned"
    "_skill\030\006 \003(\0132\033.protocols.common.SkillInf"
    "o\022\034\n\021default_lineup_id\030\003 \001(\005:\0010\0221\n\013lineu"
    "p_list\030\004 \003(\0132\034.protocols.common.LineupIn"
    "fo\022\027\n\017max_lineup_size\030\005 \001(\005\"2\n\035GetLineup"
    "FightCapacityRequest\022\021\n\tlineup_id\030\001 \002(\005\""
    "L\n\036GetLineupFightCapacityResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\022\026\n\016fight_capacity\030\002 \002(\005\"\226\001"
    "\n\026LineUpOperationRequest\0226\n\toperation\030\001 "
    "\002(\0162#.protocols.common.LINE_UP_OPERATION"
    "\022\026\n\016set_as_default\030\002 \001(\005\022,\n\006lineup\030\003 \001(\013"
    "2\034.protocols.common.LineupInfo\"\256\001\n\027LineU"
    "pOperationResponse\022\022\n\nerror_code\030\001 \002(\005\0226"
    "\n\toperation\030\002 \001(\0162#.protocols.common.LIN"
    "E_UP_OPERATION\022\031\n\021default_lineup_id\030\003 \001("
    "\005\022,\n\006lineup\030\004 \001(\0132\034.protocols.common.Lin"
    "eupInfo\"%\n\021UnequipAllRequest\022\020\n\010buddy_id"
    "\030\001 \001(\003\"(\n\022UnequipAllResponse\022\022\n\nerror_co"
    "de\030\001 \001(\005\">\n\022PlayerUpdateNotify\022(\n\004bank\030\001"
    " \001(\0132\032.protocols.common.BankInfo\"O\n\021Equi"
    "pSkillRequest\022\014\n\004guid\030\001 \002(\003\022\020\n\010skill_id\030"
    "\002 \002(\005\022\032\n\022equiped_slot_index\030\003 \002(\005\"p\n\022Equ"
    "ipSkillResponse\022\022\n\nerror_code\030\001 \002(\005\022\014\n\004g"
    "uid\030\002 \002(\003\022\032\n\022equiped_slot_index\030\003 \002(\005\022\034\n"
    "\024equiped_slot_skillid\030\004 \002(\005\">\n\022UnloadSki"
    "llRequest\022\014\n\004guid\030\001 \002(\003\022\032\n\022equiped_slot_"
    "index\030\002 \002(\005\"S\n\023UnloadSkillResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022\032\n\022equiped_"
    "slot_index\030\003 \002(\005\"K\n\025InjectSkillExpReques"
    "t\022\014\n\004guid\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\005\022\022\n\ninj"
    "ect_exp\030\003 \002(\005\"~\n\026InjectSkillExpResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022\026\n\016ski"
    "ll_pool_exp\030\003 \002(\005\022*\n\005skill\030\004 \001(\0132\033.proto"
    "cols.common.SkillInfo\"\223\001\n\024PracticeSkillR"
    "equest\022\014\n\004guid\030\001 \002(\003\022\020\n\010skill_id\030\002 \002(\005\0226"
    "\n\rpractice_mode\030\003 \002(\0162\037.protocols.common"
    ".PRACTICE_MODE\022\025\n\rpractice_time\030\004 \002(\005\022\014\n"
    "\004cost\030\005 \002(\005\"e\n\025PracticeSkillResponse\022\022\n\n"
    "error_code\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022*\n\005skill\030"
    "\003 \002(\0132\033.protocols.common.SkillInfo\"=\n\033Sp"
    "eedupPracticeSkillRequest\022\014\n\004guid\030\001 \002(\003\022"
    "\020\n\010skill_id\030\002 \002(\005\"\177\n\034SpeedupPracticeSkil"
    "lResponse\022\022\n\nerror_code\030\001 \002(\005\022\014\n\004guid\030\002 "
    "\002(\003\022*\n\005skill\030\003 \002(\0132\033.protocols.common.Sk"
    "illInfo\022\021\n\tleft_time\030\004 \001(\005\":\n\030StopPracti"
    "ceSkillRequest\022\014\n\004guid\030\001 \002(\003\022\020\n\010skill_id"
    "\030\002 \002(\005\"i\n\031StopPracticeSkillResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022*\n\005skill\030\003"
    " \001(\0132\033.protocols.common.SkillInfo\"a\n\023Pra"
    "cticeSkillNotify\022\014\n\004guid\030\001 \002(\003\022*\n\005skill\030"
    "\002 \002(\0132\033.protocols.common.SkillInfo\022\020\n\010fi"
    "nished\030\003 \001(\005\"\202\001\n\rLevelUpNotify\022\014\n\004guid\030\001"
    " \002(\003\022-\n\004type\030\002 \002(\0162\037.protocols.common.LE"
    "VEL_UP_TYPE\022\020\n\010skill_id\030\004 \001(\005\022\017\n\007cur_exp"
    "\030\005 \001(\005\022\021\n\tnew_level\030\006 \002(\005\";\n\021UpdateMoney"
    "Notify\022&\n\005money\030\001 \001(\0132\027.protocols.common"
    ".Money\"=\n\020UpdateItemNotify\022)\n\005items\030\001 \003("
    "\0132\032.protocols.common.ItemInfo\"F\n\017UpdateE"
    "xpNotify\022\017\n\007cur_exp\030\001 \002(\005\022\021\n\tcur_level\030\002"
    " \002(\005\022\017\n\007add_exp\030\003 \002(\005\"\025\n\023GetQuestListReq"
    "uest\"V\n\025GetQuestsListResponse\022)\n\006quests\030"
    "\001 \003(\0132\031.protocols.common.QuestPb\022\022\n\nerro"
    "r_code\030\002 \001(\005\"&\n\022AcceptQuestRequest\022\020\n\010qu"
    "est_id\030\001 \002(\005\"&\n\022FinishQuestRequest\022\020\n\010qu"
    "est_id\030\001 \002(\005\"&\n\022CancelQuestRequest\022\020\n\010qu"
    "est_id\030\001 \002(\005\"&\n\022QuestActionRequest\022\020\n\010qu"
    "est_id\030\001 \002(\005\"9\n\014QuestsNotify\022)\n\006quests\030\001"
    " \003(\0132\031.protocols.common.QuestPb\"0\n\030Accep"
    "tXunluoQuestRequest\022\024\n\014cancel_quest\030\001 \001("
    "\010\"/\n\031AcceptXunluoQuestResponse\022\022\n\nerror_"
    "code\030\001 \002(\005\"^\n\026BuddyInjectSoulRequest\022\020\n\010"
    "buddy_id\030\001 \002(\003\022\037\n\020use_protect_item\030\002 \002(\010"
    ":\005false\022\021\n\tauto_fill\030\003 \001(\010\"\210\001\n\027BuddyInje"
    "ctSoulResponse\022\020\n\010buddy_id\030\001 \002(\003\022\022\n\nerro"
    "r_code\030\002 \002(\005\022\025\n\rinject_sucess\030\003 \002(\010\022\026\n\016s"
    "oul_stone_num\030\004 \001(\005\022\030\n\020protect_item_num\030"
    "\005 \001(\005\"\035\n\033BuddySpaceTimeStatusRequest\"A\n\024"
    "BuddySpaceTimeStatus\022\020\n\010buddy_id\030\001 \002(\003\022\027"
    "\n\017spacetime_level\030\002 \002(\005\"\210\001\n\034BuddySpaceTi"
    "meStatusResponse\0226\n\006status\030\001 \003(\0132&.proto"
    "cols.common.BuddySpaceTimeStatus\022\026\n\016soul"
    "_stone_num\030\003 \001(\005\022\030\n\020protect_item_num\030\004 \001"
    "(\005\"L\n\037BuddyChanllengeSpaceTimeRequest\022\020\n"
    "\010buddy_id\030\001 \002(\003\022\027\n\017challenge_level\030\002 \001(\005"
    "\"q\n BuddyChanllengeSpaceTimeResponse\022\020\n\010"
    "buddy_id\030\001 \002(\003\022\027\n\017challenge_level\030\002 \001(\005\022"
    "\016\n\006sucess\030\003 \002(\010\022\022\n\nerror_code\030\004 \002(\005\"Q\n\025B"
    "uddySoulUpdateNotify\022\020\n\010buddy_id\030\001 \002(\003\022\020"
    "\n\010cur_soul\030\002 \002(\005\022\024\n\014cur_max_soul\030\003 \002(\005\"a"
    "\n\035EquipmentShengxingOpenRequest\022#\n\033need_"
    "push_buddy_detail_list\030\001 \001(\010\022\033\n\023need_pus"
    "h_inventory\030\002 \001(\010\" \n\036EquipmentShengxingO"
    "penResponse\"\?\n\031EquipmentShengxingRequest"
    "\022\017\n\007item_id\030\001 \002(\004\022\021\n\tauto_fill\030\002 \001(\010\"R\n\032"
    "EquipmentShengxingResponse\022\017\n\007item_id\030\001 "
    "\002(\004\022\022\n\nerror_code\030\002 \002(\005\022\017\n\007success\030\003 \002(\010"
    "\"F\n\nXilianData\0228\n\017extra_attr_list\030\001 \003(\0132"
    "\037.protocols.common.AttributeData\"\036\n\034Equi"
    "pmentXilianStatusRequest\"g\n\035EquipmentXil"
    "ianStatusResponse\022\017\n\007item_id\030\001 \001(\004\0225\n\017ex"
    "tra_attr_list\030\002 \001(\0132\034.protocols.common.X"
    "ilianData\"\\\n\026EquipmentXilianRequest\022\017\n\007i"
    "tem_id\030\001 \002(\004\022\027\n\017lock_attr_index\030\002 \001(\005\022\030\n"
    "\tauto_fill\030\003 \001(\010:\005false\">\n\027EquipmentXili"
    "anResponse\022\017\n\007item_id\030\001 \002(\004\022\022\n\nerror_cod"
    "e\030\002 \002(\005\"J\n\036EquipmentLockXilianAttrReques"
    "t\022\017\n\007item_id\030\001 \002(\004\022\027\n\017lock_attr_index\030\002 "
    "\001(\005\"5\n\037EquipmentLockXilianAttrResponse\022\022"
    "\n\nerror_code\030\001 \002(\005\"b\n\027EquipmentInheritRe"
    "quest\022\032\n\022inherited_equip_id\030\001 \002(\004\022\030\n\020inh"
    "erit_equip_id\030\002 \002(\004\022\021\n\tauto_fill\030\003 \002(\010\"."
    "\n\030EquipmentInheritResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\"+\n\027EquipmentRecycleRequest\022\020\n\010equ"
    "ip_id\030\001 \002(\003\".\n\030EquipmentRecycleResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\"K\n\027BuddyDetailUpdate"
    "Notify\0220\n\005buddy\030\001 \003(\0132!.protocols.common"
    ".BuddyDetailInfo\"B\n\021BagItemListNotify\022-\n"
    "\tbag_items\030\001 \003(\0132\032.protocols.common.Item"
    "Info\"B\n\021EquipUpdateNotify\022-\n\006equips\030\001 \003("
    "\0132\035.protocols.common.EquipDetail\"\025\n\023Role"
    "CoolDownRequest\"I\n\022RoleCoolDownNotify\0223\n"
    "\tcool_down\030\001 \001(\0132 .protocols.common.Role"
    "CoolDownPb\"I\n\030RoleCoolDownClearRequest\022-"
    "\n\004type\030\001 \002(\0162\037.protocols.common.RoleLimi"
    "tType\"/\n\031RoleCoolDownClearResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\"\027\n\025RoleDailyLimitRequest\""
    "U\n\032RoleDailyLimitUpdateNotify\0227\n\013daily_l"
    "imit\030\001 \002(\0132\".protocols.common.RoleDailyL"
    "imitPb\"J\n\031PurchaseLimitCountRequest\022-\n\004t"
    "ype\030\001 \002(\0162\037.protocols.common.RoleLimitTy"
    "pe\"0\n\032PurchaseLimitCountResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"\027\n\025DailyQuestListRequest\"I\n"
    "\024DailyQuestListNotify\0221\n\013daily_quest\030\001 \003"
    "(\0132\034.protocols.common.DailyQuest\"/\n\030Refr"
    "eshDailyQuestRequest\022\023\n\013use_yuanbao\030\001 \001("
    "\010\"/\n\031RefreshDailyQuestResponse\022\022\n\nerror_"
    "code\030\001 \001(\005\"#\n\023ExchangeCodeRequest\022\014\n\004cod"
    "e\030\001 \001(\t\"*\n\024ExchangeCodeResponse\022\022\n\nerror"
    "_code\030\001 \001(\005\"\024\n\022PlayerFlagsRequest\"[\n\023Pla"
    "yerFlagsResponse\0220\n\004data\030\001 \001(\0132\".protoco"
    "ls.common.PlayerFlagDataPb\022\022\n\nerror_code"
    "\030\002 \001(\005\"8\n\024PlayerSetFlagRequest\022\021\n\tflag_t"
    "ype\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"+\n\025PlayerSetFla"
    "gResponse\022\022\n\nerror_code\030\001 \002(\005\"F\n\026PlayerF"
    "lagUpdateNotify\022,\n\004flag\030\001 \001(\0132\036.protocol"
    "s.common.PlayerFlagPb\"\026\n\024PlayerHideNpcRe"
    "quest\"V\n\025PlayerHideNpcResponse\022)\n\004data\030\001"
    " \001(\0132\033.protocols.common.HideNpcPb\022\022\n\nerr"
    "or_code\030\002 \001(\005\"G\n\031PlayerHideNpcUpdateNoti"
    "fy\022*\n\003npc\030\001 \001(\0132\035.protocols.common.HideN"
    "pcData\"9\n\023StartCollectRequest\022\016\n\006npc_id\030"
    "\001 \002(\005\022\022\n\nstart_tick\030\002 \002(\005\"M\n\024StartCollec"
    "tResponse\022\016\n\006npc_id\030\001 \002(\005\022\021\n\tneed_msec\030\002"
    " \001(\005\022\022\n\nerror_code\030\003 \002(\005\";\n\024FinishCollec"
    "tRequest\022\016\n\006npc_id\030\001 \002(\005\022\023\n\013finish_tick\030"
    "\002 \002(\005\";\n\025FinishCollectResponse\022\016\n\006npc_id"
    "\030\001 \002(\005\022\022\n\nerror_code\030\002 \002(\005\"(\n\030GetTrainAt"
    "tributeRequest\022\014\n\004guid\030\001 \001(\003\"/\n\031GetTrain"
    "AttributeResponse\022\022\n\nerror_code\030\001 \001(\005\"9\n"
    "\025TrainAttributeRequest\022\014\n\004guid\030\001 \001(\003\022\022\n\n"
    "train_type\030\002 \001(\005\",\n\026TrainAttributeRespon"
    "se\022\022\n\nerror_code\030\001 \001(\005\"\216\001\n\024TrainAttribut"
    "eNotify\022.\n\004data\030\001 \001(\0132 .protocols.common"
    ".TrainAttribute\022\016\n\006coin_k\030\002 \001(\005\022\016\n\006yb_mi"
    "d\030\003 \001(\005\022\017\n\007yb_high\030\004 \001(\005\022\025\n\ralter_item_i"
    "d\030\005 \001(\005\"9\n\031SaveTrainAttributeRequest\022\014\n\004"
    "guid\030\001 \001(\003\022\016\n\006cancel\030\002 \001(\005\"0\n\032SaveTrainA"
    "ttributeResponse\022\022\n\nerror_code\030\001 \001(\005\"h\n\025"
    "GuildInfoUpdateNotify\022\014\n\004guid\030\001 \002(\003\022\023\n\010g"
    "uild_id\030\002 \001(\005:\0010\022\026\n\013guild_title\030\003 \001(\005:\0010"
    "\022\024\n\nguild_name\030\004 \001(\t:\000\">\n\023VipInfoUpdateN"
    "otify\022\021\n\tvip_level\030\001 \002(\005\022\024\n\014duration_sec"
    "\030\002 \002(\005\"\026\n\024FunctionLimitRequest\"\?\n\025Functi"
    "onLimitResponse\022\022\n\nerror_code\030\001 \002(\005\022\022\n\no"
    "pen_flags\030\002 \003(\005\"/\n\031FunctionLimitUpdateNo"
    "tify\022\022\n\nopen_flags\030\001 \003(\005\"\031\n\027GetDailyGift"
    "InfoRequest\".\n\030GetDailyGiftInfoResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\"B\n\031DailyGiftInfoUpda"
    "teNotify\022\024\n\014gift_pack_id\030\001 \002(\005\022\017\n\007applie"
    "d\030\002 \002(\010\":\n\025ApplyDailyGiftRequest\022!\n\031appl"
    "y_first_reward_on_vip\030\001 \001(\005\",\n\026ApplyDail"
    "yGiftResponse\022\022\n\nerror_code\030\001 \002(\005\"\037\n\035Get"
    "StackableOnlineGiftRequest\"O\n\023StackableO"
    "nlineGift\022\026\n\016online_day_num\030\001 \002(\005\022\017\n\007pac"
    "k_id\030\002 \002(\005\022\017\n\007applied\030\003 \002(\005\"4\n\036GetStacka"
    "bleOnlineGiftResponse\022\022\n\nerror_code\030\001 \002("
    "\005\"W\n\037StackableOnlineGiftUpdateNotify\0224\n\005"
    "gifts\030\001 \003(\0132%.protocols.common.Stackable"
    "OnlineGift\"5\n\037ApplyStackableOnlineGiftRe"
    "quest\022\022\n\nonline_day\030\001 \002(\005\"6\n ApplyStacka"
    "bleOnlineGiftResponse\022\022\n\nerror_code\030\001 \002("
    "\005\"\317\001\n\022AnnouncementNotify\022\025\n\rannounce_typ"
    "e\030\001 \002(\005\022\022\n\nint_params\030\002 \003(\005\022-\n\007players\030\003"
    " \003(\0132\034.protocols.common.PlayerInfo\0224\n\tyi"
    "nglings\030\004 \003(\0132!.protocols.common.BuddyDe"
    "tailInfo\022)\n\005items\030\005 \003(\0132\032.protocols.comm"
    "on.ItemInfo\"G\n\021GemUpgradeRequest\022\016\n\006gem_"
    "id\030\001 \001(\005\022\017\n\007gem_num\030\002 \001(\005\022\021\n\tauto_fill\030\003"
    " \001(\010\"(\n\022GemUpgrateResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\"M\n\020GemInsertRequest\022\021\n\tequip_uid\030"
    "\001 \001(\003\022\024\n\014socket_index\030\002 \001(\005\022\020\n\010item_uid\030"
    "\003 \001(\003\"\'\n\021GemInsertResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\";\n\020GemRemoveRequest\022\021\n\tequip_uid\030"
    "\001 \001(\003\022\024\n\014socket_index\030\002 \001(\005\"\'\n\021GemRemove"
    "Response\022\022\n\nerror_code\030\001 \002(\005\"<\n\021MakeSock"
    "etRequest\022\021\n\tequip_uid\030\001 \001(\003\022\024\n\014socket_i"
    "ndex\030\002 \001(\005\"(\n\022MakeSocketResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"!\n\037GetStartupActivityStatus"
    "Request\"6\n GetStartupActivityStatusRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\"R\n\025StartupActivi"
    "tyStatus\022\025\n\ractivity_type\030\001 \001(\005\022\021\n\tstart"
    "_sec\030\002 \001(\005\022\017\n\007end_sec\030\003 \001(\005\"V\n\033StartupAc"
    "tivityStatusNotify\0227\n\006status\030\001 \003(\0132\'.pro"
    "tocols.common.StartupActivityStatus\"\036\n\034G"
    "etGuildCrystalStatusRequest\"3\n\035GetGuildC"
    "rystalStatusResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\">\n%GuildStartCrystalTowerActivityReques"
    "t\022\025\n\rtower_quality\030\001 \002(\005\"<\n&GuildStartCr"
    "ystalTowerActivityResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\";\n\022GuildDonateRequest\022\022\n\nmoney_ty"
    "pe\030\001 \002(\005\022\021\n\tmoney_num\030\002 \002(\005\")\n\023GuildDona"
    "teResponse\022\022\n\nerror_code\030\001 \002(\005\"S\n\022GuildC"
    "ontribNotify\022\025\n\rguild_contrib\030\001 \001(\005\022\021\n\tg"
    "uild_exp\030\002 \001(\005\022\023\n\013guild_money\030\003 \001(\005\"i\n\037G"
    "uildCrystalTowerActivityNotify\022F\n\ractivi"
    "ty_data\030\001 \001(\0132/.protocols.common.GuildCr"
    "ystalTowerActivityData\"K\n\035PickGuildCryst"
    "alRewardRequest\022\022\n\nitem_index\030\001 \001(\005\022\026\n\016f"
    "inish_collect\030\002 \001(\010\"4\n\036PickGuildCrystalR"
    "ewardResponse\022\022\n\nerror_code\030\001 \001(\005\"U\n\034Pic"
    "kGuildCrystalRewardNotify\0225\n\007rewards\030\007 \003"
    "(\0132$.protocols.common.GuildCrystalReward"
    "\"\032\n\030QueryYouliMapDataRequest\"/\n\031QueryYou"
    "liMapDataResponse\022\022\n\nerror_code\030\001 \001(\005\"F\n"
    "\022YouliMapDataNotify\0220\n\010map_data\030\001 \001(\0132\036."
    "protocols.common.YouLiMapData\"*\n\023YouliMa"
    "pDiceRequest\022\023\n\013dice_number\030\001 \001(\005\"*\n\024You"
    "liMapDiceResponse\022\022\n\nerror_code\030\001 \001(\005\"\'\n"
    "\027YouliMapAutoDiceRequest\022\014\n\004type\030\001 \001(\005\"."
    "\n\030YouliMapAutoDiceResponse\022\022\n\nerror_code"
    "\030\001 \001(\005\"<\n\022YouliMapDiceNotify\022\023\n\013dice_num"
    "ber\030\001 \001(\005\022\021\n\tget_youli\030\002 \001(\005\"\031\n\027YouliMap"
    "ResetMapRequest\".\n\030YouliMapResetMapRespo"
    "nse\022\022\n\nerror_code\030\001 \001(\005\"\031\n\027CheckGuildCir"
    "cleRequest\".\n\030CheckGuildCircleResponse\022\022"
    "\n\nerror_code\030\001 \001(\005\"$\n\017TakeGiftRequest\022\021\n"
    "\tgift_flag\030\001 \002(\005\"&\n\020TakeGiftResponse\022\022\n\n"
    "error_code\030\001 \002(\005\"B\n\021CreateTeamRequest\022-\n"
    "\tteam_info\030\001 \002(\0132\032.protocols.common.Team"
    "Info\"W\n\022CreateTeamResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\022-\n\tteam_info\030\002 \001(\0132\032.protocols.co"
    "mmon.TeamInfo\"\023\n\021SearchTeamRequest\"W\n\022Se"
    "archTeamResponse\022\022\n\nerror_code\030\001 \002(\005\022-\n\t"
    "team_info\030\002 \003(\0132\032.protocols.common.TeamI"
    "nfo\"\245\001\n\024TeamLineupSetRequest\022:\n\toperatio"
    "n\030\001 \002(\0162\'.protocols.common.TEAM_LINEUP_O"
    "PERATION\022\034\n\024team_battle_skill_id\030\002 \001(\005\0223"
    "\n\014fighter_info\030\003 \003(\0132\035.protocols.common."
    "FighterInfo\"Z\n\025TeamLineupSetResponse\022\022\n\n"
    "error_code\030\001 \002(\005\022-\n\tteam_info\030\002 \001(\0132\032.pr"
    "otocols.common.TeamInfo\"I\n\030TeamSettingMo"
    "difyRequest\022-\n\tteam_info\030\001 \002(\0132\032.protoco"
    "ls.common.TeamInfo\"^\n\031TeamSettingModifyR"
    "esponse\022\022\n\nerror_code\030\001 \002(\005\022-\n\tteam_info"
    "\030\002 \001(\0132\032.protocols.common.TeamInfo\"`\n\024Te"
    "amOperationRequest\0223\n\toperation\030\001 \002(\0162 ."
    "protocols.common.TEAM_OPERATION\022\023\n\013objec"
    "t_guid\030\002 \001(\003\"\217\001\n\025TeamOperationResponse\022\022"
    "\n\nerror_code\030\001 \002(\005\0223\n\toperation\030\002 \002(\0162 ."
    "protocols.common.TEAM_OPERATION\022-\n\tteam_"
    "info\030\003 \001(\0132\032.protocols.common.TeamInfo\"\'"
    "\n\024ApplyJoinTeamRequest\022\017\n\007team_id\030\001 \002(\005\""
    "+\n\025ApplyJoinTeamResponse\022\022\n\nerror_code\030\001"
    " \002(\005\"L\n\027ApplyJoinTeamListNotify\0221\n\007appli"
    "er\030\001 \003(\0132 .protocols.common.TeamMemberIn"
    "fo\"e\n\031ApplyJoinTeamReplyRequest\022\023\n\013objec"
    "t_guid\030\001 \002(\003\0223\n\006result\030\002 \002(\0162#.protocols"
    ".common.TEAM_APPLY_RESULT\"0\n\032ApplyJoinTe"
    "amReplyResponse\022\022\n\nerror_code\030\001 \002(\005\"y\n\030A"
    "pplyJoinTeamReplyNotify\022\023\n\013leader_guid\030\001"
    " \002(\003\022\023\n\013leader_name\030\002 \001(\t\0223\n\006result\030\003 \001("
    "\0162#.protocols.common.TEAM_APPLY_RESULT\","
    "\n\025InviteJoinTeamRequest\022\023\n\013object_guid\030\001"
    " \002(\003\",\n\026InviteJoinTeamResponse\022\022\n\nerror_"
    "code\030\001 \002(\005\"=\n\024InviteJoinTeamNotify\022\024\n\014in"
    "viter_name\030\001 \002(\t\022\017\n\007team_id\030\002 \002(\005\"b\n\032Inv"
    "iteJoinTeamReplyRequest\022\017\n\007team_id\030\001 \002(\005"
    "\0223\n\006result\030\002 \002(\0162#.protocols.common.TEAM"
    "_APPLY_RESULT\"1\n\033InviteJoinTeamReplyResp"
    "onse\022\022\n\nerror_code\030\001 \002(\005\"/\n\031InviteJoinTe"
    "amReplyNotify\022\022\n\nerror_code\030\001 \002(\005\"\032\n\030Get"
    "TeamDetailInfoRequest\"\032\n\030RecruitTeamMemb"
    "erRequest\"\033\n\031TeamPlayerKickedOutNotify\"T"
    "\n\031RecruitTeamMemberResponse\0227\n\rnearby_pl"
    "ayer\030\001 \003(\0132 .protocols.common.TeamMember"
    "Info\"E\n\024TeamInfoUpdateNotify\022-\n\tteam_inf"
    "o\030\001 \002(\0132\032.protocols.common.TeamInfo\"\213\001\n\022"
    "SyncTeamInfoNotify\022:\n\tsync_type\030\001 \002(\0162\'."
    "protocols.common.SERVER_SYNC_TEAM_TYPE\022\017"
    "\n\007team_id\030\002 \002(\005\022\023\n\013leader_guid\030\003 \002(\003\022\023\n\013"
    "member_guid\030\004 \003(\003\"\025\n\023GetArenaInfoRequest"
    "\"\201\003\n\025UpdateArenaInfoNotify\022\022\n\nerror_code"
    "\030\010 \002(\005\0224\n\tself_info\030\001 \002(\0132!.protocols.co"
    "mmon.ArenaPlayerInfo\0227\n\014top_ten_list\030\002 \003"
    "(\0132!.protocols.common.ArenaPlayerInfo\0229\n"
    "\016challenge_list\030\003 \003(\0132!.protocols.common"
    ".ArenaPlayerInfo\022\016\n\006box_id\030\004 \001(\005\022\024\n\014is_b"
    "ox_taken\030\005 \001(\005\022!\n\031time_need_to_next_rewa"
    "rds\030\n \001(\005\022\034\n\024left_challenge_times\030\006 \001(\005\022"
    "\037\n\027already_buy_times_today\030\t \001(\005\022\"\n\032time"
    "_need_to_new_challenge\030\007 \001(\003\"\031\n\027GetArena"
    "RankListRequest\"d\n\030GetArenaRankListRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\0224\n\trank_list\030\002 \003"
    "(\0132!.protocols.common.ArenaPlayerInfo\"\210\001"
    "\n\026ChallengePlayerRequest\0224\n\tself_info\030\001 "
    "\002(\0132!.protocols.common.ArenaPlayerInfo\0228"
    "\n\rdefender_info\030\002 \002(\0132!.protocols.common"
    ".ArenaPlayerInfo\"=\n\027ChallengePlayerRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\022\016\n\006is_win\030\002 \001(\005\""
    "(\n\026TakeTreasureBoxRequest\022\016\n\006box_id\030\001 \002("
    "\005\"-\n\027TakeTreasureBoxResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"\266\001\n\025ArenaSelfNoticeNotify\022=\n\013no"
    "tice_type\030\001 \002(\0162(.protocols.common.ARENA"
    "_SELF_NOTICE_TYPE\022\027\n\017challenger_name\030\002 \002"
    "(\t\022\025\n\rdefender_name\030\003 \002(\t\022\033\n\023challenger_"
    "new_rank\030\005 \001(\005\022\021\n\tfight_key\030\004 \001(\003\"\322\001\n\027Ar"
    "enaPublicNoticeNotify\022\?\n\013notice_type\030\001 \002"
    "(\0162*.protocols.common.ARENA_PUBLIC_NOTIC"
    "E_TYPE\022\027\n\017challenger_name\030\002 \002(\t\022\025\n\rdefen"
    "der_name\030\003 \001(\t\022\026\n\016cont_win_times\030\004 \001(\005\022\033"
    "\n\023challenger_new_rank\030\005 \001(\005\022\021\n\tfight_key"
    "\030\006 \001(\003\"\223\001\n\030ArenaRecentMessageNotify\0229\n\010s"
    "elf_msg\030\001 \003(\0132\'.protocols.common.ArenaSe"
    "lfNoticeNotify\022<\n\tarena_msg\030\002 \003(\0132).prot"
    "ocols.common.ArenaPublicNoticeNotify\"K\n\022"
    "PublicNoticeNotify\022\023\n\013notice_type\030\001 \002(\005\022"
    "\017\n\007int_arg\030\002 \003(\005\022\017\n\007str_arg\030\003 \003(\t\"\026\n\024Get"
    "OnlineTimeRequest\"\?\n\017TimeBonusNotify\022\032\n\022"
    "time_need_for_next\030\001 \002(\005\022\020\n\010bonus_id\030\002 \002"
    "(\005\"\026\n\024TakeTimeBonusRequest\"U\n\025TakeTimeBo"
    "nusResponse\022\022\n\nerror_code\030\001 \002(\005\022(\n\004item\030"
    "\002 \003(\0132\032.protocols.common.ItemInfo\"\"\n Get"
    "InstanceWantedListInfoRequest\"{\n!GetInst"
    "anceWantedListInfoResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\022B\n\024instance_wanted_info\030\002 \003(\0132$.p"
    "rotocols.common.InstanceWantedInfo\"F\n\033Do"
    "InstanceWantedOnceRequest\022\023\n\013instance_id"
    "\030\001 \002(\005\022\022\n\ncard_index\030\002 \002(\005\"o\n\034DoInstance"
    "WantedOnceResponse\022\022\n\nerror_code\030\001 \002(\005\022;"
    "\n\rinstance_info\030\002 \001(\0132$.protocols.common"
    ".InstanceWantedInfo\"\033\n\031FastInstanceWante"
    "dRequest\"m\n\032FastInstanceWantedResponse\022\022"
    "\n\nerror_code\030\001 \002(\005\022;\n\rinstance_info\030\002 \003("
    "\0132$.protocols.common.InstanceWantedInfo\""
    "\037\n\035InstanceWantedAllResetRequest\"q\n\036Inst"
    "anceWantedAllResetResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\022;\n\rinstance_info\030\002 \003(\0132$.protocol"
    "s.common.InstanceWantedInfo\" \n\036InstanceW"
    "antedResetCostRequest\"K\n\037InstanceWantedR"
    "esetCostResponse\022\022\n\nerror_code\030\001 \002(\005\022\024\n\014"
    "need_diamond\030\002 \001(\005\"\033\n\031OpenMonsterExpBuff"
    "Request\"M\n\032OpenMonsterExpBuffResponse\022\022\n"
    "\nerror_code\030\001 \002(\005\022\033\n\023left_can_take_times"
    "\030\002 \001(\005\"/\n\031TakeMonsterExpBuffRequest\022\022\n\nt"
    "ake_times\030\001 \002(\005\"U\n\032TakeMonsterExpBuffRes"
    "ponse\022\022\n\nerror_code\030\001 \002(\005\022#\n\033left_monste"
    "r_exp_buff_times\030\002 \001(\005\"V\n\"TeamMemberOpen"
    "MonsterExpBuffNotify\022\023\n\013leader_guid\030\001 \002("
    "\003\022\033\n\023left_can_take_times\030\002 \001(\005\"\030\n\026GetLiv"
    "enessInfoRequest\"\262\001\n\027GetLivenessInfoResp"
    "onse\022\022\n\nerror_code\030\001 \002(\005\022\026\n\016liveness_tot"
    "al\030\002 \001(\005\0226\n\rliveness_list\030\003 \003(\0132\037.protoc"
    "ols.common.AttributeData\0223\n\naward_list\030\004"
    " \003(\0132\037.protocols.common.AttributeData\",\n"
    "\030TakeLivenessAwardRequest\022\020\n\010award_id\030\001 "
    "\002(\005\"/\n\031TakeLivenessAwardResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"z\n\024LivenessUpdateNotify\022\025\n\r"
    "liveness_type\030\001 \001(\005\022\026\n\016liveness_total\030\002 "
    "\001(\005\0223\n\naward_list\030\003 \003(\0132\037.protocols.comm"
    "on.AttributeData\"\030\n\026GetPlayerConfigReque"
    "st\"N\n\026SetPlayerConfigRequest\0224\n\013config_l"
    "ist\030\001 \003(\0132\037.protocols.common.AttributeDa"
    "ta\"-\n\027SetPlayerConfigResponse\022\022\n\nerror_c"
    "ode\030\001 \002(\005\"c\n\027GetPlayerConfigResponse\022\022\n\n"
    "error_code\030\001 \002(\005\0224\n\013config_list\030\002 \003(\0132\037."
    "protocols.common.AttributeData\"2\n\033FightW"
    "ithOtherPlayerRequest\022\023\n\013object_guid\030\001 \002"
    "(\003\"b\n\034FightWithOtherPlayerResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\022\023\n\013object_name\030\002 \001(\t\022\031\n\021i"
    "s_object_in_team\030\003 \001(\005\"z\n\031SendFightInvit"
    "ationNotify\022\023\n\013sender_guid\030\001 \002(\003\022\023\n\013send"
    "er_name\030\002 \002(\t\022\024\n\014sender_level\030\003 \001(\005\022\035\n\025i"
    "s_sender_team_leader\030\004 \001(\005\"G\n\027FightInvit"
    "eReplyRequest\022\024\n\014inviter_guid\030\001 \002(\003\022\026\n\016a"
    "gree_to_fight\030\002 \002(\005\".\n\030FightInviteReplyR"
    "esponse\022\022\n\nerror_code\030\001 \002(\005\"c\n\026FightInvi"
    "teReplyNotify\022\031\n\021is_agree_to_fight\030\001 \002(\005"
    "\022\023\n\013object_name\030\002 \001(\t\022\031\n\021is_object_in_te"
    "am\030\003 \001(\005\"{\n\027UpdateMonsterBuffNotify\022<\n\013u"
    "pdate_type\030\001 \002(\0162\'.protocols.common.Upda"
    "teMonsterBuffType\022\017\n\007buff_id\030\002 \001(\005\022\021\n\tle"
    "ft_time\030\003 \001(\005\"\336\001\n\027TeamChannelMemberNotif"
    "y\022B\n\013update_type\030\001 \002(\0162-.protocols.commo"
    "n.TeamChannelMemberNotifyType\022\030\n\020team_le"
    "ader_name\030\002 \001(\t\022\023\n\013object_guid\030\003 \001(\003\022\023\n\013"
    "object_name\030\004 \001(\t\022\021\n\tnew_level\030\005 \001(\005\022(\n\004"
    "item\030\006 \003(\0132\032.protocols.common.ItemInfo\"W"
    "\n\020UpdateBitRequest\022\014\n\004guid\030\004 \002(\003\022\013\n\003bit\030"
    "\001 \002(\005\022\022\n\007expired\030\002 \001(\005:\0010\022\024\n\005value\030\003 \001(\010"
    ":\005false\"\'\n\021UpdateBitResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"B\n\017UpdateBitNotify\022\013\n\003bit\030\001 \002(\005"
    "\022\014\n\004flag\030\003 \001(\005\022\024\n\005value\030\002 \001(\010:\005false\":\n\025"
    "PublishQuestionNotify\022\n\n\002id\030\001 \002(\005\022\025\n\rque"
    "stion_desc\030\002 \002(\t\"\200\001\n\022SendQAResultNotify\022"
    "\026\n\016winner_counter\030\001 \002(\005\0220\n\ntop_player\030\002 "
    "\003(\0132\034.protocols.common.PlayerInfo\022\016\n\006ans"
    "wer\030\003 \001(\t\022\020\n\010question\030\004 \001(\t\"]\n\027PlayerPhy"
    "StrengthUpdate\022B\n\021phy_strength_info\030\001 \001("
    "\0132\'.protocols.common.PlayerPhyStrengthIn"
    "fo\"(\n\022FollowBuddyRequest\022\022\n\nbuddy_guid\030\001"
    " \002(\003\"@\n\023FollowBuddyResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\022\025\n\nbuddy_guid\030\002 \001(\003:\0010\";\n\021Follow"
    "BuddyNotify\022\022\n\nowner_guid\030\001 \002(\003\022\022\n\nbuddy"
    "_guid\030\002 \002(\003\"\025\n\023ServerStatusRequest\"U\n\024Se"
    "rverStatusResponse\022\021\n\006online\030\001 \001(\005:\0010\022\024\n"
    "\tavg_delay\030\002 \001(\005:\0010\022\024\n\tmax_delay\030\003 \001(\005:\001"
    "0\"\025\n\023ActLuckyOnceRequest\"\210\001\n\024ActLuckyOnc"
    "eResponse\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nbonus_t"
    "ype\030\002 \001(\005\022\027\n\017left_lucky_time\030\003 \001(\005\022\017\n\007it"
    "em_id\030\004 \001(\005\022\022\n\nitem_count\030\005 \001(\005\022\n\n\002id\030\006 "
    "\001(\005\")\n\026ActExchangeItemRequest\022\017\n\007item_id"
    "\030\001 \001(\005\"R\n\027ActExchangeItemResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\022\017\n\007item_id\030\002 \001(\005\022\022\n\nitem_c"
    "ount\030\003 \001(\005\"\025\n\023GetTitleListRequest\":\n\024Get"
    "TitleListResponse\022\022\n\nerror_code\030\001 \002(\005\022\016\n"
    "\006titles\030\002 \003(\005\"$\n\023SetRoleTitleRequest\022\r\n\005"
    "title\030\001 \002(\005\"*\n\024SetRoleTitleResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\"1\n\022SetRoleTitleNotify\022\014\n"
    "\004guid\030\001 \001(\003\022\r\n\005title\030\002 \001(\005\"C\n\022GetRoleTit"
    "leNotify\022\024\n\tadd_title\030\001 \001(\005:\0010\022\027\n\014remove"
    "_title\030\002 \001(\005:\0010\"\027\n\025GetOfflineGiftRequest"
    "\",\n\026GetOfflineGiftResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\"\032\n\030GetOpenedActivityRequest\"j\n\031Ge"
    "tOpenedActivityResponse\022\022\n\nerror_code\030\001 "
    "\002(\005\0229\n\nactivities\030\002 \003(\0162%.protocols.comm"
    "on.StartupActivityType\"\201\001\n\024ActivityChang"
    "eNotify\0227\n\010activity\030\001 \001(\0162%.protocols.co"
    "mmon.StartupActivityType\0220\n\006status\030\002 \001(\016"
    "2 .protocols.common.ActivityStatus\"\024\n\022Pr"
    "acticeExpRequest\")\n\023PracticeExpResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\">\n\021PracticeExpNotify"
    "\022\014\n\004guid\030\001 \002(\003\022\016\n\006status\030\002 \002(\005\022\013\n\003exp\030\003 "
    "\001(\005\".\n\020YinglingSoulInfo\022\014\n\004guid\030\001 \001(\003\022\014\n"
    "\004soul\030\002 \001(\005\"3\n\023SoulExchangeRequest\022\034\n\rex"
    "change_flag\030\001 \001(\010:\005false\"\315\001\n\024SoulExchang"
    "eResponse\022\022\n\nerror_code\030\001 \002(\005\0229\n\ryinglin"
    "g_list\030\002 \003(\0132\".protocols.common.Yingling"
    "SoulInfo\022\023\n\013stone_count\030\003 \001(\005\022\025\n\rfeather"
    "_count\030\004 \001(\005\022\035\n\025lingli_exchange_count\030\005 "
    "\001(\005\022\033\n\023item_exchange_count\030\006 \001(\005\"\034\n\032Lobb"
    "yCustomPassInfoRequest\"R\n\022CustomPassWait"
    "Info\022\017\n\007pass_id\030\001 \002(\005\022\020\n\010grade_id\030\002 \002(\005\022"
    "\031\n\021wait_player_count\030\003 \002(\005\"n\n\033LobbyCusto"
    "mPassInfoResponse\022\022\n\nerror_code\030\001 \002(\005\022;\n"
    "\rall_pass_info\030\002 \003(\0132$.protocols.common."
    "CustomPassWaitInfo\"b\n\032PlayerEnterPassRoo"
    "mRequest\022\017\n\007pass_id\030\001 \002(\005\022\020\n\010grade_id\030\002 "
    "\002(\005\022!\n\031enter_or_refrash_or_leave\030\003 \002(\005\"\341"
    "\001\n\010RoomInfo\022\017\n\007room_id\030\001 \002(\005\022\025\n\rroom_own"
    "er_id\030\002 \002(\003\022\017\n\007is_lock\030\003 \002(\010\022\034\n\024current_"
    "player_count\030\004 \002(\005\022\030\n\020max_player_count\030\005"
    " \002(\005\022\023\n\013leader_name\030\006 \002(\t\022\022\n\nleader_sex\030"
    "\007 \002(\005\022\030\n\020leader_vip_level\030\010 \002(\005\022\017\n\007pass_"
    "id\030\t \002(\005\022\020\n\010grade_id\030\n \002(\005\"\203\001\n\033PlayerEnt"
    "erPassRoomResponse\022\022\n\nerror_code\030\001 \002(\005\022\017"
    "\n\007pass_id\030\002 \001(\005\022\020\n\010grade_id\030\003 \001(\005\022-\n\troo"
    "m_info\030\004 \003(\0132\032.protocols.common.RoomInfo"
    "\"\233\001\n\033PlayerCreatePassRoomRequest\022!\n\031crea"
    "te_or_enter_or_random\030\001 \002(\005\022\017\n\007pass_id\030\002"
    " \001(\005\022\020\n\010grade_id\030\003 \001(\005\022\017\n\007room_id\030\004 \001(\005\022"
    "\030\n\020max_player_count\030\005 \001(\005\022\013\n\003pwd\030\006 \001(\t\"\225"
    "\001\n\034PlayerCreatePassRoomResponse\022\022\n\nerror"
    "_code\030\001 \002(\005\022\017\n\007room_id\030\002 \001(\005\022\017\n\007pass_id\030"
    "\003 \001(\005\022\020\n\010grade_id\030\004 \001(\005\022-\n\tteam_info\030\005 \001"
    "(\0132\032.protocols.common.TeamInfo\"\205\001\n\022Opera"
    "teRoomRequest\0223\n\toperation\030\001 \002(\0162 .proto"
    "cols.common.ROOM_OPERATION\022\023\n\013object_gui"
    "d\030\002 \001(\003\022\024\n\014ready_status\030\003 \001(\010\022\017\n\007new_pwd"
    "\030\004 \001(\t\"\215\001\n\023OperateRoomResponse\022\022\n\nerror_"
    "code\030\001 \002(\005\0223\n\toperation\030\002 \002(\0162 .protocol"
    "s.common.ROOM_OPERATION\022-\n\tteam_info\030\003 \001"
    "(\0132\032.protocols.common.TeamInfo\"Z\n\030PassRo"
    "omInfoUpdateNotify\022\017\n\007room_id\030\001 \002(\005\022-\n\tt"
    "eam_info\030\002 \002(\0132\032.protocols.common.TeamIn"
    "fo\"J\n\033InvitePlayerJoinRoomRequest\022\023\n\013obj"
    "ect_guid\030\001 \002(\003\022\026\n\016is_fast_invite\030\002 \002(\010\"2"
    "\n\034InvitePlayerJoinRoomResponse\022\022\n\nerror_"
    "code\030\001 \002(\005\"_\n\024PassRoomInviteNotify\022\017\n\007ro"
    "om_id\030\001 \002(\005\022\023\n\013leader_name\030\002 \002(\t\022\017\n\007pass"
    "_id\030\003 \002(\005\022\020\n\010grade_id\030\004 \002(\005\"\?\n\032PassLobby"
    "PlayerListRequest\022\017\n\007pass_id\030\001 \002(\005\022\020\n\010gr"
    "ade_id\030\002 \002(\005\"d\n\033PassLobbyPlayerListRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\0221\n\013player_list\030\002"
    " \003(\0132\034.protocols.common.PlayerInfo\"\032\n\030Pl"
    "ayerKickFormRoomNotify\"1\n\036LeaderStartRoo"
    "mInstanceRequest\022\017\n\007room_id\030\001 \002(\005\"5\n\037Lea"
    "derStartRoomInstanceResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"$\n\024HitYellowDuckRequest\022\014\n\004coin"
    "\030\001 \002(\005\"+\n\025HitYellowDuckResponse\022\022\n\nerror"
    "_code\030\001 \002(\005", 28571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_client.proto", &protobuf_RegisterTypes);
  InitConnectionRequest::default_instance_ = new InitConnectionRequest();
  InitConnectionResponse::default_instance_ = new InitConnectionResponse();
  HeartBeatRequest::default_instance_ = new HeartBeatRequest();
  HeartBeatResponse::default_instance_ = new HeartBeatResponse();
  UrlParam::default_instance_ = new UrlParam();
  AccountLoginRequest::default_instance_ = new AccountLoginRequest();
  AccountLoginResponse::default_instance_ = new AccountLoginResponse();
  AccountReloginNotify::default_instance_ = new AccountReloginNotify();
  CreatePlayerRequest::default_instance_ = new CreatePlayerRequest();
  CreatePlayerResponse::default_instance_ = new CreatePlayerResponse();
  RandomNameRequest::default_instance_ = new RandomNameRequest();
  RandomNameResponse::default_instance_ = new RandomNameResponse();
  DeletePlayerRequest::default_instance_ = new DeletePlayerRequest();
  DeletePlayerResponse::default_instance_ = new DeletePlayerResponse();
  PlayerLoginRequest::default_instance_ = new PlayerLoginRequest();
  PlayerLoginResponse::default_instance_ = new PlayerLoginResponse();
  ServerShutdownNotify::default_instance_ = new ServerShutdownNotify();
  EnterMapRequest::default_instance_ = new EnterMapRequest();
  EnterMapResponse::default_instance_ = new EnterMapResponse();
  TransportRequest::default_instance_ = new TransportRequest();
  TransportResponse::default_instance_ = new TransportResponse();
  TeleportRequest::default_instance_ = new TeleportRequest();
  TeleportResponse::default_instance_ = new TeleportResponse();
  EnterInstanceRequest::default_instance_ = new EnterInstanceRequest();
  EnterInstanceResponse::default_instance_ = new EnterInstanceResponse();
  LeaveInstanceRequest::default_instance_ = new LeaveInstanceRequest();
  LeaveInstanceResponse::default_instance_ = new LeaveInstanceResponse();
  GetInstanceItemRequest::default_instance_ = new GetInstanceItemRequest();
  GetInstanceItemResponse::default_instance_ = new GetInstanceItemResponse();
  ListPassInstanceRequest::default_instance_ = new ListPassInstanceRequest();
  ListPassInstanceResponse::default_instance_ = new ListPassInstanceResponse();
  GetInstanceDetailRequest::default_instance_ = new GetInstanceDetailRequest();
  GetInstanceDetailResponse::default_instance_ = new GetInstanceDetailResponse();
  PassInstanceNotify::default_instance_ = new PassInstanceNotify();
  PlayerInfoRequest::default_instance_ = new PlayerInfoRequest();
  PlayerInfoResponse::default_instance_ = new PlayerInfoResponse();
  BuddyDetailInfoRequest::default_instance_ = new BuddyDetailInfoRequest();
  BuddyDetailInfoResponse::default_instance_ = new BuddyDetailInfoResponse();
  AttrChangeNotify::default_instance_ = new AttrChangeNotify();
  PlayerLogout::default_instance_ = new PlayerLogout();
  KickPlayerRequest::default_instance_ = new KickPlayerRequest();
  KickPlayerResponse::default_instance_ = new KickPlayerResponse();
  KickPlayerNotify::default_instance_ = new KickPlayerNotify();
  GetYinglingListRequest::default_instance_ = new GetYinglingListRequest();
  GetYinglingListResponse::default_instance_ = new GetYinglingListResponse();
  NotifyError::default_instance_ = new NotifyError();
  GetYinglingHiringStatusReq::default_instance_ = new GetYinglingHiringStatusReq();
  YinglingHiringStatusNotify::default_instance_ = new YinglingHiringStatusNotify();
  OpenYinglingHiringSlotReq::default_instance_ = new OpenYinglingHiringSlotReq();
  OpenYinglingHiringSlotNtf::default_instance_ = new OpenYinglingHiringSlotNtf();
  OpenYinglingSlotReq::default_instance_ = new OpenYinglingSlotReq();
  OpenYinglingSlotResponse::default_instance_ = new OpenYinglingSlotResponse();
  OpenYinglingSlotNtf::default_instance_ = new OpenYinglingSlotNtf();
  RefeshYinglingHiringListReq::default_instance_ = new RefeshYinglingHiringListReq();
  AutoRefeshYinglingHiringListReq::default_instance_ = new AutoRefeshYinglingHiringListReq();
  AutoRefeshYinglingHiringListRep::default_instance_ = new AutoRefeshYinglingHiringListRep();
  HiringYingling::default_instance_ = new HiringYingling();
  RefeshYinglingHiringListNtf::default_instance_ = new RefeshYinglingHiringListNtf();
  HireYinglingRequest::default_instance_ = new HireYinglingRequest();
  GetLingliRequest::default_instance_ = new GetLingliRequest();
  ConvertYinglingRequest::default_instance_ = new ConvertYinglingRequest();
  LingliUpdateNotify::default_instance_ = new LingliUpdateNotify();
  AddYinglingNotify::default_instance_ = new AddYinglingNotify();
  DelHiringYinglingNotify::default_instance_ = new DelHiringYinglingNotify();
  FireYinglingRequest::default_instance_ = new FireYinglingRequest();
  DelYinglingNotify::default_instance_ = new DelYinglingNotify();
  GetYinglingComboDataRequest::default_instance_ = new GetYinglingComboDataRequest();
  GetYinglingComboDataResponse::default_instance_ = new GetYinglingComboDataResponse();
  GetYinglingComboDataNotify::default_instance_ = new GetYinglingComboDataNotify();
  UpgradeYinglingComboRequest::default_instance_ = new UpgradeYinglingComboRequest();
  UpgradeYinglingComboResponse::default_instance_ = new UpgradeYinglingComboResponse();
  MoveStartRequest::default_instance_ = new MoveStartRequest();
  MoveStartResponse::default_instance_ = new MoveStartResponse();
  MoveStartNotify::default_instance_ = new MoveStartNotify();
  EnterViewNotify::default_instance_ = new EnterViewNotify();
  LeaveViewNotify::default_instance_ = new LeaveViewNotify();
  GameStatusNotify::default_instance_ = new GameStatusNotify();
  ChangeMapNotify::default_instance_ = new ChangeMapNotify();
  ChooseAutoFightNPCRequest::default_instance_ = new ChooseAutoFightNPCRequest();
  ChooseAutoFightNPCResponse::default_instance_ = new ChooseAutoFightNPCResponse();
  AutoFightMonsterRequest::default_instance_ = new AutoFightMonsterRequest();
  AutoFightMonsterResponse::default_instance_ = new AutoFightMonsterResponse();
  StopAutoFightRequest::default_instance_ = new StopAutoFightRequest();
  StopAutoFightResponse::default_instance_ = new StopAutoFightResponse();
  AutoFightMonsterUpdateNotify::default_instance_ = new AutoFightMonsterUpdateNotify();
  SpeedUpAutoFightRequest::default_instance_ = new SpeedUpAutoFightRequest();
  SpeedUpAutoFightResponse::default_instance_ = new SpeedUpAutoFightResponse();
  GetPlayerViewRequest::default_instance_ = new GetPlayerViewRequest();
  GetPlayerViewResponse::default_instance_ = new GetPlayerViewResponse();
  GetSkillListRequest::default_instance_ = new GetSkillListRequest();
  GetSkillListResponse::default_instance_ = new GetSkillListResponse();
  GetBattleSkillListRequest::default_instance_ = new GetBattleSkillListRequest();
  GetBattleSkillListResponse::default_instance_ = new GetBattleSkillListResponse();
  UpdateBattleSkillNotify::default_instance_ = new UpdateBattleSkillNotify();
  SkillPoolChangeNotify::default_instance_ = new SkillPoolChangeNotify();
  UpdateSkillNotify::default_instance_ = new UpdateSkillNotify();
  UpgradeBattleSkillRequest::default_instance_ = new UpgradeBattleSkillRequest();
  UpgradeBattleSkillResponse::default_instance_ = new UpgradeBattleSkillResponse();
  UpgradeBattleSkillNotify::default_instance_ = new UpgradeBattleSkillNotify();
  UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance_ = new UpgradeBattleSkillNotify_BattleSkillLevelInfo();
  UpdateYouliNotify::default_instance_ = new UpdateYouliNotify();
  GetEquipDetailRequest::default_instance_ = new GetEquipDetailRequest();
  GetEquipDetailResponse::default_instance_ = new GetEquipDetailResponse();
  GetLineupListRequest::default_instance_ = new GetLineupListRequest();
  GetLineupListResponse::default_instance_ = new GetLineupListResponse();
  GetLineupFightCapacityRequest::default_instance_ = new GetLineupFightCapacityRequest();
  GetLineupFightCapacityResponse::default_instance_ = new GetLineupFightCapacityResponse();
  LineUpOperationRequest::default_instance_ = new LineUpOperationRequest();
  LineUpOperationResponse::default_instance_ = new LineUpOperationResponse();
  UnequipAllRequest::default_instance_ = new UnequipAllRequest();
  UnequipAllResponse::default_instance_ = new UnequipAllResponse();
  PlayerUpdateNotify::default_instance_ = new PlayerUpdateNotify();
  EquipSkillRequest::default_instance_ = new EquipSkillRequest();
  EquipSkillResponse::default_instance_ = new EquipSkillResponse();
  UnloadSkillRequest::default_instance_ = new UnloadSkillRequest();
  UnloadSkillResponse::default_instance_ = new UnloadSkillResponse();
  InjectSkillExpRequest::default_instance_ = new InjectSkillExpRequest();
  InjectSkillExpResponse::default_instance_ = new InjectSkillExpResponse();
  PracticeSkillRequest::default_instance_ = new PracticeSkillRequest();
  PracticeSkillResponse::default_instance_ = new PracticeSkillResponse();
  SpeedupPracticeSkillRequest::default_instance_ = new SpeedupPracticeSkillRequest();
  SpeedupPracticeSkillResponse::default_instance_ = new SpeedupPracticeSkillResponse();
  StopPracticeSkillRequest::default_instance_ = new StopPracticeSkillRequest();
  StopPracticeSkillResponse::default_instance_ = new StopPracticeSkillResponse();
  PracticeSkillNotify::default_instance_ = new PracticeSkillNotify();
  LevelUpNotify::default_instance_ = new LevelUpNotify();
  UpdateMoneyNotify::default_instance_ = new UpdateMoneyNotify();
  UpdateItemNotify::default_instance_ = new UpdateItemNotify();
  UpdateExpNotify::default_instance_ = new UpdateExpNotify();
  GetQuestListRequest::default_instance_ = new GetQuestListRequest();
  GetQuestsListResponse::default_instance_ = new GetQuestsListResponse();
  AcceptQuestRequest::default_instance_ = new AcceptQuestRequest();
  FinishQuestRequest::default_instance_ = new FinishQuestRequest();
  CancelQuestRequest::default_instance_ = new CancelQuestRequest();
  QuestActionRequest::default_instance_ = new QuestActionRequest();
  QuestsNotify::default_instance_ = new QuestsNotify();
  AcceptXunluoQuestRequest::default_instance_ = new AcceptXunluoQuestRequest();
  AcceptXunluoQuestResponse::default_instance_ = new AcceptXunluoQuestResponse();
  BuddyInjectSoulRequest::default_instance_ = new BuddyInjectSoulRequest();
  BuddyInjectSoulResponse::default_instance_ = new BuddyInjectSoulResponse();
  BuddySpaceTimeStatusRequest::default_instance_ = new BuddySpaceTimeStatusRequest();
  BuddySpaceTimeStatus::default_instance_ = new BuddySpaceTimeStatus();
  BuddySpaceTimeStatusResponse::default_instance_ = new BuddySpaceTimeStatusResponse();
  BuddyChanllengeSpaceTimeRequest::default_instance_ = new BuddyChanllengeSpaceTimeRequest();
  BuddyChanllengeSpaceTimeResponse::default_instance_ = new BuddyChanllengeSpaceTimeResponse();
  BuddySoulUpdateNotify::default_instance_ = new BuddySoulUpdateNotify();
  EquipmentShengxingOpenRequest::default_instance_ = new EquipmentShengxingOpenRequest();
  EquipmentShengxingOpenResponse::default_instance_ = new EquipmentShengxingOpenResponse();
  EquipmentShengxingRequest::default_instance_ = new EquipmentShengxingRequest();
  EquipmentShengxingResponse::default_instance_ = new EquipmentShengxingResponse();
  XilianData::default_instance_ = new XilianData();
  EquipmentXilianStatusRequest::default_instance_ = new EquipmentXilianStatusRequest();
  EquipmentXilianStatusResponse::default_instance_ = new EquipmentXilianStatusResponse();
  EquipmentXilianRequest::default_instance_ = new EquipmentXilianRequest();
  EquipmentXilianResponse::default_instance_ = new EquipmentXilianResponse();
  EquipmentLockXilianAttrRequest::default_instance_ = new EquipmentLockXilianAttrRequest();
  EquipmentLockXilianAttrResponse::default_instance_ = new EquipmentLockXilianAttrResponse();
  EquipmentInheritRequest::default_instance_ = new EquipmentInheritRequest();
  EquipmentInheritResponse::default_instance_ = new EquipmentInheritResponse();
  EquipmentRecycleRequest::default_instance_ = new EquipmentRecycleRequest();
  EquipmentRecycleResponse::default_instance_ = new EquipmentRecycleResponse();
  BuddyDetailUpdateNotify::default_instance_ = new BuddyDetailUpdateNotify();
  BagItemListNotify::default_instance_ = new BagItemListNotify();
  EquipUpdateNotify::default_instance_ = new EquipUpdateNotify();
  RoleCoolDownRequest::default_instance_ = new RoleCoolDownRequest();
  RoleCoolDownNotify::default_instance_ = new RoleCoolDownNotify();
  RoleCoolDownClearRequest::default_instance_ = new RoleCoolDownClearRequest();
  RoleCoolDownClearResponse::default_instance_ = new RoleCoolDownClearResponse();
  RoleDailyLimitRequest::default_instance_ = new RoleDailyLimitRequest();
  RoleDailyLimitUpdateNotify::default_instance_ = new RoleDailyLimitUpdateNotify();
  PurchaseLimitCountRequest::default_instance_ = new PurchaseLimitCountRequest();
  PurchaseLimitCountResponse::default_instance_ = new PurchaseLimitCountResponse();
  DailyQuestListRequest::default_instance_ = new DailyQuestListRequest();
  DailyQuestListNotify::default_instance_ = new DailyQuestListNotify();
  RefreshDailyQuestRequest::default_instance_ = new RefreshDailyQuestRequest();
  RefreshDailyQuestResponse::default_instance_ = new RefreshDailyQuestResponse();
  ExchangeCodeRequest::default_instance_ = new ExchangeCodeRequest();
  ExchangeCodeResponse::default_instance_ = new ExchangeCodeResponse();
  PlayerFlagsRequest::default_instance_ = new PlayerFlagsRequest();
  PlayerFlagsResponse::default_instance_ = new PlayerFlagsResponse();
  PlayerSetFlagRequest::default_instance_ = new PlayerSetFlagRequest();
  PlayerSetFlagResponse::default_instance_ = new PlayerSetFlagResponse();
  PlayerFlagUpdateNotify::default_instance_ = new PlayerFlagUpdateNotify();
  PlayerHideNpcRequest::default_instance_ = new PlayerHideNpcRequest();
  PlayerHideNpcResponse::default_instance_ = new PlayerHideNpcResponse();
  PlayerHideNpcUpdateNotify::default_instance_ = new PlayerHideNpcUpdateNotify();
  StartCollectRequest::default_instance_ = new StartCollectRequest();
  StartCollectResponse::default_instance_ = new StartCollectResponse();
  FinishCollectRequest::default_instance_ = new FinishCollectRequest();
  FinishCollectResponse::default_instance_ = new FinishCollectResponse();
  GetTrainAttributeRequest::default_instance_ = new GetTrainAttributeRequest();
  GetTrainAttributeResponse::default_instance_ = new GetTrainAttributeResponse();
  TrainAttributeRequest::default_instance_ = new TrainAttributeRequest();
  TrainAttributeResponse::default_instance_ = new TrainAttributeResponse();
  TrainAttributeNotify::default_instance_ = new TrainAttributeNotify();
  SaveTrainAttributeRequest::default_instance_ = new SaveTrainAttributeRequest();
  SaveTrainAttributeResponse::default_instance_ = new SaveTrainAttributeResponse();
  GuildInfoUpdateNotify::default_instance_ = new GuildInfoUpdateNotify();
  VipInfoUpdateNotify::default_instance_ = new VipInfoUpdateNotify();
  FunctionLimitRequest::default_instance_ = new FunctionLimitRequest();
  FunctionLimitResponse::default_instance_ = new FunctionLimitResponse();
  FunctionLimitUpdateNotify::default_instance_ = new FunctionLimitUpdateNotify();
  GetDailyGiftInfoRequest::default_instance_ = new GetDailyGiftInfoRequest();
  GetDailyGiftInfoResponse::default_instance_ = new GetDailyGiftInfoResponse();
  DailyGiftInfoUpdateNotify::default_instance_ = new DailyGiftInfoUpdateNotify();
  ApplyDailyGiftRequest::default_instance_ = new ApplyDailyGiftRequest();
  ApplyDailyGiftResponse::default_instance_ = new ApplyDailyGiftResponse();
  GetStackableOnlineGiftRequest::default_instance_ = new GetStackableOnlineGiftRequest();
  StackableOnlineGift::default_instance_ = new StackableOnlineGift();
  GetStackableOnlineGiftResponse::default_instance_ = new GetStackableOnlineGiftResponse();
  StackableOnlineGiftUpdateNotify::default_instance_ = new StackableOnlineGiftUpdateNotify();
  ApplyStackableOnlineGiftRequest::default_instance_ = new ApplyStackableOnlineGiftRequest();
  ApplyStackableOnlineGiftResponse::default_instance_ = new ApplyStackableOnlineGiftResponse();
  AnnouncementNotify::default_instance_ = new AnnouncementNotify();
  GemUpgradeRequest::default_instance_ = new GemUpgradeRequest();
  GemUpgrateResponse::default_instance_ = new GemUpgrateResponse();
  GemInsertRequest::default_instance_ = new GemInsertRequest();
  GemInsertResponse::default_instance_ = new GemInsertResponse();
  GemRemoveRequest::default_instance_ = new GemRemoveRequest();
  GemRemoveResponse::default_instance_ = new GemRemoveResponse();
  MakeSocketRequest::default_instance_ = new MakeSocketRequest();
  MakeSocketResponse::default_instance_ = new MakeSocketResponse();
  GetStartupActivityStatusRequest::default_instance_ = new GetStartupActivityStatusRequest();
  GetStartupActivityStatusResponse::default_instance_ = new GetStartupActivityStatusResponse();
  StartupActivityStatus::default_instance_ = new StartupActivityStatus();
  StartupActivityStatusNotify::default_instance_ = new StartupActivityStatusNotify();
  GetGuildCrystalStatusRequest::default_instance_ = new GetGuildCrystalStatusRequest();
  GetGuildCrystalStatusResponse::default_instance_ = new GetGuildCrystalStatusResponse();
  GuildStartCrystalTowerActivityRequest::default_instance_ = new GuildStartCrystalTowerActivityRequest();
  GuildStartCrystalTowerActivityResponse::default_instance_ = new GuildStartCrystalTowerActivityResponse();
  GuildDonateRequest::default_instance_ = new GuildDonateRequest();
  GuildDonateResponse::default_instance_ = new GuildDonateResponse();
  GuildContribNotify::default_instance_ = new GuildContribNotify();
  GuildCrystalTowerActivityNotify::default_instance_ = new GuildCrystalTowerActivityNotify();
  PickGuildCrystalRewardRequest::default_instance_ = new PickGuildCrystalRewardRequest();
  PickGuildCrystalRewardResponse::default_instance_ = new PickGuildCrystalRewardResponse();
  PickGuildCrystalRewardNotify::default_instance_ = new PickGuildCrystalRewardNotify();
  QueryYouliMapDataRequest::default_instance_ = new QueryYouliMapDataRequest();
  QueryYouliMapDataResponse::default_instance_ = new QueryYouliMapDataResponse();
  YouliMapDataNotify::default_instance_ = new YouliMapDataNotify();
  YouliMapDiceRequest::default_instance_ = new YouliMapDiceRequest();
  YouliMapDiceResponse::default_instance_ = new YouliMapDiceResponse();
  YouliMapAutoDiceRequest::default_instance_ = new YouliMapAutoDiceRequest();
  YouliMapAutoDiceResponse::default_instance_ = new YouliMapAutoDiceResponse();
  YouliMapDiceNotify::default_instance_ = new YouliMapDiceNotify();
  YouliMapResetMapRequest::default_instance_ = new YouliMapResetMapRequest();
  YouliMapResetMapResponse::default_instance_ = new YouliMapResetMapResponse();
  CheckGuildCircleRequest::default_instance_ = new CheckGuildCircleRequest();
  CheckGuildCircleResponse::default_instance_ = new CheckGuildCircleResponse();
  TakeGiftRequest::default_instance_ = new TakeGiftRequest();
  TakeGiftResponse::default_instance_ = new TakeGiftResponse();
  CreateTeamRequest::default_instance_ = new CreateTeamRequest();
  CreateTeamResponse::default_instance_ = new CreateTeamResponse();
  SearchTeamRequest::default_instance_ = new SearchTeamRequest();
  SearchTeamResponse::default_instance_ = new SearchTeamResponse();
  TeamLineupSetRequest::default_instance_ = new TeamLineupSetRequest();
  TeamLineupSetResponse::default_instance_ = new TeamLineupSetResponse();
  TeamSettingModifyRequest::default_instance_ = new TeamSettingModifyRequest();
  TeamSettingModifyResponse::default_instance_ = new TeamSettingModifyResponse();
  TeamOperationRequest::default_instance_ = new TeamOperationRequest();
  TeamOperationResponse::default_instance_ = new TeamOperationResponse();
  ApplyJoinTeamRequest::default_instance_ = new ApplyJoinTeamRequest();
  ApplyJoinTeamResponse::default_instance_ = new ApplyJoinTeamResponse();
  ApplyJoinTeamListNotify::default_instance_ = new ApplyJoinTeamListNotify();
  ApplyJoinTeamReplyRequest::default_instance_ = new ApplyJoinTeamReplyRequest();
  ApplyJoinTeamReplyResponse::default_instance_ = new ApplyJoinTeamReplyResponse();
  ApplyJoinTeamReplyNotify::default_instance_ = new ApplyJoinTeamReplyNotify();
  InviteJoinTeamRequest::default_instance_ = new InviteJoinTeamRequest();
  InviteJoinTeamResponse::default_instance_ = new InviteJoinTeamResponse();
  InviteJoinTeamNotify::default_instance_ = new InviteJoinTeamNotify();
  InviteJoinTeamReplyRequest::default_instance_ = new InviteJoinTeamReplyRequest();
  InviteJoinTeamReplyResponse::default_instance_ = new InviteJoinTeamReplyResponse();
  InviteJoinTeamReplyNotify::default_instance_ = new InviteJoinTeamReplyNotify();
  GetTeamDetailInfoRequest::default_instance_ = new GetTeamDetailInfoRequest();
  RecruitTeamMemberRequest::default_instance_ = new RecruitTeamMemberRequest();
  TeamPlayerKickedOutNotify::default_instance_ = new TeamPlayerKickedOutNotify();
  RecruitTeamMemberResponse::default_instance_ = new RecruitTeamMemberResponse();
  TeamInfoUpdateNotify::default_instance_ = new TeamInfoUpdateNotify();
  SyncTeamInfoNotify::default_instance_ = new SyncTeamInfoNotify();
  GetArenaInfoRequest::default_instance_ = new GetArenaInfoRequest();
  UpdateArenaInfoNotify::default_instance_ = new UpdateArenaInfoNotify();
  GetArenaRankListRequest::default_instance_ = new GetArenaRankListRequest();
  GetArenaRankListResponse::default_instance_ = new GetArenaRankListResponse();
  ChallengePlayerRequest::default_instance_ = new ChallengePlayerRequest();
  ChallengePlayerResponse::default_instance_ = new ChallengePlayerResponse();
  TakeTreasureBoxRequest::default_instance_ = new TakeTreasureBoxRequest();
  TakeTreasureBoxResponse::default_instance_ = new TakeTreasureBoxResponse();
  ArenaSelfNoticeNotify::default_instance_ = new ArenaSelfNoticeNotify();
  ArenaPublicNoticeNotify::default_instance_ = new ArenaPublicNoticeNotify();
  ArenaRecentMessageNotify::default_instance_ = new ArenaRecentMessageNotify();
  PublicNoticeNotify::default_instance_ = new PublicNoticeNotify();
  GetOnlineTimeRequest::default_instance_ = new GetOnlineTimeRequest();
  TimeBonusNotify::default_instance_ = new TimeBonusNotify();
  TakeTimeBonusRequest::default_instance_ = new TakeTimeBonusRequest();
  TakeTimeBonusResponse::default_instance_ = new TakeTimeBonusResponse();
  GetInstanceWantedListInfoRequest::default_instance_ = new GetInstanceWantedListInfoRequest();
  GetInstanceWantedListInfoResponse::default_instance_ = new GetInstanceWantedListInfoResponse();
  DoInstanceWantedOnceRequest::default_instance_ = new DoInstanceWantedOnceRequest();
  DoInstanceWantedOnceResponse::default_instance_ = new DoInstanceWantedOnceResponse();
  FastInstanceWantedRequest::default_instance_ = new FastInstanceWantedRequest();
  FastInstanceWantedResponse::default_instance_ = new FastInstanceWantedResponse();
  InstanceWantedAllResetRequest::default_instance_ = new InstanceWantedAllResetRequest();
  InstanceWantedAllResetResponse::default_instance_ = new InstanceWantedAllResetResponse();
  InstanceWantedResetCostRequest::default_instance_ = new InstanceWantedResetCostRequest();
  InstanceWantedResetCostResponse::default_instance_ = new InstanceWantedResetCostResponse();
  OpenMonsterExpBuffRequest::default_instance_ = new OpenMonsterExpBuffRequest();
  OpenMonsterExpBuffResponse::default_instance_ = new OpenMonsterExpBuffResponse();
  TakeMonsterExpBuffRequest::default_instance_ = new TakeMonsterExpBuffRequest();
  TakeMonsterExpBuffResponse::default_instance_ = new TakeMonsterExpBuffResponse();
  TeamMemberOpenMonsterExpBuffNotify::default_instance_ = new TeamMemberOpenMonsterExpBuffNotify();
  GetLivenessInfoRequest::default_instance_ = new GetLivenessInfoRequest();
  GetLivenessInfoResponse::default_instance_ = new GetLivenessInfoResponse();
  TakeLivenessAwardRequest::default_instance_ = new TakeLivenessAwardRequest();
  TakeLivenessAwardResponse::default_instance_ = new TakeLivenessAwardResponse();
  LivenessUpdateNotify::default_instance_ = new LivenessUpdateNotify();
  GetPlayerConfigRequest::default_instance_ = new GetPlayerConfigRequest();
  SetPlayerConfigRequest::default_instance_ = new SetPlayerConfigRequest();
  SetPlayerConfigResponse::default_instance_ = new SetPlayerConfigResponse();
  GetPlayerConfigResponse::default_instance_ = new GetPlayerConfigResponse();
  FightWithOtherPlayerRequest::default_instance_ = new FightWithOtherPlayerRequest();
  FightWithOtherPlayerResponse::default_instance_ = new FightWithOtherPlayerResponse();
  SendFightInvitationNotify::default_instance_ = new SendFightInvitationNotify();
  FightInviteReplyRequest::default_instance_ = new FightInviteReplyRequest();
  FightInviteReplyResponse::default_instance_ = new FightInviteReplyResponse();
  FightInviteReplyNotify::default_instance_ = new FightInviteReplyNotify();
  UpdateMonsterBuffNotify::default_instance_ = new UpdateMonsterBuffNotify();
  TeamChannelMemberNotify::default_instance_ = new TeamChannelMemberNotify();
  UpdateBitRequest::default_instance_ = new UpdateBitRequest();
  UpdateBitResponse::default_instance_ = new UpdateBitResponse();
  UpdateBitNotify::default_instance_ = new UpdateBitNotify();
  PublishQuestionNotify::default_instance_ = new PublishQuestionNotify();
  SendQAResultNotify::default_instance_ = new SendQAResultNotify();
  PlayerPhyStrengthUpdate::default_instance_ = new PlayerPhyStrengthUpdate();
  FollowBuddyRequest::default_instance_ = new FollowBuddyRequest();
  FollowBuddyResponse::default_instance_ = new FollowBuddyResponse();
  FollowBuddyNotify::default_instance_ = new FollowBuddyNotify();
  ServerStatusRequest::default_instance_ = new ServerStatusRequest();
  ServerStatusResponse::default_instance_ = new ServerStatusResponse();
  ActLuckyOnceRequest::default_instance_ = new ActLuckyOnceRequest();
  ActLuckyOnceResponse::default_instance_ = new ActLuckyOnceResponse();
  ActExchangeItemRequest::default_instance_ = new ActExchangeItemRequest();
  ActExchangeItemResponse::default_instance_ = new ActExchangeItemResponse();
  GetTitleListRequest::default_instance_ = new GetTitleListRequest();
  GetTitleListResponse::default_instance_ = new GetTitleListResponse();
  SetRoleTitleRequest::default_instance_ = new SetRoleTitleRequest();
  SetRoleTitleResponse::default_instance_ = new SetRoleTitleResponse();
  SetRoleTitleNotify::default_instance_ = new SetRoleTitleNotify();
  GetRoleTitleNotify::default_instance_ = new GetRoleTitleNotify();
  GetOfflineGiftRequest::default_instance_ = new GetOfflineGiftRequest();
  GetOfflineGiftResponse::default_instance_ = new GetOfflineGiftResponse();
  GetOpenedActivityRequest::default_instance_ = new GetOpenedActivityRequest();
  GetOpenedActivityResponse::default_instance_ = new GetOpenedActivityResponse();
  ActivityChangeNotify::default_instance_ = new ActivityChangeNotify();
  PracticeExpRequest::default_instance_ = new PracticeExpRequest();
  PracticeExpResponse::default_instance_ = new PracticeExpResponse();
  PracticeExpNotify::default_instance_ = new PracticeExpNotify();
  YinglingSoulInfo::default_instance_ = new YinglingSoulInfo();
  SoulExchangeRequest::default_instance_ = new SoulExchangeRequest();
  SoulExchangeResponse::default_instance_ = new SoulExchangeResponse();
  LobbyCustomPassInfoRequest::default_instance_ = new LobbyCustomPassInfoRequest();
  CustomPassWaitInfo::default_instance_ = new CustomPassWaitInfo();
  LobbyCustomPassInfoResponse::default_instance_ = new LobbyCustomPassInfoResponse();
  PlayerEnterPassRoomRequest::default_instance_ = new PlayerEnterPassRoomRequest();
  RoomInfo::default_instance_ = new RoomInfo();
  PlayerEnterPassRoomResponse::default_instance_ = new PlayerEnterPassRoomResponse();
  PlayerCreatePassRoomRequest::default_instance_ = new PlayerCreatePassRoomRequest();
  PlayerCreatePassRoomResponse::default_instance_ = new PlayerCreatePassRoomResponse();
  OperateRoomRequest::default_instance_ = new OperateRoomRequest();
  OperateRoomResponse::default_instance_ = new OperateRoomResponse();
  PassRoomInfoUpdateNotify::default_instance_ = new PassRoomInfoUpdateNotify();
  InvitePlayerJoinRoomRequest::default_instance_ = new InvitePlayerJoinRoomRequest();
  InvitePlayerJoinRoomResponse::default_instance_ = new InvitePlayerJoinRoomResponse();
  PassRoomInviteNotify::default_instance_ = new PassRoomInviteNotify();
  PassLobbyPlayerListRequest::default_instance_ = new PassLobbyPlayerListRequest();
  PassLobbyPlayerListResponse::default_instance_ = new PassLobbyPlayerListResponse();
  PlayerKickFormRoomNotify::default_instance_ = new PlayerKickFormRoomNotify();
  LeaderStartRoomInstanceRequest::default_instance_ = new LeaderStartRoomInstanceRequest();
  LeaderStartRoomInstanceResponse::default_instance_ = new LeaderStartRoomInstanceResponse();
  HitYellowDuckRequest::default_instance_ = new HitYellowDuckRequest();
  HitYellowDuckResponse::default_instance_ = new HitYellowDuckResponse();
  InitConnectionRequest::default_instance_->InitAsDefaultInstance();
  InitConnectionResponse::default_instance_->InitAsDefaultInstance();
  HeartBeatRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatResponse::default_instance_->InitAsDefaultInstance();
  UrlParam::default_instance_->InitAsDefaultInstance();
  AccountLoginRequest::default_instance_->InitAsDefaultInstance();
  AccountLoginResponse::default_instance_->InitAsDefaultInstance();
  AccountReloginNotify::default_instance_->InitAsDefaultInstance();
  CreatePlayerRequest::default_instance_->InitAsDefaultInstance();
  CreatePlayerResponse::default_instance_->InitAsDefaultInstance();
  RandomNameRequest::default_instance_->InitAsDefaultInstance();
  RandomNameResponse::default_instance_->InitAsDefaultInstance();
  DeletePlayerRequest::default_instance_->InitAsDefaultInstance();
  DeletePlayerResponse::default_instance_->InitAsDefaultInstance();
  PlayerLoginRequest::default_instance_->InitAsDefaultInstance();
  PlayerLoginResponse::default_instance_->InitAsDefaultInstance();
  ServerShutdownNotify::default_instance_->InitAsDefaultInstance();
  EnterMapRequest::default_instance_->InitAsDefaultInstance();
  EnterMapResponse::default_instance_->InitAsDefaultInstance();
  TransportRequest::default_instance_->InitAsDefaultInstance();
  TransportResponse::default_instance_->InitAsDefaultInstance();
  TeleportRequest::default_instance_->InitAsDefaultInstance();
  TeleportResponse::default_instance_->InitAsDefaultInstance();
  EnterInstanceRequest::default_instance_->InitAsDefaultInstance();
  EnterInstanceResponse::default_instance_->InitAsDefaultInstance();
  LeaveInstanceRequest::default_instance_->InitAsDefaultInstance();
  LeaveInstanceResponse::default_instance_->InitAsDefaultInstance();
  GetInstanceItemRequest::default_instance_->InitAsDefaultInstance();
  GetInstanceItemResponse::default_instance_->InitAsDefaultInstance();
  ListPassInstanceRequest::default_instance_->InitAsDefaultInstance();
  ListPassInstanceResponse::default_instance_->InitAsDefaultInstance();
  GetInstanceDetailRequest::default_instance_->InitAsDefaultInstance();
  GetInstanceDetailResponse::default_instance_->InitAsDefaultInstance();
  PassInstanceNotify::default_instance_->InitAsDefaultInstance();
  PlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  PlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  BuddyDetailInfoRequest::default_instance_->InitAsDefaultInstance();
  BuddyDetailInfoResponse::default_instance_->InitAsDefaultInstance();
  AttrChangeNotify::default_instance_->InitAsDefaultInstance();
  PlayerLogout::default_instance_->InitAsDefaultInstance();
  KickPlayerRequest::default_instance_->InitAsDefaultInstance();
  KickPlayerResponse::default_instance_->InitAsDefaultInstance();
  KickPlayerNotify::default_instance_->InitAsDefaultInstance();
  GetYinglingListRequest::default_instance_->InitAsDefaultInstance();
  GetYinglingListResponse::default_instance_->InitAsDefaultInstance();
  NotifyError::default_instance_->InitAsDefaultInstance();
  GetYinglingHiringStatusReq::default_instance_->InitAsDefaultInstance();
  YinglingHiringStatusNotify::default_instance_->InitAsDefaultInstance();
  OpenYinglingHiringSlotReq::default_instance_->InitAsDefaultInstance();
  OpenYinglingHiringSlotNtf::default_instance_->InitAsDefaultInstance();
  OpenYinglingSlotReq::default_instance_->InitAsDefaultInstance();
  OpenYinglingSlotResponse::default_instance_->InitAsDefaultInstance();
  OpenYinglingSlotNtf::default_instance_->InitAsDefaultInstance();
  RefeshYinglingHiringListReq::default_instance_->InitAsDefaultInstance();
  AutoRefeshYinglingHiringListReq::default_instance_->InitAsDefaultInstance();
  AutoRefeshYinglingHiringListRep::default_instance_->InitAsDefaultInstance();
  HiringYingling::default_instance_->InitAsDefaultInstance();
  RefeshYinglingHiringListNtf::default_instance_->InitAsDefaultInstance();
  HireYinglingRequest::default_instance_->InitAsDefaultInstance();
  GetLingliRequest::default_instance_->InitAsDefaultInstance();
  ConvertYinglingRequest::default_instance_->InitAsDefaultInstance();
  LingliUpdateNotify::default_instance_->InitAsDefaultInstance();
  AddYinglingNotify::default_instance_->InitAsDefaultInstance();
  DelHiringYinglingNotify::default_instance_->InitAsDefaultInstance();
  FireYinglingRequest::default_instance_->InitAsDefaultInstance();
  DelYinglingNotify::default_instance_->InitAsDefaultInstance();
  GetYinglingComboDataRequest::default_instance_->InitAsDefaultInstance();
  GetYinglingComboDataResponse::default_instance_->InitAsDefaultInstance();
  GetYinglingComboDataNotify::default_instance_->InitAsDefaultInstance();
  UpgradeYinglingComboRequest::default_instance_->InitAsDefaultInstance();
  UpgradeYinglingComboResponse::default_instance_->InitAsDefaultInstance();
  MoveStartRequest::default_instance_->InitAsDefaultInstance();
  MoveStartResponse::default_instance_->InitAsDefaultInstance();
  MoveStartNotify::default_instance_->InitAsDefaultInstance();
  EnterViewNotify::default_instance_->InitAsDefaultInstance();
  LeaveViewNotify::default_instance_->InitAsDefaultInstance();
  GameStatusNotify::default_instance_->InitAsDefaultInstance();
  ChangeMapNotify::default_instance_->InitAsDefaultInstance();
  ChooseAutoFightNPCRequest::default_instance_->InitAsDefaultInstance();
  ChooseAutoFightNPCResponse::default_instance_->InitAsDefaultInstance();
  AutoFightMonsterRequest::default_instance_->InitAsDefaultInstance();
  AutoFightMonsterResponse::default_instance_->InitAsDefaultInstance();
  StopAutoFightRequest::default_instance_->InitAsDefaultInstance();
  StopAutoFightResponse::default_instance_->InitAsDefaultInstance();
  AutoFightMonsterUpdateNotify::default_instance_->InitAsDefaultInstance();
  SpeedUpAutoFightRequest::default_instance_->InitAsDefaultInstance();
  SpeedUpAutoFightResponse::default_instance_->InitAsDefaultInstance();
  GetPlayerViewRequest::default_instance_->InitAsDefaultInstance();
  GetPlayerViewResponse::default_instance_->InitAsDefaultInstance();
  GetSkillListRequest::default_instance_->InitAsDefaultInstance();
  GetSkillListResponse::default_instance_->InitAsDefaultInstance();
  GetBattleSkillListRequest::default_instance_->InitAsDefaultInstance();
  GetBattleSkillListResponse::default_instance_->InitAsDefaultInstance();
  UpdateBattleSkillNotify::default_instance_->InitAsDefaultInstance();
  SkillPoolChangeNotify::default_instance_->InitAsDefaultInstance();
  UpdateSkillNotify::default_instance_->InitAsDefaultInstance();
  UpgradeBattleSkillRequest::default_instance_->InitAsDefaultInstance();
  UpgradeBattleSkillResponse::default_instance_->InitAsDefaultInstance();
  UpgradeBattleSkillNotify::default_instance_->InitAsDefaultInstance();
  UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance_->InitAsDefaultInstance();
  UpdateYouliNotify::default_instance_->InitAsDefaultInstance();
  GetEquipDetailRequest::default_instance_->InitAsDefaultInstance();
  GetEquipDetailResponse::default_instance_->InitAsDefaultInstance();
  GetLineupListRequest::default_instance_->InitAsDefaultInstance();
  GetLineupListResponse::default_instance_->InitAsDefaultInstance();
  GetLineupFightCapacityRequest::default_instance_->InitAsDefaultInstance();
  GetLineupFightCapacityResponse::default_instance_->InitAsDefaultInstance();
  LineUpOperationRequest::default_instance_->InitAsDefaultInstance();
  LineUpOperationResponse::default_instance_->InitAsDefaultInstance();
  UnequipAllRequest::default_instance_->InitAsDefaultInstance();
  UnequipAllResponse::default_instance_->InitAsDefaultInstance();
  PlayerUpdateNotify::default_instance_->InitAsDefaultInstance();
  EquipSkillRequest::default_instance_->InitAsDefaultInstance();
  EquipSkillResponse::default_instance_->InitAsDefaultInstance();
  UnloadSkillRequest::default_instance_->InitAsDefaultInstance();
  UnloadSkillResponse::default_instance_->InitAsDefaultInstance();
  InjectSkillExpRequest::default_instance_->InitAsDefaultInstance();
  InjectSkillExpResponse::default_instance_->InitAsDefaultInstance();
  PracticeSkillRequest::default_instance_->InitAsDefaultInstance();
  PracticeSkillResponse::default_instance_->InitAsDefaultInstance();
  SpeedupPracticeSkillRequest::default_instance_->InitAsDefaultInstance();
  SpeedupPracticeSkillResponse::default_instance_->InitAsDefaultInstance();
  StopPracticeSkillRequest::default_instance_->InitAsDefaultInstance();
  StopPracticeSkillResponse::default_instance_->InitAsDefaultInstance();
  PracticeSkillNotify::default_instance_->InitAsDefaultInstance();
  LevelUpNotify::default_instance_->InitAsDefaultInstance();
  UpdateMoneyNotify::default_instance_->InitAsDefaultInstance();
  UpdateItemNotify::default_instance_->InitAsDefaultInstance();
  UpdateExpNotify::default_instance_->InitAsDefaultInstance();
  GetQuestListRequest::default_instance_->InitAsDefaultInstance();
  GetQuestsListResponse::default_instance_->InitAsDefaultInstance();
  AcceptQuestRequest::default_instance_->InitAsDefaultInstance();
  FinishQuestRequest::default_instance_->InitAsDefaultInstance();
  CancelQuestRequest::default_instance_->InitAsDefaultInstance();
  QuestActionRequest::default_instance_->InitAsDefaultInstance();
  QuestsNotify::default_instance_->InitAsDefaultInstance();
  AcceptXunluoQuestRequest::default_instance_->InitAsDefaultInstance();
  AcceptXunluoQuestResponse::default_instance_->InitAsDefaultInstance();
  BuddyInjectSoulRequest::default_instance_->InitAsDefaultInstance();
  BuddyInjectSoulResponse::default_instance_->InitAsDefaultInstance();
  BuddySpaceTimeStatusRequest::default_instance_->InitAsDefaultInstance();
  BuddySpaceTimeStatus::default_instance_->InitAsDefaultInstance();
  BuddySpaceTimeStatusResponse::default_instance_->InitAsDefaultInstance();
  BuddyChanllengeSpaceTimeRequest::default_instance_->InitAsDefaultInstance();
  BuddyChanllengeSpaceTimeResponse::default_instance_->InitAsDefaultInstance();
  BuddySoulUpdateNotify::default_instance_->InitAsDefaultInstance();
  EquipmentShengxingOpenRequest::default_instance_->InitAsDefaultInstance();
  EquipmentShengxingOpenResponse::default_instance_->InitAsDefaultInstance();
  EquipmentShengxingRequest::default_instance_->InitAsDefaultInstance();
  EquipmentShengxingResponse::default_instance_->InitAsDefaultInstance();
  XilianData::default_instance_->InitAsDefaultInstance();
  EquipmentXilianStatusRequest::default_instance_->InitAsDefaultInstance();
  EquipmentXilianStatusResponse::default_instance_->InitAsDefaultInstance();
  EquipmentXilianRequest::default_instance_->InitAsDefaultInstance();
  EquipmentXilianResponse::default_instance_->InitAsDefaultInstance();
  EquipmentLockXilianAttrRequest::default_instance_->InitAsDefaultInstance();
  EquipmentLockXilianAttrResponse::default_instance_->InitAsDefaultInstance();
  EquipmentInheritRequest::default_instance_->InitAsDefaultInstance();
  EquipmentInheritResponse::default_instance_->InitAsDefaultInstance();
  EquipmentRecycleRequest::default_instance_->InitAsDefaultInstance();
  EquipmentRecycleResponse::default_instance_->InitAsDefaultInstance();
  BuddyDetailUpdateNotify::default_instance_->InitAsDefaultInstance();
  BagItemListNotify::default_instance_->InitAsDefaultInstance();
  EquipUpdateNotify::default_instance_->InitAsDefaultInstance();
  RoleCoolDownRequest::default_instance_->InitAsDefaultInstance();
  RoleCoolDownNotify::default_instance_->InitAsDefaultInstance();
  RoleCoolDownClearRequest::default_instance_->InitAsDefaultInstance();
  RoleCoolDownClearResponse::default_instance_->InitAsDefaultInstance();
  RoleDailyLimitRequest::default_instance_->InitAsDefaultInstance();
  RoleDailyLimitUpdateNotify::default_instance_->InitAsDefaultInstance();
  PurchaseLimitCountRequest::default_instance_->InitAsDefaultInstance();
  PurchaseLimitCountResponse::default_instance_->InitAsDefaultInstance();
  DailyQuestListRequest::default_instance_->InitAsDefaultInstance();
  DailyQuestListNotify::default_instance_->InitAsDefaultInstance();
  RefreshDailyQuestRequest::default_instance_->InitAsDefaultInstance();
  RefreshDailyQuestResponse::default_instance_->InitAsDefaultInstance();
  ExchangeCodeRequest::default_instance_->InitAsDefaultInstance();
  ExchangeCodeResponse::default_instance_->InitAsDefaultInstance();
  PlayerFlagsRequest::default_instance_->InitAsDefaultInstance();
  PlayerFlagsResponse::default_instance_->InitAsDefaultInstance();
  PlayerSetFlagRequest::default_instance_->InitAsDefaultInstance();
  PlayerSetFlagResponse::default_instance_->InitAsDefaultInstance();
  PlayerFlagUpdateNotify::default_instance_->InitAsDefaultInstance();
  PlayerHideNpcRequest::default_instance_->InitAsDefaultInstance();
  PlayerHideNpcResponse::default_instance_->InitAsDefaultInstance();
  PlayerHideNpcUpdateNotify::default_instance_->InitAsDefaultInstance();
  StartCollectRequest::default_instance_->InitAsDefaultInstance();
  StartCollectResponse::default_instance_->InitAsDefaultInstance();
  FinishCollectRequest::default_instance_->InitAsDefaultInstance();
  FinishCollectResponse::default_instance_->InitAsDefaultInstance();
  GetTrainAttributeRequest::default_instance_->InitAsDefaultInstance();
  GetTrainAttributeResponse::default_instance_->InitAsDefaultInstance();
  TrainAttributeRequest::default_instance_->InitAsDefaultInstance();
  TrainAttributeResponse::default_instance_->InitAsDefaultInstance();
  TrainAttributeNotify::default_instance_->InitAsDefaultInstance();
  SaveTrainAttributeRequest::default_instance_->InitAsDefaultInstance();
  SaveTrainAttributeResponse::default_instance_->InitAsDefaultInstance();
  GuildInfoUpdateNotify::default_instance_->InitAsDefaultInstance();
  VipInfoUpdateNotify::default_instance_->InitAsDefaultInstance();
  FunctionLimitRequest::default_instance_->InitAsDefaultInstance();
  FunctionLimitResponse::default_instance_->InitAsDefaultInstance();
  FunctionLimitUpdateNotify::default_instance_->InitAsDefaultInstance();
  GetDailyGiftInfoRequest::default_instance_->InitAsDefaultInstance();
  GetDailyGiftInfoResponse::default_instance_->InitAsDefaultInstance();
  DailyGiftInfoUpdateNotify::default_instance_->InitAsDefaultInstance();
  ApplyDailyGiftRequest::default_instance_->InitAsDefaultInstance();
  ApplyDailyGiftResponse::default_instance_->InitAsDefaultInstance();
  GetStackableOnlineGiftRequest::default_instance_->InitAsDefaultInstance();
  StackableOnlineGift::default_instance_->InitAsDefaultInstance();
  GetStackableOnlineGiftResponse::default_instance_->InitAsDefaultInstance();
  StackableOnlineGiftUpdateNotify::default_instance_->InitAsDefaultInstance();
  ApplyStackableOnlineGiftRequest::default_instance_->InitAsDefaultInstance();
  ApplyStackableOnlineGiftResponse::default_instance_->InitAsDefaultInstance();
  AnnouncementNotify::default_instance_->InitAsDefaultInstance();
  GemUpgradeRequest::default_instance_->InitAsDefaultInstance();
  GemUpgrateResponse::default_instance_->InitAsDefaultInstance();
  GemInsertRequest::default_instance_->InitAsDefaultInstance();
  GemInsertResponse::default_instance_->InitAsDefaultInstance();
  GemRemoveRequest::default_instance_->InitAsDefaultInstance();
  GemRemoveResponse::default_instance_->InitAsDefaultInstance();
  MakeSocketRequest::default_instance_->InitAsDefaultInstance();
  MakeSocketResponse::default_instance_->InitAsDefaultInstance();
  GetStartupActivityStatusRequest::default_instance_->InitAsDefaultInstance();
  GetStartupActivityStatusResponse::default_instance_->InitAsDefaultInstance();
  StartupActivityStatus::default_instance_->InitAsDefaultInstance();
  StartupActivityStatusNotify::default_instance_->InitAsDefaultInstance();
  GetGuildCrystalStatusRequest::default_instance_->InitAsDefaultInstance();
  GetGuildCrystalStatusResponse::default_instance_->InitAsDefaultInstance();
  GuildStartCrystalTowerActivityRequest::default_instance_->InitAsDefaultInstance();
  GuildStartCrystalTowerActivityResponse::default_instance_->InitAsDefaultInstance();
  GuildDonateRequest::default_instance_->InitAsDefaultInstance();
  GuildDonateResponse::default_instance_->InitAsDefaultInstance();
  GuildContribNotify::default_instance_->InitAsDefaultInstance();
  GuildCrystalTowerActivityNotify::default_instance_->InitAsDefaultInstance();
  PickGuildCrystalRewardRequest::default_instance_->InitAsDefaultInstance();
  PickGuildCrystalRewardResponse::default_instance_->InitAsDefaultInstance();
  PickGuildCrystalRewardNotify::default_instance_->InitAsDefaultInstance();
  QueryYouliMapDataRequest::default_instance_->InitAsDefaultInstance();
  QueryYouliMapDataResponse::default_instance_->InitAsDefaultInstance();
  YouliMapDataNotify::default_instance_->InitAsDefaultInstance();
  YouliMapDiceRequest::default_instance_->InitAsDefaultInstance();
  YouliMapDiceResponse::default_instance_->InitAsDefaultInstance();
  YouliMapAutoDiceRequest::default_instance_->InitAsDefaultInstance();
  YouliMapAutoDiceResponse::default_instance_->InitAsDefaultInstance();
  YouliMapDiceNotify::default_instance_->InitAsDefaultInstance();
  YouliMapResetMapRequest::default_instance_->InitAsDefaultInstance();
  YouliMapResetMapResponse::default_instance_->InitAsDefaultInstance();
  CheckGuildCircleRequest::default_instance_->InitAsDefaultInstance();
  CheckGuildCircleResponse::default_instance_->InitAsDefaultInstance();
  TakeGiftRequest::default_instance_->InitAsDefaultInstance();
  TakeGiftResponse::default_instance_->InitAsDefaultInstance();
  CreateTeamRequest::default_instance_->InitAsDefaultInstance();
  CreateTeamResponse::default_instance_->InitAsDefaultInstance();
  SearchTeamRequest::default_instance_->InitAsDefaultInstance();
  SearchTeamResponse::default_instance_->InitAsDefaultInstance();
  TeamLineupSetRequest::default_instance_->InitAsDefaultInstance();
  TeamLineupSetResponse::default_instance_->InitAsDefaultInstance();
  TeamSettingModifyRequest::default_instance_->InitAsDefaultInstance();
  TeamSettingModifyResponse::default_instance_->InitAsDefaultInstance();
  TeamOperationRequest::default_instance_->InitAsDefaultInstance();
  TeamOperationResponse::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamRequest::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamResponse::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamListNotify::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamReplyRequest::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamReplyResponse::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamReplyNotify::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamRequest::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamResponse::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamNotify::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamReplyRequest::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamReplyResponse::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamReplyNotify::default_instance_->InitAsDefaultInstance();
  GetTeamDetailInfoRequest::default_instance_->InitAsDefaultInstance();
  RecruitTeamMemberRequest::default_instance_->InitAsDefaultInstance();
  TeamPlayerKickedOutNotify::default_instance_->InitAsDefaultInstance();
  RecruitTeamMemberResponse::default_instance_->InitAsDefaultInstance();
  TeamInfoUpdateNotify::default_instance_->InitAsDefaultInstance();
  SyncTeamInfoNotify::default_instance_->InitAsDefaultInstance();
  GetArenaInfoRequest::default_instance_->InitAsDefaultInstance();
  UpdateArenaInfoNotify::default_instance_->InitAsDefaultInstance();
  GetArenaRankListRequest::default_instance_->InitAsDefaultInstance();
  GetArenaRankListResponse::default_instance_->InitAsDefaultInstance();
  ChallengePlayerRequest::default_instance_->InitAsDefaultInstance();
  ChallengePlayerResponse::default_instance_->InitAsDefaultInstance();
  TakeTreasureBoxRequest::default_instance_->InitAsDefaultInstance();
  TakeTreasureBoxResponse::default_instance_->InitAsDefaultInstance();
  ArenaSelfNoticeNotify::default_instance_->InitAsDefaultInstance();
  ArenaPublicNoticeNotify::default_instance_->InitAsDefaultInstance();
  ArenaRecentMessageNotify::default_instance_->InitAsDefaultInstance();
  PublicNoticeNotify::default_instance_->InitAsDefaultInstance();
  GetOnlineTimeRequest::default_instance_->InitAsDefaultInstance();
  TimeBonusNotify::default_instance_->InitAsDefaultInstance();
  TakeTimeBonusRequest::default_instance_->InitAsDefaultInstance();
  TakeTimeBonusResponse::default_instance_->InitAsDefaultInstance();
  GetInstanceWantedListInfoRequest::default_instance_->InitAsDefaultInstance();
  GetInstanceWantedListInfoResponse::default_instance_->InitAsDefaultInstance();
  DoInstanceWantedOnceRequest::default_instance_->InitAsDefaultInstance();
  DoInstanceWantedOnceResponse::default_instance_->InitAsDefaultInstance();
  FastInstanceWantedRequest::default_instance_->InitAsDefaultInstance();
  FastInstanceWantedResponse::default_instance_->InitAsDefaultInstance();
  InstanceWantedAllResetRequest::default_instance_->InitAsDefaultInstance();
  InstanceWantedAllResetResponse::default_instance_->InitAsDefaultInstance();
  InstanceWantedResetCostRequest::default_instance_->InitAsDefaultInstance();
  InstanceWantedResetCostResponse::default_instance_->InitAsDefaultInstance();
  OpenMonsterExpBuffRequest::default_instance_->InitAsDefaultInstance();
  OpenMonsterExpBuffResponse::default_instance_->InitAsDefaultInstance();
  TakeMonsterExpBuffRequest::default_instance_->InitAsDefaultInstance();
  TakeMonsterExpBuffResponse::default_instance_->InitAsDefaultInstance();
  TeamMemberOpenMonsterExpBuffNotify::default_instance_->InitAsDefaultInstance();
  GetLivenessInfoRequest::default_instance_->InitAsDefaultInstance();
  GetLivenessInfoResponse::default_instance_->InitAsDefaultInstance();
  TakeLivenessAwardRequest::default_instance_->InitAsDefaultInstance();
  TakeLivenessAwardResponse::default_instance_->InitAsDefaultInstance();
  LivenessUpdateNotify::default_instance_->InitAsDefaultInstance();
  GetPlayerConfigRequest::default_instance_->InitAsDefaultInstance();
  SetPlayerConfigRequest::default_instance_->InitAsDefaultInstance();
  SetPlayerConfigResponse::default_instance_->InitAsDefaultInstance();
  GetPlayerConfigResponse::default_instance_->InitAsDefaultInstance();
  FightWithOtherPlayerRequest::default_instance_->InitAsDefaultInstance();
  FightWithOtherPlayerResponse::default_instance_->InitAsDefaultInstance();
  SendFightInvitationNotify::default_instance_->InitAsDefaultInstance();
  FightInviteReplyRequest::default_instance_->InitAsDefaultInstance();
  FightInviteReplyResponse::default_instance_->InitAsDefaultInstance();
  FightInviteReplyNotify::default_instance_->InitAsDefaultInstance();
  UpdateMonsterBuffNotify::default_instance_->InitAsDefaultInstance();
  TeamChannelMemberNotify::default_instance_->InitAsDefaultInstance();
  UpdateBitRequest::default_instance_->InitAsDefaultInstance();
  UpdateBitResponse::default_instance_->InitAsDefaultInstance();
  UpdateBitNotify::default_instance_->InitAsDefaultInstance();
  PublishQuestionNotify::default_instance_->InitAsDefaultInstance();
  SendQAResultNotify::default_instance_->InitAsDefaultInstance();
  PlayerPhyStrengthUpdate::default_instance_->InitAsDefaultInstance();
  FollowBuddyRequest::default_instance_->InitAsDefaultInstance();
  FollowBuddyResponse::default_instance_->InitAsDefaultInstance();
  FollowBuddyNotify::default_instance_->InitAsDefaultInstance();
  ServerStatusRequest::default_instance_->InitAsDefaultInstance();
  ServerStatusResponse::default_instance_->InitAsDefaultInstance();
  ActLuckyOnceRequest::default_instance_->InitAsDefaultInstance();
  ActLuckyOnceResponse::default_instance_->InitAsDefaultInstance();
  ActExchangeItemRequest::default_instance_->InitAsDefaultInstance();
  ActExchangeItemResponse::default_instance_->InitAsDefaultInstance();
  GetTitleListRequest::default_instance_->InitAsDefaultInstance();
  GetTitleListResponse::default_instance_->InitAsDefaultInstance();
  SetRoleTitleRequest::default_instance_->InitAsDefaultInstance();
  SetRoleTitleResponse::default_instance_->InitAsDefaultInstance();
  SetRoleTitleNotify::default_instance_->InitAsDefaultInstance();
  GetRoleTitleNotify::default_instance_->InitAsDefaultInstance();
  GetOfflineGiftRequest::default_instance_->InitAsDefaultInstance();
  GetOfflineGiftResponse::default_instance_->InitAsDefaultInstance();
  GetOpenedActivityRequest::default_instance_->InitAsDefaultInstance();
  GetOpenedActivityResponse::default_instance_->InitAsDefaultInstance();
  ActivityChangeNotify::default_instance_->InitAsDefaultInstance();
  PracticeExpRequest::default_instance_->InitAsDefaultInstance();
  PracticeExpResponse::default_instance_->InitAsDefaultInstance();
  PracticeExpNotify::default_instance_->InitAsDefaultInstance();
  YinglingSoulInfo::default_instance_->InitAsDefaultInstance();
  SoulExchangeRequest::default_instance_->InitAsDefaultInstance();
  SoulExchangeResponse::default_instance_->InitAsDefaultInstance();
  LobbyCustomPassInfoRequest::default_instance_->InitAsDefaultInstance();
  CustomPassWaitInfo::default_instance_->InitAsDefaultInstance();
  LobbyCustomPassInfoResponse::default_instance_->InitAsDefaultInstance();
  PlayerEnterPassRoomRequest::default_instance_->InitAsDefaultInstance();
  RoomInfo::default_instance_->InitAsDefaultInstance();
  PlayerEnterPassRoomResponse::default_instance_->InitAsDefaultInstance();
  PlayerCreatePassRoomRequest::default_instance_->InitAsDefaultInstance();
  PlayerCreatePassRoomResponse::default_instance_->InitAsDefaultInstance();
  OperateRoomRequest::default_instance_->InitAsDefaultInstance();
  OperateRoomResponse::default_instance_->InitAsDefaultInstance();
  PassRoomInfoUpdateNotify::default_instance_->InitAsDefaultInstance();
  InvitePlayerJoinRoomRequest::default_instance_->InitAsDefaultInstance();
  InvitePlayerJoinRoomResponse::default_instance_->InitAsDefaultInstance();
  PassRoomInviteNotify::default_instance_->InitAsDefaultInstance();
  PassLobbyPlayerListRequest::default_instance_->InitAsDefaultInstance();
  PassLobbyPlayerListResponse::default_instance_->InitAsDefaultInstance();
  PlayerKickFormRoomNotify::default_instance_->InitAsDefaultInstance();
  LeaderStartRoomInstanceRequest::default_instance_->InitAsDefaultInstance();
  LeaderStartRoomInstanceResponse::default_instance_->InitAsDefaultInstance();
  HitYellowDuckRequest::default_instance_->InitAsDefaultInstance();
  HitYellowDuckResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fclient_2eproto {
  StaticDescriptorInitializer_game_5fclient_2eproto() {
    protobuf_AddDesc_game_5fclient_2eproto();
  }
} static_descriptor_initializer_game_5fclient_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int InitConnectionRequest::kVerFieldNumber;
#endif  // !_MSC_VER

InitConnectionRequest::InitConnectionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitConnectionRequest::InitAsDefaultInstance() {
}

InitConnectionRequest::InitConnectionRequest(const InitConnectionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitConnectionRequest::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitConnectionRequest::~InitConnectionRequest() {
  SharedDtor();
}

void InitConnectionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitConnectionRequest_descriptor_;
}

const InitConnectionRequest& InitConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InitConnectionRequest* InitConnectionRequest::default_instance_ = NULL;

InitConnectionRequest* InitConnectionRequest::New() const {
  return new InitConnectionRequest;
}

void InitConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ver = 1;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitConnectionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitConnectionRequest::MergeFrom(const InitConnectionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitConnectionRequest::CopyFrom(const InitConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitConnectionRequest::IsInitialized() const {
  
  return true;
}

void InitConnectionRequest::Swap(InitConnectionRequest* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitConnectionRequest_descriptor_;
  metadata.reflection = InitConnectionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitConnectionResponse::kErrorCodeFieldNumber;
const int InitConnectionResponse::kBeginSeqFieldNumber;
const int InitConnectionResponse::kServerTimeFieldNumber;
const int InitConnectionResponse::kServerIdFieldNumber;
const int InitConnectionResponse::kMergeFlagFieldNumber;
#endif  // !_MSC_VER

InitConnectionResponse::InitConnectionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitConnectionResponse::InitAsDefaultInstance() {
}

InitConnectionResponse::InitConnectionResponse(const InitConnectionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitConnectionResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  begin_seq_ = 0;
  server_time_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  merge_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitConnectionResponse::~InitConnectionResponse() {
  SharedDtor();
}

void InitConnectionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitConnectionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitConnectionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitConnectionResponse_descriptor_;
}

const InitConnectionResponse& InitConnectionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InitConnectionResponse* InitConnectionResponse::default_instance_ = NULL;

InitConnectionResponse* InitConnectionResponse::New() const {
  return new InitConnectionResponse;
}

void InitConnectionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    begin_seq_ = 0;
    server_time_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
    merge_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitConnectionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_seq;
        break;
      }
      
      // optional int32 begin_seq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_seq_)));
          set_has_begin_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_time;
        break;
      }
      
      // optional int64 server_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_merge_flag;
        break;
      }
      
      // optional bool merge_flag = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merge_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &merge_flag_)));
          set_has_merge_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitConnectionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 begin_seq = 2;
  if (has_begin_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_seq(), output);
  }
  
  // optional int64 server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->server_time(), output);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }
  
  // optional bool merge_flag = 5 [default = false];
  if (has_merge_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->merge_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitConnectionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 begin_seq = 2;
  if (has_begin_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_seq(), target);
  }
  
  // optional int64 server_time = 3;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->server_time(), target);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  // optional bool merge_flag = 5 [default = false];
  if (has_merge_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->merge_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitConnectionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 begin_seq = 2;
    if (has_begin_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_seq());
    }
    
    // optional int64 server_time = 3;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_time());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional bool merge_flag = 5 [default = false];
    if (has_merge_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitConnectionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitConnectionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitConnectionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitConnectionResponse::MergeFrom(const InitConnectionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_begin_seq()) {
      set_begin_seq(from.begin_seq());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_merge_flag()) {
      set_merge_flag(from.merge_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitConnectionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitConnectionResponse::CopyFrom(const InitConnectionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitConnectionResponse::IsInitialized() const {
  
  return true;
}

void InitConnectionResponse::Swap(InitConnectionResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(begin_seq_, other->begin_seq_);
    std::swap(server_time_, other->server_time_);
    std::swap(server_id_, other->server_id_);
    std::swap(merge_flag_, other->merge_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitConnectionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitConnectionResponse_descriptor_;
  metadata.reflection = InitConnectionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatRequest::kValueFieldNumber;
#endif  // !_MSC_VER

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatRequest::InitAsDefaultInstance() {
}

HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatRequest::~HeartBeatRequest() {
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatRequest_descriptor_;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HeartBeatRequest* HeartBeatRequest::default_instance_ = NULL;

HeartBeatRequest* HeartBeatRequest::New() const {
  return new HeartBeatRequest;
}

void HeartBeatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  
  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatRequest_descriptor_;
  metadata.reflection = HeartBeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatResponse::kValueFieldNumber;
const int HeartBeatResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatResponse::InitAsDefaultInstance() {
}

HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  server_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatResponse::~HeartBeatResponse() {
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatResponse_descriptor_;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HeartBeatResponse* HeartBeatResponse::default_instance_ = NULL;

HeartBeatResponse* HeartBeatResponse::New() const {
  return new HeartBeatResponse;
}

void HeartBeatResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    server_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }
      
      // optional int64 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  // optional int64 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->server_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  // optional int64 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->server_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int64 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  
  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatResponse_descriptor_;
  metadata.reflection = HeartBeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UrlParam::kKeyFieldNumber;
const int UrlParam::kValueFieldNumber;
#endif  // !_MSC_VER

UrlParam::UrlParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UrlParam::InitAsDefaultInstance() {
}

UrlParam::UrlParam(const UrlParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UrlParam::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UrlParam::~UrlParam() {
  SharedDtor();
}

void UrlParam::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void UrlParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UrlParam_descriptor_;
}

const UrlParam& UrlParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UrlParam* UrlParam::default_instance_ = NULL;

UrlParam* UrlParam::New() const {
  return new UrlParam;
}

void UrlParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UrlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UrlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UrlParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UrlParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UrlParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UrlParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UrlParam::MergeFrom(const UrlParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UrlParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlParam::CopyFrom(const UrlParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlParam::IsInitialized() const {
  
  return true;
}

void UrlParam::Swap(UrlParam* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UrlParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UrlParam_descriptor_;
  metadata.reflection = UrlParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginRequest::kUidFieldNumber;
const int AccountLoginRequest::kTokenFieldNumber;
const int AccountLoginRequest::kServerIdFieldNumber;
const int AccountLoginRequest::kTFieldNumber;
#endif  // !_MSC_VER

AccountLoginRequest::AccountLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginRequest::InitAsDefaultInstance() {
}

AccountLoginRequest::AccountLoginRequest(const AccountLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginRequest::~AccountLoginRequest() {
  SharedDtor();
}

void AccountLoginRequest::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginRequest_descriptor_;
}

const AccountLoginRequest& AccountLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AccountLoginRequest* AccountLoginRequest::default_instance_ = NULL;

AccountLoginRequest* AccountLoginRequest::New() const {
  return new AccountLoginRequest;
}

void AccountLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    server_id_ = 0;
    t_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required bytes token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_t;
        break;
      }
      
      // optional int32 t = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // required bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->token(), output);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int32 t = 5;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->t(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // required bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int32 t = 5;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->t(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 t = 5;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginRequest::MergeFrom(const AccountLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginRequest::CopyFrom(const AccountLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AccountLoginRequest::Swap(AccountLoginRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(token_, other->token_);
    std::swap(server_id_, other->server_id_);
    std::swap(t_, other->t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginRequest_descriptor_;
  metadata.reflection = AccountLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginResponse::kRolesFieldNumber;
const int AccountLoginResponse::kErrorCodeFieldNumber;
const int AccountLoginResponse::kRandomNameFieldNumber;
const int AccountLoginResponse::kServerTimeFieldNumber;
const int AccountLoginResponse::kRoleIdFieldNumber;
const int AccountLoginResponse::kRoleStatusFieldNumber;
const int AccountLoginResponse::kNameGenderFieldNumber;
const int AccountLoginResponse::kServerIdFieldNumber;
const int AccountLoginResponse::kBannedSecFieldNumber;
#endif  // !_MSC_VER

AccountLoginResponse::AccountLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginResponse::InitAsDefaultInstance() {
}

AccountLoginResponse::AccountLoginResponse(const AccountLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  random_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_time_ = GOOGLE_LONGLONG(0);
  role_id_ = 0;
  role_status_ = 0;
  name_gender_ = 0;
  server_id_ = 0;
  banned_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginResponse::~AccountLoginResponse() {
  SharedDtor();
}

void AccountLoginResponse::SharedDtor() {
  if (random_name_ != &::google::protobuf::internal::kEmptyString) {
    delete random_name_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginResponse_descriptor_;
}

const AccountLoginResponse& AccountLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AccountLoginResponse* AccountLoginResponse::default_instance_ = NULL;

AccountLoginResponse* AccountLoginResponse::New() const {
  return new AccountLoginResponse;
}

void AccountLoginResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    error_code_ = 0;
    if (has_random_name()) {
      if (random_name_ != &::google::protobuf::internal::kEmptyString) {
        random_name_->clear();
      }
    }
    server_time_ = GOOGLE_LONGLONG(0);
    role_id_ = 0;
    role_status_ = 0;
    name_gender_ = 0;
    server_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    banned_sec_ = 0;
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.PlayerInfo roles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_random_name;
        break;
      }
      
      // optional string random_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_random_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->random_name().data(), this->random_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_time;
        break;
      }
      
      // optional int64 server_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_status;
        break;
      }
      
      // optional int32 role_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_status_)));
          set_has_role_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_name_gender;
        break;
      }
      
      // optional int32 name_gender = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_gender_)));
          set_has_name_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_banned_sec;
        break;
      }
      
      // optional int32 banned_sec = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banned_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banned_sec_)));
          set_has_banned_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.PlayerInfo roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  // optional string random_name = 3;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->random_name(), output);
  }
  
  // optional int64 server_time = 4;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->server_time(), output);
  }
  
  // optional int32 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_id(), output);
  }
  
  // optional int32 role_status = 6;
  if (has_role_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->role_status(), output);
  }
  
  // optional int32 name_gender = 7;
  if (has_name_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->name_gender(), output);
  }
  
  // optional int32 server_id = 8;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_id(), output);
  }
  
  // optional int32 banned_sec = 9;
  if (has_banned_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->banned_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.PlayerInfo roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  // optional string random_name = 3;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->random_name(), target);
  }
  
  // optional int64 server_time = 4;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->server_time(), target);
  }
  
  // optional int32 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_id(), target);
  }
  
  // optional int32 role_status = 6;
  if (has_role_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->role_status(), target);
  }
  
  // optional int32 name_gender = 7;
  if (has_name_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->name_gender(), target);
  }
  
  // optional int32 server_id = 8;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_id(), target);
  }
  
  // optional int32 banned_sec = 9;
  if (has_banned_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->banned_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional string random_name = 3;
    if (has_random_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->random_name());
    }
    
    // optional int64 server_time = 4;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->server_time());
    }
    
    // optional int32 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional int32 role_status = 6;
    if (has_role_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_status());
    }
    
    // optional int32 name_gender = 7;
    if (has_name_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_gender());
    }
    
    // optional int32 server_id = 8;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 banned_sec = 9;
    if (has_banned_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banned_sec());
    }
    
  }
  // repeated .protocols.common.PlayerInfo roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginResponse::MergeFrom(const AccountLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_random_name()) {
      set_random_name(from.random_name());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_status()) {
      set_role_status(from.role_status());
    }
    if (from.has_name_gender()) {
      set_name_gender(from.name_gender());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_banned_sec()) {
      set_banned_sec(from.banned_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginResponse::CopyFrom(const AccountLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginResponse::IsInitialized() const {
  
  for (int i = 0; i < roles_size(); i++) {
    if (!this->roles(i).IsInitialized()) return false;
  }
  return true;
}

void AccountLoginResponse::Swap(AccountLoginResponse* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(error_code_, other->error_code_);
    std::swap(random_name_, other->random_name_);
    std::swap(server_time_, other->server_time_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_status_, other->role_status_);
    std::swap(name_gender_, other->name_gender_);
    std::swap(server_id_, other->server_id_);
    std::swap(banned_sec_, other->banned_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginResponse_descriptor_;
  metadata.reflection = AccountLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AccountReloginNotify::AccountReloginNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountReloginNotify::InitAsDefaultInstance() {
}

AccountReloginNotify::AccountReloginNotify(const AccountReloginNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountReloginNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountReloginNotify::~AccountReloginNotify() {
  SharedDtor();
}

void AccountReloginNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountReloginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountReloginNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountReloginNotify_descriptor_;
}

const AccountReloginNotify& AccountReloginNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AccountReloginNotify* AccountReloginNotify::default_instance_ = NULL;

AccountReloginNotify* AccountReloginNotify::New() const {
  return new AccountReloginNotify;
}

void AccountReloginNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountReloginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AccountReloginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountReloginNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountReloginNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountReloginNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountReloginNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountReloginNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountReloginNotify::MergeFrom(const AccountReloginNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountReloginNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountReloginNotify::CopyFrom(const AccountReloginNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountReloginNotify::IsInitialized() const {
  
  return true;
}

void AccountReloginNotify::Swap(AccountReloginNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountReloginNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountReloginNotify_descriptor_;
  metadata.reflection = AccountReloginNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayerRequest::kGenderFieldNumber;
const int CreatePlayerRequest::kJobFieldNumber;
const int CreatePlayerRequest::kNameFieldNumber;
const int CreatePlayerRequest::kServerIdFieldNumber;
const int CreatePlayerRequest::kUrlParamFieldNumber;
const int CreatePlayerRequest::kRoleIdFieldNumber;
const int CreatePlayerRequest::kLoginIpFieldNumber;
#endif  // !_MSC_VER

CreatePlayerRequest::CreatePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerRequest::InitAsDefaultInstance() {
}

CreatePlayerRequest::CreatePlayerRequest(const CreatePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 1;
  job_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  role_id_ = 0;
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerRequest::~CreatePlayerRequest() {
  SharedDtor();
}

void CreatePlayerRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void CreatePlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerRequest_descriptor_;
}

const CreatePlayerRequest& CreatePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CreatePlayerRequest* CreatePlayerRequest::default_instance_ = NULL;

CreatePlayerRequest* CreatePlayerRequest::New() const {
  return new CreatePlayerRequest;
}

void CreatePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gender_ = 1;
    job_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    server_id_ = 0;
    role_id_ = 0;
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
  }
  url_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.Gender gender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }
      
      // required .protocols.common.Profession job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url_param;
        break;
      }
      
      // repeated .protocols.common.UrlParam url_param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_url_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url_param;
        if (input->ExpectTag(56)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.Gender gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }
  
  // required .protocols.common.Profession job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }
  
  // repeated .protocols.common.UrlParam url_param = 5;
  for (int i = 0; i < this->url_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->url_param(i), output);
  }
  
  // optional int32 role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->role_id(), output);
  }
  
  // optional string login_ip = 8;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->login_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.Gender gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }
  
  // required .protocols.common.Profession job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  // repeated .protocols.common.UrlParam url_param = 5;
  for (int i = 0; i < this->url_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->url_param(i), target);
  }
  
  // optional int32 role_id = 7;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->role_id(), target);
  }
  
  // optional string login_ip = 8;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->login_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.Gender gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // required .protocols.common.Profession job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional string login_ip = 8;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }
    
  }
  // repeated .protocols.common.UrlParam url_param = 5;
  total_size += 1 * this->url_param_size();
  for (int i = 0; i < this->url_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->url_param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayerRequest::MergeFrom(const CreatePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  url_param_.MergeFrom(from.url_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayerRequest::CopyFrom(const CreatePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CreatePlayerRequest::Swap(CreatePlayerRequest* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(server_id_, other->server_id_);
    url_param_.Swap(&other->url_param_);
    std::swap(role_id_, other->role_id_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerRequest_descriptor_;
  metadata.reflection = CreatePlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePlayerResponse::kPlayerFieldNumber;
const int CreatePlayerResponse::kErrorCodeFieldNumber;
const int CreatePlayerResponse::kRandomNameFieldNumber;
const int CreatePlayerResponse::kServerIdFieldNumber;
#endif  // !_MSC_VER

CreatePlayerResponse::CreatePlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerResponse::InitAsDefaultInstance() {
  player_ = const_cast< ::protocols::common::PlayerInfo*>(&::protocols::common::PlayerInfo::default_instance());
}

CreatePlayerResponse::CreatePlayerResponse(const CreatePlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  error_code_ = 0;
  random_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerResponse::~CreatePlayerResponse() {
  SharedDtor();
}

void CreatePlayerResponse::SharedDtor() {
  if (random_name_ != &::google::protobuf::internal::kEmptyString) {
    delete random_name_;
  }
  if (this != default_instance_) {
    delete player_;
  }
}

void CreatePlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerResponse_descriptor_;
}

const CreatePlayerResponse& CreatePlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CreatePlayerResponse* CreatePlayerResponse::default_instance_ = NULL;

CreatePlayerResponse* CreatePlayerResponse::New() const {
  return new CreatePlayerResponse;
}

void CreatePlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::protocols::common::PlayerInfo::Clear();
    }
    error_code_ = 0;
    if (has_random_name()) {
      if (random_name_ != &::google::protobuf::internal::kEmptyString) {
        random_name_->clear();
      }
    }
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.PlayerInfo player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_random_name;
        break;
      }
      
      // optional string random_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_random_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->random_name().data(), this->random_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.PlayerInfo player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  // optional string random_name = 3;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->random_name(), output);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.PlayerInfo player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  // optional string random_name = 3;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->random_name(), target);
  }
  
  // optional int32 server_id = 4;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.PlayerInfo player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional string random_name = 3;
    if (has_random_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->random_name());
    }
    
    // optional int32 server_id = 4;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePlayerResponse::MergeFrom(const CreatePlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::protocols::common::PlayerInfo::MergeFrom(from.player());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_random_name()) {
      set_random_name(from.random_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePlayerResponse::CopyFrom(const CreatePlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void CreatePlayerResponse::Swap(CreatePlayerResponse* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(error_code_, other->error_code_);
    std::swap(random_name_, other->random_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerResponse_descriptor_;
  metadata.reflection = CreatePlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomNameRequest::kGenderFieldNumber;
const int RandomNameRequest::kServerIdFieldNumber;
#endif  // !_MSC_VER

RandomNameRequest::RandomNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomNameRequest::InitAsDefaultInstance() {
}

RandomNameRequest::RandomNameRequest(const RandomNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomNameRequest::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 1;
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNameRequest::~RandomNameRequest() {
  SharedDtor();
}

void RandomNameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNameRequest_descriptor_;
}

const RandomNameRequest& RandomNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RandomNameRequest* RandomNameRequest::default_instance_ = NULL;

RandomNameRequest* RandomNameRequest::New() const {
  return new RandomNameRequest;
}

void RandomNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gender_ = 1;
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.Gender gender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.Gender gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.Gender gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.Gender gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNameRequest::MergeFrom(const RandomNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNameRequest::CopyFrom(const RandomNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RandomNameRequest::Swap(RandomNameRequest* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomNameRequest_descriptor_;
  metadata.reflection = RandomNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomNameResponse::kRandomNameFieldNumber;
const int RandomNameResponse::kServerIdFieldNumber;
#endif  // !_MSC_VER

RandomNameResponse::RandomNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomNameResponse::InitAsDefaultInstance() {
}

RandomNameResponse::RandomNameResponse(const RandomNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomNameResponse::SharedCtor() {
  _cached_size_ = 0;
  random_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomNameResponse::~RandomNameResponse() {
  SharedDtor();
}

void RandomNameResponse::SharedDtor() {
  if (random_name_ != &::google::protobuf::internal::kEmptyString) {
    delete random_name_;
  }
  if (this != default_instance_) {
  }
}

void RandomNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomNameResponse_descriptor_;
}

const RandomNameResponse& RandomNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RandomNameResponse* RandomNameResponse::default_instance_ = NULL;

RandomNameResponse* RandomNameResponse::New() const {
  return new RandomNameResponse;
}

void RandomNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_random_name()) {
      if (random_name_ != &::google::protobuf::internal::kEmptyString) {
        random_name_->clear();
      }
    }
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string random_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_random_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->random_name().data(), this->random_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string random_name = 1;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->random_name(), output);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string random_name = 1;
  if (has_random_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->random_name().data(), this->random_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->random_name(), target);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomNameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string random_name = 1;
    if (has_random_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->random_name());
    }
    
    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomNameResponse::MergeFrom(const RandomNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_random_name()) {
      set_random_name(from.random_name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomNameResponse::CopyFrom(const RandomNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNameResponse::IsInitialized() const {
  
  return true;
}

void RandomNameResponse::Swap(RandomNameResponse* other) {
  if (other != this) {
    std::swap(random_name_, other->random_name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomNameResponse_descriptor_;
  metadata.reflection = RandomNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePlayerRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

DeletePlayerRequest::DeletePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletePlayerRequest::InitAsDefaultInstance() {
}

DeletePlayerRequest::DeletePlayerRequest(const DeletePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePlayerRequest::~DeletePlayerRequest() {
  SharedDtor();
}

void DeletePlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePlayerRequest_descriptor_;
}

const DeletePlayerRequest& DeletePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DeletePlayerRequest* DeletePlayerRequest::default_instance_ = NULL;

DeletePlayerRequest* DeletePlayerRequest::New() const {
  return new DeletePlayerRequest;
}

void DeletePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletePlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePlayerRequest::MergeFrom(const DeletePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePlayerRequest::CopyFrom(const DeletePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeletePlayerRequest::Swap(DeletePlayerRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePlayerRequest_descriptor_;
  metadata.reflection = DeletePlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePlayerResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DeletePlayerResponse::DeletePlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeletePlayerResponse::InitAsDefaultInstance() {
}

DeletePlayerResponse::DeletePlayerResponse(const DeletePlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeletePlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePlayerResponse::~DeletePlayerResponse() {
  SharedDtor();
}

void DeletePlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePlayerResponse_descriptor_;
}

const DeletePlayerResponse& DeletePlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DeletePlayerResponse* DeletePlayerResponse::default_instance_ = NULL;

DeletePlayerResponse* DeletePlayerResponse::New() const {
  return new DeletePlayerResponse;
}

void DeletePlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeletePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeletePlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeletePlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePlayerResponse::MergeFrom(const DeletePlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePlayerResponse::CopyFrom(const DeletePlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeletePlayerResponse::Swap(DeletePlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePlayerResponse_descriptor_;
  metadata.reflection = DeletePlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginRequest::kGuidFieldNumber;
const int PlayerLoginRequest::kLoginIpFieldNumber;
const int PlayerLoginRequest::kUrlParamFieldNumber;
#endif  // !_MSC_VER

PlayerLoginRequest::PlayerLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginRequest::InitAsDefaultInstance() {
}

PlayerLoginRequest::PlayerLoginRequest(const PlayerLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginRequest::~PlayerLoginRequest() {
  SharedDtor();
}

void PlayerLoginRequest::SharedDtor() {
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void PlayerLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginRequest_descriptor_;
}

const PlayerLoginRequest& PlayerLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerLoginRequest* PlayerLoginRequest::default_instance_ = NULL;

PlayerLoginRequest* PlayerLoginRequest::New() const {
  return new PlayerLoginRequest;
}

void PlayerLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
  }
  url_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_login_ip;
        break;
      }
      
      // optional string login_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url_param;
        break;
      }
      
      // repeated .protocols.common.UrlParam url_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_url_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional string login_ip = 2;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->login_ip(), output);
  }
  
  // repeated .protocols.common.UrlParam url_param = 3;
  for (int i = 0; i < this->url_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->url_param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional string login_ip = 2;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_ip(), target);
  }
  
  // repeated .protocols.common.UrlParam url_param = 3;
  for (int i = 0; i < this->url_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->url_param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional string login_ip = 2;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }
    
  }
  // repeated .protocols.common.UrlParam url_param = 3;
  total_size += 1 * this->url_param_size();
  for (int i = 0; i < this->url_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->url_param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginRequest::MergeFrom(const PlayerLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  url_param_.MergeFrom(from.url_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginRequest::CopyFrom(const PlayerLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerLoginRequest::Swap(PlayerLoginRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(login_ip_, other->login_ip_);
    url_param_.Swap(&other->url_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginRequest_descriptor_;
  metadata.reflection = PlayerLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLoginResponse::kErrorCodeFieldNumber;
const int PlayerLoginResponse::kBankFieldNumber;
const int PlayerLoginResponse::kPlayerInfoFieldNumber;
const int PlayerLoginResponse::kIntKeyLimitFieldNumber;
const int PlayerLoginResponse::kStartupTimeFieldNumber;
#endif  // !_MSC_VER

PlayerLoginResponse::PlayerLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoginResponse::InitAsDefaultInstance() {
  bank_ = const_cast< ::protocols::common::BankInfo*>(&::protocols::common::BankInfo::default_instance());
  player_info_ = const_cast< ::protocols::common::PlayerInfo*>(&::protocols::common::PlayerInfo::default_instance());
}

PlayerLoginResponse::PlayerLoginResponse(const PlayerLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  bank_ = NULL;
  player_info_ = NULL;
  startup_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoginResponse::~PlayerLoginResponse() {
  SharedDtor();
}

void PlayerLoginResponse::SharedDtor() {
  if (this != default_instance_) {
    delete bank_;
    delete player_info_;
  }
}

void PlayerLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoginResponse_descriptor_;
}

const PlayerLoginResponse& PlayerLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerLoginResponse* PlayerLoginResponse::default_instance_ = NULL;

PlayerLoginResponse* PlayerLoginResponse::New() const {
  return new PlayerLoginResponse;
}

void PlayerLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_bank()) {
      if (bank_ != NULL) bank_->::protocols::common::BankInfo::Clear();
    }
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::PlayerInfo::Clear();
    }
    startup_time_ = 0;
  }
  int_key_limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bank;
        break;
      }
      
      // optional .protocols.common.BankInfo bank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_info;
        break;
      }
      
      // optional .protocols.common.PlayerInfo player_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_int_key_limit;
        break;
      }
      
      // repeated .protocols.common.PBIntPair int_key_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int_key_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_int_key_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_int_key_limit;
        if (input->ExpectTag(56)) goto parse_startup_time;
        break;
      }
      
      // optional int32 startup_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startup_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startup_time_)));
          set_has_startup_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }
  
  // optional .protocols.common.BankInfo bank = 4;
  if (has_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bank(), output);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 5;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_info(), output);
  }
  
  // repeated .protocols.common.PBIntPair int_key_limit = 6;
  for (int i = 0; i < this->int_key_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->int_key_limit(i), output);
  }
  
  // optional int32 startup_time = 7;
  if (has_startup_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->startup_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }
  
  // optional .protocols.common.BankInfo bank = 4;
  if (has_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bank(), target);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 5;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->player_info(), target);
  }
  
  // repeated .protocols.common.PBIntPair int_key_limit = 6;
  for (int i = 0; i < this->int_key_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->int_key_limit(i), target);
  }
  
  // optional int32 startup_time = 7;
  if (has_startup_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->startup_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.BankInfo bank = 4;
    if (has_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank());
    }
    
    // optional .protocols.common.PlayerInfo player_info = 5;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional int32 startup_time = 7;
    if (has_startup_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startup_time());
    }
    
  }
  // repeated .protocols.common.PBIntPair int_key_limit = 6;
  total_size += 1 * this->int_key_limit_size();
  for (int i = 0; i < this->int_key_limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->int_key_limit(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLoginResponse::MergeFrom(const PlayerLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_key_limit_.MergeFrom(from.int_key_limit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_bank()) {
      mutable_bank()->::protocols::common::BankInfo::MergeFrom(from.bank());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::PlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_startup_time()) {
      set_startup_time(from.startup_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLoginResponse::CopyFrom(const PlayerLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < int_key_limit_size(); i++) {
    if (!this->int_key_limit(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerLoginResponse::Swap(PlayerLoginResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(bank_, other->bank_);
    std::swap(player_info_, other->player_info_);
    int_key_limit_.Swap(&other->int_key_limit_);
    std::swap(startup_time_, other->startup_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoginResponse_descriptor_;
  metadata.reflection = PlayerLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerShutdownNotify::kCountDownSecFieldNumber;
#endif  // !_MSC_VER

ServerShutdownNotify::ServerShutdownNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerShutdownNotify::InitAsDefaultInstance() {
}

ServerShutdownNotify::ServerShutdownNotify(const ServerShutdownNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerShutdownNotify::SharedCtor() {
  _cached_size_ = 0;
  count_down_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerShutdownNotify::~ServerShutdownNotify() {
  SharedDtor();
}

void ServerShutdownNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerShutdownNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerShutdownNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerShutdownNotify_descriptor_;
}

const ServerShutdownNotify& ServerShutdownNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ServerShutdownNotify* ServerShutdownNotify::default_instance_ = NULL;

ServerShutdownNotify* ServerShutdownNotify::New() const {
  return new ServerShutdownNotify;
}

void ServerShutdownNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_down_sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerShutdownNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count_down_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_down_sec_)));
          set_has_count_down_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerShutdownNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count_down_sec = 1;
  if (has_count_down_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count_down_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerShutdownNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count_down_sec = 1;
  if (has_count_down_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count_down_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerShutdownNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count_down_sec = 1;
    if (has_count_down_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_down_sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerShutdownNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerShutdownNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerShutdownNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerShutdownNotify::MergeFrom(const ServerShutdownNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_down_sec()) {
      set_count_down_sec(from.count_down_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerShutdownNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerShutdownNotify::CopyFrom(const ServerShutdownNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerShutdownNotify::IsInitialized() const {
  
  return true;
}

void ServerShutdownNotify::Swap(ServerShutdownNotify* other) {
  if (other != this) {
    std::swap(count_down_sec_, other->count_down_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerShutdownNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerShutdownNotify_descriptor_;
  metadata.reflection = ServerShutdownNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterMapRequest::EnterMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterMapRequest::InitAsDefaultInstance() {
}

EnterMapRequest::EnterMapRequest(const EnterMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterMapRequest::~EnterMapRequest() {
  SharedDtor();
}

void EnterMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterMapRequest_descriptor_;
}

const EnterMapRequest& EnterMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EnterMapRequest* EnterMapRequest::default_instance_ = NULL;

EnterMapRequest* EnterMapRequest::New() const {
  return new EnterMapRequest;
}

void EnterMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EnterMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterMapRequest::MergeFrom(const EnterMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterMapRequest::CopyFrom(const EnterMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMapRequest::IsInitialized() const {
  
  return true;
}

void EnterMapRequest::Swap(EnterMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterMapRequest_descriptor_;
  metadata.reflection = EnterMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterMapResponse::kErrorCodeFieldNumber;
const int EnterMapResponse::kViewFieldNumber;
#endif  // !_MSC_VER

EnterMapResponse::EnterMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterMapResponse::InitAsDefaultInstance() {
  view_ = const_cast< ::protocols::common::EnterViewNotify*>(&::protocols::common::EnterViewNotify::default_instance());
}

EnterMapResponse::EnterMapResponse(const EnterMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterMapResponse::~EnterMapResponse() {
  SharedDtor();
}

void EnterMapResponse::SharedDtor() {
  if (this != default_instance_) {
    delete view_;
  }
}

void EnterMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterMapResponse_descriptor_;
}

const EnterMapResponse& EnterMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EnterMapResponse* EnterMapResponse::default_instance_ = NULL;

EnterMapResponse* EnterMapResponse::New() const {
  return new EnterMapResponse;
}

void EnterMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_view()) {
      if (view_ != NULL) view_->::protocols::common::EnterViewNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }
      
      // optional .protocols.common.EnterViewNotify view = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.EnterViewNotify view = 2;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.EnterViewNotify view = 2;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.EnterViewNotify view = 2;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterMapResponse::MergeFrom(const EnterMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_view()) {
      mutable_view()->::protocols::common::EnterViewNotify::MergeFrom(from.view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterMapResponse::CopyFrom(const EnterMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_view()) {
    if (!this->view().IsInitialized()) return false;
  }
  return true;
}

void EnterMapResponse::Swap(EnterMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(view_, other->view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterMapResponse_descriptor_;
  metadata.reflection = EnterMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

TransportRequest::TransportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportRequest::InitAsDefaultInstance() {
}

TransportRequest::TransportRequest(const TransportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportRequest::~TransportRequest() {
  SharedDtor();
}

void TransportRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRequest_descriptor_;
}

const TransportRequest& TransportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TransportRequest* TransportRequest::default_instance_ = NULL;

TransportRequest* TransportRequest::New() const {
  return new TransportRequest;
}

void TransportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportRequest::MergeFrom(const TransportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRequest::CopyFrom(const TransportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TransportRequest::Swap(TransportRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportRequest_descriptor_;
  metadata.reflection = TransportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportResponse::kErrorCodeFieldNumber;
const int TransportResponse::kMapIdFieldNumber;
const int TransportResponse::kMapXFieldNumber;
const int TransportResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

TransportResponse::TransportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportResponse::InitAsDefaultInstance() {
}

TransportResponse::TransportResponse(const TransportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportResponse::~TransportResponse() {
  SharedDtor();
}

void TransportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportResponse_descriptor_;
}

const TransportResponse& TransportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TransportResponse* TransportResponse::default_instance_ = NULL;

TransportResponse* TransportResponse::New() const {
  return new TransportResponse;
}

void TransportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportResponse::MergeFrom(const TransportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportResponse::CopyFrom(const TransportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TransportResponse::Swap(TransportResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportResponse_descriptor_;
  metadata.reflection = TransportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeleportRequest::kMapIdFieldNumber;
const int TeleportRequest::kMapXFieldNumber;
const int TeleportRequest::kMapYFieldNumber;
#endif  // !_MSC_VER

TeleportRequest::TeleportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeleportRequest::InitAsDefaultInstance() {
}

TeleportRequest::TeleportRequest(const TeleportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeleportRequest::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeleportRequest::~TeleportRequest() {
  SharedDtor();
}

void TeleportRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeleportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeleportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeleportRequest_descriptor_;
}

const TeleportRequest& TeleportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeleportRequest* TeleportRequest::default_instance_ = NULL;

TeleportRequest* TeleportRequest::New() const {
  return new TeleportRequest;
}

void TeleportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeleportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeleportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeleportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeleportRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeleportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeleportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeleportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeleportRequest::MergeFrom(const TeleportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeleportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportRequest::CopyFrom(const TeleportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportRequest::IsInitialized() const {
  
  return true;
}

void TeleportRequest::Swap(TeleportRequest* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeleportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeleportRequest_descriptor_;
  metadata.reflection = TeleportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeleportResponse::kErrorCodeFieldNumber;
const int TeleportResponse::kCoinFieldNumber;
const int TeleportResponse::kMapIdFieldNumber;
const int TeleportResponse::kMapXFieldNumber;
const int TeleportResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

TeleportResponse::TeleportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeleportResponse::InitAsDefaultInstance() {
}

TeleportResponse::TeleportResponse(const TeleportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeleportResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  coin_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeleportResponse::~TeleportResponse() {
  SharedDtor();
}

void TeleportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeleportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeleportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeleportResponse_descriptor_;
}

const TeleportResponse& TeleportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeleportResponse* TeleportResponse::default_instance_ = NULL;

TeleportResponse* TeleportResponse::New() const {
  return new TeleportResponse;
}

void TeleportResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    coin_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeleportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeleportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin(), output);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeleportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin(), target);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeleportResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeleportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeleportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeleportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeleportResponse::MergeFrom(const TeleportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeleportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportResponse::CopyFrom(const TeleportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TeleportResponse::Swap(TeleportResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(coin_, other->coin_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeleportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeleportResponse_descriptor_;
  metadata.reflection = TeleportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterInstanceRequest::kInstanceIdFieldNumber;
const int EnterInstanceRequest::kGradeFieldNumber;
#endif  // !_MSC_VER

EnterInstanceRequest::EnterInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterInstanceRequest::InitAsDefaultInstance() {
}

EnterInstanceRequest::EnterInstanceRequest(const EnterInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterInstanceRequest::~EnterInstanceRequest() {
  SharedDtor();
}

void EnterInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterInstanceRequest_descriptor_;
}

const EnterInstanceRequest& EnterInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EnterInstanceRequest* EnterInstanceRequest::default_instance_ = NULL;

EnterInstanceRequest* EnterInstanceRequest::New() const {
  return new EnterInstanceRequest;
}

void EnterInstanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterInstanceRequest::MergeFrom(const EnterInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterInstanceRequest::CopyFrom(const EnterInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterInstanceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterInstanceRequest::Swap(EnterInstanceRequest* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterInstanceRequest_descriptor_;
  metadata.reflection = EnterInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterInstanceResponse::kErrorCodeFieldNumber;
const int EnterInstanceResponse::kInstanceDetailFieldNumber;
const int EnterInstanceResponse::kMemberGuidFieldNumber;
#endif  // !_MSC_VER

EnterInstanceResponse::EnterInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterInstanceResponse::InitAsDefaultInstance() {
  instance_detail_ = const_cast< ::protocols::common::InstanceDetail*>(&::protocols::common::InstanceDetail::default_instance());
}

EnterInstanceResponse::EnterInstanceResponse(const EnterInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  instance_detail_ = NULL;
  member_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterInstanceResponse::~EnterInstanceResponse() {
  SharedDtor();
}

void EnterInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete instance_detail_;
  }
}

void EnterInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterInstanceResponse_descriptor_;
}

const EnterInstanceResponse& EnterInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EnterInstanceResponse* EnterInstanceResponse::default_instance_ = NULL;

EnterInstanceResponse* EnterInstanceResponse::New() const {
  return new EnterInstanceResponse;
}

void EnterInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_instance_detail()) {
      if (instance_detail_ != NULL) instance_detail_->::protocols::common::InstanceDetail::Clear();
    }
    member_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_detail;
        break;
      }
      
      // optional .protocols.common.InstanceDetail instance_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_member_guid;
        break;
      }
      
      // optional int64 member_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &member_guid_)));
          set_has_member_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.InstanceDetail instance_detail = 2;
  if (has_instance_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_detail(), output);
  }
  
  // optional int64 member_guid = 3;
  if (has_member_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->member_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.InstanceDetail instance_detail = 2;
  if (has_instance_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_detail(), target);
  }
  
  // optional int64 member_guid = 3;
  if (has_member_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->member_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.InstanceDetail instance_detail = 2;
    if (has_instance_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_detail());
    }
    
    // optional int64 member_guid = 3;
    if (has_member_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->member_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterInstanceResponse::MergeFrom(const EnterInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_instance_detail()) {
      mutable_instance_detail()->::protocols::common::InstanceDetail::MergeFrom(from.instance_detail());
    }
    if (from.has_member_guid()) {
      set_member_guid(from.member_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterInstanceResponse::CopyFrom(const EnterInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterInstanceResponse::Swap(EnterInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(instance_detail_, other->instance_detail_);
    std::swap(member_guid_, other->member_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterInstanceResponse_descriptor_;
  metadata.reflection = EnterInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveInstanceRequest::LeaveInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveInstanceRequest::InitAsDefaultInstance() {
}

LeaveInstanceRequest::LeaveInstanceRequest(const LeaveInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveInstanceRequest::~LeaveInstanceRequest() {
  SharedDtor();
}

void LeaveInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveInstanceRequest_descriptor_;
}

const LeaveInstanceRequest& LeaveInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LeaveInstanceRequest* LeaveInstanceRequest::default_instance_ = NULL;

LeaveInstanceRequest* LeaveInstanceRequest::New() const {
  return new LeaveInstanceRequest;
}

void LeaveInstanceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveInstanceRequest::MergeFrom(const LeaveInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveInstanceRequest::CopyFrom(const LeaveInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveInstanceRequest::IsInitialized() const {
  
  return true;
}

void LeaveInstanceRequest::Swap(LeaveInstanceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveInstanceRequest_descriptor_;
  metadata.reflection = LeaveInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveInstanceResponse::kErrorCodeFieldNumber;
const int LeaveInstanceResponse::kMapIdFieldNumber;
const int LeaveInstanceResponse::kMapXFieldNumber;
const int LeaveInstanceResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

LeaveInstanceResponse::LeaveInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveInstanceResponse::InitAsDefaultInstance() {
}

LeaveInstanceResponse::LeaveInstanceResponse(const LeaveInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveInstanceResponse::~LeaveInstanceResponse() {
  SharedDtor();
}

void LeaveInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveInstanceResponse_descriptor_;
}

const LeaveInstanceResponse& LeaveInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LeaveInstanceResponse* LeaveInstanceResponse::default_instance_ = NULL;

LeaveInstanceResponse* LeaveInstanceResponse::New() const {
  return new LeaveInstanceResponse;
}

void LeaveInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 map_id = 3 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 map_id = 3 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveInstanceResponse::MergeFrom(const LeaveInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveInstanceResponse::CopyFrom(const LeaveInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveInstanceResponse::Swap(LeaveInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveInstanceResponse_descriptor_;
  metadata.reflection = LeaveInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetInstanceItemRequest::GetInstanceItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceItemRequest::InitAsDefaultInstance() {
}

GetInstanceItemRequest::GetInstanceItemRequest(const GetInstanceItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceItemRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceItemRequest::~GetInstanceItemRequest() {
  SharedDtor();
}

void GetInstanceItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceItemRequest_descriptor_;
}

const GetInstanceItemRequest& GetInstanceItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceItemRequest* GetInstanceItemRequest::default_instance_ = NULL;

GetInstanceItemRequest* GetInstanceItemRequest::New() const {
  return new GetInstanceItemRequest;
}

void GetInstanceItemRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetInstanceItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceItemRequest::MergeFrom(const GetInstanceItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceItemRequest::CopyFrom(const GetInstanceItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceItemRequest::IsInitialized() const {
  
  return true;
}

void GetInstanceItemRequest::Swap(GetInstanceItemRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceItemRequest_descriptor_;
  metadata.reflection = GetInstanceItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetInstanceItemResponse::GetInstanceItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceItemResponse::InitAsDefaultInstance() {
}

GetInstanceItemResponse::GetInstanceItemResponse(const GetInstanceItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceItemResponse::~GetInstanceItemResponse() {
  SharedDtor();
}

void GetInstanceItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceItemResponse_descriptor_;
}

const GetInstanceItemResponse& GetInstanceItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceItemResponse* GetInstanceItemResponse::default_instance_ = NULL;

GetInstanceItemResponse* GetInstanceItemResponse::New() const {
  return new GetInstanceItemResponse;
}

void GetInstanceItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceItemResponse::MergeFrom(const GetInstanceItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceItemResponse::CopyFrom(const GetInstanceItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInstanceItemResponse::Swap(GetInstanceItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceItemResponse_descriptor_;
  metadata.reflection = GetInstanceItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListPassInstanceRequest::ListPassInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListPassInstanceRequest::InitAsDefaultInstance() {
}

ListPassInstanceRequest::ListPassInstanceRequest(const ListPassInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListPassInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListPassInstanceRequest::~ListPassInstanceRequest() {
  SharedDtor();
}

void ListPassInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListPassInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPassInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListPassInstanceRequest_descriptor_;
}

const ListPassInstanceRequest& ListPassInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ListPassInstanceRequest* ListPassInstanceRequest::default_instance_ = NULL;

ListPassInstanceRequest* ListPassInstanceRequest::New() const {
  return new ListPassInstanceRequest;
}

void ListPassInstanceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListPassInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ListPassInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListPassInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListPassInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPassInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListPassInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListPassInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListPassInstanceRequest::MergeFrom(const ListPassInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListPassInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPassInstanceRequest::CopyFrom(const ListPassInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPassInstanceRequest::IsInitialized() const {
  
  return true;
}

void ListPassInstanceRequest::Swap(ListPassInstanceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListPassInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListPassInstanceRequest_descriptor_;
  metadata.reflection = ListPassInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListPassInstanceResponse::kErrorCodeFieldNumber;
const int ListPassInstanceResponse::kInstanceListFieldNumber;
const int ListPassInstanceResponse::kAccessCountFieldNumber;
#endif  // !_MSC_VER

ListPassInstanceResponse::ListPassInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListPassInstanceResponse::InitAsDefaultInstance() {
}

ListPassInstanceResponse::ListPassInstanceResponse(const ListPassInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListPassInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  access_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListPassInstanceResponse::~ListPassInstanceResponse() {
  SharedDtor();
}

void ListPassInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListPassInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListPassInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListPassInstanceResponse_descriptor_;
}

const ListPassInstanceResponse& ListPassInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ListPassInstanceResponse* ListPassInstanceResponse::default_instance_ = NULL;

ListPassInstanceResponse* ListPassInstanceResponse::New() const {
  return new ListPassInstanceResponse;
}

void ListPassInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    access_count_ = 0;
  }
  instance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListPassInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_list;
        break;
      }
      
      // repeated .protocols.common.InstanceInfo instance_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_list;
        if (input->ExpectTag(24)) goto parse_access_count;
        break;
      }
      
      // optional int32 access_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &access_count_)));
          set_has_access_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListPassInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.InstanceInfo instance_list = 2;
  for (int i = 0; i < this->instance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_list(i), output);
  }
  
  // optional int32 access_count = 3;
  if (has_access_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->access_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListPassInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.InstanceInfo instance_list = 2;
  for (int i = 0; i < this->instance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_list(i), target);
  }
  
  // optional int32 access_count = 3;
  if (has_access_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->access_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListPassInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 access_count = 3;
    if (has_access_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->access_count());
    }
    
  }
  // repeated .protocols.common.InstanceInfo instance_list = 2;
  total_size += 1 * this->instance_list_size();
  for (int i = 0; i < this->instance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListPassInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListPassInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListPassInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListPassInstanceResponse::MergeFrom(const ListPassInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_list_.MergeFrom(from.instance_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_access_count()) {
      set_access_count(from.access_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListPassInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPassInstanceResponse::CopyFrom(const ListPassInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPassInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ListPassInstanceResponse::Swap(ListPassInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    instance_list_.Swap(&other->instance_list_);
    std::swap(access_count_, other->access_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListPassInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListPassInstanceResponse_descriptor_;
  metadata.reflection = ListPassInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetInstanceDetailRequest::GetInstanceDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceDetailRequest::InitAsDefaultInstance() {
}

GetInstanceDetailRequest::GetInstanceDetailRequest(const GetInstanceDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceDetailRequest::~GetInstanceDetailRequest() {
  SharedDtor();
}

void GetInstanceDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceDetailRequest_descriptor_;
}

const GetInstanceDetailRequest& GetInstanceDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceDetailRequest* GetInstanceDetailRequest::default_instance_ = NULL;

GetInstanceDetailRequest* GetInstanceDetailRequest::New() const {
  return new GetInstanceDetailRequest;
}

void GetInstanceDetailRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetInstanceDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceDetailRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceDetailRequest::MergeFrom(const GetInstanceDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceDetailRequest::CopyFrom(const GetInstanceDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceDetailRequest::IsInitialized() const {
  
  return true;
}

void GetInstanceDetailRequest::Swap(GetInstanceDetailRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceDetailRequest_descriptor_;
  metadata.reflection = GetInstanceDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceDetailResponse::kErrorCodeFieldNumber;
const int GetInstanceDetailResponse::kInstanceDetailFieldNumber;
#endif  // !_MSC_VER

GetInstanceDetailResponse::GetInstanceDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceDetailResponse::InitAsDefaultInstance() {
  instance_detail_ = const_cast< ::protocols::common::InstanceDetail*>(&::protocols::common::InstanceDetail::default_instance());
}

GetInstanceDetailResponse::GetInstanceDetailResponse(const GetInstanceDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  instance_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceDetailResponse::~GetInstanceDetailResponse() {
  SharedDtor();
}

void GetInstanceDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete instance_detail_;
  }
}

void GetInstanceDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceDetailResponse_descriptor_;
}

const GetInstanceDetailResponse& GetInstanceDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceDetailResponse* GetInstanceDetailResponse::default_instance_ = NULL;

GetInstanceDetailResponse* GetInstanceDetailResponse::New() const {
  return new GetInstanceDetailResponse;
}

void GetInstanceDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_instance_detail()) {
      if (instance_detail_ != NULL) instance_detail_->::protocols::common::InstanceDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_detail;
        break;
      }
      
      // optional .protocols.common.InstanceDetail instance_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.InstanceDetail instance_detail = 2;
  if (has_instance_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.InstanceDetail instance_detail = 2;
  if (has_instance_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceDetailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.InstanceDetail instance_detail = 2;
    if (has_instance_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceDetailResponse::MergeFrom(const GetInstanceDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_instance_detail()) {
      mutable_instance_detail()->::protocols::common::InstanceDetail::MergeFrom(from.instance_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceDetailResponse::CopyFrom(const GetInstanceDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInstanceDetailResponse::Swap(GetInstanceDetailResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(instance_detail_, other->instance_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceDetailResponse_descriptor_;
  metadata.reflection = GetInstanceDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassInstanceNotify::kInstanceInfoFieldNumber;
const int PassInstanceNotify::kExpFieldNumber;
const int PassInstanceNotify::kCoinFieldNumber;
const int PassInstanceNotify::kItemTidFieldNumber;
const int PassInstanceNotify::kItemCountFieldNumber;
const int PassInstanceNotify::kVipExpFieldNumber;
const int PassInstanceNotify::kVipCoinFieldNumber;
#endif  // !_MSC_VER

PassInstanceNotify::PassInstanceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassInstanceNotify::InitAsDefaultInstance() {
  instance_info_ = const_cast< ::protocols::common::InstanceInfo*>(&::protocols::common::InstanceInfo::default_instance());
}

PassInstanceNotify::PassInstanceNotify(const PassInstanceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassInstanceNotify::SharedCtor() {
  _cached_size_ = 0;
  instance_info_ = NULL;
  exp_ = 0;
  coin_ = 0;
  item_tid_ = 0;
  item_count_ = 0;
  vip_exp_ = 0;
  vip_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassInstanceNotify::~PassInstanceNotify() {
  SharedDtor();
}

void PassInstanceNotify::SharedDtor() {
  if (this != default_instance_) {
    delete instance_info_;
  }
}

void PassInstanceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassInstanceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassInstanceNotify_descriptor_;
}

const PassInstanceNotify& PassInstanceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PassInstanceNotify* PassInstanceNotify::default_instance_ = NULL;

PassInstanceNotify* PassInstanceNotify::New() const {
  return new PassInstanceNotify;
}

void PassInstanceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instance_info()) {
      if (instance_info_ != NULL) instance_info_->::protocols::common::InstanceInfo::Clear();
    }
    exp_ = 0;
    coin_ = 0;
    item_tid_ = 0;
    item_count_ = 0;
    vip_exp_ = 0;
    vip_coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassInstanceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.InstanceInfo instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_tid;
        break;
      }
      
      // optional int32 item_tid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }
      
      // optional int32 item_count = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_exp;
        break;
      }
      
      // optional int32 vip_exp = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vip_coin;
        break;
      }
      
      // optional int32 vip_coin = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_coin_)));
          set_has_vip_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassInstanceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.InstanceInfo instance_info = 1;
  if (has_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instance_info(), output);
  }
  
  // optional int32 exp = 2 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 coin = 3 [default = 0];
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }
  
  // optional int32 item_tid = 4 [default = 0];
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_tid(), output);
  }
  
  // optional int32 item_count = 5 [default = 0];
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_count(), output);
  }
  
  // optional int32 vip_exp = 6 [default = 0];
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip_exp(), output);
  }
  
  // optional int32 vip_coin = 7 [default = 0];
  if (has_vip_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vip_coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassInstanceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.InstanceInfo instance_info = 1;
  if (has_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instance_info(), target);
  }
  
  // optional int32 exp = 2 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 coin = 3 [default = 0];
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }
  
  // optional int32 item_tid = 4 [default = 0];
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_tid(), target);
  }
  
  // optional int32 item_count = 5 [default = 0];
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_count(), target);
  }
  
  // optional int32 vip_exp = 6 [default = 0];
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip_exp(), target);
  }
  
  // optional int32 vip_coin = 7 [default = 0];
  if (has_vip_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vip_coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassInstanceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.InstanceInfo instance_info = 1;
    if (has_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_info());
    }
    
    // optional int32 exp = 2 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 coin = 3 [default = 0];
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 item_tid = 4 [default = 0];
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_tid());
    }
    
    // optional int32 item_count = 5 [default = 0];
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // optional int32 vip_exp = 6 [default = 0];
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp());
    }
    
    // optional int32 vip_coin = 7 [default = 0];
    if (has_vip_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassInstanceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassInstanceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassInstanceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassInstanceNotify::MergeFrom(const PassInstanceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_info()) {
      mutable_instance_info()->::protocols::common::InstanceInfo::MergeFrom(from.instance_info());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_vip_coin()) {
      set_vip_coin(from.vip_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassInstanceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassInstanceNotify::CopyFrom(const PassInstanceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassInstanceNotify::IsInitialized() const {
  
  return true;
}

void PassInstanceNotify::Swap(PassInstanceNotify* other) {
  if (other != this) {
    std::swap(instance_info_, other->instance_info_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(item_count_, other->item_count_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(vip_coin_, other->vip_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassInstanceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassInstanceNotify_descriptor_;
  metadata.reflection = PassInstanceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerInfoRequest::PlayerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoRequest::InitAsDefaultInstance() {
}

PlayerInfoRequest::PlayerInfoRequest(const PlayerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoRequest::~PlayerInfoRequest() {
  SharedDtor();
}

void PlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRequest_descriptor_;
}

const PlayerInfoRequest& PlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerInfoRequest* PlayerInfoRequest::default_instance_ = NULL;

PlayerInfoRequest* PlayerInfoRequest::New() const {
  return new PlayerInfoRequest;
}

void PlayerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoRequest::MergeFrom(const PlayerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoRequest::CopyFrom(const PlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerInfoRequest::Swap(PlayerInfoRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoRequest_descriptor_;
  metadata.reflection = PlayerInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoResponse::kErrorCodeFieldNumber;
const int PlayerInfoResponse::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

PlayerInfoResponse::PlayerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoResponse::InitAsDefaultInstance() {
  player_info_ = const_cast< ::protocols::common::PlayerInfo*>(&::protocols::common::PlayerInfo::default_instance());
}

PlayerInfoResponse::PlayerInfoResponse(const PlayerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoResponse::~PlayerInfoResponse() {
  SharedDtor();
}

void PlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void PlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoResponse_descriptor_;
}

const PlayerInfoResponse& PlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerInfoResponse* PlayerInfoResponse::default_instance_ = NULL;

PlayerInfoResponse* PlayerInfoResponse::New() const {
  return new PlayerInfoResponse;
}

void PlayerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::PlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }
      
      // optional .protocols.common.PlayerInfo player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.PlayerInfo player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoResponse::MergeFrom(const PlayerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::PlayerInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoResponse::CopyFrom(const PlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoResponse::Swap(PlayerInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(player_info_, other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoResponse_descriptor_;
  metadata.reflection = PlayerInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyDetailInfoRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

BuddyDetailInfoRequest::BuddyDetailInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyDetailInfoRequest::InitAsDefaultInstance() {
}

BuddyDetailInfoRequest::BuddyDetailInfoRequest(const BuddyDetailInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyDetailInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyDetailInfoRequest::~BuddyDetailInfoRequest() {
  SharedDtor();
}

void BuddyDetailInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyDetailInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyDetailInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyDetailInfoRequest_descriptor_;
}

const BuddyDetailInfoRequest& BuddyDetailInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyDetailInfoRequest* BuddyDetailInfoRequest::default_instance_ = NULL;

BuddyDetailInfoRequest* BuddyDetailInfoRequest::New() const {
  return new BuddyDetailInfoRequest;
}

void BuddyDetailInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyDetailInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyDetailInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyDetailInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyDetailInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyDetailInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyDetailInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyDetailInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyDetailInfoRequest::MergeFrom(const BuddyDetailInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyDetailInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyDetailInfoRequest::CopyFrom(const BuddyDetailInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyDetailInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuddyDetailInfoRequest::Swap(BuddyDetailInfoRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyDetailInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyDetailInfoRequest_descriptor_;
  metadata.reflection = BuddyDetailInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyDetailInfoResponse::kPlayerInfoFieldNumber;
const int BuddyDetailInfoResponse::kBuddyDetailFieldNumber;
const int BuddyDetailInfoResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

BuddyDetailInfoResponse::BuddyDetailInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyDetailInfoResponse::InitAsDefaultInstance() {
  player_info_ = const_cast< ::protocols::common::PlayerInfo*>(&::protocols::common::PlayerInfo::default_instance());
  buddy_detail_ = const_cast< ::protocols::common::BuddyDetailInfo*>(&::protocols::common::BuddyDetailInfo::default_instance());
}

BuddyDetailInfoResponse::BuddyDetailInfoResponse(const BuddyDetailInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyDetailInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  buddy_detail_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyDetailInfoResponse::~BuddyDetailInfoResponse() {
  SharedDtor();
}

void BuddyDetailInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
    delete buddy_detail_;
  }
}

void BuddyDetailInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyDetailInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyDetailInfoResponse_descriptor_;
}

const BuddyDetailInfoResponse& BuddyDetailInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyDetailInfoResponse* BuddyDetailInfoResponse::default_instance_ = NULL;

BuddyDetailInfoResponse* BuddyDetailInfoResponse::New() const {
  return new BuddyDetailInfoResponse;
}

void BuddyDetailInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::PlayerInfo::Clear();
    }
    if (has_buddy_detail()) {
      if (buddy_detail_ != NULL) buddy_detail_->::protocols::common::BuddyDetailInfo::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyDetailInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.BuddyDetailInfo buddy_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buddy_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }
      
      // optional .protocols.common.PlayerInfo player_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyDetailInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.BuddyDetailInfo buddy_detail = 1;
  if (has_buddy_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buddy_detail(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 3;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyDetailInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.BuddyDetailInfo buddy_detail = 1;
  if (has_buddy_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buddy_detail(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 3;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyDetailInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.PlayerInfo player_info = 3;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional .protocols.common.BuddyDetailInfo buddy_detail = 1;
    if (has_buddy_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buddy_detail());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyDetailInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyDetailInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyDetailInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyDetailInfoResponse::MergeFrom(const BuddyDetailInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::PlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_buddy_detail()) {
      mutable_buddy_detail()->::protocols::common::BuddyDetailInfo::MergeFrom(from.buddy_detail());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyDetailInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyDetailInfoResponse::CopyFrom(const BuddyDetailInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyDetailInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  if (has_buddy_detail()) {
    if (!this->buddy_detail().IsInitialized()) return false;
  }
  return true;
}

void BuddyDetailInfoResponse::Swap(BuddyDetailInfoResponse* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    std::swap(buddy_detail_, other->buddy_detail_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyDetailInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyDetailInfoResponse_descriptor_;
  metadata.reflection = BuddyDetailInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrChangeNotify::kAttrTypeFieldNumber;
const int AttrChangeNotify::kLineupCapacityFieldNumber;
#endif  // !_MSC_VER

AttrChangeNotify::AttrChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrChangeNotify::InitAsDefaultInstance() {
}

AttrChangeNotify::AttrChangeNotify(const AttrChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0;
  lineup_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrChangeNotify::~AttrChangeNotify() {
  SharedDtor();
}

void AttrChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrChangeNotify_descriptor_;
}

const AttrChangeNotify& AttrChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AttrChangeNotify* AttrChangeNotify::default_instance_ = NULL;

AttrChangeNotify* AttrChangeNotify::New() const {
  return new AttrChangeNotify;
}

void AttrChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0;
    lineup_capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup_capacity;
        break;
      }
      
      // optional int32 lineup_capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_capacity_)));
          set_has_lineup_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_type(), output);
  }
  
  // optional int32 lineup_capacity = 2;
  if (has_lineup_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lineup_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 attr_type = 1;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_type(), target);
  }
  
  // optional int32 lineup_capacity = 2;
  if (has_lineup_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lineup_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }
    
    // optional int32 lineup_capacity = 2;
    if (has_lineup_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrChangeNotify::MergeFrom(const AttrChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_lineup_capacity()) {
      set_lineup_capacity(from.lineup_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrChangeNotify::CopyFrom(const AttrChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AttrChangeNotify::Swap(AttrChangeNotify* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(lineup_capacity_, other->lineup_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrChangeNotify_descriptor_;
  metadata.reflection = AttrChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLogout::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerLogout::PlayerLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLogout::InitAsDefaultInstance() {
}

PlayerLogout::PlayerLogout(const PlayerLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLogout::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLogout::~PlayerLogout() {
  SharedDtor();
}

void PlayerLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLogout_descriptor_;
}

const PlayerLogout& PlayerLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerLogout* PlayerLogout::default_instance_ = NULL;

PlayerLogout* PlayerLogout::New() const {
  return new PlayerLogout;
}

void PlayerLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLogout::MergeFrom(const PlayerLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLogout::CopyFrom(const PlayerLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerLogout::Swap(PlayerLogout* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLogout_descriptor_;
  metadata.reflection = PlayerLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPlayerRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

KickPlayerRequest::KickPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPlayerRequest::InitAsDefaultInstance() {
}

KickPlayerRequest::KickPlayerRequest(const KickPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerRequest::~KickPlayerRequest() {
  SharedDtor();
}

void KickPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPlayerRequest_descriptor_;
}

const KickPlayerRequest& KickPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

KickPlayerRequest* KickPlayerRequest::default_instance_ = NULL;

KickPlayerRequest* KickPlayerRequest::New() const {
  return new KickPlayerRequest;
}

void KickPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPlayerRequest::MergeFrom(const KickPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerRequest::CopyFrom(const KickPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequest::IsInitialized() const {
  
  return true;
}

void KickPlayerRequest::Swap(KickPlayerRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPlayerRequest_descriptor_;
  metadata.reflection = KickPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPlayerResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

KickPlayerResponse::KickPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPlayerResponse::InitAsDefaultInstance() {
}

KickPlayerResponse::KickPlayerResponse(const KickPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerResponse::~KickPlayerResponse() {
  SharedDtor();
}

void KickPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPlayerResponse_descriptor_;
}

const KickPlayerResponse& KickPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

KickPlayerResponse* KickPlayerResponse::default_instance_ = NULL;

KickPlayerResponse* KickPlayerResponse::New() const {
  return new KickPlayerResponse;
}

void KickPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPlayerResponse::MergeFrom(const KickPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerResponse::CopyFrom(const KickPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KickPlayerResponse::Swap(KickPlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPlayerResponse_descriptor_;
  metadata.reflection = KickPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPlayerNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

KickPlayerNotify::KickPlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPlayerNotify::InitAsDefaultInstance() {
}

KickPlayerNotify::KickPlayerNotify(const KickPlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerNotify::~KickPlayerNotify() {
  SharedDtor();
}

void KickPlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPlayerNotify_descriptor_;
}

const KickPlayerNotify& KickPlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

KickPlayerNotify* KickPlayerNotify::default_instance_ = NULL;

KickPlayerNotify* KickPlayerNotify::New() const {
  return new KickPlayerNotify;
}

void KickPlayerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPlayerNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPlayerNotify::MergeFrom(const KickPlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerNotify::CopyFrom(const KickPlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerNotify::IsInitialized() const {
  
  return true;
}

void KickPlayerNotify::Swap(KickPlayerNotify* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPlayerNotify_descriptor_;
  metadata.reflection = KickPlayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetYinglingListRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

GetYinglingListRequest::GetYinglingListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingListRequest::InitAsDefaultInstance() {
}

GetYinglingListRequest::GetYinglingListRequest(const GetYinglingListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingListRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingListRequest::~GetYinglingListRequest() {
  SharedDtor();
}

void GetYinglingListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetYinglingListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingListRequest_descriptor_;
}

const GetYinglingListRequest& GetYinglingListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingListRequest* GetYinglingListRequest::default_instance_ = NULL;

GetYinglingListRequest* GetYinglingListRequest::New() const {
  return new GetYinglingListRequest;
}

void GetYinglingListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetYinglingListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingListRequest::MergeFrom(const GetYinglingListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingListRequest::CopyFrom(const GetYinglingListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetYinglingListRequest::Swap(GetYinglingListRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingListRequest_descriptor_;
  metadata.reflection = GetYinglingListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetYinglingListResponse::kErrorCodeFieldNumber;
const int GetYinglingListResponse::kYinglingsFieldNumber;
const int GetYinglingListResponse::kHiredSlotNumFieldNumber;
const int GetYinglingListResponse::kHiredSlotNextOpenLevelFieldNumber;
const int GetYinglingListResponse::kHiredSlotCostYuanbaoFieldNumber;
#endif  // !_MSC_VER

GetYinglingListResponse::GetYinglingListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingListResponse::InitAsDefaultInstance() {
}

GetYinglingListResponse::GetYinglingListResponse(const GetYinglingListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  hired_slot_num_ = 0;
  hired_slot_next_open_level_ = 0;
  hired_slot_cost_yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingListResponse::~GetYinglingListResponse() {
  SharedDtor();
}

void GetYinglingListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetYinglingListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingListResponse_descriptor_;
}

const GetYinglingListResponse& GetYinglingListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingListResponse* GetYinglingListResponse::default_instance_ = NULL;

GetYinglingListResponse* GetYinglingListResponse::New() const {
  return new GetYinglingListResponse;
}

void GetYinglingListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    hired_slot_num_ = 0;
    hired_slot_next_open_level_ = 0;
    hired_slot_cost_yuanbao_ = 0;
  }
  yinglings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yinglings;
        break;
      }
      
      // repeated .protocols.common.YinglingInfo yinglings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yinglings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yinglings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yinglings;
        if (input->ExpectTag(24)) goto parse_hired_slot_num;
        break;
      }
      
      // optional int32 hired_slot_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hired_slot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hired_slot_num_)));
          set_has_hired_slot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hired_slot_next_open_level;
        break;
      }
      
      // optional int32 hired_slot_next_open_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hired_slot_next_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hired_slot_next_open_level_)));
          set_has_hired_slot_next_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hired_slot_cost_yuanbao;
        break;
      }
      
      // optional int32 hired_slot_cost_yuanbao = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hired_slot_cost_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hired_slot_cost_yuanbao_)));
          set_has_hired_slot_cost_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetYinglingListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.YinglingInfo yinglings = 2;
  for (int i = 0; i < this->yinglings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yinglings(i), output);
  }
  
  // optional int32 hired_slot_num = 3;
  if (has_hired_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hired_slot_num(), output);
  }
  
  // optional int32 hired_slot_next_open_level = 4;
  if (has_hired_slot_next_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hired_slot_next_open_level(), output);
  }
  
  // optional int32 hired_slot_cost_yuanbao = 5;
  if (has_hired_slot_cost_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hired_slot_cost_yuanbao(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.YinglingInfo yinglings = 2;
  for (int i = 0; i < this->yinglings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yinglings(i), target);
  }
  
  // optional int32 hired_slot_num = 3;
  if (has_hired_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hired_slot_num(), target);
  }
  
  // optional int32 hired_slot_next_open_level = 4;
  if (has_hired_slot_next_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hired_slot_next_open_level(), target);
  }
  
  // optional int32 hired_slot_cost_yuanbao = 5;
  if (has_hired_slot_cost_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hired_slot_cost_yuanbao(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 hired_slot_num = 3;
    if (has_hired_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hired_slot_num());
    }
    
    // optional int32 hired_slot_next_open_level = 4;
    if (has_hired_slot_next_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hired_slot_next_open_level());
    }
    
    // optional int32 hired_slot_cost_yuanbao = 5;
    if (has_hired_slot_cost_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hired_slot_cost_yuanbao());
    }
    
  }
  // repeated .protocols.common.YinglingInfo yinglings = 2;
  total_size += 1 * this->yinglings_size();
  for (int i = 0; i < this->yinglings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yinglings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingListResponse::MergeFrom(const GetYinglingListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  yinglings_.MergeFrom(from.yinglings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hired_slot_num()) {
      set_hired_slot_num(from.hired_slot_num());
    }
    if (from.has_hired_slot_next_open_level()) {
      set_hired_slot_next_open_level(from.hired_slot_next_open_level());
    }
    if (from.has_hired_slot_cost_yuanbao()) {
      set_hired_slot_cost_yuanbao(from.hired_slot_cost_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingListResponse::CopyFrom(const GetYinglingListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < yinglings_size(); i++) {
    if (!this->yinglings(i).IsInitialized()) return false;
  }
  return true;
}

void GetYinglingListResponse::Swap(GetYinglingListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    yinglings_.Swap(&other->yinglings_);
    std::swap(hired_slot_num_, other->hired_slot_num_);
    std::swap(hired_slot_next_open_level_, other->hired_slot_next_open_level_);
    std::swap(hired_slot_cost_yuanbao_, other->hired_slot_cost_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingListResponse_descriptor_;
  metadata.reflection = GetYinglingListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyError::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

NotifyError::NotifyError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyError::InitAsDefaultInstance() {
}

NotifyError::NotifyError(const NotifyError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyError::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyError::~NotifyError() {
  SharedDtor();
}

void NotifyError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyError_descriptor_;
}

const NotifyError& NotifyError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

NotifyError* NotifyError::default_instance_ = NULL;

NotifyError* NotifyError::New() const {
  return new NotifyError;
}

void NotifyError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyError::MergeFrom(const NotifyError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyError::CopyFrom(const NotifyError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyError::IsInitialized() const {
  
  return true;
}

void NotifyError::Swap(NotifyError* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyError_descriptor_;
  metadata.reflection = NotifyError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetYinglingHiringStatusReq::GetYinglingHiringStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingHiringStatusReq::InitAsDefaultInstance() {
}

GetYinglingHiringStatusReq::GetYinglingHiringStatusReq(const GetYinglingHiringStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingHiringStatusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingHiringStatusReq::~GetYinglingHiringStatusReq() {
  SharedDtor();
}

void GetYinglingHiringStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetYinglingHiringStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingHiringStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingHiringStatusReq_descriptor_;
}

const GetYinglingHiringStatusReq& GetYinglingHiringStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingHiringStatusReq* GetYinglingHiringStatusReq::default_instance_ = NULL;

GetYinglingHiringStatusReq* GetYinglingHiringStatusReq::New() const {
  return new GetYinglingHiringStatusReq;
}

void GetYinglingHiringStatusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingHiringStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetYinglingHiringStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingHiringStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingHiringStatusReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingHiringStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingHiringStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingHiringStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingHiringStatusReq::MergeFrom(const GetYinglingHiringStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingHiringStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingHiringStatusReq::CopyFrom(const GetYinglingHiringStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingHiringStatusReq::IsInitialized() const {
  
  return true;
}

void GetYinglingHiringStatusReq::Swap(GetYinglingHiringStatusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingHiringStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingHiringStatusReq_descriptor_;
  metadata.reflection = GetYinglingHiringStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingHiringStatusNotify::kCoolDownTickFieldNumber;
const int YinglingHiringStatusNotify::kMaxNoneCooldownHiringCountFieldNumber;
const int YinglingHiringStatusNotify::kCurNoneCooldownHiringCountFieldNumber;
const int YinglingHiringStatusNotify::kOpenedPosFieldNumber;
const int YinglingHiringStatusNotify::kYinglingFieldNumber;
#endif  // !_MSC_VER

YinglingHiringStatusNotify::YinglingHiringStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingHiringStatusNotify::InitAsDefaultInstance() {
}

YinglingHiringStatusNotify::YinglingHiringStatusNotify(const YinglingHiringStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingHiringStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  cool_down_tick_ = 0;
  max_none_cooldown_hiring_count_ = 0;
  cur_none_cooldown_hiring_count_ = 0;
  opened_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingHiringStatusNotify::~YinglingHiringStatusNotify() {
  SharedDtor();
}

void YinglingHiringStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingHiringStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingHiringStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingHiringStatusNotify_descriptor_;
}

const YinglingHiringStatusNotify& YinglingHiringStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YinglingHiringStatusNotify* YinglingHiringStatusNotify::default_instance_ = NULL;

YinglingHiringStatusNotify* YinglingHiringStatusNotify::New() const {
  return new YinglingHiringStatusNotify;
}

void YinglingHiringStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cool_down_tick_ = 0;
    max_none_cooldown_hiring_count_ = 0;
    cur_none_cooldown_hiring_count_ = 0;
    opened_pos_ = 0;
  }
  yingling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingHiringStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cool_down_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_tick_)));
          set_has_cool_down_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_none_cooldown_hiring_count;
        break;
      }
      
      // optional int32 max_none_cooldown_hiring_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_none_cooldown_hiring_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_none_cooldown_hiring_count_)));
          set_has_max_none_cooldown_hiring_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_none_cooldown_hiring_count;
        break;
      }
      
      // optional int32 cur_none_cooldown_hiring_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_none_cooldown_hiring_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_none_cooldown_hiring_count_)));
          set_has_cur_none_cooldown_hiring_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opened_pos;
        break;
      }
      
      // optional int32 opened_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opened_pos_)));
          set_has_opened_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_yingling;
        break;
      }
      
      // repeated .protocols.common.HiringYingling yingling = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_yingling;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingHiringStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cool_down_tick = 1;
  if (has_cool_down_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cool_down_tick(), output);
  }
  
  // optional int32 max_none_cooldown_hiring_count = 2;
  if (has_max_none_cooldown_hiring_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_none_cooldown_hiring_count(), output);
  }
  
  // optional int32 cur_none_cooldown_hiring_count = 3;
  if (has_cur_none_cooldown_hiring_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_none_cooldown_hiring_count(), output);
  }
  
  // optional int32 opened_pos = 4;
  if (has_opened_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opened_pos(), output);
  }
  
  // repeated .protocols.common.HiringYingling yingling = 5;
  for (int i = 0; i < this->yingling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->yingling(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingHiringStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cool_down_tick = 1;
  if (has_cool_down_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cool_down_tick(), target);
  }
  
  // optional int32 max_none_cooldown_hiring_count = 2;
  if (has_max_none_cooldown_hiring_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_none_cooldown_hiring_count(), target);
  }
  
  // optional int32 cur_none_cooldown_hiring_count = 3;
  if (has_cur_none_cooldown_hiring_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_none_cooldown_hiring_count(), target);
  }
  
  // optional int32 opened_pos = 4;
  if (has_opened_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opened_pos(), target);
  }
  
  // repeated .protocols.common.HiringYingling yingling = 5;
  for (int i = 0; i < this->yingling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->yingling(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingHiringStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cool_down_tick = 1;
    if (has_cool_down_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down_tick());
    }
    
    // optional int32 max_none_cooldown_hiring_count = 2;
    if (has_max_none_cooldown_hiring_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_none_cooldown_hiring_count());
    }
    
    // optional int32 cur_none_cooldown_hiring_count = 3;
    if (has_cur_none_cooldown_hiring_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_none_cooldown_hiring_count());
    }
    
    // optional int32 opened_pos = 4;
    if (has_opened_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opened_pos());
    }
    
  }
  // repeated .protocols.common.HiringYingling yingling = 5;
  total_size += 1 * this->yingling_size();
  for (int i = 0; i < this->yingling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingHiringStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingHiringStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingHiringStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingHiringStatusNotify::MergeFrom(const YinglingHiringStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_.MergeFrom(from.yingling_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cool_down_tick()) {
      set_cool_down_tick(from.cool_down_tick());
    }
    if (from.has_max_none_cooldown_hiring_count()) {
      set_max_none_cooldown_hiring_count(from.max_none_cooldown_hiring_count());
    }
    if (from.has_cur_none_cooldown_hiring_count()) {
      set_cur_none_cooldown_hiring_count(from.cur_none_cooldown_hiring_count());
    }
    if (from.has_opened_pos()) {
      set_opened_pos(from.opened_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingHiringStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingHiringStatusNotify::CopyFrom(const YinglingHiringStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingHiringStatusNotify::IsInitialized() const {
  
  return true;
}

void YinglingHiringStatusNotify::Swap(YinglingHiringStatusNotify* other) {
  if (other != this) {
    std::swap(cool_down_tick_, other->cool_down_tick_);
    std::swap(max_none_cooldown_hiring_count_, other->max_none_cooldown_hiring_count_);
    std::swap(cur_none_cooldown_hiring_count_, other->cur_none_cooldown_hiring_count_);
    std::swap(opened_pos_, other->opened_pos_);
    yingling_.Swap(&other->yingling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingHiringStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingHiringStatusNotify_descriptor_;
  metadata.reflection = YinglingHiringStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenYinglingHiringSlotReq::kPosFieldNumber;
#endif  // !_MSC_VER

OpenYinglingHiringSlotReq::OpenYinglingHiringSlotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenYinglingHiringSlotReq::InitAsDefaultInstance() {
}

OpenYinglingHiringSlotReq::OpenYinglingHiringSlotReq(const OpenYinglingHiringSlotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenYinglingHiringSlotReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenYinglingHiringSlotReq::~OpenYinglingHiringSlotReq() {
  SharedDtor();
}

void OpenYinglingHiringSlotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenYinglingHiringSlotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenYinglingHiringSlotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenYinglingHiringSlotReq_descriptor_;
}

const OpenYinglingHiringSlotReq& OpenYinglingHiringSlotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenYinglingHiringSlotReq* OpenYinglingHiringSlotReq::default_instance_ = NULL;

OpenYinglingHiringSlotReq* OpenYinglingHiringSlotReq::New() const {
  return new OpenYinglingHiringSlotReq;
}

void OpenYinglingHiringSlotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenYinglingHiringSlotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenYinglingHiringSlotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenYinglingHiringSlotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenYinglingHiringSlotReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenYinglingHiringSlotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenYinglingHiringSlotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenYinglingHiringSlotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenYinglingHiringSlotReq::MergeFrom(const OpenYinglingHiringSlotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenYinglingHiringSlotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenYinglingHiringSlotReq::CopyFrom(const OpenYinglingHiringSlotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenYinglingHiringSlotReq::IsInitialized() const {
  
  return true;
}

void OpenYinglingHiringSlotReq::Swap(OpenYinglingHiringSlotReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenYinglingHiringSlotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenYinglingHiringSlotReq_descriptor_;
  metadata.reflection = OpenYinglingHiringSlotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenYinglingHiringSlotNtf::kPosFieldNumber;
#endif  // !_MSC_VER

OpenYinglingHiringSlotNtf::OpenYinglingHiringSlotNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenYinglingHiringSlotNtf::InitAsDefaultInstance() {
}

OpenYinglingHiringSlotNtf::OpenYinglingHiringSlotNtf(const OpenYinglingHiringSlotNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenYinglingHiringSlotNtf::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenYinglingHiringSlotNtf::~OpenYinglingHiringSlotNtf() {
  SharedDtor();
}

void OpenYinglingHiringSlotNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenYinglingHiringSlotNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenYinglingHiringSlotNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenYinglingHiringSlotNtf_descriptor_;
}

const OpenYinglingHiringSlotNtf& OpenYinglingHiringSlotNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenYinglingHiringSlotNtf* OpenYinglingHiringSlotNtf::default_instance_ = NULL;

OpenYinglingHiringSlotNtf* OpenYinglingHiringSlotNtf::New() const {
  return new OpenYinglingHiringSlotNtf;
}

void OpenYinglingHiringSlotNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenYinglingHiringSlotNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenYinglingHiringSlotNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenYinglingHiringSlotNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenYinglingHiringSlotNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenYinglingHiringSlotNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenYinglingHiringSlotNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenYinglingHiringSlotNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenYinglingHiringSlotNtf::MergeFrom(const OpenYinglingHiringSlotNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenYinglingHiringSlotNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenYinglingHiringSlotNtf::CopyFrom(const OpenYinglingHiringSlotNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenYinglingHiringSlotNtf::IsInitialized() const {
  
  return true;
}

void OpenYinglingHiringSlotNtf::Swap(OpenYinglingHiringSlotNtf* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenYinglingHiringSlotNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenYinglingHiringSlotNtf_descriptor_;
  metadata.reflection = OpenYinglingHiringSlotNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenYinglingSlotReq::kPosFieldNumber;
#endif  // !_MSC_VER

OpenYinglingSlotReq::OpenYinglingSlotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenYinglingSlotReq::InitAsDefaultInstance() {
}

OpenYinglingSlotReq::OpenYinglingSlotReq(const OpenYinglingSlotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenYinglingSlotReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenYinglingSlotReq::~OpenYinglingSlotReq() {
  SharedDtor();
}

void OpenYinglingSlotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenYinglingSlotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenYinglingSlotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenYinglingSlotReq_descriptor_;
}

const OpenYinglingSlotReq& OpenYinglingSlotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenYinglingSlotReq* OpenYinglingSlotReq::default_instance_ = NULL;

OpenYinglingSlotReq* OpenYinglingSlotReq::New() const {
  return new OpenYinglingSlotReq;
}

void OpenYinglingSlotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenYinglingSlotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenYinglingSlotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenYinglingSlotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenYinglingSlotReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenYinglingSlotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenYinglingSlotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenYinglingSlotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenYinglingSlotReq::MergeFrom(const OpenYinglingSlotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenYinglingSlotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenYinglingSlotReq::CopyFrom(const OpenYinglingSlotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenYinglingSlotReq::IsInitialized() const {
  
  return true;
}

void OpenYinglingSlotReq::Swap(OpenYinglingSlotReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenYinglingSlotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenYinglingSlotReq_descriptor_;
  metadata.reflection = OpenYinglingSlotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenYinglingSlotResponse::kErrorCodeFieldNumber;
const int OpenYinglingSlotResponse::kNexSlotCostYuanbaoFieldNumber;
#endif  // !_MSC_VER

OpenYinglingSlotResponse::OpenYinglingSlotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenYinglingSlotResponse::InitAsDefaultInstance() {
}

OpenYinglingSlotResponse::OpenYinglingSlotResponse(const OpenYinglingSlotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenYinglingSlotResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  nex_slot_cost_yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenYinglingSlotResponse::~OpenYinglingSlotResponse() {
  SharedDtor();
}

void OpenYinglingSlotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenYinglingSlotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenYinglingSlotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenYinglingSlotResponse_descriptor_;
}

const OpenYinglingSlotResponse& OpenYinglingSlotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenYinglingSlotResponse* OpenYinglingSlotResponse::default_instance_ = NULL;

OpenYinglingSlotResponse* OpenYinglingSlotResponse::New() const {
  return new OpenYinglingSlotResponse;
}

void OpenYinglingSlotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    nex_slot_cost_yuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenYinglingSlotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nex_slot_cost_yuanbao;
        break;
      }
      
      // optional int32 nex_slot_cost_yuanbao = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nex_slot_cost_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nex_slot_cost_yuanbao_)));
          set_has_nex_slot_cost_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenYinglingSlotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 nex_slot_cost_yuanbao = 2;
  if (has_nex_slot_cost_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nex_slot_cost_yuanbao(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenYinglingSlotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 nex_slot_cost_yuanbao = 2;
  if (has_nex_slot_cost_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nex_slot_cost_yuanbao(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenYinglingSlotResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 nex_slot_cost_yuanbao = 2;
    if (has_nex_slot_cost_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nex_slot_cost_yuanbao());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenYinglingSlotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenYinglingSlotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenYinglingSlotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenYinglingSlotResponse::MergeFrom(const OpenYinglingSlotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_nex_slot_cost_yuanbao()) {
      set_nex_slot_cost_yuanbao(from.nex_slot_cost_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenYinglingSlotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenYinglingSlotResponse::CopyFrom(const OpenYinglingSlotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenYinglingSlotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OpenYinglingSlotResponse::Swap(OpenYinglingSlotResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(nex_slot_cost_yuanbao_, other->nex_slot_cost_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenYinglingSlotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenYinglingSlotResponse_descriptor_;
  metadata.reflection = OpenYinglingSlotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenYinglingSlotNtf::kPosFieldNumber;
const int OpenYinglingSlotNtf::kOpenedByLevelFieldNumber;
const int OpenYinglingSlotNtf::kOpenenByYuanbaoFieldNumber;
#endif  // !_MSC_VER

OpenYinglingSlotNtf::OpenYinglingSlotNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenYinglingSlotNtf::InitAsDefaultInstance() {
}

OpenYinglingSlotNtf::OpenYinglingSlotNtf(const OpenYinglingSlotNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenYinglingSlotNtf::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  opened_by_level_ = 0;
  openen_by_yuanbao_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenYinglingSlotNtf::~OpenYinglingSlotNtf() {
  SharedDtor();
}

void OpenYinglingSlotNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenYinglingSlotNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenYinglingSlotNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenYinglingSlotNtf_descriptor_;
}

const OpenYinglingSlotNtf& OpenYinglingSlotNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenYinglingSlotNtf* OpenYinglingSlotNtf::default_instance_ = NULL;

OpenYinglingSlotNtf* OpenYinglingSlotNtf::New() const {
  return new OpenYinglingSlotNtf;
}

void OpenYinglingSlotNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    opened_by_level_ = 0;
    openen_by_yuanbao_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenYinglingSlotNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opened_by_level;
        break;
      }
      
      // optional int32 opened_by_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened_by_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opened_by_level_)));
          set_has_opened_by_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_openen_by_yuanbao;
        break;
      }
      
      // optional int32 openen_by_yuanbao = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openen_by_yuanbao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openen_by_yuanbao_)));
          set_has_openen_by_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenYinglingSlotNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional int32 opened_by_level = 2;
  if (has_opened_by_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opened_by_level(), output);
  }
  
  // optional int32 openen_by_yuanbao = 3;
  if (has_openen_by_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->openen_by_yuanbao(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenYinglingSlotNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional int32 opened_by_level = 2;
  if (has_opened_by_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opened_by_level(), target);
  }
  
  // optional int32 openen_by_yuanbao = 3;
  if (has_openen_by_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->openen_by_yuanbao(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenYinglingSlotNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 opened_by_level = 2;
    if (has_opened_by_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opened_by_level());
    }
    
    // optional int32 openen_by_yuanbao = 3;
    if (has_openen_by_yuanbao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openen_by_yuanbao());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenYinglingSlotNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenYinglingSlotNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenYinglingSlotNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenYinglingSlotNtf::MergeFrom(const OpenYinglingSlotNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_opened_by_level()) {
      set_opened_by_level(from.opened_by_level());
    }
    if (from.has_openen_by_yuanbao()) {
      set_openen_by_yuanbao(from.openen_by_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenYinglingSlotNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenYinglingSlotNtf::CopyFrom(const OpenYinglingSlotNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenYinglingSlotNtf::IsInitialized() const {
  
  return true;
}

void OpenYinglingSlotNtf::Swap(OpenYinglingSlotNtf* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(opened_by_level_, other->opened_by_level_);
    std::swap(openen_by_yuanbao_, other->openen_by_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenYinglingSlotNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenYinglingSlotNtf_descriptor_;
  metadata.reflection = OpenYinglingSlotNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefeshYinglingHiringListReq::kUseYuanBaoFieldNumber;
const int RefeshYinglingHiringListReq::kGenTypeFieldNumber;
#endif  // !_MSC_VER

RefeshYinglingHiringListReq::RefeshYinglingHiringListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefeshYinglingHiringListReq::InitAsDefaultInstance() {
}

RefeshYinglingHiringListReq::RefeshYinglingHiringListReq(const RefeshYinglingHiringListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefeshYinglingHiringListReq::SharedCtor() {
  _cached_size_ = 0;
  use_yuan_bao_ = false;
  gen_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefeshYinglingHiringListReq::~RefeshYinglingHiringListReq() {
  SharedDtor();
}

void RefeshYinglingHiringListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefeshYinglingHiringListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefeshYinglingHiringListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefeshYinglingHiringListReq_descriptor_;
}

const RefeshYinglingHiringListReq& RefeshYinglingHiringListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RefeshYinglingHiringListReq* RefeshYinglingHiringListReq::default_instance_ = NULL;

RefeshYinglingHiringListReq* RefeshYinglingHiringListReq::New() const {
  return new RefeshYinglingHiringListReq;
}

void RefeshYinglingHiringListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_yuan_bao_ = false;
    gen_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefeshYinglingHiringListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_yuan_bao = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_yuan_bao_)));
          set_has_use_yuan_bao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gen_type;
        break;
      }
      
      // optional .protocols.common.RefreshYinglingListType gen_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gen_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::RefreshYinglingListType_IsValid(value)) {
            set_gen_type(static_cast< protocols::common::RefreshYinglingListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefeshYinglingHiringListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool use_yuan_bao = 1 [default = false];
  if (has_use_yuan_bao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_yuan_bao(), output);
  }
  
  // optional .protocols.common.RefreshYinglingListType gen_type = 2;
  if (has_gen_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gen_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefeshYinglingHiringListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool use_yuan_bao = 1 [default = false];
  if (has_use_yuan_bao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_yuan_bao(), target);
  }
  
  // optional .protocols.common.RefreshYinglingListType gen_type = 2;
  if (has_gen_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gen_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefeshYinglingHiringListReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_yuan_bao = 1 [default = false];
    if (has_use_yuan_bao()) {
      total_size += 1 + 1;
    }
    
    // optional .protocols.common.RefreshYinglingListType gen_type = 2;
    if (has_gen_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gen_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefeshYinglingHiringListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefeshYinglingHiringListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefeshYinglingHiringListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefeshYinglingHiringListReq::MergeFrom(const RefeshYinglingHiringListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_yuan_bao()) {
      set_use_yuan_bao(from.use_yuan_bao());
    }
    if (from.has_gen_type()) {
      set_gen_type(from.gen_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefeshYinglingHiringListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefeshYinglingHiringListReq::CopyFrom(const RefeshYinglingHiringListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefeshYinglingHiringListReq::IsInitialized() const {
  
  return true;
}

void RefeshYinglingHiringListReq::Swap(RefeshYinglingHiringListReq* other) {
  if (other != this) {
    std::swap(use_yuan_bao_, other->use_yuan_bao_);
    std::swap(gen_type_, other->gen_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefeshYinglingHiringListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefeshYinglingHiringListReq_descriptor_;
  metadata.reflection = RefeshYinglingHiringListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoRefeshYinglingHiringListReq::kUntilQualityFieldNumber;
const int AutoRefeshYinglingHiringListReq::kMaxCountFieldNumber;
#endif  // !_MSC_VER

AutoRefeshYinglingHiringListReq::AutoRefeshYinglingHiringListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoRefeshYinglingHiringListReq::InitAsDefaultInstance() {
}

AutoRefeshYinglingHiringListReq::AutoRefeshYinglingHiringListReq(const AutoRefeshYinglingHiringListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoRefeshYinglingHiringListReq::SharedCtor() {
  _cached_size_ = 0;
  until_quality_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoRefeshYinglingHiringListReq::~AutoRefeshYinglingHiringListReq() {
  SharedDtor();
}

void AutoRefeshYinglingHiringListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoRefeshYinglingHiringListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefeshYinglingHiringListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoRefeshYinglingHiringListReq_descriptor_;
}

const AutoRefeshYinglingHiringListReq& AutoRefeshYinglingHiringListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AutoRefeshYinglingHiringListReq* AutoRefeshYinglingHiringListReq::default_instance_ = NULL;

AutoRefeshYinglingHiringListReq* AutoRefeshYinglingHiringListReq::New() const {
  return new AutoRefeshYinglingHiringListReq;
}

void AutoRefeshYinglingHiringListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    until_quality_ = 0;
    max_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoRefeshYinglingHiringListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 until_quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &until_quality_)));
          set_has_until_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_count;
        break;
      }
      
      // optional int32 max_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoRefeshYinglingHiringListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 until_quality = 1;
  if (has_until_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->until_quality(), output);
  }
  
  // optional int32 max_count = 2;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoRefeshYinglingHiringListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 until_quality = 1;
  if (has_until_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->until_quality(), target);
  }
  
  // optional int32 max_count = 2;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoRefeshYinglingHiringListReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 until_quality = 1;
    if (has_until_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->until_quality());
    }
    
    // optional int32 max_count = 2;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefeshYinglingHiringListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoRefeshYinglingHiringListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoRefeshYinglingHiringListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoRefeshYinglingHiringListReq::MergeFrom(const AutoRefeshYinglingHiringListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_until_quality()) {
      set_until_quality(from.until_quality());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoRefeshYinglingHiringListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefeshYinglingHiringListReq::CopyFrom(const AutoRefeshYinglingHiringListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefeshYinglingHiringListReq::IsInitialized() const {
  
  return true;
}

void AutoRefeshYinglingHiringListReq::Swap(AutoRefeshYinglingHiringListReq* other) {
  if (other != this) {
    std::swap(until_quality_, other->until_quality_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoRefeshYinglingHiringListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoRefeshYinglingHiringListReq_descriptor_;
  metadata.reflection = AutoRefeshYinglingHiringListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoRefeshYinglingHiringListRep::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AutoRefeshYinglingHiringListRep::AutoRefeshYinglingHiringListRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoRefeshYinglingHiringListRep::InitAsDefaultInstance() {
}

AutoRefeshYinglingHiringListRep::AutoRefeshYinglingHiringListRep(const AutoRefeshYinglingHiringListRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoRefeshYinglingHiringListRep::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoRefeshYinglingHiringListRep::~AutoRefeshYinglingHiringListRep() {
  SharedDtor();
}

void AutoRefeshYinglingHiringListRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoRefeshYinglingHiringListRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoRefeshYinglingHiringListRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoRefeshYinglingHiringListRep_descriptor_;
}

const AutoRefeshYinglingHiringListRep& AutoRefeshYinglingHiringListRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AutoRefeshYinglingHiringListRep* AutoRefeshYinglingHiringListRep::default_instance_ = NULL;

AutoRefeshYinglingHiringListRep* AutoRefeshYinglingHiringListRep::New() const {
  return new AutoRefeshYinglingHiringListRep;
}

void AutoRefeshYinglingHiringListRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoRefeshYinglingHiringListRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoRefeshYinglingHiringListRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoRefeshYinglingHiringListRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoRefeshYinglingHiringListRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoRefeshYinglingHiringListRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoRefeshYinglingHiringListRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoRefeshYinglingHiringListRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoRefeshYinglingHiringListRep::MergeFrom(const AutoRefeshYinglingHiringListRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoRefeshYinglingHiringListRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoRefeshYinglingHiringListRep::CopyFrom(const AutoRefeshYinglingHiringListRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoRefeshYinglingHiringListRep::IsInitialized() const {
  
  return true;
}

void AutoRefeshYinglingHiringListRep::Swap(AutoRefeshYinglingHiringListRep* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoRefeshYinglingHiringListRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoRefeshYinglingHiringListRep_descriptor_;
  metadata.reflection = AutoRefeshYinglingHiringListRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HiringYingling::kPosFieldNumber;
const int HiringYingling::kTIdFieldNumber;
const int HiringYingling::kIsHiredFieldNumber;
const int HiringYingling::kOnceHiredFieldNumber;
#endif  // !_MSC_VER

HiringYingling::HiringYingling()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HiringYingling::InitAsDefaultInstance() {
}

HiringYingling::HiringYingling(const HiringYingling& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HiringYingling::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  t_id_ = 0;
  is_hired_ = false;
  once_hired_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HiringYingling::~HiringYingling() {
  SharedDtor();
}

void HiringYingling::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HiringYingling::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiringYingling::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HiringYingling_descriptor_;
}

const HiringYingling& HiringYingling::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HiringYingling* HiringYingling::default_instance_ = NULL;

HiringYingling* HiringYingling::New() const {
  return new HiringYingling;
}

void HiringYingling::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    t_id_ = 0;
    is_hired_ = false;
    once_hired_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HiringYingling::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t_id;
        break;
      }
      
      // optional int32 t_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_id_)));
          set_has_t_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_hired;
        break;
      }
      
      // optional bool is_hired = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hired_)));
          set_has_is_hired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_once_hired;
        break;
      }
      
      // optional bool once_hired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_once_hired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &once_hired_)));
          set_has_once_hired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HiringYingling::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }
  
  // optional int32 t_id = 2;
  if (has_t_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->t_id(), output);
  }
  
  // optional bool is_hired = 3 [default = false];
  if (has_is_hired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hired(), output);
  }
  
  // optional bool once_hired = 4;
  if (has_once_hired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->once_hired(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HiringYingling::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }
  
  // optional int32 t_id = 2;
  if (has_t_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->t_id(), target);
  }
  
  // optional bool is_hired = 3 [default = false];
  if (has_is_hired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hired(), target);
  }
  
  // optional bool once_hired = 4;
  if (has_once_hired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->once_hired(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HiringYingling::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 t_id = 2;
    if (has_t_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_id());
    }
    
    // optional bool is_hired = 3 [default = false];
    if (has_is_hired()) {
      total_size += 1 + 1;
    }
    
    // optional bool once_hired = 4;
    if (has_once_hired()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiringYingling::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HiringYingling* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HiringYingling*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HiringYingling::MergeFrom(const HiringYingling& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_t_id()) {
      set_t_id(from.t_id());
    }
    if (from.has_is_hired()) {
      set_is_hired(from.is_hired());
    }
    if (from.has_once_hired()) {
      set_once_hired(from.once_hired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HiringYingling::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiringYingling::CopyFrom(const HiringYingling& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiringYingling::IsInitialized() const {
  
  return true;
}

void HiringYingling::Swap(HiringYingling* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(t_id_, other->t_id_);
    std::swap(is_hired_, other->is_hired_);
    std::swap(once_hired_, other->once_hired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HiringYingling::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HiringYingling_descriptor_;
  metadata.reflection = HiringYingling_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefeshYinglingHiringListNtf::kYinglingFieldNumber;
const int RefeshYinglingHiringListNtf::kRandNumFieldNumber;
#endif  // !_MSC_VER

RefeshYinglingHiringListNtf::RefeshYinglingHiringListNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefeshYinglingHiringListNtf::InitAsDefaultInstance() {
}

RefeshYinglingHiringListNtf::RefeshYinglingHiringListNtf(const RefeshYinglingHiringListNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefeshYinglingHiringListNtf::SharedCtor() {
  _cached_size_ = 0;
  rand_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefeshYinglingHiringListNtf::~RefeshYinglingHiringListNtf() {
  SharedDtor();
}

void RefeshYinglingHiringListNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefeshYinglingHiringListNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefeshYinglingHiringListNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefeshYinglingHiringListNtf_descriptor_;
}

const RefeshYinglingHiringListNtf& RefeshYinglingHiringListNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RefeshYinglingHiringListNtf* RefeshYinglingHiringListNtf::default_instance_ = NULL;

RefeshYinglingHiringListNtf* RefeshYinglingHiringListNtf::New() const {
  return new RefeshYinglingHiringListNtf;
}

void RefeshYinglingHiringListNtf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rand_num_ = 0;
  }
  yingling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefeshYinglingHiringListNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.HiringYingling yingling = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_yingling;
        if (input->ExpectTag(16)) goto parse_rand_num;
        break;
      }
      
      // optional int32 rand_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_num_)));
          set_has_rand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefeshYinglingHiringListNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.HiringYingling yingling = 1;
  for (int i = 0; i < this->yingling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->yingling(i), output);
  }
  
  // optional int32 rand_num = 2;
  if (has_rand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rand_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefeshYinglingHiringListNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.HiringYingling yingling = 1;
  for (int i = 0; i < this->yingling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->yingling(i), target);
  }
  
  // optional int32 rand_num = 2;
  if (has_rand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rand_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefeshYinglingHiringListNtf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 rand_num = 2;
    if (has_rand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand_num());
    }
    
  }
  // repeated .protocols.common.HiringYingling yingling = 1;
  total_size += 1 * this->yingling_size();
  for (int i = 0; i < this->yingling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefeshYinglingHiringListNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefeshYinglingHiringListNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefeshYinglingHiringListNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefeshYinglingHiringListNtf::MergeFrom(const RefeshYinglingHiringListNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_.MergeFrom(from.yingling_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rand_num()) {
      set_rand_num(from.rand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefeshYinglingHiringListNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefeshYinglingHiringListNtf::CopyFrom(const RefeshYinglingHiringListNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefeshYinglingHiringListNtf::IsInitialized() const {
  
  return true;
}

void RefeshYinglingHiringListNtf::Swap(RefeshYinglingHiringListNtf* other) {
  if (other != this) {
    yingling_.Swap(&other->yingling_);
    std::swap(rand_num_, other->rand_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefeshYinglingHiringListNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefeshYinglingHiringListNtf_descriptor_;
  metadata.reflection = RefeshYinglingHiringListNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HireYinglingRequest::kYinglingTidFieldNumber;
const int HireYinglingRequest::kYinglingPosFieldNumber;
const int HireYinglingRequest::kSpecialHireFieldNumber;
#endif  // !_MSC_VER

HireYinglingRequest::HireYinglingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HireYinglingRequest::InitAsDefaultInstance() {
}

HireYinglingRequest::HireYinglingRequest(const HireYinglingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HireYinglingRequest::SharedCtor() {
  _cached_size_ = 0;
  yingling_tid_ = 0;
  yingling_pos_ = 0;
  special_hire_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HireYinglingRequest::~HireYinglingRequest() {
  SharedDtor();
}

void HireYinglingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HireYinglingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HireYinglingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HireYinglingRequest_descriptor_;
}

const HireYinglingRequest& HireYinglingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HireYinglingRequest* HireYinglingRequest::default_instance_ = NULL;

HireYinglingRequest* HireYinglingRequest::New() const {
  return new HireYinglingRequest;
}

void HireYinglingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yingling_tid_ = 0;
    yingling_pos_ = 0;
    special_hire_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HireYinglingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 yingling_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yingling_tid_)));
          set_has_yingling_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yingling_pos;
        break;
      }
      
      // optional int32 yingling_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yingling_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yingling_pos_)));
          set_has_yingling_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_special_hire;
        break;
      }
      
      // optional int32 special_hire = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_hire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &special_hire_)));
          set_has_special_hire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HireYinglingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 yingling_tid = 1;
  if (has_yingling_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->yingling_tid(), output);
  }
  
  // optional int32 yingling_pos = 2;
  if (has_yingling_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->yingling_pos(), output);
  }
  
  // optional int32 special_hire = 3;
  if (has_special_hire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->special_hire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HireYinglingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 yingling_tid = 1;
  if (has_yingling_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->yingling_tid(), target);
  }
  
  // optional int32 yingling_pos = 2;
  if (has_yingling_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->yingling_pos(), target);
  }
  
  // optional int32 special_hire = 3;
  if (has_special_hire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->special_hire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HireYinglingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 yingling_tid = 1;
    if (has_yingling_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yingling_tid());
    }
    
    // optional int32 yingling_pos = 2;
    if (has_yingling_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yingling_pos());
    }
    
    // optional int32 special_hire = 3;
    if (has_special_hire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->special_hire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HireYinglingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HireYinglingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HireYinglingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HireYinglingRequest::MergeFrom(const HireYinglingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yingling_tid()) {
      set_yingling_tid(from.yingling_tid());
    }
    if (from.has_yingling_pos()) {
      set_yingling_pos(from.yingling_pos());
    }
    if (from.has_special_hire()) {
      set_special_hire(from.special_hire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HireYinglingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HireYinglingRequest::CopyFrom(const HireYinglingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HireYinglingRequest::IsInitialized() const {
  
  return true;
}

void HireYinglingRequest::Swap(HireYinglingRequest* other) {
  if (other != this) {
    std::swap(yingling_tid_, other->yingling_tid_);
    std::swap(yingling_pos_, other->yingling_pos_);
    std::swap(special_hire_, other->special_hire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HireYinglingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HireYinglingRequest_descriptor_;
  metadata.reflection = HireYinglingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLingliRequest::GetLingliRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLingliRequest::InitAsDefaultInstance() {
}

GetLingliRequest::GetLingliRequest(const GetLingliRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLingliRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLingliRequest::~GetLingliRequest() {
  SharedDtor();
}

void GetLingliRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLingliRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLingliRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLingliRequest_descriptor_;
}

const GetLingliRequest& GetLingliRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLingliRequest* GetLingliRequest::default_instance_ = NULL;

GetLingliRequest* GetLingliRequest::New() const {
  return new GetLingliRequest;
}

void GetLingliRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLingliRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetLingliRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLingliRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLingliRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLingliRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLingliRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLingliRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLingliRequest::MergeFrom(const GetLingliRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLingliRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLingliRequest::CopyFrom(const GetLingliRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLingliRequest::IsInitialized() const {
  
  return true;
}

void GetLingliRequest::Swap(GetLingliRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLingliRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLingliRequest_descriptor_;
  metadata.reflection = GetLingliRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConvertYinglingRequest::ConvertYinglingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvertYinglingRequest::InitAsDefaultInstance() {
}

ConvertYinglingRequest::ConvertYinglingRequest(const ConvertYinglingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvertYinglingRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvertYinglingRequest::~ConvertYinglingRequest() {
  SharedDtor();
}

void ConvertYinglingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvertYinglingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvertYinglingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvertYinglingRequest_descriptor_;
}

const ConvertYinglingRequest& ConvertYinglingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ConvertYinglingRequest* ConvertYinglingRequest::default_instance_ = NULL;

ConvertYinglingRequest* ConvertYinglingRequest::New() const {
  return new ConvertYinglingRequest;
}

void ConvertYinglingRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvertYinglingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConvertYinglingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvertYinglingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvertYinglingRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvertYinglingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvertYinglingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvertYinglingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvertYinglingRequest::MergeFrom(const ConvertYinglingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvertYinglingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvertYinglingRequest::CopyFrom(const ConvertYinglingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvertYinglingRequest::IsInitialized() const {
  
  return true;
}

void ConvertYinglingRequest::Swap(ConvertYinglingRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvertYinglingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvertYinglingRequest_descriptor_;
  metadata.reflection = ConvertYinglingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LingliUpdateNotify::kCurrentLingliFieldNumber;
const int LingliUpdateNotify::kAddedLingliFieldNumber;
#endif  // !_MSC_VER

LingliUpdateNotify::LingliUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LingliUpdateNotify::InitAsDefaultInstance() {
}

LingliUpdateNotify::LingliUpdateNotify(const LingliUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LingliUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  current_lingli_ = 0;
  added_lingli_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LingliUpdateNotify::~LingliUpdateNotify() {
  SharedDtor();
}

void LingliUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LingliUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LingliUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LingliUpdateNotify_descriptor_;
}

const LingliUpdateNotify& LingliUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LingliUpdateNotify* LingliUpdateNotify::default_instance_ = NULL;

LingliUpdateNotify* LingliUpdateNotify::New() const {
  return new LingliUpdateNotify;
}

void LingliUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_lingli_ = 0;
    added_lingli_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LingliUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_lingli = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_lingli_)));
          set_has_current_lingli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_added_lingli;
        break;
      }
      
      // optional int32 added_lingli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_added_lingli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_lingli_)));
          set_has_added_lingli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LingliUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 current_lingli = 1;
  if (has_current_lingli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_lingli(), output);
  }
  
  // optional int32 added_lingli = 2;
  if (has_added_lingli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->added_lingli(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LingliUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_lingli = 1;
  if (has_current_lingli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_lingli(), target);
  }
  
  // optional int32 added_lingli = 2;
  if (has_added_lingli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->added_lingli(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LingliUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_lingli = 1;
    if (has_current_lingli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_lingli());
    }
    
    // optional int32 added_lingli = 2;
    if (has_added_lingli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added_lingli());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LingliUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LingliUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LingliUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LingliUpdateNotify::MergeFrom(const LingliUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_lingli()) {
      set_current_lingli(from.current_lingli());
    }
    if (from.has_added_lingli()) {
      set_added_lingli(from.added_lingli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LingliUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LingliUpdateNotify::CopyFrom(const LingliUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LingliUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LingliUpdateNotify::Swap(LingliUpdateNotify* other) {
  if (other != this) {
    std::swap(current_lingli_, other->current_lingli_);
    std::swap(added_lingli_, other->added_lingli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LingliUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LingliUpdateNotify_descriptor_;
  metadata.reflection = LingliUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddYinglingNotify::kYinglingFieldNumber;
#endif  // !_MSC_VER

AddYinglingNotify::AddYinglingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddYinglingNotify::InitAsDefaultInstance() {
}

AddYinglingNotify::AddYinglingNotify(const AddYinglingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddYinglingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddYinglingNotify::~AddYinglingNotify() {
  SharedDtor();
}

void AddYinglingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddYinglingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddYinglingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddYinglingNotify_descriptor_;
}

const AddYinglingNotify& AddYinglingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AddYinglingNotify* AddYinglingNotify::default_instance_ = NULL;

AddYinglingNotify* AddYinglingNotify::New() const {
  return new AddYinglingNotify;
}

void AddYinglingNotify::Clear() {
  yingling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddYinglingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.BuddyDetailInfo yingling = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_yingling;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddYinglingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.BuddyDetailInfo yingling = 1;
  for (int i = 0; i < this->yingling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->yingling(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddYinglingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.BuddyDetailInfo yingling = 1;
  for (int i = 0; i < this->yingling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->yingling(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddYinglingNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.BuddyDetailInfo yingling = 1;
  total_size += 1 * this->yingling_size();
  for (int i = 0; i < this->yingling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddYinglingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddYinglingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddYinglingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddYinglingNotify::MergeFrom(const AddYinglingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_.MergeFrom(from.yingling_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddYinglingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddYinglingNotify::CopyFrom(const AddYinglingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddYinglingNotify::IsInitialized() const {
  
  for (int i = 0; i < yingling_size(); i++) {
    if (!this->yingling(i).IsInitialized()) return false;
  }
  return true;
}

void AddYinglingNotify::Swap(AddYinglingNotify* other) {
  if (other != this) {
    yingling_.Swap(&other->yingling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddYinglingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddYinglingNotify_descriptor_;
  metadata.reflection = AddYinglingNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelHiringYinglingNotify::kPosFieldNumber;
#endif  // !_MSC_VER

DelHiringYinglingNotify::DelHiringYinglingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelHiringYinglingNotify::InitAsDefaultInstance() {
}

DelHiringYinglingNotify::DelHiringYinglingNotify(const DelHiringYinglingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelHiringYinglingNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelHiringYinglingNotify::~DelHiringYinglingNotify() {
  SharedDtor();
}

void DelHiringYinglingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelHiringYinglingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelHiringYinglingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelHiringYinglingNotify_descriptor_;
}

const DelHiringYinglingNotify& DelHiringYinglingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DelHiringYinglingNotify* DelHiringYinglingNotify::default_instance_ = NULL;

DelHiringYinglingNotify* DelHiringYinglingNotify::New() const {
  return new DelHiringYinglingNotify;
}

void DelHiringYinglingNotify::Clear() {
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelHiringYinglingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelHiringYinglingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelHiringYinglingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelHiringYinglingNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 pos = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelHiringYinglingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelHiringYinglingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelHiringYinglingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelHiringYinglingNotify::MergeFrom(const DelHiringYinglingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelHiringYinglingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelHiringYinglingNotify::CopyFrom(const DelHiringYinglingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelHiringYinglingNotify::IsInitialized() const {
  
  return true;
}

void DelHiringYinglingNotify::Swap(DelHiringYinglingNotify* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelHiringYinglingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelHiringYinglingNotify_descriptor_;
  metadata.reflection = DelHiringYinglingNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireYinglingRequest::kYinglingIdFieldNumber;
const int FireYinglingRequest::kForcedFieldNumber;
#endif  // !_MSC_VER

FireYinglingRequest::FireYinglingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FireYinglingRequest::InitAsDefaultInstance() {
}

FireYinglingRequest::FireYinglingRequest(const FireYinglingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FireYinglingRequest::SharedCtor() {
  _cached_size_ = 0;
  yingling_id_ = GOOGLE_LONGLONG(0);
  forced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireYinglingRequest::~FireYinglingRequest() {
  SharedDtor();
}

void FireYinglingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FireYinglingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FireYinglingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireYinglingRequest_descriptor_;
}

const FireYinglingRequest& FireYinglingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FireYinglingRequest* FireYinglingRequest::default_instance_ = NULL;

FireYinglingRequest* FireYinglingRequest::New() const {
  return new FireYinglingRequest;
}

void FireYinglingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yingling_id_ = GOOGLE_LONGLONG(0);
    forced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireYinglingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 yingling_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yingling_id_)));
          set_has_yingling_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_forced;
        break;
      }
      
      // optional bool forced = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireYinglingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 yingling_id = 1;
  if (has_yingling_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->yingling_id(), output);
  }
  
  // optional bool forced = 2;
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->forced(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireYinglingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 yingling_id = 1;
  if (has_yingling_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->yingling_id(), target);
  }
  
  // optional bool forced = 2;
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->forced(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireYinglingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 yingling_id = 1;
    if (has_yingling_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yingling_id());
    }
    
    // optional bool forced = 2;
    if (has_forced()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FireYinglingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireYinglingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireYinglingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireYinglingRequest::MergeFrom(const FireYinglingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yingling_id()) {
      set_yingling_id(from.yingling_id());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireYinglingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireYinglingRequest::CopyFrom(const FireYinglingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireYinglingRequest::IsInitialized() const {
  
  return true;
}

void FireYinglingRequest::Swap(FireYinglingRequest* other) {
  if (other != this) {
    std::swap(yingling_id_, other->yingling_id_);
    std::swap(forced_, other->forced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireYinglingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireYinglingRequest_descriptor_;
  metadata.reflection = FireYinglingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelYinglingNotify::kYinglingIdFieldNumber;
const int DelYinglingNotify::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DelYinglingNotify::DelYinglingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelYinglingNotify::InitAsDefaultInstance() {
}

DelYinglingNotify::DelYinglingNotify(const DelYinglingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelYinglingNotify::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelYinglingNotify::~DelYinglingNotify() {
  SharedDtor();
}

void DelYinglingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelYinglingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelYinglingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelYinglingNotify_descriptor_;
}

const DelYinglingNotify& DelYinglingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DelYinglingNotify* DelYinglingNotify::default_instance_ = NULL;

DelYinglingNotify* DelYinglingNotify::New() const {
  return new DelYinglingNotify;
}

void DelYinglingNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    error_code_ = 0;
  }
  yingling_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelYinglingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 yingling_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yingling_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_yingling_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_yingling_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_yingling_id;
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelYinglingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 yingling_id = 1;
  for (int i = 0; i < this->yingling_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->yingling_id(i), output);
  }
  
  // optional int32 error_code = 2 [default = 0];
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelYinglingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 yingling_id = 1;
  for (int i = 0; i < this->yingling_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->yingling_id(i), target);
  }
  
  // optional int32 error_code = 2 [default = 0];
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelYinglingNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 error_code = 2 [default = 0];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated int64 yingling_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->yingling_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->yingling_id(i));
    }
    total_size += 1 * this->yingling_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelYinglingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelYinglingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelYinglingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelYinglingNotify::MergeFrom(const DelYinglingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_id_.MergeFrom(from.yingling_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelYinglingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelYinglingNotify::CopyFrom(const DelYinglingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelYinglingNotify::IsInitialized() const {
  
  return true;
}

void DelYinglingNotify::Swap(DelYinglingNotify* other) {
  if (other != this) {
    yingling_id_.Swap(&other->yingling_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelYinglingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelYinglingNotify_descriptor_;
  metadata.reflection = DelYinglingNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetYinglingComboDataRequest::GetYinglingComboDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingComboDataRequest::InitAsDefaultInstance() {
}

GetYinglingComboDataRequest::GetYinglingComboDataRequest(const GetYinglingComboDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingComboDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingComboDataRequest::~GetYinglingComboDataRequest() {
  SharedDtor();
}

void GetYinglingComboDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetYinglingComboDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingComboDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingComboDataRequest_descriptor_;
}

const GetYinglingComboDataRequest& GetYinglingComboDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingComboDataRequest* GetYinglingComboDataRequest::default_instance_ = NULL;

GetYinglingComboDataRequest* GetYinglingComboDataRequest::New() const {
  return new GetYinglingComboDataRequest;
}

void GetYinglingComboDataRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingComboDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetYinglingComboDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingComboDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingComboDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingComboDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingComboDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingComboDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingComboDataRequest::MergeFrom(const GetYinglingComboDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingComboDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingComboDataRequest::CopyFrom(const GetYinglingComboDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingComboDataRequest::IsInitialized() const {
  
  return true;
}

void GetYinglingComboDataRequest::Swap(GetYinglingComboDataRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingComboDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingComboDataRequest_descriptor_;
  metadata.reflection = GetYinglingComboDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetYinglingComboDataResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetYinglingComboDataResponse::GetYinglingComboDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingComboDataResponse::InitAsDefaultInstance() {
}

GetYinglingComboDataResponse::GetYinglingComboDataResponse(const GetYinglingComboDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingComboDataResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingComboDataResponse::~GetYinglingComboDataResponse() {
  SharedDtor();
}

void GetYinglingComboDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetYinglingComboDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingComboDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingComboDataResponse_descriptor_;
}

const GetYinglingComboDataResponse& GetYinglingComboDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingComboDataResponse* GetYinglingComboDataResponse::default_instance_ = NULL;

GetYinglingComboDataResponse* GetYinglingComboDataResponse::New() const {
  return new GetYinglingComboDataResponse;
}

void GetYinglingComboDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingComboDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetYinglingComboDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingComboDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingComboDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingComboDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingComboDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingComboDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingComboDataResponse::MergeFrom(const GetYinglingComboDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingComboDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingComboDataResponse::CopyFrom(const GetYinglingComboDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingComboDataResponse::IsInitialized() const {
  
  return true;
}

void GetYinglingComboDataResponse::Swap(GetYinglingComboDataResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingComboDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingComboDataResponse_descriptor_;
  metadata.reflection = GetYinglingComboDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetYinglingComboDataNotify::kComboStatusFieldNumber;
#endif  // !_MSC_VER

GetYinglingComboDataNotify::GetYinglingComboDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetYinglingComboDataNotify::InitAsDefaultInstance() {
  combo_status_ = const_cast< ::protocols::common::YinglingComboStatus*>(&::protocols::common::YinglingComboStatus::default_instance());
}

GetYinglingComboDataNotify::GetYinglingComboDataNotify(const GetYinglingComboDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetYinglingComboDataNotify::SharedCtor() {
  _cached_size_ = 0;
  combo_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetYinglingComboDataNotify::~GetYinglingComboDataNotify() {
  SharedDtor();
}

void GetYinglingComboDataNotify::SharedDtor() {
  if (this != default_instance_) {
    delete combo_status_;
  }
}

void GetYinglingComboDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetYinglingComboDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetYinglingComboDataNotify_descriptor_;
}

const GetYinglingComboDataNotify& GetYinglingComboDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetYinglingComboDataNotify* GetYinglingComboDataNotify::default_instance_ = NULL;

GetYinglingComboDataNotify* GetYinglingComboDataNotify::New() const {
  return new GetYinglingComboDataNotify;
}

void GetYinglingComboDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_combo_status()) {
      if (combo_status_ != NULL) combo_status_->::protocols::common::YinglingComboStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetYinglingComboDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.YinglingComboStatus combo_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_combo_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetYinglingComboDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.YinglingComboStatus combo_status = 1;
  if (has_combo_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combo_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetYinglingComboDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.YinglingComboStatus combo_status = 1;
  if (has_combo_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combo_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetYinglingComboDataNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.YinglingComboStatus combo_status = 1;
    if (has_combo_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->combo_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetYinglingComboDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetYinglingComboDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetYinglingComboDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetYinglingComboDataNotify::MergeFrom(const GetYinglingComboDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combo_status()) {
      mutable_combo_status()->::protocols::common::YinglingComboStatus::MergeFrom(from.combo_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetYinglingComboDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetYinglingComboDataNotify::CopyFrom(const GetYinglingComboDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetYinglingComboDataNotify::IsInitialized() const {
  
  return true;
}

void GetYinglingComboDataNotify::Swap(GetYinglingComboDataNotify* other) {
  if (other != this) {
    std::swap(combo_status_, other->combo_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetYinglingComboDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetYinglingComboDataNotify_descriptor_;
  metadata.reflection = GetYinglingComboDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeYinglingComboRequest::kComboIdFieldNumber;
#endif  // !_MSC_VER

UpgradeYinglingComboRequest::UpgradeYinglingComboRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeYinglingComboRequest::InitAsDefaultInstance() {
}

UpgradeYinglingComboRequest::UpgradeYinglingComboRequest(const UpgradeYinglingComboRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeYinglingComboRequest::SharedCtor() {
  _cached_size_ = 0;
  combo_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeYinglingComboRequest::~UpgradeYinglingComboRequest() {
  SharedDtor();
}

void UpgradeYinglingComboRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeYinglingComboRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeYinglingComboRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeYinglingComboRequest_descriptor_;
}

const UpgradeYinglingComboRequest& UpgradeYinglingComboRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeYinglingComboRequest* UpgradeYinglingComboRequest::default_instance_ = NULL;

UpgradeYinglingComboRequest* UpgradeYinglingComboRequest::New() const {
  return new UpgradeYinglingComboRequest;
}

void UpgradeYinglingComboRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combo_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeYinglingComboRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 combo_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_id_)));
          set_has_combo_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeYinglingComboRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 combo_id = 1;
  if (has_combo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combo_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeYinglingComboRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 combo_id = 1;
  if (has_combo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combo_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeYinglingComboRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 combo_id = 1;
    if (has_combo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeYinglingComboRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeYinglingComboRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeYinglingComboRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeYinglingComboRequest::MergeFrom(const UpgradeYinglingComboRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combo_id()) {
      set_combo_id(from.combo_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeYinglingComboRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeYinglingComboRequest::CopyFrom(const UpgradeYinglingComboRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeYinglingComboRequest::IsInitialized() const {
  
  return true;
}

void UpgradeYinglingComboRequest::Swap(UpgradeYinglingComboRequest* other) {
  if (other != this) {
    std::swap(combo_id_, other->combo_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeYinglingComboRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeYinglingComboRequest_descriptor_;
  metadata.reflection = UpgradeYinglingComboRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeYinglingComboResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UpgradeYinglingComboResponse::UpgradeYinglingComboResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeYinglingComboResponse::InitAsDefaultInstance() {
}

UpgradeYinglingComboResponse::UpgradeYinglingComboResponse(const UpgradeYinglingComboResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeYinglingComboResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeYinglingComboResponse::~UpgradeYinglingComboResponse() {
  SharedDtor();
}

void UpgradeYinglingComboResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeYinglingComboResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeYinglingComboResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeYinglingComboResponse_descriptor_;
}

const UpgradeYinglingComboResponse& UpgradeYinglingComboResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeYinglingComboResponse* UpgradeYinglingComboResponse::default_instance_ = NULL;

UpgradeYinglingComboResponse* UpgradeYinglingComboResponse::New() const {
  return new UpgradeYinglingComboResponse;
}

void UpgradeYinglingComboResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeYinglingComboResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeYinglingComboResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeYinglingComboResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeYinglingComboResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeYinglingComboResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeYinglingComboResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeYinglingComboResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeYinglingComboResponse::MergeFrom(const UpgradeYinglingComboResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeYinglingComboResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeYinglingComboResponse::CopyFrom(const UpgradeYinglingComboResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeYinglingComboResponse::IsInitialized() const {
  
  return true;
}

void UpgradeYinglingComboResponse::Swap(UpgradeYinglingComboResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeYinglingComboResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeYinglingComboResponse_descriptor_;
  metadata.reflection = UpgradeYinglingComboResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveStartRequest::kSrcMapXFieldNumber;
const int MoveStartRequest::kSrcMapYFieldNumber;
const int MoveStartRequest::kDstMapXFieldNumber;
const int MoveStartRequest::kDstMapYFieldNumber;
#endif  // !_MSC_VER

MoveStartRequest::MoveStartRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveStartRequest::InitAsDefaultInstance() {
}

MoveStartRequest::MoveStartRequest(const MoveStartRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveStartRequest::SharedCtor() {
  _cached_size_ = 0;
  src_map_x_ = 0;
  src_map_y_ = 0;
  dst_map_x_ = 0;
  dst_map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveStartRequest::~MoveStartRequest() {
  SharedDtor();
}

void MoveStartRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveStartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveStartRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveStartRequest_descriptor_;
}

const MoveStartRequest& MoveStartRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

MoveStartRequest* MoveStartRequest::default_instance_ = NULL;

MoveStartRequest* MoveStartRequest::New() const {
  return new MoveStartRequest;
}

void MoveStartRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_map_x_ = 0;
    src_map_y_ = 0;
    dst_map_x_ = 0;
    dst_map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src_map_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_map_x_)));
          set_has_src_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_map_y;
        break;
      }
      
      // required int32 src_map_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_map_y_)));
          set_has_src_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_map_x;
        break;
      }
      
      // required int32 dst_map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_map_x_)));
          set_has_dst_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dst_map_y;
        break;
      }
      
      // required int32 dst_map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_map_y_)));
          set_has_dst_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 src_map_x = 2;
  if (has_src_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_map_x(), output);
  }
  
  // required int32 src_map_y = 3;
  if (has_src_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->src_map_y(), output);
  }
  
  // required int32 dst_map_x = 4;
  if (has_dst_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_map_x(), output);
  }
  
  // required int32 dst_map_y = 5;
  if (has_dst_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dst_map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveStartRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 src_map_x = 2;
  if (has_src_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_map_x(), target);
  }
  
  // required int32 src_map_y = 3;
  if (has_src_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->src_map_y(), target);
  }
  
  // required int32 dst_map_x = 4;
  if (has_dst_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_map_x(), target);
  }
  
  // required int32 dst_map_y = 5;
  if (has_dst_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dst_map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveStartRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src_map_x = 2;
    if (has_src_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_map_x());
    }
    
    // required int32 src_map_y = 3;
    if (has_src_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_map_y());
    }
    
    // required int32 dst_map_x = 4;
    if (has_dst_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_map_x());
    }
    
    // required int32 dst_map_y = 5;
    if (has_dst_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveStartRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveStartRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveStartRequest::MergeFrom(const MoveStartRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_map_x()) {
      set_src_map_x(from.src_map_x());
    }
    if (from.has_src_map_y()) {
      set_src_map_y(from.src_map_y());
    }
    if (from.has_dst_map_x()) {
      set_dst_map_x(from.dst_map_x());
    }
    if (from.has_dst_map_y()) {
      set_dst_map_y(from.dst_map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveStartRequest::CopyFrom(const MoveStartRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveStartRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MoveStartRequest::Swap(MoveStartRequest* other) {
  if (other != this) {
    std::swap(src_map_x_, other->src_map_x_);
    std::swap(src_map_y_, other->src_map_y_);
    std::swap(dst_map_x_, other->dst_map_x_);
    std::swap(dst_map_y_, other->dst_map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveStartRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveStartRequest_descriptor_;
  metadata.reflection = MoveStartRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveStartResponse::kErrorCodeFieldNumber;
const int MoveStartResponse::kTimeMsFieldNumber;
const int MoveStartResponse::kMapXFieldNumber;
const int MoveStartResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

MoveStartResponse::MoveStartResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveStartResponse::InitAsDefaultInstance() {
}

MoveStartResponse::MoveStartResponse(const MoveStartResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveStartResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  time_ms_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveStartResponse::~MoveStartResponse() {
  SharedDtor();
}

void MoveStartResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveStartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveStartResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveStartResponse_descriptor_;
}

const MoveStartResponse& MoveStartResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

MoveStartResponse* MoveStartResponse::default_instance_ = NULL;

MoveStartResponse* MoveStartResponse::New() const {
  return new MoveStartResponse;
}

void MoveStartResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    time_ms_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveStartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_ms;
        break;
      }
      
      // optional int32 time_ms = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_ms_)));
          set_has_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveStartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 time_ms = 2;
  if (has_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_ms(), output);
  }
  
  // optional int32 map_x = 3;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_x(), output);
  }
  
  // optional int32 map_y = 4;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveStartResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 time_ms = 2;
  if (has_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_ms(), target);
  }
  
  // optional int32 map_x = 3;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_x(), target);
  }
  
  // optional int32 map_y = 4;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveStartResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_ms());
    }
    
    // optional int32 map_x = 3;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 4;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveStartResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveStartResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveStartResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveStartResponse::MergeFrom(const MoveStartResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_time_ms()) {
      set_time_ms(from.time_ms());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveStartResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveStartResponse::CopyFrom(const MoveStartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveStartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MoveStartResponse::Swap(MoveStartResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(time_ms_, other->time_ms_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveStartResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveStartResponse_descriptor_;
  metadata.reflection = MoveStartResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveStartNotify::kGuidFieldNumber;
const int MoveStartNotify::kSrcMapXFieldNumber;
const int MoveStartNotify::kSrcMapYFieldNumber;
const int MoveStartNotify::kDstMapXFieldNumber;
const int MoveStartNotify::kDstMapYFieldNumber;
const int MoveStartNotify::kTimeMsFieldNumber;
#endif  // !_MSC_VER

MoveStartNotify::MoveStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveStartNotify::InitAsDefaultInstance() {
}

MoveStartNotify::MoveStartNotify(const MoveStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveStartNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  src_map_x_ = 0;
  src_map_y_ = 0;
  dst_map_x_ = 0;
  dst_map_y_ = 0;
  time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveStartNotify::~MoveStartNotify() {
  SharedDtor();
}

void MoveStartNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveStartNotify_descriptor_;
}

const MoveStartNotify& MoveStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

MoveStartNotify* MoveStartNotify::default_instance_ = NULL;

MoveStartNotify* MoveStartNotify::New() const {
  return new MoveStartNotify;
}

void MoveStartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    src_map_x_ = 0;
    src_map_y_ = 0;
    dst_map_x_ = 0;
    dst_map_y_ = 0;
    time_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_map_x;
        break;
      }
      
      // required int32 src_map_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_map_x_)));
          set_has_src_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_map_y;
        break;
      }
      
      // required int32 src_map_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_map_y_)));
          set_has_src_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_map_x;
        break;
      }
      
      // required int32 dst_map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_map_x_)));
          set_has_dst_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dst_map_y;
        break;
      }
      
      // required int32 dst_map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_map_y_)));
          set_has_dst_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_ms;
        break;
      }
      
      // required int32 time_ms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_ms_)));
          set_has_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 src_map_x = 2;
  if (has_src_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_map_x(), output);
  }
  
  // required int32 src_map_y = 3;
  if (has_src_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->src_map_y(), output);
  }
  
  // required int32 dst_map_x = 4;
  if (has_dst_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_map_x(), output);
  }
  
  // required int32 dst_map_y = 5;
  if (has_dst_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dst_map_y(), output);
  }
  
  // required int32 time_ms = 6;
  if (has_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->time_ms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 src_map_x = 2;
  if (has_src_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_map_x(), target);
  }
  
  // required int32 src_map_y = 3;
  if (has_src_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->src_map_y(), target);
  }
  
  // required int32 dst_map_x = 4;
  if (has_dst_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_map_x(), target);
  }
  
  // required int32 dst_map_y = 5;
  if (has_dst_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dst_map_y(), target);
  }
  
  // required int32 time_ms = 6;
  if (has_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->time_ms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveStartNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 src_map_x = 2;
    if (has_src_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_map_x());
    }
    
    // required int32 src_map_y = 3;
    if (has_src_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_map_y());
    }
    
    // required int32 dst_map_x = 4;
    if (has_dst_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_map_x());
    }
    
    // required int32 dst_map_y = 5;
    if (has_dst_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_map_y());
    }
    
    // required int32 time_ms = 6;
    if (has_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_ms());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveStartNotify::MergeFrom(const MoveStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_src_map_x()) {
      set_src_map_x(from.src_map_x());
    }
    if (from.has_src_map_y()) {
      set_src_map_y(from.src_map_y());
    }
    if (from.has_dst_map_x()) {
      set_dst_map_x(from.dst_map_x());
    }
    if (from.has_dst_map_y()) {
      set_dst_map_y(from.dst_map_y());
    }
    if (from.has_time_ms()) {
      set_time_ms(from.time_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveStartNotify::CopyFrom(const MoveStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MoveStartNotify::Swap(MoveStartNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(src_map_x_, other->src_map_x_);
    std::swap(src_map_y_, other->src_map_y_);
    std::swap(dst_map_x_, other->dst_map_x_);
    std::swap(dst_map_y_, other->dst_map_y_);
    std::swap(time_ms_, other->time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveStartNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveStartNotify_descriptor_;
  metadata.reflection = MoveStartNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterViewNotify::kPlayersFieldNumber;
const int EnterViewNotify::kMovementsFieldNumber;
#endif  // !_MSC_VER

EnterViewNotify::EnterViewNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterViewNotify::InitAsDefaultInstance() {
}

EnterViewNotify::EnterViewNotify(const EnterViewNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterViewNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterViewNotify::~EnterViewNotify() {
  SharedDtor();
}

void EnterViewNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterViewNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterViewNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterViewNotify_descriptor_;
}

const EnterViewNotify& EnterViewNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EnterViewNotify* EnterViewNotify::default_instance_ = NULL;

EnterViewNotify* EnterViewNotify::New() const {
  return new EnterViewNotify;
}

void EnterViewNotify::Clear() {
  players_.Clear();
  movements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterViewNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.PlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_movements;
        break;
      }
      
      // repeated .protocols.common.MoveStartNotify movements = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_movements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_movements;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterViewNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.PlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  // repeated .protocols.common.MoveStartNotify movements = 2;
  for (int i = 0; i < this->movements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->movements(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterViewNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.PlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  // repeated .protocols.common.MoveStartNotify movements = 2;
  for (int i = 0; i < this->movements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->movements(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterViewNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.PlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  // repeated .protocols.common.MoveStartNotify movements = 2;
  total_size += 1 * this->movements_size();
  for (int i = 0; i < this->movements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movements(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterViewNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterViewNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterViewNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterViewNotify::MergeFrom(const EnterViewNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  movements_.MergeFrom(from.movements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterViewNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterViewNotify::CopyFrom(const EnterViewNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterViewNotify::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < movements_size(); i++) {
    if (!this->movements(i).IsInitialized()) return false;
  }
  return true;
}

void EnterViewNotify::Swap(EnterViewNotify* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    movements_.Swap(&other->movements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterViewNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterViewNotify_descriptor_;
  metadata.reflection = EnterViewNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveViewNotify::kGuidsFieldNumber;
#endif  // !_MSC_VER

LeaveViewNotify::LeaveViewNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveViewNotify::InitAsDefaultInstance() {
}

LeaveViewNotify::LeaveViewNotify(const LeaveViewNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveViewNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveViewNotify::~LeaveViewNotify() {
  SharedDtor();
}

void LeaveViewNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveViewNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveViewNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveViewNotify_descriptor_;
}

const LeaveViewNotify& LeaveViewNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LeaveViewNotify* LeaveViewNotify::default_instance_ = NULL;

LeaveViewNotify* LeaveViewNotify::New() const {
  return new LeaveViewNotify;
}

void LeaveViewNotify::Clear() {
  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveViewNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 guids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveViewNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 guids = 1;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->guids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveViewNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 guids = 1;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->guids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveViewNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 guids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->guids(i));
    }
    total_size += 1 * this->guids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveViewNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveViewNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveViewNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveViewNotify::MergeFrom(const LeaveViewNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveViewNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveViewNotify::CopyFrom(const LeaveViewNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveViewNotify::IsInitialized() const {
  
  return true;
}

void LeaveViewNotify::Swap(LeaveViewNotify* other) {
  if (other != this) {
    guids_.Swap(&other->guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveViewNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveViewNotify_descriptor_;
  metadata.reflection = LeaveViewNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStatusNotify::kGuidFieldNumber;
const int GameStatusNotify::kStatusFieldNumber;
#endif  // !_MSC_VER

GameStatusNotify::GameStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStatusNotify::InitAsDefaultInstance() {
}

GameStatusNotify::GameStatusNotify(const GameStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStatusNotify::~GameStatusNotify() {
  SharedDtor();
}

void GameStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatusNotify_descriptor_;
}

const GameStatusNotify& GameStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GameStatusNotify* GameStatusNotify::default_instance_ = NULL;

GameStatusNotify* GameStatusNotify::New() const {
  return new GameStatusNotify;
}

void GameStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required .protocols.common.GameStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::GameStatus_IsValid(value)) {
            set_status(static_cast< protocols::common::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required .protocols.common.GameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required .protocols.common.GameStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStatusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required .protocols.common.GameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStatusNotify::MergeFrom(const GameStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStatusNotify::CopyFrom(const GameStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameStatusNotify::Swap(GameStatusNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStatusNotify_descriptor_;
  metadata.reflection = GameStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeMapNotify::kMapIdFieldNumber;
const int ChangeMapNotify::kMapXFieldNumber;
const int ChangeMapNotify::kMapYFieldNumber;
const int ChangeMapNotify::kMapInstanceIdFieldNumber;
#endif  // !_MSC_VER

ChangeMapNotify::ChangeMapNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeMapNotify::InitAsDefaultInstance() {
}

ChangeMapNotify::ChangeMapNotify(const ChangeMapNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeMapNotify::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  map_instance_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeMapNotify::~ChangeMapNotify() {
  SharedDtor();
}

void ChangeMapNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeMapNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMapNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeMapNotify_descriptor_;
}

const ChangeMapNotify& ChangeMapNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ChangeMapNotify* ChangeMapNotify::default_instance_ = NULL;

ChangeMapNotify* ChangeMapNotify::New() const {
  return new ChangeMapNotify;
}

void ChangeMapNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
    map_instance_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeMapNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_instance_id;
        break;
      }
      
      // optional int32 map_instance_id = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_instance_id_)));
          set_has_map_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeMapNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 1 [default = 0];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // optional int32 map_x = 2 [default = 0];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_x(), output);
  }
  
  // optional int32 map_y = 3 [default = 0];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_y(), output);
  }
  
  // optional int32 map_instance_id = 4 [default = 0];
  if (has_map_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeMapNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1 [default = 0];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // optional int32 map_x = 2 [default = 0];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_x(), target);
  }
  
  // optional int32 map_y = 3 [default = 0];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_y(), target);
  }
  
  // optional int32 map_instance_id = 4 [default = 0];
  if (has_map_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeMapNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1 [default = 0];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 2 [default = 0];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 3 [default = 0];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 map_instance_id = 4 [default = 0];
    if (has_map_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMapNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeMapNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeMapNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeMapNotify::MergeFrom(const ChangeMapNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_map_instance_id()) {
      set_map_instance_id(from.map_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeMapNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapNotify::CopyFrom(const ChangeMapNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapNotify::IsInitialized() const {
  
  return true;
}

void ChangeMapNotify::Swap(ChangeMapNotify* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(map_instance_id_, other->map_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeMapNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeMapNotify_descriptor_;
  metadata.reflection = ChangeMapNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChooseAutoFightNPCRequest::kNpcIdFieldNumber;
const int ChooseAutoFightNPCRequest::kBattleNpcIdFieldNumber;
#endif  // !_MSC_VER

ChooseAutoFightNPCRequest::ChooseAutoFightNPCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChooseAutoFightNPCRequest::InitAsDefaultInstance() {
}

ChooseAutoFightNPCRequest::ChooseAutoFightNPCRequest(const ChooseAutoFightNPCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChooseAutoFightNPCRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  battle_npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChooseAutoFightNPCRequest::~ChooseAutoFightNPCRequest() {
  SharedDtor();
}

void ChooseAutoFightNPCRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChooseAutoFightNPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChooseAutoFightNPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChooseAutoFightNPCRequest_descriptor_;
}

const ChooseAutoFightNPCRequest& ChooseAutoFightNPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ChooseAutoFightNPCRequest* ChooseAutoFightNPCRequest::default_instance_ = NULL;

ChooseAutoFightNPCRequest* ChooseAutoFightNPCRequest::New() const {
  return new ChooseAutoFightNPCRequest;
}

void ChooseAutoFightNPCRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    battle_npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChooseAutoFightNPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_npc_id;
        break;
      }
      
      // optional int32 battle_npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_npc_id_)));
          set_has_battle_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChooseAutoFightNPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChooseAutoFightNPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChooseAutoFightNPCRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 battle_npc_id = 2;
    if (has_battle_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChooseAutoFightNPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChooseAutoFightNPCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChooseAutoFightNPCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChooseAutoFightNPCRequest::MergeFrom(const ChooseAutoFightNPCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_battle_npc_id()) {
      set_battle_npc_id(from.battle_npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChooseAutoFightNPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseAutoFightNPCRequest::CopyFrom(const ChooseAutoFightNPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseAutoFightNPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChooseAutoFightNPCRequest::Swap(ChooseAutoFightNPCRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(battle_npc_id_, other->battle_npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChooseAutoFightNPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChooseAutoFightNPCRequest_descriptor_;
  metadata.reflection = ChooseAutoFightNPCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChooseAutoFightNPCResponse::kErrorCodeFieldNumber;
const int ChooseAutoFightNPCResponse::kExpBonusOneTimeFieldNumber;
const int ChooseAutoFightNPCResponse::kVipBonusFactorFieldNumber;
const int ChooseAutoFightNPCResponse::kLeftFreeAutoFightTimesFieldNumber;
#endif  // !_MSC_VER

ChooseAutoFightNPCResponse::ChooseAutoFightNPCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChooseAutoFightNPCResponse::InitAsDefaultInstance() {
}

ChooseAutoFightNPCResponse::ChooseAutoFightNPCResponse(const ChooseAutoFightNPCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChooseAutoFightNPCResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  exp_bonus_one_time_ = 0;
  vip_bonus_factor_ = 0;
  left_free_auto_fight_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChooseAutoFightNPCResponse::~ChooseAutoFightNPCResponse() {
  SharedDtor();
}

void ChooseAutoFightNPCResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChooseAutoFightNPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChooseAutoFightNPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChooseAutoFightNPCResponse_descriptor_;
}

const ChooseAutoFightNPCResponse& ChooseAutoFightNPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ChooseAutoFightNPCResponse* ChooseAutoFightNPCResponse::default_instance_ = NULL;

ChooseAutoFightNPCResponse* ChooseAutoFightNPCResponse::New() const {
  return new ChooseAutoFightNPCResponse;
}

void ChooseAutoFightNPCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    exp_bonus_one_time_ = 0;
    vip_bonus_factor_ = 0;
    left_free_auto_fight_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChooseAutoFightNPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_bonus_one_time;
        break;
      }
      
      // optional int32 exp_bonus_one_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus_one_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_one_time_)));
          set_has_exp_bonus_one_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_free_auto_fight_times;
        break;
      }
      
      // optional int32 left_free_auto_fight_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_free_auto_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_free_auto_fight_times_)));
          set_has_left_free_auto_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip_bonus_factor;
        break;
      }
      
      // optional int32 vip_bonus_factor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_bonus_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_bonus_factor_)));
          set_has_vip_bonus_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChooseAutoFightNPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 exp_bonus_one_time = 2;
  if (has_exp_bonus_one_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_bonus_one_time(), output);
  }
  
  // optional int32 left_free_auto_fight_times = 3;
  if (has_left_free_auto_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_free_auto_fight_times(), output);
  }
  
  // optional int32 vip_bonus_factor = 4;
  if (has_vip_bonus_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_bonus_factor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChooseAutoFightNPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 exp_bonus_one_time = 2;
  if (has_exp_bonus_one_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_bonus_one_time(), target);
  }
  
  // optional int32 left_free_auto_fight_times = 3;
  if (has_left_free_auto_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_free_auto_fight_times(), target);
  }
  
  // optional int32 vip_bonus_factor = 4;
  if (has_vip_bonus_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_bonus_factor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChooseAutoFightNPCResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 exp_bonus_one_time = 2;
    if (has_exp_bonus_one_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus_one_time());
    }
    
    // optional int32 vip_bonus_factor = 4;
    if (has_vip_bonus_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_bonus_factor());
    }
    
    // optional int32 left_free_auto_fight_times = 3;
    if (has_left_free_auto_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_free_auto_fight_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChooseAutoFightNPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChooseAutoFightNPCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChooseAutoFightNPCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChooseAutoFightNPCResponse::MergeFrom(const ChooseAutoFightNPCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_exp_bonus_one_time()) {
      set_exp_bonus_one_time(from.exp_bonus_one_time());
    }
    if (from.has_vip_bonus_factor()) {
      set_vip_bonus_factor(from.vip_bonus_factor());
    }
    if (from.has_left_free_auto_fight_times()) {
      set_left_free_auto_fight_times(from.left_free_auto_fight_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChooseAutoFightNPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseAutoFightNPCResponse::CopyFrom(const ChooseAutoFightNPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseAutoFightNPCResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChooseAutoFightNPCResponse::Swap(ChooseAutoFightNPCResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(exp_bonus_one_time_, other->exp_bonus_one_time_);
    std::swap(vip_bonus_factor_, other->vip_bonus_factor_);
    std::swap(left_free_auto_fight_times_, other->left_free_auto_fight_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChooseAutoFightNPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChooseAutoFightNPCResponse_descriptor_;
  metadata.reflection = ChooseAutoFightNPCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoFightMonsterRequest::kNpcIdFieldNumber;
const int AutoFightMonsterRequest::kBattleNpcIdFieldNumber;
const int AutoFightMonsterRequest::kFightTimesFieldNumber;
#endif  // !_MSC_VER

AutoFightMonsterRequest::AutoFightMonsterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightMonsterRequest::InitAsDefaultInstance() {
}

AutoFightMonsterRequest::AutoFightMonsterRequest(const AutoFightMonsterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightMonsterRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  battle_npc_id_ = 0;
  fight_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightMonsterRequest::~AutoFightMonsterRequest() {
  SharedDtor();
}

void AutoFightMonsterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightMonsterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightMonsterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightMonsterRequest_descriptor_;
}

const AutoFightMonsterRequest& AutoFightMonsterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AutoFightMonsterRequest* AutoFightMonsterRequest::default_instance_ = NULL;

AutoFightMonsterRequest* AutoFightMonsterRequest::New() const {
  return new AutoFightMonsterRequest;
}

void AutoFightMonsterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    battle_npc_id_ = 0;
    fight_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightMonsterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_npc_id;
        break;
      }
      
      // optional int32 battle_npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_npc_id_)));
          set_has_battle_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_times;
        break;
      }
      
      // required int32 fight_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_times_)));
          set_has_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoFightMonsterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_npc_id(), output);
  }
  
  // required int32 fight_times = 3;
  if (has_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightMonsterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_npc_id(), target);
  }
  
  // required int32 fight_times = 3;
  if (has_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightMonsterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 battle_npc_id = 2;
    if (has_battle_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_npc_id());
    }
    
    // required int32 fight_times = 3;
    if (has_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightMonsterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightMonsterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightMonsterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightMonsterRequest::MergeFrom(const AutoFightMonsterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_battle_npc_id()) {
      set_battle_npc_id(from.battle_npc_id());
    }
    if (from.has_fight_times()) {
      set_fight_times(from.fight_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightMonsterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightMonsterRequest::CopyFrom(const AutoFightMonsterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightMonsterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void AutoFightMonsterRequest::Swap(AutoFightMonsterRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(battle_npc_id_, other->battle_npc_id_);
    std::swap(fight_times_, other->fight_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightMonsterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightMonsterRequest_descriptor_;
  metadata.reflection = AutoFightMonsterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoFightMonsterResponse::kErrorCodeFieldNumber;
const int AutoFightMonsterResponse::kLeftAutoFightTimesFieldNumber;
const int AutoFightMonsterResponse::kFreeBagSizeFieldNumber;
#endif  // !_MSC_VER

AutoFightMonsterResponse::AutoFightMonsterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightMonsterResponse::InitAsDefaultInstance() {
}

AutoFightMonsterResponse::AutoFightMonsterResponse(const AutoFightMonsterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightMonsterResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_auto_fight_times_ = 0;
  free_bag_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightMonsterResponse::~AutoFightMonsterResponse() {
  SharedDtor();
}

void AutoFightMonsterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightMonsterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightMonsterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightMonsterResponse_descriptor_;
}

const AutoFightMonsterResponse& AutoFightMonsterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AutoFightMonsterResponse* AutoFightMonsterResponse::default_instance_ = NULL;

AutoFightMonsterResponse* AutoFightMonsterResponse::New() const {
  return new AutoFightMonsterResponse;
}

void AutoFightMonsterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_auto_fight_times_ = 0;
    free_bag_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightMonsterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_auto_fight_times;
        break;
      }
      
      // optional int32 left_auto_fight_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_auto_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_auto_fight_times_)));
          set_has_left_auto_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_bag_size;
        break;
      }
      
      // optional int32 free_bag_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_bag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_bag_size_)));
          set_has_free_bag_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoFightMonsterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 left_auto_fight_times = 2;
  if (has_left_auto_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_auto_fight_times(), output);
  }
  
  // optional int32 free_bag_size = 3;
  if (has_free_bag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free_bag_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightMonsterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 left_auto_fight_times = 2;
  if (has_left_auto_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_auto_fight_times(), target);
  }
  
  // optional int32 free_bag_size = 3;
  if (has_free_bag_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free_bag_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightMonsterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 left_auto_fight_times = 2;
    if (has_left_auto_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_auto_fight_times());
    }
    
    // optional int32 free_bag_size = 3;
    if (has_free_bag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_bag_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightMonsterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightMonsterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightMonsterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightMonsterResponse::MergeFrom(const AutoFightMonsterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_auto_fight_times()) {
      set_left_auto_fight_times(from.left_auto_fight_times());
    }
    if (from.has_free_bag_size()) {
      set_free_bag_size(from.free_bag_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightMonsterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightMonsterResponse::CopyFrom(const AutoFightMonsterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightMonsterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AutoFightMonsterResponse::Swap(AutoFightMonsterResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_auto_fight_times_, other->left_auto_fight_times_);
    std::swap(free_bag_size_, other->free_bag_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightMonsterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightMonsterResponse_descriptor_;
  metadata.reflection = AutoFightMonsterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopAutoFightRequest::StopAutoFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAutoFightRequest::InitAsDefaultInstance() {
}

StopAutoFightRequest::StopAutoFightRequest(const StopAutoFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAutoFightRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAutoFightRequest::~StopAutoFightRequest() {
  SharedDtor();
}

void StopAutoFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopAutoFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAutoFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAutoFightRequest_descriptor_;
}

const StopAutoFightRequest& StopAutoFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StopAutoFightRequest* StopAutoFightRequest::default_instance_ = NULL;

StopAutoFightRequest* StopAutoFightRequest::New() const {
  return new StopAutoFightRequest;
}

void StopAutoFightRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAutoFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopAutoFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAutoFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAutoFightRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAutoFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAutoFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAutoFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAutoFightRequest::MergeFrom(const StopAutoFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAutoFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutoFightRequest::CopyFrom(const StopAutoFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutoFightRequest::IsInitialized() const {
  
  return true;
}

void StopAutoFightRequest::Swap(StopAutoFightRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAutoFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAutoFightRequest_descriptor_;
  metadata.reflection = StopAutoFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopAutoFightResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

StopAutoFightResponse::StopAutoFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAutoFightResponse::InitAsDefaultInstance() {
}

StopAutoFightResponse::StopAutoFightResponse(const StopAutoFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAutoFightResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAutoFightResponse::~StopAutoFightResponse() {
  SharedDtor();
}

void StopAutoFightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopAutoFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAutoFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAutoFightResponse_descriptor_;
}

const StopAutoFightResponse& StopAutoFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StopAutoFightResponse* StopAutoFightResponse::default_instance_ = NULL;

StopAutoFightResponse* StopAutoFightResponse::New() const {
  return new StopAutoFightResponse;
}

void StopAutoFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAutoFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopAutoFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAutoFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAutoFightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAutoFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAutoFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAutoFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAutoFightResponse::MergeFrom(const StopAutoFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAutoFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutoFightResponse::CopyFrom(const StopAutoFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutoFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopAutoFightResponse::Swap(StopAutoFightResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAutoFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAutoFightResponse_descriptor_;
  metadata.reflection = StopAutoFightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoFightMonsterUpdateNotify::kIsFightFinishFieldNumber;
const int AutoFightMonsterUpdateNotify::kFinishErrorCodeFieldNumber;
const int AutoFightMonsterUpdateNotify::kCurFightTimeFieldNumber;
const int AutoFightMonsterUpdateNotify::kLeftAutoFightTimesFieldNumber;
const int AutoFightMonsterUpdateNotify::kFreeBagSizeFieldNumber;
const int AutoFightMonsterUpdateNotify::kExpBonusFieldNumber;
const int AutoFightMonsterUpdateNotify::kSkillExpBonusFieldNumber;
const int AutoFightMonsterUpdateNotify::kDropItemFieldNumber;
#endif  // !_MSC_VER

AutoFightMonsterUpdateNotify::AutoFightMonsterUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightMonsterUpdateNotify::InitAsDefaultInstance() {
}

AutoFightMonsterUpdateNotify::AutoFightMonsterUpdateNotify(const AutoFightMonsterUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightMonsterUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  is_fight_finish_ = 0;
  finish_error_code_ = 0;
  cur_fight_time_ = 0;
  left_auto_fight_times_ = 0;
  free_bag_size_ = 0;
  exp_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightMonsterUpdateNotify::~AutoFightMonsterUpdateNotify() {
  SharedDtor();
}

void AutoFightMonsterUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightMonsterUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightMonsterUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightMonsterUpdateNotify_descriptor_;
}

const AutoFightMonsterUpdateNotify& AutoFightMonsterUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AutoFightMonsterUpdateNotify* AutoFightMonsterUpdateNotify::default_instance_ = NULL;

AutoFightMonsterUpdateNotify* AutoFightMonsterUpdateNotify::New() const {
  return new AutoFightMonsterUpdateNotify;
}

void AutoFightMonsterUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fight_finish_ = 0;
    finish_error_code_ = 0;
    cur_fight_time_ = 0;
    left_auto_fight_times_ = 0;
    free_bag_size_ = 0;
    exp_bonus_ = 0;
  }
  skill_exp_bonus_.Clear();
  drop_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightMonsterUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_fight_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_fight_time_)));
          set_has_cur_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_auto_fight_times;
        break;
      }
      
      // optional int32 left_auto_fight_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_auto_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_auto_fight_times_)));
          set_has_left_auto_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_bag_size;
        break;
      }
      
      // optional int32 free_bag_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_bag_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_bag_size_)));
          set_has_free_bag_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp_bonus;
        break;
      }
      
      // optional int32 exp_bonus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_exp_bonus;
        break;
      }
      
      // repeated .protocols.common.SkillBonus skill_exp_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_exp_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_exp_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_exp_bonus;
        if (input->ExpectTag(50)) goto parse_drop_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo drop_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_drop_item;
        if (input->ExpectTag(56)) goto parse_is_fight_finish;
        break;
      }
      
      // optional int32 is_fight_finish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fight_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_fight_finish_)));
          set_has_is_fight_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_finish_error_code;
        break;
      }
      
      // optional int32 finish_error_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_error_code_)));
          set_has_finish_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoFightMonsterUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_fight_time = 1;
  if (has_cur_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_fight_time(), output);
  }
  
  // optional int32 left_auto_fight_times = 2;
  if (has_left_auto_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_auto_fight_times(), output);
  }
  
  // optional int32 free_bag_size = 3;
  if (has_free_bag_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free_bag_size(), output);
  }
  
  // optional int32 exp_bonus = 4;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp_bonus(), output);
  }
  
  // repeated .protocols.common.SkillBonus skill_exp_bonus = 5;
  for (int i = 0; i < this->skill_exp_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_exp_bonus(i), output);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 6;
  for (int i = 0; i < this->drop_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->drop_item(i), output);
  }
  
  // optional int32 is_fight_finish = 7;
  if (has_is_fight_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_fight_finish(), output);
  }
  
  // optional int32 finish_error_code = 8;
  if (has_finish_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->finish_error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightMonsterUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_fight_time = 1;
  if (has_cur_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_fight_time(), target);
  }
  
  // optional int32 left_auto_fight_times = 2;
  if (has_left_auto_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_auto_fight_times(), target);
  }
  
  // optional int32 free_bag_size = 3;
  if (has_free_bag_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free_bag_size(), target);
  }
  
  // optional int32 exp_bonus = 4;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp_bonus(), target);
  }
  
  // repeated .protocols.common.SkillBonus skill_exp_bonus = 5;
  for (int i = 0; i < this->skill_exp_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_exp_bonus(i), target);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 6;
  for (int i = 0; i < this->drop_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->drop_item(i), target);
  }
  
  // optional int32 is_fight_finish = 7;
  if (has_is_fight_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_fight_finish(), target);
  }
  
  // optional int32 finish_error_code = 8;
  if (has_finish_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->finish_error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightMonsterUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_fight_finish = 7;
    if (has_is_fight_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_fight_finish());
    }
    
    // optional int32 finish_error_code = 8;
    if (has_finish_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_error_code());
    }
    
    // optional int32 cur_fight_time = 1;
    if (has_cur_fight_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_fight_time());
    }
    
    // optional int32 left_auto_fight_times = 2;
    if (has_left_auto_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_auto_fight_times());
    }
    
    // optional int32 free_bag_size = 3;
    if (has_free_bag_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_bag_size());
    }
    
    // optional int32 exp_bonus = 4;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
  }
  // repeated .protocols.common.SkillBonus skill_exp_bonus = 5;
  total_size += 1 * this->skill_exp_bonus_size();
  for (int i = 0; i < this->skill_exp_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_exp_bonus(i));
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 6;
  total_size += 1 * this->drop_item_size();
  for (int i = 0; i < this->drop_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightMonsterUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightMonsterUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightMonsterUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightMonsterUpdateNotify::MergeFrom(const AutoFightMonsterUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_exp_bonus_.MergeFrom(from.skill_exp_bonus_);
  drop_item_.MergeFrom(from.drop_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fight_finish()) {
      set_is_fight_finish(from.is_fight_finish());
    }
    if (from.has_finish_error_code()) {
      set_finish_error_code(from.finish_error_code());
    }
    if (from.has_cur_fight_time()) {
      set_cur_fight_time(from.cur_fight_time());
    }
    if (from.has_left_auto_fight_times()) {
      set_left_auto_fight_times(from.left_auto_fight_times());
    }
    if (from.has_free_bag_size()) {
      set_free_bag_size(from.free_bag_size());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightMonsterUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightMonsterUpdateNotify::CopyFrom(const AutoFightMonsterUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightMonsterUpdateNotify::IsInitialized() const {
  
  for (int i = 0; i < skill_exp_bonus_size(); i++) {
    if (!this->skill_exp_bonus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drop_item_size(); i++) {
    if (!this->drop_item(i).IsInitialized()) return false;
  }
  return true;
}

void AutoFightMonsterUpdateNotify::Swap(AutoFightMonsterUpdateNotify* other) {
  if (other != this) {
    std::swap(is_fight_finish_, other->is_fight_finish_);
    std::swap(finish_error_code_, other->finish_error_code_);
    std::swap(cur_fight_time_, other->cur_fight_time_);
    std::swap(left_auto_fight_times_, other->left_auto_fight_times_);
    std::swap(free_bag_size_, other->free_bag_size_);
    std::swap(exp_bonus_, other->exp_bonus_);
    skill_exp_bonus_.Swap(&other->skill_exp_bonus_);
    drop_item_.Swap(&other->drop_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightMonsterUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightMonsterUpdateNotify_descriptor_;
  metadata.reflection = AutoFightMonsterUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SpeedUpAutoFightRequest::SpeedUpAutoFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpAutoFightRequest::InitAsDefaultInstance() {
}

SpeedUpAutoFightRequest::SpeedUpAutoFightRequest(const SpeedUpAutoFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpAutoFightRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpAutoFightRequest::~SpeedUpAutoFightRequest() {
  SharedDtor();
}

void SpeedUpAutoFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedUpAutoFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpAutoFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpAutoFightRequest_descriptor_;
}

const SpeedUpAutoFightRequest& SpeedUpAutoFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SpeedUpAutoFightRequest* SpeedUpAutoFightRequest::default_instance_ = NULL;

SpeedUpAutoFightRequest* SpeedUpAutoFightRequest::New() const {
  return new SpeedUpAutoFightRequest;
}

void SpeedUpAutoFightRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpAutoFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SpeedUpAutoFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpAutoFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpAutoFightRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpAutoFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpAutoFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpAutoFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpAutoFightRequest::MergeFrom(const SpeedUpAutoFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpAutoFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpAutoFightRequest::CopyFrom(const SpeedUpAutoFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpAutoFightRequest::IsInitialized() const {
  
  return true;
}

void SpeedUpAutoFightRequest::Swap(SpeedUpAutoFightRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpAutoFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpAutoFightRequest_descriptor_;
  metadata.reflection = SpeedUpAutoFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpAutoFightResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SpeedUpAutoFightResponse::SpeedUpAutoFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpAutoFightResponse::InitAsDefaultInstance() {
}

SpeedUpAutoFightResponse::SpeedUpAutoFightResponse(const SpeedUpAutoFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpAutoFightResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpAutoFightResponse::~SpeedUpAutoFightResponse() {
  SharedDtor();
}

void SpeedUpAutoFightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedUpAutoFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpAutoFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpAutoFightResponse_descriptor_;
}

const SpeedUpAutoFightResponse& SpeedUpAutoFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SpeedUpAutoFightResponse* SpeedUpAutoFightResponse::default_instance_ = NULL;

SpeedUpAutoFightResponse* SpeedUpAutoFightResponse::New() const {
  return new SpeedUpAutoFightResponse;
}

void SpeedUpAutoFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpAutoFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpAutoFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpAutoFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpAutoFightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpAutoFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpAutoFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpAutoFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpAutoFightResponse::MergeFrom(const SpeedUpAutoFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpAutoFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpAutoFightResponse::CopyFrom(const SpeedUpAutoFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpAutoFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SpeedUpAutoFightResponse::Swap(SpeedUpAutoFightResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpAutoFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpAutoFightResponse_descriptor_;
  metadata.reflection = SpeedUpAutoFightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPlayerViewRequest::GetPlayerViewRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerViewRequest::InitAsDefaultInstance() {
}

GetPlayerViewRequest::GetPlayerViewRequest(const GetPlayerViewRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerViewRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerViewRequest::~GetPlayerViewRequest() {
  SharedDtor();
}

void GetPlayerViewRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayerViewRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerViewRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerViewRequest_descriptor_;
}

const GetPlayerViewRequest& GetPlayerViewRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetPlayerViewRequest* GetPlayerViewRequest::default_instance_ = NULL;

GetPlayerViewRequest* GetPlayerViewRequest::New() const {
  return new GetPlayerViewRequest;
}

void GetPlayerViewRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerViewRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetPlayerViewRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerViewRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerViewRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerViewRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerViewRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerViewRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerViewRequest::MergeFrom(const GetPlayerViewRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerViewRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerViewRequest::CopyFrom(const GetPlayerViewRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerViewRequest::IsInitialized() const {
  
  return true;
}

void GetPlayerViewRequest::Swap(GetPlayerViewRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerViewRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerViewRequest_descriptor_;
  metadata.reflection = GetPlayerViewRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPlayerViewResponse::kErrorCodeFieldNumber;
const int GetPlayerViewResponse::kViewFieldNumber;
#endif  // !_MSC_VER

GetPlayerViewResponse::GetPlayerViewResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerViewResponse::InitAsDefaultInstance() {
  view_ = const_cast< ::protocols::common::EnterViewNotify*>(&::protocols::common::EnterViewNotify::default_instance());
}

GetPlayerViewResponse::GetPlayerViewResponse(const GetPlayerViewResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerViewResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerViewResponse::~GetPlayerViewResponse() {
  SharedDtor();
}

void GetPlayerViewResponse::SharedDtor() {
  if (this != default_instance_) {
    delete view_;
  }
}

void GetPlayerViewResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerViewResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerViewResponse_descriptor_;
}

const GetPlayerViewResponse& GetPlayerViewResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetPlayerViewResponse* GetPlayerViewResponse::default_instance_ = NULL;

GetPlayerViewResponse* GetPlayerViewResponse::New() const {
  return new GetPlayerViewResponse;
}

void GetPlayerViewResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_view()) {
      if (view_ != NULL) view_->::protocols::common::EnterViewNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerViewResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }
      
      // optional .protocols.common.EnterViewNotify view = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPlayerViewResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.EnterViewNotify view = 2;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerViewResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.EnterViewNotify view = 2;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerViewResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.EnterViewNotify view = 2;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerViewResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerViewResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerViewResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerViewResponse::MergeFrom(const GetPlayerViewResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_view()) {
      mutable_view()->::protocols::common::EnterViewNotify::MergeFrom(from.view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerViewResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerViewResponse::CopyFrom(const GetPlayerViewResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerViewResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_view()) {
    if (!this->view().IsInitialized()) return false;
  }
  return true;
}

void GetPlayerViewResponse::Swap(GetPlayerViewResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(view_, other->view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerViewResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerViewResponse_descriptor_;
  metadata.reflection = GetPlayerViewResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSkillListRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

GetSkillListRequest::GetSkillListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSkillListRequest::InitAsDefaultInstance() {
}

GetSkillListRequest::GetSkillListRequest(const GetSkillListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSkillListRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSkillListRequest::~GetSkillListRequest() {
  SharedDtor();
}

void GetSkillListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSkillListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSkillListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSkillListRequest_descriptor_;
}

const GetSkillListRequest& GetSkillListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetSkillListRequest* GetSkillListRequest::default_instance_ = NULL;

GetSkillListRequest* GetSkillListRequest::New() const {
  return new GetSkillListRequest;
}

void GetSkillListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSkillListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSkillListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSkillListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSkillListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSkillListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSkillListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSkillListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSkillListRequest::MergeFrom(const GetSkillListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSkillListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSkillListRequest::CopyFrom(const GetSkillListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSkillListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetSkillListRequest::Swap(GetSkillListRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSkillListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSkillListRequest_descriptor_;
  metadata.reflection = GetSkillListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSkillListResponse::kErrorCodeFieldNumber;
const int GetSkillListResponse::kGuidFieldNumber;
const int GetSkillListResponse::kOpenSlotFieldNumber;
const int GetSkillListResponse::kSkillListFieldNumber;
const int GetSkillListResponse::kSkillExpPoolFieldNumber;
const int GetSkillListResponse::kPracticeSkillLimitFieldNumber;
#endif  // !_MSC_VER

GetSkillListResponse::GetSkillListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSkillListResponse::InitAsDefaultInstance() {
}

GetSkillListResponse::GetSkillListResponse(const GetSkillListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSkillListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  open_slot_ = 0;
  skill_exp_pool_ = 0;
  practice_skill_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSkillListResponse::~GetSkillListResponse() {
  SharedDtor();
}

void GetSkillListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSkillListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSkillListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSkillListResponse_descriptor_;
}

const GetSkillListResponse& GetSkillListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetSkillListResponse* GetSkillListResponse::default_instance_ = NULL;

GetSkillListResponse* GetSkillListResponse::New() const {
  return new GetSkillListResponse;
}

void GetSkillListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    open_slot_ = 0;
    skill_exp_pool_ = 0;
    practice_skill_limit_ = 0;
  }
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSkillListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_slot;
        break;
      }
      
      // required int32 open_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_slot_)));
          set_has_open_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_list;
        break;
      }
      
      // repeated .protocols.common.SkillInfo skill_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_list;
        if (input->ExpectTag(40)) goto parse_skill_exp_pool;
        break;
      }
      
      // optional int32 skill_exp_pool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_exp_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_exp_pool_)));
          set_has_skill_exp_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_practice_skill_limit;
        break;
      }
      
      // optional int32 practice_skill_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_skill_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_skill_limit_)));
          set_has_practice_skill_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSkillListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required int32 open_slot = 3;
  if (has_open_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_slot(), output);
  }
  
  // repeated .protocols.common.SkillInfo skill_list = 4;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill_list(i), output);
  }
  
  // optional int32 skill_exp_pool = 5;
  if (has_skill_exp_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_exp_pool(), output);
  }
  
  // optional int32 practice_skill_limit = 6;
  if (has_practice_skill_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->practice_skill_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSkillListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required int32 open_slot = 3;
  if (has_open_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_slot(), target);
  }
  
  // repeated .protocols.common.SkillInfo skill_list = 4;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill_list(i), target);
  }
  
  // optional int32 skill_exp_pool = 5;
  if (has_skill_exp_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_exp_pool(), target);
  }
  
  // optional int32 practice_skill_limit = 6;
  if (has_practice_skill_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->practice_skill_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSkillListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 open_slot = 3;
    if (has_open_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_slot());
    }
    
    // optional int32 skill_exp_pool = 5;
    if (has_skill_exp_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_exp_pool());
    }
    
    // optional int32 practice_skill_limit = 6;
    if (has_practice_skill_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_skill_limit());
    }
    
  }
  // repeated .protocols.common.SkillInfo skill_list = 4;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSkillListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSkillListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSkillListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSkillListResponse::MergeFrom(const GetSkillListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_open_slot()) {
      set_open_slot(from.open_slot());
    }
    if (from.has_skill_exp_pool()) {
      set_skill_exp_pool(from.skill_exp_pool());
    }
    if (from.has_practice_skill_limit()) {
      set_practice_skill_limit(from.practice_skill_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSkillListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSkillListResponse::CopyFrom(const GetSkillListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSkillListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < skill_list_size(); i++) {
    if (!this->skill_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetSkillListResponse::Swap(GetSkillListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(open_slot_, other->open_slot_);
    skill_list_.Swap(&other->skill_list_);
    std::swap(skill_exp_pool_, other->skill_exp_pool_);
    std::swap(practice_skill_limit_, other->practice_skill_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSkillListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSkillListResponse_descriptor_;
  metadata.reflection = GetSkillListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetBattleSkillListRequest::GetBattleSkillListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBattleSkillListRequest::InitAsDefaultInstance() {
}

GetBattleSkillListRequest::GetBattleSkillListRequest(const GetBattleSkillListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBattleSkillListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBattleSkillListRequest::~GetBattleSkillListRequest() {
  SharedDtor();
}

void GetBattleSkillListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBattleSkillListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBattleSkillListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBattleSkillListRequest_descriptor_;
}

const GetBattleSkillListRequest& GetBattleSkillListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetBattleSkillListRequest* GetBattleSkillListRequest::default_instance_ = NULL;

GetBattleSkillListRequest* GetBattleSkillListRequest::New() const {
  return new GetBattleSkillListRequest;
}

void GetBattleSkillListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBattleSkillListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetBattleSkillListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBattleSkillListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBattleSkillListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBattleSkillListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBattleSkillListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBattleSkillListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBattleSkillListRequest::MergeFrom(const GetBattleSkillListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBattleSkillListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBattleSkillListRequest::CopyFrom(const GetBattleSkillListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBattleSkillListRequest::IsInitialized() const {
  
  return true;
}

void GetBattleSkillListRequest::Swap(GetBattleSkillListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBattleSkillListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBattleSkillListRequest_descriptor_;
  metadata.reflection = GetBattleSkillListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBattleSkillListResponse::kErrorCodeFieldNumber;
const int GetBattleSkillListResponse::kBattleSkillFieldNumber;
const int GetBattleSkillListResponse::kYouliNumFieldNumber;
#endif  // !_MSC_VER

GetBattleSkillListResponse::GetBattleSkillListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBattleSkillListResponse::InitAsDefaultInstance() {
}

GetBattleSkillListResponse::GetBattleSkillListResponse(const GetBattleSkillListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBattleSkillListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  youli_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBattleSkillListResponse::~GetBattleSkillListResponse() {
  SharedDtor();
}

void GetBattleSkillListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBattleSkillListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBattleSkillListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBattleSkillListResponse_descriptor_;
}

const GetBattleSkillListResponse& GetBattleSkillListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetBattleSkillListResponse* GetBattleSkillListResponse::default_instance_ = NULL;

GetBattleSkillListResponse* GetBattleSkillListResponse::New() const {
  return new GetBattleSkillListResponse;
}

void GetBattleSkillListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    youli_num_ = 0;
  }
  battle_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBattleSkillListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_skill;
        break;
      }
      
      // repeated .protocols.common.BattleSkillInfo battle_skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_skill;
        if (input->ExpectTag(24)) goto parse_youli_num;
        break;
      }
      
      // optional int32 youli_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youli_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youli_num_)));
          set_has_youli_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBattleSkillListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.BattleSkillInfo battle_skill = 2;
  for (int i = 0; i < this->battle_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_skill(i), output);
  }
  
  // optional int32 youli_num = 3;
  if (has_youli_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->youli_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBattleSkillListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.BattleSkillInfo battle_skill = 2;
  for (int i = 0; i < this->battle_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_skill(i), target);
  }
  
  // optional int32 youli_num = 3;
  if (has_youli_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->youli_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBattleSkillListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 youli_num = 3;
    if (has_youli_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youli_num());
    }
    
  }
  // repeated .protocols.common.BattleSkillInfo battle_skill = 2;
  total_size += 1 * this->battle_skill_size();
  for (int i = 0; i < this->battle_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBattleSkillListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBattleSkillListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBattleSkillListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBattleSkillListResponse::MergeFrom(const GetBattleSkillListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_skill_.MergeFrom(from.battle_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_youli_num()) {
      set_youli_num(from.youli_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBattleSkillListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBattleSkillListResponse::CopyFrom(const GetBattleSkillListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBattleSkillListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < battle_skill_size(); i++) {
    if (!this->battle_skill(i).IsInitialized()) return false;
  }
  return true;
}

void GetBattleSkillListResponse::Swap(GetBattleSkillListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    battle_skill_.Swap(&other->battle_skill_);
    std::swap(youli_num_, other->youli_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBattleSkillListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBattleSkillListResponse_descriptor_;
  metadata.reflection = GetBattleSkillListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBattleSkillNotify::kTypeFieldNumber;
const int UpdateBattleSkillNotify::kSkillIdFieldNumber;
const int UpdateBattleSkillNotify::kCurExpFieldNumber;
const int UpdateBattleSkillNotify::kLevelFieldNumber;
#endif  // !_MSC_VER

UpdateBattleSkillNotify::UpdateBattleSkillNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBattleSkillNotify::InitAsDefaultInstance() {
}

UpdateBattleSkillNotify::UpdateBattleSkillNotify(const UpdateBattleSkillNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBattleSkillNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  skill_id_ = 0;
  cur_exp_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBattleSkillNotify::~UpdateBattleSkillNotify() {
  SharedDtor();
}

void UpdateBattleSkillNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBattleSkillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBattleSkillNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBattleSkillNotify_descriptor_;
}

const UpdateBattleSkillNotify& UpdateBattleSkillNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateBattleSkillNotify* UpdateBattleSkillNotify::default_instance_ = NULL;

UpdateBattleSkillNotify* UpdateBattleSkillNotify::New() const {
  return new UpdateBattleSkillNotify;
}

void UpdateBattleSkillNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    skill_id_ = 0;
    cur_exp_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBattleSkillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.UPDATE_BATTLE_SKILL_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::UPDATE_BATTLE_SKILL_TYPE_IsValid(value)) {
            set_type(static_cast< protocols::common::UPDATE_BATTLE_SKILL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_exp;
        break;
      }
      
      // required int32 cur_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBattleSkillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.UPDATE_BATTLE_SKILL_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  // required int32 cur_exp = 3;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_exp(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBattleSkillNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.UPDATE_BATTLE_SKILL_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  // required int32 cur_exp = 3;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_exp(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBattleSkillNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.UPDATE_BATTLE_SKILL_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 cur_exp = 3;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBattleSkillNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBattleSkillNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBattleSkillNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBattleSkillNotify::MergeFrom(const UpdateBattleSkillNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBattleSkillNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBattleSkillNotify::CopyFrom(const UpdateBattleSkillNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBattleSkillNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UpdateBattleSkillNotify::Swap(UpdateBattleSkillNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBattleSkillNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBattleSkillNotify_descriptor_;
  metadata.reflection = UpdateBattleSkillNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPoolChangeNotify::kBuddyGuidFieldNumber;
const int SkillPoolChangeNotify::kSkillPoolExpFieldNumber;
#endif  // !_MSC_VER

SkillPoolChangeNotify::SkillPoolChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPoolChangeNotify::InitAsDefaultInstance() {
}

SkillPoolChangeNotify::SkillPoolChangeNotify(const SkillPoolChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPoolChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  buddy_guid_ = GOOGLE_LONGLONG(0);
  skill_pool_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPoolChangeNotify::~SkillPoolChangeNotify() {
  SharedDtor();
}

void SkillPoolChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPoolChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPoolChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPoolChangeNotify_descriptor_;
}

const SkillPoolChangeNotify& SkillPoolChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SkillPoolChangeNotify* SkillPoolChangeNotify::default_instance_ = NULL;

SkillPoolChangeNotify* SkillPoolChangeNotify::New() const {
  return new SkillPoolChangeNotify;
}

void SkillPoolChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_guid_ = GOOGLE_LONGLONG(0);
    skill_pool_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPoolChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_guid_)));
          set_has_buddy_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_pool_exp;
        break;
      }
      
      // optional int32 skill_pool_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_pool_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_pool_exp_)));
          set_has_skill_pool_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPoolChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_guid = 1;
  if (has_buddy_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_guid(), output);
  }
  
  // optional int32 skill_pool_exp = 2;
  if (has_skill_pool_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_pool_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPoolChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_guid = 1;
  if (has_buddy_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_guid(), target);
  }
  
  // optional int32 skill_pool_exp = 2;
  if (has_skill_pool_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_pool_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPoolChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_guid = 1;
    if (has_buddy_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_guid());
    }
    
    // optional int32 skill_pool_exp = 2;
    if (has_skill_pool_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_pool_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPoolChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPoolChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPoolChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPoolChangeNotify::MergeFrom(const SkillPoolChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_guid()) {
      set_buddy_guid(from.buddy_guid());
    }
    if (from.has_skill_pool_exp()) {
      set_skill_pool_exp(from.skill_pool_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPoolChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPoolChangeNotify::CopyFrom(const SkillPoolChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPoolChangeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SkillPoolChangeNotify::Swap(SkillPoolChangeNotify* other) {
  if (other != this) {
    std::swap(buddy_guid_, other->buddy_guid_);
    std::swap(skill_pool_exp_, other->skill_pool_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPoolChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPoolChangeNotify_descriptor_;
  metadata.reflection = SkillPoolChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSkillNotify::kSkillInfoFieldNumber;
const int UpdateSkillNotify::kGuidFieldNumber;
const int UpdateSkillNotify::kNewFlagFieldNumber;
#endif  // !_MSC_VER

UpdateSkillNotify::UpdateSkillNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSkillNotify::InitAsDefaultInstance() {
  skill_info_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

UpdateSkillNotify::UpdateSkillNotify(const UpdateSkillNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSkillNotify::SharedCtor() {
  _cached_size_ = 0;
  skill_info_ = NULL;
  guid_ = GOOGLE_LONGLONG(0);
  new_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSkillNotify::~UpdateSkillNotify() {
  SharedDtor();
}

void UpdateSkillNotify::SharedDtor() {
  if (this != default_instance_) {
    delete skill_info_;
  }
}

void UpdateSkillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSkillNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSkillNotify_descriptor_;
}

const UpdateSkillNotify& UpdateSkillNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateSkillNotify* UpdateSkillNotify::default_instance_ = NULL;

UpdateSkillNotify* UpdateSkillNotify::New() const {
  return new UpdateSkillNotify;
}

void UpdateSkillNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_skill_info()) {
      if (skill_info_ != NULL) skill_info_->::protocols::common::SkillInfo::Clear();
    }
    guid_ = GOOGLE_LONGLONG(0);
    new_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSkillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.SkillInfo skill_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_flag;
        break;
      }
      
      // optional int32 new_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_flag_)));
          set_has_new_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSkillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.SkillInfo skill_info = 1;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_info(), output);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional int32 new_flag = 3;
  if (has_new_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSkillNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.SkillInfo skill_info = 1;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_info(), target);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional int32 new_flag = 3;
  if (has_new_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSkillNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.SkillInfo skill_info = 1;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }
    
    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 new_flag = 3;
    if (has_new_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSkillNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSkillNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSkillNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSkillNotify::MergeFrom(const UpdateSkillNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_info()) {
      mutable_skill_info()->::protocols::common::SkillInfo::MergeFrom(from.skill_info());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_new_flag()) {
      set_new_flag(from.new_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSkillNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSkillNotify::CopyFrom(const UpdateSkillNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSkillNotify::IsInitialized() const {
  
  if (has_skill_info()) {
    if (!this->skill_info().IsInitialized()) return false;
  }
  return true;
}

void UpdateSkillNotify::Swap(UpdateSkillNotify* other) {
  if (other != this) {
    std::swap(skill_info_, other->skill_info_);
    std::swap(guid_, other->guid_);
    std::swap(new_flag_, other->new_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSkillNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSkillNotify_descriptor_;
  metadata.reflection = UpdateSkillNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeBattleSkillRequest::kBattleSkillIdFieldNumber;
#endif  // !_MSC_VER

UpgradeBattleSkillRequest::UpgradeBattleSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeBattleSkillRequest::InitAsDefaultInstance() {
}

UpgradeBattleSkillRequest::UpgradeBattleSkillRequest(const UpgradeBattleSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeBattleSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  battle_skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeBattleSkillRequest::~UpgradeBattleSkillRequest() {
  SharedDtor();
}

void UpgradeBattleSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeBattleSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeBattleSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeBattleSkillRequest_descriptor_;
}

const UpgradeBattleSkillRequest& UpgradeBattleSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeBattleSkillRequest* UpgradeBattleSkillRequest::default_instance_ = NULL;

UpgradeBattleSkillRequest* UpgradeBattleSkillRequest::New() const {
  return new UpgradeBattleSkillRequest;
}

void UpgradeBattleSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeBattleSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battle_skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_skill_id_)));
          set_has_battle_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeBattleSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 battle_skill_id = 1;
  if (has_battle_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battle_skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeBattleSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 battle_skill_id = 1;
  if (has_battle_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battle_skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeBattleSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battle_skill_id = 1;
    if (has_battle_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_skill_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeBattleSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeBattleSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeBattleSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeBattleSkillRequest::MergeFrom(const UpgradeBattleSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_skill_id()) {
      set_battle_skill_id(from.battle_skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeBattleSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeBattleSkillRequest::CopyFrom(const UpgradeBattleSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeBattleSkillRequest::IsInitialized() const {
  
  return true;
}

void UpgradeBattleSkillRequest::Swap(UpgradeBattleSkillRequest* other) {
  if (other != this) {
    std::swap(battle_skill_id_, other->battle_skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeBattleSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeBattleSkillRequest_descriptor_;
  metadata.reflection = UpgradeBattleSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeBattleSkillResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UpgradeBattleSkillResponse::UpgradeBattleSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeBattleSkillResponse::InitAsDefaultInstance() {
}

UpgradeBattleSkillResponse::UpgradeBattleSkillResponse(const UpgradeBattleSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeBattleSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeBattleSkillResponse::~UpgradeBattleSkillResponse() {
  SharedDtor();
}

void UpgradeBattleSkillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeBattleSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeBattleSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeBattleSkillResponse_descriptor_;
}

const UpgradeBattleSkillResponse& UpgradeBattleSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeBattleSkillResponse* UpgradeBattleSkillResponse::default_instance_ = NULL;

UpgradeBattleSkillResponse* UpgradeBattleSkillResponse::New() const {
  return new UpgradeBattleSkillResponse;
}

void UpgradeBattleSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeBattleSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeBattleSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeBattleSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeBattleSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeBattleSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeBattleSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeBattleSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeBattleSkillResponse::MergeFrom(const UpgradeBattleSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeBattleSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeBattleSkillResponse::CopyFrom(const UpgradeBattleSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeBattleSkillResponse::IsInitialized() const {
  
  return true;
}

void UpgradeBattleSkillResponse::Swap(UpgradeBattleSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeBattleSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeBattleSkillResponse_descriptor_;
  metadata.reflection = UpgradeBattleSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeBattleSkillNotify_BattleSkillLevelInfo::kBattleSkillIdFieldNumber;
const int UpgradeBattleSkillNotify_BattleSkillLevelInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

UpgradeBattleSkillNotify_BattleSkillLevelInfo::UpgradeBattleSkillNotify_BattleSkillLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::InitAsDefaultInstance() {
}

UpgradeBattleSkillNotify_BattleSkillLevelInfo::UpgradeBattleSkillNotify_BattleSkillLevelInfo(const UpgradeBattleSkillNotify_BattleSkillLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  battle_skill_id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeBattleSkillNotify_BattleSkillLevelInfo::~UpgradeBattleSkillNotify_BattleSkillLevelInfo() {
  SharedDtor();
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeBattleSkillNotify_BattleSkillLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_;
}

const UpgradeBattleSkillNotify_BattleSkillLevelInfo& UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeBattleSkillNotify_BattleSkillLevelInfo* UpgradeBattleSkillNotify_BattleSkillLevelInfo::default_instance_ = NULL;

UpgradeBattleSkillNotify_BattleSkillLevelInfo* UpgradeBattleSkillNotify_BattleSkillLevelInfo::New() const {
  return new UpgradeBattleSkillNotify_BattleSkillLevelInfo;
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_skill_id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeBattleSkillNotify_BattleSkillLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battle_skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_skill_id_)));
          set_has_battle_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 battle_skill_id = 1;
  if (has_battle_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battle_skill_id(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeBattleSkillNotify_BattleSkillLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 battle_skill_id = 1;
  if (has_battle_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battle_skill_id(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeBattleSkillNotify_BattleSkillLevelInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battle_skill_id = 1;
    if (has_battle_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_skill_id());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeBattleSkillNotify_BattleSkillLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeBattleSkillNotify_BattleSkillLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::MergeFrom(const UpgradeBattleSkillNotify_BattleSkillLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_skill_id()) {
      set_battle_skill_id(from.battle_skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::CopyFrom(const UpgradeBattleSkillNotify_BattleSkillLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeBattleSkillNotify_BattleSkillLevelInfo::IsInitialized() const {
  
  return true;
}

void UpgradeBattleSkillNotify_BattleSkillLevelInfo::Swap(UpgradeBattleSkillNotify_BattleSkillLevelInfo* other) {
  if (other != this) {
    std::swap(battle_skill_id_, other->battle_skill_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeBattleSkillNotify_BattleSkillLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeBattleSkillNotify_BattleSkillLevelInfo_descriptor_;
  metadata.reflection = UpgradeBattleSkillNotify_BattleSkillLevelInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UpgradeBattleSkillNotify::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

UpgradeBattleSkillNotify::UpgradeBattleSkillNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeBattleSkillNotify::InitAsDefaultInstance() {
}

UpgradeBattleSkillNotify::UpgradeBattleSkillNotify(const UpgradeBattleSkillNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeBattleSkillNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeBattleSkillNotify::~UpgradeBattleSkillNotify() {
  SharedDtor();
}

void UpgradeBattleSkillNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeBattleSkillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeBattleSkillNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeBattleSkillNotify_descriptor_;
}

const UpgradeBattleSkillNotify& UpgradeBattleSkillNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpgradeBattleSkillNotify* UpgradeBattleSkillNotify::default_instance_ = NULL;

UpgradeBattleSkillNotify* UpgradeBattleSkillNotify::New() const {
  return new UpgradeBattleSkillNotify;
}

void UpgradeBattleSkillNotify::Clear() {
  skill_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeBattleSkillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.UpgradeBattleSkillNotify.BattleSkillLevelInfo skill_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeBattleSkillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.UpgradeBattleSkillNotify.BattleSkillLevelInfo skill_info = 1;
  for (int i = 0; i < this->skill_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeBattleSkillNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.UpgradeBattleSkillNotify.BattleSkillLevelInfo skill_info = 1;
  for (int i = 0; i < this->skill_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeBattleSkillNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.UpgradeBattleSkillNotify.BattleSkillLevelInfo skill_info = 1;
  total_size += 1 * this->skill_info_size();
  for (int i = 0; i < this->skill_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeBattleSkillNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeBattleSkillNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeBattleSkillNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeBattleSkillNotify::MergeFrom(const UpgradeBattleSkillNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_info_.MergeFrom(from.skill_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeBattleSkillNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeBattleSkillNotify::CopyFrom(const UpgradeBattleSkillNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeBattleSkillNotify::IsInitialized() const {
  
  return true;
}

void UpgradeBattleSkillNotify::Swap(UpgradeBattleSkillNotify* other) {
  if (other != this) {
    skill_info_.Swap(&other->skill_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeBattleSkillNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeBattleSkillNotify_descriptor_;
  metadata.reflection = UpgradeBattleSkillNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateYouliNotify::kYouliNumFieldNumber;
#endif  // !_MSC_VER

UpdateYouliNotify::UpdateYouliNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateYouliNotify::InitAsDefaultInstance() {
}

UpdateYouliNotify::UpdateYouliNotify(const UpdateYouliNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateYouliNotify::SharedCtor() {
  _cached_size_ = 0;
  youli_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateYouliNotify::~UpdateYouliNotify() {
  SharedDtor();
}

void UpdateYouliNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateYouliNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateYouliNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateYouliNotify_descriptor_;
}

const UpdateYouliNotify& UpdateYouliNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateYouliNotify* UpdateYouliNotify::default_instance_ = NULL;

UpdateYouliNotify* UpdateYouliNotify::New() const {
  return new UpdateYouliNotify;
}

void UpdateYouliNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    youli_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateYouliNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 youli_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youli_num_)));
          set_has_youli_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateYouliNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 youli_num = 1;
  if (has_youli_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->youli_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateYouliNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 youli_num = 1;
  if (has_youli_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->youli_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateYouliNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 youli_num = 1;
    if (has_youli_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youli_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateYouliNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateYouliNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateYouliNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateYouliNotify::MergeFrom(const UpdateYouliNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_youli_num()) {
      set_youli_num(from.youli_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateYouliNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateYouliNotify::CopyFrom(const UpdateYouliNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateYouliNotify::IsInitialized() const {
  
  return true;
}

void UpdateYouliNotify::Swap(UpdateYouliNotify* other) {
  if (other != this) {
    std::swap(youli_num_, other->youli_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateYouliNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateYouliNotify_descriptor_;
  metadata.reflection = UpdateYouliNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEquipDetailRequest::kGuidFieldNumber;
const int GetEquipDetailRequest::kItemIdListFieldNumber;
#endif  // !_MSC_VER

GetEquipDetailRequest::GetEquipDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEquipDetailRequest::InitAsDefaultInstance() {
}

GetEquipDetailRequest::GetEquipDetailRequest(const GetEquipDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEquipDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEquipDetailRequest::~GetEquipDetailRequest() {
  SharedDtor();
}

void GetEquipDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEquipDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEquipDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEquipDetailRequest_descriptor_;
}

const GetEquipDetailRequest& GetEquipDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetEquipDetailRequest* GetEquipDetailRequest::default_instance_ = NULL;

GetEquipDetailRequest* GetEquipDetailRequest::New() const {
  return new GetEquipDetailRequest;
}

void GetEquipDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  item_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEquipDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 item_id_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_item_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_item_id_list;
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEquipDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 item_id_list = 1;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->item_id_list(i), output);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEquipDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 item_id_list = 1;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->item_id_list(i), target);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEquipDetailRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  // repeated int64 item_id_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item_id_list(i));
    }
    total_size += 1 * this->item_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEquipDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEquipDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEquipDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEquipDetailRequest::MergeFrom(const GetEquipDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_list_.MergeFrom(from.item_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEquipDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEquipDetailRequest::CopyFrom(const GetEquipDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEquipDetailRequest::IsInitialized() const {
  
  return true;
}

void GetEquipDetailRequest::Swap(GetEquipDetailRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    item_id_list_.Swap(&other->item_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEquipDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEquipDetailRequest_descriptor_;
  metadata.reflection = GetEquipDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEquipDetailResponse::kErrorCodeFieldNumber;
const int GetEquipDetailResponse::kEquipListFieldNumber;
#endif  // !_MSC_VER

GetEquipDetailResponse::GetEquipDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEquipDetailResponse::InitAsDefaultInstance() {
}

GetEquipDetailResponse::GetEquipDetailResponse(const GetEquipDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEquipDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEquipDetailResponse::~GetEquipDetailResponse() {
  SharedDtor();
}

void GetEquipDetailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEquipDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEquipDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEquipDetailResponse_descriptor_;
}

const GetEquipDetailResponse& GetEquipDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetEquipDetailResponse* GetEquipDetailResponse::default_instance_ = NULL;

GetEquipDetailResponse* GetEquipDetailResponse::New() const {
  return new GetEquipDetailResponse;
}

void GetEquipDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEquipDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        break;
      }
      
      // repeated .protocols.common.EquipDetail equip_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEquipDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.EquipDetail equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEquipDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.EquipDetail equip_list = 2;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEquipDetailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.EquipDetail equip_list = 2;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEquipDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEquipDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEquipDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEquipDetailResponse::MergeFrom(const GetEquipDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEquipDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEquipDetailResponse::CopyFrom(const GetEquipDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEquipDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < equip_list_size(); i++) {
    if (!this->equip_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetEquipDetailResponse::Swap(GetEquipDetailResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEquipDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEquipDetailResponse_descriptor_;
  metadata.reflection = GetEquipDetailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLineupListRequest::GetLineupListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLineupListRequest::InitAsDefaultInstance() {
}

GetLineupListRequest::GetLineupListRequest(const GetLineupListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLineupListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLineupListRequest::~GetLineupListRequest() {
  SharedDtor();
}

void GetLineupListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLineupListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLineupListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLineupListRequest_descriptor_;
}

const GetLineupListRequest& GetLineupListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLineupListRequest* GetLineupListRequest::default_instance_ = NULL;

GetLineupListRequest* GetLineupListRequest::New() const {
  return new GetLineupListRequest;
}

void GetLineupListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLineupListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetLineupListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLineupListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLineupListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLineupListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLineupListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLineupListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLineupListRequest::MergeFrom(const GetLineupListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLineupListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLineupListRequest::CopyFrom(const GetLineupListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLineupListRequest::IsInitialized() const {
  
  return true;
}

void GetLineupListRequest::Swap(GetLineupListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLineupListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLineupListRequest_descriptor_;
  metadata.reflection = GetLineupListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLineupListResponse::kErrorCodeFieldNumber;
const int GetLineupListResponse::kLearnedSkillFieldNumber;
const int GetLineupListResponse::kDefaultLineupIdFieldNumber;
const int GetLineupListResponse::kLineupListFieldNumber;
const int GetLineupListResponse::kMaxLineupSizeFieldNumber;
#endif  // !_MSC_VER

GetLineupListResponse::GetLineupListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLineupListResponse::InitAsDefaultInstance() {
}

GetLineupListResponse::GetLineupListResponse(const GetLineupListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLineupListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  default_lineup_id_ = 0;
  max_lineup_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLineupListResponse::~GetLineupListResponse() {
  SharedDtor();
}

void GetLineupListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLineupListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLineupListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLineupListResponse_descriptor_;
}

const GetLineupListResponse& GetLineupListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLineupListResponse* GetLineupListResponse::default_instance_ = NULL;

GetLineupListResponse* GetLineupListResponse::New() const {
  return new GetLineupListResponse;
}

void GetLineupListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    default_lineup_id_ = 0;
    max_lineup_size_ = 0;
  }
  learned_skill_.Clear();
  lineup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLineupListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_default_lineup_id;
        break;
      }
      
      // optional int32 default_lineup_id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_lineup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_lineup_id_)));
          set_has_default_lineup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineup_list;
        break;
      }
      
      // repeated .protocols.common.LineupInfo lineup_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineup_list;
        if (input->ExpectTag(40)) goto parse_max_lineup_size;
        break;
      }
      
      // optional int32 max_lineup_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_lineup_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_lineup_size_)));
          set_has_max_lineup_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_learned_skill;
        break;
      }
      
      // repeated .protocols.common.SkillInfo learned_skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_learned_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_learned_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_learned_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLineupListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 default_lineup_id = 3 [default = 0];
  if (has_default_lineup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->default_lineup_id(), output);
  }
  
  // repeated .protocols.common.LineupInfo lineup_list = 4;
  for (int i = 0; i < this->lineup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lineup_list(i), output);
  }
  
  // optional int32 max_lineup_size = 5;
  if (has_max_lineup_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_lineup_size(), output);
  }
  
  // repeated .protocols.common.SkillInfo learned_skill = 6;
  for (int i = 0; i < this->learned_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->learned_skill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLineupListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 default_lineup_id = 3 [default = 0];
  if (has_default_lineup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->default_lineup_id(), target);
  }
  
  // repeated .protocols.common.LineupInfo lineup_list = 4;
  for (int i = 0; i < this->lineup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lineup_list(i), target);
  }
  
  // optional int32 max_lineup_size = 5;
  if (has_max_lineup_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_lineup_size(), target);
  }
  
  // repeated .protocols.common.SkillInfo learned_skill = 6;
  for (int i = 0; i < this->learned_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->learned_skill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLineupListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 default_lineup_id = 3 [default = 0];
    if (has_default_lineup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_lineup_id());
    }
    
    // optional int32 max_lineup_size = 5;
    if (has_max_lineup_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_lineup_size());
    }
    
  }
  // repeated .protocols.common.SkillInfo learned_skill = 6;
  total_size += 1 * this->learned_skill_size();
  for (int i = 0; i < this->learned_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->learned_skill(i));
  }
  
  // repeated .protocols.common.LineupInfo lineup_list = 4;
  total_size += 1 * this->lineup_list_size();
  for (int i = 0; i < this->lineup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineup_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLineupListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLineupListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLineupListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLineupListResponse::MergeFrom(const GetLineupListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  learned_skill_.MergeFrom(from.learned_skill_);
  lineup_list_.MergeFrom(from.lineup_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_default_lineup_id()) {
      set_default_lineup_id(from.default_lineup_id());
    }
    if (from.has_max_lineup_size()) {
      set_max_lineup_size(from.max_lineup_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLineupListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLineupListResponse::CopyFrom(const GetLineupListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLineupListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < learned_skill_size(); i++) {
    if (!this->learned_skill(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lineup_list_size(); i++) {
    if (!this->lineup_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetLineupListResponse::Swap(GetLineupListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    learned_skill_.Swap(&other->learned_skill_);
    std::swap(default_lineup_id_, other->default_lineup_id_);
    lineup_list_.Swap(&other->lineup_list_);
    std::swap(max_lineup_size_, other->max_lineup_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLineupListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLineupListResponse_descriptor_;
  metadata.reflection = GetLineupListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLineupFightCapacityRequest::kLineupIdFieldNumber;
#endif  // !_MSC_VER

GetLineupFightCapacityRequest::GetLineupFightCapacityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLineupFightCapacityRequest::InitAsDefaultInstance() {
}

GetLineupFightCapacityRequest::GetLineupFightCapacityRequest(const GetLineupFightCapacityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLineupFightCapacityRequest::SharedCtor() {
  _cached_size_ = 0;
  lineup_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLineupFightCapacityRequest::~GetLineupFightCapacityRequest() {
  SharedDtor();
}

void GetLineupFightCapacityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLineupFightCapacityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLineupFightCapacityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLineupFightCapacityRequest_descriptor_;
}

const GetLineupFightCapacityRequest& GetLineupFightCapacityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLineupFightCapacityRequest* GetLineupFightCapacityRequest::default_instance_ = NULL;

GetLineupFightCapacityRequest* GetLineupFightCapacityRequest::New() const {
  return new GetLineupFightCapacityRequest;
}

void GetLineupFightCapacityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineup_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLineupFightCapacityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lineup_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_id_)));
          set_has_lineup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLineupFightCapacityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineup_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLineupFightCapacityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineup_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLineupFightCapacityRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lineup_id = 1;
    if (has_lineup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLineupFightCapacityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLineupFightCapacityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLineupFightCapacityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLineupFightCapacityRequest::MergeFrom(const GetLineupFightCapacityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineup_id()) {
      set_lineup_id(from.lineup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLineupFightCapacityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLineupFightCapacityRequest::CopyFrom(const GetLineupFightCapacityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLineupFightCapacityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetLineupFightCapacityRequest::Swap(GetLineupFightCapacityRequest* other) {
  if (other != this) {
    std::swap(lineup_id_, other->lineup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLineupFightCapacityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLineupFightCapacityRequest_descriptor_;
  metadata.reflection = GetLineupFightCapacityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLineupFightCapacityResponse::kErrorCodeFieldNumber;
const int GetLineupFightCapacityResponse::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

GetLineupFightCapacityResponse::GetLineupFightCapacityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLineupFightCapacityResponse::InitAsDefaultInstance() {
}

GetLineupFightCapacityResponse::GetLineupFightCapacityResponse(const GetLineupFightCapacityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLineupFightCapacityResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLineupFightCapacityResponse::~GetLineupFightCapacityResponse() {
  SharedDtor();
}

void GetLineupFightCapacityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLineupFightCapacityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLineupFightCapacityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLineupFightCapacityResponse_descriptor_;
}

const GetLineupFightCapacityResponse& GetLineupFightCapacityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLineupFightCapacityResponse* GetLineupFightCapacityResponse::default_instance_ = NULL;

GetLineupFightCapacityResponse* GetLineupFightCapacityResponse::New() const {
  return new GetLineupFightCapacityResponse;
}

void GetLineupFightCapacityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    fight_capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLineupFightCapacityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_capacity;
        break;
      }
      
      // required int32 fight_capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLineupFightCapacityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int32 fight_capacity = 2;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLineupFightCapacityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int32 fight_capacity = 2;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLineupFightCapacityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int32 fight_capacity = 2;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLineupFightCapacityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLineupFightCapacityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLineupFightCapacityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLineupFightCapacityResponse::MergeFrom(const GetLineupFightCapacityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLineupFightCapacityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLineupFightCapacityResponse::CopyFrom(const GetLineupFightCapacityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLineupFightCapacityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetLineupFightCapacityResponse::Swap(GetLineupFightCapacityResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLineupFightCapacityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLineupFightCapacityResponse_descriptor_;
  metadata.reflection = GetLineupFightCapacityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineUpOperationRequest::kOperationFieldNumber;
const int LineUpOperationRequest::kSetAsDefaultFieldNumber;
const int LineUpOperationRequest::kLineupFieldNumber;
#endif  // !_MSC_VER

LineUpOperationRequest::LineUpOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineUpOperationRequest::InitAsDefaultInstance() {
  lineup_ = const_cast< ::protocols::common::LineupInfo*>(&::protocols::common::LineupInfo::default_instance());
}

LineUpOperationRequest::LineUpOperationRequest(const LineUpOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineUpOperationRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  set_as_default_ = 0;
  lineup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineUpOperationRequest::~LineUpOperationRequest() {
  SharedDtor();
}

void LineUpOperationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete lineup_;
  }
}

void LineUpOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineUpOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineUpOperationRequest_descriptor_;
}

const LineUpOperationRequest& LineUpOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LineUpOperationRequest* LineUpOperationRequest::default_instance_ = NULL;

LineUpOperationRequest* LineUpOperationRequest::New() const {
  return new LineUpOperationRequest;
}

void LineUpOperationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    set_as_default_ = 0;
    if (has_lineup()) {
      if (lineup_ != NULL) lineup_->::protocols::common::LineupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineUpOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.LINE_UP_OPERATION operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::LINE_UP_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::LINE_UP_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_set_as_default;
        break;
      }
      
      // optional int32 set_as_default = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_as_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_as_default_)));
          set_has_set_as_default();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lineup;
        break;
      }
      
      // optional .protocols.common.LineupInfo lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineUpOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.LINE_UP_OPERATION operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // optional int32 set_as_default = 2;
  if (has_set_as_default()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_as_default(), output);
  }
  
  // optional .protocols.common.LineupInfo lineup = 3;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lineup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineUpOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.LINE_UP_OPERATION operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // optional int32 set_as_default = 2;
  if (has_set_as_default()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->set_as_default(), target);
  }
  
  // optional .protocols.common.LineupInfo lineup = 3;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lineup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineUpOperationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.LINE_UP_OPERATION operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional int32 set_as_default = 2;
    if (has_set_as_default()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_as_default());
    }
    
    // optional .protocols.common.LineupInfo lineup = 3;
    if (has_lineup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineUpOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineUpOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineUpOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineUpOperationRequest::MergeFrom(const LineUpOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_set_as_default()) {
      set_set_as_default(from.set_as_default());
    }
    if (from.has_lineup()) {
      mutable_lineup()->::protocols::common::LineupInfo::MergeFrom(from.lineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineUpOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineUpOperationRequest::CopyFrom(const LineUpOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineUpOperationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_lineup()) {
    if (!this->lineup().IsInitialized()) return false;
  }
  return true;
}

void LineUpOperationRequest::Swap(LineUpOperationRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(set_as_default_, other->set_as_default_);
    std::swap(lineup_, other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineUpOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineUpOperationRequest_descriptor_;
  metadata.reflection = LineUpOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineUpOperationResponse::kErrorCodeFieldNumber;
const int LineUpOperationResponse::kOperationFieldNumber;
const int LineUpOperationResponse::kDefaultLineupIdFieldNumber;
const int LineUpOperationResponse::kLineupFieldNumber;
#endif  // !_MSC_VER

LineUpOperationResponse::LineUpOperationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineUpOperationResponse::InitAsDefaultInstance() {
  lineup_ = const_cast< ::protocols::common::LineupInfo*>(&::protocols::common::LineupInfo::default_instance());
}

LineUpOperationResponse::LineUpOperationResponse(const LineUpOperationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineUpOperationResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  operation_ = 1;
  default_lineup_id_ = 0;
  lineup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineUpOperationResponse::~LineUpOperationResponse() {
  SharedDtor();
}

void LineUpOperationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete lineup_;
  }
}

void LineUpOperationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineUpOperationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineUpOperationResponse_descriptor_;
}

const LineUpOperationResponse& LineUpOperationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LineUpOperationResponse* LineUpOperationResponse::default_instance_ = NULL;

LineUpOperationResponse* LineUpOperationResponse::New() const {
  return new LineUpOperationResponse;
}

void LineUpOperationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    operation_ = 1;
    default_lineup_id_ = 0;
    if (has_lineup()) {
      if (lineup_ != NULL) lineup_->::protocols::common::LineupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineUpOperationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // optional .protocols.common.LINE_UP_OPERATION operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::LINE_UP_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::LINE_UP_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_default_lineup_id;
        break;
      }
      
      // optional int32 default_lineup_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_default_lineup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_lineup_id_)));
          set_has_default_lineup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lineup;
        break;
      }
      
      // optional .protocols.common.LineupInfo lineup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineUpOperationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.LINE_UP_OPERATION operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }
  
  // optional int32 default_lineup_id = 3;
  if (has_default_lineup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->default_lineup_id(), output);
  }
  
  // optional .protocols.common.LineupInfo lineup = 4;
  if (has_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lineup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineUpOperationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.LINE_UP_OPERATION operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }
  
  // optional int32 default_lineup_id = 3;
  if (has_default_lineup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->default_lineup_id(), target);
  }
  
  // optional .protocols.common.LineupInfo lineup = 4;
  if (has_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lineup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineUpOperationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.LINE_UP_OPERATION operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional int32 default_lineup_id = 3;
    if (has_default_lineup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_lineup_id());
    }
    
    // optional .protocols.common.LineupInfo lineup = 4;
    if (has_lineup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineUpOperationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineUpOperationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineUpOperationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineUpOperationResponse::MergeFrom(const LineUpOperationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_default_lineup_id()) {
      set_default_lineup_id(from.default_lineup_id());
    }
    if (from.has_lineup()) {
      mutable_lineup()->::protocols::common::LineupInfo::MergeFrom(from.lineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineUpOperationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineUpOperationResponse::CopyFrom(const LineUpOperationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineUpOperationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_lineup()) {
    if (!this->lineup().IsInitialized()) return false;
  }
  return true;
}

void LineUpOperationResponse::Swap(LineUpOperationResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(operation_, other->operation_);
    std::swap(default_lineup_id_, other->default_lineup_id_);
    std::swap(lineup_, other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineUpOperationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineUpOperationResponse_descriptor_;
  metadata.reflection = LineUpOperationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnequipAllRequest::kBuddyIdFieldNumber;
#endif  // !_MSC_VER

UnequipAllRequest::UnequipAllRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnequipAllRequest::InitAsDefaultInstance() {
}

UnequipAllRequest::UnequipAllRequest(const UnequipAllRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnequipAllRequest::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnequipAllRequest::~UnequipAllRequest() {
  SharedDtor();
}

void UnequipAllRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnequipAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnequipAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnequipAllRequest_descriptor_;
}

const UnequipAllRequest& UnequipAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UnequipAllRequest* UnequipAllRequest::default_instance_ = NULL;

UnequipAllRequest* UnequipAllRequest::New() const {
  return new UnequipAllRequest;
}

void UnequipAllRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnequipAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnequipAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnequipAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnequipAllRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnequipAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnequipAllRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnequipAllRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnequipAllRequest::MergeFrom(const UnequipAllRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnequipAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnequipAllRequest::CopyFrom(const UnequipAllRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnequipAllRequest::IsInitialized() const {
  
  return true;
}

void UnequipAllRequest::Swap(UnequipAllRequest* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnequipAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnequipAllRequest_descriptor_;
  metadata.reflection = UnequipAllRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnequipAllResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UnequipAllResponse::UnequipAllResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnequipAllResponse::InitAsDefaultInstance() {
}

UnequipAllResponse::UnequipAllResponse(const UnequipAllResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnequipAllResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnequipAllResponse::~UnequipAllResponse() {
  SharedDtor();
}

void UnequipAllResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnequipAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnequipAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnequipAllResponse_descriptor_;
}

const UnequipAllResponse& UnequipAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UnequipAllResponse* UnequipAllResponse::default_instance_ = NULL;

UnequipAllResponse* UnequipAllResponse::New() const {
  return new UnequipAllResponse;
}

void UnequipAllResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnequipAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnequipAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnequipAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnequipAllResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnequipAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnequipAllResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnequipAllResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnequipAllResponse::MergeFrom(const UnequipAllResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnequipAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnequipAllResponse::CopyFrom(const UnequipAllResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnequipAllResponse::IsInitialized() const {
  
  return true;
}

void UnequipAllResponse::Swap(UnequipAllResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnequipAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnequipAllResponse_descriptor_;
  metadata.reflection = UnequipAllResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerUpdateNotify::kBankFieldNumber;
#endif  // !_MSC_VER

PlayerUpdateNotify::PlayerUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerUpdateNotify::InitAsDefaultInstance() {
  bank_ = const_cast< ::protocols::common::BankInfo*>(&::protocols::common::BankInfo::default_instance());
}

PlayerUpdateNotify::PlayerUpdateNotify(const PlayerUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  bank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUpdateNotify::~PlayerUpdateNotify() {
  SharedDtor();
}

void PlayerUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete bank_;
  }
}

void PlayerUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUpdateNotify_descriptor_;
}

const PlayerUpdateNotify& PlayerUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerUpdateNotify* PlayerUpdateNotify::default_instance_ = NULL;

PlayerUpdateNotify* PlayerUpdateNotify::New() const {
  return new PlayerUpdateNotify;
}

void PlayerUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bank()) {
      if (bank_ != NULL) bank_->::protocols::common::BankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.BankInfo bank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.BankInfo bank = 1;
  if (has_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.BankInfo bank = 1;
  if (has_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.BankInfo bank = 1;
    if (has_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerUpdateNotify::MergeFrom(const PlayerUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bank()) {
      mutable_bank()->::protocols::common::BankInfo::MergeFrom(from.bank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerUpdateNotify::CopyFrom(const PlayerUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpdateNotify::IsInitialized() const {
  
  return true;
}

void PlayerUpdateNotify::Swap(PlayerUpdateNotify* other) {
  if (other != this) {
    std::swap(bank_, other->bank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUpdateNotify_descriptor_;
  metadata.reflection = PlayerUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSkillRequest::kGuidFieldNumber;
const int EquipSkillRequest::kSkillIdFieldNumber;
const int EquipSkillRequest::kEquipedSlotIndexFieldNumber;
#endif  // !_MSC_VER

EquipSkillRequest::EquipSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSkillRequest::InitAsDefaultInstance() {
}

EquipSkillRequest::EquipSkillRequest(const EquipSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  equiped_slot_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSkillRequest::~EquipSkillRequest() {
  SharedDtor();
}

void EquipSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSkillRequest_descriptor_;
}

const EquipSkillRequest& EquipSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipSkillRequest* EquipSkillRequest::default_instance_ = NULL;

EquipSkillRequest* EquipSkillRequest::New() const {
  return new EquipSkillRequest;
}

void EquipSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    equiped_slot_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiped_slot_index;
        break;
      }
      
      // required int32 equiped_slot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiped_slot_index_)));
          set_has_equiped_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equiped_slot_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equiped_slot_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 equiped_slot_index = 3;
    if (has_equiped_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiped_slot_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSkillRequest::MergeFrom(const EquipSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_equiped_slot_index()) {
      set_equiped_slot_index(from.equiped_slot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSkillRequest::CopyFrom(const EquipSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EquipSkillRequest::Swap(EquipSkillRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(equiped_slot_index_, other->equiped_slot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSkillRequest_descriptor_;
  metadata.reflection = EquipSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSkillResponse::kErrorCodeFieldNumber;
const int EquipSkillResponse::kGuidFieldNumber;
const int EquipSkillResponse::kEquipedSlotIndexFieldNumber;
const int EquipSkillResponse::kEquipedSlotSkillidFieldNumber;
#endif  // !_MSC_VER

EquipSkillResponse::EquipSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSkillResponse::InitAsDefaultInstance() {
}

EquipSkillResponse::EquipSkillResponse(const EquipSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  equiped_slot_index_ = 0;
  equiped_slot_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSkillResponse::~EquipSkillResponse() {
  SharedDtor();
}

void EquipSkillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSkillResponse_descriptor_;
}

const EquipSkillResponse& EquipSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipSkillResponse* EquipSkillResponse::default_instance_ = NULL;

EquipSkillResponse* EquipSkillResponse::New() const {
  return new EquipSkillResponse;
}

void EquipSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    equiped_slot_index_ = 0;
    equiped_slot_skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiped_slot_index;
        break;
      }
      
      // required int32 equiped_slot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiped_slot_index_)));
          set_has_equiped_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equiped_slot_skillid;
        break;
      }
      
      // required int32 equiped_slot_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_slot_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiped_slot_skillid_)));
          set_has_equiped_slot_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equiped_slot_index(), output);
  }
  
  // required int32 equiped_slot_skillid = 4;
  if (has_equiped_slot_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->equiped_slot_skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equiped_slot_index(), target);
  }
  
  // required int32 equiped_slot_skillid = 4;
  if (has_equiped_slot_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->equiped_slot_skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 equiped_slot_index = 3;
    if (has_equiped_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiped_slot_index());
    }
    
    // required int32 equiped_slot_skillid = 4;
    if (has_equiped_slot_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiped_slot_skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSkillResponse::MergeFrom(const EquipSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_equiped_slot_index()) {
      set_equiped_slot_index(from.equiped_slot_index());
    }
    if (from.has_equiped_slot_skillid()) {
      set_equiped_slot_skillid(from.equiped_slot_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSkillResponse::CopyFrom(const EquipSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void EquipSkillResponse::Swap(EquipSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(equiped_slot_index_, other->equiped_slot_index_);
    std::swap(equiped_slot_skillid_, other->equiped_slot_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSkillResponse_descriptor_;
  metadata.reflection = EquipSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnloadSkillRequest::kGuidFieldNumber;
const int UnloadSkillRequest::kEquipedSlotIndexFieldNumber;
#endif  // !_MSC_VER

UnloadSkillRequest::UnloadSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnloadSkillRequest::InitAsDefaultInstance() {
}

UnloadSkillRequest::UnloadSkillRequest(const UnloadSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnloadSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  equiped_slot_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnloadSkillRequest::~UnloadSkillRequest() {
  SharedDtor();
}

void UnloadSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnloadSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnloadSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnloadSkillRequest_descriptor_;
}

const UnloadSkillRequest& UnloadSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UnloadSkillRequest* UnloadSkillRequest::default_instance_ = NULL;

UnloadSkillRequest* UnloadSkillRequest::New() const {
  return new UnloadSkillRequest;
}

void UnloadSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    equiped_slot_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnloadSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equiped_slot_index;
        break;
      }
      
      // required int32 equiped_slot_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiped_slot_index_)));
          set_has_equiped_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnloadSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 equiped_slot_index = 2;
  if (has_equiped_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equiped_slot_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnloadSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 equiped_slot_index = 2;
  if (has_equiped_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equiped_slot_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnloadSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 equiped_slot_index = 2;
    if (has_equiped_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiped_slot_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnloadSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnloadSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnloadSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnloadSkillRequest::MergeFrom(const UnloadSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_equiped_slot_index()) {
      set_equiped_slot_index(from.equiped_slot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnloadSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadSkillRequest::CopyFrom(const UnloadSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UnloadSkillRequest::Swap(UnloadSkillRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(equiped_slot_index_, other->equiped_slot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnloadSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnloadSkillRequest_descriptor_;
  metadata.reflection = UnloadSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnloadSkillResponse::kErrorCodeFieldNumber;
const int UnloadSkillResponse::kGuidFieldNumber;
const int UnloadSkillResponse::kEquipedSlotIndexFieldNumber;
#endif  // !_MSC_VER

UnloadSkillResponse::UnloadSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnloadSkillResponse::InitAsDefaultInstance() {
}

UnloadSkillResponse::UnloadSkillResponse(const UnloadSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnloadSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  equiped_slot_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnloadSkillResponse::~UnloadSkillResponse() {
  SharedDtor();
}

void UnloadSkillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnloadSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnloadSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnloadSkillResponse_descriptor_;
}

const UnloadSkillResponse& UnloadSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UnloadSkillResponse* UnloadSkillResponse::default_instance_ = NULL;

UnloadSkillResponse* UnloadSkillResponse::New() const {
  return new UnloadSkillResponse;
}

void UnloadSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    equiped_slot_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnloadSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equiped_slot_index;
        break;
      }
      
      // required int32 equiped_slot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiped_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiped_slot_index_)));
          set_has_equiped_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnloadSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equiped_slot_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnloadSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required int32 equiped_slot_index = 3;
  if (has_equiped_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equiped_slot_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnloadSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 equiped_slot_index = 3;
    if (has_equiped_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiped_slot_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnloadSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnloadSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnloadSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnloadSkillResponse::MergeFrom(const UnloadSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_equiped_slot_index()) {
      set_equiped_slot_index(from.equiped_slot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnloadSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnloadSkillResponse::CopyFrom(const UnloadSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnloadSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UnloadSkillResponse::Swap(UnloadSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(equiped_slot_index_, other->equiped_slot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnloadSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnloadSkillResponse_descriptor_;
  metadata.reflection = UnloadSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InjectSkillExpRequest::kGuidFieldNumber;
const int InjectSkillExpRequest::kSkillIdFieldNumber;
const int InjectSkillExpRequest::kInjectExpFieldNumber;
#endif  // !_MSC_VER

InjectSkillExpRequest::InjectSkillExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InjectSkillExpRequest::InitAsDefaultInstance() {
}

InjectSkillExpRequest::InjectSkillExpRequest(const InjectSkillExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InjectSkillExpRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  inject_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InjectSkillExpRequest::~InjectSkillExpRequest() {
  SharedDtor();
}

void InjectSkillExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InjectSkillExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InjectSkillExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InjectSkillExpRequest_descriptor_;
}

const InjectSkillExpRequest& InjectSkillExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InjectSkillExpRequest* InjectSkillExpRequest::default_instance_ = NULL;

InjectSkillExpRequest* InjectSkillExpRequest::New() const {
  return new InjectSkillExpRequest;
}

void InjectSkillExpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    inject_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InjectSkillExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inject_exp;
        break;
      }
      
      // required int32 inject_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inject_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inject_exp_)));
          set_has_inject_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InjectSkillExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  // required int32 inject_exp = 3;
  if (has_inject_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inject_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InjectSkillExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  // required int32 inject_exp = 3;
  if (has_inject_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inject_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InjectSkillExpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 inject_exp = 3;
    if (has_inject_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inject_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InjectSkillExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InjectSkillExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InjectSkillExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InjectSkillExpRequest::MergeFrom(const InjectSkillExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_inject_exp()) {
      set_inject_exp(from.inject_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InjectSkillExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjectSkillExpRequest::CopyFrom(const InjectSkillExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectSkillExpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void InjectSkillExpRequest::Swap(InjectSkillExpRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(inject_exp_, other->inject_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InjectSkillExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InjectSkillExpRequest_descriptor_;
  metadata.reflection = InjectSkillExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InjectSkillExpResponse::kErrorCodeFieldNumber;
const int InjectSkillExpResponse::kGuidFieldNumber;
const int InjectSkillExpResponse::kSkillPoolExpFieldNumber;
const int InjectSkillExpResponse::kSkillFieldNumber;
#endif  // !_MSC_VER

InjectSkillExpResponse::InjectSkillExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InjectSkillExpResponse::InitAsDefaultInstance() {
  skill_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

InjectSkillExpResponse::InjectSkillExpResponse(const InjectSkillExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InjectSkillExpResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_pool_exp_ = 0;
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InjectSkillExpResponse::~InjectSkillExpResponse() {
  SharedDtor();
}

void InjectSkillExpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void InjectSkillExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InjectSkillExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InjectSkillExpResponse_descriptor_;
}

const InjectSkillExpResponse& InjectSkillExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InjectSkillExpResponse* InjectSkillExpResponse::default_instance_ = NULL;

InjectSkillExpResponse* InjectSkillExpResponse::New() const {
  return new InjectSkillExpResponse;
}

void InjectSkillExpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    skill_pool_exp_ = 0;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protocols::common::SkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InjectSkillExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_pool_exp;
        break;
      }
      
      // required int32 skill_pool_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_pool_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_pool_exp_)));
          set_has_skill_pool_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill;
        break;
      }
      
      // optional .protocols.common.SkillInfo skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InjectSkillExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required int32 skill_pool_exp = 3;
  if (has_skill_pool_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_pool_exp(), output);
  }
  
  // optional .protocols.common.SkillInfo skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InjectSkillExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required int32 skill_pool_exp = 3;
  if (has_skill_pool_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_pool_exp(), target);
  }
  
  // optional .protocols.common.SkillInfo skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InjectSkillExpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_pool_exp = 3;
    if (has_skill_pool_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_pool_exp());
    }
    
    // optional .protocols.common.SkillInfo skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InjectSkillExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InjectSkillExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InjectSkillExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InjectSkillExpResponse::MergeFrom(const InjectSkillExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_pool_exp()) {
      set_skill_pool_exp(from.skill_pool_exp());
    }
    if (from.has_skill()) {
      mutable_skill()->::protocols::common::SkillInfo::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InjectSkillExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjectSkillExpResponse::CopyFrom(const InjectSkillExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjectSkillExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void InjectSkillExpResponse::Swap(InjectSkillExpResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(skill_pool_exp_, other->skill_pool_exp_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InjectSkillExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InjectSkillExpResponse_descriptor_;
  metadata.reflection = InjectSkillExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeSkillRequest::kGuidFieldNumber;
const int PracticeSkillRequest::kSkillIdFieldNumber;
const int PracticeSkillRequest::kPracticeModeFieldNumber;
const int PracticeSkillRequest::kPracticeTimeFieldNumber;
const int PracticeSkillRequest::kCostFieldNumber;
#endif  // !_MSC_VER

PracticeSkillRequest::PracticeSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeSkillRequest::InitAsDefaultInstance() {
}

PracticeSkillRequest::PracticeSkillRequest(const PracticeSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  practice_mode_ = 1;
  practice_time_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeSkillRequest::~PracticeSkillRequest() {
  SharedDtor();
}

void PracticeSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PracticeSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeSkillRequest_descriptor_;
}

const PracticeSkillRequest& PracticeSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeSkillRequest* PracticeSkillRequest::default_instance_ = NULL;

PracticeSkillRequest* PracticeSkillRequest::New() const {
  return new PracticeSkillRequest;
}

void PracticeSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
    practice_mode_ = 1;
    practice_time_ = 0;
    cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_practice_mode;
        break;
      }
      
      // required .protocols.common.PRACTICE_MODE practice_mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::PRACTICE_MODE_IsValid(value)) {
            set_practice_mode(static_cast< protocols::common::PRACTICE_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_practice_time;
        break;
      }
      
      // required int32 practice_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_time_)));
          set_has_practice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost;
        break;
      }
      
      // required int32 cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PracticeSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  // required .protocols.common.PRACTICE_MODE practice_mode = 3;
  if (has_practice_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->practice_mode(), output);
  }
  
  // required int32 practice_time = 4;
  if (has_practice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->practice_time(), output);
  }
  
  // required int32 cost = 5;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  // required .protocols.common.PRACTICE_MODE practice_mode = 3;
  if (has_practice_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->practice_mode(), target);
  }
  
  // required int32 practice_time = 4;
  if (has_practice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->practice_time(), target);
  }
  
  // required int32 cost = 5;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required .protocols.common.PRACTICE_MODE practice_mode = 3;
    if (has_practice_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->practice_mode());
    }
    
    // required int32 practice_time = 4;
    if (has_practice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_time());
    }
    
    // required int32 cost = 5;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeSkillRequest::MergeFrom(const PracticeSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_practice_mode()) {
      set_practice_mode(from.practice_mode());
    }
    if (from.has_practice_time()) {
      set_practice_time(from.practice_time());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeSkillRequest::CopyFrom(const PracticeSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void PracticeSkillRequest::Swap(PracticeSkillRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(practice_mode_, other->practice_mode_);
    std::swap(practice_time_, other->practice_time_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeSkillRequest_descriptor_;
  metadata.reflection = PracticeSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeSkillResponse::kErrorCodeFieldNumber;
const int PracticeSkillResponse::kGuidFieldNumber;
const int PracticeSkillResponse::kSkillFieldNumber;
#endif  // !_MSC_VER

PracticeSkillResponse::PracticeSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeSkillResponse::InitAsDefaultInstance() {
  skill_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

PracticeSkillResponse::PracticeSkillResponse(const PracticeSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeSkillResponse::~PracticeSkillResponse() {
  SharedDtor();
}

void PracticeSkillResponse::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void PracticeSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeSkillResponse_descriptor_;
}

const PracticeSkillResponse& PracticeSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeSkillResponse* PracticeSkillResponse::default_instance_ = NULL;

PracticeSkillResponse* PracticeSkillResponse::New() const {
  return new PracticeSkillResponse;
}

void PracticeSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protocols::common::SkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // required .protocols.common.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PracticeSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required .protocols.common.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeSkillResponse::MergeFrom(const PracticeSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::protocols::common::SkillInfo::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeSkillResponse::CopyFrom(const PracticeSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void PracticeSkillResponse::Swap(PracticeSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeSkillResponse_descriptor_;
  metadata.reflection = PracticeSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedupPracticeSkillRequest::kGuidFieldNumber;
const int SpeedupPracticeSkillRequest::kSkillIdFieldNumber;
#endif  // !_MSC_VER

SpeedupPracticeSkillRequest::SpeedupPracticeSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedupPracticeSkillRequest::InitAsDefaultInstance() {
}

SpeedupPracticeSkillRequest::SpeedupPracticeSkillRequest(const SpeedupPracticeSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedupPracticeSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedupPracticeSkillRequest::~SpeedupPracticeSkillRequest() {
  SharedDtor();
}

void SpeedupPracticeSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedupPracticeSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedupPracticeSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedupPracticeSkillRequest_descriptor_;
}

const SpeedupPracticeSkillRequest& SpeedupPracticeSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SpeedupPracticeSkillRequest* SpeedupPracticeSkillRequest::default_instance_ = NULL;

SpeedupPracticeSkillRequest* SpeedupPracticeSkillRequest::New() const {
  return new SpeedupPracticeSkillRequest;
}

void SpeedupPracticeSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedupPracticeSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedupPracticeSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedupPracticeSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedupPracticeSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedupPracticeSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedupPracticeSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedupPracticeSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedupPracticeSkillRequest::MergeFrom(const SpeedupPracticeSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedupPracticeSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedupPracticeSkillRequest::CopyFrom(const SpeedupPracticeSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedupPracticeSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SpeedupPracticeSkillRequest::Swap(SpeedupPracticeSkillRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedupPracticeSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedupPracticeSkillRequest_descriptor_;
  metadata.reflection = SpeedupPracticeSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedupPracticeSkillResponse::kErrorCodeFieldNumber;
const int SpeedupPracticeSkillResponse::kGuidFieldNumber;
const int SpeedupPracticeSkillResponse::kSkillFieldNumber;
const int SpeedupPracticeSkillResponse::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

SpeedupPracticeSkillResponse::SpeedupPracticeSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedupPracticeSkillResponse::InitAsDefaultInstance() {
  skill_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

SpeedupPracticeSkillResponse::SpeedupPracticeSkillResponse(const SpeedupPracticeSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedupPracticeSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_ = NULL;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedupPracticeSkillResponse::~SpeedupPracticeSkillResponse() {
  SharedDtor();
}

void SpeedupPracticeSkillResponse::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void SpeedupPracticeSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedupPracticeSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedupPracticeSkillResponse_descriptor_;
}

const SpeedupPracticeSkillResponse& SpeedupPracticeSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SpeedupPracticeSkillResponse* SpeedupPracticeSkillResponse::default_instance_ = NULL;

SpeedupPracticeSkillResponse* SpeedupPracticeSkillResponse::New() const {
  return new SpeedupPracticeSkillResponse;
}

void SpeedupPracticeSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protocols::common::SkillInfo::Clear();
    }
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedupPracticeSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // required .protocols.common.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedupPracticeSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }
  
  // optional int32 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedupPracticeSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }
  
  // optional int32 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedupPracticeSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required .protocols.common.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional int32 left_time = 4;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedupPracticeSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedupPracticeSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedupPracticeSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedupPracticeSkillResponse::MergeFrom(const SpeedupPracticeSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::protocols::common::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedupPracticeSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedupPracticeSkillResponse::CopyFrom(const SpeedupPracticeSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedupPracticeSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void SpeedupPracticeSkillResponse::Swap(SpeedupPracticeSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(skill_, other->skill_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedupPracticeSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedupPracticeSkillResponse_descriptor_;
  metadata.reflection = SpeedupPracticeSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopPracticeSkillRequest::kGuidFieldNumber;
const int StopPracticeSkillRequest::kSkillIdFieldNumber;
#endif  // !_MSC_VER

StopPracticeSkillRequest::StopPracticeSkillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopPracticeSkillRequest::InitAsDefaultInstance() {
}

StopPracticeSkillRequest::StopPracticeSkillRequest(const StopPracticeSkillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopPracticeSkillRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopPracticeSkillRequest::~StopPracticeSkillRequest() {
  SharedDtor();
}

void StopPracticeSkillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopPracticeSkillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPracticeSkillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopPracticeSkillRequest_descriptor_;
}

const StopPracticeSkillRequest& StopPracticeSkillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StopPracticeSkillRequest* StopPracticeSkillRequest::default_instance_ = NULL;

StopPracticeSkillRequest* StopPracticeSkillRequest::New() const {
  return new StopPracticeSkillRequest;
}

void StopPracticeSkillRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopPracticeSkillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }
      
      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopPracticeSkillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopPracticeSkillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopPracticeSkillRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPracticeSkillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopPracticeSkillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopPracticeSkillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopPracticeSkillRequest::MergeFrom(const StopPracticeSkillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopPracticeSkillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPracticeSkillRequest::CopyFrom(const StopPracticeSkillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPracticeSkillRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StopPracticeSkillRequest::Swap(StopPracticeSkillRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopPracticeSkillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopPracticeSkillRequest_descriptor_;
  metadata.reflection = StopPracticeSkillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopPracticeSkillResponse::kErrorCodeFieldNumber;
const int StopPracticeSkillResponse::kGuidFieldNumber;
const int StopPracticeSkillResponse::kSkillFieldNumber;
#endif  // !_MSC_VER

StopPracticeSkillResponse::StopPracticeSkillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopPracticeSkillResponse::InitAsDefaultInstance() {
  skill_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

StopPracticeSkillResponse::StopPracticeSkillResponse(const StopPracticeSkillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopPracticeSkillResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopPracticeSkillResponse::~StopPracticeSkillResponse() {
  SharedDtor();
}

void StopPracticeSkillResponse::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void StopPracticeSkillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPracticeSkillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopPracticeSkillResponse_descriptor_;
}

const StopPracticeSkillResponse& StopPracticeSkillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StopPracticeSkillResponse* StopPracticeSkillResponse::default_instance_ = NULL;

StopPracticeSkillResponse* StopPracticeSkillResponse::New() const {
  return new StopPracticeSkillResponse;
}

void StopPracticeSkillResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protocols::common::SkillInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopPracticeSkillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // optional .protocols.common.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopPracticeSkillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopPracticeSkillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional .protocols.common.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopPracticeSkillResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional .protocols.common.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPracticeSkillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopPracticeSkillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopPracticeSkillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopPracticeSkillResponse::MergeFrom(const StopPracticeSkillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::protocols::common::SkillInfo::MergeFrom(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopPracticeSkillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPracticeSkillResponse::CopyFrom(const StopPracticeSkillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPracticeSkillResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void StopPracticeSkillResponse::Swap(StopPracticeSkillResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(skill_, other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopPracticeSkillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopPracticeSkillResponse_descriptor_;
  metadata.reflection = StopPracticeSkillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeSkillNotify::kGuidFieldNumber;
const int PracticeSkillNotify::kSkillFieldNumber;
const int PracticeSkillNotify::kFinishedFieldNumber;
#endif  // !_MSC_VER

PracticeSkillNotify::PracticeSkillNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeSkillNotify::InitAsDefaultInstance() {
  skill_ = const_cast< ::protocols::common::SkillInfo*>(&::protocols::common::SkillInfo::default_instance());
}

PracticeSkillNotify::PracticeSkillNotify(const PracticeSkillNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeSkillNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  skill_ = NULL;
  finished_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeSkillNotify::~PracticeSkillNotify() {
  SharedDtor();
}

void PracticeSkillNotify::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void PracticeSkillNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeSkillNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeSkillNotify_descriptor_;
}

const PracticeSkillNotify& PracticeSkillNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeSkillNotify* PracticeSkillNotify::default_instance_ = NULL;

PracticeSkillNotify* PracticeSkillNotify::New() const {
  return new PracticeSkillNotify;
}

void PracticeSkillNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::protocols::common::SkillInfo::Clear();
    }
    finished_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeSkillNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skill;
        break;
      }
      
      // required .protocols.common.SkillInfo skill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }
      
      // optional int32 finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PracticeSkillNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required .protocols.common.SkillInfo skill = 2;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skill(), output);
  }
  
  // optional int32 finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finished(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeSkillNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required .protocols.common.SkillInfo skill = 2;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skill(), target);
  }
  
  // optional int32 finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finished(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeSkillNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required .protocols.common.SkillInfo skill = 2;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }
    
    // optional int32 finished = 3;
    if (has_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeSkillNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeSkillNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeSkillNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeSkillNotify::MergeFrom(const PracticeSkillNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::protocols::common::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeSkillNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeSkillNotify::CopyFrom(const PracticeSkillNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeSkillNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void PracticeSkillNotify::Swap(PracticeSkillNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_, other->skill_);
    std::swap(finished_, other->finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeSkillNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeSkillNotify_descriptor_;
  metadata.reflection = PracticeSkillNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpNotify::kGuidFieldNumber;
const int LevelUpNotify::kTypeFieldNumber;
const int LevelUpNotify::kSkillIdFieldNumber;
const int LevelUpNotify::kCurExpFieldNumber;
const int LevelUpNotify::kNewLevelFieldNumber;
#endif  // !_MSC_VER

LevelUpNotify::LevelUpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelUpNotify::InitAsDefaultInstance() {
}

LevelUpNotify::LevelUpNotify(const LevelUpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelUpNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  type_ = 1;
  skill_id_ = 0;
  cur_exp_ = 0;
  new_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpNotify::~LevelUpNotify() {
  SharedDtor();
}

void LevelUpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelUpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelUpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelUpNotify_descriptor_;
}

const LevelUpNotify& LevelUpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LevelUpNotify* LevelUpNotify::default_instance_ = NULL;

LevelUpNotify* LevelUpNotify::New() const {
  return new LevelUpNotify;
}

void LevelUpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    type_ = 1;
    skill_id_ = 0;
    cur_exp_ = 0;
    new_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelUpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .protocols.common.LEVEL_UP_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::LEVEL_UP_TYPE_IsValid(value)) {
            set_type(static_cast< protocols::common::LEVEL_UP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }
      
      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_exp;
        break;
      }
      
      // optional int32 cur_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_new_level;
        break;
      }
      
      // required int32 new_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelUpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required .protocols.common.LEVEL_UP_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }
  
  // optional int32 cur_exp = 5;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_exp(), output);
  }
  
  // required int32 new_level = 6;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->new_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelUpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required .protocols.common.LEVEL_UP_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }
  
  // optional int32 cur_exp = 5;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_exp(), target);
  }
  
  // required int32 new_level = 6;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->new_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelUpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required .protocols.common.LEVEL_UP_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // optional int32 cur_exp = 5;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }
    
    // required int32 new_level = 6;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelUpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelUpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelUpNotify::MergeFrom(const LevelUpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelUpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelUpNotify::CopyFrom(const LevelUpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  return true;
}

void LevelUpNotify::Swap(LevelUpNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(new_level_, other->new_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelUpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelUpNotify_descriptor_;
  metadata.reflection = LevelUpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMoneyNotify::kMoneyFieldNumber;
#endif  // !_MSC_VER

UpdateMoneyNotify::UpdateMoneyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMoneyNotify::InitAsDefaultInstance() {
  money_ = const_cast< ::protocols::common::Money*>(&::protocols::common::Money::default_instance());
}

UpdateMoneyNotify::UpdateMoneyNotify(const UpdateMoneyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMoneyNotify::SharedCtor() {
  _cached_size_ = 0;
  money_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMoneyNotify::~UpdateMoneyNotify() {
  SharedDtor();
}

void UpdateMoneyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete money_;
  }
}

void UpdateMoneyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMoneyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMoneyNotify_descriptor_;
}

const UpdateMoneyNotify& UpdateMoneyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateMoneyNotify* UpdateMoneyNotify::default_instance_ = NULL;

UpdateMoneyNotify* UpdateMoneyNotify::New() const {
  return new UpdateMoneyNotify;
}

void UpdateMoneyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_money()) {
      if (money_ != NULL) money_->::protocols::common::Money::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMoneyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.Money money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMoneyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.Money money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMoneyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.Money money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMoneyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.Money money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMoneyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMoneyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMoneyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMoneyNotify::MergeFrom(const UpdateMoneyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      mutable_money()->::protocols::common::Money::MergeFrom(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMoneyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMoneyNotify::CopyFrom(const UpdateMoneyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMoneyNotify::IsInitialized() const {
  
  if (has_money()) {
    if (!this->money().IsInitialized()) return false;
  }
  return true;
}

void UpdateMoneyNotify::Swap(UpdateMoneyNotify* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMoneyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMoneyNotify_descriptor_;
  metadata.reflection = UpdateMoneyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateItemNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

UpdateItemNotify::UpdateItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateItemNotify::InitAsDefaultInstance() {
}

UpdateItemNotify::UpdateItemNotify(const UpdateItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateItemNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateItemNotify::~UpdateItemNotify() {
  SharedDtor();
}

void UpdateItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateItemNotify_descriptor_;
}

const UpdateItemNotify& UpdateItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateItemNotify* UpdateItemNotify::default_instance_ = NULL;

UpdateItemNotify* UpdateItemNotify::New() const {
  return new UpdateItemNotify;
}

void UpdateItemNotify::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.ItemInfo items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.ItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateItemNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.ItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateItemNotify::MergeFrom(const UpdateItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateItemNotify::CopyFrom(const UpdateItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateItemNotify::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateItemNotify::Swap(UpdateItemNotify* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateItemNotify_descriptor_;
  metadata.reflection = UpdateItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateExpNotify::kCurExpFieldNumber;
const int UpdateExpNotify::kCurLevelFieldNumber;
const int UpdateExpNotify::kAddExpFieldNumber;
#endif  // !_MSC_VER

UpdateExpNotify::UpdateExpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateExpNotify::InitAsDefaultInstance() {
}

UpdateExpNotify::UpdateExpNotify(const UpdateExpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateExpNotify::SharedCtor() {
  _cached_size_ = 0;
  cur_exp_ = 0;
  cur_level_ = 0;
  add_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateExpNotify::~UpdateExpNotify() {
  SharedDtor();
}

void UpdateExpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateExpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateExpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateExpNotify_descriptor_;
}

const UpdateExpNotify& UpdateExpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateExpNotify* UpdateExpNotify::default_instance_ = NULL;

UpdateExpNotify* UpdateExpNotify::New() const {
  return new UpdateExpNotify;
}

void UpdateExpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_exp_ = 0;
    cur_level_ = 0;
    add_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateExpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cur_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_level;
        break;
      }
      
      // required int32 cur_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_level_)));
          set_has_cur_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_exp;
        break;
      }
      
      // required int32 add_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateExpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cur_exp = 1;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_exp(), output);
  }
  
  // required int32 cur_level = 2;
  if (has_cur_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_level(), output);
  }
  
  // required int32 add_exp = 3;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateExpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cur_exp = 1;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_exp(), target);
  }
  
  // required int32 cur_level = 2;
  if (has_cur_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_level(), target);
  }
  
  // required int32 add_exp = 3;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateExpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cur_exp = 1;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_exp());
    }
    
    // required int32 cur_level = 2;
    if (has_cur_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_level());
    }
    
    // required int32 add_exp = 3;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateExpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateExpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateExpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateExpNotify::MergeFrom(const UpdateExpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_cur_level()) {
      set_cur_level(from.cur_level());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateExpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateExpNotify::CopyFrom(const UpdateExpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateExpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UpdateExpNotify::Swap(UpdateExpNotify* other) {
  if (other != this) {
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(cur_level_, other->cur_level_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateExpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateExpNotify_descriptor_;
  metadata.reflection = UpdateExpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetQuestListRequest::GetQuestListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestListRequest::InitAsDefaultInstance() {
}

GetQuestListRequest::GetQuestListRequest(const GetQuestListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestListRequest::~GetQuestListRequest() {
  SharedDtor();
}

void GetQuestListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestListRequest_descriptor_;
}

const GetQuestListRequest& GetQuestListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetQuestListRequest* GetQuestListRequest::default_instance_ = NULL;

GetQuestListRequest* GetQuestListRequest::New() const {
  return new GetQuestListRequest;
}

void GetQuestListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetQuestListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestListRequest::MergeFrom(const GetQuestListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestListRequest::CopyFrom(const GetQuestListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestListRequest::IsInitialized() const {
  
  return true;
}

void GetQuestListRequest::Swap(GetQuestListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestListRequest_descriptor_;
  metadata.reflection = GetQuestListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestsListResponse::kQuestsFieldNumber;
const int GetQuestsListResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetQuestsListResponse::GetQuestsListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetQuestsListResponse::InitAsDefaultInstance() {
}

GetQuestsListResponse::GetQuestsListResponse(const GetQuestsListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetQuestsListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestsListResponse::~GetQuestsListResponse() {
  SharedDtor();
}

void GetQuestsListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestsListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestsListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestsListResponse_descriptor_;
}

const GetQuestsListResponse& GetQuestsListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetQuestsListResponse* GetQuestsListResponse::default_instance_ = NULL;

GetQuestsListResponse* GetQuestsListResponse::New() const {
  return new GetQuestsListResponse;
}

void GetQuestsListResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    error_code_ = 0;
  }
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestsListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.QuestPb quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetQuestsListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.QuestPb quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetQuestsListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.QuestPb quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetQuestsListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.QuestPb quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestsListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestsListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestsListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestsListResponse::MergeFrom(const GetQuestsListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestsListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestsListResponse::CopyFrom(const GetQuestsListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestsListResponse::IsInitialized() const {
  
  return true;
}

void GetQuestsListResponse::Swap(GetQuestsListResponse* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestsListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestsListResponse_descriptor_;
  metadata.reflection = GetQuestsListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptQuestRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

AcceptQuestRequest::AcceptQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptQuestRequest::InitAsDefaultInstance() {
}

AcceptQuestRequest::AcceptQuestRequest(const AcceptQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptQuestRequest::~AcceptQuestRequest() {
  SharedDtor();
}

void AcceptQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptQuestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptQuestRequest_descriptor_;
}

const AcceptQuestRequest& AcceptQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AcceptQuestRequest* AcceptQuestRequest::default_instance_ = NULL;

AcceptQuestRequest* AcceptQuestRequest::New() const {
  return new AcceptQuestRequest;
}

void AcceptQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptQuestRequest::MergeFrom(const AcceptQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptQuestRequest::CopyFrom(const AcceptQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptQuestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AcceptQuestRequest::Swap(AcceptQuestRequest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptQuestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptQuestRequest_descriptor_;
  metadata.reflection = AcceptQuestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishQuestRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

FinishQuestRequest::FinishQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishQuestRequest::InitAsDefaultInstance() {
}

FinishQuestRequest::FinishQuestRequest(const FinishQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishQuestRequest::~FinishQuestRequest() {
  SharedDtor();
}

void FinishQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishQuestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishQuestRequest_descriptor_;
}

const FinishQuestRequest& FinishQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FinishQuestRequest* FinishQuestRequest::default_instance_ = NULL;

FinishQuestRequest* FinishQuestRequest::New() const {
  return new FinishQuestRequest;
}

void FinishQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishQuestRequest::MergeFrom(const FinishQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishQuestRequest::CopyFrom(const FinishQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishQuestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FinishQuestRequest::Swap(FinishQuestRequest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishQuestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishQuestRequest_descriptor_;
  metadata.reflection = FinishQuestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancelQuestRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

CancelQuestRequest::CancelQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelQuestRequest::InitAsDefaultInstance() {
}

CancelQuestRequest::CancelQuestRequest(const CancelQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelQuestRequest::~CancelQuestRequest() {
  SharedDtor();
}

void CancelQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelQuestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelQuestRequest_descriptor_;
}

const CancelQuestRequest& CancelQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CancelQuestRequest* CancelQuestRequest::default_instance_ = NULL;

CancelQuestRequest* CancelQuestRequest::New() const {
  return new CancelQuestRequest;
}

void CancelQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelQuestRequest::MergeFrom(const CancelQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelQuestRequest::CopyFrom(const CancelQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelQuestRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CancelQuestRequest::Swap(CancelQuestRequest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelQuestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelQuestRequest_descriptor_;
  metadata.reflection = CancelQuestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestActionRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

QuestActionRequest::QuestActionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestActionRequest::InitAsDefaultInstance() {
}

QuestActionRequest::QuestActionRequest(const QuestActionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestActionRequest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestActionRequest::~QuestActionRequest() {
  SharedDtor();
}

void QuestActionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestActionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestActionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestActionRequest_descriptor_;
}

const QuestActionRequest& QuestActionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

QuestActionRequest* QuestActionRequest::default_instance_ = NULL;

QuestActionRequest* QuestActionRequest::New() const {
  return new QuestActionRequest;
}

void QuestActionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestActionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestActionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestActionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestActionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestActionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestActionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestActionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestActionRequest::MergeFrom(const QuestActionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestActionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestActionRequest::CopyFrom(const QuestActionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestActionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QuestActionRequest::Swap(QuestActionRequest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestActionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestActionRequest_descriptor_;
  metadata.reflection = QuestActionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestsNotify::kQuestsFieldNumber;
#endif  // !_MSC_VER

QuestsNotify::QuestsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestsNotify::InitAsDefaultInstance() {
}

QuestsNotify::QuestsNotify(const QuestsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestsNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestsNotify::~QuestsNotify() {
  SharedDtor();
}

void QuestsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestsNotify_descriptor_;
}

const QuestsNotify& QuestsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

QuestsNotify* QuestsNotify::default_instance_ = NULL;

QuestsNotify* QuestsNotify::New() const {
  return new QuestsNotify;
}

void QuestsNotify::Clear() {
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.QuestPb quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_quests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.QuestPb quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.QuestPb quests = 1;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestsNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.QuestPb quests = 1;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestsNotify::MergeFrom(const QuestsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestsNotify::CopyFrom(const QuestsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestsNotify::IsInitialized() const {
  
  return true;
}

void QuestsNotify::Swap(QuestsNotify* other) {
  if (other != this) {
    quests_.Swap(&other->quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestsNotify_descriptor_;
  metadata.reflection = QuestsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptXunluoQuestRequest::kCancelQuestFieldNumber;
#endif  // !_MSC_VER

AcceptXunluoQuestRequest::AcceptXunluoQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptXunluoQuestRequest::InitAsDefaultInstance() {
}

AcceptXunluoQuestRequest::AcceptXunluoQuestRequest(const AcceptXunluoQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptXunluoQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  cancel_quest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptXunluoQuestRequest::~AcceptXunluoQuestRequest() {
  SharedDtor();
}

void AcceptXunluoQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptXunluoQuestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptXunluoQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptXunluoQuestRequest_descriptor_;
}

const AcceptXunluoQuestRequest& AcceptXunluoQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AcceptXunluoQuestRequest* AcceptXunluoQuestRequest::default_instance_ = NULL;

AcceptXunluoQuestRequest* AcceptXunluoQuestRequest::New() const {
  return new AcceptXunluoQuestRequest;
}

void AcceptXunluoQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cancel_quest_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptXunluoQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cancel_quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancel_quest_)));
          set_has_cancel_quest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptXunluoQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool cancel_quest = 1;
  if (has_cancel_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cancel_quest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptXunluoQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool cancel_quest = 1;
  if (has_cancel_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cancel_quest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptXunluoQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool cancel_quest = 1;
    if (has_cancel_quest()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptXunluoQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptXunluoQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptXunluoQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptXunluoQuestRequest::MergeFrom(const AcceptXunluoQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cancel_quest()) {
      set_cancel_quest(from.cancel_quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptXunluoQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptXunluoQuestRequest::CopyFrom(const AcceptXunluoQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptXunluoQuestRequest::IsInitialized() const {
  
  return true;
}

void AcceptXunluoQuestRequest::Swap(AcceptXunluoQuestRequest* other) {
  if (other != this) {
    std::swap(cancel_quest_, other->cancel_quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptXunluoQuestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptXunluoQuestRequest_descriptor_;
  metadata.reflection = AcceptXunluoQuestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptXunluoQuestResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AcceptXunluoQuestResponse::AcceptXunluoQuestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptXunluoQuestResponse::InitAsDefaultInstance() {
}

AcceptXunluoQuestResponse::AcceptXunluoQuestResponse(const AcceptXunluoQuestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptXunluoQuestResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptXunluoQuestResponse::~AcceptXunluoQuestResponse() {
  SharedDtor();
}

void AcceptXunluoQuestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptXunluoQuestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptXunluoQuestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptXunluoQuestResponse_descriptor_;
}

const AcceptXunluoQuestResponse& AcceptXunluoQuestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AcceptXunluoQuestResponse* AcceptXunluoQuestResponse::default_instance_ = NULL;

AcceptXunluoQuestResponse* AcceptXunluoQuestResponse::New() const {
  return new AcceptXunluoQuestResponse;
}

void AcceptXunluoQuestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptXunluoQuestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptXunluoQuestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptXunluoQuestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptXunluoQuestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptXunluoQuestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptXunluoQuestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptXunluoQuestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptXunluoQuestResponse::MergeFrom(const AcceptXunluoQuestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptXunluoQuestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptXunluoQuestResponse::CopyFrom(const AcceptXunluoQuestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptXunluoQuestResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AcceptXunluoQuestResponse::Swap(AcceptXunluoQuestResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptXunluoQuestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptXunluoQuestResponse_descriptor_;
  metadata.reflection = AcceptXunluoQuestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyInjectSoulRequest::kBuddyIdFieldNumber;
const int BuddyInjectSoulRequest::kUseProtectItemFieldNumber;
const int BuddyInjectSoulRequest::kAutoFillFieldNumber;
#endif  // !_MSC_VER

BuddyInjectSoulRequest::BuddyInjectSoulRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyInjectSoulRequest::InitAsDefaultInstance() {
}

BuddyInjectSoulRequest::BuddyInjectSoulRequest(const BuddyInjectSoulRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyInjectSoulRequest::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  use_protect_item_ = false;
  auto_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyInjectSoulRequest::~BuddyInjectSoulRequest() {
  SharedDtor();
}

void BuddyInjectSoulRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyInjectSoulRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyInjectSoulRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyInjectSoulRequest_descriptor_;
}

const BuddyInjectSoulRequest& BuddyInjectSoulRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyInjectSoulRequest* BuddyInjectSoulRequest::default_instance_ = NULL;

BuddyInjectSoulRequest* BuddyInjectSoulRequest::New() const {
  return new BuddyInjectSoulRequest;
}

void BuddyInjectSoulRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    use_protect_item_ = false;
    auto_fill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyInjectSoulRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_protect_item;
        break;
      }
      
      // required bool use_protect_item = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_protect_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_protect_item_)));
          set_has_use_protect_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_fill;
        break;
      }
      
      // optional bool auto_fill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_fill_)));
          set_has_auto_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyInjectSoulRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // required bool use_protect_item = 2 [default = false];
  if (has_use_protect_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_protect_item(), output);
  }
  
  // optional bool auto_fill = 3;
  if (has_auto_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_fill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyInjectSoulRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // required bool use_protect_item = 2 [default = false];
  if (has_use_protect_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_protect_item(), target);
  }
  
  // optional bool auto_fill = 3;
  if (has_auto_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_fill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyInjectSoulRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // required bool use_protect_item = 2 [default = false];
    if (has_use_protect_item()) {
      total_size += 1 + 1;
    }
    
    // optional bool auto_fill = 3;
    if (has_auto_fill()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyInjectSoulRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyInjectSoulRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyInjectSoulRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyInjectSoulRequest::MergeFrom(const BuddyInjectSoulRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_use_protect_item()) {
      set_use_protect_item(from.use_protect_item());
    }
    if (from.has_auto_fill()) {
      set_auto_fill(from.auto_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyInjectSoulRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyInjectSoulRequest::CopyFrom(const BuddyInjectSoulRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyInjectSoulRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuddyInjectSoulRequest::Swap(BuddyInjectSoulRequest* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(use_protect_item_, other->use_protect_item_);
    std::swap(auto_fill_, other->auto_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyInjectSoulRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyInjectSoulRequest_descriptor_;
  metadata.reflection = BuddyInjectSoulRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyInjectSoulResponse::kBuddyIdFieldNumber;
const int BuddyInjectSoulResponse::kErrorCodeFieldNumber;
const int BuddyInjectSoulResponse::kInjectSucessFieldNumber;
const int BuddyInjectSoulResponse::kSoulStoneNumFieldNumber;
const int BuddyInjectSoulResponse::kProtectItemNumFieldNumber;
#endif  // !_MSC_VER

BuddyInjectSoulResponse::BuddyInjectSoulResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyInjectSoulResponse::InitAsDefaultInstance() {
}

BuddyInjectSoulResponse::BuddyInjectSoulResponse(const BuddyInjectSoulResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyInjectSoulResponse::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  inject_sucess_ = false;
  soul_stone_num_ = 0;
  protect_item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyInjectSoulResponse::~BuddyInjectSoulResponse() {
  SharedDtor();
}

void BuddyInjectSoulResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyInjectSoulResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyInjectSoulResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyInjectSoulResponse_descriptor_;
}

const BuddyInjectSoulResponse& BuddyInjectSoulResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyInjectSoulResponse* BuddyInjectSoulResponse::default_instance_ = NULL;

BuddyInjectSoulResponse* BuddyInjectSoulResponse::New() const {
  return new BuddyInjectSoulResponse;
}

void BuddyInjectSoulResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    error_code_ = 0;
    inject_sucess_ = false;
    soul_stone_num_ = 0;
    protect_item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyInjectSoulResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inject_sucess;
        break;
      }
      
      // required bool inject_sucess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inject_sucess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inject_sucess_)));
          set_has_inject_sucess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_soul_stone_num;
        break;
      }
      
      // optional int32 soul_stone_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_stone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_stone_num_)));
          set_has_soul_stone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_protect_item_num;
        break;
      }
      
      // optional int32 protect_item_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_item_num_)));
          set_has_protect_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyInjectSoulResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  // required bool inject_sucess = 3;
  if (has_inject_sucess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inject_sucess(), output);
  }
  
  // optional int32 soul_stone_num = 4;
  if (has_soul_stone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->soul_stone_num(), output);
  }
  
  // optional int32 protect_item_num = 5;
  if (has_protect_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->protect_item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyInjectSoulResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  // required bool inject_sucess = 3;
  if (has_inject_sucess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inject_sucess(), target);
  }
  
  // optional int32 soul_stone_num = 4;
  if (has_soul_stone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->soul_stone_num(), target);
  }
  
  // optional int32 protect_item_num = 5;
  if (has_protect_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->protect_item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyInjectSoulResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required bool inject_sucess = 3;
    if (has_inject_sucess()) {
      total_size += 1 + 1;
    }
    
    // optional int32 soul_stone_num = 4;
    if (has_soul_stone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_stone_num());
    }
    
    // optional int32 protect_item_num = 5;
    if (has_protect_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyInjectSoulResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyInjectSoulResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyInjectSoulResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyInjectSoulResponse::MergeFrom(const BuddyInjectSoulResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_inject_sucess()) {
      set_inject_sucess(from.inject_sucess());
    }
    if (from.has_soul_stone_num()) {
      set_soul_stone_num(from.soul_stone_num());
    }
    if (from.has_protect_item_num()) {
      set_protect_item_num(from.protect_item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyInjectSoulResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyInjectSoulResponse::CopyFrom(const BuddyInjectSoulResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyInjectSoulResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BuddyInjectSoulResponse::Swap(BuddyInjectSoulResponse* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(inject_sucess_, other->inject_sucess_);
    std::swap(soul_stone_num_, other->soul_stone_num_);
    std::swap(protect_item_num_, other->protect_item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyInjectSoulResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyInjectSoulResponse_descriptor_;
  metadata.reflection = BuddyInjectSoulResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BuddySpaceTimeStatusRequest::BuddySpaceTimeStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddySpaceTimeStatusRequest::InitAsDefaultInstance() {
}

BuddySpaceTimeStatusRequest::BuddySpaceTimeStatusRequest(const BuddySpaceTimeStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddySpaceTimeStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddySpaceTimeStatusRequest::~BuddySpaceTimeStatusRequest() {
  SharedDtor();
}

void BuddySpaceTimeStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddySpaceTimeStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddySpaceTimeStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddySpaceTimeStatusRequest_descriptor_;
}

const BuddySpaceTimeStatusRequest& BuddySpaceTimeStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddySpaceTimeStatusRequest* BuddySpaceTimeStatusRequest::default_instance_ = NULL;

BuddySpaceTimeStatusRequest* BuddySpaceTimeStatusRequest::New() const {
  return new BuddySpaceTimeStatusRequest;
}

void BuddySpaceTimeStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddySpaceTimeStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BuddySpaceTimeStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddySpaceTimeStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddySpaceTimeStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddySpaceTimeStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddySpaceTimeStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddySpaceTimeStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddySpaceTimeStatusRequest::MergeFrom(const BuddySpaceTimeStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddySpaceTimeStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddySpaceTimeStatusRequest::CopyFrom(const BuddySpaceTimeStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddySpaceTimeStatusRequest::IsInitialized() const {
  
  return true;
}

void BuddySpaceTimeStatusRequest::Swap(BuddySpaceTimeStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddySpaceTimeStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddySpaceTimeStatusRequest_descriptor_;
  metadata.reflection = BuddySpaceTimeStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddySpaceTimeStatus::kBuddyIdFieldNumber;
const int BuddySpaceTimeStatus::kSpacetimeLevelFieldNumber;
#endif  // !_MSC_VER

BuddySpaceTimeStatus::BuddySpaceTimeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddySpaceTimeStatus::InitAsDefaultInstance() {
}

BuddySpaceTimeStatus::BuddySpaceTimeStatus(const BuddySpaceTimeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddySpaceTimeStatus::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  spacetime_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddySpaceTimeStatus::~BuddySpaceTimeStatus() {
  SharedDtor();
}

void BuddySpaceTimeStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddySpaceTimeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddySpaceTimeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddySpaceTimeStatus_descriptor_;
}

const BuddySpaceTimeStatus& BuddySpaceTimeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddySpaceTimeStatus* BuddySpaceTimeStatus::default_instance_ = NULL;

BuddySpaceTimeStatus* BuddySpaceTimeStatus::New() const {
  return new BuddySpaceTimeStatus;
}

void BuddySpaceTimeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    spacetime_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddySpaceTimeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spacetime_level;
        break;
      }
      
      // required int32 spacetime_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spacetime_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spacetime_level_)));
          set_has_spacetime_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddySpaceTimeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // required int32 spacetime_level = 2;
  if (has_spacetime_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spacetime_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddySpaceTimeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // required int32 spacetime_level = 2;
  if (has_spacetime_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spacetime_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddySpaceTimeStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // required int32 spacetime_level = 2;
    if (has_spacetime_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spacetime_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddySpaceTimeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddySpaceTimeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddySpaceTimeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddySpaceTimeStatus::MergeFrom(const BuddySpaceTimeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_spacetime_level()) {
      set_spacetime_level(from.spacetime_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddySpaceTimeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddySpaceTimeStatus::CopyFrom(const BuddySpaceTimeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddySpaceTimeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuddySpaceTimeStatus::Swap(BuddySpaceTimeStatus* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(spacetime_level_, other->spacetime_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddySpaceTimeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddySpaceTimeStatus_descriptor_;
  metadata.reflection = BuddySpaceTimeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddySpaceTimeStatusResponse::kStatusFieldNumber;
const int BuddySpaceTimeStatusResponse::kSoulStoneNumFieldNumber;
const int BuddySpaceTimeStatusResponse::kProtectItemNumFieldNumber;
#endif  // !_MSC_VER

BuddySpaceTimeStatusResponse::BuddySpaceTimeStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddySpaceTimeStatusResponse::InitAsDefaultInstance() {
}

BuddySpaceTimeStatusResponse::BuddySpaceTimeStatusResponse(const BuddySpaceTimeStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddySpaceTimeStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  soul_stone_num_ = 0;
  protect_item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddySpaceTimeStatusResponse::~BuddySpaceTimeStatusResponse() {
  SharedDtor();
}

void BuddySpaceTimeStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddySpaceTimeStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddySpaceTimeStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddySpaceTimeStatusResponse_descriptor_;
}

const BuddySpaceTimeStatusResponse& BuddySpaceTimeStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddySpaceTimeStatusResponse* BuddySpaceTimeStatusResponse::default_instance_ = NULL;

BuddySpaceTimeStatusResponse* BuddySpaceTimeStatusResponse::New() const {
  return new BuddySpaceTimeStatusResponse;
}

void BuddySpaceTimeStatusResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    soul_stone_num_ = 0;
    protect_item_num_ = 0;
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddySpaceTimeStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.BuddySpaceTimeStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectTag(24)) goto parse_soul_stone_num;
        break;
      }
      
      // optional int32 soul_stone_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_stone_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_stone_num_)));
          set_has_soul_stone_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protect_item_num;
        break;
      }
      
      // optional int32 protect_item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protect_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protect_item_num_)));
          set_has_protect_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddySpaceTimeStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.BuddySpaceTimeStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  // optional int32 soul_stone_num = 3;
  if (has_soul_stone_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->soul_stone_num(), output);
  }
  
  // optional int32 protect_item_num = 4;
  if (has_protect_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->protect_item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddySpaceTimeStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.BuddySpaceTimeStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  // optional int32 soul_stone_num = 3;
  if (has_soul_stone_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->soul_stone_num(), target);
  }
  
  // optional int32 protect_item_num = 4;
  if (has_protect_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->protect_item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddySpaceTimeStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 soul_stone_num = 3;
    if (has_soul_stone_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_stone_num());
    }
    
    // optional int32 protect_item_num = 4;
    if (has_protect_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protect_item_num());
    }
    
  }
  // repeated .protocols.common.BuddySpaceTimeStatus status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddySpaceTimeStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddySpaceTimeStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddySpaceTimeStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddySpaceTimeStatusResponse::MergeFrom(const BuddySpaceTimeStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_soul_stone_num()) {
      set_soul_stone_num(from.soul_stone_num());
    }
    if (from.has_protect_item_num()) {
      set_protect_item_num(from.protect_item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddySpaceTimeStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddySpaceTimeStatusResponse::CopyFrom(const BuddySpaceTimeStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddySpaceTimeStatusResponse::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void BuddySpaceTimeStatusResponse::Swap(BuddySpaceTimeStatusResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(soul_stone_num_, other->soul_stone_num_);
    std::swap(protect_item_num_, other->protect_item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddySpaceTimeStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddySpaceTimeStatusResponse_descriptor_;
  metadata.reflection = BuddySpaceTimeStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyChanllengeSpaceTimeRequest::kBuddyIdFieldNumber;
const int BuddyChanllengeSpaceTimeRequest::kChallengeLevelFieldNumber;
#endif  // !_MSC_VER

BuddyChanllengeSpaceTimeRequest::BuddyChanllengeSpaceTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyChanllengeSpaceTimeRequest::InitAsDefaultInstance() {
}

BuddyChanllengeSpaceTimeRequest::BuddyChanllengeSpaceTimeRequest(const BuddyChanllengeSpaceTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyChanllengeSpaceTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  challenge_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyChanllengeSpaceTimeRequest::~BuddyChanllengeSpaceTimeRequest() {
  SharedDtor();
}

void BuddyChanllengeSpaceTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyChanllengeSpaceTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyChanllengeSpaceTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyChanllengeSpaceTimeRequest_descriptor_;
}

const BuddyChanllengeSpaceTimeRequest& BuddyChanllengeSpaceTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyChanllengeSpaceTimeRequest* BuddyChanllengeSpaceTimeRequest::default_instance_ = NULL;

BuddyChanllengeSpaceTimeRequest* BuddyChanllengeSpaceTimeRequest::New() const {
  return new BuddyChanllengeSpaceTimeRequest;
}

void BuddyChanllengeSpaceTimeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    challenge_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyChanllengeSpaceTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challenge_level;
        break;
      }
      
      // optional int32 challenge_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_level_)));
          set_has_challenge_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyChanllengeSpaceTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // optional int32 challenge_level = 2;
  if (has_challenge_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challenge_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyChanllengeSpaceTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // optional int32 challenge_level = 2;
  if (has_challenge_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challenge_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyChanllengeSpaceTimeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // optional int32 challenge_level = 2;
    if (has_challenge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyChanllengeSpaceTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyChanllengeSpaceTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyChanllengeSpaceTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyChanllengeSpaceTimeRequest::MergeFrom(const BuddyChanllengeSpaceTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_challenge_level()) {
      set_challenge_level(from.challenge_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyChanllengeSpaceTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyChanllengeSpaceTimeRequest::CopyFrom(const BuddyChanllengeSpaceTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyChanllengeSpaceTimeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuddyChanllengeSpaceTimeRequest::Swap(BuddyChanllengeSpaceTimeRequest* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(challenge_level_, other->challenge_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyChanllengeSpaceTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyChanllengeSpaceTimeRequest_descriptor_;
  metadata.reflection = BuddyChanllengeSpaceTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyChanllengeSpaceTimeResponse::kBuddyIdFieldNumber;
const int BuddyChanllengeSpaceTimeResponse::kChallengeLevelFieldNumber;
const int BuddyChanllengeSpaceTimeResponse::kSucessFieldNumber;
const int BuddyChanllengeSpaceTimeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

BuddyChanllengeSpaceTimeResponse::BuddyChanllengeSpaceTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyChanllengeSpaceTimeResponse::InitAsDefaultInstance() {
}

BuddyChanllengeSpaceTimeResponse::BuddyChanllengeSpaceTimeResponse(const BuddyChanllengeSpaceTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyChanllengeSpaceTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  challenge_level_ = 0;
  sucess_ = false;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyChanllengeSpaceTimeResponse::~BuddyChanllengeSpaceTimeResponse() {
  SharedDtor();
}

void BuddyChanllengeSpaceTimeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyChanllengeSpaceTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyChanllengeSpaceTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyChanllengeSpaceTimeResponse_descriptor_;
}

const BuddyChanllengeSpaceTimeResponse& BuddyChanllengeSpaceTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyChanllengeSpaceTimeResponse* BuddyChanllengeSpaceTimeResponse::default_instance_ = NULL;

BuddyChanllengeSpaceTimeResponse* BuddyChanllengeSpaceTimeResponse::New() const {
  return new BuddyChanllengeSpaceTimeResponse;
}

void BuddyChanllengeSpaceTimeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    challenge_level_ = 0;
    sucess_ = false;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyChanllengeSpaceTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challenge_level;
        break;
      }
      
      // optional int32 challenge_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_level_)));
          set_has_challenge_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sucess;
        break;
      }
      
      // required bool sucess = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sucess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sucess_)));
          set_has_sucess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyChanllengeSpaceTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // optional int32 challenge_level = 2;
  if (has_challenge_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challenge_level(), output);
  }
  
  // required bool sucess = 3;
  if (has_sucess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sucess(), output);
  }
  
  // required int32 error_code = 4;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyChanllengeSpaceTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // optional int32 challenge_level = 2;
  if (has_challenge_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challenge_level(), target);
  }
  
  // required bool sucess = 3;
  if (has_sucess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sucess(), target);
  }
  
  // required int32 error_code = 4;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyChanllengeSpaceTimeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // optional int32 challenge_level = 2;
    if (has_challenge_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_level());
    }
    
    // required bool sucess = 3;
    if (has_sucess()) {
      total_size += 1 + 1;
    }
    
    // required int32 error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyChanllengeSpaceTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyChanllengeSpaceTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyChanllengeSpaceTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyChanllengeSpaceTimeResponse::MergeFrom(const BuddyChanllengeSpaceTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_challenge_level()) {
      set_challenge_level(from.challenge_level());
    }
    if (from.has_sucess()) {
      set_sucess(from.sucess());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyChanllengeSpaceTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyChanllengeSpaceTimeResponse::CopyFrom(const BuddyChanllengeSpaceTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyChanllengeSpaceTimeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void BuddyChanllengeSpaceTimeResponse::Swap(BuddyChanllengeSpaceTimeResponse* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(challenge_level_, other->challenge_level_);
    std::swap(sucess_, other->sucess_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyChanllengeSpaceTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyChanllengeSpaceTimeResponse_descriptor_;
  metadata.reflection = BuddyChanllengeSpaceTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddySoulUpdateNotify::kBuddyIdFieldNumber;
const int BuddySoulUpdateNotify::kCurSoulFieldNumber;
const int BuddySoulUpdateNotify::kCurMaxSoulFieldNumber;
#endif  // !_MSC_VER

BuddySoulUpdateNotify::BuddySoulUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddySoulUpdateNotify::InitAsDefaultInstance() {
}

BuddySoulUpdateNotify::BuddySoulUpdateNotify(const BuddySoulUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddySoulUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  buddy_id_ = GOOGLE_LONGLONG(0);
  cur_soul_ = 0;
  cur_max_soul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddySoulUpdateNotify::~BuddySoulUpdateNotify() {
  SharedDtor();
}

void BuddySoulUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddySoulUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddySoulUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddySoulUpdateNotify_descriptor_;
}

const BuddySoulUpdateNotify& BuddySoulUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddySoulUpdateNotify* BuddySoulUpdateNotify::default_instance_ = NULL;

BuddySoulUpdateNotify* BuddySoulUpdateNotify::New() const {
  return new BuddySoulUpdateNotify;
}

void BuddySoulUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_id_ = GOOGLE_LONGLONG(0);
    cur_soul_ = 0;
    cur_max_soul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddySoulUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_id_)));
          set_has_buddy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_soul;
        break;
      }
      
      // required int32 cur_soul = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_soul_)));
          set_has_cur_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_max_soul;
        break;
      }
      
      // required int32 cur_max_soul = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_max_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_max_soul_)));
          set_has_cur_max_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddySoulUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_id(), output);
  }
  
  // required int32 cur_soul = 2;
  if (has_cur_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_soul(), output);
  }
  
  // required int32 cur_max_soul = 3;
  if (has_cur_max_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_max_soul(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddySoulUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_id = 1;
  if (has_buddy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_id(), target);
  }
  
  // required int32 cur_soul = 2;
  if (has_cur_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_soul(), target);
  }
  
  // required int32 cur_max_soul = 3;
  if (has_cur_max_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_max_soul(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddySoulUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_id = 1;
    if (has_buddy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_id());
    }
    
    // required int32 cur_soul = 2;
    if (has_cur_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_soul());
    }
    
    // required int32 cur_max_soul = 3;
    if (has_cur_max_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_max_soul());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddySoulUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddySoulUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddySoulUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddySoulUpdateNotify::MergeFrom(const BuddySoulUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_id()) {
      set_buddy_id(from.buddy_id());
    }
    if (from.has_cur_soul()) {
      set_cur_soul(from.cur_soul());
    }
    if (from.has_cur_max_soul()) {
      set_cur_max_soul(from.cur_max_soul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddySoulUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddySoulUpdateNotify::CopyFrom(const BuddySoulUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddySoulUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BuddySoulUpdateNotify::Swap(BuddySoulUpdateNotify* other) {
  if (other != this) {
    std::swap(buddy_id_, other->buddy_id_);
    std::swap(cur_soul_, other->cur_soul_);
    std::swap(cur_max_soul_, other->cur_max_soul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddySoulUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddySoulUpdateNotify_descriptor_;
  metadata.reflection = BuddySoulUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentShengxingOpenRequest::kNeedPushBuddyDetailListFieldNumber;
const int EquipmentShengxingOpenRequest::kNeedPushInventoryFieldNumber;
#endif  // !_MSC_VER

EquipmentShengxingOpenRequest::EquipmentShengxingOpenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentShengxingOpenRequest::InitAsDefaultInstance() {
}

EquipmentShengxingOpenRequest::EquipmentShengxingOpenRequest(const EquipmentShengxingOpenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentShengxingOpenRequest::SharedCtor() {
  _cached_size_ = 0;
  need_push_buddy_detail_list_ = false;
  need_push_inventory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentShengxingOpenRequest::~EquipmentShengxingOpenRequest() {
  SharedDtor();
}

void EquipmentShengxingOpenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentShengxingOpenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentShengxingOpenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentShengxingOpenRequest_descriptor_;
}

const EquipmentShengxingOpenRequest& EquipmentShengxingOpenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentShengxingOpenRequest* EquipmentShengxingOpenRequest::default_instance_ = NULL;

EquipmentShengxingOpenRequest* EquipmentShengxingOpenRequest::New() const {
  return new EquipmentShengxingOpenRequest;
}

void EquipmentShengxingOpenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    need_push_buddy_detail_list_ = false;
    need_push_inventory_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentShengxingOpenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool need_push_buddy_detail_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_push_buddy_detail_list_)));
          set_has_need_push_buddy_detail_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_push_inventory;
        break;
      }
      
      // optional bool need_push_inventory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_push_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_push_inventory_)));
          set_has_need_push_inventory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentShengxingOpenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool need_push_buddy_detail_list = 1;
  if (has_need_push_buddy_detail_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->need_push_buddy_detail_list(), output);
  }
  
  // optional bool need_push_inventory = 2;
  if (has_need_push_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->need_push_inventory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentShengxingOpenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool need_push_buddy_detail_list = 1;
  if (has_need_push_buddy_detail_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->need_push_buddy_detail_list(), target);
  }
  
  // optional bool need_push_inventory = 2;
  if (has_need_push_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->need_push_inventory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentShengxingOpenRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool need_push_buddy_detail_list = 1;
    if (has_need_push_buddy_detail_list()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_push_inventory = 2;
    if (has_need_push_inventory()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentShengxingOpenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentShengxingOpenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentShengxingOpenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentShengxingOpenRequest::MergeFrom(const EquipmentShengxingOpenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_need_push_buddy_detail_list()) {
      set_need_push_buddy_detail_list(from.need_push_buddy_detail_list());
    }
    if (from.has_need_push_inventory()) {
      set_need_push_inventory(from.need_push_inventory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentShengxingOpenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentShengxingOpenRequest::CopyFrom(const EquipmentShengxingOpenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentShengxingOpenRequest::IsInitialized() const {
  
  return true;
}

void EquipmentShengxingOpenRequest::Swap(EquipmentShengxingOpenRequest* other) {
  if (other != this) {
    std::swap(need_push_buddy_detail_list_, other->need_push_buddy_detail_list_);
    std::swap(need_push_inventory_, other->need_push_inventory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentShengxingOpenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentShengxingOpenRequest_descriptor_;
  metadata.reflection = EquipmentShengxingOpenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentShengxingOpenResponse::EquipmentShengxingOpenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentShengxingOpenResponse::InitAsDefaultInstance() {
}

EquipmentShengxingOpenResponse::EquipmentShengxingOpenResponse(const EquipmentShengxingOpenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentShengxingOpenResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentShengxingOpenResponse::~EquipmentShengxingOpenResponse() {
  SharedDtor();
}

void EquipmentShengxingOpenResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentShengxingOpenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentShengxingOpenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentShengxingOpenResponse_descriptor_;
}

const EquipmentShengxingOpenResponse& EquipmentShengxingOpenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentShengxingOpenResponse* EquipmentShengxingOpenResponse::default_instance_ = NULL;

EquipmentShengxingOpenResponse* EquipmentShengxingOpenResponse::New() const {
  return new EquipmentShengxingOpenResponse;
}

void EquipmentShengxingOpenResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentShengxingOpenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentShengxingOpenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentShengxingOpenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentShengxingOpenResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentShengxingOpenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentShengxingOpenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentShengxingOpenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentShengxingOpenResponse::MergeFrom(const EquipmentShengxingOpenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentShengxingOpenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentShengxingOpenResponse::CopyFrom(const EquipmentShengxingOpenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentShengxingOpenResponse::IsInitialized() const {
  
  return true;
}

void EquipmentShengxingOpenResponse::Swap(EquipmentShengxingOpenResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentShengxingOpenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentShengxingOpenResponse_descriptor_;
  metadata.reflection = EquipmentShengxingOpenResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentShengxingRequest::kItemIdFieldNumber;
const int EquipmentShengxingRequest::kAutoFillFieldNumber;
#endif  // !_MSC_VER

EquipmentShengxingRequest::EquipmentShengxingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentShengxingRequest::InitAsDefaultInstance() {
}

EquipmentShengxingRequest::EquipmentShengxingRequest(const EquipmentShengxingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentShengxingRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  auto_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentShengxingRequest::~EquipmentShengxingRequest() {
  SharedDtor();
}

void EquipmentShengxingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentShengxingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentShengxingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentShengxingRequest_descriptor_;
}

const EquipmentShengxingRequest& EquipmentShengxingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentShengxingRequest* EquipmentShengxingRequest::default_instance_ = NULL;

EquipmentShengxingRequest* EquipmentShengxingRequest::New() const {
  return new EquipmentShengxingRequest;
}

void EquipmentShengxingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    auto_fill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentShengxingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_fill;
        break;
      }
      
      // optional bool auto_fill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_fill_)));
          set_has_auto_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentShengxingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional bool auto_fill = 2;
  if (has_auto_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_fill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentShengxingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional bool auto_fill = 2;
  if (has_auto_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_fill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentShengxingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional bool auto_fill = 2;
    if (has_auto_fill()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentShengxingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentShengxingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentShengxingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentShengxingRequest::MergeFrom(const EquipmentShengxingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_auto_fill()) {
      set_auto_fill(from.auto_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentShengxingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentShengxingRequest::CopyFrom(const EquipmentShengxingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentShengxingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentShengxingRequest::Swap(EquipmentShengxingRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(auto_fill_, other->auto_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentShengxingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentShengxingRequest_descriptor_;
  metadata.reflection = EquipmentShengxingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentShengxingResponse::kItemIdFieldNumber;
const int EquipmentShengxingResponse::kErrorCodeFieldNumber;
const int EquipmentShengxingResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

EquipmentShengxingResponse::EquipmentShengxingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentShengxingResponse::InitAsDefaultInstance() {
}

EquipmentShengxingResponse::EquipmentShengxingResponse(const EquipmentShengxingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentShengxingResponse::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  error_code_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentShengxingResponse::~EquipmentShengxingResponse() {
  SharedDtor();
}

void EquipmentShengxingResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentShengxingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentShengxingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentShengxingResponse_descriptor_;
}

const EquipmentShengxingResponse& EquipmentShengxingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentShengxingResponse* EquipmentShengxingResponse::default_instance_ = NULL;

EquipmentShengxingResponse* EquipmentShengxingResponse::New() const {
  return new EquipmentShengxingResponse;
}

void EquipmentShengxingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    error_code_ = 0;
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentShengxingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }
      
      // required bool success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentShengxingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  // required bool success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentShengxingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  // required bool success = 3;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentShengxingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentShengxingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentShengxingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentShengxingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentShengxingResponse::MergeFrom(const EquipmentShengxingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentShengxingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentShengxingResponse::CopyFrom(const EquipmentShengxingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentShengxingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EquipmentShengxingResponse::Swap(EquipmentShengxingResponse* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentShengxingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentShengxingResponse_descriptor_;
  metadata.reflection = EquipmentShengxingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XilianData::kExtraAttrListFieldNumber;
#endif  // !_MSC_VER

XilianData::XilianData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XilianData::InitAsDefaultInstance() {
}

XilianData::XilianData(const XilianData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XilianData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XilianData::~XilianData() {
  SharedDtor();
}

void XilianData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XilianData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XilianData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XilianData_descriptor_;
}

const XilianData& XilianData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

XilianData* XilianData::default_instance_ = NULL;

XilianData* XilianData::New() const {
  return new XilianData;
}

void XilianData::Clear() {
  extra_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XilianData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.AttributeData extra_attr_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_extra_attr_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XilianData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.AttributeData extra_attr_list = 1;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->extra_attr_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XilianData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.AttributeData extra_attr_list = 1;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->extra_attr_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XilianData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.AttributeData extra_attr_list = 1;
  total_size += 1 * this->extra_attr_list_size();
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XilianData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XilianData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XilianData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XilianData::MergeFrom(const XilianData& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_attr_list_.MergeFrom(from.extra_attr_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XilianData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XilianData::CopyFrom(const XilianData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XilianData::IsInitialized() const {
  
  return true;
}

void XilianData::Swap(XilianData* other) {
  if (other != this) {
    extra_attr_list_.Swap(&other->extra_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XilianData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XilianData_descriptor_;
  metadata.reflection = XilianData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EquipmentXilianStatusRequest::EquipmentXilianStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentXilianStatusRequest::InitAsDefaultInstance() {
}

EquipmentXilianStatusRequest::EquipmentXilianStatusRequest(const EquipmentXilianStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentXilianStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentXilianStatusRequest::~EquipmentXilianStatusRequest() {
  SharedDtor();
}

void EquipmentXilianStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentXilianStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentXilianStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentXilianStatusRequest_descriptor_;
}

const EquipmentXilianStatusRequest& EquipmentXilianStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentXilianStatusRequest* EquipmentXilianStatusRequest::default_instance_ = NULL;

EquipmentXilianStatusRequest* EquipmentXilianStatusRequest::New() const {
  return new EquipmentXilianStatusRequest;
}

void EquipmentXilianStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentXilianStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EquipmentXilianStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentXilianStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentXilianStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentXilianStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentXilianStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentXilianStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentXilianStatusRequest::MergeFrom(const EquipmentXilianStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentXilianStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentXilianStatusRequest::CopyFrom(const EquipmentXilianStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentXilianStatusRequest::IsInitialized() const {
  
  return true;
}

void EquipmentXilianStatusRequest::Swap(EquipmentXilianStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentXilianStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentXilianStatusRequest_descriptor_;
  metadata.reflection = EquipmentXilianStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentXilianStatusResponse::kItemIdFieldNumber;
const int EquipmentXilianStatusResponse::kExtraAttrListFieldNumber;
#endif  // !_MSC_VER

EquipmentXilianStatusResponse::EquipmentXilianStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentXilianStatusResponse::InitAsDefaultInstance() {
  extra_attr_list_ = const_cast< ::protocols::common::XilianData*>(&::protocols::common::XilianData::default_instance());
}

EquipmentXilianStatusResponse::EquipmentXilianStatusResponse(const EquipmentXilianStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentXilianStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  extra_attr_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentXilianStatusResponse::~EquipmentXilianStatusResponse() {
  SharedDtor();
}

void EquipmentXilianStatusResponse::SharedDtor() {
  if (this != default_instance_) {
    delete extra_attr_list_;
  }
}

void EquipmentXilianStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentXilianStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentXilianStatusResponse_descriptor_;
}

const EquipmentXilianStatusResponse& EquipmentXilianStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentXilianStatusResponse* EquipmentXilianStatusResponse::default_instance_ = NULL;

EquipmentXilianStatusResponse* EquipmentXilianStatusResponse::New() const {
  return new EquipmentXilianStatusResponse;
}

void EquipmentXilianStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    if (has_extra_attr_list()) {
      if (extra_attr_list_ != NULL) extra_attr_list_->::protocols::common::XilianData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentXilianStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extra_attr_list;
        break;
      }
      
      // optional .protocols.common.XilianData extra_attr_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentXilianStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional .protocols.common.XilianData extra_attr_list = 2;
  if (has_extra_attr_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extra_attr_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentXilianStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional .protocols.common.XilianData extra_attr_list = 2;
  if (has_extra_attr_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extra_attr_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentXilianStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional .protocols.common.XilianData extra_attr_list = 2;
    if (has_extra_attr_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_attr_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentXilianStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentXilianStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentXilianStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentXilianStatusResponse::MergeFrom(const EquipmentXilianStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_extra_attr_list()) {
      mutable_extra_attr_list()->::protocols::common::XilianData::MergeFrom(from.extra_attr_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentXilianStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentXilianStatusResponse::CopyFrom(const EquipmentXilianStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentXilianStatusResponse::IsInitialized() const {
  
  return true;
}

void EquipmentXilianStatusResponse::Swap(EquipmentXilianStatusResponse* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(extra_attr_list_, other->extra_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentXilianStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentXilianStatusResponse_descriptor_;
  metadata.reflection = EquipmentXilianStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentXilianRequest::kItemIdFieldNumber;
const int EquipmentXilianRequest::kLockAttrIndexFieldNumber;
const int EquipmentXilianRequest::kAutoFillFieldNumber;
#endif  // !_MSC_VER

EquipmentXilianRequest::EquipmentXilianRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentXilianRequest::InitAsDefaultInstance() {
}

EquipmentXilianRequest::EquipmentXilianRequest(const EquipmentXilianRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentXilianRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  lock_attr_index_ = 0;
  auto_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentXilianRequest::~EquipmentXilianRequest() {
  SharedDtor();
}

void EquipmentXilianRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentXilianRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentXilianRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentXilianRequest_descriptor_;
}

const EquipmentXilianRequest& EquipmentXilianRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentXilianRequest* EquipmentXilianRequest::default_instance_ = NULL;

EquipmentXilianRequest* EquipmentXilianRequest::New() const {
  return new EquipmentXilianRequest;
}

void EquipmentXilianRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    lock_attr_index_ = 0;
    auto_fill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentXilianRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_attr_index;
        break;
      }
      
      // optional int32 lock_attr_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_attr_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_attr_index_)));
          set_has_lock_attr_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_fill;
        break;
      }
      
      // optional bool auto_fill = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_fill_)));
          set_has_auto_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentXilianRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional int32 lock_attr_index = 2;
  if (has_lock_attr_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lock_attr_index(), output);
  }
  
  // optional bool auto_fill = 3 [default = false];
  if (has_auto_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_fill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentXilianRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 lock_attr_index = 2;
  if (has_lock_attr_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lock_attr_index(), target);
  }
  
  // optional bool auto_fill = 3 [default = false];
  if (has_auto_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_fill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentXilianRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional int32 lock_attr_index = 2;
    if (has_lock_attr_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_attr_index());
    }
    
    // optional bool auto_fill = 3 [default = false];
    if (has_auto_fill()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentXilianRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentXilianRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentXilianRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentXilianRequest::MergeFrom(const EquipmentXilianRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_lock_attr_index()) {
      set_lock_attr_index(from.lock_attr_index());
    }
    if (from.has_auto_fill()) {
      set_auto_fill(from.auto_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentXilianRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentXilianRequest::CopyFrom(const EquipmentXilianRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentXilianRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentXilianRequest::Swap(EquipmentXilianRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(lock_attr_index_, other->lock_attr_index_);
    std::swap(auto_fill_, other->auto_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentXilianRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentXilianRequest_descriptor_;
  metadata.reflection = EquipmentXilianRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentXilianResponse::kItemIdFieldNumber;
const int EquipmentXilianResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EquipmentXilianResponse::EquipmentXilianResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentXilianResponse::InitAsDefaultInstance() {
}

EquipmentXilianResponse::EquipmentXilianResponse(const EquipmentXilianResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentXilianResponse::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentXilianResponse::~EquipmentXilianResponse() {
  SharedDtor();
}

void EquipmentXilianResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentXilianResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentXilianResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentXilianResponse_descriptor_;
}

const EquipmentXilianResponse& EquipmentXilianResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentXilianResponse* EquipmentXilianResponse::default_instance_ = NULL;

EquipmentXilianResponse* EquipmentXilianResponse::New() const {
  return new EquipmentXilianResponse;
}

void EquipmentXilianResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentXilianResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentXilianResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentXilianResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentXilianResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentXilianResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentXilianResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentXilianResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentXilianResponse::MergeFrom(const EquipmentXilianResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentXilianResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentXilianResponse::CopyFrom(const EquipmentXilianResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentXilianResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EquipmentXilianResponse::Swap(EquipmentXilianResponse* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentXilianResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentXilianResponse_descriptor_;
  metadata.reflection = EquipmentXilianResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentLockXilianAttrRequest::kItemIdFieldNumber;
const int EquipmentLockXilianAttrRequest::kLockAttrIndexFieldNumber;
#endif  // !_MSC_VER

EquipmentLockXilianAttrRequest::EquipmentLockXilianAttrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentLockXilianAttrRequest::InitAsDefaultInstance() {
}

EquipmentLockXilianAttrRequest::EquipmentLockXilianAttrRequest(const EquipmentLockXilianAttrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentLockXilianAttrRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  lock_attr_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentLockXilianAttrRequest::~EquipmentLockXilianAttrRequest() {
  SharedDtor();
}

void EquipmentLockXilianAttrRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentLockXilianAttrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentLockXilianAttrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentLockXilianAttrRequest_descriptor_;
}

const EquipmentLockXilianAttrRequest& EquipmentLockXilianAttrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentLockXilianAttrRequest* EquipmentLockXilianAttrRequest::default_instance_ = NULL;

EquipmentLockXilianAttrRequest* EquipmentLockXilianAttrRequest::New() const {
  return new EquipmentLockXilianAttrRequest;
}

void EquipmentLockXilianAttrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    lock_attr_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentLockXilianAttrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_attr_index;
        break;
      }
      
      // optional int32 lock_attr_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_attr_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_attr_index_)));
          set_has_lock_attr_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentLockXilianAttrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }
  
  // optional int32 lock_attr_index = 2;
  if (has_lock_attr_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lock_attr_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentLockXilianAttrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 lock_attr_index = 2;
  if (has_lock_attr_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lock_attr_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentLockXilianAttrRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }
    
    // optional int32 lock_attr_index = 2;
    if (has_lock_attr_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_attr_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentLockXilianAttrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentLockXilianAttrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentLockXilianAttrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentLockXilianAttrRequest::MergeFrom(const EquipmentLockXilianAttrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_lock_attr_index()) {
      set_lock_attr_index(from.lock_attr_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentLockXilianAttrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentLockXilianAttrRequest::CopyFrom(const EquipmentLockXilianAttrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentLockXilianAttrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentLockXilianAttrRequest::Swap(EquipmentLockXilianAttrRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(lock_attr_index_, other->lock_attr_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentLockXilianAttrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentLockXilianAttrRequest_descriptor_;
  metadata.reflection = EquipmentLockXilianAttrRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentLockXilianAttrResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EquipmentLockXilianAttrResponse::EquipmentLockXilianAttrResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentLockXilianAttrResponse::InitAsDefaultInstance() {
}

EquipmentLockXilianAttrResponse::EquipmentLockXilianAttrResponse(const EquipmentLockXilianAttrResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentLockXilianAttrResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentLockXilianAttrResponse::~EquipmentLockXilianAttrResponse() {
  SharedDtor();
}

void EquipmentLockXilianAttrResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentLockXilianAttrResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentLockXilianAttrResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentLockXilianAttrResponse_descriptor_;
}

const EquipmentLockXilianAttrResponse& EquipmentLockXilianAttrResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentLockXilianAttrResponse* EquipmentLockXilianAttrResponse::default_instance_ = NULL;

EquipmentLockXilianAttrResponse* EquipmentLockXilianAttrResponse::New() const {
  return new EquipmentLockXilianAttrResponse;
}

void EquipmentLockXilianAttrResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentLockXilianAttrResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentLockXilianAttrResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentLockXilianAttrResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentLockXilianAttrResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentLockXilianAttrResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentLockXilianAttrResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentLockXilianAttrResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentLockXilianAttrResponse::MergeFrom(const EquipmentLockXilianAttrResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentLockXilianAttrResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentLockXilianAttrResponse::CopyFrom(const EquipmentLockXilianAttrResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentLockXilianAttrResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentLockXilianAttrResponse::Swap(EquipmentLockXilianAttrResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentLockXilianAttrResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentLockXilianAttrResponse_descriptor_;
  metadata.reflection = EquipmentLockXilianAttrResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentInheritRequest::kInheritedEquipIdFieldNumber;
const int EquipmentInheritRequest::kInheritEquipIdFieldNumber;
const int EquipmentInheritRequest::kAutoFillFieldNumber;
#endif  // !_MSC_VER

EquipmentInheritRequest::EquipmentInheritRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentInheritRequest::InitAsDefaultInstance() {
}

EquipmentInheritRequest::EquipmentInheritRequest(const EquipmentInheritRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentInheritRequest::SharedCtor() {
  _cached_size_ = 0;
  inherited_equip_id_ = GOOGLE_ULONGLONG(0);
  inherit_equip_id_ = GOOGLE_ULONGLONG(0);
  auto_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentInheritRequest::~EquipmentInheritRequest() {
  SharedDtor();
}

void EquipmentInheritRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentInheritRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentInheritRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInheritRequest_descriptor_;
}

const EquipmentInheritRequest& EquipmentInheritRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentInheritRequest* EquipmentInheritRequest::default_instance_ = NULL;

EquipmentInheritRequest* EquipmentInheritRequest::New() const {
  return new EquipmentInheritRequest;
}

void EquipmentInheritRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inherited_equip_id_ = GOOGLE_ULONGLONG(0);
    inherit_equip_id_ = GOOGLE_ULONGLONG(0);
    auto_fill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentInheritRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 inherited_equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inherited_equip_id_)));
          set_has_inherited_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inherit_equip_id;
        break;
      }
      
      // required uint64 inherit_equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inherit_equip_id_)));
          set_has_inherit_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_fill;
        break;
      }
      
      // required bool auto_fill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_fill_)));
          set_has_auto_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentInheritRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 inherited_equip_id = 1;
  if (has_inherited_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inherited_equip_id(), output);
  }
  
  // required uint64 inherit_equip_id = 2;
  if (has_inherit_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->inherit_equip_id(), output);
  }
  
  // required bool auto_fill = 3;
  if (has_auto_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_fill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentInheritRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 inherited_equip_id = 1;
  if (has_inherited_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->inherited_equip_id(), target);
  }
  
  // required uint64 inherit_equip_id = 2;
  if (has_inherit_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->inherit_equip_id(), target);
  }
  
  // required bool auto_fill = 3;
  if (has_auto_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_fill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentInheritRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 inherited_equip_id = 1;
    if (has_inherited_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inherited_equip_id());
    }
    
    // required uint64 inherit_equip_id = 2;
    if (has_inherit_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inherit_equip_id());
    }
    
    // required bool auto_fill = 3;
    if (has_auto_fill()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentInheritRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentInheritRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentInheritRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentInheritRequest::MergeFrom(const EquipmentInheritRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inherited_equip_id()) {
      set_inherited_equip_id(from.inherited_equip_id());
    }
    if (from.has_inherit_equip_id()) {
      set_inherit_equip_id(from.inherit_equip_id());
    }
    if (from.has_auto_fill()) {
      set_auto_fill(from.auto_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentInheritRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentInheritRequest::CopyFrom(const EquipmentInheritRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInheritRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EquipmentInheritRequest::Swap(EquipmentInheritRequest* other) {
  if (other != this) {
    std::swap(inherited_equip_id_, other->inherited_equip_id_);
    std::swap(inherit_equip_id_, other->inherit_equip_id_);
    std::swap(auto_fill_, other->auto_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentInheritRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentInheritRequest_descriptor_;
  metadata.reflection = EquipmentInheritRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentInheritResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EquipmentInheritResponse::EquipmentInheritResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentInheritResponse::InitAsDefaultInstance() {
}

EquipmentInheritResponse::EquipmentInheritResponse(const EquipmentInheritResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentInheritResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentInheritResponse::~EquipmentInheritResponse() {
  SharedDtor();
}

void EquipmentInheritResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentInheritResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentInheritResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInheritResponse_descriptor_;
}

const EquipmentInheritResponse& EquipmentInheritResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentInheritResponse* EquipmentInheritResponse::default_instance_ = NULL;

EquipmentInheritResponse* EquipmentInheritResponse::New() const {
  return new EquipmentInheritResponse;
}

void EquipmentInheritResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentInheritResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentInheritResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentInheritResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentInheritResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentInheritResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentInheritResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentInheritResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentInheritResponse::MergeFrom(const EquipmentInheritResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentInheritResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentInheritResponse::CopyFrom(const EquipmentInheritResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInheritResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentInheritResponse::Swap(EquipmentInheritResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentInheritResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentInheritResponse_descriptor_;
  metadata.reflection = EquipmentInheritResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRecycleRequest::kEquipIdFieldNumber;
#endif  // !_MSC_VER

EquipmentRecycleRequest::EquipmentRecycleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRecycleRequest::InitAsDefaultInstance() {
}

EquipmentRecycleRequest::EquipmentRecycleRequest(const EquipmentRecycleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRecycleRequest::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRecycleRequest::~EquipmentRecycleRequest() {
  SharedDtor();
}

void EquipmentRecycleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRecycleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRecycleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRecycleRequest_descriptor_;
}

const EquipmentRecycleRequest& EquipmentRecycleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentRecycleRequest* EquipmentRecycleRequest::default_instance_ = NULL;

EquipmentRecycleRequest* EquipmentRecycleRequest::New() const {
  return new EquipmentRecycleRequest;
}

void EquipmentRecycleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRecycleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRecycleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRecycleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRecycleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRecycleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRecycleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRecycleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRecycleRequest::MergeFrom(const EquipmentRecycleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRecycleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRecycleRequest::CopyFrom(const EquipmentRecycleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRecycleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentRecycleRequest::Swap(EquipmentRecycleRequest* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRecycleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRecycleRequest_descriptor_;
  metadata.reflection = EquipmentRecycleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentRecycleResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EquipmentRecycleResponse::EquipmentRecycleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentRecycleResponse::InitAsDefaultInstance() {
}

EquipmentRecycleResponse::EquipmentRecycleResponse(const EquipmentRecycleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentRecycleResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentRecycleResponse::~EquipmentRecycleResponse() {
  SharedDtor();
}

void EquipmentRecycleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentRecycleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentRecycleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentRecycleResponse_descriptor_;
}

const EquipmentRecycleResponse& EquipmentRecycleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipmentRecycleResponse* EquipmentRecycleResponse::default_instance_ = NULL;

EquipmentRecycleResponse* EquipmentRecycleResponse::New() const {
  return new EquipmentRecycleResponse;
}

void EquipmentRecycleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentRecycleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentRecycleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentRecycleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentRecycleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentRecycleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentRecycleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentRecycleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentRecycleResponse::MergeFrom(const EquipmentRecycleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentRecycleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentRecycleResponse::CopyFrom(const EquipmentRecycleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentRecycleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentRecycleResponse::Swap(EquipmentRecycleResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentRecycleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentRecycleResponse_descriptor_;
  metadata.reflection = EquipmentRecycleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyDetailUpdateNotify::kBuddyFieldNumber;
#endif  // !_MSC_VER

BuddyDetailUpdateNotify::BuddyDetailUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyDetailUpdateNotify::InitAsDefaultInstance() {
}

BuddyDetailUpdateNotify::BuddyDetailUpdateNotify(const BuddyDetailUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyDetailUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyDetailUpdateNotify::~BuddyDetailUpdateNotify() {
  SharedDtor();
}

void BuddyDetailUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuddyDetailUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyDetailUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyDetailUpdateNotify_descriptor_;
}

const BuddyDetailUpdateNotify& BuddyDetailUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BuddyDetailUpdateNotify* BuddyDetailUpdateNotify::default_instance_ = NULL;

BuddyDetailUpdateNotify* BuddyDetailUpdateNotify::New() const {
  return new BuddyDetailUpdateNotify;
}

void BuddyDetailUpdateNotify::Clear() {
  buddy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyDetailUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.BuddyDetailInfo buddy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buddy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buddy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buddy;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyDetailUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.BuddyDetailInfo buddy = 1;
  for (int i = 0; i < this->buddy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buddy(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyDetailUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.BuddyDetailInfo buddy = 1;
  for (int i = 0; i < this->buddy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buddy(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyDetailUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.BuddyDetailInfo buddy = 1;
  total_size += 1 * this->buddy_size();
  for (int i = 0; i < this->buddy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buddy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyDetailUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyDetailUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyDetailUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyDetailUpdateNotify::MergeFrom(const BuddyDetailUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  buddy_.MergeFrom(from.buddy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyDetailUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyDetailUpdateNotify::CopyFrom(const BuddyDetailUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyDetailUpdateNotify::IsInitialized() const {
  
  for (int i = 0; i < buddy_size(); i++) {
    if (!this->buddy(i).IsInitialized()) return false;
  }
  return true;
}

void BuddyDetailUpdateNotify::Swap(BuddyDetailUpdateNotify* other) {
  if (other != this) {
    buddy_.Swap(&other->buddy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyDetailUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyDetailUpdateNotify_descriptor_;
  metadata.reflection = BuddyDetailUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItemListNotify::kBagItemsFieldNumber;
#endif  // !_MSC_VER

BagItemListNotify::BagItemListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemListNotify::InitAsDefaultInstance() {
}

BagItemListNotify::BagItemListNotify(const BagItemListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemListNotify::~BagItemListNotify() {
  SharedDtor();
}

void BagItemListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemListNotify_descriptor_;
}

const BagItemListNotify& BagItemListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

BagItemListNotify* BagItemListNotify::default_instance_ = NULL;

BagItemListNotify* BagItemListNotify::New() const {
  return new BagItemListNotify;
}

void BagItemListNotify::Clear() {
  bag_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.ItemInfo bag_items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bag_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bag_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.ItemInfo bag_items = 1;
  for (int i = 0; i < this->bag_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bag_items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.ItemInfo bag_items = 1;
  for (int i = 0; i < this->bag_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bag_items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.ItemInfo bag_items = 1;
  total_size += 1 * this->bag_items_size();
  for (int i = 0; i < this->bag_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bag_items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemListNotify::MergeFrom(const BagItemListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_items_.MergeFrom(from.bag_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemListNotify::CopyFrom(const BagItemListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemListNotify::IsInitialized() const {
  
  for (int i = 0; i < bag_items_size(); i++) {
    if (!this->bag_items(i).IsInitialized()) return false;
  }
  return true;
}

void BagItemListNotify::Swap(BagItemListNotify* other) {
  if (other != this) {
    bag_items_.Swap(&other->bag_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemListNotify_descriptor_;
  metadata.reflection = BagItemListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUpdateNotify::kEquipsFieldNumber;
#endif  // !_MSC_VER

EquipUpdateNotify::EquipUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipUpdateNotify::InitAsDefaultInstance() {
}

EquipUpdateNotify::EquipUpdateNotify(const EquipUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUpdateNotify::~EquipUpdateNotify() {
  SharedDtor();
}

void EquipUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUpdateNotify_descriptor_;
}

const EquipUpdateNotify& EquipUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

EquipUpdateNotify* EquipUpdateNotify::default_instance_ = NULL;

EquipUpdateNotify* EquipUpdateNotify::New() const {
  return new EquipUpdateNotify;
}

void EquipUpdateNotify::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.EquipDetail equips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.EquipDetail equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.EquipDetail equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.EquipDetail equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUpdateNotify::MergeFrom(const EquipUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUpdateNotify::CopyFrom(const EquipUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUpdateNotify::IsInitialized() const {
  
  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void EquipUpdateNotify::Swap(EquipUpdateNotify* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUpdateNotify_descriptor_;
  metadata.reflection = EquipUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleCoolDownRequest::RoleCoolDownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownRequest::InitAsDefaultInstance() {
}

RoleCoolDownRequest::RoleCoolDownRequest(const RoleCoolDownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownRequest::~RoleCoolDownRequest() {
  SharedDtor();
}

void RoleCoolDownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCoolDownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownRequest_descriptor_;
}

const RoleCoolDownRequest& RoleCoolDownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleCoolDownRequest* RoleCoolDownRequest::default_instance_ = NULL;

RoleCoolDownRequest* RoleCoolDownRequest::New() const {
  return new RoleCoolDownRequest;
}

void RoleCoolDownRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleCoolDownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownRequest::MergeFrom(const RoleCoolDownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownRequest::CopyFrom(const RoleCoolDownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownRequest::IsInitialized() const {
  
  return true;
}

void RoleCoolDownRequest::Swap(RoleCoolDownRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownRequest_descriptor_;
  metadata.reflection = RoleCoolDownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCoolDownNotify::kCoolDownFieldNumber;
#endif  // !_MSC_VER

RoleCoolDownNotify::RoleCoolDownNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownNotify::InitAsDefaultInstance() {
  cool_down_ = const_cast< ::protocols::common::RoleCoolDownPb*>(&::protocols::common::RoleCoolDownPb::default_instance());
}

RoleCoolDownNotify::RoleCoolDownNotify(const RoleCoolDownNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownNotify::SharedCtor() {
  _cached_size_ = 0;
  cool_down_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownNotify::~RoleCoolDownNotify() {
  SharedDtor();
}

void RoleCoolDownNotify::SharedDtor() {
  if (this != default_instance_) {
    delete cool_down_;
  }
}

void RoleCoolDownNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownNotify_descriptor_;
}

const RoleCoolDownNotify& RoleCoolDownNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleCoolDownNotify* RoleCoolDownNotify::default_instance_ = NULL;

RoleCoolDownNotify* RoleCoolDownNotify::New() const {
  return new RoleCoolDownNotify;
}

void RoleCoolDownNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cool_down()) {
      if (cool_down_ != NULL) cool_down_->::protocols::common::RoleCoolDownPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.RoleCoolDownPb cool_down = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cool_down()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCoolDownNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cool_down(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cool_down(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.RoleCoolDownPb cool_down = 1;
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cool_down());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownNotify::MergeFrom(const RoleCoolDownNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cool_down()) {
      mutable_cool_down()->::protocols::common::RoleCoolDownPb::MergeFrom(from.cool_down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownNotify::CopyFrom(const RoleCoolDownNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownNotify::IsInitialized() const {
  
  if (has_cool_down()) {
    if (!this->cool_down().IsInitialized()) return false;
  }
  return true;
}

void RoleCoolDownNotify::Swap(RoleCoolDownNotify* other) {
  if (other != this) {
    std::swap(cool_down_, other->cool_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownNotify_descriptor_;
  metadata.reflection = RoleCoolDownNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCoolDownClearRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

RoleCoolDownClearRequest::RoleCoolDownClearRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownClearRequest::InitAsDefaultInstance() {
}

RoleCoolDownClearRequest::RoleCoolDownClearRequest(const RoleCoolDownClearRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownClearRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownClearRequest::~RoleCoolDownClearRequest() {
  SharedDtor();
}

void RoleCoolDownClearRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCoolDownClearRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownClearRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownClearRequest_descriptor_;
}

const RoleCoolDownClearRequest& RoleCoolDownClearRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleCoolDownClearRequest* RoleCoolDownClearRequest::default_instance_ = NULL;

RoleCoolDownClearRequest* RoleCoolDownClearRequest::New() const {
  return new RoleCoolDownClearRequest;
}

void RoleCoolDownClearRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownClearRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.RoleLimitType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::RoleLimitType_IsValid(value)) {
            set_type(static_cast< protocols::common::RoleLimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCoolDownClearRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.RoleLimitType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownClearRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.RoleLimitType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownClearRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.RoleLimitType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownClearRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownClearRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownClearRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownClearRequest::MergeFrom(const RoleCoolDownClearRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownClearRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownClearRequest::CopyFrom(const RoleCoolDownClearRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownClearRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RoleCoolDownClearRequest::Swap(RoleCoolDownClearRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownClearRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownClearRequest_descriptor_;
  metadata.reflection = RoleCoolDownClearRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCoolDownClearResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

RoleCoolDownClearResponse::RoleCoolDownClearResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownClearResponse::InitAsDefaultInstance() {
}

RoleCoolDownClearResponse::RoleCoolDownClearResponse(const RoleCoolDownClearResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownClearResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownClearResponse::~RoleCoolDownClearResponse() {
  SharedDtor();
}

void RoleCoolDownClearResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCoolDownClearResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownClearResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownClearResponse_descriptor_;
}

const RoleCoolDownClearResponse& RoleCoolDownClearResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleCoolDownClearResponse* RoleCoolDownClearResponse::default_instance_ = NULL;

RoleCoolDownClearResponse* RoleCoolDownClearResponse::New() const {
  return new RoleCoolDownClearResponse;
}

void RoleCoolDownClearResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownClearResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCoolDownClearResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownClearResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownClearResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownClearResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownClearResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownClearResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownClearResponse::MergeFrom(const RoleCoolDownClearResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownClearResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownClearResponse::CopyFrom(const RoleCoolDownClearResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownClearResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RoleCoolDownClearResponse::Swap(RoleCoolDownClearResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownClearResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownClearResponse_descriptor_;
  metadata.reflection = RoleCoolDownClearResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleDailyLimitRequest::RoleDailyLimitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyLimitRequest::InitAsDefaultInstance() {
}

RoleDailyLimitRequest::RoleDailyLimitRequest(const RoleDailyLimitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyLimitRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyLimitRequest::~RoleDailyLimitRequest() {
  SharedDtor();
}

void RoleDailyLimitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDailyLimitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyLimitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyLimitRequest_descriptor_;
}

const RoleDailyLimitRequest& RoleDailyLimitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleDailyLimitRequest* RoleDailyLimitRequest::default_instance_ = NULL;

RoleDailyLimitRequest* RoleDailyLimitRequest::New() const {
  return new RoleDailyLimitRequest;
}

void RoleDailyLimitRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyLimitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleDailyLimitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyLimitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyLimitRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyLimitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyLimitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyLimitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyLimitRequest::MergeFrom(const RoleDailyLimitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyLimitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyLimitRequest::CopyFrom(const RoleDailyLimitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyLimitRequest::IsInitialized() const {
  
  return true;
}

void RoleDailyLimitRequest::Swap(RoleDailyLimitRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyLimitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyLimitRequest_descriptor_;
  metadata.reflection = RoleDailyLimitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDailyLimitUpdateNotify::kDailyLimitFieldNumber;
#endif  // !_MSC_VER

RoleDailyLimitUpdateNotify::RoleDailyLimitUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyLimitUpdateNotify::InitAsDefaultInstance() {
  daily_limit_ = const_cast< ::protocols::common::RoleDailyLimitPb*>(&::protocols::common::RoleDailyLimitPb::default_instance());
}

RoleDailyLimitUpdateNotify::RoleDailyLimitUpdateNotify(const RoleDailyLimitUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyLimitUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  daily_limit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyLimitUpdateNotify::~RoleDailyLimitUpdateNotify() {
  SharedDtor();
}

void RoleDailyLimitUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete daily_limit_;
  }
}

void RoleDailyLimitUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyLimitUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyLimitUpdateNotify_descriptor_;
}

const RoleDailyLimitUpdateNotify& RoleDailyLimitUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoleDailyLimitUpdateNotify* RoleDailyLimitUpdateNotify::default_instance_ = NULL;

RoleDailyLimitUpdateNotify* RoleDailyLimitUpdateNotify::New() const {
  return new RoleDailyLimitUpdateNotify;
}

void RoleDailyLimitUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_daily_limit()) {
      if (daily_limit_ != NULL) daily_limit_->::protocols::common::RoleDailyLimitPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyLimitUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.RoleDailyLimitPb daily_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDailyLimitUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.RoleDailyLimitPb daily_limit = 1;
  if (has_daily_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyLimitUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.RoleDailyLimitPb daily_limit = 1;
  if (has_daily_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyLimitUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.RoleDailyLimitPb daily_limit = 1;
    if (has_daily_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyLimitUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyLimitUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyLimitUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyLimitUpdateNotify::MergeFrom(const RoleDailyLimitUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_limit()) {
      mutable_daily_limit()->::protocols::common::RoleDailyLimitPb::MergeFrom(from.daily_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyLimitUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyLimitUpdateNotify::CopyFrom(const RoleDailyLimitUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyLimitUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_daily_limit()) {
    if (!this->daily_limit().IsInitialized()) return false;
  }
  return true;
}

void RoleDailyLimitUpdateNotify::Swap(RoleDailyLimitUpdateNotify* other) {
  if (other != this) {
    std::swap(daily_limit_, other->daily_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyLimitUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyLimitUpdateNotify_descriptor_;
  metadata.reflection = RoleDailyLimitUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseLimitCountRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

PurchaseLimitCountRequest::PurchaseLimitCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PurchaseLimitCountRequest::InitAsDefaultInstance() {
}

PurchaseLimitCountRequest::PurchaseLimitCountRequest(const PurchaseLimitCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PurchaseLimitCountRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseLimitCountRequest::~PurchaseLimitCountRequest() {
  SharedDtor();
}

void PurchaseLimitCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurchaseLimitCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseLimitCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseLimitCountRequest_descriptor_;
}

const PurchaseLimitCountRequest& PurchaseLimitCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PurchaseLimitCountRequest* PurchaseLimitCountRequest::default_instance_ = NULL;

PurchaseLimitCountRequest* PurchaseLimitCountRequest::New() const {
  return new PurchaseLimitCountRequest;
}

void PurchaseLimitCountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseLimitCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.RoleLimitType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::RoleLimitType_IsValid(value)) {
            set_type(static_cast< protocols::common::RoleLimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PurchaseLimitCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.RoleLimitType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PurchaseLimitCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.RoleLimitType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PurchaseLimitCountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.RoleLimitType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseLimitCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseLimitCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseLimitCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseLimitCountRequest::MergeFrom(const PurchaseLimitCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseLimitCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseLimitCountRequest::CopyFrom(const PurchaseLimitCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseLimitCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PurchaseLimitCountRequest::Swap(PurchaseLimitCountRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseLimitCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseLimitCountRequest_descriptor_;
  metadata.reflection = PurchaseLimitCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurchaseLimitCountResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PurchaseLimitCountResponse::PurchaseLimitCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PurchaseLimitCountResponse::InitAsDefaultInstance() {
}

PurchaseLimitCountResponse::PurchaseLimitCountResponse(const PurchaseLimitCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PurchaseLimitCountResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurchaseLimitCountResponse::~PurchaseLimitCountResponse() {
  SharedDtor();
}

void PurchaseLimitCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurchaseLimitCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurchaseLimitCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurchaseLimitCountResponse_descriptor_;
}

const PurchaseLimitCountResponse& PurchaseLimitCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PurchaseLimitCountResponse* PurchaseLimitCountResponse::default_instance_ = NULL;

PurchaseLimitCountResponse* PurchaseLimitCountResponse::New() const {
  return new PurchaseLimitCountResponse;
}

void PurchaseLimitCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PurchaseLimitCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PurchaseLimitCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PurchaseLimitCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PurchaseLimitCountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurchaseLimitCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurchaseLimitCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurchaseLimitCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PurchaseLimitCountResponse::MergeFrom(const PurchaseLimitCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PurchaseLimitCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurchaseLimitCountResponse::CopyFrom(const PurchaseLimitCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurchaseLimitCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PurchaseLimitCountResponse::Swap(PurchaseLimitCountResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PurchaseLimitCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurchaseLimitCountResponse_descriptor_;
  metadata.reflection = PurchaseLimitCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyQuestListRequest::DailyQuestListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuestListRequest::InitAsDefaultInstance() {
}

DailyQuestListRequest::DailyQuestListRequest(const DailyQuestListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuestListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuestListRequest::~DailyQuestListRequest() {
  SharedDtor();
}

void DailyQuestListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuestListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuestListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuestListRequest_descriptor_;
}

const DailyQuestListRequest& DailyQuestListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DailyQuestListRequest* DailyQuestListRequest::default_instance_ = NULL;

DailyQuestListRequest* DailyQuestListRequest::New() const {
  return new DailyQuestListRequest;
}

void DailyQuestListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuestListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyQuestListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuestListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuestListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuestListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuestListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuestListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuestListRequest::MergeFrom(const DailyQuestListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuestListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuestListRequest::CopyFrom(const DailyQuestListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuestListRequest::IsInitialized() const {
  
  return true;
}

void DailyQuestListRequest::Swap(DailyQuestListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuestListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuestListRequest_descriptor_;
  metadata.reflection = DailyQuestListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuestListNotify::kDailyQuestFieldNumber;
#endif  // !_MSC_VER

DailyQuestListNotify::DailyQuestListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuestListNotify::InitAsDefaultInstance() {
}

DailyQuestListNotify::DailyQuestListNotify(const DailyQuestListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuestListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuestListNotify::~DailyQuestListNotify() {
  SharedDtor();
}

void DailyQuestListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuestListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuestListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuestListNotify_descriptor_;
}

const DailyQuestListNotify& DailyQuestListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DailyQuestListNotify* DailyQuestListNotify::default_instance_ = NULL;

DailyQuestListNotify* DailyQuestListNotify::New() const {
  return new DailyQuestListNotify;
}

void DailyQuestListNotify::Clear() {
  daily_quest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuestListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.DailyQuest daily_quest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_quest;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuestListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.DailyQuest daily_quest = 1;
  for (int i = 0; i < this->daily_quest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_quest(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuestListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.DailyQuest daily_quest = 1;
  for (int i = 0; i < this->daily_quest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_quest(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuestListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.DailyQuest daily_quest = 1;
  total_size += 1 * this->daily_quest_size();
  for (int i = 0; i < this->daily_quest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_quest(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuestListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuestListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuestListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuestListNotify::MergeFrom(const DailyQuestListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_quest_.MergeFrom(from.daily_quest_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuestListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuestListNotify::CopyFrom(const DailyQuestListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuestListNotify::IsInitialized() const {
  
  for (int i = 0; i < daily_quest_size(); i++) {
    if (!this->daily_quest(i).IsInitialized()) return false;
  }
  return true;
}

void DailyQuestListNotify::Swap(DailyQuestListNotify* other) {
  if (other != this) {
    daily_quest_.Swap(&other->daily_quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuestListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuestListNotify_descriptor_;
  metadata.reflection = DailyQuestListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshDailyQuestRequest::kUseYuanbaoFieldNumber;
#endif  // !_MSC_VER

RefreshDailyQuestRequest::RefreshDailyQuestRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshDailyQuestRequest::InitAsDefaultInstance() {
}

RefreshDailyQuestRequest::RefreshDailyQuestRequest(const RefreshDailyQuestRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshDailyQuestRequest::SharedCtor() {
  _cached_size_ = 0;
  use_yuanbao_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshDailyQuestRequest::~RefreshDailyQuestRequest() {
  SharedDtor();
}

void RefreshDailyQuestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshDailyQuestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshDailyQuestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshDailyQuestRequest_descriptor_;
}

const RefreshDailyQuestRequest& RefreshDailyQuestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RefreshDailyQuestRequest* RefreshDailyQuestRequest::default_instance_ = NULL;

RefreshDailyQuestRequest* RefreshDailyQuestRequest::New() const {
  return new RefreshDailyQuestRequest;
}

void RefreshDailyQuestRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    use_yuanbao_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshDailyQuestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_yuanbao = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_yuanbao_)));
          set_has_use_yuanbao();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshDailyQuestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool use_yuanbao = 1;
  if (has_use_yuanbao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_yuanbao(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshDailyQuestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool use_yuanbao = 1;
  if (has_use_yuanbao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_yuanbao(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshDailyQuestRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool use_yuanbao = 1;
    if (has_use_yuanbao()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshDailyQuestRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshDailyQuestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshDailyQuestRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshDailyQuestRequest::MergeFrom(const RefreshDailyQuestRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_yuanbao()) {
      set_use_yuanbao(from.use_yuanbao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshDailyQuestRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshDailyQuestRequest::CopyFrom(const RefreshDailyQuestRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshDailyQuestRequest::IsInitialized() const {
  
  return true;
}

void RefreshDailyQuestRequest::Swap(RefreshDailyQuestRequest* other) {
  if (other != this) {
    std::swap(use_yuanbao_, other->use_yuanbao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshDailyQuestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshDailyQuestRequest_descriptor_;
  metadata.reflection = RefreshDailyQuestRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshDailyQuestResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

RefreshDailyQuestResponse::RefreshDailyQuestResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshDailyQuestResponse::InitAsDefaultInstance() {
}

RefreshDailyQuestResponse::RefreshDailyQuestResponse(const RefreshDailyQuestResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshDailyQuestResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshDailyQuestResponse::~RefreshDailyQuestResponse() {
  SharedDtor();
}

void RefreshDailyQuestResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshDailyQuestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshDailyQuestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshDailyQuestResponse_descriptor_;
}

const RefreshDailyQuestResponse& RefreshDailyQuestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RefreshDailyQuestResponse* RefreshDailyQuestResponse::default_instance_ = NULL;

RefreshDailyQuestResponse* RefreshDailyQuestResponse::New() const {
  return new RefreshDailyQuestResponse;
}

void RefreshDailyQuestResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshDailyQuestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshDailyQuestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshDailyQuestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshDailyQuestResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshDailyQuestResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshDailyQuestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshDailyQuestResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshDailyQuestResponse::MergeFrom(const RefreshDailyQuestResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshDailyQuestResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshDailyQuestResponse::CopyFrom(const RefreshDailyQuestResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshDailyQuestResponse::IsInitialized() const {
  
  return true;
}

void RefreshDailyQuestResponse::Swap(RefreshDailyQuestResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshDailyQuestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshDailyQuestResponse_descriptor_;
  metadata.reflection = RefreshDailyQuestResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeCodeRequest::kCodeFieldNumber;
#endif  // !_MSC_VER

ExchangeCodeRequest::ExchangeCodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeCodeRequest::InitAsDefaultInstance() {
}

ExchangeCodeRequest::ExchangeCodeRequest(const ExchangeCodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeCodeRequest::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeCodeRequest::~ExchangeCodeRequest() {
  SharedDtor();
}

void ExchangeCodeRequest::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeCodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeCodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeCodeRequest_descriptor_;
}

const ExchangeCodeRequest& ExchangeCodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ExchangeCodeRequest* ExchangeCodeRequest::default_instance_ = NULL;

ExchangeCodeRequest* ExchangeCodeRequest::New() const {
  return new ExchangeCodeRequest;
}

void ExchangeCodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeCodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeCodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeCodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeCodeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeCodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeCodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeCodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeCodeRequest::MergeFrom(const ExchangeCodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeCodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeCodeRequest::CopyFrom(const ExchangeCodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeCodeRequest::IsInitialized() const {
  
  return true;
}

void ExchangeCodeRequest::Swap(ExchangeCodeRequest* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeCodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeCodeRequest_descriptor_;
  metadata.reflection = ExchangeCodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeCodeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ExchangeCodeResponse::ExchangeCodeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeCodeResponse::InitAsDefaultInstance() {
}

ExchangeCodeResponse::ExchangeCodeResponse(const ExchangeCodeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeCodeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeCodeResponse::~ExchangeCodeResponse() {
  SharedDtor();
}

void ExchangeCodeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeCodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeCodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeCodeResponse_descriptor_;
}

const ExchangeCodeResponse& ExchangeCodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ExchangeCodeResponse* ExchangeCodeResponse::default_instance_ = NULL;

ExchangeCodeResponse* ExchangeCodeResponse::New() const {
  return new ExchangeCodeResponse;
}

void ExchangeCodeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeCodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeCodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeCodeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeCodeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeCodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeCodeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeCodeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeCodeResponse::MergeFrom(const ExchangeCodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeCodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeCodeResponse::CopyFrom(const ExchangeCodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeCodeResponse::IsInitialized() const {
  
  return true;
}

void ExchangeCodeResponse::Swap(ExchangeCodeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeCodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeCodeResponse_descriptor_;
  metadata.reflection = ExchangeCodeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerFlagsRequest::PlayerFlagsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagsRequest::InitAsDefaultInstance() {
}

PlayerFlagsRequest::PlayerFlagsRequest(const PlayerFlagsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagsRequest::~PlayerFlagsRequest() {
  SharedDtor();
}

void PlayerFlagsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlagsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagsRequest_descriptor_;
}

const PlayerFlagsRequest& PlayerFlagsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerFlagsRequest* PlayerFlagsRequest::default_instance_ = NULL;

PlayerFlagsRequest* PlayerFlagsRequest::New() const {
  return new PlayerFlagsRequest;
}

void PlayerFlagsRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerFlagsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagsRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagsRequest::MergeFrom(const PlayerFlagsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagsRequest::CopyFrom(const PlayerFlagsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagsRequest::IsInitialized() const {
  
  return true;
}

void PlayerFlagsRequest::Swap(PlayerFlagsRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagsRequest_descriptor_;
  metadata.reflection = PlayerFlagsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagsResponse::kDataFieldNumber;
const int PlayerFlagsResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PlayerFlagsResponse::PlayerFlagsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagsResponse::InitAsDefaultInstance() {
  data_ = const_cast< ::protocols::common::PlayerFlagDataPb*>(&::protocols::common::PlayerFlagDataPb::default_instance());
}

PlayerFlagsResponse::PlayerFlagsResponse(const PlayerFlagsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagsResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagsResponse::~PlayerFlagsResponse() {
  SharedDtor();
}

void PlayerFlagsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PlayerFlagsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagsResponse_descriptor_;
}

const PlayerFlagsResponse& PlayerFlagsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerFlagsResponse* PlayerFlagsResponse::default_instance_ = NULL;

PlayerFlagsResponse* PlayerFlagsResponse::New() const {
  return new PlayerFlagsResponse;
}

void PlayerFlagsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protocols::common::PlayerFlagDataPb::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.PlayerFlagDataPb data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.PlayerFlagDataPb data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.PlayerFlagDataPb data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.PlayerFlagDataPb data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagsResponse::MergeFrom(const PlayerFlagsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protocols::common::PlayerFlagDataPb::MergeFrom(from.data());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagsResponse::CopyFrom(const PlayerFlagsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagsResponse::IsInitialized() const {
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PlayerFlagsResponse::Swap(PlayerFlagsResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagsResponse_descriptor_;
  metadata.reflection = PlayerFlagsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSetFlagRequest::kFlagTypeFieldNumber;
const int PlayerSetFlagRequest::kValueFieldNumber;
#endif  // !_MSC_VER

PlayerSetFlagRequest::PlayerSetFlagRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSetFlagRequest::InitAsDefaultInstance() {
}

PlayerSetFlagRequest::PlayerSetFlagRequest(const PlayerSetFlagRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSetFlagRequest::SharedCtor() {
  _cached_size_ = 0;
  flag_type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSetFlagRequest::~PlayerSetFlagRequest() {
  SharedDtor();
}

void PlayerSetFlagRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSetFlagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSetFlagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSetFlagRequest_descriptor_;
}

const PlayerSetFlagRequest& PlayerSetFlagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerSetFlagRequest* PlayerSetFlagRequest::default_instance_ = NULL;

PlayerSetFlagRequest* PlayerSetFlagRequest::New() const {
  return new PlayerSetFlagRequest;
}

void PlayerSetFlagRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSetFlagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_type_)));
          set_has_flag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSetFlagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag_type = 1;
  if (has_flag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag_type(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSetFlagRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag_type = 1;
  if (has_flag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag_type(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSetFlagRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag_type = 1;
    if (has_flag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_type());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSetFlagRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSetFlagRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSetFlagRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSetFlagRequest::MergeFrom(const PlayerSetFlagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag_type()) {
      set_flag_type(from.flag_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSetFlagRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSetFlagRequest::CopyFrom(const PlayerSetFlagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSetFlagRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerSetFlagRequest::Swap(PlayerSetFlagRequest* other) {
  if (other != this) {
    std::swap(flag_type_, other->flag_type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSetFlagRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSetFlagRequest_descriptor_;
  metadata.reflection = PlayerSetFlagRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSetFlagResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PlayerSetFlagResponse::PlayerSetFlagResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSetFlagResponse::InitAsDefaultInstance() {
}

PlayerSetFlagResponse::PlayerSetFlagResponse(const PlayerSetFlagResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSetFlagResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSetFlagResponse::~PlayerSetFlagResponse() {
  SharedDtor();
}

void PlayerSetFlagResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSetFlagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSetFlagResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSetFlagResponse_descriptor_;
}

const PlayerSetFlagResponse& PlayerSetFlagResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerSetFlagResponse* PlayerSetFlagResponse::default_instance_ = NULL;

PlayerSetFlagResponse* PlayerSetFlagResponse::New() const {
  return new PlayerSetFlagResponse;
}

void PlayerSetFlagResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSetFlagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerSetFlagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSetFlagResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSetFlagResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSetFlagResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSetFlagResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSetFlagResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSetFlagResponse::MergeFrom(const PlayerSetFlagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSetFlagResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSetFlagResponse::CopyFrom(const PlayerSetFlagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSetFlagResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerSetFlagResponse::Swap(PlayerSetFlagResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSetFlagResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSetFlagResponse_descriptor_;
  metadata.reflection = PlayerSetFlagResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagUpdateNotify::kFlagFieldNumber;
#endif  // !_MSC_VER

PlayerFlagUpdateNotify::PlayerFlagUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagUpdateNotify::InitAsDefaultInstance() {
  flag_ = const_cast< ::protocols::common::PlayerFlagPb*>(&::protocols::common::PlayerFlagPb::default_instance());
}

PlayerFlagUpdateNotify::PlayerFlagUpdateNotify(const PlayerFlagUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  flag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagUpdateNotify::~PlayerFlagUpdateNotify() {
  SharedDtor();
}

void PlayerFlagUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete flag_;
  }
}

void PlayerFlagUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagUpdateNotify_descriptor_;
}

const PlayerFlagUpdateNotify& PlayerFlagUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerFlagUpdateNotify* PlayerFlagUpdateNotify::default_instance_ = NULL;

PlayerFlagUpdateNotify* PlayerFlagUpdateNotify::New() const {
  return new PlayerFlagUpdateNotify;
}

void PlayerFlagUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_flag()) {
      if (flag_ != NULL) flag_->::protocols::common::PlayerFlagPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.PlayerFlagPb flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.PlayerFlagPb flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.PlayerFlagPb flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.PlayerFlagPb flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagUpdateNotify::MergeFrom(const PlayerFlagUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      mutable_flag()->::protocols::common::PlayerFlagPb::MergeFrom(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagUpdateNotify::CopyFrom(const PlayerFlagUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagUpdateNotify::IsInitialized() const {
  
  if (has_flag()) {
    if (!this->flag().IsInitialized()) return false;
  }
  return true;
}

void PlayerFlagUpdateNotify::Swap(PlayerFlagUpdateNotify* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagUpdateNotify_descriptor_;
  metadata.reflection = PlayerFlagUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerHideNpcRequest::PlayerHideNpcRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHideNpcRequest::InitAsDefaultInstance() {
}

PlayerHideNpcRequest::PlayerHideNpcRequest(const PlayerHideNpcRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHideNpcRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHideNpcRequest::~PlayerHideNpcRequest() {
  SharedDtor();
}

void PlayerHideNpcRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHideNpcRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHideNpcRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHideNpcRequest_descriptor_;
}

const PlayerHideNpcRequest& PlayerHideNpcRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerHideNpcRequest* PlayerHideNpcRequest::default_instance_ = NULL;

PlayerHideNpcRequest* PlayerHideNpcRequest::New() const {
  return new PlayerHideNpcRequest;
}

void PlayerHideNpcRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHideNpcRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerHideNpcRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHideNpcRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHideNpcRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHideNpcRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHideNpcRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHideNpcRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHideNpcRequest::MergeFrom(const PlayerHideNpcRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHideNpcRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHideNpcRequest::CopyFrom(const PlayerHideNpcRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHideNpcRequest::IsInitialized() const {
  
  return true;
}

void PlayerHideNpcRequest::Swap(PlayerHideNpcRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHideNpcRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHideNpcRequest_descriptor_;
  metadata.reflection = PlayerHideNpcRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHideNpcResponse::kDataFieldNumber;
const int PlayerHideNpcResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PlayerHideNpcResponse::PlayerHideNpcResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHideNpcResponse::InitAsDefaultInstance() {
  data_ = const_cast< ::protocols::common::HideNpcPb*>(&::protocols::common::HideNpcPb::default_instance());
}

PlayerHideNpcResponse::PlayerHideNpcResponse(const PlayerHideNpcResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHideNpcResponse::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHideNpcResponse::~PlayerHideNpcResponse() {
  SharedDtor();
}

void PlayerHideNpcResponse::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void PlayerHideNpcResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHideNpcResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHideNpcResponse_descriptor_;
}

const PlayerHideNpcResponse& PlayerHideNpcResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerHideNpcResponse* PlayerHideNpcResponse::default_instance_ = NULL;

PlayerHideNpcResponse* PlayerHideNpcResponse::New() const {
  return new PlayerHideNpcResponse;
}

void PlayerHideNpcResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protocols::common::HideNpcPb::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHideNpcResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.HideNpcPb data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHideNpcResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.HideNpcPb data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHideNpcResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.HideNpcPb data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHideNpcResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.HideNpcPb data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHideNpcResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHideNpcResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHideNpcResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHideNpcResponse::MergeFrom(const PlayerHideNpcResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protocols::common::HideNpcPb::MergeFrom(from.data());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHideNpcResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHideNpcResponse::CopyFrom(const PlayerHideNpcResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHideNpcResponse::IsInitialized() const {
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PlayerHideNpcResponse::Swap(PlayerHideNpcResponse* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHideNpcResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHideNpcResponse_descriptor_;
  metadata.reflection = PlayerHideNpcResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHideNpcUpdateNotify::kNpcFieldNumber;
#endif  // !_MSC_VER

PlayerHideNpcUpdateNotify::PlayerHideNpcUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHideNpcUpdateNotify::InitAsDefaultInstance() {
  npc_ = const_cast< ::protocols::common::HideNpcData*>(&::protocols::common::HideNpcData::default_instance());
}

PlayerHideNpcUpdateNotify::PlayerHideNpcUpdateNotify(const PlayerHideNpcUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHideNpcUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  npc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHideNpcUpdateNotify::~PlayerHideNpcUpdateNotify() {
  SharedDtor();
}

void PlayerHideNpcUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete npc_;
  }
}

void PlayerHideNpcUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHideNpcUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHideNpcUpdateNotify_descriptor_;
}

const PlayerHideNpcUpdateNotify& PlayerHideNpcUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerHideNpcUpdateNotify* PlayerHideNpcUpdateNotify::default_instance_ = NULL;

PlayerHideNpcUpdateNotify* PlayerHideNpcUpdateNotify::New() const {
  return new PlayerHideNpcUpdateNotify;
}

void PlayerHideNpcUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_npc()) {
      if (npc_ != NULL) npc_->::protocols::common::HideNpcData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHideNpcUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.HideNpcData npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHideNpcUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.HideNpcData npc = 1;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHideNpcUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.HideNpcData npc = 1;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHideNpcUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.HideNpcData npc = 1;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHideNpcUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHideNpcUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHideNpcUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHideNpcUpdateNotify::MergeFrom(const PlayerHideNpcUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc()) {
      mutable_npc()->::protocols::common::HideNpcData::MergeFrom(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHideNpcUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHideNpcUpdateNotify::CopyFrom(const PlayerHideNpcUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHideNpcUpdateNotify::IsInitialized() const {
  
  if (has_npc()) {
    if (!this->npc().IsInitialized()) return false;
  }
  return true;
}

void PlayerHideNpcUpdateNotify::Swap(PlayerHideNpcUpdateNotify* other) {
  if (other != this) {
    std::swap(npc_, other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHideNpcUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHideNpcUpdateNotify_descriptor_;
  metadata.reflection = PlayerHideNpcUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartCollectRequest::kNpcIdFieldNumber;
const int StartCollectRequest::kStartTickFieldNumber;
#endif  // !_MSC_VER

StartCollectRequest::StartCollectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartCollectRequest::InitAsDefaultInstance() {
}

StartCollectRequest::StartCollectRequest(const StartCollectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartCollectRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  start_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCollectRequest::~StartCollectRequest() {
  SharedDtor();
}

void StartCollectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartCollectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCollectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartCollectRequest_descriptor_;
}

const StartCollectRequest& StartCollectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StartCollectRequest* StartCollectRequest::default_instance_ = NULL;

StartCollectRequest* StartCollectRequest::New() const {
  return new StartCollectRequest;
}

void StartCollectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    start_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartCollectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_tick;
        break;
      }
      
      // required int32 start_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_tick_)));
          set_has_start_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartCollectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // required int32 start_tick = 2;
  if (has_start_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartCollectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // required int32 start_tick = 2;
  if (has_start_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartCollectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // required int32 start_tick = 2;
    if (has_start_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCollectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartCollectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartCollectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartCollectRequest::MergeFrom(const StartCollectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_start_tick()) {
      set_start_tick(from.start_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartCollectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCollectRequest::CopyFrom(const StartCollectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCollectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StartCollectRequest::Swap(StartCollectRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(start_tick_, other->start_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartCollectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartCollectRequest_descriptor_;
  metadata.reflection = StartCollectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartCollectResponse::kNpcIdFieldNumber;
const int StartCollectResponse::kNeedMsecFieldNumber;
const int StartCollectResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

StartCollectResponse::StartCollectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartCollectResponse::InitAsDefaultInstance() {
}

StartCollectResponse::StartCollectResponse(const StartCollectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartCollectResponse::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  need_msec_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartCollectResponse::~StartCollectResponse() {
  SharedDtor();
}

void StartCollectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartCollectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartCollectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartCollectResponse_descriptor_;
}

const StartCollectResponse& StartCollectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StartCollectResponse* StartCollectResponse::default_instance_ = NULL;

StartCollectResponse* StartCollectResponse::New() const {
  return new StartCollectResponse;
}

void StartCollectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    need_msec_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartCollectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_msec;
        break;
      }
      
      // optional int32 need_msec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_msec_)));
          set_has_need_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartCollectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 need_msec = 2;
  if (has_need_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_msec(), output);
  }
  
  // required int32 error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartCollectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 need_msec = 2;
  if (has_need_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_msec(), target);
  }
  
  // required int32 error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartCollectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 need_msec = 2;
    if (has_need_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_msec());
    }
    
    // required int32 error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartCollectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartCollectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartCollectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartCollectResponse::MergeFrom(const StartCollectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_need_msec()) {
      set_need_msec(from.need_msec());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartCollectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartCollectResponse::CopyFrom(const StartCollectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartCollectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void StartCollectResponse::Swap(StartCollectResponse* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(need_msec_, other->need_msec_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartCollectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartCollectResponse_descriptor_;
  metadata.reflection = StartCollectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishCollectRequest::kNpcIdFieldNumber;
const int FinishCollectRequest::kFinishTickFieldNumber;
#endif  // !_MSC_VER

FinishCollectRequest::FinishCollectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishCollectRequest::InitAsDefaultInstance() {
}

FinishCollectRequest::FinishCollectRequest(const FinishCollectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishCollectRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  finish_tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishCollectRequest::~FinishCollectRequest() {
  SharedDtor();
}

void FinishCollectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishCollectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishCollectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishCollectRequest_descriptor_;
}

const FinishCollectRequest& FinishCollectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FinishCollectRequest* FinishCollectRequest::default_instance_ = NULL;

FinishCollectRequest* FinishCollectRequest::New() const {
  return new FinishCollectRequest;
}

void FinishCollectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    finish_tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishCollectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish_tick;
        break;
      }
      
      // required int32 finish_tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_tick_)));
          set_has_finish_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishCollectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // required int32 finish_tick = 2;
  if (has_finish_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish_tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishCollectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // required int32 finish_tick = 2;
  if (has_finish_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish_tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishCollectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // required int32 finish_tick = 2;
    if (has_finish_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishCollectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishCollectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishCollectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishCollectRequest::MergeFrom(const FinishCollectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_finish_tick()) {
      set_finish_tick(from.finish_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishCollectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishCollectRequest::CopyFrom(const FinishCollectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishCollectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FinishCollectRequest::Swap(FinishCollectRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(finish_tick_, other->finish_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishCollectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishCollectRequest_descriptor_;
  metadata.reflection = FinishCollectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishCollectResponse::kNpcIdFieldNumber;
const int FinishCollectResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

FinishCollectResponse::FinishCollectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishCollectResponse::InitAsDefaultInstance() {
}

FinishCollectResponse::FinishCollectResponse(const FinishCollectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishCollectResponse::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishCollectResponse::~FinishCollectResponse() {
  SharedDtor();
}

void FinishCollectResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishCollectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishCollectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishCollectResponse_descriptor_;
}

const FinishCollectResponse& FinishCollectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FinishCollectResponse* FinishCollectResponse::default_instance_ = NULL;

FinishCollectResponse* FinishCollectResponse::New() const {
  return new FinishCollectResponse;
}

void FinishCollectResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishCollectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishCollectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishCollectResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishCollectResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishCollectResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishCollectResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishCollectResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishCollectResponse::MergeFrom(const FinishCollectResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishCollectResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishCollectResponse::CopyFrom(const FinishCollectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishCollectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FinishCollectResponse::Swap(FinishCollectResponse* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishCollectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishCollectResponse_descriptor_;
  metadata.reflection = FinishCollectResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTrainAttributeRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

GetTrainAttributeRequest::GetTrainAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTrainAttributeRequest::InitAsDefaultInstance() {
}

GetTrainAttributeRequest::GetTrainAttributeRequest(const GetTrainAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTrainAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTrainAttributeRequest::~GetTrainAttributeRequest() {
  SharedDtor();
}

void GetTrainAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTrainAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTrainAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTrainAttributeRequest_descriptor_;
}

const GetTrainAttributeRequest& GetTrainAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetTrainAttributeRequest* GetTrainAttributeRequest::default_instance_ = NULL;

GetTrainAttributeRequest* GetTrainAttributeRequest::New() const {
  return new GetTrainAttributeRequest;
}

void GetTrainAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTrainAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTrainAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTrainAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTrainAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTrainAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTrainAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTrainAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTrainAttributeRequest::MergeFrom(const GetTrainAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTrainAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrainAttributeRequest::CopyFrom(const GetTrainAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrainAttributeRequest::IsInitialized() const {
  
  return true;
}

void GetTrainAttributeRequest::Swap(GetTrainAttributeRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTrainAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTrainAttributeRequest_descriptor_;
  metadata.reflection = GetTrainAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTrainAttributeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetTrainAttributeResponse::GetTrainAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTrainAttributeResponse::InitAsDefaultInstance() {
}

GetTrainAttributeResponse::GetTrainAttributeResponse(const GetTrainAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTrainAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTrainAttributeResponse::~GetTrainAttributeResponse() {
  SharedDtor();
}

void GetTrainAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTrainAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTrainAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTrainAttributeResponse_descriptor_;
}

const GetTrainAttributeResponse& GetTrainAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetTrainAttributeResponse* GetTrainAttributeResponse::default_instance_ = NULL;

GetTrainAttributeResponse* GetTrainAttributeResponse::New() const {
  return new GetTrainAttributeResponse;
}

void GetTrainAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTrainAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTrainAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTrainAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTrainAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTrainAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTrainAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTrainAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTrainAttributeResponse::MergeFrom(const GetTrainAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTrainAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTrainAttributeResponse::CopyFrom(const GetTrainAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrainAttributeResponse::IsInitialized() const {
  
  return true;
}

void GetTrainAttributeResponse::Swap(GetTrainAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTrainAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTrainAttributeResponse_descriptor_;
  metadata.reflection = GetTrainAttributeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainAttributeRequest::kGuidFieldNumber;
const int TrainAttributeRequest::kTrainTypeFieldNumber;
#endif  // !_MSC_VER

TrainAttributeRequest::TrainAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainAttributeRequest::InitAsDefaultInstance() {
}

TrainAttributeRequest::TrainAttributeRequest(const TrainAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  train_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainAttributeRequest::~TrainAttributeRequest() {
  SharedDtor();
}

void TrainAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrainAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainAttributeRequest_descriptor_;
}

const TrainAttributeRequest& TrainAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TrainAttributeRequest* TrainAttributeRequest::default_instance_ = NULL;

TrainAttributeRequest* TrainAttributeRequest::New() const {
  return new TrainAttributeRequest;
}

void TrainAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    train_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_train_type;
        break;
      }
      
      // optional int32 train_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_type_)));
          set_has_train_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 train_type = 2;
  if (has_train_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->train_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 train_type = 2;
  if (has_train_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->train_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 train_type = 2;
    if (has_train_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainAttributeRequest::MergeFrom(const TrainAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_train_type()) {
      set_train_type(from.train_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainAttributeRequest::CopyFrom(const TrainAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainAttributeRequest::IsInitialized() const {
  
  return true;
}

void TrainAttributeRequest::Swap(TrainAttributeRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(train_type_, other->train_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainAttributeRequest_descriptor_;
  metadata.reflection = TrainAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainAttributeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TrainAttributeResponse::TrainAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainAttributeResponse::InitAsDefaultInstance() {
}

TrainAttributeResponse::TrainAttributeResponse(const TrainAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainAttributeResponse::~TrainAttributeResponse() {
  SharedDtor();
}

void TrainAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrainAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainAttributeResponse_descriptor_;
}

const TrainAttributeResponse& TrainAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TrainAttributeResponse* TrainAttributeResponse::default_instance_ = NULL;

TrainAttributeResponse* TrainAttributeResponse::New() const {
  return new TrainAttributeResponse;
}

void TrainAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainAttributeResponse::MergeFrom(const TrainAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainAttributeResponse::CopyFrom(const TrainAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainAttributeResponse::IsInitialized() const {
  
  return true;
}

void TrainAttributeResponse::Swap(TrainAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainAttributeResponse_descriptor_;
  metadata.reflection = TrainAttributeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainAttributeNotify::kDataFieldNumber;
const int TrainAttributeNotify::kCoinKFieldNumber;
const int TrainAttributeNotify::kYbMidFieldNumber;
const int TrainAttributeNotify::kYbHighFieldNumber;
const int TrainAttributeNotify::kAlterItemIdFieldNumber;
#endif  // !_MSC_VER

TrainAttributeNotify::TrainAttributeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainAttributeNotify::InitAsDefaultInstance() {
  data_ = const_cast< ::protocols::common::TrainAttribute*>(&::protocols::common::TrainAttribute::default_instance());
}

TrainAttributeNotify::TrainAttributeNotify(const TrainAttributeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainAttributeNotify::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  coin_k_ = 0;
  yb_mid_ = 0;
  yb_high_ = 0;
  alter_item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainAttributeNotify::~TrainAttributeNotify() {
  SharedDtor();
}

void TrainAttributeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void TrainAttributeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainAttributeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainAttributeNotify_descriptor_;
}

const TrainAttributeNotify& TrainAttributeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TrainAttributeNotify* TrainAttributeNotify::default_instance_ = NULL;

TrainAttributeNotify* TrainAttributeNotify::New() const {
  return new TrainAttributeNotify;
}

void TrainAttributeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::protocols::common::TrainAttribute::Clear();
    }
    coin_k_ = 0;
    yb_mid_ = 0;
    yb_high_ = 0;
    alter_item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainAttributeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.TrainAttribute data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin_k;
        break;
      }
      
      // optional int32 coin_k = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_k_)));
          set_has_coin_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yb_mid;
        break;
      }
      
      // optional int32 yb_mid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yb_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yb_mid_)));
          set_has_yb_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yb_high;
        break;
      }
      
      // optional int32 yb_high = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yb_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yb_high_)));
          set_has_yb_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_alter_item_id;
        break;
      }
      
      // optional int32 alter_item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alter_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alter_item_id_)));
          set_has_alter_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainAttributeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.TrainAttribute data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }
  
  // optional int32 coin_k = 2;
  if (has_coin_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin_k(), output);
  }
  
  // optional int32 yb_mid = 3;
  if (has_yb_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yb_mid(), output);
  }
  
  // optional int32 yb_high = 4;
  if (has_yb_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yb_high(), output);
  }
  
  // optional int32 alter_item_id = 5;
  if (has_alter_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->alter_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainAttributeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.TrainAttribute data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }
  
  // optional int32 coin_k = 2;
  if (has_coin_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin_k(), target);
  }
  
  // optional int32 yb_mid = 3;
  if (has_yb_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yb_mid(), target);
  }
  
  // optional int32 yb_high = 4;
  if (has_yb_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yb_high(), target);
  }
  
  // optional int32 alter_item_id = 5;
  if (has_alter_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->alter_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainAttributeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.TrainAttribute data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
    // optional int32 coin_k = 2;
    if (has_coin_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin_k());
    }
    
    // optional int32 yb_mid = 3;
    if (has_yb_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yb_mid());
    }
    
    // optional int32 yb_high = 4;
    if (has_yb_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yb_high());
    }
    
    // optional int32 alter_item_id = 5;
    if (has_alter_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alter_item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainAttributeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainAttributeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainAttributeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainAttributeNotify::MergeFrom(const TrainAttributeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::protocols::common::TrainAttribute::MergeFrom(from.data());
    }
    if (from.has_coin_k()) {
      set_coin_k(from.coin_k());
    }
    if (from.has_yb_mid()) {
      set_yb_mid(from.yb_mid());
    }
    if (from.has_yb_high()) {
      set_yb_high(from.yb_high());
    }
    if (from.has_alter_item_id()) {
      set_alter_item_id(from.alter_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainAttributeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainAttributeNotify::CopyFrom(const TrainAttributeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainAttributeNotify::IsInitialized() const {
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void TrainAttributeNotify::Swap(TrainAttributeNotify* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(coin_k_, other->coin_k_);
    std::swap(yb_mid_, other->yb_mid_);
    std::swap(yb_high_, other->yb_high_);
    std::swap(alter_item_id_, other->alter_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainAttributeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainAttributeNotify_descriptor_;
  metadata.reflection = TrainAttributeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTrainAttributeRequest::kGuidFieldNumber;
const int SaveTrainAttributeRequest::kCancelFieldNumber;
#endif  // !_MSC_VER

SaveTrainAttributeRequest::SaveTrainAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveTrainAttributeRequest::InitAsDefaultInstance() {
}

SaveTrainAttributeRequest::SaveTrainAttributeRequest(const SaveTrainAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveTrainAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  cancel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTrainAttributeRequest::~SaveTrainAttributeRequest() {
  SharedDtor();
}

void SaveTrainAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveTrainAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTrainAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTrainAttributeRequest_descriptor_;
}

const SaveTrainAttributeRequest& SaveTrainAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SaveTrainAttributeRequest* SaveTrainAttributeRequest::default_instance_ = NULL;

SaveTrainAttributeRequest* SaveTrainAttributeRequest::New() const {
  return new SaveTrainAttributeRequest;
}

void SaveTrainAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    cancel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTrainAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cancel;
        break;
      }
      
      // optional int32 cancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveTrainAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 cancel = 2;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cancel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveTrainAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 cancel = 2;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cancel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveTrainAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 cancel = 2;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTrainAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTrainAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTrainAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTrainAttributeRequest::MergeFrom(const SaveTrainAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTrainAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTrainAttributeRequest::CopyFrom(const SaveTrainAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTrainAttributeRequest::IsInitialized() const {
  
  return true;
}

void SaveTrainAttributeRequest::Swap(SaveTrainAttributeRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(cancel_, other->cancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTrainAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTrainAttributeRequest_descriptor_;
  metadata.reflection = SaveTrainAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTrainAttributeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SaveTrainAttributeResponse::SaveTrainAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveTrainAttributeResponse::InitAsDefaultInstance() {
}

SaveTrainAttributeResponse::SaveTrainAttributeResponse(const SaveTrainAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveTrainAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTrainAttributeResponse::~SaveTrainAttributeResponse() {
  SharedDtor();
}

void SaveTrainAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveTrainAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTrainAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTrainAttributeResponse_descriptor_;
}

const SaveTrainAttributeResponse& SaveTrainAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SaveTrainAttributeResponse* SaveTrainAttributeResponse::default_instance_ = NULL;

SaveTrainAttributeResponse* SaveTrainAttributeResponse::New() const {
  return new SaveTrainAttributeResponse;
}

void SaveTrainAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTrainAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveTrainAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveTrainAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveTrainAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTrainAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTrainAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTrainAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTrainAttributeResponse::MergeFrom(const SaveTrainAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTrainAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTrainAttributeResponse::CopyFrom(const SaveTrainAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTrainAttributeResponse::IsInitialized() const {
  
  return true;
}

void SaveTrainAttributeResponse::Swap(SaveTrainAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTrainAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTrainAttributeResponse_descriptor_;
  metadata.reflection = SaveTrainAttributeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfoUpdateNotify::kGuidFieldNumber;
const int GuildInfoUpdateNotify::kGuildIdFieldNumber;
const int GuildInfoUpdateNotify::kGuildTitleFieldNumber;
const int GuildInfoUpdateNotify::kGuildNameFieldNumber;
#endif  // !_MSC_VER

GuildInfoUpdateNotify::GuildInfoUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInfoUpdateNotify::InitAsDefaultInstance() {
}

GuildInfoUpdateNotify::GuildInfoUpdateNotify(const GuildInfoUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfoUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  guild_id_ = 0;
  guild_title_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfoUpdateNotify::~GuildInfoUpdateNotify() {
  SharedDtor();
}

void GuildInfoUpdateNotify::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfoUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfoUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfoUpdateNotify_descriptor_;
}

const GuildInfoUpdateNotify& GuildInfoUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildInfoUpdateNotify* GuildInfoUpdateNotify::default_instance_ = NULL;

GuildInfoUpdateNotify* GuildInfoUpdateNotify::New() const {
  return new GuildInfoUpdateNotify;
}

void GuildInfoUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    guild_id_ = 0;
    guild_title_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfoUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_title;
        break;
      }
      
      // optional int32 guild_title = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_title_)));
          set_has_guild_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfoUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 guild_id = 2 [default = 0];
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guild_id(), output);
  }
  
  // optional int32 guild_title = 3 [default = 0];
  if (has_guild_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_title(), output);
  }
  
  // optional string guild_name = 4 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guild_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInfoUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 guild_id = 2 [default = 0];
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guild_id(), target);
  }
  
  // optional int32 guild_title = 3 [default = 0];
  if (has_guild_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_title(), target);
  }
  
  // optional string guild_name = 4 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInfoUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 guild_id = 2 [default = 0];
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional int32 guild_title = 3 [default = 0];
    if (has_guild_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_title());
    }
    
    // optional string guild_name = 4 [default = ""];
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfoUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfoUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfoUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfoUpdateNotify::MergeFrom(const GuildInfoUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_title()) {
      set_guild_title(from.guild_title());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfoUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfoUpdateNotify::CopyFrom(const GuildInfoUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfoUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildInfoUpdateNotify::Swap(GuildInfoUpdateNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_title_, other->guild_title_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfoUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfoUpdateNotify_descriptor_;
  metadata.reflection = GuildInfoUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipInfoUpdateNotify::kVipLevelFieldNumber;
const int VipInfoUpdateNotify::kDurationSecFieldNumber;
#endif  // !_MSC_VER

VipInfoUpdateNotify::VipInfoUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInfoUpdateNotify::InitAsDefaultInstance() {
}

VipInfoUpdateNotify::VipInfoUpdateNotify(const VipInfoUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInfoUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  vip_level_ = 0;
  duration_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInfoUpdateNotify::~VipInfoUpdateNotify() {
  SharedDtor();
}

void VipInfoUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipInfoUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInfoUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInfoUpdateNotify_descriptor_;
}

const VipInfoUpdateNotify& VipInfoUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

VipInfoUpdateNotify* VipInfoUpdateNotify::default_instance_ = NULL;

VipInfoUpdateNotify* VipInfoUpdateNotify::New() const {
  return new VipInfoUpdateNotify;
}

void VipInfoUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vip_level_ = 0;
    duration_sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInfoUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vip_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duration_sec;
        break;
      }
      
      // required int32 duration_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_sec_)));
          set_has_duration_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInfoUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 vip_level = 1;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vip_level(), output);
  }
  
  // required int32 duration_sec = 2;
  if (has_duration_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInfoUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 vip_level = 1;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vip_level(), target);
  }
  
  // required int32 duration_sec = 2;
  if (has_duration_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInfoUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vip_level = 1;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // required int32 duration_sec = 2;
    if (has_duration_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration_sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInfoUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInfoUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInfoUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInfoUpdateNotify::MergeFrom(const VipInfoUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_duration_sec()) {
      set_duration_sec(from.duration_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInfoUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInfoUpdateNotify::CopyFrom(const VipInfoUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInfoUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void VipInfoUpdateNotify::Swap(VipInfoUpdateNotify* other) {
  if (other != this) {
    std::swap(vip_level_, other->vip_level_);
    std::swap(duration_sec_, other->duration_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInfoUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInfoUpdateNotify_descriptor_;
  metadata.reflection = VipInfoUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FunctionLimitRequest::FunctionLimitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionLimitRequest::InitAsDefaultInstance() {
}

FunctionLimitRequest::FunctionLimitRequest(const FunctionLimitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionLimitRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionLimitRequest::~FunctionLimitRequest() {
  SharedDtor();
}

void FunctionLimitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionLimitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionLimitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionLimitRequest_descriptor_;
}

const FunctionLimitRequest& FunctionLimitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FunctionLimitRequest* FunctionLimitRequest::default_instance_ = NULL;

FunctionLimitRequest* FunctionLimitRequest::New() const {
  return new FunctionLimitRequest;
}

void FunctionLimitRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionLimitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FunctionLimitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionLimitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionLimitRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionLimitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionLimitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionLimitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionLimitRequest::MergeFrom(const FunctionLimitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionLimitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionLimitRequest::CopyFrom(const FunctionLimitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionLimitRequest::IsInitialized() const {
  
  return true;
}

void FunctionLimitRequest::Swap(FunctionLimitRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionLimitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionLimitRequest_descriptor_;
  metadata.reflection = FunctionLimitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionLimitResponse::kErrorCodeFieldNumber;
const int FunctionLimitResponse::kOpenFlagsFieldNumber;
#endif  // !_MSC_VER

FunctionLimitResponse::FunctionLimitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionLimitResponse::InitAsDefaultInstance() {
}

FunctionLimitResponse::FunctionLimitResponse(const FunctionLimitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionLimitResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionLimitResponse::~FunctionLimitResponse() {
  SharedDtor();
}

void FunctionLimitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionLimitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionLimitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionLimitResponse_descriptor_;
}

const FunctionLimitResponse& FunctionLimitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FunctionLimitResponse* FunctionLimitResponse::default_instance_ = NULL;

FunctionLimitResponse* FunctionLimitResponse::New() const {
  return new FunctionLimitResponse;
}

void FunctionLimitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  open_flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionLimitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_flags;
        break;
      }
      
      // repeated int32 open_flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_open_flags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_flags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_flags;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionLimitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated int32 open_flags = 2;
  for (int i = 0; i < this->open_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->open_flags(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionLimitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated int32 open_flags = 2;
  for (int i = 0; i < this->open_flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->open_flags(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionLimitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated int32 open_flags = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_flags(i));
    }
    total_size += 1 * this->open_flags_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionLimitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionLimitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionLimitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionLimitResponse::MergeFrom(const FunctionLimitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_flags_.MergeFrom(from.open_flags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionLimitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionLimitResponse::CopyFrom(const FunctionLimitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionLimitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FunctionLimitResponse::Swap(FunctionLimitResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    open_flags_.Swap(&other->open_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionLimitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionLimitResponse_descriptor_;
  metadata.reflection = FunctionLimitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionLimitUpdateNotify::kOpenFlagsFieldNumber;
#endif  // !_MSC_VER

FunctionLimitUpdateNotify::FunctionLimitUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionLimitUpdateNotify::InitAsDefaultInstance() {
}

FunctionLimitUpdateNotify::FunctionLimitUpdateNotify(const FunctionLimitUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionLimitUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionLimitUpdateNotify::~FunctionLimitUpdateNotify() {
  SharedDtor();
}

void FunctionLimitUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionLimitUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionLimitUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionLimitUpdateNotify_descriptor_;
}

const FunctionLimitUpdateNotify& FunctionLimitUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FunctionLimitUpdateNotify* FunctionLimitUpdateNotify::default_instance_ = NULL;

FunctionLimitUpdateNotify* FunctionLimitUpdateNotify::New() const {
  return new FunctionLimitUpdateNotify;
}

void FunctionLimitUpdateNotify::Clear() {
  open_flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionLimitUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 open_flags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_open_flags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_flags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_open_flags;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionLimitUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 open_flags = 1;
  for (int i = 0; i < this->open_flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->open_flags(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionLimitUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 open_flags = 1;
  for (int i = 0; i < this->open_flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->open_flags(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionLimitUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 open_flags = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_flags(i));
    }
    total_size += 1 * this->open_flags_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionLimitUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionLimitUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionLimitUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionLimitUpdateNotify::MergeFrom(const FunctionLimitUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_flags_.MergeFrom(from.open_flags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionLimitUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionLimitUpdateNotify::CopyFrom(const FunctionLimitUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionLimitUpdateNotify::IsInitialized() const {
  
  return true;
}

void FunctionLimitUpdateNotify::Swap(FunctionLimitUpdateNotify* other) {
  if (other != this) {
    open_flags_.Swap(&other->open_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionLimitUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionLimitUpdateNotify_descriptor_;
  metadata.reflection = FunctionLimitUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetDailyGiftInfoRequest::GetDailyGiftInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyGiftInfoRequest::InitAsDefaultInstance() {
}

GetDailyGiftInfoRequest::GetDailyGiftInfoRequest(const GetDailyGiftInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyGiftInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyGiftInfoRequest::~GetDailyGiftInfoRequest() {
  SharedDtor();
}

void GetDailyGiftInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDailyGiftInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyGiftInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyGiftInfoRequest_descriptor_;
}

const GetDailyGiftInfoRequest& GetDailyGiftInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetDailyGiftInfoRequest* GetDailyGiftInfoRequest::default_instance_ = NULL;

GetDailyGiftInfoRequest* GetDailyGiftInfoRequest::New() const {
  return new GetDailyGiftInfoRequest;
}

void GetDailyGiftInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyGiftInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDailyGiftInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyGiftInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyGiftInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyGiftInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyGiftInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyGiftInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyGiftInfoRequest::MergeFrom(const GetDailyGiftInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyGiftInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyGiftInfoRequest::CopyFrom(const GetDailyGiftInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyGiftInfoRequest::IsInitialized() const {
  
  return true;
}

void GetDailyGiftInfoRequest::Swap(GetDailyGiftInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyGiftInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyGiftInfoRequest_descriptor_;
  metadata.reflection = GetDailyGiftInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDailyGiftInfoResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetDailyGiftInfoResponse::GetDailyGiftInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDailyGiftInfoResponse::InitAsDefaultInstance() {
}

GetDailyGiftInfoResponse::GetDailyGiftInfoResponse(const GetDailyGiftInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDailyGiftInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDailyGiftInfoResponse::~GetDailyGiftInfoResponse() {
  SharedDtor();
}

void GetDailyGiftInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDailyGiftInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyGiftInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDailyGiftInfoResponse_descriptor_;
}

const GetDailyGiftInfoResponse& GetDailyGiftInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetDailyGiftInfoResponse* GetDailyGiftInfoResponse::default_instance_ = NULL;

GetDailyGiftInfoResponse* GetDailyGiftInfoResponse::New() const {
  return new GetDailyGiftInfoResponse;
}

void GetDailyGiftInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDailyGiftInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDailyGiftInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDailyGiftInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDailyGiftInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyGiftInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDailyGiftInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDailyGiftInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDailyGiftInfoResponse::MergeFrom(const GetDailyGiftInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDailyGiftInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyGiftInfoResponse::CopyFrom(const GetDailyGiftInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyGiftInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetDailyGiftInfoResponse::Swap(GetDailyGiftInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDailyGiftInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDailyGiftInfoResponse_descriptor_;
  metadata.reflection = GetDailyGiftInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyGiftInfoUpdateNotify::kGiftPackIdFieldNumber;
const int DailyGiftInfoUpdateNotify::kAppliedFieldNumber;
#endif  // !_MSC_VER

DailyGiftInfoUpdateNotify::DailyGiftInfoUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyGiftInfoUpdateNotify::InitAsDefaultInstance() {
}

DailyGiftInfoUpdateNotify::DailyGiftInfoUpdateNotify(const DailyGiftInfoUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyGiftInfoUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  gift_pack_id_ = 0;
  applied_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyGiftInfoUpdateNotify::~DailyGiftInfoUpdateNotify() {
  SharedDtor();
}

void DailyGiftInfoUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyGiftInfoUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyGiftInfoUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyGiftInfoUpdateNotify_descriptor_;
}

const DailyGiftInfoUpdateNotify& DailyGiftInfoUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DailyGiftInfoUpdateNotify* DailyGiftInfoUpdateNotify::default_instance_ = NULL;

DailyGiftInfoUpdateNotify* DailyGiftInfoUpdateNotify::New() const {
  return new DailyGiftInfoUpdateNotify;
}

void DailyGiftInfoUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_pack_id_ = 0;
    applied_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyGiftInfoUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gift_pack_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_pack_id_)));
          set_has_gift_pack_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_applied;
        break;
      }
      
      // required bool applied = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &applied_)));
          set_has_applied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyGiftInfoUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gift_pack_id = 1;
  if (has_gift_pack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_pack_id(), output);
  }
  
  // required bool applied = 2;
  if (has_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->applied(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyGiftInfoUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gift_pack_id = 1;
  if (has_gift_pack_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_pack_id(), target);
  }
  
  // required bool applied = 2;
  if (has_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->applied(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyGiftInfoUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gift_pack_id = 1;
    if (has_gift_pack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_pack_id());
    }
    
    // required bool applied = 2;
    if (has_applied()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyGiftInfoUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyGiftInfoUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyGiftInfoUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyGiftInfoUpdateNotify::MergeFrom(const DailyGiftInfoUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_pack_id()) {
      set_gift_pack_id(from.gift_pack_id());
    }
    if (from.has_applied()) {
      set_applied(from.applied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyGiftInfoUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyGiftInfoUpdateNotify::CopyFrom(const DailyGiftInfoUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyGiftInfoUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DailyGiftInfoUpdateNotify::Swap(DailyGiftInfoUpdateNotify* other) {
  if (other != this) {
    std::swap(gift_pack_id_, other->gift_pack_id_);
    std::swap(applied_, other->applied_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyGiftInfoUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyGiftInfoUpdateNotify_descriptor_;
  metadata.reflection = DailyGiftInfoUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyDailyGiftRequest::kApplyFirstRewardOnVipFieldNumber;
#endif  // !_MSC_VER

ApplyDailyGiftRequest::ApplyDailyGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyDailyGiftRequest::InitAsDefaultInstance() {
}

ApplyDailyGiftRequest::ApplyDailyGiftRequest(const ApplyDailyGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyDailyGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  apply_first_reward_on_vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyDailyGiftRequest::~ApplyDailyGiftRequest() {
  SharedDtor();
}

void ApplyDailyGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyDailyGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyDailyGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyDailyGiftRequest_descriptor_;
}

const ApplyDailyGiftRequest& ApplyDailyGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyDailyGiftRequest* ApplyDailyGiftRequest::default_instance_ = NULL;

ApplyDailyGiftRequest* ApplyDailyGiftRequest::New() const {
  return new ApplyDailyGiftRequest;
}

void ApplyDailyGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_first_reward_on_vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyDailyGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 apply_first_reward_on_vip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_first_reward_on_vip_)));
          set_has_apply_first_reward_on_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyDailyGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 apply_first_reward_on_vip = 1;
  if (has_apply_first_reward_on_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apply_first_reward_on_vip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyDailyGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 apply_first_reward_on_vip = 1;
  if (has_apply_first_reward_on_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->apply_first_reward_on_vip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyDailyGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 apply_first_reward_on_vip = 1;
    if (has_apply_first_reward_on_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_first_reward_on_vip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyDailyGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyDailyGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyDailyGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyDailyGiftRequest::MergeFrom(const ApplyDailyGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_first_reward_on_vip()) {
      set_apply_first_reward_on_vip(from.apply_first_reward_on_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyDailyGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDailyGiftRequest::CopyFrom(const ApplyDailyGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDailyGiftRequest::IsInitialized() const {
  
  return true;
}

void ApplyDailyGiftRequest::Swap(ApplyDailyGiftRequest* other) {
  if (other != this) {
    std::swap(apply_first_reward_on_vip_, other->apply_first_reward_on_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyDailyGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyDailyGiftRequest_descriptor_;
  metadata.reflection = ApplyDailyGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyDailyGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyDailyGiftResponse::ApplyDailyGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyDailyGiftResponse::InitAsDefaultInstance() {
}

ApplyDailyGiftResponse::ApplyDailyGiftResponse(const ApplyDailyGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyDailyGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyDailyGiftResponse::~ApplyDailyGiftResponse() {
  SharedDtor();
}

void ApplyDailyGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyDailyGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyDailyGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyDailyGiftResponse_descriptor_;
}

const ApplyDailyGiftResponse& ApplyDailyGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyDailyGiftResponse* ApplyDailyGiftResponse::default_instance_ = NULL;

ApplyDailyGiftResponse* ApplyDailyGiftResponse::New() const {
  return new ApplyDailyGiftResponse;
}

void ApplyDailyGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyDailyGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyDailyGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyDailyGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyDailyGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyDailyGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyDailyGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyDailyGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyDailyGiftResponse::MergeFrom(const ApplyDailyGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyDailyGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyDailyGiftResponse::CopyFrom(const ApplyDailyGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDailyGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyDailyGiftResponse::Swap(ApplyDailyGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyDailyGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyDailyGiftResponse_descriptor_;
  metadata.reflection = ApplyDailyGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStackableOnlineGiftRequest::GetStackableOnlineGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStackableOnlineGiftRequest::InitAsDefaultInstance() {
}

GetStackableOnlineGiftRequest::GetStackableOnlineGiftRequest(const GetStackableOnlineGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStackableOnlineGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStackableOnlineGiftRequest::~GetStackableOnlineGiftRequest() {
  SharedDtor();
}

void GetStackableOnlineGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStackableOnlineGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStackableOnlineGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStackableOnlineGiftRequest_descriptor_;
}

const GetStackableOnlineGiftRequest& GetStackableOnlineGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetStackableOnlineGiftRequest* GetStackableOnlineGiftRequest::default_instance_ = NULL;

GetStackableOnlineGiftRequest* GetStackableOnlineGiftRequest::New() const {
  return new GetStackableOnlineGiftRequest;
}

void GetStackableOnlineGiftRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStackableOnlineGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetStackableOnlineGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStackableOnlineGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStackableOnlineGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStackableOnlineGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStackableOnlineGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStackableOnlineGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStackableOnlineGiftRequest::MergeFrom(const GetStackableOnlineGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStackableOnlineGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStackableOnlineGiftRequest::CopyFrom(const GetStackableOnlineGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStackableOnlineGiftRequest::IsInitialized() const {
  
  return true;
}

void GetStackableOnlineGiftRequest::Swap(GetStackableOnlineGiftRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStackableOnlineGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStackableOnlineGiftRequest_descriptor_;
  metadata.reflection = GetStackableOnlineGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StackableOnlineGift::kOnlineDayNumFieldNumber;
const int StackableOnlineGift::kPackIdFieldNumber;
const int StackableOnlineGift::kAppliedFieldNumber;
#endif  // !_MSC_VER

StackableOnlineGift::StackableOnlineGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StackableOnlineGift::InitAsDefaultInstance() {
}

StackableOnlineGift::StackableOnlineGift(const StackableOnlineGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StackableOnlineGift::SharedCtor() {
  _cached_size_ = 0;
  online_day_num_ = 0;
  pack_id_ = 0;
  applied_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StackableOnlineGift::~StackableOnlineGift() {
  SharedDtor();
}

void StackableOnlineGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StackableOnlineGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackableOnlineGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackableOnlineGift_descriptor_;
}

const StackableOnlineGift& StackableOnlineGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StackableOnlineGift* StackableOnlineGift::default_instance_ = NULL;

StackableOnlineGift* StackableOnlineGift::New() const {
  return new StackableOnlineGift;
}

void StackableOnlineGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_day_num_ = 0;
    pack_id_ = 0;
    applied_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StackableOnlineGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 online_day_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_day_num_)));
          set_has_online_day_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pack_id;
        break;
      }
      
      // required int32 pack_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pack_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_id_)));
          set_has_pack_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applied;
        break;
      }
      
      // required int32 applied = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applied_)));
          set_has_applied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StackableOnlineGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 online_day_num = 1;
  if (has_online_day_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->online_day_num(), output);
  }
  
  // required int32 pack_id = 2;
  if (has_pack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pack_id(), output);
  }
  
  // required int32 applied = 3;
  if (has_applied()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applied(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StackableOnlineGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 online_day_num = 1;
  if (has_online_day_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->online_day_num(), target);
  }
  
  // required int32 pack_id = 2;
  if (has_pack_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pack_id(), target);
  }
  
  // required int32 applied = 3;
  if (has_applied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applied(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StackableOnlineGift::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 online_day_num = 1;
    if (has_online_day_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_day_num());
    }
    
    // required int32 pack_id = 2;
    if (has_pack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_id());
    }
    
    // required int32 applied = 3;
    if (has_applied()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applied());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackableOnlineGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StackableOnlineGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StackableOnlineGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StackableOnlineGift::MergeFrom(const StackableOnlineGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_day_num()) {
      set_online_day_num(from.online_day_num());
    }
    if (from.has_pack_id()) {
      set_pack_id(from.pack_id());
    }
    if (from.has_applied()) {
      set_applied(from.applied());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StackableOnlineGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackableOnlineGift::CopyFrom(const StackableOnlineGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackableOnlineGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StackableOnlineGift::Swap(StackableOnlineGift* other) {
  if (other != this) {
    std::swap(online_day_num_, other->online_day_num_);
    std::swap(pack_id_, other->pack_id_);
    std::swap(applied_, other->applied_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StackableOnlineGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackableOnlineGift_descriptor_;
  metadata.reflection = StackableOnlineGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStackableOnlineGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetStackableOnlineGiftResponse::GetStackableOnlineGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStackableOnlineGiftResponse::InitAsDefaultInstance() {
}

GetStackableOnlineGiftResponse::GetStackableOnlineGiftResponse(const GetStackableOnlineGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStackableOnlineGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStackableOnlineGiftResponse::~GetStackableOnlineGiftResponse() {
  SharedDtor();
}

void GetStackableOnlineGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStackableOnlineGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStackableOnlineGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStackableOnlineGiftResponse_descriptor_;
}

const GetStackableOnlineGiftResponse& GetStackableOnlineGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetStackableOnlineGiftResponse* GetStackableOnlineGiftResponse::default_instance_ = NULL;

GetStackableOnlineGiftResponse* GetStackableOnlineGiftResponse::New() const {
  return new GetStackableOnlineGiftResponse;
}

void GetStackableOnlineGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStackableOnlineGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStackableOnlineGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStackableOnlineGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStackableOnlineGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStackableOnlineGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStackableOnlineGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStackableOnlineGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStackableOnlineGiftResponse::MergeFrom(const GetStackableOnlineGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStackableOnlineGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStackableOnlineGiftResponse::CopyFrom(const GetStackableOnlineGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStackableOnlineGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetStackableOnlineGiftResponse::Swap(GetStackableOnlineGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStackableOnlineGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStackableOnlineGiftResponse_descriptor_;
  metadata.reflection = GetStackableOnlineGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StackableOnlineGiftUpdateNotify::kGiftsFieldNumber;
#endif  // !_MSC_VER

StackableOnlineGiftUpdateNotify::StackableOnlineGiftUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StackableOnlineGiftUpdateNotify::InitAsDefaultInstance() {
}

StackableOnlineGiftUpdateNotify::StackableOnlineGiftUpdateNotify(const StackableOnlineGiftUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StackableOnlineGiftUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StackableOnlineGiftUpdateNotify::~StackableOnlineGiftUpdateNotify() {
  SharedDtor();
}

void StackableOnlineGiftUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StackableOnlineGiftUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StackableOnlineGiftUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StackableOnlineGiftUpdateNotify_descriptor_;
}

const StackableOnlineGiftUpdateNotify& StackableOnlineGiftUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StackableOnlineGiftUpdateNotify* StackableOnlineGiftUpdateNotify::default_instance_ = NULL;

StackableOnlineGiftUpdateNotify* StackableOnlineGiftUpdateNotify::New() const {
  return new StackableOnlineGiftUpdateNotify;
}

void StackableOnlineGiftUpdateNotify::Clear() {
  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StackableOnlineGiftUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.StackableOnlineGift gifts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gifts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StackableOnlineGiftUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.StackableOnlineGift gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gifts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StackableOnlineGiftUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.StackableOnlineGift gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gifts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StackableOnlineGiftUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.StackableOnlineGift gifts = 1;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StackableOnlineGiftUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StackableOnlineGiftUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StackableOnlineGiftUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StackableOnlineGiftUpdateNotify::MergeFrom(const StackableOnlineGiftUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StackableOnlineGiftUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StackableOnlineGiftUpdateNotify::CopyFrom(const StackableOnlineGiftUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackableOnlineGiftUpdateNotify::IsInitialized() const {
  
  for (int i = 0; i < gifts_size(); i++) {
    if (!this->gifts(i).IsInitialized()) return false;
  }
  return true;
}

void StackableOnlineGiftUpdateNotify::Swap(StackableOnlineGiftUpdateNotify* other) {
  if (other != this) {
    gifts_.Swap(&other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StackableOnlineGiftUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StackableOnlineGiftUpdateNotify_descriptor_;
  metadata.reflection = StackableOnlineGiftUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyStackableOnlineGiftRequest::kOnlineDayFieldNumber;
#endif  // !_MSC_VER

ApplyStackableOnlineGiftRequest::ApplyStackableOnlineGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyStackableOnlineGiftRequest::InitAsDefaultInstance() {
}

ApplyStackableOnlineGiftRequest::ApplyStackableOnlineGiftRequest(const ApplyStackableOnlineGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyStackableOnlineGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  online_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyStackableOnlineGiftRequest::~ApplyStackableOnlineGiftRequest() {
  SharedDtor();
}

void ApplyStackableOnlineGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyStackableOnlineGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyStackableOnlineGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyStackableOnlineGiftRequest_descriptor_;
}

const ApplyStackableOnlineGiftRequest& ApplyStackableOnlineGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyStackableOnlineGiftRequest* ApplyStackableOnlineGiftRequest::default_instance_ = NULL;

ApplyStackableOnlineGiftRequest* ApplyStackableOnlineGiftRequest::New() const {
  return new ApplyStackableOnlineGiftRequest;
}

void ApplyStackableOnlineGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyStackableOnlineGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 online_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_day_)));
          set_has_online_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyStackableOnlineGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 online_day = 1;
  if (has_online_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->online_day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyStackableOnlineGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 online_day = 1;
  if (has_online_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->online_day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyStackableOnlineGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 online_day = 1;
    if (has_online_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_day());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyStackableOnlineGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyStackableOnlineGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyStackableOnlineGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyStackableOnlineGiftRequest::MergeFrom(const ApplyStackableOnlineGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_day()) {
      set_online_day(from.online_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyStackableOnlineGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyStackableOnlineGiftRequest::CopyFrom(const ApplyStackableOnlineGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyStackableOnlineGiftRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyStackableOnlineGiftRequest::Swap(ApplyStackableOnlineGiftRequest* other) {
  if (other != this) {
    std::swap(online_day_, other->online_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyStackableOnlineGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyStackableOnlineGiftRequest_descriptor_;
  metadata.reflection = ApplyStackableOnlineGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyStackableOnlineGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyStackableOnlineGiftResponse::ApplyStackableOnlineGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyStackableOnlineGiftResponse::InitAsDefaultInstance() {
}

ApplyStackableOnlineGiftResponse::ApplyStackableOnlineGiftResponse(const ApplyStackableOnlineGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyStackableOnlineGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyStackableOnlineGiftResponse::~ApplyStackableOnlineGiftResponse() {
  SharedDtor();
}

void ApplyStackableOnlineGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyStackableOnlineGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyStackableOnlineGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyStackableOnlineGiftResponse_descriptor_;
}

const ApplyStackableOnlineGiftResponse& ApplyStackableOnlineGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyStackableOnlineGiftResponse* ApplyStackableOnlineGiftResponse::default_instance_ = NULL;

ApplyStackableOnlineGiftResponse* ApplyStackableOnlineGiftResponse::New() const {
  return new ApplyStackableOnlineGiftResponse;
}

void ApplyStackableOnlineGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyStackableOnlineGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyStackableOnlineGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyStackableOnlineGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyStackableOnlineGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyStackableOnlineGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyStackableOnlineGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyStackableOnlineGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyStackableOnlineGiftResponse::MergeFrom(const ApplyStackableOnlineGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyStackableOnlineGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyStackableOnlineGiftResponse::CopyFrom(const ApplyStackableOnlineGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyStackableOnlineGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyStackableOnlineGiftResponse::Swap(ApplyStackableOnlineGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyStackableOnlineGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyStackableOnlineGiftResponse_descriptor_;
  metadata.reflection = ApplyStackableOnlineGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnnouncementNotify::kAnnounceTypeFieldNumber;
const int AnnouncementNotify::kIntParamsFieldNumber;
const int AnnouncementNotify::kPlayersFieldNumber;
const int AnnouncementNotify::kYinglingsFieldNumber;
const int AnnouncementNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

AnnouncementNotify::AnnouncementNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnouncementNotify::InitAsDefaultInstance() {
}

AnnouncementNotify::AnnouncementNotify(const AnnouncementNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnouncementNotify::SharedCtor() {
  _cached_size_ = 0;
  announce_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnouncementNotify::~AnnouncementNotify() {
  SharedDtor();
}

void AnnouncementNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnnouncementNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnouncementNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnouncementNotify_descriptor_;
}

const AnnouncementNotify& AnnouncementNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

AnnouncementNotify* AnnouncementNotify::default_instance_ = NULL;

AnnouncementNotify* AnnouncementNotify::New() const {
  return new AnnouncementNotify;
}

void AnnouncementNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    announce_type_ = 0;
  }
  int_params_.Clear();
  players_.Clear();
  yinglings_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnouncementNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 announce_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &announce_type_)));
          set_has_announce_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_params;
        break;
      }
      
      // repeated int32 int_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_params;
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectTag(34)) goto parse_yinglings;
        break;
      }
      
      // repeated .protocols.common.BuddyDetailInfo yinglings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yinglings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yinglings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yinglings;
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }
      
      // repeated .protocols.common.ItemInfo items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnouncementNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 announce_type = 1;
  if (has_announce_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->announce_type(), output);
  }
  
  // repeated int32 int_params = 2;
  for (int i = 0; i < this->int_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int_params(i), output);
  }
  
  // repeated .protocols.common.PlayerInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }
  
  // repeated .protocols.common.BuddyDetailInfo yinglings = 4;
  for (int i = 0; i < this->yinglings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->yinglings(i), output);
  }
  
  // repeated .protocols.common.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnouncementNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 announce_type = 1;
  if (has_announce_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->announce_type(), target);
  }
  
  // repeated int32 int_params = 2;
  for (int i = 0; i < this->int_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int_params(i), target);
  }
  
  // repeated .protocols.common.PlayerInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }
  
  // repeated .protocols.common.BuddyDetailInfo yinglings = 4;
  for (int i = 0; i < this->yinglings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->yinglings(i), target);
  }
  
  // repeated .protocols.common.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnouncementNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 announce_type = 1;
    if (has_announce_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->announce_type());
    }
    
  }
  // repeated int32 int_params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_params(i));
    }
    total_size += 1 * this->int_params_size() + data_size;
  }
  
  // repeated .protocols.common.PlayerInfo players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  // repeated .protocols.common.BuddyDetailInfo yinglings = 4;
  total_size += 1 * this->yinglings_size();
  for (int i = 0; i < this->yinglings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yinglings(i));
  }
  
  // repeated .protocols.common.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnouncementNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnouncementNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnouncementNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnouncementNotify::MergeFrom(const AnnouncementNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_params_.MergeFrom(from.int_params_);
  players_.MergeFrom(from.players_);
  yinglings_.MergeFrom(from.yinglings_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_announce_type()) {
      set_announce_type(from.announce_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnouncementNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnouncementNotify::CopyFrom(const AnnouncementNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnouncementNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yinglings_size(); i++) {
    if (!this->yinglings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void AnnouncementNotify::Swap(AnnouncementNotify* other) {
  if (other != this) {
    std::swap(announce_type_, other->announce_type_);
    int_params_.Swap(&other->int_params_);
    players_.Swap(&other->players_);
    yinglings_.Swap(&other->yinglings_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnouncementNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnouncementNotify_descriptor_;
  metadata.reflection = AnnouncementNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemUpgradeRequest::kGemIdFieldNumber;
const int GemUpgradeRequest::kGemNumFieldNumber;
const int GemUpgradeRequest::kAutoFillFieldNumber;
#endif  // !_MSC_VER

GemUpgradeRequest::GemUpgradeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemUpgradeRequest::InitAsDefaultInstance() {
}

GemUpgradeRequest::GemUpgradeRequest(const GemUpgradeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemUpgradeRequest::SharedCtor() {
  _cached_size_ = 0;
  gem_id_ = 0;
  gem_num_ = 0;
  auto_fill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemUpgradeRequest::~GemUpgradeRequest() {
  SharedDtor();
}

void GemUpgradeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemUpgradeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemUpgradeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemUpgradeRequest_descriptor_;
}

const GemUpgradeRequest& GemUpgradeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemUpgradeRequest* GemUpgradeRequest::default_instance_ = NULL;

GemUpgradeRequest* GemUpgradeRequest::New() const {
  return new GemUpgradeRequest;
}

void GemUpgradeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_id_ = 0;
    gem_num_ = 0;
    auto_fill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemUpgradeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gem_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_num;
        break;
      }
      
      // optional int32 gem_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_num_)));
          set_has_gem_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_fill;
        break;
      }
      
      // optional bool auto_fill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_fill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_fill_)));
          set_has_auto_fill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemUpgradeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gem_id = 1;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gem_id(), output);
  }
  
  // optional int32 gem_num = 2;
  if (has_gem_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_num(), output);
  }
  
  // optional bool auto_fill = 3;
  if (has_auto_fill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->auto_fill(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemUpgradeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gem_id = 1;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gem_id(), target);
  }
  
  // optional int32 gem_num = 2;
  if (has_gem_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_num(), target);
  }
  
  // optional bool auto_fill = 3;
  if (has_auto_fill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->auto_fill(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemUpgradeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gem_id = 1;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_id());
    }
    
    // optional int32 gem_num = 2;
    if (has_gem_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_num());
    }
    
    // optional bool auto_fill = 3;
    if (has_auto_fill()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemUpgradeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemUpgradeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemUpgradeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemUpgradeRequest::MergeFrom(const GemUpgradeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
    if (from.has_gem_num()) {
      set_gem_num(from.gem_num());
    }
    if (from.has_auto_fill()) {
      set_auto_fill(from.auto_fill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemUpgradeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemUpgradeRequest::CopyFrom(const GemUpgradeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemUpgradeRequest::IsInitialized() const {
  
  return true;
}

void GemUpgradeRequest::Swap(GemUpgradeRequest* other) {
  if (other != this) {
    std::swap(gem_id_, other->gem_id_);
    std::swap(gem_num_, other->gem_num_);
    std::swap(auto_fill_, other->auto_fill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemUpgradeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemUpgradeRequest_descriptor_;
  metadata.reflection = GemUpgradeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemUpgrateResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GemUpgrateResponse::GemUpgrateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemUpgrateResponse::InitAsDefaultInstance() {
}

GemUpgrateResponse::GemUpgrateResponse(const GemUpgrateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemUpgrateResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemUpgrateResponse::~GemUpgrateResponse() {
  SharedDtor();
}

void GemUpgrateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemUpgrateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemUpgrateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemUpgrateResponse_descriptor_;
}

const GemUpgrateResponse& GemUpgrateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemUpgrateResponse* GemUpgrateResponse::default_instance_ = NULL;

GemUpgrateResponse* GemUpgrateResponse::New() const {
  return new GemUpgrateResponse;
}

void GemUpgrateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemUpgrateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemUpgrateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemUpgrateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemUpgrateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemUpgrateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemUpgrateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemUpgrateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemUpgrateResponse::MergeFrom(const GemUpgrateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemUpgrateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemUpgrateResponse::CopyFrom(const GemUpgrateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemUpgrateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GemUpgrateResponse::Swap(GemUpgrateResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemUpgrateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemUpgrateResponse_descriptor_;
  metadata.reflection = GemUpgrateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemInsertRequest::kEquipUidFieldNumber;
const int GemInsertRequest::kSocketIndexFieldNumber;
const int GemInsertRequest::kItemUidFieldNumber;
#endif  // !_MSC_VER

GemInsertRequest::GemInsertRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemInsertRequest::InitAsDefaultInstance() {
}

GemInsertRequest::GemInsertRequest(const GemInsertRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemInsertRequest::SharedCtor() {
  _cached_size_ = 0;
  equip_uid_ = GOOGLE_LONGLONG(0);
  socket_index_ = 0;
  item_uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemInsertRequest::~GemInsertRequest() {
  SharedDtor();
}

void GemInsertRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemInsertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemInsertRequest_descriptor_;
}

const GemInsertRequest& GemInsertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemInsertRequest* GemInsertRequest::default_instance_ = NULL;

GemInsertRequest* GemInsertRequest::New() const {
  return new GemInsertRequest;
}

void GemInsertRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_uid_ = GOOGLE_LONGLONG(0);
    socket_index_ = 0;
    item_uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 equip_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_uid_)));
          set_has_equip_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_socket_index;
        break;
      }
      
      // optional int32 socket_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socket_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_index_)));
          set_has_socket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uid;
        break;
      }
      
      // optional int64 item_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_uid(), output);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->socket_index(), output);
  }
  
  // optional int64 item_uid = 3;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemInsertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_uid(), target);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->socket_index(), target);
  }
  
  // optional int64 item_uid = 3;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemInsertRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 equip_uid = 1;
    if (has_equip_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_uid());
    }
    
    // optional int32 socket_index = 2;
    if (has_socket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_index());
    }
    
    // optional int64 item_uid = 3;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemInsertRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemInsertRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemInsertRequest::MergeFrom(const GemInsertRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_uid()) {
      set_equip_uid(from.equip_uid());
    }
    if (from.has_socket_index()) {
      set_socket_index(from.socket_index());
    }
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemInsertRequest::CopyFrom(const GemInsertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemInsertRequest::IsInitialized() const {
  
  return true;
}

void GemInsertRequest::Swap(GemInsertRequest* other) {
  if (other != this) {
    std::swap(equip_uid_, other->equip_uid_);
    std::swap(socket_index_, other->socket_index_);
    std::swap(item_uid_, other->item_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemInsertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemInsertRequest_descriptor_;
  metadata.reflection = GemInsertRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemInsertResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GemInsertResponse::GemInsertResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemInsertResponse::InitAsDefaultInstance() {
}

GemInsertResponse::GemInsertResponse(const GemInsertResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemInsertResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemInsertResponse::~GemInsertResponse() {
  SharedDtor();
}

void GemInsertResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemInsertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemInsertResponse_descriptor_;
}

const GemInsertResponse& GemInsertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemInsertResponse* GemInsertResponse::default_instance_ = NULL;

GemInsertResponse* GemInsertResponse::New() const {
  return new GemInsertResponse;
}

void GemInsertResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemInsertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemInsertResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemInsertResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemInsertResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemInsertResponse::MergeFrom(const GemInsertResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemInsertResponse::CopyFrom(const GemInsertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemInsertResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GemInsertResponse::Swap(GemInsertResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemInsertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemInsertResponse_descriptor_;
  metadata.reflection = GemInsertResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemRemoveRequest::kEquipUidFieldNumber;
const int GemRemoveRequest::kSocketIndexFieldNumber;
#endif  // !_MSC_VER

GemRemoveRequest::GemRemoveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemRemoveRequest::InitAsDefaultInstance() {
}

GemRemoveRequest::GemRemoveRequest(const GemRemoveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemRemoveRequest::SharedCtor() {
  _cached_size_ = 0;
  equip_uid_ = GOOGLE_LONGLONG(0);
  socket_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemRemoveRequest::~GemRemoveRequest() {
  SharedDtor();
}

void GemRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemRemoveRequest_descriptor_;
}

const GemRemoveRequest& GemRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemRemoveRequest* GemRemoveRequest::default_instance_ = NULL;

GemRemoveRequest* GemRemoveRequest::New() const {
  return new GemRemoveRequest;
}

void GemRemoveRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_uid_ = GOOGLE_LONGLONG(0);
    socket_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 equip_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_uid_)));
          set_has_equip_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_socket_index;
        break;
      }
      
      // optional int32 socket_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socket_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_index_)));
          set_has_socket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_uid(), output);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->socket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_uid(), target);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->socket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemRemoveRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 equip_uid = 1;
    if (has_equip_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_uid());
    }
    
    // optional int32 socket_index = 2;
    if (has_socket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemRemoveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemRemoveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemRemoveRequest::MergeFrom(const GemRemoveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_uid()) {
      set_equip_uid(from.equip_uid());
    }
    if (from.has_socket_index()) {
      set_socket_index(from.socket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemRemoveRequest::CopyFrom(const GemRemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemRemoveRequest::IsInitialized() const {
  
  return true;
}

void GemRemoveRequest::Swap(GemRemoveRequest* other) {
  if (other != this) {
    std::swap(equip_uid_, other->equip_uid_);
    std::swap(socket_index_, other->socket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemRemoveRequest_descriptor_;
  metadata.reflection = GemRemoveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemRemoveResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GemRemoveResponse::GemRemoveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemRemoveResponse::InitAsDefaultInstance() {
}

GemRemoveResponse::GemRemoveResponse(const GemRemoveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemRemoveResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemRemoveResponse::~GemRemoveResponse() {
  SharedDtor();
}

void GemRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemRemoveResponse_descriptor_;
}

const GemRemoveResponse& GemRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GemRemoveResponse* GemRemoveResponse::default_instance_ = NULL;

GemRemoveResponse* GemRemoveResponse::New() const {
  return new GemRemoveResponse;
}

void GemRemoveResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemRemoveResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemRemoveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemRemoveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemRemoveResponse::MergeFrom(const GemRemoveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemRemoveResponse::CopyFrom(const GemRemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemRemoveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GemRemoveResponse::Swap(GemRemoveResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemRemoveResponse_descriptor_;
  metadata.reflection = GemRemoveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeSocketRequest::kEquipUidFieldNumber;
const int MakeSocketRequest::kSocketIndexFieldNumber;
#endif  // !_MSC_VER

MakeSocketRequest::MakeSocketRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeSocketRequest::InitAsDefaultInstance() {
}

MakeSocketRequest::MakeSocketRequest(const MakeSocketRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeSocketRequest::SharedCtor() {
  _cached_size_ = 0;
  equip_uid_ = GOOGLE_LONGLONG(0);
  socket_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeSocketRequest::~MakeSocketRequest() {
  SharedDtor();
}

void MakeSocketRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeSocketRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeSocketRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeSocketRequest_descriptor_;
}

const MakeSocketRequest& MakeSocketRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

MakeSocketRequest* MakeSocketRequest::default_instance_ = NULL;

MakeSocketRequest* MakeSocketRequest::New() const {
  return new MakeSocketRequest;
}

void MakeSocketRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_uid_ = GOOGLE_LONGLONG(0);
    socket_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeSocketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 equip_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equip_uid_)));
          set_has_equip_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_socket_index;
        break;
      }
      
      // optional int32 socket_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socket_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_index_)));
          set_has_socket_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeSocketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->equip_uid(), output);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->socket_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeSocketRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 equip_uid = 1;
  if (has_equip_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->equip_uid(), target);
  }
  
  // optional int32 socket_index = 2;
  if (has_socket_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->socket_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeSocketRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 equip_uid = 1;
    if (has_equip_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equip_uid());
    }
    
    // optional int32 socket_index = 2;
    if (has_socket_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeSocketRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeSocketRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeSocketRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeSocketRequest::MergeFrom(const MakeSocketRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_uid()) {
      set_equip_uid(from.equip_uid());
    }
    if (from.has_socket_index()) {
      set_socket_index(from.socket_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeSocketRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeSocketRequest::CopyFrom(const MakeSocketRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeSocketRequest::IsInitialized() const {
  
  return true;
}

void MakeSocketRequest::Swap(MakeSocketRequest* other) {
  if (other != this) {
    std::swap(equip_uid_, other->equip_uid_);
    std::swap(socket_index_, other->socket_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeSocketRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeSocketRequest_descriptor_;
  metadata.reflection = MakeSocketRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeSocketResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MakeSocketResponse::MakeSocketResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeSocketResponse::InitAsDefaultInstance() {
}

MakeSocketResponse::MakeSocketResponse(const MakeSocketResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeSocketResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeSocketResponse::~MakeSocketResponse() {
  SharedDtor();
}

void MakeSocketResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeSocketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeSocketResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeSocketResponse_descriptor_;
}

const MakeSocketResponse& MakeSocketResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

MakeSocketResponse* MakeSocketResponse::default_instance_ = NULL;

MakeSocketResponse* MakeSocketResponse::New() const {
  return new MakeSocketResponse;
}

void MakeSocketResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeSocketResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeSocketResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeSocketResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeSocketResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeSocketResponse::MergeFrom(const MakeSocketResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeSocketResponse::CopyFrom(const MakeSocketResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeSocketResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MakeSocketResponse::Swap(MakeSocketResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeSocketResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeSocketResponse_descriptor_;
  metadata.reflection = MakeSocketResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStartupActivityStatusRequest::GetStartupActivityStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStartupActivityStatusRequest::InitAsDefaultInstance() {
}

GetStartupActivityStatusRequest::GetStartupActivityStatusRequest(const GetStartupActivityStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStartupActivityStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStartupActivityStatusRequest::~GetStartupActivityStatusRequest() {
  SharedDtor();
}

void GetStartupActivityStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStartupActivityStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStartupActivityStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStartupActivityStatusRequest_descriptor_;
}

const GetStartupActivityStatusRequest& GetStartupActivityStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetStartupActivityStatusRequest* GetStartupActivityStatusRequest::default_instance_ = NULL;

GetStartupActivityStatusRequest* GetStartupActivityStatusRequest::New() const {
  return new GetStartupActivityStatusRequest;
}

void GetStartupActivityStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStartupActivityStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetStartupActivityStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStartupActivityStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStartupActivityStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStartupActivityStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStartupActivityStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStartupActivityStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStartupActivityStatusRequest::MergeFrom(const GetStartupActivityStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStartupActivityStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStartupActivityStatusRequest::CopyFrom(const GetStartupActivityStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStartupActivityStatusRequest::IsInitialized() const {
  
  return true;
}

void GetStartupActivityStatusRequest::Swap(GetStartupActivityStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStartupActivityStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStartupActivityStatusRequest_descriptor_;
  metadata.reflection = GetStartupActivityStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStartupActivityStatusResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetStartupActivityStatusResponse::GetStartupActivityStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStartupActivityStatusResponse::InitAsDefaultInstance() {
}

GetStartupActivityStatusResponse::GetStartupActivityStatusResponse(const GetStartupActivityStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStartupActivityStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStartupActivityStatusResponse::~GetStartupActivityStatusResponse() {
  SharedDtor();
}

void GetStartupActivityStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStartupActivityStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStartupActivityStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStartupActivityStatusResponse_descriptor_;
}

const GetStartupActivityStatusResponse& GetStartupActivityStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetStartupActivityStatusResponse* GetStartupActivityStatusResponse::default_instance_ = NULL;

GetStartupActivityStatusResponse* GetStartupActivityStatusResponse::New() const {
  return new GetStartupActivityStatusResponse;
}

void GetStartupActivityStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStartupActivityStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStartupActivityStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStartupActivityStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStartupActivityStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStartupActivityStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStartupActivityStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStartupActivityStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStartupActivityStatusResponse::MergeFrom(const GetStartupActivityStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStartupActivityStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStartupActivityStatusResponse::CopyFrom(const GetStartupActivityStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStartupActivityStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetStartupActivityStatusResponse::Swap(GetStartupActivityStatusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStartupActivityStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStartupActivityStatusResponse_descriptor_;
  metadata.reflection = GetStartupActivityStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartupActivityStatus::kActivityTypeFieldNumber;
const int StartupActivityStatus::kStartSecFieldNumber;
const int StartupActivityStatus::kEndSecFieldNumber;
#endif  // !_MSC_VER

StartupActivityStatus::StartupActivityStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartupActivityStatus::InitAsDefaultInstance() {
}

StartupActivityStatus::StartupActivityStatus(const StartupActivityStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartupActivityStatus::SharedCtor() {
  _cached_size_ = 0;
  activity_type_ = 0;
  start_sec_ = 0;
  end_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartupActivityStatus::~StartupActivityStatus() {
  SharedDtor();
}

void StartupActivityStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartupActivityStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartupActivityStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupActivityStatus_descriptor_;
}

const StartupActivityStatus& StartupActivityStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StartupActivityStatus* StartupActivityStatus::default_instance_ = NULL;

StartupActivityStatus* StartupActivityStatus::New() const {
  return new StartupActivityStatus;
}

void StartupActivityStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_type_ = 0;
    start_sec_ = 0;
    end_sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartupActivityStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_type_)));
          set_has_activity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_sec;
        break;
      }
      
      // optional int32 start_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_sec_)));
          set_has_start_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_sec;
        break;
      }
      
      // optional int32 end_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_sec_)));
          set_has_end_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartupActivityStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 activity_type = 1;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_type(), output);
  }
  
  // optional int32 start_sec = 2;
  if (has_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_sec(), output);
  }
  
  // optional int32 end_sec = 3;
  if (has_end_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartupActivityStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 activity_type = 1;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_type(), target);
  }
  
  // optional int32 start_sec = 2;
  if (has_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_sec(), target);
  }
  
  // optional int32 end_sec = 3;
  if (has_end_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartupActivityStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activity_type = 1;
    if (has_activity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_type());
    }
    
    // optional int32 start_sec = 2;
    if (has_start_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_sec());
    }
    
    // optional int32 end_sec = 3;
    if (has_end_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartupActivityStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartupActivityStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartupActivityStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartupActivityStatus::MergeFrom(const StartupActivityStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_start_sec()) {
      set_start_sec(from.start_sec());
    }
    if (from.has_end_sec()) {
      set_end_sec(from.end_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartupActivityStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupActivityStatus::CopyFrom(const StartupActivityStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupActivityStatus::IsInitialized() const {
  
  return true;
}

void StartupActivityStatus::Swap(StartupActivityStatus* other) {
  if (other != this) {
    std::swap(activity_type_, other->activity_type_);
    std::swap(start_sec_, other->start_sec_);
    std::swap(end_sec_, other->end_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartupActivityStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartupActivityStatus_descriptor_;
  metadata.reflection = StartupActivityStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartupActivityStatusNotify::kStatusFieldNumber;
#endif  // !_MSC_VER

StartupActivityStatusNotify::StartupActivityStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartupActivityStatusNotify::InitAsDefaultInstance() {
}

StartupActivityStatusNotify::StartupActivityStatusNotify(const StartupActivityStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartupActivityStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartupActivityStatusNotify::~StartupActivityStatusNotify() {
  SharedDtor();
}

void StartupActivityStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartupActivityStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartupActivityStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupActivityStatusNotify_descriptor_;
}

const StartupActivityStatusNotify& StartupActivityStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

StartupActivityStatusNotify* StartupActivityStatusNotify::default_instance_ = NULL;

StartupActivityStatusNotify* StartupActivityStatusNotify::New() const {
  return new StartupActivityStatusNotify;
}

void StartupActivityStatusNotify::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartupActivityStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.StartupActivityStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartupActivityStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.StartupActivityStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartupActivityStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.StartupActivityStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartupActivityStatusNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.StartupActivityStatus status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartupActivityStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartupActivityStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartupActivityStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartupActivityStatusNotify::MergeFrom(const StartupActivityStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartupActivityStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartupActivityStatusNotify::CopyFrom(const StartupActivityStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartupActivityStatusNotify::IsInitialized() const {
  
  return true;
}

void StartupActivityStatusNotify::Swap(StartupActivityStatusNotify* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartupActivityStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartupActivityStatusNotify_descriptor_;
  metadata.reflection = StartupActivityStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildCrystalStatusRequest::GetGuildCrystalStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildCrystalStatusRequest::InitAsDefaultInstance() {
}

GetGuildCrystalStatusRequest::GetGuildCrystalStatusRequest(const GetGuildCrystalStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildCrystalStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildCrystalStatusRequest::~GetGuildCrystalStatusRequest() {
  SharedDtor();
}

void GetGuildCrystalStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildCrystalStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildCrystalStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildCrystalStatusRequest_descriptor_;
}

const GetGuildCrystalStatusRequest& GetGuildCrystalStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetGuildCrystalStatusRequest* GetGuildCrystalStatusRequest::default_instance_ = NULL;

GetGuildCrystalStatusRequest* GetGuildCrystalStatusRequest::New() const {
  return new GetGuildCrystalStatusRequest;
}

void GetGuildCrystalStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildCrystalStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetGuildCrystalStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildCrystalStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildCrystalStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildCrystalStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildCrystalStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildCrystalStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildCrystalStatusRequest::MergeFrom(const GetGuildCrystalStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildCrystalStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildCrystalStatusRequest::CopyFrom(const GetGuildCrystalStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildCrystalStatusRequest::IsInitialized() const {
  
  return true;
}

void GetGuildCrystalStatusRequest::Swap(GetGuildCrystalStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildCrystalStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildCrystalStatusRequest_descriptor_;
  metadata.reflection = GetGuildCrystalStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildCrystalStatusResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetGuildCrystalStatusResponse::GetGuildCrystalStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildCrystalStatusResponse::InitAsDefaultInstance() {
}

GetGuildCrystalStatusResponse::GetGuildCrystalStatusResponse(const GetGuildCrystalStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildCrystalStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildCrystalStatusResponse::~GetGuildCrystalStatusResponse() {
  SharedDtor();
}

void GetGuildCrystalStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildCrystalStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildCrystalStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildCrystalStatusResponse_descriptor_;
}

const GetGuildCrystalStatusResponse& GetGuildCrystalStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetGuildCrystalStatusResponse* GetGuildCrystalStatusResponse::default_instance_ = NULL;

GetGuildCrystalStatusResponse* GetGuildCrystalStatusResponse::New() const {
  return new GetGuildCrystalStatusResponse;
}

void GetGuildCrystalStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildCrystalStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildCrystalStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildCrystalStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildCrystalStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildCrystalStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildCrystalStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildCrystalStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildCrystalStatusResponse::MergeFrom(const GetGuildCrystalStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildCrystalStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildCrystalStatusResponse::CopyFrom(const GetGuildCrystalStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildCrystalStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetGuildCrystalStatusResponse::Swap(GetGuildCrystalStatusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildCrystalStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildCrystalStatusResponse_descriptor_;
  metadata.reflection = GetGuildCrystalStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildStartCrystalTowerActivityRequest::kTowerQualityFieldNumber;
#endif  // !_MSC_VER

GuildStartCrystalTowerActivityRequest::GuildStartCrystalTowerActivityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildStartCrystalTowerActivityRequest::InitAsDefaultInstance() {
}

GuildStartCrystalTowerActivityRequest::GuildStartCrystalTowerActivityRequest(const GuildStartCrystalTowerActivityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildStartCrystalTowerActivityRequest::SharedCtor() {
  _cached_size_ = 0;
  tower_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildStartCrystalTowerActivityRequest::~GuildStartCrystalTowerActivityRequest() {
  SharedDtor();
}

void GuildStartCrystalTowerActivityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildStartCrystalTowerActivityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildStartCrystalTowerActivityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildStartCrystalTowerActivityRequest_descriptor_;
}

const GuildStartCrystalTowerActivityRequest& GuildStartCrystalTowerActivityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildStartCrystalTowerActivityRequest* GuildStartCrystalTowerActivityRequest::default_instance_ = NULL;

GuildStartCrystalTowerActivityRequest* GuildStartCrystalTowerActivityRequest::New() const {
  return new GuildStartCrystalTowerActivityRequest;
}

void GuildStartCrystalTowerActivityRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tower_quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildStartCrystalTowerActivityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tower_quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_quality_)));
          set_has_tower_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildStartCrystalTowerActivityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tower_quality = 1;
  if (has_tower_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tower_quality(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildStartCrystalTowerActivityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tower_quality = 1;
  if (has_tower_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tower_quality(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildStartCrystalTowerActivityRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tower_quality = 1;
    if (has_tower_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_quality());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildStartCrystalTowerActivityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildStartCrystalTowerActivityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildStartCrystalTowerActivityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildStartCrystalTowerActivityRequest::MergeFrom(const GuildStartCrystalTowerActivityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tower_quality()) {
      set_tower_quality(from.tower_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildStartCrystalTowerActivityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildStartCrystalTowerActivityRequest::CopyFrom(const GuildStartCrystalTowerActivityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildStartCrystalTowerActivityRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildStartCrystalTowerActivityRequest::Swap(GuildStartCrystalTowerActivityRequest* other) {
  if (other != this) {
    std::swap(tower_quality_, other->tower_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildStartCrystalTowerActivityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildStartCrystalTowerActivityRequest_descriptor_;
  metadata.reflection = GuildStartCrystalTowerActivityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildStartCrystalTowerActivityResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GuildStartCrystalTowerActivityResponse::GuildStartCrystalTowerActivityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildStartCrystalTowerActivityResponse::InitAsDefaultInstance() {
}

GuildStartCrystalTowerActivityResponse::GuildStartCrystalTowerActivityResponse(const GuildStartCrystalTowerActivityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildStartCrystalTowerActivityResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildStartCrystalTowerActivityResponse::~GuildStartCrystalTowerActivityResponse() {
  SharedDtor();
}

void GuildStartCrystalTowerActivityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildStartCrystalTowerActivityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildStartCrystalTowerActivityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildStartCrystalTowerActivityResponse_descriptor_;
}

const GuildStartCrystalTowerActivityResponse& GuildStartCrystalTowerActivityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildStartCrystalTowerActivityResponse* GuildStartCrystalTowerActivityResponse::default_instance_ = NULL;

GuildStartCrystalTowerActivityResponse* GuildStartCrystalTowerActivityResponse::New() const {
  return new GuildStartCrystalTowerActivityResponse;
}

void GuildStartCrystalTowerActivityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildStartCrystalTowerActivityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildStartCrystalTowerActivityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildStartCrystalTowerActivityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildStartCrystalTowerActivityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildStartCrystalTowerActivityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildStartCrystalTowerActivityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildStartCrystalTowerActivityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildStartCrystalTowerActivityResponse::MergeFrom(const GuildStartCrystalTowerActivityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildStartCrystalTowerActivityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildStartCrystalTowerActivityResponse::CopyFrom(const GuildStartCrystalTowerActivityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildStartCrystalTowerActivityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildStartCrystalTowerActivityResponse::Swap(GuildStartCrystalTowerActivityResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildStartCrystalTowerActivityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildStartCrystalTowerActivityResponse_descriptor_;
  metadata.reflection = GuildStartCrystalTowerActivityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDonateRequest::kMoneyTypeFieldNumber;
const int GuildDonateRequest::kMoneyNumFieldNumber;
#endif  // !_MSC_VER

GuildDonateRequest::GuildDonateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDonateRequest::InitAsDefaultInstance() {
}

GuildDonateRequest::GuildDonateRequest(const GuildDonateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDonateRequest::SharedCtor() {
  _cached_size_ = 0;
  money_type_ = 0;
  money_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDonateRequest::~GuildDonateRequest() {
  SharedDtor();
}

void GuildDonateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDonateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDonateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDonateRequest_descriptor_;
}

const GuildDonateRequest& GuildDonateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildDonateRequest* GuildDonateRequest::default_instance_ = NULL;

GuildDonateRequest* GuildDonateRequest::New() const {
  return new GuildDonateRequest;
}

void GuildDonateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_type_ = 0;
    money_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDonateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_num;
        break;
      }
      
      // required int32 money_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_num_)));
          set_has_money_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDonateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money_type = 1;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money_type(), output);
  }
  
  // required int32 money_num = 2;
  if (has_money_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDonateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 money_type = 1;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money_type(), target);
  }
  
  // required int32 money_num = 2;
  if (has_money_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDonateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money_type = 1;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_type());
    }
    
    // required int32 money_num = 2;
    if (has_money_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDonateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDonateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDonateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDonateRequest::MergeFrom(const GuildDonateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_money_num()) {
      set_money_num(from.money_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDonateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDonateRequest::CopyFrom(const GuildDonateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDonateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GuildDonateRequest::Swap(GuildDonateRequest* other) {
  if (other != this) {
    std::swap(money_type_, other->money_type_);
    std::swap(money_num_, other->money_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDonateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDonateRequest_descriptor_;
  metadata.reflection = GuildDonateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDonateResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GuildDonateResponse::GuildDonateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDonateResponse::InitAsDefaultInstance() {
}

GuildDonateResponse::GuildDonateResponse(const GuildDonateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDonateResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDonateResponse::~GuildDonateResponse() {
  SharedDtor();
}

void GuildDonateResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDonateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDonateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDonateResponse_descriptor_;
}

const GuildDonateResponse& GuildDonateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildDonateResponse* GuildDonateResponse::default_instance_ = NULL;

GuildDonateResponse* GuildDonateResponse::New() const {
  return new GuildDonateResponse;
}

void GuildDonateResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDonateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildDonateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDonateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDonateResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDonateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDonateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDonateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDonateResponse::MergeFrom(const GuildDonateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDonateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDonateResponse::CopyFrom(const GuildDonateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDonateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildDonateResponse::Swap(GuildDonateResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDonateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDonateResponse_descriptor_;
  metadata.reflection = GuildDonateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildContribNotify::kGuildContribFieldNumber;
const int GuildContribNotify::kGuildExpFieldNumber;
const int GuildContribNotify::kGuildMoneyFieldNumber;
#endif  // !_MSC_VER

GuildContribNotify::GuildContribNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildContribNotify::InitAsDefaultInstance() {
}

GuildContribNotify::GuildContribNotify(const GuildContribNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildContribNotify::SharedCtor() {
  _cached_size_ = 0;
  guild_contrib_ = 0;
  guild_exp_ = 0;
  guild_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildContribNotify::~GuildContribNotify() {
  SharedDtor();
}

void GuildContribNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildContribNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildContribNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildContribNotify_descriptor_;
}

const GuildContribNotify& GuildContribNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildContribNotify* GuildContribNotify::default_instance_ = NULL;

GuildContribNotify* GuildContribNotify::New() const {
  return new GuildContribNotify;
}

void GuildContribNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_contrib_ = 0;
    guild_exp_ = 0;
    guild_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildContribNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_contrib = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_contrib_)));
          set_has_guild_contrib();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_exp;
        break;
      }
      
      // optional int32 guild_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_exp_)));
          set_has_guild_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_money;
        break;
      }
      
      // optional int32 guild_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_money_)));
          set_has_guild_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildContribNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_contrib = 1;
  if (has_guild_contrib()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_contrib(), output);
  }
  
  // optional int32 guild_exp = 2;
  if (has_guild_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guild_exp(), output);
  }
  
  // optional int32 guild_money = 3;
  if (has_guild_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildContribNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_contrib = 1;
  if (has_guild_contrib()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_contrib(), target);
  }
  
  // optional int32 guild_exp = 2;
  if (has_guild_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guild_exp(), target);
  }
  
  // optional int32 guild_money = 3;
  if (has_guild_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildContribNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_contrib = 1;
    if (has_guild_contrib()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_contrib());
    }
    
    // optional int32 guild_exp = 2;
    if (has_guild_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_exp());
    }
    
    // optional int32 guild_money = 3;
    if (has_guild_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildContribNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildContribNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildContribNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildContribNotify::MergeFrom(const GuildContribNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_contrib()) {
      set_guild_contrib(from.guild_contrib());
    }
    if (from.has_guild_exp()) {
      set_guild_exp(from.guild_exp());
    }
    if (from.has_guild_money()) {
      set_guild_money(from.guild_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildContribNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildContribNotify::CopyFrom(const GuildContribNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildContribNotify::IsInitialized() const {
  
  return true;
}

void GuildContribNotify::Swap(GuildContribNotify* other) {
  if (other != this) {
    std::swap(guild_contrib_, other->guild_contrib_);
    std::swap(guild_exp_, other->guild_exp_);
    std::swap(guild_money_, other->guild_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildContribNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildContribNotify_descriptor_;
  metadata.reflection = GuildContribNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCrystalTowerActivityNotify::kActivityDataFieldNumber;
#endif  // !_MSC_VER

GuildCrystalTowerActivityNotify::GuildCrystalTowerActivityNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCrystalTowerActivityNotify::InitAsDefaultInstance() {
  activity_data_ = const_cast< ::protocols::common::GuildCrystalTowerActivityData*>(&::protocols::common::GuildCrystalTowerActivityData::default_instance());
}

GuildCrystalTowerActivityNotify::GuildCrystalTowerActivityNotify(const GuildCrystalTowerActivityNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCrystalTowerActivityNotify::SharedCtor() {
  _cached_size_ = 0;
  activity_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCrystalTowerActivityNotify::~GuildCrystalTowerActivityNotify() {
  SharedDtor();
}

void GuildCrystalTowerActivityNotify::SharedDtor() {
  if (this != default_instance_) {
    delete activity_data_;
  }
}

void GuildCrystalTowerActivityNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCrystalTowerActivityNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCrystalTowerActivityNotify_descriptor_;
}

const GuildCrystalTowerActivityNotify& GuildCrystalTowerActivityNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GuildCrystalTowerActivityNotify* GuildCrystalTowerActivityNotify::default_instance_ = NULL;

GuildCrystalTowerActivityNotify* GuildCrystalTowerActivityNotify::New() const {
  return new GuildCrystalTowerActivityNotify;
}

void GuildCrystalTowerActivityNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activity_data()) {
      if (activity_data_ != NULL) activity_data_->::protocols::common::GuildCrystalTowerActivityData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCrystalTowerActivityNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildCrystalTowerActivityData activity_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCrystalTowerActivityNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildCrystalTowerActivityData activity_data = 1;
  if (has_activity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCrystalTowerActivityNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildCrystalTowerActivityData activity_data = 1;
  if (has_activity_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activity_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCrystalTowerActivityNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildCrystalTowerActivityData activity_data = 1;
    if (has_activity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCrystalTowerActivityNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCrystalTowerActivityNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCrystalTowerActivityNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCrystalTowerActivityNotify::MergeFrom(const GuildCrystalTowerActivityNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_data()) {
      mutable_activity_data()->::protocols::common::GuildCrystalTowerActivityData::MergeFrom(from.activity_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCrystalTowerActivityNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCrystalTowerActivityNotify::CopyFrom(const GuildCrystalTowerActivityNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCrystalTowerActivityNotify::IsInitialized() const {
  
  return true;
}

void GuildCrystalTowerActivityNotify::Swap(GuildCrystalTowerActivityNotify* other) {
  if (other != this) {
    std::swap(activity_data_, other->activity_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCrystalTowerActivityNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCrystalTowerActivityNotify_descriptor_;
  metadata.reflection = GuildCrystalTowerActivityNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickGuildCrystalRewardRequest::kItemIndexFieldNumber;
const int PickGuildCrystalRewardRequest::kFinishCollectFieldNumber;
#endif  // !_MSC_VER

PickGuildCrystalRewardRequest::PickGuildCrystalRewardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PickGuildCrystalRewardRequest::InitAsDefaultInstance() {
}

PickGuildCrystalRewardRequest::PickGuildCrystalRewardRequest(const PickGuildCrystalRewardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PickGuildCrystalRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = 0;
  finish_collect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickGuildCrystalRewardRequest::~PickGuildCrystalRewardRequest() {
  SharedDtor();
}

void PickGuildCrystalRewardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickGuildCrystalRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickGuildCrystalRewardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickGuildCrystalRewardRequest_descriptor_;
}

const PickGuildCrystalRewardRequest& PickGuildCrystalRewardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PickGuildCrystalRewardRequest* PickGuildCrystalRewardRequest::default_instance_ = NULL;

PickGuildCrystalRewardRequest* PickGuildCrystalRewardRequest::New() const {
  return new PickGuildCrystalRewardRequest;
}

void PickGuildCrystalRewardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_index_ = 0;
    finish_collect_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickGuildCrystalRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish_collect;
        break;
      }
      
      // optional bool finish_collect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_collect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_collect_)));
          set_has_finish_collect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PickGuildCrystalRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_index(), output);
  }
  
  // optional bool finish_collect = 2;
  if (has_finish_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish_collect(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PickGuildCrystalRewardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_index(), target);
  }
  
  // optional bool finish_collect = 2;
  if (has_finish_collect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish_collect(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PickGuildCrystalRewardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_index = 1;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_index());
    }
    
    // optional bool finish_collect = 2;
    if (has_finish_collect()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickGuildCrystalRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickGuildCrystalRewardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickGuildCrystalRewardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickGuildCrystalRewardRequest::MergeFrom(const PickGuildCrystalRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
    if (from.has_finish_collect()) {
      set_finish_collect(from.finish_collect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickGuildCrystalRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickGuildCrystalRewardRequest::CopyFrom(const PickGuildCrystalRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickGuildCrystalRewardRequest::IsInitialized() const {
  
  return true;
}

void PickGuildCrystalRewardRequest::Swap(PickGuildCrystalRewardRequest* other) {
  if (other != this) {
    std::swap(item_index_, other->item_index_);
    std::swap(finish_collect_, other->finish_collect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickGuildCrystalRewardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickGuildCrystalRewardRequest_descriptor_;
  metadata.reflection = PickGuildCrystalRewardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickGuildCrystalRewardResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PickGuildCrystalRewardResponse::PickGuildCrystalRewardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PickGuildCrystalRewardResponse::InitAsDefaultInstance() {
}

PickGuildCrystalRewardResponse::PickGuildCrystalRewardResponse(const PickGuildCrystalRewardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PickGuildCrystalRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickGuildCrystalRewardResponse::~PickGuildCrystalRewardResponse() {
  SharedDtor();
}

void PickGuildCrystalRewardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickGuildCrystalRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickGuildCrystalRewardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickGuildCrystalRewardResponse_descriptor_;
}

const PickGuildCrystalRewardResponse& PickGuildCrystalRewardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PickGuildCrystalRewardResponse* PickGuildCrystalRewardResponse::default_instance_ = NULL;

PickGuildCrystalRewardResponse* PickGuildCrystalRewardResponse::New() const {
  return new PickGuildCrystalRewardResponse;
}

void PickGuildCrystalRewardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickGuildCrystalRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PickGuildCrystalRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PickGuildCrystalRewardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PickGuildCrystalRewardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickGuildCrystalRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickGuildCrystalRewardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickGuildCrystalRewardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickGuildCrystalRewardResponse::MergeFrom(const PickGuildCrystalRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickGuildCrystalRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickGuildCrystalRewardResponse::CopyFrom(const PickGuildCrystalRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickGuildCrystalRewardResponse::IsInitialized() const {
  
  return true;
}

void PickGuildCrystalRewardResponse::Swap(PickGuildCrystalRewardResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickGuildCrystalRewardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickGuildCrystalRewardResponse_descriptor_;
  metadata.reflection = PickGuildCrystalRewardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickGuildCrystalRewardNotify::kRewardsFieldNumber;
#endif  // !_MSC_VER

PickGuildCrystalRewardNotify::PickGuildCrystalRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PickGuildCrystalRewardNotify::InitAsDefaultInstance() {
}

PickGuildCrystalRewardNotify::PickGuildCrystalRewardNotify(const PickGuildCrystalRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PickGuildCrystalRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickGuildCrystalRewardNotify::~PickGuildCrystalRewardNotify() {
  SharedDtor();
}

void PickGuildCrystalRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickGuildCrystalRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickGuildCrystalRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickGuildCrystalRewardNotify_descriptor_;
}

const PickGuildCrystalRewardNotify& PickGuildCrystalRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PickGuildCrystalRewardNotify* PickGuildCrystalRewardNotify::default_instance_ = NULL;

PickGuildCrystalRewardNotify* PickGuildCrystalRewardNotify::New() const {
  return new PickGuildCrystalRewardNotify;
}

void PickGuildCrystalRewardNotify::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickGuildCrystalRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.GuildCrystalReward rewards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PickGuildCrystalRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PickGuildCrystalRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PickGuildCrystalRewardNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickGuildCrystalRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickGuildCrystalRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickGuildCrystalRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickGuildCrystalRewardNotify::MergeFrom(const PickGuildCrystalRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickGuildCrystalRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickGuildCrystalRewardNotify::CopyFrom(const PickGuildCrystalRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickGuildCrystalRewardNotify::IsInitialized() const {
  
  return true;
}

void PickGuildCrystalRewardNotify::Swap(PickGuildCrystalRewardNotify* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickGuildCrystalRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickGuildCrystalRewardNotify_descriptor_;
  metadata.reflection = PickGuildCrystalRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QueryYouliMapDataRequest::QueryYouliMapDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryYouliMapDataRequest::InitAsDefaultInstance() {
}

QueryYouliMapDataRequest::QueryYouliMapDataRequest(const QueryYouliMapDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryYouliMapDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryYouliMapDataRequest::~QueryYouliMapDataRequest() {
  SharedDtor();
}

void QueryYouliMapDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryYouliMapDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryYouliMapDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryYouliMapDataRequest_descriptor_;
}

const QueryYouliMapDataRequest& QueryYouliMapDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

QueryYouliMapDataRequest* QueryYouliMapDataRequest::default_instance_ = NULL;

QueryYouliMapDataRequest* QueryYouliMapDataRequest::New() const {
  return new QueryYouliMapDataRequest;
}

void QueryYouliMapDataRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryYouliMapDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QueryYouliMapDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryYouliMapDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryYouliMapDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryYouliMapDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryYouliMapDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryYouliMapDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryYouliMapDataRequest::MergeFrom(const QueryYouliMapDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryYouliMapDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryYouliMapDataRequest::CopyFrom(const QueryYouliMapDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryYouliMapDataRequest::IsInitialized() const {
  
  return true;
}

void QueryYouliMapDataRequest::Swap(QueryYouliMapDataRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryYouliMapDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryYouliMapDataRequest_descriptor_;
  metadata.reflection = QueryYouliMapDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryYouliMapDataResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

QueryYouliMapDataResponse::QueryYouliMapDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryYouliMapDataResponse::InitAsDefaultInstance() {
}

QueryYouliMapDataResponse::QueryYouliMapDataResponse(const QueryYouliMapDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryYouliMapDataResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryYouliMapDataResponse::~QueryYouliMapDataResponse() {
  SharedDtor();
}

void QueryYouliMapDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryYouliMapDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryYouliMapDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryYouliMapDataResponse_descriptor_;
}

const QueryYouliMapDataResponse& QueryYouliMapDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

QueryYouliMapDataResponse* QueryYouliMapDataResponse::default_instance_ = NULL;

QueryYouliMapDataResponse* QueryYouliMapDataResponse::New() const {
  return new QueryYouliMapDataResponse;
}

void QueryYouliMapDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryYouliMapDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryYouliMapDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryYouliMapDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryYouliMapDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryYouliMapDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryYouliMapDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryYouliMapDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryYouliMapDataResponse::MergeFrom(const QueryYouliMapDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryYouliMapDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryYouliMapDataResponse::CopyFrom(const QueryYouliMapDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryYouliMapDataResponse::IsInitialized() const {
  
  return true;
}

void QueryYouliMapDataResponse::Swap(QueryYouliMapDataResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryYouliMapDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryYouliMapDataResponse_descriptor_;
  metadata.reflection = QueryYouliMapDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapDataNotify::kMapDataFieldNumber;
#endif  // !_MSC_VER

YouliMapDataNotify::YouliMapDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapDataNotify::InitAsDefaultInstance() {
  map_data_ = const_cast< ::protocols::common::YouLiMapData*>(&::protocols::common::YouLiMapData::default_instance());
}

YouliMapDataNotify::YouliMapDataNotify(const YouliMapDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapDataNotify::SharedCtor() {
  _cached_size_ = 0;
  map_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapDataNotify::~YouliMapDataNotify() {
  SharedDtor();
}

void YouliMapDataNotify::SharedDtor() {
  if (this != default_instance_) {
    delete map_data_;
  }
}

void YouliMapDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapDataNotify_descriptor_;
}

const YouliMapDataNotify& YouliMapDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapDataNotify* YouliMapDataNotify::default_instance_ = NULL;

YouliMapDataNotify* YouliMapDataNotify::New() const {
  return new YouliMapDataNotify;
}

void YouliMapDataNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_map_data()) {
      if (map_data_ != NULL) map_data_->::protocols::common::YouLiMapData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.YouLiMapData map_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.YouLiMapData map_data = 1;
  if (has_map_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.YouLiMapData map_data = 1;
  if (has_map_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapDataNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.YouLiMapData map_data = 1;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapDataNotify::MergeFrom(const YouliMapDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_data()) {
      mutable_map_data()->::protocols::common::YouLiMapData::MergeFrom(from.map_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapDataNotify::CopyFrom(const YouliMapDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapDataNotify::IsInitialized() const {
  
  if (has_map_data()) {
    if (!this->map_data().IsInitialized()) return false;
  }
  return true;
}

void YouliMapDataNotify::Swap(YouliMapDataNotify* other) {
  if (other != this) {
    std::swap(map_data_, other->map_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapDataNotify_descriptor_;
  metadata.reflection = YouliMapDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapDiceRequest::kDiceNumberFieldNumber;
#endif  // !_MSC_VER

YouliMapDiceRequest::YouliMapDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapDiceRequest::InitAsDefaultInstance() {
}

YouliMapDiceRequest::YouliMapDiceRequest(const YouliMapDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  dice_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapDiceRequest::~YouliMapDiceRequest() {
  SharedDtor();
}

void YouliMapDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapDiceRequest_descriptor_;
}

const YouliMapDiceRequest& YouliMapDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapDiceRequest* YouliMapDiceRequest::default_instance_ = NULL;

YouliMapDiceRequest* YouliMapDiceRequest::New() const {
  return new YouliMapDiceRequest;
}

void YouliMapDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dice_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dice_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice_number_)));
          set_has_dice_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dice_number = 1;
  if (has_dice_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dice_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dice_number = 1;
  if (has_dice_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dice_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapDiceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dice_number = 1;
    if (has_dice_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapDiceRequest::MergeFrom(const YouliMapDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dice_number()) {
      set_dice_number(from.dice_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapDiceRequest::CopyFrom(const YouliMapDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapDiceRequest::IsInitialized() const {
  
  return true;
}

void YouliMapDiceRequest::Swap(YouliMapDiceRequest* other) {
  if (other != this) {
    std::swap(dice_number_, other->dice_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapDiceRequest_descriptor_;
  metadata.reflection = YouliMapDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapDiceResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

YouliMapDiceResponse::YouliMapDiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapDiceResponse::InitAsDefaultInstance() {
}

YouliMapDiceResponse::YouliMapDiceResponse(const YouliMapDiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapDiceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapDiceResponse::~YouliMapDiceResponse() {
  SharedDtor();
}

void YouliMapDiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapDiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapDiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapDiceResponse_descriptor_;
}

const YouliMapDiceResponse& YouliMapDiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapDiceResponse* YouliMapDiceResponse::default_instance_ = NULL;

YouliMapDiceResponse* YouliMapDiceResponse::New() const {
  return new YouliMapDiceResponse;
}

void YouliMapDiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapDiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapDiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapDiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapDiceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapDiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapDiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapDiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapDiceResponse::MergeFrom(const YouliMapDiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapDiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapDiceResponse::CopyFrom(const YouliMapDiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapDiceResponse::IsInitialized() const {
  
  return true;
}

void YouliMapDiceResponse::Swap(YouliMapDiceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapDiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapDiceResponse_descriptor_;
  metadata.reflection = YouliMapDiceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapAutoDiceRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

YouliMapAutoDiceRequest::YouliMapAutoDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapAutoDiceRequest::InitAsDefaultInstance() {
}

YouliMapAutoDiceRequest::YouliMapAutoDiceRequest(const YouliMapAutoDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapAutoDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapAutoDiceRequest::~YouliMapAutoDiceRequest() {
  SharedDtor();
}

void YouliMapAutoDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapAutoDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapAutoDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapAutoDiceRequest_descriptor_;
}

const YouliMapAutoDiceRequest& YouliMapAutoDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapAutoDiceRequest* YouliMapAutoDiceRequest::default_instance_ = NULL;

YouliMapAutoDiceRequest* YouliMapAutoDiceRequest::New() const {
  return new YouliMapAutoDiceRequest;
}

void YouliMapAutoDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapAutoDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapAutoDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapAutoDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapAutoDiceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapAutoDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapAutoDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapAutoDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapAutoDiceRequest::MergeFrom(const YouliMapAutoDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapAutoDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapAutoDiceRequest::CopyFrom(const YouliMapAutoDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapAutoDiceRequest::IsInitialized() const {
  
  return true;
}

void YouliMapAutoDiceRequest::Swap(YouliMapAutoDiceRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapAutoDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapAutoDiceRequest_descriptor_;
  metadata.reflection = YouliMapAutoDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapAutoDiceResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

YouliMapAutoDiceResponse::YouliMapAutoDiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapAutoDiceResponse::InitAsDefaultInstance() {
}

YouliMapAutoDiceResponse::YouliMapAutoDiceResponse(const YouliMapAutoDiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapAutoDiceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapAutoDiceResponse::~YouliMapAutoDiceResponse() {
  SharedDtor();
}

void YouliMapAutoDiceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapAutoDiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapAutoDiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapAutoDiceResponse_descriptor_;
}

const YouliMapAutoDiceResponse& YouliMapAutoDiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapAutoDiceResponse* YouliMapAutoDiceResponse::default_instance_ = NULL;

YouliMapAutoDiceResponse* YouliMapAutoDiceResponse::New() const {
  return new YouliMapAutoDiceResponse;
}

void YouliMapAutoDiceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapAutoDiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapAutoDiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapAutoDiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapAutoDiceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapAutoDiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapAutoDiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapAutoDiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapAutoDiceResponse::MergeFrom(const YouliMapAutoDiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapAutoDiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapAutoDiceResponse::CopyFrom(const YouliMapAutoDiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapAutoDiceResponse::IsInitialized() const {
  
  return true;
}

void YouliMapAutoDiceResponse::Swap(YouliMapAutoDiceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapAutoDiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapAutoDiceResponse_descriptor_;
  metadata.reflection = YouliMapAutoDiceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapDiceNotify::kDiceNumberFieldNumber;
const int YouliMapDiceNotify::kGetYouliFieldNumber;
#endif  // !_MSC_VER

YouliMapDiceNotify::YouliMapDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapDiceNotify::InitAsDefaultInstance() {
}

YouliMapDiceNotify::YouliMapDiceNotify(const YouliMapDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  dice_number_ = 0;
  get_youli_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapDiceNotify::~YouliMapDiceNotify() {
  SharedDtor();
}

void YouliMapDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapDiceNotify_descriptor_;
}

const YouliMapDiceNotify& YouliMapDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapDiceNotify* YouliMapDiceNotify::default_instance_ = NULL;

YouliMapDiceNotify* YouliMapDiceNotify::New() const {
  return new YouliMapDiceNotify;
}

void YouliMapDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dice_number_ = 0;
    get_youli_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dice_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice_number_)));
          set_has_dice_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_youli;
        break;
      }
      
      // optional int32 get_youli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_youli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_youli_)));
          set_has_get_youli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dice_number = 1;
  if (has_dice_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dice_number(), output);
  }
  
  // optional int32 get_youli = 2;
  if (has_get_youli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->get_youli(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dice_number = 1;
  if (has_dice_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dice_number(), target);
  }
  
  // optional int32 get_youli = 2;
  if (has_get_youli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->get_youli(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapDiceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dice_number = 1;
    if (has_dice_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice_number());
    }
    
    // optional int32 get_youli = 2;
    if (has_get_youli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_youli());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapDiceNotify::MergeFrom(const YouliMapDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dice_number()) {
      set_dice_number(from.dice_number());
    }
    if (from.has_get_youli()) {
      set_get_youli(from.get_youli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapDiceNotify::CopyFrom(const YouliMapDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapDiceNotify::IsInitialized() const {
  
  return true;
}

void YouliMapDiceNotify::Swap(YouliMapDiceNotify* other) {
  if (other != this) {
    std::swap(dice_number_, other->dice_number_);
    std::swap(get_youli_, other->get_youli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapDiceNotify_descriptor_;
  metadata.reflection = YouliMapDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

YouliMapResetMapRequest::YouliMapResetMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapResetMapRequest::InitAsDefaultInstance() {
}

YouliMapResetMapRequest::YouliMapResetMapRequest(const YouliMapResetMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapResetMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapResetMapRequest::~YouliMapResetMapRequest() {
  SharedDtor();
}

void YouliMapResetMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapResetMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapResetMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapResetMapRequest_descriptor_;
}

const YouliMapResetMapRequest& YouliMapResetMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapResetMapRequest* YouliMapResetMapRequest::default_instance_ = NULL;

YouliMapResetMapRequest* YouliMapResetMapRequest::New() const {
  return new YouliMapResetMapRequest;
}

void YouliMapResetMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapResetMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void YouliMapResetMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapResetMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapResetMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapResetMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapResetMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapResetMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapResetMapRequest::MergeFrom(const YouliMapResetMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapResetMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapResetMapRequest::CopyFrom(const YouliMapResetMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapResetMapRequest::IsInitialized() const {
  
  return true;
}

void YouliMapResetMapRequest::Swap(YouliMapResetMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapResetMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapResetMapRequest_descriptor_;
  metadata.reflection = YouliMapResetMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouliMapResetMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

YouliMapResetMapResponse::YouliMapResetMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouliMapResetMapResponse::InitAsDefaultInstance() {
}

YouliMapResetMapResponse::YouliMapResetMapResponse(const YouliMapResetMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouliMapResetMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouliMapResetMapResponse::~YouliMapResetMapResponse() {
  SharedDtor();
}

void YouliMapResetMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouliMapResetMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouliMapResetMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouliMapResetMapResponse_descriptor_;
}

const YouliMapResetMapResponse& YouliMapResetMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YouliMapResetMapResponse* YouliMapResetMapResponse::default_instance_ = NULL;

YouliMapResetMapResponse* YouliMapResetMapResponse::New() const {
  return new YouliMapResetMapResponse;
}

void YouliMapResetMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouliMapResetMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouliMapResetMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouliMapResetMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouliMapResetMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouliMapResetMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouliMapResetMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouliMapResetMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouliMapResetMapResponse::MergeFrom(const YouliMapResetMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouliMapResetMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouliMapResetMapResponse::CopyFrom(const YouliMapResetMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouliMapResetMapResponse::IsInitialized() const {
  
  return true;
}

void YouliMapResetMapResponse::Swap(YouliMapResetMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouliMapResetMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouliMapResetMapResponse_descriptor_;
  metadata.reflection = YouliMapResetMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CheckGuildCircleRequest::CheckGuildCircleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckGuildCircleRequest::InitAsDefaultInstance() {
}

CheckGuildCircleRequest::CheckGuildCircleRequest(const CheckGuildCircleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckGuildCircleRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckGuildCircleRequest::~CheckGuildCircleRequest() {
  SharedDtor();
}

void CheckGuildCircleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckGuildCircleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckGuildCircleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckGuildCircleRequest_descriptor_;
}

const CheckGuildCircleRequest& CheckGuildCircleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CheckGuildCircleRequest* CheckGuildCircleRequest::default_instance_ = NULL;

CheckGuildCircleRequest* CheckGuildCircleRequest::New() const {
  return new CheckGuildCircleRequest;
}

void CheckGuildCircleRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckGuildCircleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CheckGuildCircleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckGuildCircleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckGuildCircleRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckGuildCircleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckGuildCircleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckGuildCircleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckGuildCircleRequest::MergeFrom(const CheckGuildCircleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckGuildCircleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckGuildCircleRequest::CopyFrom(const CheckGuildCircleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckGuildCircleRequest::IsInitialized() const {
  
  return true;
}

void CheckGuildCircleRequest::Swap(CheckGuildCircleRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckGuildCircleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckGuildCircleRequest_descriptor_;
  metadata.reflection = CheckGuildCircleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckGuildCircleResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

CheckGuildCircleResponse::CheckGuildCircleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckGuildCircleResponse::InitAsDefaultInstance() {
}

CheckGuildCircleResponse::CheckGuildCircleResponse(const CheckGuildCircleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckGuildCircleResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckGuildCircleResponse::~CheckGuildCircleResponse() {
  SharedDtor();
}

void CheckGuildCircleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckGuildCircleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckGuildCircleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckGuildCircleResponse_descriptor_;
}

const CheckGuildCircleResponse& CheckGuildCircleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CheckGuildCircleResponse* CheckGuildCircleResponse::default_instance_ = NULL;

CheckGuildCircleResponse* CheckGuildCircleResponse::New() const {
  return new CheckGuildCircleResponse;
}

void CheckGuildCircleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckGuildCircleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckGuildCircleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckGuildCircleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckGuildCircleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckGuildCircleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckGuildCircleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckGuildCircleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckGuildCircleResponse::MergeFrom(const CheckGuildCircleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckGuildCircleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckGuildCircleResponse::CopyFrom(const CheckGuildCircleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckGuildCircleResponse::IsInitialized() const {
  
  return true;
}

void CheckGuildCircleResponse::Swap(CheckGuildCircleResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckGuildCircleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckGuildCircleResponse_descriptor_;
  metadata.reflection = CheckGuildCircleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeGiftRequest::kGiftFlagFieldNumber;
#endif  // !_MSC_VER

TakeGiftRequest::TakeGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeGiftRequest::InitAsDefaultInstance() {
}

TakeGiftRequest::TakeGiftRequest(const TakeGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  gift_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeGiftRequest::~TakeGiftRequest() {
  SharedDtor();
}

void TakeGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeGiftRequest_descriptor_;
}

const TakeGiftRequest& TakeGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeGiftRequest* TakeGiftRequest::default_instance_ = NULL;

TakeGiftRequest* TakeGiftRequest::New() const {
  return new TakeGiftRequest;
}

void TakeGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gift_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_flag_)));
          set_has_gift_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gift_flag = 1;
  if (has_gift_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gift_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gift_flag = 1;
  if (has_gift_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gift_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gift_flag = 1;
    if (has_gift_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeGiftRequest::MergeFrom(const TakeGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_flag()) {
      set_gift_flag(from.gift_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeGiftRequest::CopyFrom(const TakeGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeGiftRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeGiftRequest::Swap(TakeGiftRequest* other) {
  if (other != this) {
    std::swap(gift_flag_, other->gift_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeGiftRequest_descriptor_;
  metadata.reflection = TakeGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TakeGiftResponse::TakeGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeGiftResponse::InitAsDefaultInstance() {
}

TakeGiftResponse::TakeGiftResponse(const TakeGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeGiftResponse::~TakeGiftResponse() {
  SharedDtor();
}

void TakeGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeGiftResponse_descriptor_;
}

const TakeGiftResponse& TakeGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeGiftResponse* TakeGiftResponse::default_instance_ = NULL;

TakeGiftResponse* TakeGiftResponse::New() const {
  return new TakeGiftResponse;
}

void TakeGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeGiftResponse::MergeFrom(const TakeGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeGiftResponse::CopyFrom(const TakeGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeGiftResponse::Swap(TakeGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeGiftResponse_descriptor_;
  metadata.reflection = TakeGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeamRequest::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

CreateTeamRequest::CreateTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTeamRequest::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

CreateTeamRequest::CreateTeamRequest(const CreateTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeamRequest::~CreateTeamRequest() {
  SharedDtor();
}

void CreateTeamRequest::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void CreateTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeamRequest_descriptor_;
}

const CreateTeamRequest& CreateTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CreateTeamRequest* CreateTeamRequest::default_instance_ = NULL;

CreateTeamRequest* CreateTeamRequest::New() const {
  return new CreateTeamRequest;
}

void CreateTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TeamInfo team_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TeamInfo team_info = 1;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeamRequest::MergeFrom(const CreateTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeamRequest::CopyFrom(const CreateTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void CreateTeamRequest::Swap(CreateTeamRequest* other) {
  if (other != this) {
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeamRequest_descriptor_;
  metadata.reflection = CreateTeamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeamResponse::kErrorCodeFieldNumber;
const int CreateTeamResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

CreateTeamResponse::CreateTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTeamResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

CreateTeamResponse::CreateTeamResponse(const CreateTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeamResponse::~CreateTeamResponse() {
  SharedDtor();
}

void CreateTeamResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void CreateTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeamResponse_descriptor_;
}

const CreateTeamResponse& CreateTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CreateTeamResponse* CreateTeamResponse::default_instance_ = NULL;

CreateTeamResponse* CreateTeamResponse::New() const {
  return new CreateTeamResponse;
}

void CreateTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.TeamInfo team_info = 2;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeamResponse::MergeFrom(const CreateTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeamResponse::CopyFrom(const CreateTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void CreateTeamResponse::Swap(CreateTeamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeamResponse_descriptor_;
  metadata.reflection = CreateTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SearchTeamRequest::SearchTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchTeamRequest::InitAsDefaultInstance() {
}

SearchTeamRequest::SearchTeamRequest(const SearchTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchTeamRequest::~SearchTeamRequest() {
  SharedDtor();
}

void SearchTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTeamRequest_descriptor_;
}

const SearchTeamRequest& SearchTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SearchTeamRequest* SearchTeamRequest::default_instance_ = NULL;

SearchTeamRequest* SearchTeamRequest::New() const {
  return new SearchTeamRequest;
}

void SearchTeamRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SearchTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchTeamRequest::MergeFrom(const SearchTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchTeamRequest::CopyFrom(const SearchTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchTeamRequest::IsInitialized() const {
  
  return true;
}

void SearchTeamRequest::Swap(SearchTeamRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchTeamRequest_descriptor_;
  metadata.reflection = SearchTeamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchTeamResponse::kErrorCodeFieldNumber;
const int SearchTeamResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

SearchTeamResponse::SearchTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchTeamResponse::InitAsDefaultInstance() {
}

SearchTeamResponse::SearchTeamResponse(const SearchTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchTeamResponse::~SearchTeamResponse() {
  SharedDtor();
}

void SearchTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchTeamResponse_descriptor_;
}

const SearchTeamResponse& SearchTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SearchTeamResponse* SearchTeamResponse::default_instance_ = NULL;

SearchTeamResponse* SearchTeamResponse::New() const {
  return new SearchTeamResponse;
}

void SearchTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  team_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }
      
      // repeated .protocols.common.TeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.TeamInfo team_info = 2;
  for (int i = 0; i < this->team_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.TeamInfo team_info = 2;
  for (int i = 0; i < this->team_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.TeamInfo team_info = 2;
  total_size += 1 * this->team_info_size();
  for (int i = 0; i < this->team_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchTeamResponse::MergeFrom(const SearchTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_info_.MergeFrom(from.team_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchTeamResponse::CopyFrom(const SearchTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < team_info_size(); i++) {
    if (!this->team_info(i).IsInitialized()) return false;
  }
  return true;
}

void SearchTeamResponse::Swap(SearchTeamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    team_info_.Swap(&other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchTeamResponse_descriptor_;
  metadata.reflection = SearchTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamLineupSetRequest::kOperationFieldNumber;
const int TeamLineupSetRequest::kTeamBattleSkillIdFieldNumber;
const int TeamLineupSetRequest::kFighterInfoFieldNumber;
#endif  // !_MSC_VER

TeamLineupSetRequest::TeamLineupSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamLineupSetRequest::InitAsDefaultInstance() {
}

TeamLineupSetRequest::TeamLineupSetRequest(const TeamLineupSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamLineupSetRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  team_battle_skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamLineupSetRequest::~TeamLineupSetRequest() {
  SharedDtor();
}

void TeamLineupSetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamLineupSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamLineupSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamLineupSetRequest_descriptor_;
}

const TeamLineupSetRequest& TeamLineupSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamLineupSetRequest* TeamLineupSetRequest::default_instance_ = NULL;

TeamLineupSetRequest* TeamLineupSetRequest::New() const {
  return new TeamLineupSetRequest;
}

void TeamLineupSetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    team_battle_skill_id_ = 0;
  }
  fighter_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamLineupSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TEAM_LINEUP_OPERATION operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_LINEUP_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::TEAM_LINEUP_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_battle_skill_id;
        break;
      }
      
      // optional int32 team_battle_skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_battle_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_battle_skill_id_)));
          set_has_team_battle_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fighter_info;
        break;
      }
      
      // repeated .protocols.common.FighterInfo fighter_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fighter_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamLineupSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TEAM_LINEUP_OPERATION operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // optional int32 team_battle_skill_id = 2;
  if (has_team_battle_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_battle_skill_id(), output);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 3;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fighter_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamLineupSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TEAM_LINEUP_OPERATION operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // optional int32 team_battle_skill_id = 2;
  if (has_team_battle_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_battle_skill_id(), target);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 3;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fighter_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamLineupSetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TEAM_LINEUP_OPERATION operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional int32 team_battle_skill_id = 2;
    if (has_team_battle_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_battle_skill_id());
    }
    
  }
  // repeated .protocols.common.FighterInfo fighter_info = 3;
  total_size += 1 * this->fighter_info_size();
  for (int i = 0; i < this->fighter_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamLineupSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamLineupSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamLineupSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamLineupSetRequest::MergeFrom(const TeamLineupSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighter_info_.MergeFrom(from.fighter_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_team_battle_skill_id()) {
      set_team_battle_skill_id(from.team_battle_skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamLineupSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamLineupSetRequest::CopyFrom(const TeamLineupSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamLineupSetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < fighter_info_size(); i++) {
    if (!this->fighter_info(i).IsInitialized()) return false;
  }
  return true;
}

void TeamLineupSetRequest::Swap(TeamLineupSetRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(team_battle_skill_id_, other->team_battle_skill_id_);
    fighter_info_.Swap(&other->fighter_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamLineupSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamLineupSetRequest_descriptor_;
  metadata.reflection = TeamLineupSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamLineupSetResponse::kErrorCodeFieldNumber;
const int TeamLineupSetResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TeamLineupSetResponse::TeamLineupSetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamLineupSetResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

TeamLineupSetResponse::TeamLineupSetResponse(const TeamLineupSetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamLineupSetResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamLineupSetResponse::~TeamLineupSetResponse() {
  SharedDtor();
}

void TeamLineupSetResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void TeamLineupSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamLineupSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamLineupSetResponse_descriptor_;
}

const TeamLineupSetResponse& TeamLineupSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamLineupSetResponse* TeamLineupSetResponse::default_instance_ = NULL;

TeamLineupSetResponse* TeamLineupSetResponse::New() const {
  return new TeamLineupSetResponse;
}

void TeamLineupSetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamLineupSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamLineupSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamLineupSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamLineupSetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.TeamInfo team_info = 2;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamLineupSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamLineupSetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamLineupSetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamLineupSetResponse::MergeFrom(const TeamLineupSetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamLineupSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamLineupSetResponse::CopyFrom(const TeamLineupSetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamLineupSetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void TeamLineupSetResponse::Swap(TeamLineupSetResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamLineupSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamLineupSetResponse_descriptor_;
  metadata.reflection = TeamLineupSetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSettingModifyRequest::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TeamSettingModifyRequest::TeamSettingModifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamSettingModifyRequest::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

TeamSettingModifyRequest::TeamSettingModifyRequest(const TeamSettingModifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamSettingModifyRequest::SharedCtor() {
  _cached_size_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSettingModifyRequest::~TeamSettingModifyRequest() {
  SharedDtor();
}

void TeamSettingModifyRequest::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void TeamSettingModifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSettingModifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSettingModifyRequest_descriptor_;
}

const TeamSettingModifyRequest& TeamSettingModifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamSettingModifyRequest* TeamSettingModifyRequest::default_instance_ = NULL;

TeamSettingModifyRequest* TeamSettingModifyRequest::New() const {
  return new TeamSettingModifyRequest;
}

void TeamSettingModifyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSettingModifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TeamInfo team_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamSettingModifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamSettingModifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamSettingModifyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TeamInfo team_info = 1;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSettingModifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSettingModifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSettingModifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSettingModifyRequest::MergeFrom(const TeamSettingModifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSettingModifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSettingModifyRequest::CopyFrom(const TeamSettingModifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSettingModifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void TeamSettingModifyRequest::Swap(TeamSettingModifyRequest* other) {
  if (other != this) {
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSettingModifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSettingModifyRequest_descriptor_;
  metadata.reflection = TeamSettingModifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSettingModifyResponse::kErrorCodeFieldNumber;
const int TeamSettingModifyResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TeamSettingModifyResponse::TeamSettingModifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamSettingModifyResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

TeamSettingModifyResponse::TeamSettingModifyResponse(const TeamSettingModifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamSettingModifyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSettingModifyResponse::~TeamSettingModifyResponse() {
  SharedDtor();
}

void TeamSettingModifyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void TeamSettingModifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSettingModifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSettingModifyResponse_descriptor_;
}

const TeamSettingModifyResponse& TeamSettingModifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamSettingModifyResponse* TeamSettingModifyResponse::default_instance_ = NULL;

TeamSettingModifyResponse* TeamSettingModifyResponse::New() const {
  return new TeamSettingModifyResponse;
}

void TeamSettingModifyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSettingModifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamSettingModifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamSettingModifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamSettingModifyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.TeamInfo team_info = 2;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSettingModifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSettingModifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSettingModifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSettingModifyResponse::MergeFrom(const TeamSettingModifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSettingModifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSettingModifyResponse::CopyFrom(const TeamSettingModifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSettingModifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void TeamSettingModifyResponse::Swap(TeamSettingModifyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSettingModifyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSettingModifyResponse_descriptor_;
  metadata.reflection = TeamSettingModifyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamOperationRequest::kOperationFieldNumber;
const int TeamOperationRequest::kObjectGuidFieldNumber;
#endif  // !_MSC_VER

TeamOperationRequest::TeamOperationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamOperationRequest::InitAsDefaultInstance() {
}

TeamOperationRequest::TeamOperationRequest(const TeamOperationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamOperationRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  object_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamOperationRequest::~TeamOperationRequest() {
  SharedDtor();
}

void TeamOperationRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamOperationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamOperationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamOperationRequest_descriptor_;
}

const TeamOperationRequest& TeamOperationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamOperationRequest* TeamOperationRequest::default_instance_ = NULL;

TeamOperationRequest* TeamOperationRequest::New() const {
  return new TeamOperationRequest;
}

void TeamOperationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    object_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamOperationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TEAM_OPERATION operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::TEAM_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_guid;
        break;
      }
      
      // optional int64 object_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamOperationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TEAM_OPERATION operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // optional int64 object_guid = 2;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->object_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamOperationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TEAM_OPERATION operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // optional int64 object_guid = 2;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->object_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamOperationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TEAM_OPERATION operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional int64 object_guid = 2;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamOperationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamOperationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamOperationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamOperationRequest::MergeFrom(const TeamOperationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamOperationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamOperationRequest::CopyFrom(const TeamOperationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOperationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TeamOperationRequest::Swap(TeamOperationRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(object_guid_, other->object_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamOperationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamOperationRequest_descriptor_;
  metadata.reflection = TeamOperationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamOperationResponse::kErrorCodeFieldNumber;
const int TeamOperationResponse::kOperationFieldNumber;
const int TeamOperationResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TeamOperationResponse::TeamOperationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamOperationResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

TeamOperationResponse::TeamOperationResponse(const TeamOperationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamOperationResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  operation_ = 1;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamOperationResponse::~TeamOperationResponse() {
  SharedDtor();
}

void TeamOperationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void TeamOperationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamOperationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamOperationResponse_descriptor_;
}

const TeamOperationResponse& TeamOperationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamOperationResponse* TeamOperationResponse::default_instance_ = NULL;

TeamOperationResponse* TeamOperationResponse::New() const {
  return new TeamOperationResponse;
}

void TeamOperationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    operation_ = 1;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamOperationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // required .protocols.common.TEAM_OPERATION operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::TEAM_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamOperationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required .protocols.common.TEAM_OPERATION operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 3;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamOperationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required .protocols.common.TEAM_OPERATION operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 3;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamOperationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required .protocols.common.TEAM_OPERATION operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional .protocols.common.TeamInfo team_info = 3;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamOperationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamOperationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamOperationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamOperationResponse::MergeFrom(const TeamOperationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamOperationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamOperationResponse::CopyFrom(const TeamOperationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOperationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void TeamOperationResponse::Swap(TeamOperationResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(operation_, other->operation_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamOperationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamOperationResponse_descriptor_;
  metadata.reflection = TeamOperationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamRequest::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamRequest::ApplyJoinTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamRequest::InitAsDefaultInstance() {
}

ApplyJoinTeamRequest::ApplyJoinTeamRequest(const ApplyJoinTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamRequest::~ApplyJoinTeamRequest() {
  SharedDtor();
}

void ApplyJoinTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamRequest_descriptor_;
}

const ApplyJoinTeamRequest& ApplyJoinTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamRequest* ApplyJoinTeamRequest::default_instance_ = NULL;

ApplyJoinTeamRequest* ApplyJoinTeamRequest::New() const {
  return new ApplyJoinTeamRequest;
}

void ApplyJoinTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamRequest::MergeFrom(const ApplyJoinTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamRequest::CopyFrom(const ApplyJoinTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinTeamRequest::Swap(ApplyJoinTeamRequest* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamRequest_descriptor_;
  metadata.reflection = ApplyJoinTeamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamResponse::ApplyJoinTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamResponse::InitAsDefaultInstance() {
}

ApplyJoinTeamResponse::ApplyJoinTeamResponse(const ApplyJoinTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamResponse::~ApplyJoinTeamResponse() {
  SharedDtor();
}

void ApplyJoinTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamResponse_descriptor_;
}

const ApplyJoinTeamResponse& ApplyJoinTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamResponse* ApplyJoinTeamResponse::default_instance_ = NULL;

ApplyJoinTeamResponse* ApplyJoinTeamResponse::New() const {
  return new ApplyJoinTeamResponse;
}

void ApplyJoinTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamResponse::MergeFrom(const ApplyJoinTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamResponse::CopyFrom(const ApplyJoinTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinTeamResponse::Swap(ApplyJoinTeamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamResponse_descriptor_;
  metadata.reflection = ApplyJoinTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamListNotify::kApplierFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamListNotify::ApplyJoinTeamListNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamListNotify::InitAsDefaultInstance() {
}

ApplyJoinTeamListNotify::ApplyJoinTeamListNotify(const ApplyJoinTeamListNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamListNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamListNotify::~ApplyJoinTeamListNotify() {
  SharedDtor();
}

void ApplyJoinTeamListNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamListNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamListNotify_descriptor_;
}

const ApplyJoinTeamListNotify& ApplyJoinTeamListNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamListNotify* ApplyJoinTeamListNotify::default_instance_ = NULL;

ApplyJoinTeamListNotify* ApplyJoinTeamListNotify::New() const {
  return new ApplyJoinTeamListNotify;
}

void ApplyJoinTeamListNotify::Clear() {
  applier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.TeamMemberInfo applier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applier;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.TeamMemberInfo applier = 1;
  for (int i = 0; i < this->applier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applier(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamListNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.TeamMemberInfo applier = 1;
  for (int i = 0; i < this->applier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applier(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamListNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.TeamMemberInfo applier = 1;
  total_size += 1 * this->applier_size();
  for (int i = 0; i < this->applier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applier(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamListNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamListNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamListNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamListNotify::MergeFrom(const ApplyJoinTeamListNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  applier_.MergeFrom(from.applier_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamListNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamListNotify::CopyFrom(const ApplyJoinTeamListNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamListNotify::IsInitialized() const {
  
  for (int i = 0; i < applier_size(); i++) {
    if (!this->applier(i).IsInitialized()) return false;
  }
  return true;
}

void ApplyJoinTeamListNotify::Swap(ApplyJoinTeamListNotify* other) {
  if (other != this) {
    applier_.Swap(&other->applier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamListNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamListNotify_descriptor_;
  metadata.reflection = ApplyJoinTeamListNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamReplyRequest::kObjectGuidFieldNumber;
const int ApplyJoinTeamReplyRequest::kResultFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamReplyRequest::ApplyJoinTeamReplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamReplyRequest::InitAsDefaultInstance() {
}

ApplyJoinTeamReplyRequest::ApplyJoinTeamReplyRequest(const ApplyJoinTeamReplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = GOOGLE_LONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamReplyRequest::~ApplyJoinTeamReplyRequest() {
  SharedDtor();
}

void ApplyJoinTeamReplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamReplyRequest_descriptor_;
}

const ApplyJoinTeamReplyRequest& ApplyJoinTeamReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamReplyRequest* ApplyJoinTeamReplyRequest::default_instance_ = NULL;

ApplyJoinTeamReplyRequest* ApplyJoinTeamReplyRequest::New() const {
  return new ApplyJoinTeamReplyRequest;
}

void ApplyJoinTeamReplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_guid_ = GOOGLE_LONGLONG(0);
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required .protocols.common.TEAM_APPLY_RESULT result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_APPLY_RESULT_IsValid(value)) {
            set_result(static_cast< protocols::common::TEAM_APPLY_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->object_guid(), output);
  }
  
  // required .protocols.common.TEAM_APPLY_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamReplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->object_guid(), target);
  }
  
  // required .protocols.common.TEAM_APPLY_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamReplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
    // required .protocols.common.TEAM_APPLY_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamReplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamReplyRequest::MergeFrom(const ApplyJoinTeamReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamReplyRequest::CopyFrom(const ApplyJoinTeamReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamReplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ApplyJoinTeamReplyRequest::Swap(ApplyJoinTeamReplyRequest* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamReplyRequest_descriptor_;
  metadata.reflection = ApplyJoinTeamReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamReplyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamReplyResponse::ApplyJoinTeamReplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamReplyResponse::InitAsDefaultInstance() {
}

ApplyJoinTeamReplyResponse::ApplyJoinTeamReplyResponse(const ApplyJoinTeamReplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamReplyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamReplyResponse::~ApplyJoinTeamReplyResponse() {
  SharedDtor();
}

void ApplyJoinTeamReplyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamReplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamReplyResponse_descriptor_;
}

const ApplyJoinTeamReplyResponse& ApplyJoinTeamReplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamReplyResponse* ApplyJoinTeamReplyResponse::default_instance_ = NULL;

ApplyJoinTeamReplyResponse* ApplyJoinTeamReplyResponse::New() const {
  return new ApplyJoinTeamReplyResponse;
}

void ApplyJoinTeamReplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamReplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamReplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamReplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamReplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamReplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamReplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamReplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamReplyResponse::MergeFrom(const ApplyJoinTeamReplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamReplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamReplyResponse::CopyFrom(const ApplyJoinTeamReplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamReplyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinTeamReplyResponse::Swap(ApplyJoinTeamReplyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamReplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamReplyResponse_descriptor_;
  metadata.reflection = ApplyJoinTeamReplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamReplyNotify::kLeaderGuidFieldNumber;
const int ApplyJoinTeamReplyNotify::kLeaderNameFieldNumber;
const int ApplyJoinTeamReplyNotify::kResultFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamReplyNotify::ApplyJoinTeamReplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamReplyNotify::InitAsDefaultInstance() {
}

ApplyJoinTeamReplyNotify::ApplyJoinTeamReplyNotify(const ApplyJoinTeamReplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamReplyNotify::SharedCtor() {
  _cached_size_ = 0;
  leader_guid_ = GOOGLE_LONGLONG(0);
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamReplyNotify::~ApplyJoinTeamReplyNotify() {
  SharedDtor();
}

void ApplyJoinTeamReplyNotify::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamReplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamReplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamReplyNotify_descriptor_;
}

const ApplyJoinTeamReplyNotify& ApplyJoinTeamReplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ApplyJoinTeamReplyNotify* ApplyJoinTeamReplyNotify::default_instance_ = NULL;

ApplyJoinTeamReplyNotify* ApplyJoinTeamReplyNotify::New() const {
  return new ApplyJoinTeamReplyNotify;
}

void ApplyJoinTeamReplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_guid_ = GOOGLE_LONGLONG(0);
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamReplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 leader_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_name;
        break;
      }
      
      // optional string leader_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // optional .protocols.common.TEAM_APPLY_RESULT result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_APPLY_RESULT_IsValid(value)) {
            set_result(static_cast< protocols::common::TEAM_APPLY_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamReplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 leader_guid = 1;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_guid(), output);
  }
  
  // optional string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_name(), output);
  }
  
  // optional .protocols.common.TEAM_APPLY_RESULT result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamReplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 leader_guid = 1;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_guid(), target);
  }
  
  // optional string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_name(), target);
  }
  
  // optional .protocols.common.TEAM_APPLY_RESULT result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamReplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 leader_guid = 1;
    if (has_leader_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // optional string leader_name = 2;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // optional .protocols.common.TEAM_APPLY_RESULT result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamReplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamReplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamReplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamReplyNotify::MergeFrom(const ApplyJoinTeamReplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamReplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamReplyNotify::CopyFrom(const ApplyJoinTeamReplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamReplyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ApplyJoinTeamReplyNotify::Swap(ApplyJoinTeamReplyNotify* other) {
  if (other != this) {
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamReplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamReplyNotify_descriptor_;
  metadata.reflection = ApplyJoinTeamReplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamRequest::kObjectGuidFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamRequest::InviteJoinTeamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamRequest::InitAsDefaultInstance() {
}

InviteJoinTeamRequest::InviteJoinTeamRequest(const InviteJoinTeamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamRequest::~InviteJoinTeamRequest() {
  SharedDtor();
}

void InviteJoinTeamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamRequest_descriptor_;
}

const InviteJoinTeamRequest& InviteJoinTeamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamRequest* InviteJoinTeamRequest::default_instance_ = NULL;

InviteJoinTeamRequest* InviteJoinTeamRequest::New() const {
  return new InviteJoinTeamRequest;
}

void InviteJoinTeamRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->object_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->object_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamRequest::MergeFrom(const InviteJoinTeamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamRequest::CopyFrom(const InviteJoinTeamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinTeamRequest::Swap(InviteJoinTeamRequest* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamRequest_descriptor_;
  metadata.reflection = InviteJoinTeamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamResponse::InviteJoinTeamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamResponse::InitAsDefaultInstance() {
}

InviteJoinTeamResponse::InviteJoinTeamResponse(const InviteJoinTeamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamResponse::~InviteJoinTeamResponse() {
  SharedDtor();
}

void InviteJoinTeamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamResponse_descriptor_;
}

const InviteJoinTeamResponse& InviteJoinTeamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamResponse* InviteJoinTeamResponse::default_instance_ = NULL;

InviteJoinTeamResponse* InviteJoinTeamResponse::New() const {
  return new InviteJoinTeamResponse;
}

void InviteJoinTeamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamResponse::MergeFrom(const InviteJoinTeamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamResponse::CopyFrom(const InviteJoinTeamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinTeamResponse::Swap(InviteJoinTeamResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamResponse_descriptor_;
  metadata.reflection = InviteJoinTeamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamNotify::kInviterNameFieldNumber;
const int InviteJoinTeamNotify::kTeamIdFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamNotify::InviteJoinTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamNotify::InitAsDefaultInstance() {
}

InviteJoinTeamNotify::InviteJoinTeamNotify(const InviteJoinTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamNotify::~InviteJoinTeamNotify() {
  SharedDtor();
}

void InviteJoinTeamNotify::SharedDtor() {
  if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete inviter_name_;
  }
  if (this != default_instance_) {
  }
}

void InviteJoinTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamNotify_descriptor_;
}

const InviteJoinTeamNotify& InviteJoinTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamNotify* InviteJoinTeamNotify::default_instance_ = NULL;

InviteJoinTeamNotify* InviteJoinTeamNotify::New() const {
  return new InviteJoinTeamNotify;
}

void InviteJoinTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inviter_name()) {
      if (inviter_name_ != &::google::protobuf::internal::kEmptyString) {
        inviter_name_->clear();
      }
    }
    team_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string inviter_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // required int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string inviter_name = 1;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->inviter_name(), output);
  }
  
  // required int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string inviter_name = 1;
  if (has_inviter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviter_name(), target);
  }
  
  // required int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string inviter_name = 1;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }
    
    // required int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamNotify::MergeFrom(const InviteJoinTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter_name()) {
      set_inviter_name(from.inviter_name());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamNotify::CopyFrom(const InviteJoinTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void InviteJoinTeamNotify::Swap(InviteJoinTeamNotify* other) {
  if (other != this) {
    std::swap(inviter_name_, other->inviter_name_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamNotify_descriptor_;
  metadata.reflection = InviteJoinTeamNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamReplyRequest::kTeamIdFieldNumber;
const int InviteJoinTeamReplyRequest::kResultFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamReplyRequest::InviteJoinTeamReplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamReplyRequest::InitAsDefaultInstance() {
}

InviteJoinTeamReplyRequest::InviteJoinTeamReplyRequest(const InviteJoinTeamReplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamReplyRequest::~InviteJoinTeamReplyRequest() {
  SharedDtor();
}

void InviteJoinTeamReplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamReplyRequest_descriptor_;
}

const InviteJoinTeamReplyRequest& InviteJoinTeamReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamReplyRequest* InviteJoinTeamReplyRequest::default_instance_ = NULL;

InviteJoinTeamReplyRequest* InviteJoinTeamReplyRequest::New() const {
  return new InviteJoinTeamReplyRequest;
}

void InviteJoinTeamReplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required .protocols.common.TEAM_APPLY_RESULT result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_APPLY_RESULT_IsValid(value)) {
            set_result(static_cast< protocols::common::TEAM_APPLY_RESULT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }
  
  // required .protocols.common.TEAM_APPLY_RESULT result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamReplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }
  
  // required .protocols.common.TEAM_APPLY_RESULT result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamReplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // required .protocols.common.TEAM_APPLY_RESULT result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamReplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamReplyRequest::MergeFrom(const InviteJoinTeamReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamReplyRequest::CopyFrom(const InviteJoinTeamReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamReplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void InviteJoinTeamReplyRequest::Swap(InviteJoinTeamReplyRequest* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamReplyRequest_descriptor_;
  metadata.reflection = InviteJoinTeamReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamReplyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamReplyResponse::InviteJoinTeamReplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamReplyResponse::InitAsDefaultInstance() {
}

InviteJoinTeamReplyResponse::InviteJoinTeamReplyResponse(const InviteJoinTeamReplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamReplyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamReplyResponse::~InviteJoinTeamReplyResponse() {
  SharedDtor();
}

void InviteJoinTeamReplyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamReplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamReplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamReplyResponse_descriptor_;
}

const InviteJoinTeamReplyResponse& InviteJoinTeamReplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamReplyResponse* InviteJoinTeamReplyResponse::default_instance_ = NULL;

InviteJoinTeamReplyResponse* InviteJoinTeamReplyResponse::New() const {
  return new InviteJoinTeamReplyResponse;
}

void InviteJoinTeamReplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamReplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamReplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamReplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamReplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamReplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamReplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamReplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamReplyResponse::MergeFrom(const InviteJoinTeamReplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamReplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamReplyResponse::CopyFrom(const InviteJoinTeamReplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamReplyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinTeamReplyResponse::Swap(InviteJoinTeamReplyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamReplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamReplyResponse_descriptor_;
  metadata.reflection = InviteJoinTeamReplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamReplyNotify::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamReplyNotify::InviteJoinTeamReplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamReplyNotify::InitAsDefaultInstance() {
}

InviteJoinTeamReplyNotify::InviteJoinTeamReplyNotify(const InviteJoinTeamReplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamReplyNotify::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamReplyNotify::~InviteJoinTeamReplyNotify() {
  SharedDtor();
}

void InviteJoinTeamReplyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamReplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamReplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamReplyNotify_descriptor_;
}

const InviteJoinTeamReplyNotify& InviteJoinTeamReplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InviteJoinTeamReplyNotify* InviteJoinTeamReplyNotify::default_instance_ = NULL;

InviteJoinTeamReplyNotify* InviteJoinTeamReplyNotify::New() const {
  return new InviteJoinTeamReplyNotify;
}

void InviteJoinTeamReplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamReplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamReplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamReplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamReplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamReplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamReplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamReplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamReplyNotify::MergeFrom(const InviteJoinTeamReplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamReplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamReplyNotify::CopyFrom(const InviteJoinTeamReplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamReplyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteJoinTeamReplyNotify::Swap(InviteJoinTeamReplyNotify* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamReplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamReplyNotify_descriptor_;
  metadata.reflection = InviteJoinTeamReplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTeamDetailInfoRequest::GetTeamDetailInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTeamDetailInfoRequest::InitAsDefaultInstance() {
}

GetTeamDetailInfoRequest::GetTeamDetailInfoRequest(const GetTeamDetailInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTeamDetailInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTeamDetailInfoRequest::~GetTeamDetailInfoRequest() {
  SharedDtor();
}

void GetTeamDetailInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTeamDetailInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTeamDetailInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTeamDetailInfoRequest_descriptor_;
}

const GetTeamDetailInfoRequest& GetTeamDetailInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetTeamDetailInfoRequest* GetTeamDetailInfoRequest::default_instance_ = NULL;

GetTeamDetailInfoRequest* GetTeamDetailInfoRequest::New() const {
  return new GetTeamDetailInfoRequest;
}

void GetTeamDetailInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTeamDetailInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTeamDetailInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTeamDetailInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTeamDetailInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTeamDetailInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTeamDetailInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTeamDetailInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTeamDetailInfoRequest::MergeFrom(const GetTeamDetailInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTeamDetailInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTeamDetailInfoRequest::CopyFrom(const GetTeamDetailInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTeamDetailInfoRequest::IsInitialized() const {
  
  return true;
}

void GetTeamDetailInfoRequest::Swap(GetTeamDetailInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTeamDetailInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTeamDetailInfoRequest_descriptor_;
  metadata.reflection = GetTeamDetailInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecruitTeamMemberRequest::RecruitTeamMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecruitTeamMemberRequest::InitAsDefaultInstance() {
}

RecruitTeamMemberRequest::RecruitTeamMemberRequest(const RecruitTeamMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecruitTeamMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecruitTeamMemberRequest::~RecruitTeamMemberRequest() {
  SharedDtor();
}

void RecruitTeamMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecruitTeamMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecruitTeamMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecruitTeamMemberRequest_descriptor_;
}

const RecruitTeamMemberRequest& RecruitTeamMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RecruitTeamMemberRequest* RecruitTeamMemberRequest::default_instance_ = NULL;

RecruitTeamMemberRequest* RecruitTeamMemberRequest::New() const {
  return new RecruitTeamMemberRequest;
}

void RecruitTeamMemberRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecruitTeamMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecruitTeamMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecruitTeamMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecruitTeamMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecruitTeamMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecruitTeamMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecruitTeamMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecruitTeamMemberRequest::MergeFrom(const RecruitTeamMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecruitTeamMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecruitTeamMemberRequest::CopyFrom(const RecruitTeamMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitTeamMemberRequest::IsInitialized() const {
  
  return true;
}

void RecruitTeamMemberRequest::Swap(RecruitTeamMemberRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecruitTeamMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecruitTeamMemberRequest_descriptor_;
  metadata.reflection = RecruitTeamMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamPlayerKickedOutNotify::TeamPlayerKickedOutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPlayerKickedOutNotify::InitAsDefaultInstance() {
}

TeamPlayerKickedOutNotify::TeamPlayerKickedOutNotify(const TeamPlayerKickedOutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPlayerKickedOutNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPlayerKickedOutNotify::~TeamPlayerKickedOutNotify() {
  SharedDtor();
}

void TeamPlayerKickedOutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPlayerKickedOutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPlayerKickedOutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPlayerKickedOutNotify_descriptor_;
}

const TeamPlayerKickedOutNotify& TeamPlayerKickedOutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamPlayerKickedOutNotify* TeamPlayerKickedOutNotify::default_instance_ = NULL;

TeamPlayerKickedOutNotify* TeamPlayerKickedOutNotify::New() const {
  return new TeamPlayerKickedOutNotify;
}

void TeamPlayerKickedOutNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPlayerKickedOutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamPlayerKickedOutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPlayerKickedOutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPlayerKickedOutNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPlayerKickedOutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPlayerKickedOutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPlayerKickedOutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPlayerKickedOutNotify::MergeFrom(const TeamPlayerKickedOutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPlayerKickedOutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPlayerKickedOutNotify::CopyFrom(const TeamPlayerKickedOutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPlayerKickedOutNotify::IsInitialized() const {
  
  return true;
}

void TeamPlayerKickedOutNotify::Swap(TeamPlayerKickedOutNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPlayerKickedOutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPlayerKickedOutNotify_descriptor_;
  metadata.reflection = TeamPlayerKickedOutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecruitTeamMemberResponse::kNearbyPlayerFieldNumber;
#endif  // !_MSC_VER

RecruitTeamMemberResponse::RecruitTeamMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecruitTeamMemberResponse::InitAsDefaultInstance() {
}

RecruitTeamMemberResponse::RecruitTeamMemberResponse(const RecruitTeamMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecruitTeamMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecruitTeamMemberResponse::~RecruitTeamMemberResponse() {
  SharedDtor();
}

void RecruitTeamMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecruitTeamMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecruitTeamMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecruitTeamMemberResponse_descriptor_;
}

const RecruitTeamMemberResponse& RecruitTeamMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RecruitTeamMemberResponse* RecruitTeamMemberResponse::default_instance_ = NULL;

RecruitTeamMemberResponse* RecruitTeamMemberResponse::New() const {
  return new RecruitTeamMemberResponse;
}

void RecruitTeamMemberResponse::Clear() {
  nearby_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecruitTeamMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.TeamMemberInfo nearby_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nearby_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nearby_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nearby_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecruitTeamMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.TeamMemberInfo nearby_player = 1;
  for (int i = 0; i < this->nearby_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nearby_player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecruitTeamMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.TeamMemberInfo nearby_player = 1;
  for (int i = 0; i < this->nearby_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nearby_player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecruitTeamMemberResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.TeamMemberInfo nearby_player = 1;
  total_size += 1 * this->nearby_player_size();
  for (int i = 0; i < this->nearby_player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nearby_player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecruitTeamMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecruitTeamMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecruitTeamMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecruitTeamMemberResponse::MergeFrom(const RecruitTeamMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  nearby_player_.MergeFrom(from.nearby_player_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecruitTeamMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecruitTeamMemberResponse::CopyFrom(const RecruitTeamMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecruitTeamMemberResponse::IsInitialized() const {
  
  for (int i = 0; i < nearby_player_size(); i++) {
    if (!this->nearby_player(i).IsInitialized()) return false;
  }
  return true;
}

void RecruitTeamMemberResponse::Swap(RecruitTeamMemberResponse* other) {
  if (other != this) {
    nearby_player_.Swap(&other->nearby_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecruitTeamMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecruitTeamMemberResponse_descriptor_;
  metadata.reflection = RecruitTeamMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfoUpdateNotify::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TeamInfoUpdateNotify::TeamInfoUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfoUpdateNotify::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

TeamInfoUpdateNotify::TeamInfoUpdateNotify(const TeamInfoUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfoUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoUpdateNotify::~TeamInfoUpdateNotify() {
  SharedDtor();
}

void TeamInfoUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void TeamInfoUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoUpdateNotify_descriptor_;
}

const TeamInfoUpdateNotify& TeamInfoUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamInfoUpdateNotify* TeamInfoUpdateNotify::default_instance_ = NULL;

TeamInfoUpdateNotify* TeamInfoUpdateNotify::New() const {
  return new TeamInfoUpdateNotify;
}

void TeamInfoUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfoUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TeamInfo team_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfoUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfoUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TeamInfo team_info = 1;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfoUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TeamInfo team_info = 1;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfoUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfoUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfoUpdateNotify::MergeFrom(const TeamInfoUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfoUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfoUpdateNotify::CopyFrom(const TeamInfoUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfoUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void TeamInfoUpdateNotify::Swap(TeamInfoUpdateNotify* other) {
  if (other != this) {
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfoUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoUpdateNotify_descriptor_;
  metadata.reflection = TeamInfoUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncTeamInfoNotify::kSyncTypeFieldNumber;
const int SyncTeamInfoNotify::kTeamIdFieldNumber;
const int SyncTeamInfoNotify::kLeaderGuidFieldNumber;
const int SyncTeamInfoNotify::kMemberGuidFieldNumber;
#endif  // !_MSC_VER

SyncTeamInfoNotify::SyncTeamInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncTeamInfoNotify::InitAsDefaultInstance() {
}

SyncTeamInfoNotify::SyncTeamInfoNotify(const SyncTeamInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncTeamInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  sync_type_ = 1;
  team_id_ = 0;
  leader_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncTeamInfoNotify::~SyncTeamInfoNotify() {
  SharedDtor();
}

void SyncTeamInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncTeamInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncTeamInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncTeamInfoNotify_descriptor_;
}

const SyncTeamInfoNotify& SyncTeamInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SyncTeamInfoNotify* SyncTeamInfoNotify::default_instance_ = NULL;

SyncTeamInfoNotify* SyncTeamInfoNotify::New() const {
  return new SyncTeamInfoNotify;
}

void SyncTeamInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sync_type_ = 1;
    team_id_ = 0;
    leader_guid_ = GOOGLE_LONGLONG(0);
  }
  member_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncTeamInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.SERVER_SYNC_TEAM_TYPE sync_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::SERVER_SYNC_TEAM_TYPE_IsValid(value)) {
            set_sync_type(static_cast< protocols::common::SERVER_SYNC_TEAM_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }
      
      // required int32 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_guid;
        break;
      }
      
      // required int64 leader_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_member_guid;
        break;
      }
      
      // repeated int64 member_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_member_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_member_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_member_guid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncTeamInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.SERVER_SYNC_TEAM_TYPE sync_type = 1;
  if (has_sync_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sync_type(), output);
  }
  
  // required int32 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team_id(), output);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_guid(), output);
  }
  
  // repeated int64 member_guid = 4;
  for (int i = 0; i < this->member_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->member_guid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncTeamInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.SERVER_SYNC_TEAM_TYPE sync_type = 1;
  if (has_sync_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sync_type(), target);
  }
  
  // required int32 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team_id(), target);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_guid(), target);
  }
  
  // repeated int64 member_guid = 4;
  for (int i = 0; i < this->member_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->member_guid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncTeamInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.SERVER_SYNC_TEAM_TYPE sync_type = 1;
    if (has_sync_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_type());
    }
    
    // required int32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // required int64 leader_guid = 3;
    if (has_leader_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
  }
  // repeated int64 member_guid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->member_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->member_guid(i));
    }
    total_size += 1 * this->member_guid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncTeamInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncTeamInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncTeamInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncTeamInfoNotify::MergeFrom(const SyncTeamInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_guid_.MergeFrom(from.member_guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync_type()) {
      set_sync_type(from.sync_type());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncTeamInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTeamInfoNotify::CopyFrom(const SyncTeamInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTeamInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SyncTeamInfoNotify::Swap(SyncTeamInfoNotify* other) {
  if (other != this) {
    std::swap(sync_type_, other->sync_type_);
    std::swap(team_id_, other->team_id_);
    std::swap(leader_guid_, other->leader_guid_);
    member_guid_.Swap(&other->member_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncTeamInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncTeamInfoNotify_descriptor_;
  metadata.reflection = SyncTeamInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetArenaInfoRequest::GetArenaInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetArenaInfoRequest::InitAsDefaultInstance() {
}

GetArenaInfoRequest::GetArenaInfoRequest(const GetArenaInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetArenaInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArenaInfoRequest::~GetArenaInfoRequest() {
  SharedDtor();
}

void GetArenaInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetArenaInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetArenaInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetArenaInfoRequest_descriptor_;
}

const GetArenaInfoRequest& GetArenaInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetArenaInfoRequest* GetArenaInfoRequest::default_instance_ = NULL;

GetArenaInfoRequest* GetArenaInfoRequest::New() const {
  return new GetArenaInfoRequest;
}

void GetArenaInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetArenaInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetArenaInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetArenaInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetArenaInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArenaInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetArenaInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetArenaInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetArenaInfoRequest::MergeFrom(const GetArenaInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetArenaInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArenaInfoRequest::CopyFrom(const GetArenaInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArenaInfoRequest::IsInitialized() const {
  
  return true;
}

void GetArenaInfoRequest::Swap(GetArenaInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetArenaInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetArenaInfoRequest_descriptor_;
  metadata.reflection = GetArenaInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateArenaInfoNotify::kErrorCodeFieldNumber;
const int UpdateArenaInfoNotify::kSelfInfoFieldNumber;
const int UpdateArenaInfoNotify::kTopTenListFieldNumber;
const int UpdateArenaInfoNotify::kChallengeListFieldNumber;
const int UpdateArenaInfoNotify::kBoxIdFieldNumber;
const int UpdateArenaInfoNotify::kIsBoxTakenFieldNumber;
const int UpdateArenaInfoNotify::kTimeNeedToNextRewardsFieldNumber;
const int UpdateArenaInfoNotify::kLeftChallengeTimesFieldNumber;
const int UpdateArenaInfoNotify::kAlreadyBuyTimesTodayFieldNumber;
const int UpdateArenaInfoNotify::kTimeNeedToNewChallengeFieldNumber;
#endif  // !_MSC_VER

UpdateArenaInfoNotify::UpdateArenaInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateArenaInfoNotify::InitAsDefaultInstance() {
  self_info_ = const_cast< ::protocols::common::ArenaPlayerInfo*>(&::protocols::common::ArenaPlayerInfo::default_instance());
}

UpdateArenaInfoNotify::UpdateArenaInfoNotify(const UpdateArenaInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateArenaInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  self_info_ = NULL;
  box_id_ = 0;
  is_box_taken_ = 0;
  time_need_to_next_rewards_ = 0;
  left_challenge_times_ = 0;
  already_buy_times_today_ = 0;
  time_need_to_new_challenge_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateArenaInfoNotify::~UpdateArenaInfoNotify() {
  SharedDtor();
}

void UpdateArenaInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
  }
}

void UpdateArenaInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateArenaInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateArenaInfoNotify_descriptor_;
}

const UpdateArenaInfoNotify& UpdateArenaInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateArenaInfoNotify* UpdateArenaInfoNotify::default_instance_ = NULL;

UpdateArenaInfoNotify* UpdateArenaInfoNotify::New() const {
  return new UpdateArenaInfoNotify;
}

void UpdateArenaInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::protocols::common::ArenaPlayerInfo::Clear();
    }
    box_id_ = 0;
    is_box_taken_ = 0;
    time_need_to_next_rewards_ = 0;
    left_challenge_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    already_buy_times_today_ = 0;
    time_need_to_new_challenge_ = GOOGLE_LONGLONG(0);
  }
  top_ten_list_.Clear();
  challenge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateArenaInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ArenaPlayerInfo self_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_top_ten_list;
        break;
      }
      
      // repeated .protocols.common.ArenaPlayerInfo top_ten_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_ten_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_ten_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_top_ten_list;
        if (input->ExpectTag(26)) goto parse_challenge_list;
        break;
      }
      
      // repeated .protocols.common.ArenaPlayerInfo challenge_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_challenge_list;
        if (input->ExpectTag(32)) goto parse_box_id;
        break;
      }
      
      // optional int32 box_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_id_)));
          set_has_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_box_taken;
        break;
      }
      
      // optional int32 is_box_taken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_box_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_box_taken_)));
          set_has_is_box_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_challenge_times;
        break;
      }
      
      // optional int32 left_challenge_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_challenge_times_)));
          set_has_left_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time_need_to_new_challenge;
        break;
      }
      
      // optional int64 time_need_to_new_challenge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_need_to_new_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_need_to_new_challenge_)));
          set_has_time_need_to_new_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_error_code;
        break;
      }
      
      // required int32 error_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_already_buy_times_today;
        break;
      }
      
      // optional int32 already_buy_times_today = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_buy_times_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_buy_times_today_)));
          set_has_already_buy_times_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_need_to_next_rewards;
        break;
      }
      
      // optional int32 time_need_to_next_rewards = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_need_to_next_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_need_to_next_rewards_)));
          set_has_time_need_to_next_rewards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateArenaInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ArenaPlayerInfo self_info = 1;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_info(), output);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo top_ten_list = 2;
  for (int i = 0; i < this->top_ten_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_ten_list(i), output);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo challenge_list = 3;
  for (int i = 0; i < this->challenge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->challenge_list(i), output);
  }
  
  // optional int32 box_id = 4;
  if (has_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->box_id(), output);
  }
  
  // optional int32 is_box_taken = 5;
  if (has_is_box_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_box_taken(), output);
  }
  
  // optional int32 left_challenge_times = 6;
  if (has_left_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->left_challenge_times(), output);
  }
  
  // optional int64 time_need_to_new_challenge = 7;
  if (has_time_need_to_new_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->time_need_to_new_challenge(), output);
  }
  
  // required int32 error_code = 8;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->error_code(), output);
  }
  
  // optional int32 already_buy_times_today = 9;
  if (has_already_buy_times_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->already_buy_times_today(), output);
  }
  
  // optional int32 time_need_to_next_rewards = 10;
  if (has_time_need_to_next_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_need_to_next_rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateArenaInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ArenaPlayerInfo self_info = 1;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_info(), target);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo top_ten_list = 2;
  for (int i = 0; i < this->top_ten_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_ten_list(i), target);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo challenge_list = 3;
  for (int i = 0; i < this->challenge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->challenge_list(i), target);
  }
  
  // optional int32 box_id = 4;
  if (has_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->box_id(), target);
  }
  
  // optional int32 is_box_taken = 5;
  if (has_is_box_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_box_taken(), target);
  }
  
  // optional int32 left_challenge_times = 6;
  if (has_left_challenge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->left_challenge_times(), target);
  }
  
  // optional int64 time_need_to_new_challenge = 7;
  if (has_time_need_to_new_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->time_need_to_new_challenge(), target);
  }
  
  // required int32 error_code = 8;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->error_code(), target);
  }
  
  // optional int32 already_buy_times_today = 9;
  if (has_already_buy_times_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->already_buy_times_today(), target);
  }
  
  // optional int32 time_need_to_next_rewards = 10;
  if (has_time_need_to_next_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time_need_to_next_rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateArenaInfoNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 8;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required .protocols.common.ArenaPlayerInfo self_info = 1;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }
    
    // optional int32 box_id = 4;
    if (has_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_id());
    }
    
    // optional int32 is_box_taken = 5;
    if (has_is_box_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_box_taken());
    }
    
    // optional int32 time_need_to_next_rewards = 10;
    if (has_time_need_to_next_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_need_to_next_rewards());
    }
    
    // optional int32 left_challenge_times = 6;
    if (has_left_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_challenge_times());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 already_buy_times_today = 9;
    if (has_already_buy_times_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_buy_times_today());
    }
    
    // optional int64 time_need_to_new_challenge = 7;
    if (has_time_need_to_new_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_need_to_new_challenge());
    }
    
  }
  // repeated .protocols.common.ArenaPlayerInfo top_ten_list = 2;
  total_size += 1 * this->top_ten_list_size();
  for (int i = 0; i < this->top_ten_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_ten_list(i));
  }
  
  // repeated .protocols.common.ArenaPlayerInfo challenge_list = 3;
  total_size += 1 * this->challenge_list_size();
  for (int i = 0; i < this->challenge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenge_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateArenaInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateArenaInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateArenaInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateArenaInfoNotify::MergeFrom(const UpdateArenaInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_ten_list_.MergeFrom(from.top_ten_list_);
  challenge_list_.MergeFrom(from.challenge_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_self_info()) {
      mutable_self_info()->::protocols::common::ArenaPlayerInfo::MergeFrom(from.self_info());
    }
    if (from.has_box_id()) {
      set_box_id(from.box_id());
    }
    if (from.has_is_box_taken()) {
      set_is_box_taken(from.is_box_taken());
    }
    if (from.has_time_need_to_next_rewards()) {
      set_time_need_to_next_rewards(from.time_need_to_next_rewards());
    }
    if (from.has_left_challenge_times()) {
      set_left_challenge_times(from.left_challenge_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_already_buy_times_today()) {
      set_already_buy_times_today(from.already_buy_times_today());
    }
    if (from.has_time_need_to_new_challenge()) {
      set_time_need_to_new_challenge(from.time_need_to_new_challenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateArenaInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateArenaInfoNotify::CopyFrom(const UpdateArenaInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateArenaInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_self_info()) {
    if (!this->self_info().IsInitialized()) return false;
  }
  for (int i = 0; i < top_ten_list_size(); i++) {
    if (!this->top_ten_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < challenge_list_size(); i++) {
    if (!this->challenge_list(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateArenaInfoNotify::Swap(UpdateArenaInfoNotify* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(self_info_, other->self_info_);
    top_ten_list_.Swap(&other->top_ten_list_);
    challenge_list_.Swap(&other->challenge_list_);
    std::swap(box_id_, other->box_id_);
    std::swap(is_box_taken_, other->is_box_taken_);
    std::swap(time_need_to_next_rewards_, other->time_need_to_next_rewards_);
    std::swap(left_challenge_times_, other->left_challenge_times_);
    std::swap(already_buy_times_today_, other->already_buy_times_today_);
    std::swap(time_need_to_new_challenge_, other->time_need_to_new_challenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateArenaInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateArenaInfoNotify_descriptor_;
  metadata.reflection = UpdateArenaInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetArenaRankListRequest::GetArenaRankListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetArenaRankListRequest::InitAsDefaultInstance() {
}

GetArenaRankListRequest::GetArenaRankListRequest(const GetArenaRankListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetArenaRankListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArenaRankListRequest::~GetArenaRankListRequest() {
  SharedDtor();
}

void GetArenaRankListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetArenaRankListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetArenaRankListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetArenaRankListRequest_descriptor_;
}

const GetArenaRankListRequest& GetArenaRankListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetArenaRankListRequest* GetArenaRankListRequest::default_instance_ = NULL;

GetArenaRankListRequest* GetArenaRankListRequest::New() const {
  return new GetArenaRankListRequest;
}

void GetArenaRankListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetArenaRankListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetArenaRankListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetArenaRankListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetArenaRankListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArenaRankListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetArenaRankListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetArenaRankListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetArenaRankListRequest::MergeFrom(const GetArenaRankListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetArenaRankListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArenaRankListRequest::CopyFrom(const GetArenaRankListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArenaRankListRequest::IsInitialized() const {
  
  return true;
}

void GetArenaRankListRequest::Swap(GetArenaRankListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetArenaRankListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetArenaRankListRequest_descriptor_;
  metadata.reflection = GetArenaRankListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetArenaRankListResponse::kErrorCodeFieldNumber;
const int GetArenaRankListResponse::kRankListFieldNumber;
#endif  // !_MSC_VER

GetArenaRankListResponse::GetArenaRankListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetArenaRankListResponse::InitAsDefaultInstance() {
}

GetArenaRankListResponse::GetArenaRankListResponse(const GetArenaRankListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetArenaRankListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetArenaRankListResponse::~GetArenaRankListResponse() {
  SharedDtor();
}

void GetArenaRankListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetArenaRankListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetArenaRankListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetArenaRankListResponse_descriptor_;
}

const GetArenaRankListResponse& GetArenaRankListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetArenaRankListResponse* GetArenaRankListResponse::default_instance_ = NULL;

GetArenaRankListResponse* GetArenaRankListResponse::New() const {
  return new GetArenaRankListResponse;
}

void GetArenaRankListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetArenaRankListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        break;
      }
      
      // repeated .protocols.common.ArenaPlayerInfo rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetArenaRankListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetArenaRankListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ArenaPlayerInfo rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetArenaRankListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ArenaPlayerInfo rank_list = 2;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetArenaRankListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetArenaRankListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetArenaRankListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetArenaRankListResponse::MergeFrom(const GetArenaRankListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetArenaRankListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetArenaRankListResponse::CopyFrom(const GetArenaRankListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetArenaRankListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < rank_list_size(); i++) {
    if (!this->rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetArenaRankListResponse::Swap(GetArenaRankListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetArenaRankListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetArenaRankListResponse_descriptor_;
  metadata.reflection = GetArenaRankListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengePlayerRequest::kSelfInfoFieldNumber;
const int ChallengePlayerRequest::kDefenderInfoFieldNumber;
#endif  // !_MSC_VER

ChallengePlayerRequest::ChallengePlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengePlayerRequest::InitAsDefaultInstance() {
  self_info_ = const_cast< ::protocols::common::ArenaPlayerInfo*>(&::protocols::common::ArenaPlayerInfo::default_instance());
  defender_info_ = const_cast< ::protocols::common::ArenaPlayerInfo*>(&::protocols::common::ArenaPlayerInfo::default_instance());
}

ChallengePlayerRequest::ChallengePlayerRequest(const ChallengePlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengePlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  self_info_ = NULL;
  defender_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengePlayerRequest::~ChallengePlayerRequest() {
  SharedDtor();
}

void ChallengePlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete self_info_;
    delete defender_info_;
  }
}

void ChallengePlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengePlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengePlayerRequest_descriptor_;
}

const ChallengePlayerRequest& ChallengePlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ChallengePlayerRequest* ChallengePlayerRequest::default_instance_ = NULL;

ChallengePlayerRequest* ChallengePlayerRequest::New() const {
  return new ChallengePlayerRequest;
}

void ChallengePlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_self_info()) {
      if (self_info_ != NULL) self_info_->::protocols::common::ArenaPlayerInfo::Clear();
    }
    if (has_defender_info()) {
      if (defender_info_ != NULL) defender_info_->::protocols::common::ArenaPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengePlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ArenaPlayerInfo self_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender_info;
        break;
      }
      
      // required .protocols.common.ArenaPlayerInfo defender_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengePlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ArenaPlayerInfo self_info = 1;
  if (has_self_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_info(), output);
  }
  
  // required .protocols.common.ArenaPlayerInfo defender_info = 2;
  if (has_defender_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengePlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ArenaPlayerInfo self_info = 1;
  if (has_self_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_info(), target);
  }
  
  // required .protocols.common.ArenaPlayerInfo defender_info = 2;
  if (has_defender_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengePlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.ArenaPlayerInfo self_info = 1;
    if (has_self_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_info());
    }
    
    // required .protocols.common.ArenaPlayerInfo defender_info = 2;
    if (has_defender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengePlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengePlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengePlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengePlayerRequest::MergeFrom(const ChallengePlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_info()) {
      mutable_self_info()->::protocols::common::ArenaPlayerInfo::MergeFrom(from.self_info());
    }
    if (from.has_defender_info()) {
      mutable_defender_info()->::protocols::common::ArenaPlayerInfo::MergeFrom(from.defender_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengePlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengePlayerRequest::CopyFrom(const ChallengePlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengePlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_self_info()) {
    if (!this->self_info().IsInitialized()) return false;
  }
  if (has_defender_info()) {
    if (!this->defender_info().IsInitialized()) return false;
  }
  return true;
}

void ChallengePlayerRequest::Swap(ChallengePlayerRequest* other) {
  if (other != this) {
    std::swap(self_info_, other->self_info_);
    std::swap(defender_info_, other->defender_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengePlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengePlayerRequest_descriptor_;
  metadata.reflection = ChallengePlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengePlayerResponse::kErrorCodeFieldNumber;
const int ChallengePlayerResponse::kIsWinFieldNumber;
#endif  // !_MSC_VER

ChallengePlayerResponse::ChallengePlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengePlayerResponse::InitAsDefaultInstance() {
}

ChallengePlayerResponse::ChallengePlayerResponse(const ChallengePlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengePlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  is_win_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengePlayerResponse::~ChallengePlayerResponse() {
  SharedDtor();
}

void ChallengePlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengePlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengePlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengePlayerResponse_descriptor_;
}

const ChallengePlayerResponse& ChallengePlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ChallengePlayerResponse* ChallengePlayerResponse::default_instance_ = NULL;

ChallengePlayerResponse* ChallengePlayerResponse::New() const {
  return new ChallengePlayerResponse;
}

void ChallengePlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    is_win_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengePlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_win;
        break;
      }
      
      // optional int32 is_win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengePlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 is_win = 2;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengePlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 is_win = 2;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengePlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 is_win = 2;
    if (has_is_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_win());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengePlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengePlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengePlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengePlayerResponse::MergeFrom(const ChallengePlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengePlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengePlayerResponse::CopyFrom(const ChallengePlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengePlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChallengePlayerResponse::Swap(ChallengePlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(is_win_, other->is_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengePlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengePlayerResponse_descriptor_;
  metadata.reflection = ChallengePlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeTreasureBoxRequest::kBoxIdFieldNumber;
#endif  // !_MSC_VER

TakeTreasureBoxRequest::TakeTreasureBoxRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTreasureBoxRequest::InitAsDefaultInstance() {
}

TakeTreasureBoxRequest::TakeTreasureBoxRequest(const TakeTreasureBoxRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTreasureBoxRequest::SharedCtor() {
  _cached_size_ = 0;
  box_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTreasureBoxRequest::~TakeTreasureBoxRequest() {
  SharedDtor();
}

void TakeTreasureBoxRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTreasureBoxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTreasureBoxRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTreasureBoxRequest_descriptor_;
}

const TakeTreasureBoxRequest& TakeTreasureBoxRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeTreasureBoxRequest* TakeTreasureBoxRequest::default_instance_ = NULL;

TakeTreasureBoxRequest* TakeTreasureBoxRequest::New() const {
  return new TakeTreasureBoxRequest;
}

void TakeTreasureBoxRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    box_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTreasureBoxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 box_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_id_)));
          set_has_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeTreasureBoxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 box_id = 1;
  if (has_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->box_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTreasureBoxRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 box_id = 1;
  if (has_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->box_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTreasureBoxRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 box_id = 1;
    if (has_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTreasureBoxRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTreasureBoxRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTreasureBoxRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTreasureBoxRequest::MergeFrom(const TakeTreasureBoxRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_box_id()) {
      set_box_id(from.box_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTreasureBoxRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTreasureBoxRequest::CopyFrom(const TakeTreasureBoxRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTreasureBoxRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeTreasureBoxRequest::Swap(TakeTreasureBoxRequest* other) {
  if (other != this) {
    std::swap(box_id_, other->box_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTreasureBoxRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTreasureBoxRequest_descriptor_;
  metadata.reflection = TakeTreasureBoxRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeTreasureBoxResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TakeTreasureBoxResponse::TakeTreasureBoxResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTreasureBoxResponse::InitAsDefaultInstance() {
}

TakeTreasureBoxResponse::TakeTreasureBoxResponse(const TakeTreasureBoxResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTreasureBoxResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTreasureBoxResponse::~TakeTreasureBoxResponse() {
  SharedDtor();
}

void TakeTreasureBoxResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTreasureBoxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTreasureBoxResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTreasureBoxResponse_descriptor_;
}

const TakeTreasureBoxResponse& TakeTreasureBoxResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeTreasureBoxResponse* TakeTreasureBoxResponse::default_instance_ = NULL;

TakeTreasureBoxResponse* TakeTreasureBoxResponse::New() const {
  return new TakeTreasureBoxResponse;
}

void TakeTreasureBoxResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTreasureBoxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeTreasureBoxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTreasureBoxResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTreasureBoxResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTreasureBoxResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTreasureBoxResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTreasureBoxResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTreasureBoxResponse::MergeFrom(const TakeTreasureBoxResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTreasureBoxResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTreasureBoxResponse::CopyFrom(const TakeTreasureBoxResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTreasureBoxResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeTreasureBoxResponse::Swap(TakeTreasureBoxResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTreasureBoxResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTreasureBoxResponse_descriptor_;
  metadata.reflection = TakeTreasureBoxResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaSelfNoticeNotify::kNoticeTypeFieldNumber;
const int ArenaSelfNoticeNotify::kChallengerNameFieldNumber;
const int ArenaSelfNoticeNotify::kDefenderNameFieldNumber;
const int ArenaSelfNoticeNotify::kChallengerNewRankFieldNumber;
const int ArenaSelfNoticeNotify::kFightKeyFieldNumber;
#endif  // !_MSC_VER

ArenaSelfNoticeNotify::ArenaSelfNoticeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaSelfNoticeNotify::InitAsDefaultInstance() {
}

ArenaSelfNoticeNotify::ArenaSelfNoticeNotify(const ArenaSelfNoticeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaSelfNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  notice_type_ = 1;
  challenger_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  challenger_new_rank_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaSelfNoticeNotify::~ArenaSelfNoticeNotify() {
  SharedDtor();
}

void ArenaSelfNoticeNotify::SharedDtor() {
  if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_name_;
  }
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaSelfNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaSelfNoticeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaSelfNoticeNotify_descriptor_;
}

const ArenaSelfNoticeNotify& ArenaSelfNoticeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ArenaSelfNoticeNotify* ArenaSelfNoticeNotify::default_instance_ = NULL;

ArenaSelfNoticeNotify* ArenaSelfNoticeNotify::New() const {
  return new ArenaSelfNoticeNotify;
}

void ArenaSelfNoticeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notice_type_ = 1;
    if (has_challenger_name()) {
      if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
        challenger_name_->clear();
      }
    }
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
        defender_name_->clear();
      }
    }
    challenger_new_rank_ = 0;
    fight_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaSelfNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ARENA_SELF_NOTICE_TYPE notice_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ARENA_SELF_NOTICE_TYPE_IsValid(value)) {
            set_notice_type(static_cast< protocols::common::ARENA_SELF_NOTICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challenger_name;
        break;
      }
      
      // required string challenger_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenger_name().data(), this->challenger_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defender_name;
        break;
      }
      
      // required string defender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight_key;
        break;
      }
      
      // optional int64 fight_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challenger_new_rank;
        break;
      }
      
      // optional int32 challenger_new_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenger_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenger_new_rank_)));
          set_has_challenger_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaSelfNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ARENA_SELF_NOTICE_TYPE notice_type = 1;
  if (has_notice_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->notice_type(), output);
  }
  
  // required string challenger_name = 2;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challenger_name(), output);
  }
  
  // required string defender_name = 3;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->defender_name(), output);
  }
  
  // optional int64 fight_key = 4;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fight_key(), output);
  }
  
  // optional int32 challenger_new_rank = 5;
  if (has_challenger_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->challenger_new_rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaSelfNoticeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ARENA_SELF_NOTICE_TYPE notice_type = 1;
  if (has_notice_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->notice_type(), target);
  }
  
  // required string challenger_name = 2;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->challenger_name(), target);
  }
  
  // required string defender_name = 3;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->defender_name(), target);
  }
  
  // optional int64 fight_key = 4;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fight_key(), target);
  }
  
  // optional int32 challenger_new_rank = 5;
  if (has_challenger_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->challenger_new_rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaSelfNoticeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.ARENA_SELF_NOTICE_TYPE notice_type = 1;
    if (has_notice_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notice_type());
    }
    
    // required string challenger_name = 2;
    if (has_challenger_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger_name());
    }
    
    // required string defender_name = 3;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }
    
    // optional int32 challenger_new_rank = 5;
    if (has_challenger_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenger_new_rank());
    }
    
    // optional int64 fight_key = 4;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaSelfNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaSelfNoticeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaSelfNoticeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaSelfNoticeNotify::MergeFrom(const ArenaSelfNoticeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice_type()) {
      set_notice_type(from.notice_type());
    }
    if (from.has_challenger_name()) {
      set_challenger_name(from.challenger_name());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_challenger_new_rank()) {
      set_challenger_new_rank(from.challenger_new_rank());
    }
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaSelfNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaSelfNoticeNotify::CopyFrom(const ArenaSelfNoticeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaSelfNoticeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ArenaSelfNoticeNotify::Swap(ArenaSelfNoticeNotify* other) {
  if (other != this) {
    std::swap(notice_type_, other->notice_type_);
    std::swap(challenger_name_, other->challenger_name_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(challenger_new_rank_, other->challenger_new_rank_);
    std::swap(fight_key_, other->fight_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaSelfNoticeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaSelfNoticeNotify_descriptor_;
  metadata.reflection = ArenaSelfNoticeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPublicNoticeNotify::kNoticeTypeFieldNumber;
const int ArenaPublicNoticeNotify::kChallengerNameFieldNumber;
const int ArenaPublicNoticeNotify::kDefenderNameFieldNumber;
const int ArenaPublicNoticeNotify::kContWinTimesFieldNumber;
const int ArenaPublicNoticeNotify::kChallengerNewRankFieldNumber;
const int ArenaPublicNoticeNotify::kFightKeyFieldNumber;
#endif  // !_MSC_VER

ArenaPublicNoticeNotify::ArenaPublicNoticeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPublicNoticeNotify::InitAsDefaultInstance() {
}

ArenaPublicNoticeNotify::ArenaPublicNoticeNotify(const ArenaPublicNoticeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPublicNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  notice_type_ = 1;
  challenger_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cont_win_times_ = 0;
  challenger_new_rank_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPublicNoticeNotify::~ArenaPublicNoticeNotify() {
  SharedDtor();
}

void ArenaPublicNoticeNotify::SharedDtor() {
  if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_name_;
  }
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaPublicNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPublicNoticeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPublicNoticeNotify_descriptor_;
}

const ArenaPublicNoticeNotify& ArenaPublicNoticeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ArenaPublicNoticeNotify* ArenaPublicNoticeNotify::default_instance_ = NULL;

ArenaPublicNoticeNotify* ArenaPublicNoticeNotify::New() const {
  return new ArenaPublicNoticeNotify;
}

void ArenaPublicNoticeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notice_type_ = 1;
    if (has_challenger_name()) {
      if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
        challenger_name_->clear();
      }
    }
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
        defender_name_->clear();
      }
    }
    cont_win_times_ = 0;
    challenger_new_rank_ = 0;
    fight_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaPublicNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ARENA_PUBLIC_NOTICE_TYPE notice_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ARENA_PUBLIC_NOTICE_TYPE_IsValid(value)) {
            set_notice_type(static_cast< protocols::common::ARENA_PUBLIC_NOTICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challenger_name;
        break;
      }
      
      // required string challenger_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenger_name().data(), this->challenger_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defender_name;
        break;
      }
      
      // optional string defender_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cont_win_times;
        break;
      }
      
      // optional int32 cont_win_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_times_)));
          set_has_cont_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_challenger_new_rank;
        break;
      }
      
      // optional int32 challenger_new_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenger_new_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenger_new_rank_)));
          set_has_challenger_new_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_key;
        break;
      }
      
      // optional int64 fight_key = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaPublicNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ARENA_PUBLIC_NOTICE_TYPE notice_type = 1;
  if (has_notice_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->notice_type(), output);
  }
  
  // required string challenger_name = 2;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->challenger_name(), output);
  }
  
  // optional string defender_name = 3;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->defender_name(), output);
  }
  
  // optional int32 cont_win_times = 4;
  if (has_cont_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cont_win_times(), output);
  }
  
  // optional int32 challenger_new_rank = 5;
  if (has_challenger_new_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->challenger_new_rank(), output);
  }
  
  // optional int64 fight_key = 6;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fight_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPublicNoticeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ARENA_PUBLIC_NOTICE_TYPE notice_type = 1;
  if (has_notice_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->notice_type(), target);
  }
  
  // required string challenger_name = 2;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->challenger_name(), target);
  }
  
  // optional string defender_name = 3;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->defender_name(), target);
  }
  
  // optional int32 cont_win_times = 4;
  if (has_cont_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cont_win_times(), target);
  }
  
  // optional int32 challenger_new_rank = 5;
  if (has_challenger_new_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->challenger_new_rank(), target);
  }
  
  // optional int64 fight_key = 6;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fight_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPublicNoticeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.ARENA_PUBLIC_NOTICE_TYPE notice_type = 1;
    if (has_notice_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notice_type());
    }
    
    // required string challenger_name = 2;
    if (has_challenger_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger_name());
    }
    
    // optional string defender_name = 3;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }
    
    // optional int32 cont_win_times = 4;
    if (has_cont_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win_times());
    }
    
    // optional int32 challenger_new_rank = 5;
    if (has_challenger_new_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenger_new_rank());
    }
    
    // optional int64 fight_key = 6;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPublicNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPublicNoticeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPublicNoticeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaPublicNoticeNotify::MergeFrom(const ArenaPublicNoticeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice_type()) {
      set_notice_type(from.notice_type());
    }
    if (from.has_challenger_name()) {
      set_challenger_name(from.challenger_name());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_cont_win_times()) {
      set_cont_win_times(from.cont_win_times());
    }
    if (from.has_challenger_new_rank()) {
      set_challenger_new_rank(from.challenger_new_rank());
    }
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaPublicNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaPublicNoticeNotify::CopyFrom(const ArenaPublicNoticeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaPublicNoticeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ArenaPublicNoticeNotify::Swap(ArenaPublicNoticeNotify* other) {
  if (other != this) {
    std::swap(notice_type_, other->notice_type_);
    std::swap(challenger_name_, other->challenger_name_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(cont_win_times_, other->cont_win_times_);
    std::swap(challenger_new_rank_, other->challenger_new_rank_);
    std::swap(fight_key_, other->fight_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaPublicNoticeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPublicNoticeNotify_descriptor_;
  metadata.reflection = ArenaPublicNoticeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRecentMessageNotify::kSelfMsgFieldNumber;
const int ArenaRecentMessageNotify::kArenaMsgFieldNumber;
#endif  // !_MSC_VER

ArenaRecentMessageNotify::ArenaRecentMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRecentMessageNotify::InitAsDefaultInstance() {
}

ArenaRecentMessageNotify::ArenaRecentMessageNotify(const ArenaRecentMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRecentMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRecentMessageNotify::~ArenaRecentMessageNotify() {
  SharedDtor();
}

void ArenaRecentMessageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRecentMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRecentMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRecentMessageNotify_descriptor_;
}

const ArenaRecentMessageNotify& ArenaRecentMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ArenaRecentMessageNotify* ArenaRecentMessageNotify::default_instance_ = NULL;

ArenaRecentMessageNotify* ArenaRecentMessageNotify::New() const {
  return new ArenaRecentMessageNotify;
}

void ArenaRecentMessageNotify::Clear() {
  self_msg_.Clear();
  arena_msg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRecentMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.ArenaSelfNoticeNotify self_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_self_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_self_msg;
        if (input->ExpectTag(18)) goto parse_arena_msg;
        break;
      }
      
      // repeated .protocols.common.ArenaPublicNoticeNotify arena_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arena_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_arena_msg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRecentMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.ArenaSelfNoticeNotify self_msg = 1;
  for (int i = 0; i < this->self_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->self_msg(i), output);
  }
  
  // repeated .protocols.common.ArenaPublicNoticeNotify arena_msg = 2;
  for (int i = 0; i < this->arena_msg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arena_msg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRecentMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.ArenaSelfNoticeNotify self_msg = 1;
  for (int i = 0; i < this->self_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->self_msg(i), target);
  }
  
  // repeated .protocols.common.ArenaPublicNoticeNotify arena_msg = 2;
  for (int i = 0; i < this->arena_msg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arena_msg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRecentMessageNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.ArenaSelfNoticeNotify self_msg = 1;
  total_size += 1 * this->self_msg_size();
  for (int i = 0; i < this->self_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->self_msg(i));
  }
  
  // repeated .protocols.common.ArenaPublicNoticeNotify arena_msg = 2;
  total_size += 1 * this->arena_msg_size();
  for (int i = 0; i < this->arena_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arena_msg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRecentMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRecentMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRecentMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRecentMessageNotify::MergeFrom(const ArenaRecentMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  self_msg_.MergeFrom(from.self_msg_);
  arena_msg_.MergeFrom(from.arena_msg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRecentMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRecentMessageNotify::CopyFrom(const ArenaRecentMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRecentMessageNotify::IsInitialized() const {
  
  for (int i = 0; i < self_msg_size(); i++) {
    if (!this->self_msg(i).IsInitialized()) return false;
  }
  for (int i = 0; i < arena_msg_size(); i++) {
    if (!this->arena_msg(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRecentMessageNotify::Swap(ArenaRecentMessageNotify* other) {
  if (other != this) {
    self_msg_.Swap(&other->self_msg_);
    arena_msg_.Swap(&other->arena_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRecentMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRecentMessageNotify_descriptor_;
  metadata.reflection = ArenaRecentMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublicNoticeNotify::kNoticeTypeFieldNumber;
const int PublicNoticeNotify::kIntArgFieldNumber;
const int PublicNoticeNotify::kStrArgFieldNumber;
#endif  // !_MSC_VER

PublicNoticeNotify::PublicNoticeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublicNoticeNotify::InitAsDefaultInstance() {
}

PublicNoticeNotify::PublicNoticeNotify(const PublicNoticeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublicNoticeNotify::SharedCtor() {
  _cached_size_ = 0;
  notice_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublicNoticeNotify::~PublicNoticeNotify() {
  SharedDtor();
}

void PublicNoticeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PublicNoticeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicNoticeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublicNoticeNotify_descriptor_;
}

const PublicNoticeNotify& PublicNoticeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PublicNoticeNotify* PublicNoticeNotify::default_instance_ = NULL;

PublicNoticeNotify* PublicNoticeNotify::New() const {
  return new PublicNoticeNotify;
}

void PublicNoticeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notice_type_ = 0;
  }
  int_arg_.Clear();
  str_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublicNoticeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 notice_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notice_type_)));
          set_has_notice_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_arg;
        break;
      }
      
      // repeated int32 int_arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_arg;
        if (input->ExpectTag(26)) goto parse_str_arg;
        break;
      }
      
      // repeated string str_arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_arg(0).data(), this->str_arg(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublicNoticeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 notice_type = 1;
  if (has_notice_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->notice_type(), output);
  }
  
  // repeated int32 int_arg = 2;
  for (int i = 0; i < this->int_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int_arg(i), output);
  }
  
  // repeated string str_arg = 3;
  for (int i = 0; i < this->str_arg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str_arg(i).data(), this->str_arg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublicNoticeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 notice_type = 1;
  if (has_notice_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->notice_type(), target);
  }
  
  // repeated int32 int_arg = 2;
  for (int i = 0; i < this->int_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int_arg(i), target);
  }
  
  // repeated string str_arg = 3;
  for (int i = 0; i < this->str_arg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_arg(i).data(), this->str_arg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->str_arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublicNoticeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 notice_type = 1;
    if (has_notice_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notice_type());
    }
    
  }
  // repeated int32 int_arg = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int_arg(i));
    }
    total_size += 1 * this->int_arg_size() + data_size;
  }
  
  // repeated string str_arg = 3;
  total_size += 1 * this->str_arg_size();
  for (int i = 0; i < this->str_arg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicNoticeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublicNoticeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublicNoticeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublicNoticeNotify::MergeFrom(const PublicNoticeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_arg_.MergeFrom(from.int_arg_);
  str_arg_.MergeFrom(from.str_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice_type()) {
      set_notice_type(from.notice_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublicNoticeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicNoticeNotify::CopyFrom(const PublicNoticeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicNoticeNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PublicNoticeNotify::Swap(PublicNoticeNotify* other) {
  if (other != this) {
    std::swap(notice_type_, other->notice_type_);
    int_arg_.Swap(&other->int_arg_);
    str_arg_.Swap(&other->str_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublicNoticeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublicNoticeNotify_descriptor_;
  metadata.reflection = PublicNoticeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOnlineTimeRequest::GetOnlineTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineTimeRequest::InitAsDefaultInstance() {
}

GetOnlineTimeRequest::GetOnlineTimeRequest(const GetOnlineTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineTimeRequest::~GetOnlineTimeRequest() {
  SharedDtor();
}

void GetOnlineTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOnlineTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineTimeRequest_descriptor_;
}

const GetOnlineTimeRequest& GetOnlineTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetOnlineTimeRequest* GetOnlineTimeRequest::default_instance_ = NULL;

GetOnlineTimeRequest* GetOnlineTimeRequest::New() const {
  return new GetOnlineTimeRequest;
}

void GetOnlineTimeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetOnlineTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineTimeRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineTimeRequest::MergeFrom(const GetOnlineTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineTimeRequest::CopyFrom(const GetOnlineTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineTimeRequest::IsInitialized() const {
  
  return true;
}

void GetOnlineTimeRequest::Swap(GetOnlineTimeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineTimeRequest_descriptor_;
  metadata.reflection = GetOnlineTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeBonusNotify::kTimeNeedForNextFieldNumber;
const int TimeBonusNotify::kBonusIdFieldNumber;
#endif  // !_MSC_VER

TimeBonusNotify::TimeBonusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeBonusNotify::InitAsDefaultInstance() {
}

TimeBonusNotify::TimeBonusNotify(const TimeBonusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeBonusNotify::SharedCtor() {
  _cached_size_ = 0;
  time_need_for_next_ = 0;
  bonus_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeBonusNotify::~TimeBonusNotify() {
  SharedDtor();
}

void TimeBonusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeBonusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeBonusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeBonusNotify_descriptor_;
}

const TimeBonusNotify& TimeBonusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TimeBonusNotify* TimeBonusNotify::default_instance_ = NULL;

TimeBonusNotify* TimeBonusNotify::New() const {
  return new TimeBonusNotify;
}

void TimeBonusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_need_for_next_ = 0;
    bonus_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeBonusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time_need_for_next = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_need_for_next_)));
          set_has_time_need_for_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonus_id;
        break;
      }
      
      // required int32 bonus_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_id_)));
          set_has_bonus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeBonusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time_need_for_next = 1;
  if (has_time_need_for_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_need_for_next(), output);
  }
  
  // required int32 bonus_id = 2;
  if (has_bonus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bonus_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeBonusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time_need_for_next = 1;
  if (has_time_need_for_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_need_for_next(), target);
  }
  
  // required int32 bonus_id = 2;
  if (has_bonus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bonus_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeBonusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time_need_for_next = 1;
    if (has_time_need_for_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_need_for_next());
    }
    
    // required int32 bonus_id = 2;
    if (has_bonus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeBonusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeBonusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeBonusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeBonusNotify::MergeFrom(const TimeBonusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_need_for_next()) {
      set_time_need_for_next(from.time_need_for_next());
    }
    if (from.has_bonus_id()) {
      set_bonus_id(from.bonus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeBonusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeBonusNotify::CopyFrom(const TimeBonusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeBonusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TimeBonusNotify::Swap(TimeBonusNotify* other) {
  if (other != this) {
    std::swap(time_need_for_next_, other->time_need_for_next_);
    std::swap(bonus_id_, other->bonus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeBonusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeBonusNotify_descriptor_;
  metadata.reflection = TimeBonusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TakeTimeBonusRequest::TakeTimeBonusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTimeBonusRequest::InitAsDefaultInstance() {
}

TakeTimeBonusRequest::TakeTimeBonusRequest(const TakeTimeBonusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTimeBonusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTimeBonusRequest::~TakeTimeBonusRequest() {
  SharedDtor();
}

void TakeTimeBonusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTimeBonusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTimeBonusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTimeBonusRequest_descriptor_;
}

const TakeTimeBonusRequest& TakeTimeBonusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeTimeBonusRequest* TakeTimeBonusRequest::default_instance_ = NULL;

TakeTimeBonusRequest* TakeTimeBonusRequest::New() const {
  return new TakeTimeBonusRequest;
}

void TakeTimeBonusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTimeBonusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TakeTimeBonusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTimeBonusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTimeBonusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTimeBonusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTimeBonusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTimeBonusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTimeBonusRequest::MergeFrom(const TakeTimeBonusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTimeBonusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTimeBonusRequest::CopyFrom(const TakeTimeBonusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTimeBonusRequest::IsInitialized() const {
  
  return true;
}

void TakeTimeBonusRequest::Swap(TakeTimeBonusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTimeBonusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTimeBonusRequest_descriptor_;
  metadata.reflection = TakeTimeBonusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeTimeBonusResponse::kErrorCodeFieldNumber;
const int TakeTimeBonusResponse::kItemFieldNumber;
#endif  // !_MSC_VER

TakeTimeBonusResponse::TakeTimeBonusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTimeBonusResponse::InitAsDefaultInstance() {
}

TakeTimeBonusResponse::TakeTimeBonusResponse(const TakeTimeBonusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTimeBonusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTimeBonusResponse::~TakeTimeBonusResponse() {
  SharedDtor();
}

void TakeTimeBonusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTimeBonusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTimeBonusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTimeBonusResponse_descriptor_;
}

const TakeTimeBonusResponse& TakeTimeBonusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeTimeBonusResponse* TakeTimeBonusResponse::default_instance_ = NULL;

TakeTimeBonusResponse* TakeTimeBonusResponse::New() const {
  return new TakeTimeBonusResponse;
}

void TakeTimeBonusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTimeBonusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeTimeBonusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTimeBonusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTimeBonusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ItemInfo item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTimeBonusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTimeBonusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTimeBonusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTimeBonusResponse::MergeFrom(const TakeTimeBonusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTimeBonusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTimeBonusResponse::CopyFrom(const TakeTimeBonusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTimeBonusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void TakeTimeBonusResponse::Swap(TakeTimeBonusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTimeBonusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTimeBonusResponse_descriptor_;
  metadata.reflection = TakeTimeBonusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetInstanceWantedListInfoRequest::GetInstanceWantedListInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceWantedListInfoRequest::InitAsDefaultInstance() {
}

GetInstanceWantedListInfoRequest::GetInstanceWantedListInfoRequest(const GetInstanceWantedListInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceWantedListInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceWantedListInfoRequest::~GetInstanceWantedListInfoRequest() {
  SharedDtor();
}

void GetInstanceWantedListInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceWantedListInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceWantedListInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceWantedListInfoRequest_descriptor_;
}

const GetInstanceWantedListInfoRequest& GetInstanceWantedListInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceWantedListInfoRequest* GetInstanceWantedListInfoRequest::default_instance_ = NULL;

GetInstanceWantedListInfoRequest* GetInstanceWantedListInfoRequest::New() const {
  return new GetInstanceWantedListInfoRequest;
}

void GetInstanceWantedListInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceWantedListInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetInstanceWantedListInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceWantedListInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceWantedListInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceWantedListInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceWantedListInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceWantedListInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceWantedListInfoRequest::MergeFrom(const GetInstanceWantedListInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceWantedListInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceWantedListInfoRequest::CopyFrom(const GetInstanceWantedListInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceWantedListInfoRequest::IsInitialized() const {
  
  return true;
}

void GetInstanceWantedListInfoRequest::Swap(GetInstanceWantedListInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceWantedListInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceWantedListInfoRequest_descriptor_;
  metadata.reflection = GetInstanceWantedListInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceWantedListInfoResponse::kErrorCodeFieldNumber;
const int GetInstanceWantedListInfoResponse::kInstanceWantedInfoFieldNumber;
#endif  // !_MSC_VER

GetInstanceWantedListInfoResponse::GetInstanceWantedListInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceWantedListInfoResponse::InitAsDefaultInstance() {
}

GetInstanceWantedListInfoResponse::GetInstanceWantedListInfoResponse(const GetInstanceWantedListInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceWantedListInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceWantedListInfoResponse::~GetInstanceWantedListInfoResponse() {
  SharedDtor();
}

void GetInstanceWantedListInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceWantedListInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceWantedListInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceWantedListInfoResponse_descriptor_;
}

const GetInstanceWantedListInfoResponse& GetInstanceWantedListInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetInstanceWantedListInfoResponse* GetInstanceWantedListInfoResponse::default_instance_ = NULL;

GetInstanceWantedListInfoResponse* GetInstanceWantedListInfoResponse::New() const {
  return new GetInstanceWantedListInfoResponse;
}

void GetInstanceWantedListInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  instance_wanted_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceWantedListInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_wanted_info;
        break;
      }
      
      // repeated .protocols.common.InstanceWantedInfo instance_wanted_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_wanted_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_wanted_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_wanted_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceWantedListInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_wanted_info = 2;
  for (int i = 0; i < this->instance_wanted_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_wanted_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceWantedListInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_wanted_info = 2;
  for (int i = 0; i < this->instance_wanted_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_wanted_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceWantedListInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.InstanceWantedInfo instance_wanted_info = 2;
  total_size += 1 * this->instance_wanted_info_size();
  for (int i = 0; i < this->instance_wanted_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_wanted_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceWantedListInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceWantedListInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceWantedListInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceWantedListInfoResponse::MergeFrom(const GetInstanceWantedListInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_wanted_info_.MergeFrom(from.instance_wanted_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceWantedListInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceWantedListInfoResponse::CopyFrom(const GetInstanceWantedListInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceWantedListInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < instance_wanted_info_size(); i++) {
    if (!this->instance_wanted_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetInstanceWantedListInfoResponse::Swap(GetInstanceWantedListInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    instance_wanted_info_.Swap(&other->instance_wanted_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceWantedListInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceWantedListInfoResponse_descriptor_;
  metadata.reflection = GetInstanceWantedListInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoInstanceWantedOnceRequest::kInstanceIdFieldNumber;
const int DoInstanceWantedOnceRequest::kCardIndexFieldNumber;
#endif  // !_MSC_VER

DoInstanceWantedOnceRequest::DoInstanceWantedOnceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoInstanceWantedOnceRequest::InitAsDefaultInstance() {
}

DoInstanceWantedOnceRequest::DoInstanceWantedOnceRequest(const DoInstanceWantedOnceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoInstanceWantedOnceRequest::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  card_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoInstanceWantedOnceRequest::~DoInstanceWantedOnceRequest() {
  SharedDtor();
}

void DoInstanceWantedOnceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoInstanceWantedOnceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoInstanceWantedOnceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoInstanceWantedOnceRequest_descriptor_;
}

const DoInstanceWantedOnceRequest& DoInstanceWantedOnceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DoInstanceWantedOnceRequest* DoInstanceWantedOnceRequest::default_instance_ = NULL;

DoInstanceWantedOnceRequest* DoInstanceWantedOnceRequest::New() const {
  return new DoInstanceWantedOnceRequest;
}

void DoInstanceWantedOnceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    card_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoInstanceWantedOnceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_index;
        break;
      }
      
      // required int32 card_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_index_)));
          set_has_card_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoInstanceWantedOnceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // required int32 card_index = 2;
  if (has_card_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoInstanceWantedOnceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // required int32 card_index = 2;
  if (has_card_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoInstanceWantedOnceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // required int32 card_index = 2;
    if (has_card_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoInstanceWantedOnceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoInstanceWantedOnceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoInstanceWantedOnceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoInstanceWantedOnceRequest::MergeFrom(const DoInstanceWantedOnceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_card_index()) {
      set_card_index(from.card_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoInstanceWantedOnceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoInstanceWantedOnceRequest::CopyFrom(const DoInstanceWantedOnceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoInstanceWantedOnceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DoInstanceWantedOnceRequest::Swap(DoInstanceWantedOnceRequest* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(card_index_, other->card_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoInstanceWantedOnceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoInstanceWantedOnceRequest_descriptor_;
  metadata.reflection = DoInstanceWantedOnceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoInstanceWantedOnceResponse::kErrorCodeFieldNumber;
const int DoInstanceWantedOnceResponse::kInstanceInfoFieldNumber;
#endif  // !_MSC_VER

DoInstanceWantedOnceResponse::DoInstanceWantedOnceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DoInstanceWantedOnceResponse::InitAsDefaultInstance() {
  instance_info_ = const_cast< ::protocols::common::InstanceWantedInfo*>(&::protocols::common::InstanceWantedInfo::default_instance());
}

DoInstanceWantedOnceResponse::DoInstanceWantedOnceResponse(const DoInstanceWantedOnceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DoInstanceWantedOnceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  instance_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoInstanceWantedOnceResponse::~DoInstanceWantedOnceResponse() {
  SharedDtor();
}

void DoInstanceWantedOnceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete instance_info_;
  }
}

void DoInstanceWantedOnceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoInstanceWantedOnceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoInstanceWantedOnceResponse_descriptor_;
}

const DoInstanceWantedOnceResponse& DoInstanceWantedOnceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

DoInstanceWantedOnceResponse* DoInstanceWantedOnceResponse::default_instance_ = NULL;

DoInstanceWantedOnceResponse* DoInstanceWantedOnceResponse::New() const {
  return new DoInstanceWantedOnceResponse;
}

void DoInstanceWantedOnceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_instance_info()) {
      if (instance_info_ != NULL) instance_info_->::protocols::common::InstanceWantedInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoInstanceWantedOnceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_info;
        break;
      }
      
      // optional .protocols.common.InstanceWantedInfo instance_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DoInstanceWantedOnceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.InstanceWantedInfo instance_info = 2;
  if (has_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DoInstanceWantedOnceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.InstanceWantedInfo instance_info = 2;
  if (has_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DoInstanceWantedOnceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.InstanceWantedInfo instance_info = 2;
    if (has_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoInstanceWantedOnceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoInstanceWantedOnceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoInstanceWantedOnceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoInstanceWantedOnceResponse::MergeFrom(const DoInstanceWantedOnceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_instance_info()) {
      mutable_instance_info()->::protocols::common::InstanceWantedInfo::MergeFrom(from.instance_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoInstanceWantedOnceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoInstanceWantedOnceResponse::CopyFrom(const DoInstanceWantedOnceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoInstanceWantedOnceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_instance_info()) {
    if (!this->instance_info().IsInitialized()) return false;
  }
  return true;
}

void DoInstanceWantedOnceResponse::Swap(DoInstanceWantedOnceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(instance_info_, other->instance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoInstanceWantedOnceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoInstanceWantedOnceResponse_descriptor_;
  metadata.reflection = DoInstanceWantedOnceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FastInstanceWantedRequest::FastInstanceWantedRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastInstanceWantedRequest::InitAsDefaultInstance() {
}

FastInstanceWantedRequest::FastInstanceWantedRequest(const FastInstanceWantedRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastInstanceWantedRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastInstanceWantedRequest::~FastInstanceWantedRequest() {
  SharedDtor();
}

void FastInstanceWantedRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastInstanceWantedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastInstanceWantedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastInstanceWantedRequest_descriptor_;
}

const FastInstanceWantedRequest& FastInstanceWantedRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FastInstanceWantedRequest* FastInstanceWantedRequest::default_instance_ = NULL;

FastInstanceWantedRequest* FastInstanceWantedRequest::New() const {
  return new FastInstanceWantedRequest;
}

void FastInstanceWantedRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastInstanceWantedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FastInstanceWantedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastInstanceWantedRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastInstanceWantedRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastInstanceWantedRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastInstanceWantedRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastInstanceWantedRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastInstanceWantedRequest::MergeFrom(const FastInstanceWantedRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastInstanceWantedRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastInstanceWantedRequest::CopyFrom(const FastInstanceWantedRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastInstanceWantedRequest::IsInitialized() const {
  
  return true;
}

void FastInstanceWantedRequest::Swap(FastInstanceWantedRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastInstanceWantedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastInstanceWantedRequest_descriptor_;
  metadata.reflection = FastInstanceWantedRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FastInstanceWantedResponse::kErrorCodeFieldNumber;
const int FastInstanceWantedResponse::kInstanceInfoFieldNumber;
#endif  // !_MSC_VER

FastInstanceWantedResponse::FastInstanceWantedResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FastInstanceWantedResponse::InitAsDefaultInstance() {
}

FastInstanceWantedResponse::FastInstanceWantedResponse(const FastInstanceWantedResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FastInstanceWantedResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastInstanceWantedResponse::~FastInstanceWantedResponse() {
  SharedDtor();
}

void FastInstanceWantedResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastInstanceWantedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastInstanceWantedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastInstanceWantedResponse_descriptor_;
}

const FastInstanceWantedResponse& FastInstanceWantedResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FastInstanceWantedResponse* FastInstanceWantedResponse::default_instance_ = NULL;

FastInstanceWantedResponse* FastInstanceWantedResponse::New() const {
  return new FastInstanceWantedResponse;
}

void FastInstanceWantedResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  instance_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastInstanceWantedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_info;
        break;
      }
      
      // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FastInstanceWantedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  for (int i = 0; i < this->instance_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FastInstanceWantedResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  for (int i = 0; i < this->instance_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FastInstanceWantedResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  total_size += 1 * this->instance_info_size();
  for (int i = 0; i < this->instance_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastInstanceWantedResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastInstanceWantedResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastInstanceWantedResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastInstanceWantedResponse::MergeFrom(const FastInstanceWantedResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_info_.MergeFrom(from.instance_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastInstanceWantedResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastInstanceWantedResponse::CopyFrom(const FastInstanceWantedResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastInstanceWantedResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < instance_info_size(); i++) {
    if (!this->instance_info(i).IsInitialized()) return false;
  }
  return true;
}

void FastInstanceWantedResponse::Swap(FastInstanceWantedResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    instance_info_.Swap(&other->instance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastInstanceWantedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastInstanceWantedResponse_descriptor_;
  metadata.reflection = FastInstanceWantedResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

InstanceWantedAllResetRequest::InstanceWantedAllResetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedAllResetRequest::InitAsDefaultInstance() {
}

InstanceWantedAllResetRequest::InstanceWantedAllResetRequest(const InstanceWantedAllResetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedAllResetRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedAllResetRequest::~InstanceWantedAllResetRequest() {
  SharedDtor();
}

void InstanceWantedAllResetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedAllResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedAllResetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedAllResetRequest_descriptor_;
}

const InstanceWantedAllResetRequest& InstanceWantedAllResetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InstanceWantedAllResetRequest* InstanceWantedAllResetRequest::default_instance_ = NULL;

InstanceWantedAllResetRequest* InstanceWantedAllResetRequest::New() const {
  return new InstanceWantedAllResetRequest;
}

void InstanceWantedAllResetRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedAllResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void InstanceWantedAllResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedAllResetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedAllResetRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedAllResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedAllResetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedAllResetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedAllResetRequest::MergeFrom(const InstanceWantedAllResetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedAllResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedAllResetRequest::CopyFrom(const InstanceWantedAllResetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedAllResetRequest::IsInitialized() const {
  
  return true;
}

void InstanceWantedAllResetRequest::Swap(InstanceWantedAllResetRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedAllResetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedAllResetRequest_descriptor_;
  metadata.reflection = InstanceWantedAllResetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceWantedAllResetResponse::kErrorCodeFieldNumber;
const int InstanceWantedAllResetResponse::kInstanceInfoFieldNumber;
#endif  // !_MSC_VER

InstanceWantedAllResetResponse::InstanceWantedAllResetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedAllResetResponse::InitAsDefaultInstance() {
}

InstanceWantedAllResetResponse::InstanceWantedAllResetResponse(const InstanceWantedAllResetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedAllResetResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedAllResetResponse::~InstanceWantedAllResetResponse() {
  SharedDtor();
}

void InstanceWantedAllResetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedAllResetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedAllResetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedAllResetResponse_descriptor_;
}

const InstanceWantedAllResetResponse& InstanceWantedAllResetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InstanceWantedAllResetResponse* InstanceWantedAllResetResponse::default_instance_ = NULL;

InstanceWantedAllResetResponse* InstanceWantedAllResetResponse::New() const {
  return new InstanceWantedAllResetResponse;
}

void InstanceWantedAllResetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  instance_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedAllResetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_info;
        break;
      }
      
      // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instance_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceWantedAllResetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  for (int i = 0; i < this->instance_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedAllResetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  for (int i = 0; i < this->instance_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedAllResetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.InstanceWantedInfo instance_info = 2;
  total_size += 1 * this->instance_info_size();
  for (int i = 0; i < this->instance_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedAllResetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedAllResetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedAllResetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedAllResetResponse::MergeFrom(const InstanceWantedAllResetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_info_.MergeFrom(from.instance_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedAllResetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedAllResetResponse::CopyFrom(const InstanceWantedAllResetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedAllResetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < instance_info_size(); i++) {
    if (!this->instance_info(i).IsInitialized()) return false;
  }
  return true;
}

void InstanceWantedAllResetResponse::Swap(InstanceWantedAllResetResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    instance_info_.Swap(&other->instance_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedAllResetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedAllResetResponse_descriptor_;
  metadata.reflection = InstanceWantedAllResetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

InstanceWantedResetCostRequest::InstanceWantedResetCostRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedResetCostRequest::InitAsDefaultInstance() {
}

InstanceWantedResetCostRequest::InstanceWantedResetCostRequest(const InstanceWantedResetCostRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedResetCostRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedResetCostRequest::~InstanceWantedResetCostRequest() {
  SharedDtor();
}

void InstanceWantedResetCostRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedResetCostRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedResetCostRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedResetCostRequest_descriptor_;
}

const InstanceWantedResetCostRequest& InstanceWantedResetCostRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InstanceWantedResetCostRequest* InstanceWantedResetCostRequest::default_instance_ = NULL;

InstanceWantedResetCostRequest* InstanceWantedResetCostRequest::New() const {
  return new InstanceWantedResetCostRequest;
}

void InstanceWantedResetCostRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedResetCostRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void InstanceWantedResetCostRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedResetCostRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedResetCostRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedResetCostRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedResetCostRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedResetCostRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedResetCostRequest::MergeFrom(const InstanceWantedResetCostRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedResetCostRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedResetCostRequest::CopyFrom(const InstanceWantedResetCostRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedResetCostRequest::IsInitialized() const {
  
  return true;
}

void InstanceWantedResetCostRequest::Swap(InstanceWantedResetCostRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedResetCostRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedResetCostRequest_descriptor_;
  metadata.reflection = InstanceWantedResetCostRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceWantedResetCostResponse::kErrorCodeFieldNumber;
const int InstanceWantedResetCostResponse::kNeedDiamondFieldNumber;
#endif  // !_MSC_VER

InstanceWantedResetCostResponse::InstanceWantedResetCostResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedResetCostResponse::InitAsDefaultInstance() {
}

InstanceWantedResetCostResponse::InstanceWantedResetCostResponse(const InstanceWantedResetCostResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedResetCostResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  need_diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedResetCostResponse::~InstanceWantedResetCostResponse() {
  SharedDtor();
}

void InstanceWantedResetCostResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedResetCostResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedResetCostResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedResetCostResponse_descriptor_;
}

const InstanceWantedResetCostResponse& InstanceWantedResetCostResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InstanceWantedResetCostResponse* InstanceWantedResetCostResponse::default_instance_ = NULL;

InstanceWantedResetCostResponse* InstanceWantedResetCostResponse::New() const {
  return new InstanceWantedResetCostResponse;
}

void InstanceWantedResetCostResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    need_diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedResetCostResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_diamond;
        break;
      }
      
      // optional int32 need_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_diamond_)));
          set_has_need_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceWantedResetCostResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 need_diamond = 2;
  if (has_need_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedResetCostResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 need_diamond = 2;
  if (has_need_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedResetCostResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 need_diamond = 2;
    if (has_need_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_diamond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedResetCostResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedResetCostResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedResetCostResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedResetCostResponse::MergeFrom(const InstanceWantedResetCostResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_need_diamond()) {
      set_need_diamond(from.need_diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedResetCostResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedResetCostResponse::CopyFrom(const InstanceWantedResetCostResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedResetCostResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InstanceWantedResetCostResponse::Swap(InstanceWantedResetCostResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(need_diamond_, other->need_diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedResetCostResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedResetCostResponse_descriptor_;
  metadata.reflection = InstanceWantedResetCostResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenMonsterExpBuffRequest::OpenMonsterExpBuffRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenMonsterExpBuffRequest::InitAsDefaultInstance() {
}

OpenMonsterExpBuffRequest::OpenMonsterExpBuffRequest(const OpenMonsterExpBuffRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenMonsterExpBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenMonsterExpBuffRequest::~OpenMonsterExpBuffRequest() {
  SharedDtor();
}

void OpenMonsterExpBuffRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenMonsterExpBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenMonsterExpBuffRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenMonsterExpBuffRequest_descriptor_;
}

const OpenMonsterExpBuffRequest& OpenMonsterExpBuffRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenMonsterExpBuffRequest* OpenMonsterExpBuffRequest::default_instance_ = NULL;

OpenMonsterExpBuffRequest* OpenMonsterExpBuffRequest::New() const {
  return new OpenMonsterExpBuffRequest;
}

void OpenMonsterExpBuffRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenMonsterExpBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenMonsterExpBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenMonsterExpBuffRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenMonsterExpBuffRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenMonsterExpBuffRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenMonsterExpBuffRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenMonsterExpBuffRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenMonsterExpBuffRequest::MergeFrom(const OpenMonsterExpBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenMonsterExpBuffRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenMonsterExpBuffRequest::CopyFrom(const OpenMonsterExpBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenMonsterExpBuffRequest::IsInitialized() const {
  
  return true;
}

void OpenMonsterExpBuffRequest::Swap(OpenMonsterExpBuffRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenMonsterExpBuffRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenMonsterExpBuffRequest_descriptor_;
  metadata.reflection = OpenMonsterExpBuffRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenMonsterExpBuffResponse::kErrorCodeFieldNumber;
const int OpenMonsterExpBuffResponse::kLeftCanTakeTimesFieldNumber;
#endif  // !_MSC_VER

OpenMonsterExpBuffResponse::OpenMonsterExpBuffResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenMonsterExpBuffResponse::InitAsDefaultInstance() {
}

OpenMonsterExpBuffResponse::OpenMonsterExpBuffResponse(const OpenMonsterExpBuffResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenMonsterExpBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_can_take_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenMonsterExpBuffResponse::~OpenMonsterExpBuffResponse() {
  SharedDtor();
}

void OpenMonsterExpBuffResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenMonsterExpBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenMonsterExpBuffResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenMonsterExpBuffResponse_descriptor_;
}

const OpenMonsterExpBuffResponse& OpenMonsterExpBuffResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OpenMonsterExpBuffResponse* OpenMonsterExpBuffResponse::default_instance_ = NULL;

OpenMonsterExpBuffResponse* OpenMonsterExpBuffResponse::New() const {
  return new OpenMonsterExpBuffResponse;
}

void OpenMonsterExpBuffResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_can_take_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenMonsterExpBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_can_take_times;
        break;
      }
      
      // optional int32 left_can_take_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_can_take_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_can_take_times_)));
          set_has_left_can_take_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenMonsterExpBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 left_can_take_times = 2;
  if (has_left_can_take_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_can_take_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenMonsterExpBuffResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 left_can_take_times = 2;
  if (has_left_can_take_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_can_take_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenMonsterExpBuffResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 left_can_take_times = 2;
    if (has_left_can_take_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_can_take_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenMonsterExpBuffResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenMonsterExpBuffResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenMonsterExpBuffResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenMonsterExpBuffResponse::MergeFrom(const OpenMonsterExpBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_can_take_times()) {
      set_left_can_take_times(from.left_can_take_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenMonsterExpBuffResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenMonsterExpBuffResponse::CopyFrom(const OpenMonsterExpBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenMonsterExpBuffResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OpenMonsterExpBuffResponse::Swap(OpenMonsterExpBuffResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_can_take_times_, other->left_can_take_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenMonsterExpBuffResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenMonsterExpBuffResponse_descriptor_;
  metadata.reflection = OpenMonsterExpBuffResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeMonsterExpBuffRequest::kTakeTimesFieldNumber;
#endif  // !_MSC_VER

TakeMonsterExpBuffRequest::TakeMonsterExpBuffRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeMonsterExpBuffRequest::InitAsDefaultInstance() {
}

TakeMonsterExpBuffRequest::TakeMonsterExpBuffRequest(const TakeMonsterExpBuffRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeMonsterExpBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  take_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeMonsterExpBuffRequest::~TakeMonsterExpBuffRequest() {
  SharedDtor();
}

void TakeMonsterExpBuffRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeMonsterExpBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeMonsterExpBuffRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeMonsterExpBuffRequest_descriptor_;
}

const TakeMonsterExpBuffRequest& TakeMonsterExpBuffRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeMonsterExpBuffRequest* TakeMonsterExpBuffRequest::default_instance_ = NULL;

TakeMonsterExpBuffRequest* TakeMonsterExpBuffRequest::New() const {
  return new TakeMonsterExpBuffRequest;
}

void TakeMonsterExpBuffRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    take_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeMonsterExpBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 take_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &take_times_)));
          set_has_take_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeMonsterExpBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 take_times = 1;
  if (has_take_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->take_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeMonsterExpBuffRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 take_times = 1;
  if (has_take_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->take_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeMonsterExpBuffRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 take_times = 1;
    if (has_take_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->take_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeMonsterExpBuffRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeMonsterExpBuffRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeMonsterExpBuffRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeMonsterExpBuffRequest::MergeFrom(const TakeMonsterExpBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_take_times()) {
      set_take_times(from.take_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeMonsterExpBuffRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeMonsterExpBuffRequest::CopyFrom(const TakeMonsterExpBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeMonsterExpBuffRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeMonsterExpBuffRequest::Swap(TakeMonsterExpBuffRequest* other) {
  if (other != this) {
    std::swap(take_times_, other->take_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeMonsterExpBuffRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeMonsterExpBuffRequest_descriptor_;
  metadata.reflection = TakeMonsterExpBuffRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeMonsterExpBuffResponse::kErrorCodeFieldNumber;
const int TakeMonsterExpBuffResponse::kLeftMonsterExpBuffTimesFieldNumber;
#endif  // !_MSC_VER

TakeMonsterExpBuffResponse::TakeMonsterExpBuffResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeMonsterExpBuffResponse::InitAsDefaultInstance() {
}

TakeMonsterExpBuffResponse::TakeMonsterExpBuffResponse(const TakeMonsterExpBuffResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeMonsterExpBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_monster_exp_buff_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeMonsterExpBuffResponse::~TakeMonsterExpBuffResponse() {
  SharedDtor();
}

void TakeMonsterExpBuffResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeMonsterExpBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeMonsterExpBuffResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeMonsterExpBuffResponse_descriptor_;
}

const TakeMonsterExpBuffResponse& TakeMonsterExpBuffResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeMonsterExpBuffResponse* TakeMonsterExpBuffResponse::default_instance_ = NULL;

TakeMonsterExpBuffResponse* TakeMonsterExpBuffResponse::New() const {
  return new TakeMonsterExpBuffResponse;
}

void TakeMonsterExpBuffResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_monster_exp_buff_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeMonsterExpBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_monster_exp_buff_times;
        break;
      }
      
      // optional int32 left_monster_exp_buff_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_monster_exp_buff_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_monster_exp_buff_times_)));
          set_has_left_monster_exp_buff_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeMonsterExpBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 left_monster_exp_buff_times = 2;
  if (has_left_monster_exp_buff_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_monster_exp_buff_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeMonsterExpBuffResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 left_monster_exp_buff_times = 2;
  if (has_left_monster_exp_buff_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_monster_exp_buff_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeMonsterExpBuffResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 left_monster_exp_buff_times = 2;
    if (has_left_monster_exp_buff_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_monster_exp_buff_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeMonsterExpBuffResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeMonsterExpBuffResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeMonsterExpBuffResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeMonsterExpBuffResponse::MergeFrom(const TakeMonsterExpBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_monster_exp_buff_times()) {
      set_left_monster_exp_buff_times(from.left_monster_exp_buff_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeMonsterExpBuffResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeMonsterExpBuffResponse::CopyFrom(const TakeMonsterExpBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeMonsterExpBuffResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeMonsterExpBuffResponse::Swap(TakeMonsterExpBuffResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_monster_exp_buff_times_, other->left_monster_exp_buff_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeMonsterExpBuffResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeMonsterExpBuffResponse_descriptor_;
  metadata.reflection = TakeMonsterExpBuffResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberOpenMonsterExpBuffNotify::kLeaderGuidFieldNumber;
const int TeamMemberOpenMonsterExpBuffNotify::kLeftCanTakeTimesFieldNumber;
#endif  // !_MSC_VER

TeamMemberOpenMonsterExpBuffNotify::TeamMemberOpenMonsterExpBuffNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberOpenMonsterExpBuffNotify::InitAsDefaultInstance() {
}

TeamMemberOpenMonsterExpBuffNotify::TeamMemberOpenMonsterExpBuffNotify(const TeamMemberOpenMonsterExpBuffNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberOpenMonsterExpBuffNotify::SharedCtor() {
  _cached_size_ = 0;
  leader_guid_ = GOOGLE_LONGLONG(0);
  left_can_take_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberOpenMonsterExpBuffNotify::~TeamMemberOpenMonsterExpBuffNotify() {
  SharedDtor();
}

void TeamMemberOpenMonsterExpBuffNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberOpenMonsterExpBuffNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberOpenMonsterExpBuffNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberOpenMonsterExpBuffNotify_descriptor_;
}

const TeamMemberOpenMonsterExpBuffNotify& TeamMemberOpenMonsterExpBuffNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamMemberOpenMonsterExpBuffNotify* TeamMemberOpenMonsterExpBuffNotify::default_instance_ = NULL;

TeamMemberOpenMonsterExpBuffNotify* TeamMemberOpenMonsterExpBuffNotify::New() const {
  return new TeamMemberOpenMonsterExpBuffNotify;
}

void TeamMemberOpenMonsterExpBuffNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leader_guid_ = GOOGLE_LONGLONG(0);
    left_can_take_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberOpenMonsterExpBuffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 leader_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_can_take_times;
        break;
      }
      
      // optional int32 left_can_take_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_can_take_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_can_take_times_)));
          set_has_left_can_take_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberOpenMonsterExpBuffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 leader_guid = 1;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leader_guid(), output);
  }
  
  // optional int32 left_can_take_times = 2;
  if (has_left_can_take_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_can_take_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberOpenMonsterExpBuffNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 leader_guid = 1;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leader_guid(), target);
  }
  
  // optional int32 left_can_take_times = 2;
  if (has_left_can_take_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_can_take_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberOpenMonsterExpBuffNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 leader_guid = 1;
    if (has_leader_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // optional int32 left_can_take_times = 2;
    if (has_left_can_take_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_can_take_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberOpenMonsterExpBuffNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberOpenMonsterExpBuffNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberOpenMonsterExpBuffNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberOpenMonsterExpBuffNotify::MergeFrom(const TeamMemberOpenMonsterExpBuffNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_left_can_take_times()) {
      set_left_can_take_times(from.left_can_take_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberOpenMonsterExpBuffNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberOpenMonsterExpBuffNotify::CopyFrom(const TeamMemberOpenMonsterExpBuffNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberOpenMonsterExpBuffNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TeamMemberOpenMonsterExpBuffNotify::Swap(TeamMemberOpenMonsterExpBuffNotify* other) {
  if (other != this) {
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(left_can_take_times_, other->left_can_take_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberOpenMonsterExpBuffNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberOpenMonsterExpBuffNotify_descriptor_;
  metadata.reflection = TeamMemberOpenMonsterExpBuffNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLivenessInfoRequest::GetLivenessInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLivenessInfoRequest::InitAsDefaultInstance() {
}

GetLivenessInfoRequest::GetLivenessInfoRequest(const GetLivenessInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLivenessInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLivenessInfoRequest::~GetLivenessInfoRequest() {
  SharedDtor();
}

void GetLivenessInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLivenessInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLivenessInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLivenessInfoRequest_descriptor_;
}

const GetLivenessInfoRequest& GetLivenessInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLivenessInfoRequest* GetLivenessInfoRequest::default_instance_ = NULL;

GetLivenessInfoRequest* GetLivenessInfoRequest::New() const {
  return new GetLivenessInfoRequest;
}

void GetLivenessInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLivenessInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetLivenessInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLivenessInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLivenessInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLivenessInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLivenessInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLivenessInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLivenessInfoRequest::MergeFrom(const GetLivenessInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLivenessInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLivenessInfoRequest::CopyFrom(const GetLivenessInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLivenessInfoRequest::IsInitialized() const {
  
  return true;
}

void GetLivenessInfoRequest::Swap(GetLivenessInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLivenessInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLivenessInfoRequest_descriptor_;
  metadata.reflection = GetLivenessInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLivenessInfoResponse::kErrorCodeFieldNumber;
const int GetLivenessInfoResponse::kLivenessTotalFieldNumber;
const int GetLivenessInfoResponse::kLivenessListFieldNumber;
const int GetLivenessInfoResponse::kAwardListFieldNumber;
#endif  // !_MSC_VER

GetLivenessInfoResponse::GetLivenessInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLivenessInfoResponse::InitAsDefaultInstance() {
}

GetLivenessInfoResponse::GetLivenessInfoResponse(const GetLivenessInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLivenessInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  liveness_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLivenessInfoResponse::~GetLivenessInfoResponse() {
  SharedDtor();
}

void GetLivenessInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLivenessInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLivenessInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLivenessInfoResponse_descriptor_;
}

const GetLivenessInfoResponse& GetLivenessInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetLivenessInfoResponse* GetLivenessInfoResponse::default_instance_ = NULL;

GetLivenessInfoResponse* GetLivenessInfoResponse::New() const {
  return new GetLivenessInfoResponse;
}

void GetLivenessInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    liveness_total_ = 0;
  }
  liveness_list_.Clear();
  award_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLivenessInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_liveness_total;
        break;
      }
      
      // optional int32 liveness_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveness_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liveness_total_)));
          set_has_liveness_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_liveness_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData liveness_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_liveness_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_liveness_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_liveness_list;
        if (input->ExpectTag(34)) goto parse_award_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData award_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_award_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLivenessInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 liveness_total = 2;
  if (has_liveness_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->liveness_total(), output);
  }
  
  // repeated .protocols.common.AttributeData liveness_list = 3;
  for (int i = 0; i < this->liveness_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->liveness_list(i), output);
  }
  
  // repeated .protocols.common.AttributeData award_list = 4;
  for (int i = 0; i < this->award_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->award_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLivenessInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 liveness_total = 2;
  if (has_liveness_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->liveness_total(), target);
  }
  
  // repeated .protocols.common.AttributeData liveness_list = 3;
  for (int i = 0; i < this->liveness_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->liveness_list(i), target);
  }
  
  // repeated .protocols.common.AttributeData award_list = 4;
  for (int i = 0; i < this->award_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->award_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLivenessInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 liveness_total = 2;
    if (has_liveness_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liveness_total());
    }
    
  }
  // repeated .protocols.common.AttributeData liveness_list = 3;
  total_size += 1 * this->liveness_list_size();
  for (int i = 0; i < this->liveness_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->liveness_list(i));
  }
  
  // repeated .protocols.common.AttributeData award_list = 4;
  total_size += 1 * this->award_list_size();
  for (int i = 0; i < this->award_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLivenessInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLivenessInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLivenessInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLivenessInfoResponse::MergeFrom(const GetLivenessInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  liveness_list_.MergeFrom(from.liveness_list_);
  award_list_.MergeFrom(from.award_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_liveness_total()) {
      set_liveness_total(from.liveness_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLivenessInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLivenessInfoResponse::CopyFrom(const GetLivenessInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLivenessInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetLivenessInfoResponse::Swap(GetLivenessInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(liveness_total_, other->liveness_total_);
    liveness_list_.Swap(&other->liveness_list_);
    award_list_.Swap(&other->award_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLivenessInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLivenessInfoResponse_descriptor_;
  metadata.reflection = GetLivenessInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeLivenessAwardRequest::kAwardIdFieldNumber;
#endif  // !_MSC_VER

TakeLivenessAwardRequest::TakeLivenessAwardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeLivenessAwardRequest::InitAsDefaultInstance() {
}

TakeLivenessAwardRequest::TakeLivenessAwardRequest(const TakeLivenessAwardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeLivenessAwardRequest::SharedCtor() {
  _cached_size_ = 0;
  award_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeLivenessAwardRequest::~TakeLivenessAwardRequest() {
  SharedDtor();
}

void TakeLivenessAwardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeLivenessAwardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeLivenessAwardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeLivenessAwardRequest_descriptor_;
}

const TakeLivenessAwardRequest& TakeLivenessAwardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeLivenessAwardRequest* TakeLivenessAwardRequest::default_instance_ = NULL;

TakeLivenessAwardRequest* TakeLivenessAwardRequest::New() const {
  return new TakeLivenessAwardRequest;
}

void TakeLivenessAwardRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    award_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeLivenessAwardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 award_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &award_id_)));
          set_has_award_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeLivenessAwardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 award_id = 1;
  if (has_award_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->award_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeLivenessAwardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 award_id = 1;
  if (has_award_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->award_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeLivenessAwardRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 award_id = 1;
    if (has_award_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->award_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeLivenessAwardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeLivenessAwardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeLivenessAwardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeLivenessAwardRequest::MergeFrom(const TakeLivenessAwardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_award_id()) {
      set_award_id(from.award_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeLivenessAwardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeLivenessAwardRequest::CopyFrom(const TakeLivenessAwardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeLivenessAwardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeLivenessAwardRequest::Swap(TakeLivenessAwardRequest* other) {
  if (other != this) {
    std::swap(award_id_, other->award_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeLivenessAwardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeLivenessAwardRequest_descriptor_;
  metadata.reflection = TakeLivenessAwardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeLivenessAwardResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TakeLivenessAwardResponse::TakeLivenessAwardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeLivenessAwardResponse::InitAsDefaultInstance() {
}

TakeLivenessAwardResponse::TakeLivenessAwardResponse(const TakeLivenessAwardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeLivenessAwardResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeLivenessAwardResponse::~TakeLivenessAwardResponse() {
  SharedDtor();
}

void TakeLivenessAwardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeLivenessAwardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeLivenessAwardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeLivenessAwardResponse_descriptor_;
}

const TakeLivenessAwardResponse& TakeLivenessAwardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TakeLivenessAwardResponse* TakeLivenessAwardResponse::default_instance_ = NULL;

TakeLivenessAwardResponse* TakeLivenessAwardResponse::New() const {
  return new TakeLivenessAwardResponse;
}

void TakeLivenessAwardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeLivenessAwardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeLivenessAwardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeLivenessAwardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeLivenessAwardResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeLivenessAwardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeLivenessAwardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeLivenessAwardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeLivenessAwardResponse::MergeFrom(const TakeLivenessAwardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeLivenessAwardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeLivenessAwardResponse::CopyFrom(const TakeLivenessAwardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeLivenessAwardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeLivenessAwardResponse::Swap(TakeLivenessAwardResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeLivenessAwardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeLivenessAwardResponse_descriptor_;
  metadata.reflection = TakeLivenessAwardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LivenessUpdateNotify::kLivenessTypeFieldNumber;
const int LivenessUpdateNotify::kLivenessTotalFieldNumber;
const int LivenessUpdateNotify::kAwardListFieldNumber;
#endif  // !_MSC_VER

LivenessUpdateNotify::LivenessUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LivenessUpdateNotify::InitAsDefaultInstance() {
}

LivenessUpdateNotify::LivenessUpdateNotify(const LivenessUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LivenessUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  liveness_type_ = 0;
  liveness_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivenessUpdateNotify::~LivenessUpdateNotify() {
  SharedDtor();
}

void LivenessUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LivenessUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivenessUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessUpdateNotify_descriptor_;
}

const LivenessUpdateNotify& LivenessUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LivenessUpdateNotify* LivenessUpdateNotify::default_instance_ = NULL;

LivenessUpdateNotify* LivenessUpdateNotify::New() const {
  return new LivenessUpdateNotify;
}

void LivenessUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    liveness_type_ = 0;
    liveness_total_ = 0;
  }
  award_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivenessUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 liveness_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liveness_type_)));
          set_has_liveness_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_liveness_total;
        break;
      }
      
      // optional int32 liveness_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liveness_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &liveness_total_)));
          set_has_liveness_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData award_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_award_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LivenessUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 liveness_type = 1;
  if (has_liveness_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->liveness_type(), output);
  }
  
  // optional int32 liveness_total = 2;
  if (has_liveness_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->liveness_total(), output);
  }
  
  // repeated .protocols.common.AttributeData award_list = 3;
  for (int i = 0; i < this->award_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->award_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LivenessUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 liveness_type = 1;
  if (has_liveness_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->liveness_type(), target);
  }
  
  // optional int32 liveness_total = 2;
  if (has_liveness_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->liveness_total(), target);
  }
  
  // repeated .protocols.common.AttributeData award_list = 3;
  for (int i = 0; i < this->award_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->award_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LivenessUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 liveness_type = 1;
    if (has_liveness_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liveness_type());
    }
    
    // optional int32 liveness_total = 2;
    if (has_liveness_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->liveness_total());
    }
    
  }
  // repeated .protocols.common.AttributeData award_list = 3;
  total_size += 1 * this->award_list_size();
  for (int i = 0; i < this->award_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivenessUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivenessUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivenessUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivenessUpdateNotify::MergeFrom(const LivenessUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_list_.MergeFrom(from.award_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liveness_type()) {
      set_liveness_type(from.liveness_type());
    }
    if (from.has_liveness_total()) {
      set_liveness_total(from.liveness_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivenessUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivenessUpdateNotify::CopyFrom(const LivenessUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessUpdateNotify::IsInitialized() const {
  
  return true;
}

void LivenessUpdateNotify::Swap(LivenessUpdateNotify* other) {
  if (other != this) {
    std::swap(liveness_type_, other->liveness_type_);
    std::swap(liveness_total_, other->liveness_total_);
    award_list_.Swap(&other->award_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivenessUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivenessUpdateNotify_descriptor_;
  metadata.reflection = LivenessUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPlayerConfigRequest::GetPlayerConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerConfigRequest::InitAsDefaultInstance() {
}

GetPlayerConfigRequest::GetPlayerConfigRequest(const GetPlayerConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerConfigRequest::~GetPlayerConfigRequest() {
  SharedDtor();
}

void GetPlayerConfigRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayerConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerConfigRequest_descriptor_;
}

const GetPlayerConfigRequest& GetPlayerConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetPlayerConfigRequest* GetPlayerConfigRequest::default_instance_ = NULL;

GetPlayerConfigRequest* GetPlayerConfigRequest::New() const {
  return new GetPlayerConfigRequest;
}

void GetPlayerConfigRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetPlayerConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerConfigRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerConfigRequest::MergeFrom(const GetPlayerConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerConfigRequest::CopyFrom(const GetPlayerConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerConfigRequest::IsInitialized() const {
  
  return true;
}

void GetPlayerConfigRequest::Swap(GetPlayerConfigRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerConfigRequest_descriptor_;
  metadata.reflection = GetPlayerConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayerConfigRequest::kConfigListFieldNumber;
#endif  // !_MSC_VER

SetPlayerConfigRequest::SetPlayerConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPlayerConfigRequest::InitAsDefaultInstance() {
}

SetPlayerConfigRequest::SetPlayerConfigRequest(const SetPlayerConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPlayerConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayerConfigRequest::~SetPlayerConfigRequest() {
  SharedDtor();
}

void SetPlayerConfigRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPlayerConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayerConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayerConfigRequest_descriptor_;
}

const SetPlayerConfigRequest& SetPlayerConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SetPlayerConfigRequest* SetPlayerConfigRequest::default_instance_ = NULL;

SetPlayerConfigRequest* SetPlayerConfigRequest::New() const {
  return new SetPlayerConfigRequest;
}

void SetPlayerConfigRequest::Clear() {
  config_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayerConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.AttributeData config_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_config_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPlayerConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.AttributeData config_list = 1;
  for (int i = 0; i < this->config_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPlayerConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.AttributeData config_list = 1;
  for (int i = 0; i < this->config_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPlayerConfigRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.AttributeData config_list = 1;
  total_size += 1 * this->config_list_size();
  for (int i = 0; i < this->config_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayerConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayerConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayerConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayerConfigRequest::MergeFrom(const SetPlayerConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_list_.MergeFrom(from.config_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayerConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerConfigRequest::CopyFrom(const SetPlayerConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerConfigRequest::IsInitialized() const {
  
  return true;
}

void SetPlayerConfigRequest::Swap(SetPlayerConfigRequest* other) {
  if (other != this) {
    config_list_.Swap(&other->config_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayerConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayerConfigRequest_descriptor_;
  metadata.reflection = SetPlayerConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPlayerConfigResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SetPlayerConfigResponse::SetPlayerConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPlayerConfigResponse::InitAsDefaultInstance() {
}

SetPlayerConfigResponse::SetPlayerConfigResponse(const SetPlayerConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPlayerConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPlayerConfigResponse::~SetPlayerConfigResponse() {
  SharedDtor();
}

void SetPlayerConfigResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPlayerConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPlayerConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPlayerConfigResponse_descriptor_;
}

const SetPlayerConfigResponse& SetPlayerConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SetPlayerConfigResponse* SetPlayerConfigResponse::default_instance_ = NULL;

SetPlayerConfigResponse* SetPlayerConfigResponse::New() const {
  return new SetPlayerConfigResponse;
}

void SetPlayerConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPlayerConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPlayerConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPlayerConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPlayerConfigResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPlayerConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPlayerConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPlayerConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPlayerConfigResponse::MergeFrom(const SetPlayerConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPlayerConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPlayerConfigResponse::CopyFrom(const SetPlayerConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPlayerConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetPlayerConfigResponse::Swap(SetPlayerConfigResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPlayerConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPlayerConfigResponse_descriptor_;
  metadata.reflection = SetPlayerConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPlayerConfigResponse::kErrorCodeFieldNumber;
const int GetPlayerConfigResponse::kConfigListFieldNumber;
#endif  // !_MSC_VER

GetPlayerConfigResponse::GetPlayerConfigResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPlayerConfigResponse::InitAsDefaultInstance() {
}

GetPlayerConfigResponse::GetPlayerConfigResponse(const GetPlayerConfigResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPlayerConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPlayerConfigResponse::~GetPlayerConfigResponse() {
  SharedDtor();
}

void GetPlayerConfigResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayerConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayerConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayerConfigResponse_descriptor_;
}

const GetPlayerConfigResponse& GetPlayerConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetPlayerConfigResponse* GetPlayerConfigResponse::default_instance_ = NULL;

GetPlayerConfigResponse* GetPlayerConfigResponse::New() const {
  return new GetPlayerConfigResponse;
}

void GetPlayerConfigResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  config_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPlayerConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData config_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPlayerConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.AttributeData config_list = 2;
  for (int i = 0; i < this->config_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPlayerConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.AttributeData config_list = 2;
  for (int i = 0; i < this->config_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPlayerConfigResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.AttributeData config_list = 2;
  total_size += 1 * this->config_list_size();
  for (int i = 0; i < this->config_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayerConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPlayerConfigResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPlayerConfigResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayerConfigResponse::MergeFrom(const GetPlayerConfigResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_list_.MergeFrom(from.config_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPlayerConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayerConfigResponse::CopyFrom(const GetPlayerConfigResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayerConfigResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetPlayerConfigResponse::Swap(GetPlayerConfigResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    config_list_.Swap(&other->config_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPlayerConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayerConfigResponse_descriptor_;
  metadata.reflection = GetPlayerConfigResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightWithOtherPlayerRequest::kObjectGuidFieldNumber;
#endif  // !_MSC_VER

FightWithOtherPlayerRequest::FightWithOtherPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightWithOtherPlayerRequest::InitAsDefaultInstance() {
}

FightWithOtherPlayerRequest::FightWithOtherPlayerRequest(const FightWithOtherPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightWithOtherPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightWithOtherPlayerRequest::~FightWithOtherPlayerRequest() {
  SharedDtor();
}

void FightWithOtherPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightWithOtherPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightWithOtherPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightWithOtherPlayerRequest_descriptor_;
}

const FightWithOtherPlayerRequest& FightWithOtherPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FightWithOtherPlayerRequest* FightWithOtherPlayerRequest::default_instance_ = NULL;

FightWithOtherPlayerRequest* FightWithOtherPlayerRequest::New() const {
  return new FightWithOtherPlayerRequest;
}

void FightWithOtherPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightWithOtherPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightWithOtherPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->object_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightWithOtherPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->object_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightWithOtherPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightWithOtherPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightWithOtherPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightWithOtherPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightWithOtherPlayerRequest::MergeFrom(const FightWithOtherPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightWithOtherPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightWithOtherPlayerRequest::CopyFrom(const FightWithOtherPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightWithOtherPlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FightWithOtherPlayerRequest::Swap(FightWithOtherPlayerRequest* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightWithOtherPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightWithOtherPlayerRequest_descriptor_;
  metadata.reflection = FightWithOtherPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightWithOtherPlayerResponse::kErrorCodeFieldNumber;
const int FightWithOtherPlayerResponse::kObjectNameFieldNumber;
const int FightWithOtherPlayerResponse::kIsObjectInTeamFieldNumber;
#endif  // !_MSC_VER

FightWithOtherPlayerResponse::FightWithOtherPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightWithOtherPlayerResponse::InitAsDefaultInstance() {
}

FightWithOtherPlayerResponse::FightWithOtherPlayerResponse(const FightWithOtherPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightWithOtherPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_object_in_team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightWithOtherPlayerResponse::~FightWithOtherPlayerResponse() {
  SharedDtor();
}

void FightWithOtherPlayerResponse::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (this != default_instance_) {
  }
}

void FightWithOtherPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightWithOtherPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightWithOtherPlayerResponse_descriptor_;
}

const FightWithOtherPlayerResponse& FightWithOtherPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FightWithOtherPlayerResponse* FightWithOtherPlayerResponse::default_instance_ = NULL;

FightWithOtherPlayerResponse* FightWithOtherPlayerResponse::New() const {
  return new FightWithOtherPlayerResponse;
}

void FightWithOtherPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    is_object_in_team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightWithOtherPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_name;
        break;
      }
      
      // optional string object_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_object_in_team;
        break;
      }
      
      // optional int32 is_object_in_team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_object_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_object_in_team_)));
          set_has_is_object_in_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightWithOtherPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_name(), output);
  }
  
  // optional int32 is_object_in_team = 3;
  if (has_is_object_in_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_object_in_team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightWithOtherPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_name(), target);
  }
  
  // optional int32 is_object_in_team = 3;
  if (has_is_object_in_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_object_in_team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightWithOtherPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional string object_name = 2;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }
    
    // optional int32 is_object_in_team = 3;
    if (has_is_object_in_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_object_in_team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightWithOtherPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightWithOtherPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightWithOtherPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightWithOtherPlayerResponse::MergeFrom(const FightWithOtherPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_is_object_in_team()) {
      set_is_object_in_team(from.is_object_in_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightWithOtherPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightWithOtherPlayerResponse::CopyFrom(const FightWithOtherPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightWithOtherPlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FightWithOtherPlayerResponse::Swap(FightWithOtherPlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(object_name_, other->object_name_);
    std::swap(is_object_in_team_, other->is_object_in_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightWithOtherPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightWithOtherPlayerResponse_descriptor_;
  metadata.reflection = FightWithOtherPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFightInvitationNotify::kSenderGuidFieldNumber;
const int SendFightInvitationNotify::kSenderNameFieldNumber;
const int SendFightInvitationNotify::kSenderLevelFieldNumber;
const int SendFightInvitationNotify::kIsSenderTeamLeaderFieldNumber;
#endif  // !_MSC_VER

SendFightInvitationNotify::SendFightInvitationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendFightInvitationNotify::InitAsDefaultInstance() {
}

SendFightInvitationNotify::SendFightInvitationNotify(const SendFightInvitationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendFightInvitationNotify::SharedCtor() {
  _cached_size_ = 0;
  sender_guid_ = GOOGLE_LONGLONG(0);
  sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_level_ = 0;
  is_sender_team_leader_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFightInvitationNotify::~SendFightInvitationNotify() {
  SharedDtor();
}

void SendFightInvitationNotify::SharedDtor() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (this != default_instance_) {
  }
}

void SendFightInvitationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFightInvitationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFightInvitationNotify_descriptor_;
}

const SendFightInvitationNotify& SendFightInvitationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SendFightInvitationNotify* SendFightInvitationNotify::default_instance_ = NULL;

SendFightInvitationNotify* SendFightInvitationNotify::New() const {
  return new SendFightInvitationNotify;
}

void SendFightInvitationNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sender_guid_ = GOOGLE_LONGLONG(0);
    if (has_sender_name()) {
      if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
        sender_name_->clear();
      }
    }
    sender_level_ = 0;
    is_sender_team_leader_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFightInvitationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sender_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sender_guid_)));
          set_has_sender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sender_name;
        break;
      }
      
      // required string sender_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender_level;
        break;
      }
      
      // optional int32 sender_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_level_)));
          set_has_sender_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_sender_team_leader;
        break;
      }
      
      // optional int32 is_sender_team_leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sender_team_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sender_team_leader_)));
          set_has_is_sender_team_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendFightInvitationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sender_guid = 1;
  if (has_sender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sender_guid(), output);
  }
  
  // required string sender_name = 2;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sender_name(), output);
  }
  
  // optional int32 sender_level = 3;
  if (has_sender_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_level(), output);
  }
  
  // optional int32 is_sender_team_leader = 4;
  if (has_is_sender_team_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_sender_team_leader(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendFightInvitationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sender_guid = 1;
  if (has_sender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sender_guid(), target);
  }
  
  // required string sender_name = 2;
  if (has_sender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender_name(), target);
  }
  
  // optional int32 sender_level = 3;
  if (has_sender_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_level(), target);
  }
  
  // optional int32 is_sender_team_leader = 4;
  if (has_is_sender_team_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_sender_team_leader(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendFightInvitationNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sender_guid = 1;
    if (has_sender_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sender_guid());
    }
    
    // required string sender_name = 2;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }
    
    // optional int32 sender_level = 3;
    if (has_sender_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender_level());
    }
    
    // optional int32 is_sender_team_leader = 4;
    if (has_is_sender_team_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sender_team_leader());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFightInvitationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFightInvitationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFightInvitationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFightInvitationNotify::MergeFrom(const SendFightInvitationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender_guid()) {
      set_sender_guid(from.sender_guid());
    }
    if (from.has_sender_name()) {
      set_sender_name(from.sender_name());
    }
    if (from.has_sender_level()) {
      set_sender_level(from.sender_level());
    }
    if (from.has_is_sender_team_leader()) {
      set_is_sender_team_leader(from.is_sender_team_leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFightInvitationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFightInvitationNotify::CopyFrom(const SendFightInvitationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFightInvitationNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SendFightInvitationNotify::Swap(SendFightInvitationNotify* other) {
  if (other != this) {
    std::swap(sender_guid_, other->sender_guid_);
    std::swap(sender_name_, other->sender_name_);
    std::swap(sender_level_, other->sender_level_);
    std::swap(is_sender_team_leader_, other->is_sender_team_leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFightInvitationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFightInvitationNotify_descriptor_;
  metadata.reflection = SendFightInvitationNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightInviteReplyRequest::kInviterGuidFieldNumber;
const int FightInviteReplyRequest::kAgreeToFightFieldNumber;
#endif  // !_MSC_VER

FightInviteReplyRequest::FightInviteReplyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightInviteReplyRequest::InitAsDefaultInstance() {
}

FightInviteReplyRequest::FightInviteReplyRequest(const FightInviteReplyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightInviteReplyRequest::SharedCtor() {
  _cached_size_ = 0;
  inviter_guid_ = GOOGLE_LONGLONG(0);
  agree_to_fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightInviteReplyRequest::~FightInviteReplyRequest() {
  SharedDtor();
}

void FightInviteReplyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightInviteReplyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightInviteReplyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightInviteReplyRequest_descriptor_;
}

const FightInviteReplyRequest& FightInviteReplyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FightInviteReplyRequest* FightInviteReplyRequest::default_instance_ = NULL;

FightInviteReplyRequest* FightInviteReplyRequest::New() const {
  return new FightInviteReplyRequest;
}

void FightInviteReplyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inviter_guid_ = GOOGLE_LONGLONG(0);
    agree_to_fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightInviteReplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 inviter_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inviter_guid_)));
          set_has_inviter_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree_to_fight;
        break;
      }
      
      // required int32 agree_to_fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree_to_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_to_fight_)));
          set_has_agree_to_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightInviteReplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 inviter_guid = 1;
  if (has_inviter_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->inviter_guid(), output);
  }
  
  // required int32 agree_to_fight = 2;
  if (has_agree_to_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->agree_to_fight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightInviteReplyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 inviter_guid = 1;
  if (has_inviter_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->inviter_guid(), target);
  }
  
  // required int32 agree_to_fight = 2;
  if (has_agree_to_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->agree_to_fight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightInviteReplyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 inviter_guid = 1;
    if (has_inviter_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inviter_guid());
    }
    
    // required int32 agree_to_fight = 2;
    if (has_agree_to_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agree_to_fight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightInviteReplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightInviteReplyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightInviteReplyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightInviteReplyRequest::MergeFrom(const FightInviteReplyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviter_guid()) {
      set_inviter_guid(from.inviter_guid());
    }
    if (from.has_agree_to_fight()) {
      set_agree_to_fight(from.agree_to_fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightInviteReplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightInviteReplyRequest::CopyFrom(const FightInviteReplyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightInviteReplyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FightInviteReplyRequest::Swap(FightInviteReplyRequest* other) {
  if (other != this) {
    std::swap(inviter_guid_, other->inviter_guid_);
    std::swap(agree_to_fight_, other->agree_to_fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightInviteReplyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightInviteReplyRequest_descriptor_;
  metadata.reflection = FightInviteReplyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightInviteReplyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

FightInviteReplyResponse::FightInviteReplyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightInviteReplyResponse::InitAsDefaultInstance() {
}

FightInviteReplyResponse::FightInviteReplyResponse(const FightInviteReplyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightInviteReplyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightInviteReplyResponse::~FightInviteReplyResponse() {
  SharedDtor();
}

void FightInviteReplyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightInviteReplyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightInviteReplyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightInviteReplyResponse_descriptor_;
}

const FightInviteReplyResponse& FightInviteReplyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FightInviteReplyResponse* FightInviteReplyResponse::default_instance_ = NULL;

FightInviteReplyResponse* FightInviteReplyResponse::New() const {
  return new FightInviteReplyResponse;
}

void FightInviteReplyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightInviteReplyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightInviteReplyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightInviteReplyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightInviteReplyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightInviteReplyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightInviteReplyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightInviteReplyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightInviteReplyResponse::MergeFrom(const FightInviteReplyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightInviteReplyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightInviteReplyResponse::CopyFrom(const FightInviteReplyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightInviteReplyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FightInviteReplyResponse::Swap(FightInviteReplyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightInviteReplyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightInviteReplyResponse_descriptor_;
  metadata.reflection = FightInviteReplyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightInviteReplyNotify::kIsAgreeToFightFieldNumber;
const int FightInviteReplyNotify::kObjectNameFieldNumber;
const int FightInviteReplyNotify::kIsObjectInTeamFieldNumber;
#endif  // !_MSC_VER

FightInviteReplyNotify::FightInviteReplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightInviteReplyNotify::InitAsDefaultInstance() {
}

FightInviteReplyNotify::FightInviteReplyNotify(const FightInviteReplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightInviteReplyNotify::SharedCtor() {
  _cached_size_ = 0;
  is_agree_to_fight_ = 0;
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_object_in_team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightInviteReplyNotify::~FightInviteReplyNotify() {
  SharedDtor();
}

void FightInviteReplyNotify::SharedDtor() {
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (this != default_instance_) {
  }
}

void FightInviteReplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightInviteReplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightInviteReplyNotify_descriptor_;
}

const FightInviteReplyNotify& FightInviteReplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FightInviteReplyNotify* FightInviteReplyNotify::default_instance_ = NULL;

FightInviteReplyNotify* FightInviteReplyNotify::New() const {
  return new FightInviteReplyNotify;
}

void FightInviteReplyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_to_fight_ = 0;
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    is_object_in_team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightInviteReplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 is_agree_to_fight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_agree_to_fight_)));
          set_has_is_agree_to_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_name;
        break;
      }
      
      // optional string object_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_object_in_team;
        break;
      }
      
      // optional int32 is_object_in_team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_object_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_object_in_team_)));
          set_has_is_object_in_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightInviteReplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 is_agree_to_fight = 1;
  if (has_is_agree_to_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_agree_to_fight(), output);
  }
  
  // optional string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_name(), output);
  }
  
  // optional int32 is_object_in_team = 3;
  if (has_is_object_in_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_object_in_team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightInviteReplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 is_agree_to_fight = 1;
  if (has_is_agree_to_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_agree_to_fight(), target);
  }
  
  // optional string object_name = 2;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_name(), target);
  }
  
  // optional int32 is_object_in_team = 3;
  if (has_is_object_in_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_object_in_team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightInviteReplyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 is_agree_to_fight = 1;
    if (has_is_agree_to_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_agree_to_fight());
    }
    
    // optional string object_name = 2;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }
    
    // optional int32 is_object_in_team = 3;
    if (has_is_object_in_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_object_in_team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightInviteReplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightInviteReplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightInviteReplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightInviteReplyNotify::MergeFrom(const FightInviteReplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree_to_fight()) {
      set_is_agree_to_fight(from.is_agree_to_fight());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_is_object_in_team()) {
      set_is_object_in_team(from.is_object_in_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightInviteReplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightInviteReplyNotify::CopyFrom(const FightInviteReplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightInviteReplyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FightInviteReplyNotify::Swap(FightInviteReplyNotify* other) {
  if (other != this) {
    std::swap(is_agree_to_fight_, other->is_agree_to_fight_);
    std::swap(object_name_, other->object_name_);
    std::swap(is_object_in_team_, other->is_object_in_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightInviteReplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightInviteReplyNotify_descriptor_;
  metadata.reflection = FightInviteReplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMonsterBuffNotify::kUpdateTypeFieldNumber;
const int UpdateMonsterBuffNotify::kBuffIdFieldNumber;
const int UpdateMonsterBuffNotify::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

UpdateMonsterBuffNotify::UpdateMonsterBuffNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMonsterBuffNotify::InitAsDefaultInstance() {
}

UpdateMonsterBuffNotify::UpdateMonsterBuffNotify(const UpdateMonsterBuffNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMonsterBuffNotify::SharedCtor() {
  _cached_size_ = 0;
  update_type_ = 0;
  buff_id_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMonsterBuffNotify::~UpdateMonsterBuffNotify() {
  SharedDtor();
}

void UpdateMonsterBuffNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateMonsterBuffNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMonsterBuffNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMonsterBuffNotify_descriptor_;
}

const UpdateMonsterBuffNotify& UpdateMonsterBuffNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateMonsterBuffNotify* UpdateMonsterBuffNotify::default_instance_ = NULL;

UpdateMonsterBuffNotify* UpdateMonsterBuffNotify::New() const {
  return new UpdateMonsterBuffNotify;
}

void UpdateMonsterBuffNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_type_ = 0;
    buff_id_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMonsterBuffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.UpdateMonsterBuffType update_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::UpdateMonsterBuffType_IsValid(value)) {
            set_update_type(static_cast< protocols::common::UpdateMonsterBuffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }
      
      // optional int32 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMonsterBuffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.UpdateMonsterBuffType update_type = 1;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_type(), output);
  }
  
  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_id(), output);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMonsterBuffNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.UpdateMonsterBuffType update_type = 1;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->update_type(), target);
  }
  
  // optional int32 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_id(), target);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMonsterBuffNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.UpdateMonsterBuffType update_type = 1;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
    }
    
    // optional int32 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }
    
    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMonsterBuffNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMonsterBuffNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMonsterBuffNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMonsterBuffNotify::MergeFrom(const UpdateMonsterBuffNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMonsterBuffNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMonsterBuffNotify::CopyFrom(const UpdateMonsterBuffNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMonsterBuffNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateMonsterBuffNotify::Swap(UpdateMonsterBuffNotify* other) {
  if (other != this) {
    std::swap(update_type_, other->update_type_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMonsterBuffNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMonsterBuffNotify_descriptor_;
  metadata.reflection = UpdateMonsterBuffNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamChannelMemberNotify::kUpdateTypeFieldNumber;
const int TeamChannelMemberNotify::kTeamLeaderNameFieldNumber;
const int TeamChannelMemberNotify::kObjectGuidFieldNumber;
const int TeamChannelMemberNotify::kObjectNameFieldNumber;
const int TeamChannelMemberNotify::kNewLevelFieldNumber;
const int TeamChannelMemberNotify::kItemFieldNumber;
#endif  // !_MSC_VER

TeamChannelMemberNotify::TeamChannelMemberNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamChannelMemberNotify::InitAsDefaultInstance() {
}

TeamChannelMemberNotify::TeamChannelMemberNotify(const TeamChannelMemberNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamChannelMemberNotify::SharedCtor() {
  _cached_size_ = 0;
  update_type_ = 1;
  team_leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_guid_ = GOOGLE_LONGLONG(0);
  object_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamChannelMemberNotify::~TeamChannelMemberNotify() {
  SharedDtor();
}

void TeamChannelMemberNotify::SharedDtor() {
  if (team_leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_leader_name_;
  }
  if (object_name_ != &::google::protobuf::internal::kEmptyString) {
    delete object_name_;
  }
  if (this != default_instance_) {
  }
}

void TeamChannelMemberNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamChannelMemberNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamChannelMemberNotify_descriptor_;
}

const TeamChannelMemberNotify& TeamChannelMemberNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

TeamChannelMemberNotify* TeamChannelMemberNotify::default_instance_ = NULL;

TeamChannelMemberNotify* TeamChannelMemberNotify::New() const {
  return new TeamChannelMemberNotify;
}

void TeamChannelMemberNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_type_ = 1;
    if (has_team_leader_name()) {
      if (team_leader_name_ != &::google::protobuf::internal::kEmptyString) {
        team_leader_name_->clear();
      }
    }
    object_guid_ = GOOGLE_LONGLONG(0);
    if (has_object_name()) {
      if (object_name_ != &::google::protobuf::internal::kEmptyString) {
        object_name_->clear();
      }
    }
    new_level_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamChannelMemberNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.TeamChannelMemberNotifyType update_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TeamChannelMemberNotifyType_IsValid(value)) {
            set_update_type(static_cast< protocols::common::TeamChannelMemberNotifyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_leader_name;
        break;
      }
      
      // optional string team_leader_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_leader_name().data(), this->team_leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_object_guid;
        break;
      }
      
      // optional int64 object_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_object_name;
        break;
      }
      
      // optional string object_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_name().data(), this->object_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_level;
        break;
      }
      
      // optional int32 new_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamChannelMemberNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.TeamChannelMemberNotifyType update_type = 1;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->update_type(), output);
  }
  
  // optional string team_leader_name = 2;
  if (has_team_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_leader_name().data(), this->team_leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->team_leader_name(), output);
  }
  
  // optional int64 object_guid = 3;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->object_guid(), output);
  }
  
  // optional string object_name = 4;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->object_name(), output);
  }
  
  // optional int32 new_level = 5;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->new_level(), output);
  }
  
  // repeated .protocols.common.ItemInfo item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamChannelMemberNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.TeamChannelMemberNotifyType update_type = 1;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->update_type(), target);
  }
  
  // optional string team_leader_name = 2;
  if (has_team_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_leader_name().data(), this->team_leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_leader_name(), target);
  }
  
  // optional int64 object_guid = 3;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->object_guid(), target);
  }
  
  // optional string object_name = 4;
  if (has_object_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_name().data(), this->object_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->object_name(), target);
  }
  
  // optional int32 new_level = 5;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->new_level(), target);
  }
  
  // repeated .protocols.common.ItemInfo item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamChannelMemberNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.TeamChannelMemberNotifyType update_type = 1;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->update_type());
    }
    
    // optional string team_leader_name = 2;
    if (has_team_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_leader_name());
    }
    
    // optional int64 object_guid = 3;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
    // optional string object_name = 4;
    if (has_object_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_name());
    }
    
    // optional int32 new_level = 5;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_level());
    }
    
  }
  // repeated .protocols.common.ItemInfo item = 6;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamChannelMemberNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamChannelMemberNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamChannelMemberNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamChannelMemberNotify::MergeFrom(const TeamChannelMemberNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_team_leader_name()) {
      set_team_leader_name(from.team_leader_name());
    }
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
    if (from.has_object_name()) {
      set_object_name(from.object_name());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamChannelMemberNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamChannelMemberNotify::CopyFrom(const TeamChannelMemberNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamChannelMemberNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void TeamChannelMemberNotify::Swap(TeamChannelMemberNotify* other) {
  if (other != this) {
    std::swap(update_type_, other->update_type_);
    std::swap(team_leader_name_, other->team_leader_name_);
    std::swap(object_guid_, other->object_guid_);
    std::swap(object_name_, other->object_name_);
    std::swap(new_level_, other->new_level_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamChannelMemberNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamChannelMemberNotify_descriptor_;
  metadata.reflection = TeamChannelMemberNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBitRequest::kGuidFieldNumber;
const int UpdateBitRequest::kBitFieldNumber;
const int UpdateBitRequest::kExpiredFieldNumber;
const int UpdateBitRequest::kValueFieldNumber;
#endif  // !_MSC_VER

UpdateBitRequest::UpdateBitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBitRequest::InitAsDefaultInstance() {
}

UpdateBitRequest::UpdateBitRequest(const UpdateBitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBitRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  bit_ = 0;
  expired_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBitRequest::~UpdateBitRequest() {
  SharedDtor();
}

void UpdateBitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBitRequest_descriptor_;
}

const UpdateBitRequest& UpdateBitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateBitRequest* UpdateBitRequest::default_instance_ = NULL;

UpdateBitRequest* UpdateBitRequest::New() const {
  return new UpdateBitRequest;
}

void UpdateBitRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    bit_ = 0;
    expired_ = 0;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_)));
          set_has_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // optional bool value = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bit = 1;
  if (has_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bit(), output);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expired(), output);
  }
  
  // optional bool value = 3 [default = false];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->value(), output);
  }
  
  // required int64 guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bit = 1;
  if (has_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bit(), target);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expired(), target);
  }
  
  // optional bool value = 3 [default = false];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->value(), target);
  }
  
  // required int64 guid = 4;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBitRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 bit = 1;
    if (has_bit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit());
    }
    
    // optional int32 expired = 2 [default = 0];
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
    // optional bool value = 3 [default = false];
    if (has_value()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBitRequest::MergeFrom(const UpdateBitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_bit()) {
      set_bit(from.bit());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBitRequest::CopyFrom(const UpdateBitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpdateBitRequest::Swap(UpdateBitRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(bit_, other->bit_);
    std::swap(expired_, other->expired_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBitRequest_descriptor_;
  metadata.reflection = UpdateBitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBitResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UpdateBitResponse::UpdateBitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBitResponse::InitAsDefaultInstance() {
}

UpdateBitResponse::UpdateBitResponse(const UpdateBitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBitResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBitResponse::~UpdateBitResponse() {
  SharedDtor();
}

void UpdateBitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBitResponse_descriptor_;
}

const UpdateBitResponse& UpdateBitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateBitResponse* UpdateBitResponse::default_instance_ = NULL;

UpdateBitResponse* UpdateBitResponse::New() const {
  return new UpdateBitResponse;
}

void UpdateBitResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBitResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBitResponse::MergeFrom(const UpdateBitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBitResponse::CopyFrom(const UpdateBitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateBitResponse::Swap(UpdateBitResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBitResponse_descriptor_;
  metadata.reflection = UpdateBitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBitNotify::kBitFieldNumber;
const int UpdateBitNotify::kFlagFieldNumber;
const int UpdateBitNotify::kValueFieldNumber;
#endif  // !_MSC_VER

UpdateBitNotify::UpdateBitNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBitNotify::InitAsDefaultInstance() {
}

UpdateBitNotify::UpdateBitNotify(const UpdateBitNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBitNotify::SharedCtor() {
  _cached_size_ = 0;
  bit_ = 0;
  flag_ = 0;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBitNotify::~UpdateBitNotify() {
  SharedDtor();
}

void UpdateBitNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBitNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBitNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBitNotify_descriptor_;
}

const UpdateBitNotify& UpdateBitNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

UpdateBitNotify* UpdateBitNotify::default_instance_ = NULL;

UpdateBitNotify* UpdateBitNotify::New() const {
  return new UpdateBitNotify;
}

void UpdateBitNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bit_ = 0;
    flag_ = 0;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBitNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bit_)));
          set_has_bit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional bool value = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBitNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bit = 1;
  if (has_bit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bit(), output);
  }
  
  // optional bool value = 2 [default = false];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }
  
  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBitNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bit = 1;
  if (has_bit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bit(), target);
  }
  
  // optional bool value = 2 [default = false];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }
  
  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBitNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bit = 1;
    if (has_bit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bit());
    }
    
    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional bool value = 2 [default = false];
    if (has_value()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBitNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBitNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBitNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBitNotify::MergeFrom(const UpdateBitNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bit()) {
      set_bit(from.bit());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBitNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBitNotify::CopyFrom(const UpdateBitNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBitNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateBitNotify::Swap(UpdateBitNotify* other) {
  if (other != this) {
    std::swap(bit_, other->bit_);
    std::swap(flag_, other->flag_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBitNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBitNotify_descriptor_;
  metadata.reflection = UpdateBitNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishQuestionNotify::kIdFieldNumber;
const int PublishQuestionNotify::kQuestionDescFieldNumber;
#endif  // !_MSC_VER

PublishQuestionNotify::PublishQuestionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishQuestionNotify::InitAsDefaultInstance() {
}

PublishQuestionNotify::PublishQuestionNotify(const PublishQuestionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishQuestionNotify::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  question_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishQuestionNotify::~PublishQuestionNotify() {
  SharedDtor();
}

void PublishQuestionNotify::SharedDtor() {
  if (question_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete question_desc_;
  }
  if (this != default_instance_) {
  }
}

void PublishQuestionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishQuestionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishQuestionNotify_descriptor_;
}

const PublishQuestionNotify& PublishQuestionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PublishQuestionNotify* PublishQuestionNotify::default_instance_ = NULL;

PublishQuestionNotify* PublishQuestionNotify::New() const {
  return new PublishQuestionNotify;
}

void PublishQuestionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_question_desc()) {
      if (question_desc_ != &::google::protobuf::internal::kEmptyString) {
        question_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishQuestionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_question_desc;
        break;
      }
      
      // required string question_desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question_desc().data(), this->question_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishQuestionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string question_desc = 2;
  if (has_question_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_desc().data(), this->question_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->question_desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishQuestionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string question_desc = 2;
  if (has_question_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question_desc().data(), this->question_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question_desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishQuestionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string question_desc = 2;
    if (has_question_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question_desc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishQuestionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishQuestionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishQuestionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishQuestionNotify::MergeFrom(const PublishQuestionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_question_desc()) {
      set_question_desc(from.question_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishQuestionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishQuestionNotify::CopyFrom(const PublishQuestionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishQuestionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PublishQuestionNotify::Swap(PublishQuestionNotify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(question_desc_, other->question_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishQuestionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishQuestionNotify_descriptor_;
  metadata.reflection = PublishQuestionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendQAResultNotify::kWinnerCounterFieldNumber;
const int SendQAResultNotify::kTopPlayerFieldNumber;
const int SendQAResultNotify::kAnswerFieldNumber;
const int SendQAResultNotify::kQuestionFieldNumber;
#endif  // !_MSC_VER

SendQAResultNotify::SendQAResultNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendQAResultNotify::InitAsDefaultInstance() {
}

SendQAResultNotify::SendQAResultNotify(const SendQAResultNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendQAResultNotify::SharedCtor() {
  _cached_size_ = 0;
  winner_counter_ = 0;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendQAResultNotify::~SendQAResultNotify() {
  SharedDtor();
}

void SendQAResultNotify::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::kEmptyString) {
    delete answer_;
  }
  if (question_ != &::google::protobuf::internal::kEmptyString) {
    delete question_;
  }
  if (this != default_instance_) {
  }
}

void SendQAResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendQAResultNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendQAResultNotify_descriptor_;
}

const SendQAResultNotify& SendQAResultNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SendQAResultNotify* SendQAResultNotify::default_instance_ = NULL;

SendQAResultNotify* SendQAResultNotify::New() const {
  return new SendQAResultNotify;
}

void SendQAResultNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_counter_ = 0;
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::kEmptyString) {
        answer_->clear();
      }
    }
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::kEmptyString) {
        question_->clear();
      }
    }
  }
  top_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendQAResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winner_counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_counter_)));
          set_has_winner_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_top_player;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo top_player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_top_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_top_player;
        if (input->ExpectTag(26)) goto parse_answer;
        break;
      }
      
      // optional string answer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_question;
        break;
      }
      
      // optional string question = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendQAResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winner_counter = 1;
  if (has_winner_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner_counter(), output);
  }
  
  // repeated .protocols.common.PlayerInfo top_player = 2;
  for (int i = 0; i < this->top_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_player(i), output);
  }
  
  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->answer(), output);
  }
  
  // optional string question = 4;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->question(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendQAResultNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winner_counter = 1;
  if (has_winner_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner_counter(), target);
  }
  
  // repeated .protocols.common.PlayerInfo top_player = 2;
  for (int i = 0; i < this->top_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_player(i), target);
  }
  
  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }
  
  // optional string question = 4;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->question(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendQAResultNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winner_counter = 1;
    if (has_winner_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_counter());
    }
    
    // optional string answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }
    
    // optional string question = 4;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }
    
  }
  // repeated .protocols.common.PlayerInfo top_player = 2;
  total_size += 1 * this->top_player_size();
  for (int i = 0; i < this->top_player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->top_player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendQAResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendQAResultNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendQAResultNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendQAResultNotify::MergeFrom(const SendQAResultNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  top_player_.MergeFrom(from.top_player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner_counter()) {
      set_winner_counter(from.winner_counter());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendQAResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendQAResultNotify::CopyFrom(const SendQAResultNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendQAResultNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < top_player_size(); i++) {
    if (!this->top_player(i).IsInitialized()) return false;
  }
  return true;
}

void SendQAResultNotify::Swap(SendQAResultNotify* other) {
  if (other != this) {
    std::swap(winner_counter_, other->winner_counter_);
    top_player_.Swap(&other->top_player_);
    std::swap(answer_, other->answer_);
    std::swap(question_, other->question_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendQAResultNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendQAResultNotify_descriptor_;
  metadata.reflection = SendQAResultNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPhyStrengthUpdate::kPhyStrengthInfoFieldNumber;
#endif  // !_MSC_VER

PlayerPhyStrengthUpdate::PlayerPhyStrengthUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPhyStrengthUpdate::InitAsDefaultInstance() {
  phy_strength_info_ = const_cast< ::protocols::common::PlayerPhyStrengthInfo*>(&::protocols::common::PlayerPhyStrengthInfo::default_instance());
}

PlayerPhyStrengthUpdate::PlayerPhyStrengthUpdate(const PlayerPhyStrengthUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPhyStrengthUpdate::SharedCtor() {
  _cached_size_ = 0;
  phy_strength_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPhyStrengthUpdate::~PlayerPhyStrengthUpdate() {
  SharedDtor();
}

void PlayerPhyStrengthUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete phy_strength_info_;
  }
}

void PlayerPhyStrengthUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPhyStrengthUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPhyStrengthUpdate_descriptor_;
}

const PlayerPhyStrengthUpdate& PlayerPhyStrengthUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerPhyStrengthUpdate* PlayerPhyStrengthUpdate::default_instance_ = NULL;

PlayerPhyStrengthUpdate* PlayerPhyStrengthUpdate::New() const {
  return new PlayerPhyStrengthUpdate;
}

void PlayerPhyStrengthUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phy_strength_info()) {
      if (phy_strength_info_ != NULL) phy_strength_info_->::protocols::common::PlayerPhyStrengthInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPhyStrengthUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.PlayerPhyStrengthInfo phy_strength_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phy_strength_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPhyStrengthUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.PlayerPhyStrengthInfo phy_strength_info = 1;
  if (has_phy_strength_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->phy_strength_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPhyStrengthUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.PlayerPhyStrengthInfo phy_strength_info = 1;
  if (has_phy_strength_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->phy_strength_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPhyStrengthUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.PlayerPhyStrengthInfo phy_strength_info = 1;
    if (has_phy_strength_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phy_strength_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPhyStrengthUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPhyStrengthUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPhyStrengthUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPhyStrengthUpdate::MergeFrom(const PlayerPhyStrengthUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phy_strength_info()) {
      mutable_phy_strength_info()->::protocols::common::PlayerPhyStrengthInfo::MergeFrom(from.phy_strength_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPhyStrengthUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPhyStrengthUpdate::CopyFrom(const PlayerPhyStrengthUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPhyStrengthUpdate::IsInitialized() const {
  
  return true;
}

void PlayerPhyStrengthUpdate::Swap(PlayerPhyStrengthUpdate* other) {
  if (other != this) {
    std::swap(phy_strength_info_, other->phy_strength_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPhyStrengthUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPhyStrengthUpdate_descriptor_;
  metadata.reflection = PlayerPhyStrengthUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowBuddyRequest::kBuddyGuidFieldNumber;
#endif  // !_MSC_VER

FollowBuddyRequest::FollowBuddyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowBuddyRequest::InitAsDefaultInstance() {
}

FollowBuddyRequest::FollowBuddyRequest(const FollowBuddyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowBuddyRequest::SharedCtor() {
  _cached_size_ = 0;
  buddy_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowBuddyRequest::~FollowBuddyRequest() {
  SharedDtor();
}

void FollowBuddyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowBuddyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowBuddyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowBuddyRequest_descriptor_;
}

const FollowBuddyRequest& FollowBuddyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FollowBuddyRequest* FollowBuddyRequest::default_instance_ = NULL;

FollowBuddyRequest* FollowBuddyRequest::New() const {
  return new FollowBuddyRequest;
}

void FollowBuddyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowBuddyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 buddy_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_guid_)));
          set_has_buddy_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowBuddyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 buddy_guid = 1;
  if (has_buddy_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buddy_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowBuddyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 buddy_guid = 1;
  if (has_buddy_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buddy_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowBuddyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 buddy_guid = 1;
    if (has_buddy_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowBuddyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowBuddyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowBuddyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowBuddyRequest::MergeFrom(const FollowBuddyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_guid()) {
      set_buddy_guid(from.buddy_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowBuddyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowBuddyRequest::CopyFrom(const FollowBuddyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowBuddyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FollowBuddyRequest::Swap(FollowBuddyRequest* other) {
  if (other != this) {
    std::swap(buddy_guid_, other->buddy_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowBuddyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowBuddyRequest_descriptor_;
  metadata.reflection = FollowBuddyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowBuddyResponse::kErrorCodeFieldNumber;
const int FollowBuddyResponse::kBuddyGuidFieldNumber;
#endif  // !_MSC_VER

FollowBuddyResponse::FollowBuddyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowBuddyResponse::InitAsDefaultInstance() {
}

FollowBuddyResponse::FollowBuddyResponse(const FollowBuddyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowBuddyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  buddy_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowBuddyResponse::~FollowBuddyResponse() {
  SharedDtor();
}

void FollowBuddyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowBuddyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowBuddyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowBuddyResponse_descriptor_;
}

const FollowBuddyResponse& FollowBuddyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FollowBuddyResponse* FollowBuddyResponse::default_instance_ = NULL;

FollowBuddyResponse* FollowBuddyResponse::New() const {
  return new FollowBuddyResponse;
}

void FollowBuddyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    buddy_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowBuddyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buddy_guid;
        break;
      }
      
      // optional int64 buddy_guid = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buddy_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_guid_)));
          set_has_buddy_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowBuddyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int64 buddy_guid = 2 [default = 0];
  if (has_buddy_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->buddy_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowBuddyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int64 buddy_guid = 2 [default = 0];
  if (has_buddy_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->buddy_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowBuddyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int64 buddy_guid = 2 [default = 0];
    if (has_buddy_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowBuddyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowBuddyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowBuddyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowBuddyResponse::MergeFrom(const FollowBuddyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_buddy_guid()) {
      set_buddy_guid(from.buddy_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowBuddyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowBuddyResponse::CopyFrom(const FollowBuddyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowBuddyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FollowBuddyResponse::Swap(FollowBuddyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(buddy_guid_, other->buddy_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowBuddyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowBuddyResponse_descriptor_;
  metadata.reflection = FollowBuddyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowBuddyNotify::kOwnerGuidFieldNumber;
const int FollowBuddyNotify::kBuddyGuidFieldNumber;
#endif  // !_MSC_VER

FollowBuddyNotify::FollowBuddyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FollowBuddyNotify::InitAsDefaultInstance() {
}

FollowBuddyNotify::FollowBuddyNotify(const FollowBuddyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FollowBuddyNotify::SharedCtor() {
  _cached_size_ = 0;
  owner_guid_ = GOOGLE_LONGLONG(0);
  buddy_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowBuddyNotify::~FollowBuddyNotify() {
  SharedDtor();
}

void FollowBuddyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowBuddyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowBuddyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowBuddyNotify_descriptor_;
}

const FollowBuddyNotify& FollowBuddyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

FollowBuddyNotify* FollowBuddyNotify::default_instance_ = NULL;

FollowBuddyNotify* FollowBuddyNotify::New() const {
  return new FollowBuddyNotify;
}

void FollowBuddyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_guid_ = GOOGLE_LONGLONG(0);
    buddy_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowBuddyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 owner_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &owner_guid_)));
          set_has_owner_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buddy_guid;
        break;
      }
      
      // required int64 buddy_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buddy_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buddy_guid_)));
          set_has_buddy_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FollowBuddyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 owner_guid = 1;
  if (has_owner_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->owner_guid(), output);
  }
  
  // required int64 buddy_guid = 2;
  if (has_buddy_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->buddy_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FollowBuddyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 owner_guid = 1;
  if (has_owner_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->owner_guid(), target);
  }
  
  // required int64 buddy_guid = 2;
  if (has_buddy_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->buddy_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FollowBuddyNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 owner_guid = 1;
    if (has_owner_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->owner_guid());
    }
    
    // required int64 buddy_guid = 2;
    if (has_buddy_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buddy_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowBuddyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowBuddyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowBuddyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowBuddyNotify::MergeFrom(const FollowBuddyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner_guid()) {
      set_owner_guid(from.owner_guid());
    }
    if (from.has_buddy_guid()) {
      set_buddy_guid(from.buddy_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowBuddyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowBuddyNotify::CopyFrom(const FollowBuddyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowBuddyNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FollowBuddyNotify::Swap(FollowBuddyNotify* other) {
  if (other != this) {
    std::swap(owner_guid_, other->owner_guid_);
    std::swap(buddy_guid_, other->buddy_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowBuddyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowBuddyNotify_descriptor_;
  metadata.reflection = FollowBuddyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerStatusRequest::ServerStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatusRequest::InitAsDefaultInstance() {
}

ServerStatusRequest::ServerStatusRequest(const ServerStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatusRequest::~ServerStatusRequest() {
  SharedDtor();
}

void ServerStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatusRequest_descriptor_;
}

const ServerStatusRequest& ServerStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ServerStatusRequest* ServerStatusRequest::default_instance_ = NULL;

ServerStatusRequest* ServerStatusRequest::New() const {
  return new ServerStatusRequest;
}

void ServerStatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ServerStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatusRequest::MergeFrom(const ServerStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusRequest::CopyFrom(const ServerStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusRequest::IsInitialized() const {
  
  return true;
}

void ServerStatusRequest::Swap(ServerStatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatusRequest_descriptor_;
  metadata.reflection = ServerStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerStatusResponse::kOnlineFieldNumber;
const int ServerStatusResponse::kAvgDelayFieldNumber;
const int ServerStatusResponse::kMaxDelayFieldNumber;
#endif  // !_MSC_VER

ServerStatusResponse::ServerStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerStatusResponse::InitAsDefaultInstance() {
}

ServerStatusResponse::ServerStatusResponse(const ServerStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  online_ = 0;
  avg_delay_ = 0;
  max_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerStatusResponse::~ServerStatusResponse() {
  SharedDtor();
}

void ServerStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerStatusResponse_descriptor_;
}

const ServerStatusResponse& ServerStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ServerStatusResponse* ServerStatusResponse::default_instance_ = NULL;

ServerStatusResponse* ServerStatusResponse::New() const {
  return new ServerStatusResponse;
}

void ServerStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_ = 0;
    avg_delay_ = 0;
    max_delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 online = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avg_delay;
        break;
      }
      
      // optional int32 avg_delay = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_delay_)));
          set_has_avg_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_delay;
        break;
      }
      
      // optional int32 max_delay = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delay_)));
          set_has_max_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 online = 1 [default = 0];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->online(), output);
  }
  
  // optional int32 avg_delay = 2 [default = 0];
  if (has_avg_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->avg_delay(), output);
  }
  
  // optional int32 max_delay = 3 [default = 0];
  if (has_max_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 online = 1 [default = 0];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->online(), target);
  }
  
  // optional int32 avg_delay = 2 [default = 0];
  if (has_avg_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->avg_delay(), target);
  }
  
  // optional int32 max_delay = 3 [default = 0];
  if (has_max_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 online = 1 [default = 0];
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }
    
    // optional int32 avg_delay = 2 [default = 0];
    if (has_avg_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_delay());
    }
    
    // optional int32 max_delay = 3 [default = 0];
    if (has_max_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_delay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerStatusResponse::MergeFrom(const ServerStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_avg_delay()) {
      set_avg_delay(from.avg_delay());
    }
    if (from.has_max_delay()) {
      set_max_delay(from.max_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatusResponse::CopyFrom(const ServerStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatusResponse::IsInitialized() const {
  
  return true;
}

void ServerStatusResponse::Swap(ServerStatusResponse* other) {
  if (other != this) {
    std::swap(online_, other->online_);
    std::swap(avg_delay_, other->avg_delay_);
    std::swap(max_delay_, other->max_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerStatusResponse_descriptor_;
  metadata.reflection = ServerStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActLuckyOnceRequest::ActLuckyOnceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActLuckyOnceRequest::InitAsDefaultInstance() {
}

ActLuckyOnceRequest::ActLuckyOnceRequest(const ActLuckyOnceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActLuckyOnceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActLuckyOnceRequest::~ActLuckyOnceRequest() {
  SharedDtor();
}

void ActLuckyOnceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActLuckyOnceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActLuckyOnceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActLuckyOnceRequest_descriptor_;
}

const ActLuckyOnceRequest& ActLuckyOnceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ActLuckyOnceRequest* ActLuckyOnceRequest::default_instance_ = NULL;

ActLuckyOnceRequest* ActLuckyOnceRequest::New() const {
  return new ActLuckyOnceRequest;
}

void ActLuckyOnceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActLuckyOnceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActLuckyOnceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActLuckyOnceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActLuckyOnceRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActLuckyOnceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActLuckyOnceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActLuckyOnceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActLuckyOnceRequest::MergeFrom(const ActLuckyOnceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActLuckyOnceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActLuckyOnceRequest::CopyFrom(const ActLuckyOnceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActLuckyOnceRequest::IsInitialized() const {
  
  return true;
}

void ActLuckyOnceRequest::Swap(ActLuckyOnceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActLuckyOnceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActLuckyOnceRequest_descriptor_;
  metadata.reflection = ActLuckyOnceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActLuckyOnceResponse::kErrorCodeFieldNumber;
const int ActLuckyOnceResponse::kBonusTypeFieldNumber;
const int ActLuckyOnceResponse::kLeftLuckyTimeFieldNumber;
const int ActLuckyOnceResponse::kItemIdFieldNumber;
const int ActLuckyOnceResponse::kItemCountFieldNumber;
const int ActLuckyOnceResponse::kIdFieldNumber;
#endif  // !_MSC_VER

ActLuckyOnceResponse::ActLuckyOnceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActLuckyOnceResponse::InitAsDefaultInstance() {
}

ActLuckyOnceResponse::ActLuckyOnceResponse(const ActLuckyOnceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActLuckyOnceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  bonus_type_ = 0;
  left_lucky_time_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActLuckyOnceResponse::~ActLuckyOnceResponse() {
  SharedDtor();
}

void ActLuckyOnceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActLuckyOnceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActLuckyOnceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActLuckyOnceResponse_descriptor_;
}

const ActLuckyOnceResponse& ActLuckyOnceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ActLuckyOnceResponse* ActLuckyOnceResponse::default_instance_ = NULL;

ActLuckyOnceResponse* ActLuckyOnceResponse::New() const {
  return new ActLuckyOnceResponse;
}

void ActLuckyOnceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    bonus_type_ = 0;
    left_lucky_time_ = 0;
    item_id_ = 0;
    item_count_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActLuckyOnceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonus_type;
        break;
      }
      
      // optional int32 bonus_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_type_)));
          set_has_bonus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_lucky_time;
        break;
      }
      
      // optional int32 left_lucky_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_lucky_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_lucky_time_)));
          set_has_left_lucky_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }
      
      // optional int32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_id;
        break;
      }
      
      // optional int32 id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActLuckyOnceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 bonus_type = 2;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bonus_type(), output);
  }
  
  // optional int32 left_lucky_time = 3;
  if (has_left_lucky_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_lucky_time(), output);
  }
  
  // optional int32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_id(), output);
  }
  
  // optional int32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_count(), output);
  }
  
  // optional int32 id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActLuckyOnceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 bonus_type = 2;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bonus_type(), target);
  }
  
  // optional int32 left_lucky_time = 3;
  if (has_left_lucky_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_lucky_time(), target);
  }
  
  // optional int32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_id(), target);
  }
  
  // optional int32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_count(), target);
  }
  
  // optional int32 id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActLuckyOnceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 bonus_type = 2;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_type());
    }
    
    // optional int32 left_lucky_time = 3;
    if (has_left_lucky_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_lucky_time());
    }
    
    // optional int32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // optional int32 id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActLuckyOnceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActLuckyOnceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActLuckyOnceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActLuckyOnceResponse::MergeFrom(const ActLuckyOnceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
    if (from.has_left_lucky_time()) {
      set_left_lucky_time(from.left_lucky_time());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActLuckyOnceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActLuckyOnceResponse::CopyFrom(const ActLuckyOnceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActLuckyOnceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ActLuckyOnceResponse::Swap(ActLuckyOnceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(bonus_type_, other->bonus_type_);
    std::swap(left_lucky_time_, other->left_lucky_time_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActLuckyOnceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActLuckyOnceResponse_descriptor_;
  metadata.reflection = ActLuckyOnceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActExchangeItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

ActExchangeItemRequest::ActExchangeItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActExchangeItemRequest::InitAsDefaultInstance() {
}

ActExchangeItemRequest::ActExchangeItemRequest(const ActExchangeItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActExchangeItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActExchangeItemRequest::~ActExchangeItemRequest() {
  SharedDtor();
}

void ActExchangeItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActExchangeItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActExchangeItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActExchangeItemRequest_descriptor_;
}

const ActExchangeItemRequest& ActExchangeItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ActExchangeItemRequest* ActExchangeItemRequest::default_instance_ = NULL;

ActExchangeItemRequest* ActExchangeItemRequest::New() const {
  return new ActExchangeItemRequest;
}

void ActExchangeItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActExchangeItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActExchangeItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActExchangeItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActExchangeItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActExchangeItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActExchangeItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActExchangeItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActExchangeItemRequest::MergeFrom(const ActExchangeItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActExchangeItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActExchangeItemRequest::CopyFrom(const ActExchangeItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActExchangeItemRequest::IsInitialized() const {
  
  return true;
}

void ActExchangeItemRequest::Swap(ActExchangeItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActExchangeItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActExchangeItemRequest_descriptor_;
  metadata.reflection = ActExchangeItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActExchangeItemResponse::kErrorCodeFieldNumber;
const int ActExchangeItemResponse::kItemIdFieldNumber;
const int ActExchangeItemResponse::kItemCountFieldNumber;
#endif  // !_MSC_VER

ActExchangeItemResponse::ActExchangeItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActExchangeItemResponse::InitAsDefaultInstance() {
}

ActExchangeItemResponse::ActExchangeItemResponse(const ActExchangeItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActExchangeItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActExchangeItemResponse::~ActExchangeItemResponse() {
  SharedDtor();
}

void ActExchangeItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActExchangeItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActExchangeItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActExchangeItemResponse_descriptor_;
}

const ActExchangeItemResponse& ActExchangeItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ActExchangeItemResponse* ActExchangeItemResponse::default_instance_ = NULL;

ActExchangeItemResponse* ActExchangeItemResponse::New() const {
  return new ActExchangeItemResponse;
}

void ActExchangeItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActExchangeItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional int32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActExchangeItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }
  
  // optional int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActExchangeItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }
  
  // optional int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActExchangeItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActExchangeItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActExchangeItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActExchangeItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActExchangeItemResponse::MergeFrom(const ActExchangeItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActExchangeItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActExchangeItemResponse::CopyFrom(const ActExchangeItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActExchangeItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ActExchangeItemResponse::Swap(ActExchangeItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActExchangeItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActExchangeItemResponse_descriptor_;
  metadata.reflection = ActExchangeItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTitleListRequest::GetTitleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitleListRequest::InitAsDefaultInstance() {
}

GetTitleListRequest::GetTitleListRequest(const GetTitleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitleListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleListRequest::~GetTitleListRequest() {
  SharedDtor();
}

void GetTitleListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTitleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleListRequest_descriptor_;
}

const GetTitleListRequest& GetTitleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetTitleListRequest* GetTitleListRequest::default_instance_ = NULL;

GetTitleListRequest* GetTitleListRequest::New() const {
  return new GetTitleListRequest;
}

void GetTitleListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTitleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitleListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitleListRequest::MergeFrom(const GetTitleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleListRequest::CopyFrom(const GetTitleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleListRequest::IsInitialized() const {
  
  return true;
}

void GetTitleListRequest::Swap(GetTitleListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitleListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleListRequest_descriptor_;
  metadata.reflection = GetTitleListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTitleListResponse::kErrorCodeFieldNumber;
const int GetTitleListResponse::kTitlesFieldNumber;
#endif  // !_MSC_VER

GetTitleListResponse::GetTitleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitleListResponse::InitAsDefaultInstance() {
}

GetTitleListResponse::GetTitleListResponse(const GetTitleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitleListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleListResponse::~GetTitleListResponse() {
  SharedDtor();
}

void GetTitleListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTitleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleListResponse_descriptor_;
}

const GetTitleListResponse& GetTitleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetTitleListResponse* GetTitleListResponse::default_instance_ = NULL;

GetTitleListResponse* GetTitleListResponse::New() const {
  return new GetTitleListResponse;
}

void GetTitleListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  titles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titles;
        break;
      }
      
      // repeated int32 titles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_titles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_titles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTitleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated int32 titles = 2;
  for (int i = 0; i < this->titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->titles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated int32 titles = 2;
  for (int i = 0; i < this->titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->titles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitleListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated int32 titles = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->titles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->titles(i));
    }
    total_size += 1 * this->titles_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitleListResponse::MergeFrom(const GetTitleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  titles_.MergeFrom(from.titles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleListResponse::CopyFrom(const GetTitleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetTitleListResponse::Swap(GetTitleListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    titles_.Swap(&other->titles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitleListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleListResponse_descriptor_;
  metadata.reflection = GetTitleListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRoleTitleRequest::kTitleFieldNumber;
#endif  // !_MSC_VER

SetRoleTitleRequest::SetRoleTitleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRoleTitleRequest::InitAsDefaultInstance() {
}

SetRoleTitleRequest::SetRoleTitleRequest(const SetRoleTitleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRoleTitleRequest::SharedCtor() {
  _cached_size_ = 0;
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRoleTitleRequest::~SetRoleTitleRequest() {
  SharedDtor();
}

void SetRoleTitleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRoleTitleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoleTitleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRoleTitleRequest_descriptor_;
}

const SetRoleTitleRequest& SetRoleTitleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SetRoleTitleRequest* SetRoleTitleRequest::default_instance_ = NULL;

SetRoleTitleRequest* SetRoleTitleRequest::New() const {
  return new SetRoleTitleRequest;
}

void SetRoleTitleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRoleTitleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRoleTitleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRoleTitleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 title = 1;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRoleTitleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoleTitleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRoleTitleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRoleTitleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRoleTitleRequest::MergeFrom(const SetRoleTitleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRoleTitleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoleTitleRequest::CopyFrom(const SetRoleTitleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoleTitleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetRoleTitleRequest::Swap(SetRoleTitleRequest* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRoleTitleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRoleTitleRequest_descriptor_;
  metadata.reflection = SetRoleTitleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRoleTitleResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SetRoleTitleResponse::SetRoleTitleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRoleTitleResponse::InitAsDefaultInstance() {
}

SetRoleTitleResponse::SetRoleTitleResponse(const SetRoleTitleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRoleTitleResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRoleTitleResponse::~SetRoleTitleResponse() {
  SharedDtor();
}

void SetRoleTitleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRoleTitleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoleTitleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRoleTitleResponse_descriptor_;
}

const SetRoleTitleResponse& SetRoleTitleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SetRoleTitleResponse* SetRoleTitleResponse::default_instance_ = NULL;

SetRoleTitleResponse* SetRoleTitleResponse::New() const {
  return new SetRoleTitleResponse;
}

void SetRoleTitleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRoleTitleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRoleTitleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRoleTitleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRoleTitleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoleTitleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRoleTitleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRoleTitleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRoleTitleResponse::MergeFrom(const SetRoleTitleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRoleTitleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoleTitleResponse::CopyFrom(const SetRoleTitleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoleTitleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetRoleTitleResponse::Swap(SetRoleTitleResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRoleTitleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRoleTitleResponse_descriptor_;
  metadata.reflection = SetRoleTitleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRoleTitleNotify::kGuidFieldNumber;
const int SetRoleTitleNotify::kTitleFieldNumber;
#endif  // !_MSC_VER

SetRoleTitleNotify::SetRoleTitleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetRoleTitleNotify::InitAsDefaultInstance() {
}

SetRoleTitleNotify::SetRoleTitleNotify(const SetRoleTitleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetRoleTitleNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRoleTitleNotify::~SetRoleTitleNotify() {
  SharedDtor();
}

void SetRoleTitleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRoleTitleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoleTitleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRoleTitleNotify_descriptor_;
}

const SetRoleTitleNotify& SetRoleTitleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SetRoleTitleNotify* SetRoleTitleNotify::default_instance_ = NULL;

SetRoleTitleNotify* SetRoleTitleNotify::New() const {
  return new SetRoleTitleNotify;
}

void SetRoleTitleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRoleTitleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }
      
      // optional int32 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetRoleTitleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetRoleTitleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetRoleTitleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoleTitleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRoleTitleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRoleTitleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRoleTitleNotify::MergeFrom(const SetRoleTitleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRoleTitleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoleTitleNotify::CopyFrom(const SetRoleTitleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoleTitleNotify::IsInitialized() const {
  
  return true;
}

void SetRoleTitleNotify::Swap(SetRoleTitleNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRoleTitleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRoleTitleNotify_descriptor_;
  metadata.reflection = SetRoleTitleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoleTitleNotify::kAddTitleFieldNumber;
const int GetRoleTitleNotify::kRemoveTitleFieldNumber;
#endif  // !_MSC_VER

GetRoleTitleNotify::GetRoleTitleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoleTitleNotify::InitAsDefaultInstance() {
}

GetRoleTitleNotify::GetRoleTitleNotify(const GetRoleTitleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoleTitleNotify::SharedCtor() {
  _cached_size_ = 0;
  add_title_ = 0;
  remove_title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoleTitleNotify::~GetRoleTitleNotify() {
  SharedDtor();
}

void GetRoleTitleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoleTitleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoleTitleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoleTitleNotify_descriptor_;
}

const GetRoleTitleNotify& GetRoleTitleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetRoleTitleNotify* GetRoleTitleNotify::default_instance_ = NULL;

GetRoleTitleNotify* GetRoleTitleNotify::New() const {
  return new GetRoleTitleNotify;
}

void GetRoleTitleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_title_ = 0;
    remove_title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoleTitleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 add_title = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_title_)));
          set_has_add_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remove_title;
        break;
      }
      
      // optional int32 remove_title = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remove_title_)));
          set_has_remove_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoleTitleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 add_title = 1 [default = 0];
  if (has_add_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add_title(), output);
  }
  
  // optional int32 remove_title = 2 [default = 0];
  if (has_remove_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remove_title(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoleTitleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 add_title = 1 [default = 0];
  if (has_add_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->add_title(), target);
  }
  
  // optional int32 remove_title = 2 [default = 0];
  if (has_remove_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remove_title(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoleTitleNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 add_title = 1 [default = 0];
    if (has_add_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_title());
    }
    
    // optional int32 remove_title = 2 [default = 0];
    if (has_remove_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remove_title());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleTitleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoleTitleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoleTitleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoleTitleNotify::MergeFrom(const GetRoleTitleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_title()) {
      set_add_title(from.add_title());
    }
    if (from.has_remove_title()) {
      set_remove_title(from.remove_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoleTitleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoleTitleNotify::CopyFrom(const GetRoleTitleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleTitleNotify::IsInitialized() const {
  
  return true;
}

void GetRoleTitleNotify::Swap(GetRoleTitleNotify* other) {
  if (other != this) {
    std::swap(add_title_, other->add_title_);
    std::swap(remove_title_, other->remove_title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoleTitleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoleTitleNotify_descriptor_;
  metadata.reflection = GetRoleTitleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOfflineGiftRequest::GetOfflineGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOfflineGiftRequest::InitAsDefaultInstance() {
}

GetOfflineGiftRequest::GetOfflineGiftRequest(const GetOfflineGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOfflineGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfflineGiftRequest::~GetOfflineGiftRequest() {
  SharedDtor();
}

void GetOfflineGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOfflineGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOfflineGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOfflineGiftRequest_descriptor_;
}

const GetOfflineGiftRequest& GetOfflineGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetOfflineGiftRequest* GetOfflineGiftRequest::default_instance_ = NULL;

GetOfflineGiftRequest* GetOfflineGiftRequest::New() const {
  return new GetOfflineGiftRequest;
}

void GetOfflineGiftRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOfflineGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetOfflineGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOfflineGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOfflineGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfflineGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOfflineGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOfflineGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOfflineGiftRequest::MergeFrom(const GetOfflineGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOfflineGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfflineGiftRequest::CopyFrom(const GetOfflineGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfflineGiftRequest::IsInitialized() const {
  
  return true;
}

void GetOfflineGiftRequest::Swap(GetOfflineGiftRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOfflineGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOfflineGiftRequest_descriptor_;
  metadata.reflection = GetOfflineGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfflineGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GetOfflineGiftResponse::GetOfflineGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOfflineGiftResponse::InitAsDefaultInstance() {
}

GetOfflineGiftResponse::GetOfflineGiftResponse(const GetOfflineGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOfflineGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfflineGiftResponse::~GetOfflineGiftResponse() {
  SharedDtor();
}

void GetOfflineGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOfflineGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOfflineGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOfflineGiftResponse_descriptor_;
}

const GetOfflineGiftResponse& GetOfflineGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetOfflineGiftResponse* GetOfflineGiftResponse::default_instance_ = NULL;

GetOfflineGiftResponse* GetOfflineGiftResponse::New() const {
  return new GetOfflineGiftResponse;
}

void GetOfflineGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOfflineGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOfflineGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOfflineGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOfflineGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfflineGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOfflineGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOfflineGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOfflineGiftResponse::MergeFrom(const GetOfflineGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOfflineGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfflineGiftResponse::CopyFrom(const GetOfflineGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfflineGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetOfflineGiftResponse::Swap(GetOfflineGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOfflineGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOfflineGiftResponse_descriptor_;
  metadata.reflection = GetOfflineGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetOpenedActivityRequest::GetOpenedActivityRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOpenedActivityRequest::InitAsDefaultInstance() {
}

GetOpenedActivityRequest::GetOpenedActivityRequest(const GetOpenedActivityRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOpenedActivityRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOpenedActivityRequest::~GetOpenedActivityRequest() {
  SharedDtor();
}

void GetOpenedActivityRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOpenedActivityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOpenedActivityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOpenedActivityRequest_descriptor_;
}

const GetOpenedActivityRequest& GetOpenedActivityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetOpenedActivityRequest* GetOpenedActivityRequest::default_instance_ = NULL;

GetOpenedActivityRequest* GetOpenedActivityRequest::New() const {
  return new GetOpenedActivityRequest;
}

void GetOpenedActivityRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOpenedActivityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetOpenedActivityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOpenedActivityRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOpenedActivityRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOpenedActivityRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOpenedActivityRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOpenedActivityRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOpenedActivityRequest::MergeFrom(const GetOpenedActivityRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOpenedActivityRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenedActivityRequest::CopyFrom(const GetOpenedActivityRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenedActivityRequest::IsInitialized() const {
  
  return true;
}

void GetOpenedActivityRequest::Swap(GetOpenedActivityRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOpenedActivityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOpenedActivityRequest_descriptor_;
  metadata.reflection = GetOpenedActivityRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOpenedActivityResponse::kErrorCodeFieldNumber;
const int GetOpenedActivityResponse::kActivitiesFieldNumber;
#endif  // !_MSC_VER

GetOpenedActivityResponse::GetOpenedActivityResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOpenedActivityResponse::InitAsDefaultInstance() {
}

GetOpenedActivityResponse::GetOpenedActivityResponse(const GetOpenedActivityResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOpenedActivityResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOpenedActivityResponse::~GetOpenedActivityResponse() {
  SharedDtor();
}

void GetOpenedActivityResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOpenedActivityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOpenedActivityResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOpenedActivityResponse_descriptor_;
}

const GetOpenedActivityResponse& GetOpenedActivityResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

GetOpenedActivityResponse* GetOpenedActivityResponse::default_instance_ = NULL;

GetOpenedActivityResponse* GetOpenedActivityResponse::New() const {
  return new GetOpenedActivityResponse;
}

void GetOpenedActivityResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOpenedActivityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activities;
        break;
      }
      
      // repeated .protocols.common.StartupActivityType activities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activities:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::StartupActivityType_IsValid(value)) {
            add_activities(static_cast< protocols::common::StartupActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &protocols::common::StartupActivityType_IsValid,
                 this->mutable_activities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOpenedActivityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.StartupActivityType activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->activities(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOpenedActivityResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.StartupActivityType activities = 2;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->activities(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOpenedActivityResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.StartupActivityType activities = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->activities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->activities(i));
    }
    total_size += 1 * this->activities_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOpenedActivityResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOpenedActivityResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOpenedActivityResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOpenedActivityResponse::MergeFrom(const GetOpenedActivityResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  activities_.MergeFrom(from.activities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOpenedActivityResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenedActivityResponse::CopyFrom(const GetOpenedActivityResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenedActivityResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetOpenedActivityResponse::Swap(GetOpenedActivityResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOpenedActivityResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOpenedActivityResponse_descriptor_;
  metadata.reflection = GetOpenedActivityResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityChangeNotify::kActivityFieldNumber;
const int ActivityChangeNotify::kStatusFieldNumber;
#endif  // !_MSC_VER

ActivityChangeNotify::ActivityChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityChangeNotify::InitAsDefaultInstance() {
}

ActivityChangeNotify::ActivityChangeNotify(const ActivityChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  activity_ = 1;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityChangeNotify::~ActivityChangeNotify() {
  SharedDtor();
}

void ActivityChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityChangeNotify_descriptor_;
}

const ActivityChangeNotify& ActivityChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

ActivityChangeNotify* ActivityChangeNotify::default_instance_ = NULL;

ActivityChangeNotify* ActivityChangeNotify::New() const {
  return new ActivityChangeNotify;
}

void ActivityChangeNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_ = 1;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.StartupActivityType activity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::StartupActivityType_IsValid(value)) {
            set_activity(static_cast< protocols::common::StartupActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional .protocols.common.ActivityStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ActivityStatus_IsValid(value)) {
            set_status(static_cast< protocols::common::ActivityStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.StartupActivityType activity = 1;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }
  
  // optional .protocols.common.ActivityStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.StartupActivityType activity = 1;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }
  
  // optional .protocols.common.ActivityStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityChangeNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.StartupActivityType activity = 1;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }
    
    // optional .protocols.common.ActivityStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityChangeNotify::MergeFrom(const ActivityChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityChangeNotify::CopyFrom(const ActivityChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityChangeNotify::IsInitialized() const {
  
  return true;
}

void ActivityChangeNotify::Swap(ActivityChangeNotify* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityChangeNotify_descriptor_;
  metadata.reflection = ActivityChangeNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PracticeExpRequest::PracticeExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeExpRequest::InitAsDefaultInstance() {
}

PracticeExpRequest::PracticeExpRequest(const PracticeExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeExpRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeExpRequest::~PracticeExpRequest() {
  SharedDtor();
}

void PracticeExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PracticeExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeExpRequest_descriptor_;
}

const PracticeExpRequest& PracticeExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeExpRequest* PracticeExpRequest::default_instance_ = NULL;

PracticeExpRequest* PracticeExpRequest::New() const {
  return new PracticeExpRequest;
}

void PracticeExpRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PracticeExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeExpRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeExpRequest::MergeFrom(const PracticeExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeExpRequest::CopyFrom(const PracticeExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeExpRequest::IsInitialized() const {
  
  return true;
}

void PracticeExpRequest::Swap(PracticeExpRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeExpRequest_descriptor_;
  metadata.reflection = PracticeExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeExpResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PracticeExpResponse::PracticeExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeExpResponse::InitAsDefaultInstance() {
}

PracticeExpResponse::PracticeExpResponse(const PracticeExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeExpResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeExpResponse::~PracticeExpResponse() {
  SharedDtor();
}

void PracticeExpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PracticeExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeExpResponse_descriptor_;
}

const PracticeExpResponse& PracticeExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeExpResponse* PracticeExpResponse::default_instance_ = NULL;

PracticeExpResponse* PracticeExpResponse::New() const {
  return new PracticeExpResponse;
}

void PracticeExpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PracticeExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeExpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeExpResponse::MergeFrom(const PracticeExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeExpResponse::CopyFrom(const PracticeExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PracticeExpResponse::Swap(PracticeExpResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeExpResponse_descriptor_;
  metadata.reflection = PracticeExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeExpNotify::kGuidFieldNumber;
const int PracticeExpNotify::kStatusFieldNumber;
const int PracticeExpNotify::kExpFieldNumber;
#endif  // !_MSC_VER

PracticeExpNotify::PracticeExpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeExpNotify::InitAsDefaultInstance() {
}

PracticeExpNotify::PracticeExpNotify(const PracticeExpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeExpNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeExpNotify::~PracticeExpNotify() {
  SharedDtor();
}

void PracticeExpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PracticeExpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeExpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeExpNotify_descriptor_;
}

const PracticeExpNotify& PracticeExpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PracticeExpNotify* PracticeExpNotify::default_instance_ = NULL;

PracticeExpNotify* PracticeExpNotify::New() const {
  return new PracticeExpNotify;
}

void PracticeExpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PracticeExpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PracticeExpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeExpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeExpNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeExpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeExpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeExpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PracticeExpNotify::MergeFrom(const PracticeExpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PracticeExpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PracticeExpNotify::CopyFrom(const PracticeExpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PracticeExpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PracticeExpNotify::Swap(PracticeExpNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(status_, other->status_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PracticeExpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeExpNotify_descriptor_;
  metadata.reflection = PracticeExpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingSoulInfo::kGuidFieldNumber;
const int YinglingSoulInfo::kSoulFieldNumber;
#endif  // !_MSC_VER

YinglingSoulInfo::YinglingSoulInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingSoulInfo::InitAsDefaultInstance() {
}

YinglingSoulInfo::YinglingSoulInfo(const YinglingSoulInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingSoulInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  soul_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingSoulInfo::~YinglingSoulInfo() {
  SharedDtor();
}

void YinglingSoulInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingSoulInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingSoulInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingSoulInfo_descriptor_;
}

const YinglingSoulInfo& YinglingSoulInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

YinglingSoulInfo* YinglingSoulInfo::default_instance_ = NULL;

YinglingSoulInfo* YinglingSoulInfo::New() const {
  return new YinglingSoulInfo;
}

void YinglingSoulInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    soul_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingSoulInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul;
        break;
      }
      
      // optional int32 soul = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_)));
          set_has_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingSoulInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 soul = 2;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soul(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingSoulInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 soul = 2;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soul(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingSoulInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 soul = 2;
    if (has_soul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingSoulInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingSoulInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingSoulInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingSoulInfo::MergeFrom(const YinglingSoulInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_soul()) {
      set_soul(from.soul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingSoulInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingSoulInfo::CopyFrom(const YinglingSoulInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingSoulInfo::IsInitialized() const {
  
  return true;
}

void YinglingSoulInfo::Swap(YinglingSoulInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(soul_, other->soul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingSoulInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingSoulInfo_descriptor_;
  metadata.reflection = YinglingSoulInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulExchangeRequest::kExchangeFlagFieldNumber;
#endif  // !_MSC_VER

SoulExchangeRequest::SoulExchangeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulExchangeRequest::InitAsDefaultInstance() {
}

SoulExchangeRequest::SoulExchangeRequest(const SoulExchangeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulExchangeRequest::SharedCtor() {
  _cached_size_ = 0;
  exchange_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulExchangeRequest::~SoulExchangeRequest() {
  SharedDtor();
}

void SoulExchangeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulExchangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulExchangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulExchangeRequest_descriptor_;
}

const SoulExchangeRequest& SoulExchangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SoulExchangeRequest* SoulExchangeRequest::default_instance_ = NULL;

SoulExchangeRequest* SoulExchangeRequest::New() const {
  return new SoulExchangeRequest;
}

void SoulExchangeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulExchangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool exchange_flag = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exchange_flag_)));
          set_has_exchange_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulExchangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool exchange_flag = 1 [default = false];
  if (has_exchange_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->exchange_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulExchangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool exchange_flag = 1 [default = false];
  if (has_exchange_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->exchange_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulExchangeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool exchange_flag = 1 [default = false];
    if (has_exchange_flag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulExchangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulExchangeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulExchangeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulExchangeRequest::MergeFrom(const SoulExchangeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_flag()) {
      set_exchange_flag(from.exchange_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulExchangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulExchangeRequest::CopyFrom(const SoulExchangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulExchangeRequest::IsInitialized() const {
  
  return true;
}

void SoulExchangeRequest::Swap(SoulExchangeRequest* other) {
  if (other != this) {
    std::swap(exchange_flag_, other->exchange_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulExchangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulExchangeRequest_descriptor_;
  metadata.reflection = SoulExchangeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulExchangeResponse::kErrorCodeFieldNumber;
const int SoulExchangeResponse::kYinglingListFieldNumber;
const int SoulExchangeResponse::kStoneCountFieldNumber;
const int SoulExchangeResponse::kFeatherCountFieldNumber;
const int SoulExchangeResponse::kLingliExchangeCountFieldNumber;
const int SoulExchangeResponse::kItemExchangeCountFieldNumber;
#endif  // !_MSC_VER

SoulExchangeResponse::SoulExchangeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulExchangeResponse::InitAsDefaultInstance() {
}

SoulExchangeResponse::SoulExchangeResponse(const SoulExchangeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulExchangeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  stone_count_ = 0;
  feather_count_ = 0;
  lingli_exchange_count_ = 0;
  item_exchange_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulExchangeResponse::~SoulExchangeResponse() {
  SharedDtor();
}

void SoulExchangeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoulExchangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulExchangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulExchangeResponse_descriptor_;
}

const SoulExchangeResponse& SoulExchangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

SoulExchangeResponse* SoulExchangeResponse::default_instance_ = NULL;

SoulExchangeResponse* SoulExchangeResponse::New() const {
  return new SoulExchangeResponse;
}

void SoulExchangeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    stone_count_ = 0;
    feather_count_ = 0;
    lingli_exchange_count_ = 0;
    item_exchange_count_ = 0;
  }
  yingling_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulExchangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yingling_list;
        break;
      }
      
      // repeated .protocols.common.YinglingSoulInfo yingling_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yingling_list;
        if (input->ExpectTag(24)) goto parse_stone_count;
        break;
      }
      
      // optional int32 stone_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_count_)));
          set_has_stone_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_feather_count;
        break;
      }
      
      // optional int32 feather_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feather_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feather_count_)));
          set_has_feather_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lingli_exchange_count;
        break;
      }
      
      // optional int32 lingli_exchange_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lingli_exchange_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lingli_exchange_count_)));
          set_has_lingli_exchange_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_exchange_count;
        break;
      }
      
      // optional int32 item_exchange_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_exchange_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_exchange_count_)));
          set_has_item_exchange_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulExchangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.YinglingSoulInfo yingling_list = 2;
  for (int i = 0; i < this->yingling_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yingling_list(i), output);
  }
  
  // optional int32 stone_count = 3;
  if (has_stone_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stone_count(), output);
  }
  
  // optional int32 feather_count = 4;
  if (has_feather_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->feather_count(), output);
  }
  
  // optional int32 lingli_exchange_count = 5;
  if (has_lingli_exchange_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lingli_exchange_count(), output);
  }
  
  // optional int32 item_exchange_count = 6;
  if (has_item_exchange_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_exchange_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulExchangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.YinglingSoulInfo yingling_list = 2;
  for (int i = 0; i < this->yingling_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yingling_list(i), target);
  }
  
  // optional int32 stone_count = 3;
  if (has_stone_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stone_count(), target);
  }
  
  // optional int32 feather_count = 4;
  if (has_feather_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->feather_count(), target);
  }
  
  // optional int32 lingli_exchange_count = 5;
  if (has_lingli_exchange_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lingli_exchange_count(), target);
  }
  
  // optional int32 item_exchange_count = 6;
  if (has_item_exchange_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_exchange_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulExchangeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 stone_count = 3;
    if (has_stone_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_count());
    }
    
    // optional int32 feather_count = 4;
    if (has_feather_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feather_count());
    }
    
    // optional int32 lingli_exchange_count = 5;
    if (has_lingli_exchange_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lingli_exchange_count());
    }
    
    // optional int32 item_exchange_count = 6;
    if (has_item_exchange_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_exchange_count());
    }
    
  }
  // repeated .protocols.common.YinglingSoulInfo yingling_list = 2;
  total_size += 1 * this->yingling_list_size();
  for (int i = 0; i < this->yingling_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulExchangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulExchangeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulExchangeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulExchangeResponse::MergeFrom(const SoulExchangeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_list_.MergeFrom(from.yingling_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_stone_count()) {
      set_stone_count(from.stone_count());
    }
    if (from.has_feather_count()) {
      set_feather_count(from.feather_count());
    }
    if (from.has_lingli_exchange_count()) {
      set_lingli_exchange_count(from.lingli_exchange_count());
    }
    if (from.has_item_exchange_count()) {
      set_item_exchange_count(from.item_exchange_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulExchangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulExchangeResponse::CopyFrom(const SoulExchangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulExchangeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SoulExchangeResponse::Swap(SoulExchangeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    yingling_list_.Swap(&other->yingling_list_);
    std::swap(stone_count_, other->stone_count_);
    std::swap(feather_count_, other->feather_count_);
    std::swap(lingli_exchange_count_, other->lingli_exchange_count_);
    std::swap(item_exchange_count_, other->item_exchange_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulExchangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulExchangeResponse_descriptor_;
  metadata.reflection = SoulExchangeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LobbyCustomPassInfoRequest::LobbyCustomPassInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyCustomPassInfoRequest::InitAsDefaultInstance() {
}

LobbyCustomPassInfoRequest::LobbyCustomPassInfoRequest(const LobbyCustomPassInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyCustomPassInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyCustomPassInfoRequest::~LobbyCustomPassInfoRequest() {
  SharedDtor();
}

void LobbyCustomPassInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LobbyCustomPassInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyCustomPassInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyCustomPassInfoRequest_descriptor_;
}

const LobbyCustomPassInfoRequest& LobbyCustomPassInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LobbyCustomPassInfoRequest* LobbyCustomPassInfoRequest::default_instance_ = NULL;

LobbyCustomPassInfoRequest* LobbyCustomPassInfoRequest::New() const {
  return new LobbyCustomPassInfoRequest;
}

void LobbyCustomPassInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyCustomPassInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LobbyCustomPassInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyCustomPassInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyCustomPassInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyCustomPassInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyCustomPassInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyCustomPassInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyCustomPassInfoRequest::MergeFrom(const LobbyCustomPassInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyCustomPassInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyCustomPassInfoRequest::CopyFrom(const LobbyCustomPassInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyCustomPassInfoRequest::IsInitialized() const {
  
  return true;
}

void LobbyCustomPassInfoRequest::Swap(LobbyCustomPassInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyCustomPassInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyCustomPassInfoRequest_descriptor_;
  metadata.reflection = LobbyCustomPassInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomPassWaitInfo::kPassIdFieldNumber;
const int CustomPassWaitInfo::kGradeIdFieldNumber;
const int CustomPassWaitInfo::kWaitPlayerCountFieldNumber;
#endif  // !_MSC_VER

CustomPassWaitInfo::CustomPassWaitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomPassWaitInfo::InitAsDefaultInstance() {
}

CustomPassWaitInfo::CustomPassWaitInfo(const CustomPassWaitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomPassWaitInfo::SharedCtor() {
  _cached_size_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  wait_player_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomPassWaitInfo::~CustomPassWaitInfo() {
  SharedDtor();
}

void CustomPassWaitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CustomPassWaitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomPassWaitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomPassWaitInfo_descriptor_;
}

const CustomPassWaitInfo& CustomPassWaitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

CustomPassWaitInfo* CustomPassWaitInfo::default_instance_ = NULL;

CustomPassWaitInfo* CustomPassWaitInfo::New() const {
  return new CustomPassWaitInfo;
}

void CustomPassWaitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_id_ = 0;
    grade_id_ = 0;
    wait_player_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomPassWaitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pass_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade_id;
        break;
      }
      
      // required int32 grade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wait_player_count;
        break;
      }
      
      // required int32 wait_player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_player_count_)));
          set_has_wait_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomPassWaitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass_id(), output);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade_id(), output);
  }
  
  // required int32 wait_player_count = 3;
  if (has_wait_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wait_player_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomPassWaitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass_id(), target);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade_id(), target);
  }
  
  // required int32 wait_player_count = 3;
  if (has_wait_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wait_player_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomPassWaitInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pass_id = 1;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // required int32 grade_id = 2;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
    // required int32 wait_player_count = 3;
    if (has_wait_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_player_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomPassWaitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomPassWaitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomPassWaitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomPassWaitInfo::MergeFrom(const CustomPassWaitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
    if (from.has_wait_player_count()) {
      set_wait_player_count(from.wait_player_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomPassWaitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomPassWaitInfo::CopyFrom(const CustomPassWaitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomPassWaitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CustomPassWaitInfo::Swap(CustomPassWaitInfo* other) {
  if (other != this) {
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(wait_player_count_, other->wait_player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomPassWaitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomPassWaitInfo_descriptor_;
  metadata.reflection = CustomPassWaitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LobbyCustomPassInfoResponse::kErrorCodeFieldNumber;
const int LobbyCustomPassInfoResponse::kAllPassInfoFieldNumber;
#endif  // !_MSC_VER

LobbyCustomPassInfoResponse::LobbyCustomPassInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyCustomPassInfoResponse::InitAsDefaultInstance() {
}

LobbyCustomPassInfoResponse::LobbyCustomPassInfoResponse(const LobbyCustomPassInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyCustomPassInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyCustomPassInfoResponse::~LobbyCustomPassInfoResponse() {
  SharedDtor();
}

void LobbyCustomPassInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LobbyCustomPassInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyCustomPassInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyCustomPassInfoResponse_descriptor_;
}

const LobbyCustomPassInfoResponse& LobbyCustomPassInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LobbyCustomPassInfoResponse* LobbyCustomPassInfoResponse::default_instance_ = NULL;

LobbyCustomPassInfoResponse* LobbyCustomPassInfoResponse::New() const {
  return new LobbyCustomPassInfoResponse;
}

void LobbyCustomPassInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  all_pass_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyCustomPassInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_pass_info;
        break;
      }
      
      // repeated .protocols.common.CustomPassWaitInfo all_pass_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_pass_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_pass_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_pass_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyCustomPassInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.CustomPassWaitInfo all_pass_info = 2;
  for (int i = 0; i < this->all_pass_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_pass_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyCustomPassInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.CustomPassWaitInfo all_pass_info = 2;
  for (int i = 0; i < this->all_pass_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_pass_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyCustomPassInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.CustomPassWaitInfo all_pass_info = 2;
  total_size += 1 * this->all_pass_info_size();
  for (int i = 0; i < this->all_pass_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_pass_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyCustomPassInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyCustomPassInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyCustomPassInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyCustomPassInfoResponse::MergeFrom(const LobbyCustomPassInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_pass_info_.MergeFrom(from.all_pass_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyCustomPassInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyCustomPassInfoResponse::CopyFrom(const LobbyCustomPassInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyCustomPassInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < all_pass_info_size(); i++) {
    if (!this->all_pass_info(i).IsInitialized()) return false;
  }
  return true;
}

void LobbyCustomPassInfoResponse::Swap(LobbyCustomPassInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    all_pass_info_.Swap(&other->all_pass_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyCustomPassInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyCustomPassInfoResponse_descriptor_;
  metadata.reflection = LobbyCustomPassInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterPassRoomRequest::kPassIdFieldNumber;
const int PlayerEnterPassRoomRequest::kGradeIdFieldNumber;
const int PlayerEnterPassRoomRequest::kEnterOrRefrashOrLeaveFieldNumber;
#endif  // !_MSC_VER

PlayerEnterPassRoomRequest::PlayerEnterPassRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterPassRoomRequest::InitAsDefaultInstance() {
}

PlayerEnterPassRoomRequest::PlayerEnterPassRoomRequest(const PlayerEnterPassRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterPassRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  enter_or_refrash_or_leave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterPassRoomRequest::~PlayerEnterPassRoomRequest() {
  SharedDtor();
}

void PlayerEnterPassRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEnterPassRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterPassRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterPassRoomRequest_descriptor_;
}

const PlayerEnterPassRoomRequest& PlayerEnterPassRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerEnterPassRoomRequest* PlayerEnterPassRoomRequest::default_instance_ = NULL;

PlayerEnterPassRoomRequest* PlayerEnterPassRoomRequest::New() const {
  return new PlayerEnterPassRoomRequest;
}

void PlayerEnterPassRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_id_ = 0;
    grade_id_ = 0;
    enter_or_refrash_or_leave_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEnterPassRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pass_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade_id;
        break;
      }
      
      // required int32 grade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter_or_refrash_or_leave;
        break;
      }
      
      // required int32 enter_or_refrash_or_leave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_or_refrash_or_leave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_or_refrash_or_leave_)));
          set_has_enter_or_refrash_or_leave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEnterPassRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass_id(), output);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade_id(), output);
  }
  
  // required int32 enter_or_refrash_or_leave = 3;
  if (has_enter_or_refrash_or_leave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enter_or_refrash_or_leave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterPassRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass_id(), target);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade_id(), target);
  }
  
  // required int32 enter_or_refrash_or_leave = 3;
  if (has_enter_or_refrash_or_leave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enter_or_refrash_or_leave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterPassRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pass_id = 1;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // required int32 grade_id = 2;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
    // required int32 enter_or_refrash_or_leave = 3;
    if (has_enter_or_refrash_or_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_or_refrash_or_leave());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterPassRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterPassRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterPassRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEnterPassRoomRequest::MergeFrom(const PlayerEnterPassRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
    if (from.has_enter_or_refrash_or_leave()) {
      set_enter_or_refrash_or_leave(from.enter_or_refrash_or_leave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEnterPassRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterPassRoomRequest::CopyFrom(const PlayerEnterPassRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterPassRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PlayerEnterPassRoomRequest::Swap(PlayerEnterPassRoomRequest* other) {
  if (other != this) {
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(enter_or_refrash_or_leave_, other->enter_or_refrash_or_leave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEnterPassRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterPassRoomRequest_descriptor_;
  metadata.reflection = PlayerEnterPassRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInfo::kRoomIdFieldNumber;
const int RoomInfo::kRoomOwnerIdFieldNumber;
const int RoomInfo::kIsLockFieldNumber;
const int RoomInfo::kCurrentPlayerCountFieldNumber;
const int RoomInfo::kMaxPlayerCountFieldNumber;
const int RoomInfo::kLeaderNameFieldNumber;
const int RoomInfo::kLeaderSexFieldNumber;
const int RoomInfo::kLeaderVipLevelFieldNumber;
const int RoomInfo::kPassIdFieldNumber;
const int RoomInfo::kGradeIdFieldNumber;
#endif  // !_MSC_VER

RoomInfo::RoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomInfo::InitAsDefaultInstance() {
}

RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomInfo::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  room_owner_id_ = GOOGLE_LONGLONG(0);
  is_lock_ = false;
  current_player_count_ = 0;
  max_player_count_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_sex_ = 0;
  leader_vip_level_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInfo::~RoomInfo() {
  SharedDtor();
}

void RoomInfo::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void RoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInfo_descriptor_;
}

const RoomInfo& RoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

RoomInfo* RoomInfo::default_instance_ = NULL;

RoomInfo* RoomInfo::New() const {
  return new RoomInfo;
}

void RoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    room_owner_id_ = GOOGLE_LONGLONG(0);
    is_lock_ = false;
    current_player_count_ = 0;
    max_player_count_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    leader_sex_ = 0;
    leader_vip_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pass_id_ = 0;
    grade_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_owner_id;
        break;
      }
      
      // required int64 room_owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &room_owner_id_)));
          set_has_room_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_lock;
        break;
      }
      
      // required bool is_lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lock_)));
          set_has_is_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_player_count;
        break;
      }
      
      // required int32 current_player_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_player_count_)));
          set_has_current_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_player_count;
        break;
      }
      
      // required int32 max_player_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_count_)));
          set_has_max_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_leader_name;
        break;
      }
      
      // required string leader_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader_sex;
        break;
      }
      
      // required int32 leader_sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_sex_)));
          set_has_leader_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leader_vip_level;
        break;
      }
      
      // required int32 leader_vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_vip_level_)));
          set_has_leader_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pass_id;
        break;
      }
      
      // required int32 pass_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_grade_id;
        break;
      }
      
      // required int32 grade_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }
  
  // required int64 room_owner_id = 2;
  if (has_room_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->room_owner_id(), output);
  }
  
  // required bool is_lock = 3;
  if (has_is_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_lock(), output);
  }
  
  // required int32 current_player_count = 4;
  if (has_current_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_player_count(), output);
  }
  
  // required int32 max_player_count = 5;
  if (has_max_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_player_count(), output);
  }
  
  // required string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->leader_name(), output);
  }
  
  // required int32 leader_sex = 7;
  if (has_leader_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leader_sex(), output);
  }
  
  // required int32 leader_vip_level = 8;
  if (has_leader_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->leader_vip_level(), output);
  }
  
  // required int32 pass_id = 9;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pass_id(), output);
  }
  
  // required int32 grade_id = 10;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->grade_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }
  
  // required int64 room_owner_id = 2;
  if (has_room_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->room_owner_id(), target);
  }
  
  // required bool is_lock = 3;
  if (has_is_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_lock(), target);
  }
  
  // required int32 current_player_count = 4;
  if (has_current_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_player_count(), target);
  }
  
  // required int32 max_player_count = 5;
  if (has_max_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_player_count(), target);
  }
  
  // required string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_name(), target);
  }
  
  // required int32 leader_sex = 7;
  if (has_leader_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leader_sex(), target);
  }
  
  // required int32 leader_vip_level = 8;
  if (has_leader_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->leader_vip_level(), target);
  }
  
  // required int32 pass_id = 9;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pass_id(), target);
  }
  
  // required int32 grade_id = 10;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->grade_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required int64 room_owner_id = 2;
    if (has_room_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->room_owner_id());
    }
    
    // required bool is_lock = 3;
    if (has_is_lock()) {
      total_size += 1 + 1;
    }
    
    // required int32 current_player_count = 4;
    if (has_current_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_player_count());
    }
    
    // required int32 max_player_count = 5;
    if (has_max_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player_count());
    }
    
    // required string leader_name = 6;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // required int32 leader_sex = 7;
    if (has_leader_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_sex());
    }
    
    // required int32 leader_vip_level = 8;
    if (has_leader_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_vip_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 pass_id = 9;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // required int32 grade_id = 10;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_owner_id()) {
      set_room_owner_id(from.room_owner_id());
    }
    if (from.has_is_lock()) {
      set_is_lock(from.is_lock());
    }
    if (from.has_current_player_count()) {
      set_current_player_count(from.current_player_count());
    }
    if (from.has_max_player_count()) {
      set_max_player_count(from.max_player_count());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_leader_sex()) {
      set_leader_sex(from.leader_sex());
    }
    if (from.has_leader_vip_level()) {
      set_leader_vip_level(from.leader_vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_owner_id_, other->room_owner_id_);
    std::swap(is_lock_, other->is_lock_);
    std::swap(current_player_count_, other->current_player_count_);
    std::swap(max_player_count_, other->max_player_count_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(leader_sex_, other->leader_sex_);
    std::swap(leader_vip_level_, other->leader_vip_level_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInfo_descriptor_;
  metadata.reflection = RoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterPassRoomResponse::kErrorCodeFieldNumber;
const int PlayerEnterPassRoomResponse::kPassIdFieldNumber;
const int PlayerEnterPassRoomResponse::kGradeIdFieldNumber;
const int PlayerEnterPassRoomResponse::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

PlayerEnterPassRoomResponse::PlayerEnterPassRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterPassRoomResponse::InitAsDefaultInstance() {
}

PlayerEnterPassRoomResponse::PlayerEnterPassRoomResponse(const PlayerEnterPassRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterPassRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterPassRoomResponse::~PlayerEnterPassRoomResponse() {
  SharedDtor();
}

void PlayerEnterPassRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEnterPassRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterPassRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterPassRoomResponse_descriptor_;
}

const PlayerEnterPassRoomResponse& PlayerEnterPassRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerEnterPassRoomResponse* PlayerEnterPassRoomResponse::default_instance_ = NULL;

PlayerEnterPassRoomResponse* PlayerEnterPassRoomResponse::New() const {
  return new PlayerEnterPassRoomResponse;
}

void PlayerEnterPassRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    pass_id_ = 0;
    grade_id_ = 0;
  }
  room_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEnterPassRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_id;
        break;
      }
      
      // optional int32 pass_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade_id;
        break;
      }
      
      // optional int32 grade_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_info;
        break;
      }
      
      // repeated .protocols.common.RoomInfo room_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEnterPassRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 pass_id = 2;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_id(), output);
  }
  
  // optional int32 grade_id = 3;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade_id(), output);
  }
  
  // repeated .protocols.common.RoomInfo room_info = 4;
  for (int i = 0; i < this->room_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->room_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterPassRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 pass_id = 2;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_id(), target);
  }
  
  // optional int32 grade_id = 3;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade_id(), target);
  }
  
  // repeated .protocols.common.RoomInfo room_info = 4;
  for (int i = 0; i < this->room_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->room_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterPassRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 pass_id = 2;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // optional int32 grade_id = 3;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
  }
  // repeated .protocols.common.RoomInfo room_info = 4;
  total_size += 1 * this->room_info_size();
  for (int i = 0; i < this->room_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterPassRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterPassRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterPassRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEnterPassRoomResponse::MergeFrom(const PlayerEnterPassRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_info_.MergeFrom(from.room_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEnterPassRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterPassRoomResponse::CopyFrom(const PlayerEnterPassRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterPassRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < room_info_size(); i++) {
    if (!this->room_info(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEnterPassRoomResponse::Swap(PlayerEnterPassRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    room_info_.Swap(&other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEnterPassRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterPassRoomResponse_descriptor_;
  metadata.reflection = PlayerEnterPassRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCreatePassRoomRequest::kCreateOrEnterOrRandomFieldNumber;
const int PlayerCreatePassRoomRequest::kPassIdFieldNumber;
const int PlayerCreatePassRoomRequest::kGradeIdFieldNumber;
const int PlayerCreatePassRoomRequest::kRoomIdFieldNumber;
const int PlayerCreatePassRoomRequest::kMaxPlayerCountFieldNumber;
const int PlayerCreatePassRoomRequest::kPwdFieldNumber;
#endif  // !_MSC_VER

PlayerCreatePassRoomRequest::PlayerCreatePassRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCreatePassRoomRequest::InitAsDefaultInstance() {
}

PlayerCreatePassRoomRequest::PlayerCreatePassRoomRequest(const PlayerCreatePassRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCreatePassRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  create_or_enter_or_random_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  room_id_ = 0;
  max_player_count_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCreatePassRoomRequest::~PlayerCreatePassRoomRequest() {
  SharedDtor();
}

void PlayerCreatePassRoomRequest::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PlayerCreatePassRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCreatePassRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCreatePassRoomRequest_descriptor_;
}

const PlayerCreatePassRoomRequest& PlayerCreatePassRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerCreatePassRoomRequest* PlayerCreatePassRoomRequest::default_instance_ = NULL;

PlayerCreatePassRoomRequest* PlayerCreatePassRoomRequest::New() const {
  return new PlayerCreatePassRoomRequest;
}

void PlayerCreatePassRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_or_enter_or_random_ = 0;
    pass_id_ = 0;
    grade_id_ = 0;
    room_id_ = 0;
    max_player_count_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCreatePassRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 create_or_enter_or_random = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_or_enter_or_random_)));
          set_has_create_or_enter_or_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_id;
        break;
      }
      
      // optional int32 pass_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade_id;
        break;
      }
      
      // optional int32 grade_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }
      
      // optional int32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_player_count;
        break;
      }
      
      // optional int32 max_player_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_player_count_)));
          set_has_max_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCreatePassRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 create_or_enter_or_random = 1;
  if (has_create_or_enter_or_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->create_or_enter_or_random(), output);
  }
  
  // optional int32 pass_id = 2;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_id(), output);
  }
  
  // optional int32 grade_id = 3;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade_id(), output);
  }
  
  // optional int32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_id(), output);
  }
  
  // optional int32 max_player_count = 5;
  if (has_max_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_player_count(), output);
  }
  
  // optional string pwd = 6;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCreatePassRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 create_or_enter_or_random = 1;
  if (has_create_or_enter_or_random()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->create_or_enter_or_random(), target);
  }
  
  // optional int32 pass_id = 2;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass_id(), target);
  }
  
  // optional int32 grade_id = 3;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade_id(), target);
  }
  
  // optional int32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_id(), target);
  }
  
  // optional int32 max_player_count = 5;
  if (has_max_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_player_count(), target);
  }
  
  // optional string pwd = 6;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCreatePassRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 create_or_enter_or_random = 1;
    if (has_create_or_enter_or_random()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_or_enter_or_random());
    }
    
    // optional int32 pass_id = 2;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // optional int32 grade_id = 3;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
    // optional int32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // optional int32 max_player_count = 5;
    if (has_max_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_player_count());
    }
    
    // optional string pwd = 6;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCreatePassRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCreatePassRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCreatePassRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCreatePassRoomRequest::MergeFrom(const PlayerCreatePassRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create_or_enter_or_random()) {
      set_create_or_enter_or_random(from.create_or_enter_or_random());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_max_player_count()) {
      set_max_player_count(from.max_player_count());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCreatePassRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCreatePassRoomRequest::CopyFrom(const PlayerCreatePassRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCreatePassRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerCreatePassRoomRequest::Swap(PlayerCreatePassRoomRequest* other) {
  if (other != this) {
    std::swap(create_or_enter_or_random_, other->create_or_enter_or_random_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(max_player_count_, other->max_player_count_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCreatePassRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCreatePassRoomRequest_descriptor_;
  metadata.reflection = PlayerCreatePassRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCreatePassRoomResponse::kErrorCodeFieldNumber;
const int PlayerCreatePassRoomResponse::kRoomIdFieldNumber;
const int PlayerCreatePassRoomResponse::kPassIdFieldNumber;
const int PlayerCreatePassRoomResponse::kGradeIdFieldNumber;
const int PlayerCreatePassRoomResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

PlayerCreatePassRoomResponse::PlayerCreatePassRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCreatePassRoomResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

PlayerCreatePassRoomResponse::PlayerCreatePassRoomResponse(const PlayerCreatePassRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCreatePassRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  room_id_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCreatePassRoomResponse::~PlayerCreatePassRoomResponse() {
  SharedDtor();
}

void PlayerCreatePassRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void PlayerCreatePassRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCreatePassRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCreatePassRoomResponse_descriptor_;
}

const PlayerCreatePassRoomResponse& PlayerCreatePassRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerCreatePassRoomResponse* PlayerCreatePassRoomResponse::default_instance_ = NULL;

PlayerCreatePassRoomResponse* PlayerCreatePassRoomResponse::New() const {
  return new PlayerCreatePassRoomResponse;
}

void PlayerCreatePassRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    room_id_ = 0;
    pass_id_ = 0;
    grade_id_ = 0;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCreatePassRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }
      
      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_id;
        break;
      }
      
      // optional int32 pass_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grade_id;
        break;
      }
      
      // optional int32 grade_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCreatePassRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }
  
  // optional int32 pass_id = 3;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_id(), output);
  }
  
  // optional int32 grade_id = 4;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grade_id(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 5;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCreatePassRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }
  
  // optional int32 pass_id = 3;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_id(), target);
  }
  
  // optional int32 grade_id = 4;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grade_id(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 5;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCreatePassRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // optional int32 pass_id = 3;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // optional int32 grade_id = 4;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
    // optional .protocols.common.TeamInfo team_info = 5;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCreatePassRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCreatePassRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCreatePassRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCreatePassRoomResponse::MergeFrom(const PlayerCreatePassRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCreatePassRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCreatePassRoomResponse::CopyFrom(const PlayerCreatePassRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCreatePassRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void PlayerCreatePassRoomResponse::Swap(PlayerCreatePassRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(room_id_, other->room_id_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerCreatePassRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCreatePassRoomResponse_descriptor_;
  metadata.reflection = PlayerCreatePassRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateRoomRequest::kOperationFieldNumber;
const int OperateRoomRequest::kObjectGuidFieldNumber;
const int OperateRoomRequest::kReadyStatusFieldNumber;
const int OperateRoomRequest::kNewPwdFieldNumber;
#endif  // !_MSC_VER

OperateRoomRequest::OperateRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateRoomRequest::InitAsDefaultInstance() {
}

OperateRoomRequest::OperateRoomRequest(const OperateRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  operation_ = 1;
  object_guid_ = GOOGLE_LONGLONG(0);
  ready_status_ = false;
  new_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateRoomRequest::~OperateRoomRequest() {
  SharedDtor();
}

void OperateRoomRequest::SharedDtor() {
  if (new_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete new_pwd_;
  }
  if (this != default_instance_) {
  }
}

void OperateRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateRoomRequest_descriptor_;
}

const OperateRoomRequest& OperateRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OperateRoomRequest* OperateRoomRequest::default_instance_ = NULL;

OperateRoomRequest* OperateRoomRequest::New() const {
  return new OperateRoomRequest;
}

void OperateRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operation_ = 1;
    object_guid_ = GOOGLE_LONGLONG(0);
    ready_status_ = false;
    if (has_new_pwd()) {
      if (new_pwd_ != &::google::protobuf::internal::kEmptyString) {
        new_pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.ROOM_OPERATION operation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ROOM_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::ROOM_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_guid;
        break;
      }
      
      // optional int64 object_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ready_status;
        break;
      }
      
      // optional bool ready_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_status_)));
          set_has_ready_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_pwd;
        break;
      }
      
      // optional string new_pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_pwd().data(), this->new_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.ROOM_OPERATION operation = 1;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }
  
  // optional int64 object_guid = 2;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->object_guid(), output);
  }
  
  // optional bool ready_status = 3;
  if (has_ready_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ready_status(), output);
  }
  
  // optional string new_pwd = 4;
  if (has_new_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pwd().data(), this->new_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.ROOM_OPERATION operation = 1;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }
  
  // optional int64 object_guid = 2;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->object_guid(), target);
  }
  
  // optional bool ready_status = 3;
  if (has_ready_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ready_status(), target);
  }
  
  // optional string new_pwd = 4;
  if (has_new_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_pwd().data(), this->new_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.ROOM_OPERATION operation = 1;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional int64 object_guid = 2;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
    // optional bool ready_status = 3;
    if (has_ready_status()) {
      total_size += 1 + 1;
    }
    
    // optional string new_pwd = 4;
    if (has_new_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateRoomRequest::MergeFrom(const OperateRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
    if (from.has_ready_status()) {
      set_ready_status(from.ready_status());
    }
    if (from.has_new_pwd()) {
      set_new_pwd(from.new_pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateRoomRequest::CopyFrom(const OperateRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void OperateRoomRequest::Swap(OperateRoomRequest* other) {
  if (other != this) {
    std::swap(operation_, other->operation_);
    std::swap(object_guid_, other->object_guid_);
    std::swap(ready_status_, other->ready_status_);
    std::swap(new_pwd_, other->new_pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateRoomRequest_descriptor_;
  metadata.reflection = OperateRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateRoomResponse::kErrorCodeFieldNumber;
const int OperateRoomResponse::kOperationFieldNumber;
const int OperateRoomResponse::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

OperateRoomResponse::OperateRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperateRoomResponse::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

OperateRoomResponse::OperateRoomResponse(const OperateRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperateRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  operation_ = 1;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateRoomResponse::~OperateRoomResponse() {
  SharedDtor();
}

void OperateRoomResponse::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void OperateRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateRoomResponse_descriptor_;
}

const OperateRoomResponse& OperateRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

OperateRoomResponse* OperateRoomResponse::default_instance_ = NULL;

OperateRoomResponse* OperateRoomResponse::New() const {
  return new OperateRoomResponse;
}

void OperateRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    operation_ = 1;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // required .protocols.common.ROOM_OPERATION operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ROOM_OPERATION_IsValid(value)) {
            set_operation(static_cast< protocols::common::ROOM_OPERATION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team_info;
        break;
      }
      
      // optional .protocols.common.TeamInfo team_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperateRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required .protocols.common.ROOM_OPERATION operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }
  
  // optional .protocols.common.TeamInfo team_info = 3;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperateRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required .protocols.common.ROOM_OPERATION operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }
  
  // optional .protocols.common.TeamInfo team_info = 3;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperateRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required .protocols.common.ROOM_OPERATION operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
    // optional .protocols.common.TeamInfo team_info = 3;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateRoomResponse::MergeFrom(const OperateRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateRoomResponse::CopyFrom(const OperateRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void OperateRoomResponse::Swap(OperateRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(operation_, other->operation_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateRoomResponse_descriptor_;
  metadata.reflection = OperateRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassRoomInfoUpdateNotify::kRoomIdFieldNumber;
const int PassRoomInfoUpdateNotify::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

PassRoomInfoUpdateNotify::PassRoomInfoUpdateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassRoomInfoUpdateNotify::InitAsDefaultInstance() {
  team_info_ = const_cast< ::protocols::common::TeamInfo*>(&::protocols::common::TeamInfo::default_instance());
}

PassRoomInfoUpdateNotify::PassRoomInfoUpdateNotify(const PassRoomInfoUpdateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassRoomInfoUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  team_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassRoomInfoUpdateNotify::~PassRoomInfoUpdateNotify() {
  SharedDtor();
}

void PassRoomInfoUpdateNotify::SharedDtor() {
  if (this != default_instance_) {
    delete team_info_;
  }
}

void PassRoomInfoUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassRoomInfoUpdateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassRoomInfoUpdateNotify_descriptor_;
}

const PassRoomInfoUpdateNotify& PassRoomInfoUpdateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PassRoomInfoUpdateNotify* PassRoomInfoUpdateNotify::default_instance_ = NULL;

PassRoomInfoUpdateNotify* PassRoomInfoUpdateNotify::New() const {
  return new PassRoomInfoUpdateNotify;
}

void PassRoomInfoUpdateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    if (has_team_info()) {
      if (team_info_ != NULL) team_info_->::protocols::common::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassRoomInfoUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team_info;
        break;
      }
      
      // required .protocols.common.TeamInfo team_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassRoomInfoUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }
  
  // required .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassRoomInfoUpdateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }
  
  // required .protocols.common.TeamInfo team_info = 2;
  if (has_team_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassRoomInfoUpdateNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required .protocols.common.TeamInfo team_info = 2;
    if (has_team_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassRoomInfoUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassRoomInfoUpdateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassRoomInfoUpdateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassRoomInfoUpdateNotify::MergeFrom(const PassRoomInfoUpdateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_team_info()) {
      mutable_team_info()->::protocols::common::TeamInfo::MergeFrom(from.team_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassRoomInfoUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassRoomInfoUpdateNotify::CopyFrom(const PassRoomInfoUpdateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassRoomInfoUpdateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_team_info()) {
    if (!this->team_info().IsInitialized()) return false;
  }
  return true;
}

void PassRoomInfoUpdateNotify::Swap(PassRoomInfoUpdateNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(team_info_, other->team_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassRoomInfoUpdateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassRoomInfoUpdateNotify_descriptor_;
  metadata.reflection = PassRoomInfoUpdateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitePlayerJoinRoomRequest::kObjectGuidFieldNumber;
const int InvitePlayerJoinRoomRequest::kIsFastInviteFieldNumber;
#endif  // !_MSC_VER

InvitePlayerJoinRoomRequest::InvitePlayerJoinRoomRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitePlayerJoinRoomRequest::InitAsDefaultInstance() {
}

InvitePlayerJoinRoomRequest::InvitePlayerJoinRoomRequest(const InvitePlayerJoinRoomRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitePlayerJoinRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  object_guid_ = GOOGLE_LONGLONG(0);
  is_fast_invite_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitePlayerJoinRoomRequest::~InvitePlayerJoinRoomRequest() {
  SharedDtor();
}

void InvitePlayerJoinRoomRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitePlayerJoinRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitePlayerJoinRoomRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitePlayerJoinRoomRequest_descriptor_;
}

const InvitePlayerJoinRoomRequest& InvitePlayerJoinRoomRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InvitePlayerJoinRoomRequest* InvitePlayerJoinRoomRequest::default_instance_ = NULL;

InvitePlayerJoinRoomRequest* InvitePlayerJoinRoomRequest::New() const {
  return new InvitePlayerJoinRoomRequest;
}

void InvitePlayerJoinRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_guid_ = GOOGLE_LONGLONG(0);
    is_fast_invite_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitePlayerJoinRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 object_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &object_guid_)));
          set_has_object_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_fast_invite;
        break;
      }
      
      // required bool is_fast_invite = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fast_invite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fast_invite_)));
          set_has_is_fast_invite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitePlayerJoinRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->object_guid(), output);
  }
  
  // required bool is_fast_invite = 2;
  if (has_is_fast_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_fast_invite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitePlayerJoinRoomRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->object_guid(), target);
  }
  
  // required bool is_fast_invite = 2;
  if (has_is_fast_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_fast_invite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitePlayerJoinRoomRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 object_guid = 1;
    if (has_object_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->object_guid());
    }
    
    // required bool is_fast_invite = 2;
    if (has_is_fast_invite()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitePlayerJoinRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitePlayerJoinRoomRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitePlayerJoinRoomRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitePlayerJoinRoomRequest::MergeFrom(const InvitePlayerJoinRoomRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      set_object_guid(from.object_guid());
    }
    if (from.has_is_fast_invite()) {
      set_is_fast_invite(from.is_fast_invite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitePlayerJoinRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitePlayerJoinRoomRequest::CopyFrom(const InvitePlayerJoinRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerJoinRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void InvitePlayerJoinRoomRequest::Swap(InvitePlayerJoinRoomRequest* other) {
  if (other != this) {
    std::swap(object_guid_, other->object_guid_);
    std::swap(is_fast_invite_, other->is_fast_invite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitePlayerJoinRoomRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitePlayerJoinRoomRequest_descriptor_;
  metadata.reflection = InvitePlayerJoinRoomRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitePlayerJoinRoomResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

InvitePlayerJoinRoomResponse::InvitePlayerJoinRoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitePlayerJoinRoomResponse::InitAsDefaultInstance() {
}

InvitePlayerJoinRoomResponse::InvitePlayerJoinRoomResponse(const InvitePlayerJoinRoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitePlayerJoinRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitePlayerJoinRoomResponse::~InvitePlayerJoinRoomResponse() {
  SharedDtor();
}

void InvitePlayerJoinRoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitePlayerJoinRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitePlayerJoinRoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitePlayerJoinRoomResponse_descriptor_;
}

const InvitePlayerJoinRoomResponse& InvitePlayerJoinRoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

InvitePlayerJoinRoomResponse* InvitePlayerJoinRoomResponse::default_instance_ = NULL;

InvitePlayerJoinRoomResponse* InvitePlayerJoinRoomResponse::New() const {
  return new InvitePlayerJoinRoomResponse;
}

void InvitePlayerJoinRoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitePlayerJoinRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitePlayerJoinRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitePlayerJoinRoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitePlayerJoinRoomResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitePlayerJoinRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitePlayerJoinRoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitePlayerJoinRoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitePlayerJoinRoomResponse::MergeFrom(const InvitePlayerJoinRoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitePlayerJoinRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitePlayerJoinRoomResponse::CopyFrom(const InvitePlayerJoinRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerJoinRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InvitePlayerJoinRoomResponse::Swap(InvitePlayerJoinRoomResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitePlayerJoinRoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitePlayerJoinRoomResponse_descriptor_;
  metadata.reflection = InvitePlayerJoinRoomResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassRoomInviteNotify::kRoomIdFieldNumber;
const int PassRoomInviteNotify::kLeaderNameFieldNumber;
const int PassRoomInviteNotify::kPassIdFieldNumber;
const int PassRoomInviteNotify::kGradeIdFieldNumber;
#endif  // !_MSC_VER

PassRoomInviteNotify::PassRoomInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassRoomInviteNotify::InitAsDefaultInstance() {
}

PassRoomInviteNotify::PassRoomInviteNotify(const PassRoomInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassRoomInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pass_id_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassRoomInviteNotify::~PassRoomInviteNotify() {
  SharedDtor();
}

void PassRoomInviteNotify::SharedDtor() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void PassRoomInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassRoomInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassRoomInviteNotify_descriptor_;
}

const PassRoomInviteNotify& PassRoomInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PassRoomInviteNotify* PassRoomInviteNotify::default_instance_ = NULL;

PassRoomInviteNotify* PassRoomInviteNotify::New() const {
  return new PassRoomInviteNotify;
}

void PassRoomInviteNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
    pass_id_ = 0;
    grade_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassRoomInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leader_name;
        break;
      }
      
      // required string leader_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_id;
        break;
      }
      
      // required int32 pass_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grade_id;
        break;
      }
      
      // required int32 grade_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassRoomInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }
  
  // required string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leader_name(), output);
  }
  
  // required int32 pass_id = 3;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_id(), output);
  }
  
  // required int32 grade_id = 4;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grade_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassRoomInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }
  
  // required string leader_name = 2;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_name(), target);
  }
  
  // required int32 pass_id = 3;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pass_id(), target);
  }
  
  // required int32 grade_id = 4;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grade_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassRoomInviteNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
    // required string leader_name = 2;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }
    
    // required int32 pass_id = 3;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // required int32 grade_id = 4;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassRoomInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassRoomInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassRoomInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassRoomInviteNotify::MergeFrom(const PassRoomInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassRoomInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassRoomInviteNotify::CopyFrom(const PassRoomInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassRoomInviteNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PassRoomInviteNotify::Swap(PassRoomInviteNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassRoomInviteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassRoomInviteNotify_descriptor_;
  metadata.reflection = PassRoomInviteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassLobbyPlayerListRequest::kPassIdFieldNumber;
const int PassLobbyPlayerListRequest::kGradeIdFieldNumber;
#endif  // !_MSC_VER

PassLobbyPlayerListRequest::PassLobbyPlayerListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassLobbyPlayerListRequest::InitAsDefaultInstance() {
}

PassLobbyPlayerListRequest::PassLobbyPlayerListRequest(const PassLobbyPlayerListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassLobbyPlayerListRequest::SharedCtor() {
  _cached_size_ = 0;
  pass_id_ = 0;
  grade_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassLobbyPlayerListRequest::~PassLobbyPlayerListRequest() {
  SharedDtor();
}

void PassLobbyPlayerListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassLobbyPlayerListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassLobbyPlayerListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassLobbyPlayerListRequest_descriptor_;
}

const PassLobbyPlayerListRequest& PassLobbyPlayerListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PassLobbyPlayerListRequest* PassLobbyPlayerListRequest::default_instance_ = NULL;

PassLobbyPlayerListRequest* PassLobbyPlayerListRequest::New() const {
  return new PassLobbyPlayerListRequest;
}

void PassLobbyPlayerListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pass_id_ = 0;
    grade_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassLobbyPlayerListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pass_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade_id;
        break;
      }
      
      // required int32 grade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_id_)));
          set_has_grade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassLobbyPlayerListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pass_id(), output);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassLobbyPlayerListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pass_id = 1;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pass_id(), target);
  }
  
  // required int32 grade_id = 2;
  if (has_grade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassLobbyPlayerListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pass_id = 1;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_id());
    }
    
    // required int32 grade_id = 2;
    if (has_grade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassLobbyPlayerListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassLobbyPlayerListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassLobbyPlayerListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassLobbyPlayerListRequest::MergeFrom(const PassLobbyPlayerListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_grade_id()) {
      set_grade_id(from.grade_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassLobbyPlayerListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassLobbyPlayerListRequest::CopyFrom(const PassLobbyPlayerListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassLobbyPlayerListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PassLobbyPlayerListRequest::Swap(PassLobbyPlayerListRequest* other) {
  if (other != this) {
    std::swap(pass_id_, other->pass_id_);
    std::swap(grade_id_, other->grade_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassLobbyPlayerListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassLobbyPlayerListRequest_descriptor_;
  metadata.reflection = PassLobbyPlayerListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassLobbyPlayerListResponse::kErrorCodeFieldNumber;
const int PassLobbyPlayerListResponse::kPlayerListFieldNumber;
#endif  // !_MSC_VER

PassLobbyPlayerListResponse::PassLobbyPlayerListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassLobbyPlayerListResponse::InitAsDefaultInstance() {
}

PassLobbyPlayerListResponse::PassLobbyPlayerListResponse(const PassLobbyPlayerListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassLobbyPlayerListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassLobbyPlayerListResponse::~PassLobbyPlayerListResponse() {
  SharedDtor();
}

void PassLobbyPlayerListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassLobbyPlayerListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassLobbyPlayerListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassLobbyPlayerListResponse_descriptor_;
}

const PassLobbyPlayerListResponse& PassLobbyPlayerListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PassLobbyPlayerListResponse* PassLobbyPlayerListResponse::default_instance_ = NULL;

PassLobbyPlayerListResponse* PassLobbyPlayerListResponse::New() const {
  return new PassLobbyPlayerListResponse;
}

void PassLobbyPlayerListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassLobbyPlayerListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        break;
      }
      
      // repeated .protocols.common.PlayerInfo player_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassLobbyPlayerListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassLobbyPlayerListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.PlayerInfo player_list = 2;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassLobbyPlayerListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.PlayerInfo player_list = 2;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassLobbyPlayerListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassLobbyPlayerListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassLobbyPlayerListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassLobbyPlayerListResponse::MergeFrom(const PassLobbyPlayerListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassLobbyPlayerListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassLobbyPlayerListResponse::CopyFrom(const PassLobbyPlayerListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassLobbyPlayerListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void PassLobbyPlayerListResponse::Swap(PassLobbyPlayerListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassLobbyPlayerListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassLobbyPlayerListResponse_descriptor_;
  metadata.reflection = PassLobbyPlayerListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerKickFormRoomNotify::PlayerKickFormRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerKickFormRoomNotify::InitAsDefaultInstance() {
}

PlayerKickFormRoomNotify::PlayerKickFormRoomNotify(const PlayerKickFormRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerKickFormRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerKickFormRoomNotify::~PlayerKickFormRoomNotify() {
  SharedDtor();
}

void PlayerKickFormRoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerKickFormRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerKickFormRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerKickFormRoomNotify_descriptor_;
}

const PlayerKickFormRoomNotify& PlayerKickFormRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

PlayerKickFormRoomNotify* PlayerKickFormRoomNotify::default_instance_ = NULL;

PlayerKickFormRoomNotify* PlayerKickFormRoomNotify::New() const {
  return new PlayerKickFormRoomNotify;
}

void PlayerKickFormRoomNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerKickFormRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PlayerKickFormRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerKickFormRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerKickFormRoomNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerKickFormRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerKickFormRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerKickFormRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerKickFormRoomNotify::MergeFrom(const PlayerKickFormRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerKickFormRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerKickFormRoomNotify::CopyFrom(const PlayerKickFormRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerKickFormRoomNotify::IsInitialized() const {
  
  return true;
}

void PlayerKickFormRoomNotify::Swap(PlayerKickFormRoomNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerKickFormRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerKickFormRoomNotify_descriptor_;
  metadata.reflection = PlayerKickFormRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderStartRoomInstanceRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

LeaderStartRoomInstanceRequest::LeaderStartRoomInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderStartRoomInstanceRequest::InitAsDefaultInstance() {
}

LeaderStartRoomInstanceRequest::LeaderStartRoomInstanceRequest(const LeaderStartRoomInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderStartRoomInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderStartRoomInstanceRequest::~LeaderStartRoomInstanceRequest() {
  SharedDtor();
}

void LeaderStartRoomInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaderStartRoomInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStartRoomInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderStartRoomInstanceRequest_descriptor_;
}

const LeaderStartRoomInstanceRequest& LeaderStartRoomInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LeaderStartRoomInstanceRequest* LeaderStartRoomInstanceRequest::default_instance_ = NULL;

LeaderStartRoomInstanceRequest* LeaderStartRoomInstanceRequest::New() const {
  return new LeaderStartRoomInstanceRequest;
}

void LeaderStartRoomInstanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderStartRoomInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderStartRoomInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderStartRoomInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderStartRoomInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStartRoomInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderStartRoomInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderStartRoomInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderStartRoomInstanceRequest::MergeFrom(const LeaderStartRoomInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderStartRoomInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStartRoomInstanceRequest::CopyFrom(const LeaderStartRoomInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStartRoomInstanceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaderStartRoomInstanceRequest::Swap(LeaderStartRoomInstanceRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderStartRoomInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderStartRoomInstanceRequest_descriptor_;
  metadata.reflection = LeaderStartRoomInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderStartRoomInstanceResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LeaderStartRoomInstanceResponse::LeaderStartRoomInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderStartRoomInstanceResponse::InitAsDefaultInstance() {
}

LeaderStartRoomInstanceResponse::LeaderStartRoomInstanceResponse(const LeaderStartRoomInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderStartRoomInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderStartRoomInstanceResponse::~LeaderStartRoomInstanceResponse() {
  SharedDtor();
}

void LeaderStartRoomInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaderStartRoomInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderStartRoomInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderStartRoomInstanceResponse_descriptor_;
}

const LeaderStartRoomInstanceResponse& LeaderStartRoomInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

LeaderStartRoomInstanceResponse* LeaderStartRoomInstanceResponse::default_instance_ = NULL;

LeaderStartRoomInstanceResponse* LeaderStartRoomInstanceResponse::New() const {
  return new LeaderStartRoomInstanceResponse;
}

void LeaderStartRoomInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderStartRoomInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderStartRoomInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderStartRoomInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderStartRoomInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderStartRoomInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderStartRoomInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderStartRoomInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderStartRoomInstanceResponse::MergeFrom(const LeaderStartRoomInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderStartRoomInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderStartRoomInstanceResponse::CopyFrom(const LeaderStartRoomInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderStartRoomInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaderStartRoomInstanceResponse::Swap(LeaderStartRoomInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderStartRoomInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderStartRoomInstanceResponse_descriptor_;
  metadata.reflection = LeaderStartRoomInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitYellowDuckRequest::kCoinFieldNumber;
#endif  // !_MSC_VER

HitYellowDuckRequest::HitYellowDuckRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HitYellowDuckRequest::InitAsDefaultInstance() {
}

HitYellowDuckRequest::HitYellowDuckRequest(const HitYellowDuckRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HitYellowDuckRequest::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitYellowDuckRequest::~HitYellowDuckRequest() {
  SharedDtor();
}

void HitYellowDuckRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HitYellowDuckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitYellowDuckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitYellowDuckRequest_descriptor_;
}

const HitYellowDuckRequest& HitYellowDuckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HitYellowDuckRequest* HitYellowDuckRequest::default_instance_ = NULL;

HitYellowDuckRequest* HitYellowDuckRequest::New() const {
  return new HitYellowDuckRequest;
}

void HitYellowDuckRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitYellowDuckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HitYellowDuckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HitYellowDuckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HitYellowDuckRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitYellowDuckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitYellowDuckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitYellowDuckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitYellowDuckRequest::MergeFrom(const HitYellowDuckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitYellowDuckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitYellowDuckRequest::CopyFrom(const HitYellowDuckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitYellowDuckRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HitYellowDuckRequest::Swap(HitYellowDuckRequest* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitYellowDuckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitYellowDuckRequest_descriptor_;
  metadata.reflection = HitYellowDuckRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitYellowDuckResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

HitYellowDuckResponse::HitYellowDuckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HitYellowDuckResponse::InitAsDefaultInstance() {
}

HitYellowDuckResponse::HitYellowDuckResponse(const HitYellowDuckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HitYellowDuckResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitYellowDuckResponse::~HitYellowDuckResponse() {
  SharedDtor();
}

void HitYellowDuckResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HitYellowDuckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitYellowDuckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitYellowDuckResponse_descriptor_;
}

const HitYellowDuckResponse& HitYellowDuckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fclient_2eproto();  return *default_instance_;
}

HitYellowDuckResponse* HitYellowDuckResponse::default_instance_ = NULL;

HitYellowDuckResponse* HitYellowDuckResponse::New() const {
  return new HitYellowDuckResponse;
}

void HitYellowDuckResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitYellowDuckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HitYellowDuckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HitYellowDuckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HitYellowDuckResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitYellowDuckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitYellowDuckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitYellowDuckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitYellowDuckResponse::MergeFrom(const HitYellowDuckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitYellowDuckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitYellowDuckResponse::CopyFrom(const HitYellowDuckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitYellowDuckResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HitYellowDuckResponse::Swap(HitYellowDuckResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitYellowDuckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitYellowDuckResponse_descriptor_;
  metadata.reflection = HitYellowDuckResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
