// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_common.proto

#ifndef PROTOBUF_game_5fcommon_2eproto__INCLUDED
#define PROTOBUF_game_5fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "error_code.pb.h"
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fcommon_2eproto();
void protobuf_AssignDesc_game_5fcommon_2eproto();
void protobuf_ShutdownFile_game_5fcommon_2eproto();

class InstanceCardInfo;
class InstanceWantedInfo;
class BuffInfo;
class Fighter;
class SkillBonus;
class PlayerPhyStrengthInfo;
class PlayerInfo;
class NPCInfo;
class BaojuInfo;
class ItemInfo;
class SkillInfo;
class BattleSkillInfo;
class BankInfo;
class YinglingInfo;
class BuddyDetailInfo;
class PBIntPair;
class Relation;
class PlayerRelationData;
class InstanceInfo;
class InstanceDetail;
class MonsterInfo;
class WingSpiritInfo;
class WingSlotInfo;
class WingItemInfo;
class WingSpiritBag;
class SpiritGeneratorInfo;
class EquipInfo;
class AttributeData;
class EquipStoneData;
class EquipStoneData_StoneData;
class DBSlotData;
class EquipDetail;
class FighterInfo;
class LineupInfo;
class Money1;
class Money;
class QuestAction;
class QuestActionsPb;
class QuestPb;
class QuestPreCondition;
class QuestRewards;
class QuestRewards_QuestRewardItem;
class QuestProtoype;
class GuildCrystalReward;
class TreasureBoxReward;
class GuildCrystalTowerActivityData;
class PlayerPosBeforeInstance;
class TeamMemberInfo;
class TeamInfo;
class CoolDown;
class RoleCoolDownPb;
class DailyCountLimit;
class RoleDailyLimitPb;
class DBRoleLimitDataPb;
class HiredYinglingCount;
class RoleHiredYinglingCount;
class StrengthEquipCount;
class RoleStrengthEquipCount;
class DailyQuest;
class DailyQuestPb;
class XunluoQuestPb;
class GuildCircleQuestPb;
class PlayerFlagPb;
class PlayerFlagDataPb;
class TrainAttribute;
class ArenaPlayerInfo;
class TreasureBox;
class UsedName;
class UsedNameData;
class UnuseNameMsg;
class HideNpcData;
class HideNpcPb;
class NpcPosition;
class OpenedFunctionNotify;
class GetBuddyTemplateAttributeRequest;
class GetBuddyTemplateAttributeResponse;
class YouLiMapData;
class YouLiMapData_GridData;
class YinglingComboStatus_ComboMember;
class YinglingComboStatus_Combo;
class YinglingComboStatus;
class YinglingTrainStatus;

enum MessageModule {
  MSG_MODULE_GAME = 0,
  MSG_MODULE_SERVER = 15
};
bool MessageModule_IsValid(int value);
const MessageModule MessageModule_MIN = MSG_MODULE_GAME;
const MessageModule MessageModule_MAX = MSG_MODULE_SERVER;
const int MessageModule_ARRAYSIZE = MessageModule_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageModule_descriptor();
inline const ::std::string& MessageModule_Name(MessageModule value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageModule_descriptor(), value);
}
inline bool MessageModule_Parse(
    const ::std::string& name, MessageModule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageModule>(
    MessageModule_descriptor(), name, value);
}
enum MessageType {
  MSG_TYPE_REQUEST = 0,
  MSG_TYPE_RESPONSE = 1,
  MSG_TYPE_NOTIFY = 2
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MSG_TYPE_REQUEST;
const MessageType MessageType_MAX = MSG_TYPE_NOTIFY;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ItemPositionType {
  IPT_BAG = 0,
  IPT_EQUIP = 1,
  IPT_DEPOT = 2,
  IPT_BUYBACK = 3
};
bool ItemPositionType_IsValid(int value);
const ItemPositionType ItemPositionType_MIN = IPT_BAG;
const ItemPositionType ItemPositionType_MAX = IPT_BUYBACK;
const int ItemPositionType_ARRAYSIZE = ItemPositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemPositionType_descriptor();
inline const ::std::string& ItemPositionType_Name(ItemPositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemPositionType_descriptor(), value);
}
inline bool ItemPositionType_Parse(
    const ::std::string& name, ItemPositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemPositionType>(
    ItemPositionType_descriptor(), name, value);
}
enum DirectionType {
  DT_NORTH_WEST = 4,
  DT_NORTH = 5,
  DT_NORTH_EAST = 6,
  DT_WEST = 3,
  DT_SELF = 0,
  DT_EAST = 7,
  DT_SOUTH_WEST = 2,
  DT_SOUTH = 1,
  DT_SOUTH_EAST = 8
};
bool DirectionType_IsValid(int value);
const DirectionType DirectionType_MIN = DT_SELF;
const DirectionType DirectionType_MAX = DT_SOUTH_EAST;
const int DirectionType_ARRAYSIZE = DirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DirectionType_descriptor();
inline const ::std::string& DirectionType_Name(DirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DirectionType_descriptor(), value);
}
inline bool DirectionType_Parse(
    const ::std::string& name, DirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DirectionType>(
    DirectionType_descriptor(), name, value);
}
enum MessageAction {
  MSG_ACTION_ACC_LOGIN = 1,
  MSG_ACTION_PLAYER_LOGIN = 2,
  MSG_ACTION_INIT_CONNECTION = 3,
  MSG_ACTION_PLAYER_LOGOUT = 4,
  MSG_ACTION_MOVE_START = 5,
  MSG_ACTION_FIND_PLAYER = 6,
  MSG_ACTION_CREATE_PLAYER = 7,
  MSG_ACTION_PLAYER_INFO = 8,
  MSG_ACTION_BUDDY_DETAIL_INFO = 9,
  MSG_ACTION_HEARTBEAT = 10,
  MSG_ACTION_KICK_PLAYER = 11,
  MSG_ACTION_FIRE_YINGLING = 12,
  MSG_ACTION_GET_YINGLING_LIST = 13,
  MSG_ACTION_HIRE_YINGLING = 14,
  MSG_ACTION_OPEN_YINGLING_SLOT = 15,
  MSG_ACTION_YINGLING_HIRING_STATUS = 16,
  MSG_ACTION_REFRESH_HIRING_YINGLING = 17,
  MSG_ACTION_DEL_HIRABLE_YINGLING_NOTIFY = 18,
  MSG_ACTION_TELEPORT = 19,
  MSG_ACTION_FIGHT_MONSTER_REQUEST = 20,
  MSG_ACTION_LEAVE_FIGHT = 21,
  MSG_ACTION_GET_PLAYER_VIEW = 22,
  MSG_ACTION_ENTER_MAP = 23,
  MSG_ACTION_TRANSPORT = 24,
  MSG_ACTION_OPEN_DEPOT = 25,
  MSG_ACTION_ENTER_INSTANCE = 26,
  MSG_ACTION_LEAVE_INSTANCE = 27,
  MSG_ACTION_LIST_PASS_INSTANCE = 28,
  MSG_ACTION_GET_INSTANCE_DETAIL = 29,
  MSG_ACTION_GET_SKILL_LIST = 30,
  MSG_ACTION_GET_ITEM_LIST = 31,
  MSG_ACTION_GET_LINEUP_DETAIL = 32,
  MSG_ACTION_GET_EQUIP_DETAIL = 33,
  MSG_ACTION_GET_LINEUP_LIST = 34,
  MSG_ACTION_SKIP_FIGHT = 35,
  MSG_ACTION_GET_INSTANCE_ITEM = 36,
  MSG_ACTION_EQUIP_SKILL = 38,
  MSG_ACTION_PRACTICE_SKILL = 39,
  MSG_ACTION_STOP_PRACTICE_SKILL = 40,
  MSG_ACTION_INJECT_SKILL_EXP = 41,
  MSG_ACTION_UNLOAD_SKILL = 43,
  MSG_ACTION_LINE_UP_OPERATION = 44,
  MSG_ACTION_GET_BATTLE_SKILL_LIST = 45,
  MSG_ACTION_FIGHT_RESULT_NOTIFY = 46,
  MSG_ACTION_EXPAND_STORAGE = 47,
  MSG_ACTION_REORDER_ITEM = 48,
  MSG_ACTION_DESTROY_ITEM = 49,
  MSG_ACTION_BUY_ITEM = 50,
  MSG_ACTION_SELL_ITEM = 51,
  MSG_ACTION_BUYBACK_ITEM = 52,
  MSG_ACTION_GET_BUYBACK_LIST = 53,
  MSG_ACTION_PLACE_ITEM = 54,
  MSG_ACTION_USE_ITEM = 55,
  MSG_ACTION_EQUIP_ITEM = 56,
  MSG_ACTION_SWAP_ITEM = 57,
  MSG_ACTION_TAKE_GIFT = 58,
  MSG_ACTION_EXCHANGE_ITEM = 59,
  MSG_ACTION_QUEST_LIST = 60,
  MSG_ACTION_QUEST_ACCEPT_QUEST = 61,
  MSG_ACTION_QUEST_FINISH_QUEST = 62,
  MSG_ACTION_QUEST_CANCEL_QUEST = 63,
  MSG_ACTION_QUEST_DO_ACTION = 64,
  MSG_ACTION_GET_ONLINE_TIME_REQUEST = 65,
  MSG_ACTION_GET_INSTANCE_WANTED_LIST_INFO = 66,
  MSG_ACTION_INSTANCE_WANTED_ONCE = 67,
  MSG_ACTION_FAST_INSTANCE_WANTED = 68,
  MSG_ACTION_XUNLUO_QUEST = 69,
  MSG_ACTION_CREATE_TEAM = 70,
  MSG_ACTION_SEARCH_TEAM = 71,
  MSG_ACTION_TEAM_LINEUP_SET = 72,
  MSG_ACTION_TEAM_SETTING_MODIFY = 73,
  MSG_ACTION_TEAM_OPERATION = 74,
  MSG_ACTION_APPLY_JOIN_TEAM = 75,
  MSG_ACTION_APPLY_JOIN_TEAM_REPLY = 76,
  MSG_ACTION_INVITE_JOIN_TEAM = 77,
  MSG_ACTION_INVITE_JOIN_TEAM_REPLY = 78,
  MSG_ACTION_GET_TEAM_DETAIL_INFO = 79,
  MSG_ACTION_RECRUIT_TEAM_MEMBER = 80,
  MSG_ACTION_APPLY_JOIN_TEAM_LIST_NOTIFY = 81,
  MSG_ACTION_TEAM_INFO_UPDATE = 82,
  MSG_ACTION_INVITE_JOIN_TEAM_NOTIFY = 83,
  MSG_ACTION_INVITE_JOIN_TEAM_REPLY_NOTIFY = 84,
  MSG_ACTION_TEAM_PLAYER_KICKED_OUT_NOTIFY = 85,
  MSG_ACTION_AUTO_FIGHT = 86,
  MSG_ACTION_SPEED_UP_AUTO_FIGHT = 87,
  MSG_ACTION_STOP_AUTO_FIGHT = 88,
  MSG_ACTION_CHOOSE_AUTO_FIGHT_NPC = 89,
  MSG_ACTION_MONEY_UPDATE_NOTIFY = 90,
  MSG_ACTION_EQUIP_UPDATE_NOTIFY = 92,
  MSG_ACTION_EXP_UPDATE_NOTIFY = 93,
  MSG_ACTION_GET_LINE_UP_FIGHT_CAPACITY = 94,
  MSG_ACTION_GET_BUDDY_TEMPLATE_ATTRIBUTE = 95,
  MSG_ACTION_INSTANCE_WANTED_ALL_RESET = 96,
  MSG_ACTION_INSTANCE_WANTED_RESET_COST = 97,
  MSG_ACTION_PLAYER_CHAT = 100,
  MSG_ACTION_BROADCAST_PLAYER_LOGIN = 101,
  MSG_ACTION_BROADCAST_PLAYER_LOGOUT = 102,
  MSG_ACTION_BROADCAST_MOVE_START = 103,
  MSG_ACTION_BROADCAST_ENTER_VIEW = 104,
  MSG_ACTION_BROADCAST_LEAVE_VIEW = 105,
  MSG_ACTION_BROADCAST_GAME_STATUS = 106,
  MSG_ACTION_PRACTICE_SKILL_NOTIFIY = 107,
  MSG_ACTION_LEVEL_UP = 108,
  MSG_ACTION_UPDATE_BATTLE_SKILL = 109,
  MSG_ACTION_CHANGE_MAP = 110,
  MSG_ACTION_UPDATE_SKILL = 111,
  MSG_ACTION_PASS_INSTANCE_NOTIFY = 112,
  MSG_ACTION_SERVER_STATUS = 113,
  MSG_ACTION_INJECT_SOUL = 115,
  MSG_ACTION_BUDDY_CHANLLENGE_SPACETIME = 116,
  MSG_ACTION_BUDDY_SPACETIME_STATUS = 117,
  MSG_ACTION_BUDDY_SOUL_UPDATE = 118,
  MSG_ACTION_FOLLOW_BUDDY = 119,
  MSG_ACTION_EQUIP_SHENGXING_OPEN = 120,
  MSG_ACTION_EQUIP_SHENGXING = 121,
  MSG_ACTION_EQUIP_XILIAN_LOCK = 122,
  MSG_ACTION_EQUIP_XILIAN = 123,
  MSG_ACTION_OPEN_MONSTER_EXP_BUFF = 124,
  MSG_ACTION_TAKE_MONSTER_EXP_BUFF = 125,
  MSG_ACTION_TEAM_MEMBER_OPEN_MONSTER_EXP_BUFF_NOTIFY = 500,
  MSG_ACTION_SEND_FIGHT_TO_WORLD = 126,
  MSG_ACTION_GET_FIGHT_DATA = 127,
  MSG_ACTION_FIGHT_RESULT_BROADCAST = 501,
  MSG_ACTION_GET_GUILD_SKILL_LIST = 128,
  MSG_ACTION_GUILD_RESEARCH_SKILL = 129,
  MSG_ACTION_GUILD_LEARN_SKILL = 132,
  MSG_ACTION_GUILD_SKILL_RESEARCH_FINISH_NOTIFY = 508,
  MSG_ACTION_BUDDY_LIST_NOTIFY = 130,
  MSG_ACTION_BAG_ITEMS_NOTIFY = 131,
  MSG_ACTION_GET_MAIL_LIST = 134,
  MSG_ACTION_UPDATE_MAIL = 135,
  MSG_ACTION_NEW_MAIL_NOTIFY = 136,
  MSG_ACTION_ADD_BLACKLIST = 137,
  MSG_ACTION_DELETE_BLACKLIST = 138,
  MSG_ACTION_GET_BLACKLIST = 139,
  MSG_ACTION_TALK_CHANNEL = 140,
  MSG_ACTION_TALK_PLAYER = 141,
  MSG_ACTION_CHANNEL_MESSAGE_NOTIFY = 142,
  MSG_ACTION_PLAYER_MESSAGE_NOTIFY = 143,
  MSG_ACTION_APPLY_FRIEND = 144,
  MSG_ACTION_ANSWER_FRIEND = 145,
  MSG_ACTION_DELETE_FRIEND = 146,
  MSG_ACTION_GET_FRIEND_LIST = 147,
  MSG_ACTION_GET_CONTACT_LIST = 148,
  MSG_ACTION_FRIEND_STATUS_NOTIFY = 149,
  MSG_ACTION_GET_ARENA_INFO = 150,
  MSG_ACTION_UPDATE_ARENA_INFO_NOTIFY = 151,
  MSG_ACTION_CHALLENGE_PLAYER = 152,
  MSG_ACTION_TAKE_TREASURE_BOX = 155,
  MSG_ACTION_GET_ARENA_RANK_LIST = 156,
  MSG_ACTION_ACT_LUCKY_ONCE = 157,
  MSG_ACTION_TAKE_TIME_BONUS = 158,
  MSG_ACTION_ACT_EXCHANGE_ITEM = 159,
  MSG_ACTION_HIRED_YINGLING_SLOT = 160,
  MSG_ACTION_ENTER_PVP = 161,
  MSG_ACTION_LEAVE_PVP = 162,
  MSG_ACTION_GET_PVP_INFO = 163,
  MSG_ACTION_CLEAR_PVP_CD = 164,
  MSG_ACTION_PVP_ACT_NOTIFY = 513,
  MSG_ACTION_PVP_ROBOT_NOTIFY = 514,
  MSG_ACTION_PVP_CD = 515,
  MSG_ACTION_PVP_BONUS = 516,
  MSG_ACTION_GET_LINGLI = 165,
  MSG_ACTION_CONVERT_LINGLI = 166,
  MSG_ACTION_TAKE_PVP_GIFT = 167,
  MSG_ACTION_GET_DAILY_QUEST = 170,
  MSG_ACTION_GENERATE_DAILY_QUEST = 171,
  MSG_ACTION_GET_COOL_DOWN = 175,
  MSG_ACTION_CLEAR_COOL_DOWN = 176,
  MSG_ACTION_UPDATE_COOL_DOWN = 177,
  MSG_ACTION_GET_LIMIT_COUNT = 180,
  MSG_ACTION_PURCHASE_LIMIT_COUNT = 181,
  MSG_ACTION_UPDATE_LIMIT_COUNT = 182,
  MSG_ACTION_EXCHANGE_CODE = 185,
  MSG_ACTION_PLAYER_FLAGS = 190,
  MSG_ACTION_SET_PLAYER_FLAG = 191,
  MSG_ACTION_RANDOM_NAME = 192,
  MSG_ACTION_PLAYER_HIDE_NPC = 193,
  MSG_ACTION_START_COLLECT = 195,
  MSG_ACTION_FINISH_COLLECT = 196,
  MSG_ACTION_ADD_PLAYER_REQUEST = 200,
  MSG_ACTION_ADD_PLAYER_RESPONSE = 201,
  MSG_ACTION_ERROR_NOTIFY = 202,
  MSG_ACTION_BUY_VIP = 203,
  MSG_ACTION_SYNC_TEAM_INFO = 204,
  MSG_FUNCTION_LIMIT = 205,
  MSG_ACTION_GET_DAILY_GIFT_INFO = 206,
  MSG_ACTION_APPLY_DAILY_GIFT = 207,
  MSG_ACTION_GET_STACKABLE_ONLINE_GIFT_INFO = 208,
  MSG_ACTION_APPLY_STACKABLE_ONLINE_GIFT = 209,
  MSG_ACTION_CREATE_GUILD = 211,
  MSG_ACTION_DELETE_GUILD = 212,
  MSG_ACTION_GET_GUILD_LIST = 213,
  MSG_ACTION_GET_GUILD_DETAIL = 214,
  MSG_ACTION_APPLY_JOIN_GUILD = 215,
  MSG_ACTION_ANSWER_JOIN_GUILD = 216,
  MSG_ACTION_INVITE_JOIN_GUILD = 217,
  MSG_ACTION_REPLY_JOIN_GUILD = 218,
  MSG_ACTION_DELETE_GUILD_MEMBER = 219,
  MSG_ACTION_GET_GUILD_MEMBER_LIST = 220,
  MSG_ACTION_SET_MEMBER_TITLE = 221,
  MSG_ACTION_GUILD_MEMBER_NOTIFY = 222,
  MSG_ACTION_SET_GUILD_NOTICE = 223,
  MSG_ACTION_GET_GUILD_INVITE_LIST = 224,
  MSG_ACTION_GET_GUILD_APPLY_LIST = 225,
  MSG_ACTION_ENTER_GUILD_MAP = 226,
  MSG_ACTION_LEAVE_GUILD_MAP = 227,
  MSG_ACTION_UPGRADE_GUILD = 228,
  MSG_ACTION_BUY_GUILD_ITEM = 229,
  MSG_ACTION_GET_GUILD_MAP_INFO = 230,
  MSG_ACTION_GET_GUILD_DONATE_LIST = 231,
  MSG_ACTION_GET_GUILD_INFO = 232,
  MSG_ACTION_UPDATE_BIT = 239,
  MSG_ACTION_GET_LIVENESS_INFO = 240,
  MSG_ACTION_TAKE_LIVENESS_AWARD = 241,
  MSG_ACTION_LIVENESS_UPDAE_NOTIFY = 242,
  MSG_ACTION_GET_PLAYER_CONFIG = 243,
  MSG_ACTION_SET_PLAYER_CONFIG = 244,
  MSG_ACTION_ALIEN_BOSS_ACT_NOTIFY = 509,
  MSG_ACTION_ALIEN_BOSS_HURT_RANK = 510,
  MSG_ACTION_ALIEN_BOSS_REWARDS = 511,
  MSG_ACTION_UPDATE_BOSS_BUFF = 512,
  MSG_ACTION_ENCOURAGE_BUFF = 245,
  MSG_ACTION_QUICK_RESPAWN = 246,
  MSG_ACTION_ENTER_ALIEN_BOSS_MAP = 247,
  MSG_ACTION_LEAVE_ALIEN_BOSS_MAP = 248,
  MSG_ACTION_GET_BOSS_MAP_INFO = 249,
  MSG_ACTION_EQUIP_INHERIT = 251,
  MSG_ACTION_GEM_UPGRADE = 252,
  MSG_ACTION_GEM_INSERT = 253,
  MSG_ACTION_GEM_REMOVE = 254,
  MSG_ACTION_MAKE_SOCKET = 255,
  MSG_ACTION_DIRECT_FINISH_QUEST = 256,
  MSG_ACTION_FIGHT_WITH_OTHER_PLAYER = 260,
  MSG_ACTION_SEND_FIGHT_INVITATION = 502,
  MSG_ACTION_FIGHT_INVITE_REPLY = 261,
  MSG_ACTION_SPEED_UP_PRACTICE_SKILL = 262,
  MSG_ACTION_CRYSTAL_TOWER_ACTIVITY = 265,
  MSG_ACTION_CRYSTAL_TOWER_PICK_REWARD = 266,
  MSG_ACTION_GUILD_DONATE = 267,
  MSG_ACTION_CRYSTAL_TOWER_ACTIVITY_STATUS = 268,
  MSG_ACTION_STARTUP_ACTIVITIES_STATUS = 270,
  MSG_ACTION_AUTO_REFRESH_HIRABLE_YINGLING = 271,
  MSG_ACTION_YOULI_MAP_DATA = 272,
  MSG_ACTION_YOULI_MAP_DICE = 273,
  MSG_ACTION_YOULI_MAP_RESET_MAP = 274,
  MSG_ACTION_UPGRADE_BATTLE_SKILL = 275,
  MSG_ACTION_UPDATE_YOULI_NOTIFY = 276,
  MSG_ACTION_CHECK_GUILD_XUNHUAN_QUEST = 277,
  MSG_ACTION_ENTER_GUILD_WAR_MAP = 278,
  MSG_ACTION_LEAVE_GUILD_WAR_MAP = 279,
  MSG_ACTION_GET_GUILD_WAR_MAP_INFO = 280,
  MSG_ACTION_GUILD_WAR_NOTIFY = 517,
  MSG_ACTION_GUILD_WAR_SCHEDULE = 518,
  MSG_ACTION_GUILD_WAR_ADD_BUFF = 281,
  MSG_ACTION_GUILD_WAR_CONTRIBUTION_RANK = 282,
  MSG_ACTION_TREASURE_BOX_BONUS = 283,
  MSG_ACTION_GET_AUTO_INSTANCE_STATUS = 284,
  MSG_ACTION_START_AUTO_FIGHT_INSTANCE = 285,
  MSG_ACTION_STOP_AUTO_FIGHT_INSTANCE = 286,
  MSG_ACTION_FINISH_AUTO_FIGHT_INSTANCE = 288,
  MSG_ACTION_AUTO_FIGHT_INSTANCE_NOTIFY = 289,
  MSG_ACTION_GUILD_WAR_COMPETITION_INFO = 287,
  MSG_ACTION_GET_OPENED_ACTIVITY = 290,
  MSG_ACTION_ACTIVITY_MANAGER_NOTIFY = 519,
  MSG_ACTION_PUBLISH_QUSETION = 504,
  MSG_ACTION_SEND_QA_RESULT = 505,
  MSG_ACTION_UPDATE_PHY_STRENGTH = 506,
  MSG_ACTION_ARENA_RECENT_MSGS_NOTIFY = 507,
  MSG_ACTION_FIGHT_INVITE_REPLY_NOTIFY = 503,
  MSG_ACTION_TIME_BONUS_NOTIFY = 300,
  MSG_ACTION_ARENA_SELF_NOTICE = 301,
  MSG_ACTION_ARENA_PUBLIC_NOTICE = 302,
  MSG_ACTION_SYSTEM_NOTICE = 303,
  MSG_ACTION_GUILD_INFO = 309,
  MSG_ACTION_VIP_INFO = 310,
  MSG_ACTION_ANNOUNCE = 312,
  MSG_ACTION_SKILL_POOL_CHANGE_NOTIFY = 313,
  MSG_ACTION_SERVER_SHUT_DOWN_NOTIFY = 314,
  MSG_ACTION_UPDATE_MONSTER_BUFF = 315,
  MSG_ACTION_TEAM_CHANNEL_MEMBER_NOTIFY = 316,
  MSG_ACTION_ATTR_CHANGE_NOTIFY = 317,
  MSG_ACTION_GUILD_CRYSTAL_TOWER_NOTIFY = 318,
  MSG_ACTION_GET_TITLE_LIST = 319,
  MSG_ACTION_SET_ROLE_TITLE = 320,
  MSG_ACTION_YINGLING_COMBO = 321,
  MSG_ACTION_YINGLING_COMBO_UPGRADE = 322,
  MSG_ACTION_GET_OFFLINE_GIFT = 323,
  MSG_ACTION_GET_TRAIN = 324,
  MSG_ACTION_TRAIN = 325,
  MSG_ACTION_TRAIN_SAVE = 326,
  MSG_ACTION_PRACTICE_EXP = 327,
  MSG_ACTION_SOUL_EXCHANGE = 328,
  MSG_ACTION_HIT_YELLOW_DUCK = 333,
  MSG_ACTION_UNEQUIP_ALL = 338,
  MSG_ACTION_YOULI_MAP_AUTO_DICE = 339,
  MSG_ACTION_ROOM_INFO_UPDATE = 345,
  MSG_ACTION_ROOM_INVITE_NTF = 346,
  MSG_ACTION_LOBBY_PLAYER_LIST = 347,
  MSG_ACTION_ROOM_INVITE_PLAYER = 348,
  MSG_ACTION_QUIRE_PASS_TEAM_GEN_INFO = 349,
  MSG_ACTION_ENTER_PASS_ROOM = 350,
  MSG_ACTION_CREATE_ROOM = 351,
  MSG_ACTION_OPERATE_ROOM = 352,
  MSG_ACTION_PLAYER_KICK_NTF = 353,
  MSG_ACTION_ROOM_START_INSTANCE = 354,
  MSG_ACTION_WING_SYSTEM = 520
};
bool MessageAction_IsValid(int value);
const MessageAction MessageAction_MIN = MSG_ACTION_ACC_LOGIN;
const MessageAction MessageAction_MAX = MSG_ACTION_WING_SYSTEM;
const int MessageAction_ARRAYSIZE = MessageAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageAction_descriptor();
inline const ::std::string& MessageAction_Name(MessageAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageAction_descriptor(), value);
}
inline bool MessageAction_Parse(
    const ::std::string& name, MessageAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageAction>(
    MessageAction_descriptor(), name, value);
}
enum AttrChangeType {
  AttrChangeType_LineupCapacity = 1
};
bool AttrChangeType_IsValid(int value);
const AttrChangeType AttrChangeType_MIN = AttrChangeType_LineupCapacity;
const AttrChangeType AttrChangeType_MAX = AttrChangeType_LineupCapacity;
const int AttrChangeType_ARRAYSIZE = AttrChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttrChangeType_descriptor();
inline const ::std::string& AttrChangeType_Name(AttrChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttrChangeType_descriptor(), value);
}
inline bool AttrChangeType_Parse(
    const ::std::string& name, AttrChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttrChangeType>(
    AttrChangeType_descriptor(), name, value);
}
enum ARENA_SELF_NOTICE_TYPE {
  ARENA_CHALLENGE_WIN_WITH_RANK_CHANGE = 1,
  ARENA_CHALLENGE_WIN_WITH_RANK_NO_CHANGE = 2,
  ARENA_CHALLENGE_LOSE = 3,
  ARENA_ATTACKED_WIN = 4,
  ARENA_ATTACKED_LOSE_WITH_RANK_CHANGE = 5,
  ARENA_ATTACKED_LOST_WITH_RANK_NO_CHANGE = 6
};
bool ARENA_SELF_NOTICE_TYPE_IsValid(int value);
const ARENA_SELF_NOTICE_TYPE ARENA_SELF_NOTICE_TYPE_MIN = ARENA_CHALLENGE_WIN_WITH_RANK_CHANGE;
const ARENA_SELF_NOTICE_TYPE ARENA_SELF_NOTICE_TYPE_MAX = ARENA_ATTACKED_LOST_WITH_RANK_NO_CHANGE;
const int ARENA_SELF_NOTICE_TYPE_ARRAYSIZE = ARENA_SELF_NOTICE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ARENA_SELF_NOTICE_TYPE_descriptor();
inline const ::std::string& ARENA_SELF_NOTICE_TYPE_Name(ARENA_SELF_NOTICE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ARENA_SELF_NOTICE_TYPE_descriptor(), value);
}
inline bool ARENA_SELF_NOTICE_TYPE_Parse(
    const ::std::string& name, ARENA_SELF_NOTICE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ARENA_SELF_NOTICE_TYPE>(
    ARENA_SELF_NOTICE_TYPE_descriptor(), name, value);
}
enum ARENA_PUBLIC_NOTICE_TYPE {
  ARENA_RANK_TOP_3 = 1,
  ARENA_RANK_TOP_50 = 2,
  ARENA_CONT_WIN = 3
};
bool ARENA_PUBLIC_NOTICE_TYPE_IsValid(int value);
const ARENA_PUBLIC_NOTICE_TYPE ARENA_PUBLIC_NOTICE_TYPE_MIN = ARENA_RANK_TOP_3;
const ARENA_PUBLIC_NOTICE_TYPE ARENA_PUBLIC_NOTICE_TYPE_MAX = ARENA_CONT_WIN;
const int ARENA_PUBLIC_NOTICE_TYPE_ARRAYSIZE = ARENA_PUBLIC_NOTICE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ARENA_PUBLIC_NOTICE_TYPE_descriptor();
inline const ::std::string& ARENA_PUBLIC_NOTICE_TYPE_Name(ARENA_PUBLIC_NOTICE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ARENA_PUBLIC_NOTICE_TYPE_descriptor(), value);
}
inline bool ARENA_PUBLIC_NOTICE_TYPE_Parse(
    const ::std::string& name, ARENA_PUBLIC_NOTICE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ARENA_PUBLIC_NOTICE_TYPE>(
    ARENA_PUBLIC_NOTICE_TYPE_descriptor(), name, value);
}
enum PUBLIC_NOTICE_TYPE {
  SYSTEM_PUBLIC_NOTICE = 0
};
bool PUBLIC_NOTICE_TYPE_IsValid(int value);
const PUBLIC_NOTICE_TYPE PUBLIC_NOTICE_TYPE_MIN = SYSTEM_PUBLIC_NOTICE;
const PUBLIC_NOTICE_TYPE PUBLIC_NOTICE_TYPE_MAX = SYSTEM_PUBLIC_NOTICE;
const int PUBLIC_NOTICE_TYPE_ARRAYSIZE = PUBLIC_NOTICE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PUBLIC_NOTICE_TYPE_descriptor();
inline const ::std::string& PUBLIC_NOTICE_TYPE_Name(PUBLIC_NOTICE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PUBLIC_NOTICE_TYPE_descriptor(), value);
}
inline bool PUBLIC_NOTICE_TYPE_Parse(
    const ::std::string& name, PUBLIC_NOTICE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PUBLIC_NOTICE_TYPE>(
    PUBLIC_NOTICE_TYPE_descriptor(), name, value);
}
enum Profession {
  WIZARD = 1,
  ARCHER = 2,
  SWORDMAN = 3
};
bool Profession_IsValid(int value);
const Profession Profession_MIN = WIZARD;
const Profession Profession_MAX = SWORDMAN;
const int Profession_ARRAYSIZE = Profession_MAX + 1;

const ::google::protobuf::EnumDescriptor* Profession_descriptor();
inline const ::std::string& Profession_Name(Profession value) {
  return ::google::protobuf::internal::NameOfEnum(
    Profession_descriptor(), value);
}
inline bool Profession_Parse(
    const ::std::string& name, Profession* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Profession>(
    Profession_descriptor(), name, value);
}
enum Gender {
  MALE = 1,
  FEMALE = 2
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = MALE;
const Gender Gender_MAX = FEMALE;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum GameStatus {
  GS_OFFLINE = 0,
  GS_ONLINE = 1,
  GS_FIGHTING = 2
};
bool GameStatus_IsValid(int value);
const GameStatus GameStatus_MIN = GS_OFFLINE;
const GameStatus GameStatus_MAX = GS_FIGHTING;
const int GameStatus_ARRAYSIZE = GameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameStatus_descriptor();
inline const ::std::string& GameStatus_Name(GameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameStatus_descriptor(), value);
}
inline bool GameStatus_Parse(
    const ::std::string& name, GameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameStatus>(
    GameStatus_descriptor(), name, value);
}
enum AccountStatus {
  AccountStatus_BANNED = -1,
  AccountStatus_DEFAULT = 0,
  AccountStatus_FIRST_LOGINED = 1,
  AccountStatus_CREATING_ROLE = 2,
  AccountStatus_CREATED_ROLE = 3
};
bool AccountStatus_IsValid(int value);
const AccountStatus AccountStatus_MIN = AccountStatus_BANNED;
const AccountStatus AccountStatus_MAX = AccountStatus_CREATED_ROLE;
const int AccountStatus_ARRAYSIZE = AccountStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor();
inline const ::std::string& AccountStatus_Name(AccountStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountStatus_descriptor(), value);
}
inline bool AccountStatus_Parse(
    const ::std::string& name, AccountStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountStatus>(
    AccountStatus_descriptor(), name, value);
}
enum LEVEL_UP_TYPE {
  ROLE_LEVEL_UP = 1,
  ROLE_PROFESSION_LEVEL_UP = 2,
  SERVENT_LEVEL_UP = 3,
  SKILL_LEVEL_UP = 4,
  BATTLE_SKILL_LEVEL_UP = 5
};
bool LEVEL_UP_TYPE_IsValid(int value);
const LEVEL_UP_TYPE LEVEL_UP_TYPE_MIN = ROLE_LEVEL_UP;
const LEVEL_UP_TYPE LEVEL_UP_TYPE_MAX = BATTLE_SKILL_LEVEL_UP;
const int LEVEL_UP_TYPE_ARRAYSIZE = LEVEL_UP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* LEVEL_UP_TYPE_descriptor();
inline const ::std::string& LEVEL_UP_TYPE_Name(LEVEL_UP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    LEVEL_UP_TYPE_descriptor(), value);
}
inline bool LEVEL_UP_TYPE_Parse(
    const ::std::string& name, LEVEL_UP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LEVEL_UP_TYPE>(
    LEVEL_UP_TYPE_descriptor(), name, value);
}
enum PRACTICE_MODE {
  NORMAL_PRACTICE = 1,
  EXPERT_PRACTICE = 2,
  SHURA_PRACTICE = 3
};
bool PRACTICE_MODE_IsValid(int value);
const PRACTICE_MODE PRACTICE_MODE_MIN = NORMAL_PRACTICE;
const PRACTICE_MODE PRACTICE_MODE_MAX = SHURA_PRACTICE;
const int PRACTICE_MODE_ARRAYSIZE = PRACTICE_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PRACTICE_MODE_descriptor();
inline const ::std::string& PRACTICE_MODE_Name(PRACTICE_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PRACTICE_MODE_descriptor(), value);
}
inline bool PRACTICE_MODE_Parse(
    const ::std::string& name, PRACTICE_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PRACTICE_MODE>(
    PRACTICE_MODE_descriptor(), name, value);
}
enum PAY_FUNCTION_TYPE {
  PAY_FUNCTION_SKIP_FIGHT = 1,
  PAY_FUNCTION_UNLOCK_BAG = 2,
  PAY_FUNCTION_DICE_MAP_DIAMOND = 3,
  PAY_FUNCTION_DICE_MAP_NORMAL = 4,
  PAY_FUNCTION_FAST_DICE_MAP_NORMAL = 5,
  PAY_FUNCTION_FAST_DICE_MAP_DIAMOND = 6,
  PAY_FUNCTION_FAST_AUTO_INSTANCE_UNIT_PRICE = 7
};
bool PAY_FUNCTION_TYPE_IsValid(int value);
const PAY_FUNCTION_TYPE PAY_FUNCTION_TYPE_MIN = PAY_FUNCTION_SKIP_FIGHT;
const PAY_FUNCTION_TYPE PAY_FUNCTION_TYPE_MAX = PAY_FUNCTION_FAST_AUTO_INSTANCE_UNIT_PRICE;
const int PAY_FUNCTION_TYPE_ARRAYSIZE = PAY_FUNCTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PAY_FUNCTION_TYPE_descriptor();
inline const ::std::string& PAY_FUNCTION_TYPE_Name(PAY_FUNCTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PAY_FUNCTION_TYPE_descriptor(), value);
}
inline bool PAY_FUNCTION_TYPE_Parse(
    const ::std::string& name, PAY_FUNCTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PAY_FUNCTION_TYPE>(
    PAY_FUNCTION_TYPE_descriptor(), name, value);
}
enum ENUM_ATTR {
  NONE = 0,
  HP = 1,
  MAX_HP = 2,
  STA = 3,
  STRENGTH = 4,
  TECHNIQUE = 5,
  INTELLIGENCE = 6,
  SPIRIT = 7,
  AGILE = 8,
  PHY_ATTACK = 9,
  PHY_DEFENCE = 10,
  MAG_ATTACK = 11,
  MAG_DEFENCE = 12,
  PHY_AT_HIT = 13,
  MAG_AT_HIT = 14,
  PHY_CRITICAL = 15,
  PHY_CRITICAL_DEFENCE = 16,
  MAG_CRITICAL = 17,
  MAG_CRITICAL_DEFENCE = 18,
  PHY_AT_DODGE = 19,
  MAG_AT_DODGE = 20,
  PHY_AT_HIT_RATE = 21,
  MAG_AT_HIT_RATE = 22,
  PHY_CRITICAL_RATE = 23,
  PHY_CRITICAL_DEFENCE_RATE = 24,
  MAG_CRITICAL_RATE = 25,
  MAG_CRITICAL_DEFENCE_RATE = 26,
  PHY_AT_DODGE_RATE = 27,
  MAG_AT_DODGE_RATE = 28,
  SPEED = 29,
  FIRE_RESISTANCE = 30,
  ICE_RESISTANCE = 31,
  SHOCK_RESISTANCE = 32,
  FIRE_DAMAGE_INCREASE = 33,
  ICE_DAMAGE_INCREASE = 34,
  SHOCK_DAMAGE_INCREASE = 35,
  PHY_DAMAGE_REDUCTION_RATE = 36,
  PHY_CRI_MULTI_RATE = 37,
  MAG_CRI_MULTI_RATE = 38,
  MAG_COMBO_RATE = 39,
  COUNTER_ATTACK_RATE = 40,
  DAMAGE_REBOUND_RATE = 41,
  BLOOD_SUCK = 42,
  MAX_HP_PERCENT = 43,
  PHY_ATTACK_PERCENT = 44,
  MAG_ATTACK_PERCENT = 45,
  PHY_DEFENCE_PERCENT = 46,
  MAG_DEFENCE_PERCENT = 47,
  SPEED_PERCENT = 48,
  STRENGTH_PERCENT = 49,
  STA_PERCENT = 50,
  INTELLIGENCE_PERCENT = 51,
  SPIRIT_PERCENT = 52,
  TECHNIQUE_PERCENT = 53,
  AGILE_PERCENT = 54,
  TOTAL_MAX_HP_PERCENT = 56,
  TOTAL_PHY_ATTACK_PERCENT = 57,
  TOTAL_MAG_ATTACK_PERCENT = 58,
  TOTAL_PHY_DEFENCE_PERCENT = 59,
  TOTAL_MAG_DEFENCE_PERCENT = 60,
  EXTRA_CURE_EFFECT = 62,
  EXTRA_FIRE_DAMAGE = 70,
  EXTRA_ICE_DAMAGE = 71,
  EXTRA_SHOCK_DAMAGE = 72,
  EXTRA_PHYSIC_DAMAGE = 73,
  STUN = 80,
  SILENCE = 81,
  SLEEP = 82,
  FROZEN = 83,
  DAMAGE_APPEND_PERCENT = 91,
  ENUM_ATTR_NUMBER = 92
};
bool ENUM_ATTR_IsValid(int value);
const ENUM_ATTR ENUM_ATTR_MIN = NONE;
const ENUM_ATTR ENUM_ATTR_MAX = ENUM_ATTR_NUMBER;
const int ENUM_ATTR_ARRAYSIZE = ENUM_ATTR_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENUM_ATTR_descriptor();
inline const ::std::string& ENUM_ATTR_Name(ENUM_ATTR value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENUM_ATTR_descriptor(), value);
}
inline bool ENUM_ATTR_Parse(
    const ::std::string& name, ENUM_ATTR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENUM_ATTR>(
    ENUM_ATTR_descriptor(), name, value);
}
enum SKIP_FIGHT_TYPE {
  QUICK_SKIP_FIGHT = 1,
  FREE_SKIP_FIGHT = 2,
  PAY_SKIP_FIGHT = 3
};
bool SKIP_FIGHT_TYPE_IsValid(int value);
const SKIP_FIGHT_TYPE SKIP_FIGHT_TYPE_MIN = QUICK_SKIP_FIGHT;
const SKIP_FIGHT_TYPE SKIP_FIGHT_TYPE_MAX = PAY_SKIP_FIGHT;
const int SKIP_FIGHT_TYPE_ARRAYSIZE = SKIP_FIGHT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SKIP_FIGHT_TYPE_descriptor();
inline const ::std::string& SKIP_FIGHT_TYPE_Name(SKIP_FIGHT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SKIP_FIGHT_TYPE_descriptor(), value);
}
inline bool SKIP_FIGHT_TYPE_Parse(
    const ::std::string& name, SKIP_FIGHT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SKIP_FIGHT_TYPE>(
    SKIP_FIGHT_TYPE_descriptor(), name, value);
}
enum FIGHT_TYPE {
  NORMAL_FIGHT_MONSTER = 1,
  INSTANCE_FIGHT_MONSTER = 2,
  INSTANCE_FIGHT_BOSS = 5,
  CHALLENGE_SOUL_YINGLING = 3,
  CHALLENGE_PLAYER = 4,
  FIGHT_OTHER_PLAYER_OR_TEAM = 6,
  FIGHT_RANDOM_MONSTER = 7,
  FIGHT_ALIEN_BOSS = 8,
  FIGHT_GUILD_BOSS = 9,
  FIGHT_PVP_PLAYER = 10,
  FIGHT_PVP_ROBOT = 11,
  FIGHT_GUILD_WAR_BOSS = 12,
  FIGHT_GUILD_WAR_PLAYER_OR_TEAM = 13
};
bool FIGHT_TYPE_IsValid(int value);
const FIGHT_TYPE FIGHT_TYPE_MIN = NORMAL_FIGHT_MONSTER;
const FIGHT_TYPE FIGHT_TYPE_MAX = FIGHT_GUILD_WAR_PLAYER_OR_TEAM;
const int FIGHT_TYPE_ARRAYSIZE = FIGHT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* FIGHT_TYPE_descriptor();
inline const ::std::string& FIGHT_TYPE_Name(FIGHT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    FIGHT_TYPE_descriptor(), value);
}
inline bool FIGHT_TYPE_Parse(
    const ::std::string& name, FIGHT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FIGHT_TYPE>(
    FIGHT_TYPE_descriptor(), name, value);
}
enum YinglingStatus {
  YinglingStatus_HOME = 0,
  YinglingStatus_HIRED = 1,
  YinglingStatus_FIRED = 2
};
bool YinglingStatus_IsValid(int value);
const YinglingStatus YinglingStatus_MIN = YinglingStatus_HOME;
const YinglingStatus YinglingStatus_MAX = YinglingStatus_FIRED;
const int YinglingStatus_ARRAYSIZE = YinglingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* YinglingStatus_descriptor();
inline const ::std::string& YinglingStatus_Name(YinglingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    YinglingStatus_descriptor(), value);
}
inline bool YinglingStatus_Parse(
    const ::std::string& name, YinglingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YinglingStatus>(
    YinglingStatus_descriptor(), name, value);
}
enum YinglingQuality {
  YinglingQuality_MYSEFL = 0,
  YinglingQuality_NOBODY = 1,
  YinglingQuality_CELEBRITY = 2,
  YinglingQuality_HERO = 3,
  YinglingQuality_LEGEND = 4,
  YinglingQuality_EPIC = 5
};
bool YinglingQuality_IsValid(int value);
const YinglingQuality YinglingQuality_MIN = YinglingQuality_MYSEFL;
const YinglingQuality YinglingQuality_MAX = YinglingQuality_EPIC;
const int YinglingQuality_ARRAYSIZE = YinglingQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* YinglingQuality_descriptor();
inline const ::std::string& YinglingQuality_Name(YinglingQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    YinglingQuality_descriptor(), value);
}
inline bool YinglingQuality_Parse(
    const ::std::string& name, YinglingQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YinglingQuality>(
    YinglingQuality_descriptor(), name, value);
}
enum RefreshYinglingListType {
  RefreshYinglingListType_NORMAL = 0,
  RefreshYinglingListType_JUNIOR = 1,
  RefreshYinglingListType_INTERMEDIATE = 2,
  RefreshYinglingListType_SENIOR = 3,
  RefreshYinglingListType_JUNIOR_YB = 4,
  RefreshYinglingListType_INTERMEDIATE_YB = 5,
  RefreshYinglingListType_SENIOR_YB = 6
};
bool RefreshYinglingListType_IsValid(int value);
const RefreshYinglingListType RefreshYinglingListType_MIN = RefreshYinglingListType_NORMAL;
const RefreshYinglingListType RefreshYinglingListType_MAX = RefreshYinglingListType_SENIOR_YB;
const int RefreshYinglingListType_ARRAYSIZE = RefreshYinglingListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RefreshYinglingListType_descriptor();
inline const ::std::string& RefreshYinglingListType_Name(RefreshYinglingListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RefreshYinglingListType_descriptor(), value);
}
inline bool RefreshYinglingListType_Parse(
    const ::std::string& name, RefreshYinglingListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RefreshYinglingListType>(
    RefreshYinglingListType_descriptor(), name, value);
}
enum AnnounceType {
  AnnounceType_GET_ITEM_BY_CLEAR_MISSION = 1,
  AnnounceType_GET_ITEM_BY_OPEN_GIFT = 2,
  AnnounceType_ARENA_TOP_3 = 3,
  AnnounceType_ARENA_CONT_WIN = 4,
  AnnounceType_ARENA_LOSE_CONT_WIN = 5,
  AnnounceType_ACT_EXCHANGE_YINGLING = 6,
  AnnounceType_STRENGTH_EQUIP = 101,
  AnnounceType_HIRE_YINGLING = 201,
  AnnounceType_CHALLENGE_SPACETIME_SELF = 301,
  AnnounceType_CHALLENGE_SPACETIME = 401,
  AnnounceType_INJECT_SOUL_SELF = 501,
  AnnounceType_INJECT_SOUL = 601,
  AnnounceType_CLEAR_MISSION = 701,
  AnnounceType_WING_SPIRIT = 702
};
bool AnnounceType_IsValid(int value);
const AnnounceType AnnounceType_MIN = AnnounceType_GET_ITEM_BY_CLEAR_MISSION;
const AnnounceType AnnounceType_MAX = AnnounceType_WING_SPIRIT;
const int AnnounceType_ARRAYSIZE = AnnounceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnnounceType_descriptor();
inline const ::std::string& AnnounceType_Name(AnnounceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnnounceType_descriptor(), value);
}
inline bool AnnounceType_Parse(
    const ::std::string& name, AnnounceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnnounceType>(
    AnnounceType_descriptor(), name, value);
}
enum ItemType {
  IT_EQUIPMENT = 1,
  IT_STONE = 2,
  IT_TRAESURE = 3,
  IT_SKILL_BOOK = 4,
  IT_EXP_BOOK = 5,
  IT_MISC = 6,
  IT_TASK = 7,
  IT_GIFT = 8,
  IT_YINGLING = 9,
  IT_CONSUMPTION = 10,
  IT_MONEY = 11,
  IT_VIP = 12,
  IT_LIMIT_COUNT = 13
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = IT_EQUIPMENT;
const ItemType ItemType_MAX = IT_LIMIT_COUNT;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum EquipPosition {
  ET_RING2 = 0,
  ET_HELMET = 1,
  ET_SHOULDER = 2,
  ET_ARMOUR = 3,
  ET_BELT = 4,
  ET_GLOVE = 5,
  ET_CUFF = 6,
  ET_SHOES = 7,
  ET_NECKLACE = 8,
  ET_RING = 9,
  ET_WEAPON = 10,
  ET_ASSIST = 11,
  ET_WING = 12,
  ET_END = 13
};
bool EquipPosition_IsValid(int value);
const EquipPosition EquipPosition_MIN = ET_RING2;
const EquipPosition EquipPosition_MAX = ET_END;
const int EquipPosition_ARRAYSIZE = EquipPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor();
inline const ::std::string& EquipPosition_Name(EquipPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipPosition_descriptor(), value);
}
inline bool EquipPosition_Parse(
    const ::std::string& name, EquipPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipPosition>(
    EquipPosition_descriptor(), name, value);
}
enum LINE_UP_OPERATION {
  CREATE = 1,
  MODIFY = 2,
  DELETE = 3
};
bool LINE_UP_OPERATION_IsValid(int value);
const LINE_UP_OPERATION LINE_UP_OPERATION_MIN = CREATE;
const LINE_UP_OPERATION LINE_UP_OPERATION_MAX = DELETE;
const int LINE_UP_OPERATION_ARRAYSIZE = LINE_UP_OPERATION_MAX + 1;

const ::google::protobuf::EnumDescriptor* LINE_UP_OPERATION_descriptor();
inline const ::std::string& LINE_UP_OPERATION_Name(LINE_UP_OPERATION value) {
  return ::google::protobuf::internal::NameOfEnum(
    LINE_UP_OPERATION_descriptor(), value);
}
inline bool LINE_UP_OPERATION_Parse(
    const ::std::string& name, LINE_UP_OPERATION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LINE_UP_OPERATION>(
    LINE_UP_OPERATION_descriptor(), name, value);
}
enum UPDATE_BATTLE_SKILL_TYPE {
  NEW_BATTLE_SKILL = 1,
  UPDATE_EXP = 2,
  UPDATE_LEVEL = 3
};
bool UPDATE_BATTLE_SKILL_TYPE_IsValid(int value);
const UPDATE_BATTLE_SKILL_TYPE UPDATE_BATTLE_SKILL_TYPE_MIN = NEW_BATTLE_SKILL;
const UPDATE_BATTLE_SKILL_TYPE UPDATE_BATTLE_SKILL_TYPE_MAX = UPDATE_LEVEL;
const int UPDATE_BATTLE_SKILL_TYPE_ARRAYSIZE = UPDATE_BATTLE_SKILL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* UPDATE_BATTLE_SKILL_TYPE_descriptor();
inline const ::std::string& UPDATE_BATTLE_SKILL_TYPE_Name(UPDATE_BATTLE_SKILL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    UPDATE_BATTLE_SKILL_TYPE_descriptor(), value);
}
inline bool UPDATE_BATTLE_SKILL_TYPE_Parse(
    const ::std::string& name, UPDATE_BATTLE_SKILL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UPDATE_BATTLE_SKILL_TYPE>(
    UPDATE_BATTLE_SKILL_TYPE_descriptor(), name, value);
}
enum MONEY_TYPE {
  MT_COIN = 1,
  MT_COUPON = 2,
  MT_DIAMOND = 3
};
bool MONEY_TYPE_IsValid(int value);
const MONEY_TYPE MONEY_TYPE_MIN = MT_COIN;
const MONEY_TYPE MONEY_TYPE_MAX = MT_DIAMOND;
const int MONEY_TYPE_ARRAYSIZE = MONEY_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor();
inline const ::std::string& MONEY_TYPE_Name(MONEY_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MONEY_TYPE_descriptor(), value);
}
inline bool MONEY_TYPE_Parse(
    const ::std::string& name, MONEY_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MONEY_TYPE>(
    MONEY_TYPE_descriptor(), name, value);
}
enum QuestActionType {
  QuestActionType_None = 0,
  QuestActionType_Dialog = 1,
  QuestActionType_ClientAction = 2,
  QuestActionType_KillNpc = 3,
  QuestActionType_Loot = 4,
  QuestActionType_Collect = 5,
  QuestActionType_FightCount = 6,
  QuestActionType_FightWinCount = 7,
  QuestActionType_GetItem = 8,
  QuestActionType_Delivery = 9,
  QuestActionType_Explore = 10,
  QuestActionType_UseItemInRegion = 11,
  QuestActionType_WinBattleNpc = 12
};
bool QuestActionType_IsValid(int value);
const QuestActionType QuestActionType_MIN = QuestActionType_None;
const QuestActionType QuestActionType_MAX = QuestActionType_WinBattleNpc;
const int QuestActionType_ARRAYSIZE = QuestActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestActionType_descriptor();
inline const ::std::string& QuestActionType_Name(QuestActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestActionType_descriptor(), value);
}
inline bool QuestActionType_Parse(
    const ::std::string& name, QuestActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestActionType>(
    QuestActionType_descriptor(), name, value);
}
enum QuestAction_ClientActionType {
  QuestAction_ClientActionType_None = 0,
  QuestAction_ClientActionType_OpenInventory = 1,
  QuestAction_ClientActionType_OpenBank = 2
};
bool QuestAction_ClientActionType_IsValid(int value);
const QuestAction_ClientActionType QuestAction_ClientActionType_MIN = QuestAction_ClientActionType_None;
const QuestAction_ClientActionType QuestAction_ClientActionType_MAX = QuestAction_ClientActionType_OpenBank;
const int QuestAction_ClientActionType_ARRAYSIZE = QuestAction_ClientActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestAction_ClientActionType_descriptor();
inline const ::std::string& QuestAction_ClientActionType_Name(QuestAction_ClientActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestAction_ClientActionType_descriptor(), value);
}
inline bool QuestAction_ClientActionType_Parse(
    const ::std::string& name, QuestAction_ClientActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestAction_ClientActionType>(
    QuestAction_ClientActionType_descriptor(), name, value);
}
enum QuestStatus {
  QuestStatus_DEFAULT = 0,
  QuestStatus_ACCEPTABLE = 1,
  QuestStatus_ACCEPTED = 2,
  QuestStatus_FINISHABLE = 3,
  QuestStatus_FINISHED = 4
};
bool QuestStatus_IsValid(int value);
const QuestStatus QuestStatus_MIN = QuestStatus_DEFAULT;
const QuestStatus QuestStatus_MAX = QuestStatus_FINISHED;
const int QuestStatus_ARRAYSIZE = QuestStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestStatus_descriptor();
inline const ::std::string& QuestStatus_Name(QuestStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestStatus_descriptor(), value);
}
inline bool QuestStatus_Parse(
    const ::std::string& name, QuestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestStatus>(
    QuestStatus_descriptor(), name, value);
}
enum QuestType {
  QuestType_DEFAULT = 0,
  QuestType_ZHUXIAN = 1,
  QuestType_XUANSHANG = 2,
  QuestType_ZHIXIAN = 3,
  QuestType_RICHANG = 4,
  QuestType_XUNLUO = 5,
  QuestType_BANGHUI_XUNLUO = 6,
  QuestType_BANGHUI_CRYSTAL = 7
};
bool QuestType_IsValid(int value);
const QuestType QuestType_MIN = QuestType_DEFAULT;
const QuestType QuestType_MAX = QuestType_BANGHUI_CRYSTAL;
const int QuestType_ARRAYSIZE = QuestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestType_descriptor();
inline const ::std::string& QuestType_Name(QuestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestType_descriptor(), value);
}
inline bool QuestType_Parse(
    const ::std::string& name, QuestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestType>(
    QuestType_descriptor(), name, value);
}
enum TreasureBoxBonusType {
  TreasureBoxBonusType_GUILD_WAR_BOSS = 1,
  TreasureBoxBonusType_GUILD_WAR_PvP = 2
};
bool TreasureBoxBonusType_IsValid(int value);
const TreasureBoxBonusType TreasureBoxBonusType_MIN = TreasureBoxBonusType_GUILD_WAR_BOSS;
const TreasureBoxBonusType TreasureBoxBonusType_MAX = TreasureBoxBonusType_GUILD_WAR_PvP;
const int TreasureBoxBonusType_ARRAYSIZE = TreasureBoxBonusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TreasureBoxBonusType_descriptor();
inline const ::std::string& TreasureBoxBonusType_Name(TreasureBoxBonusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TreasureBoxBonusType_descriptor(), value);
}
inline bool TreasureBoxBonusType_Parse(
    const ::std::string& name, TreasureBoxBonusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TreasureBoxBonusType>(
    TreasureBoxBonusType_descriptor(), name, value);
}
enum ActivityStatus {
  ActivityStatus_NOT_AVAIL = 0,
  ActivityStatus_AVAIL = 1,
  ActivityStatus_START = 2,
  ActivityStatus_REWARD = 3,
  ActivityStatus_FINISH = 4
};
bool ActivityStatus_IsValid(int value);
const ActivityStatus ActivityStatus_MIN = ActivityStatus_NOT_AVAIL;
const ActivityStatus ActivityStatus_MAX = ActivityStatus_FINISH;
const int ActivityStatus_ARRAYSIZE = ActivityStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityStatus_descriptor();
inline const ::std::string& ActivityStatus_Name(ActivityStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityStatus_descriptor(), value);
}
inline bool ActivityStatus_Parse(
    const ::std::string& name, ActivityStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityStatus>(
    ActivityStatus_descriptor(), name, value);
}
enum DIFFICULTY_LEVEL {
  EASY = 1,
  NORMAL = 2,
  DIFFICULT = 3,
  MASTER = 4,
  HERO = 5,
  LEGENDS = 6
};
bool DIFFICULTY_LEVEL_IsValid(int value);
const DIFFICULTY_LEVEL DIFFICULTY_LEVEL_MIN = EASY;
const DIFFICULTY_LEVEL DIFFICULTY_LEVEL_MAX = LEGENDS;
const int DIFFICULTY_LEVEL_ARRAYSIZE = DIFFICULTY_LEVEL_MAX + 1;

const ::google::protobuf::EnumDescriptor* DIFFICULTY_LEVEL_descriptor();
inline const ::std::string& DIFFICULTY_LEVEL_Name(DIFFICULTY_LEVEL value) {
  return ::google::protobuf::internal::NameOfEnum(
    DIFFICULTY_LEVEL_descriptor(), value);
}
inline bool DIFFICULTY_LEVEL_Parse(
    const ::std::string& name, DIFFICULTY_LEVEL* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DIFFICULTY_LEVEL>(
    DIFFICULTY_LEVEL_descriptor(), name, value);
}
enum TEAM_OBJECTIVE_TYPE {
  CUSTOM_PASS = 1,
  QUEST = 2,
  LEVEL_UP = 3
};
bool TEAM_OBJECTIVE_TYPE_IsValid(int value);
const TEAM_OBJECTIVE_TYPE TEAM_OBJECTIVE_TYPE_MIN = CUSTOM_PASS;
const TEAM_OBJECTIVE_TYPE TEAM_OBJECTIVE_TYPE_MAX = LEVEL_UP;
const int TEAM_OBJECTIVE_TYPE_ARRAYSIZE = TEAM_OBJECTIVE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TEAM_OBJECTIVE_TYPE_descriptor();
inline const ::std::string& TEAM_OBJECTIVE_TYPE_Name(TEAM_OBJECTIVE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TEAM_OBJECTIVE_TYPE_descriptor(), value);
}
inline bool TEAM_OBJECTIVE_TYPE_Parse(
    const ::std::string& name, TEAM_OBJECTIVE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TEAM_OBJECTIVE_TYPE>(
    TEAM_OBJECTIVE_TYPE_descriptor(), name, value);
}
enum TEAM_ADD_TYPE {
  NORMAL_ADD = 1,
  CONFIRM_ADD = 2
};
bool TEAM_ADD_TYPE_IsValid(int value);
const TEAM_ADD_TYPE TEAM_ADD_TYPE_MIN = NORMAL_ADD;
const TEAM_ADD_TYPE TEAM_ADD_TYPE_MAX = CONFIRM_ADD;
const int TEAM_ADD_TYPE_ARRAYSIZE = TEAM_ADD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TEAM_ADD_TYPE_descriptor();
inline const ::std::string& TEAM_ADD_TYPE_Name(TEAM_ADD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TEAM_ADD_TYPE_descriptor(), value);
}
inline bool TEAM_ADD_TYPE_Parse(
    const ::std::string& name, TEAM_ADD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TEAM_ADD_TYPE>(
    TEAM_ADD_TYPE_descriptor(), name, value);
}
enum TEAM_OPERATION {
  CHANGE_TEAM_LEADER = 1,
  KICK_OUT_TEAM = 2,
  LEAVE_TEAM = 3,
  CLEAR_APPLIERS = 4
};
bool TEAM_OPERATION_IsValid(int value);
const TEAM_OPERATION TEAM_OPERATION_MIN = CHANGE_TEAM_LEADER;
const TEAM_OPERATION TEAM_OPERATION_MAX = CLEAR_APPLIERS;
const int TEAM_OPERATION_ARRAYSIZE = TEAM_OPERATION_MAX + 1;

const ::google::protobuf::EnumDescriptor* TEAM_OPERATION_descriptor();
inline const ::std::string& TEAM_OPERATION_Name(TEAM_OPERATION value) {
  return ::google::protobuf::internal::NameOfEnum(
    TEAM_OPERATION_descriptor(), value);
}
inline bool TEAM_OPERATION_Parse(
    const ::std::string& name, TEAM_OPERATION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TEAM_OPERATION>(
    TEAM_OPERATION_descriptor(), name, value);
}
enum TEAM_APPLY_RESULT {
  APPLY_ACCEPT = 1,
  APPLY_REJECT = 2
};
bool TEAM_APPLY_RESULT_IsValid(int value);
const TEAM_APPLY_RESULT TEAM_APPLY_RESULT_MIN = APPLY_ACCEPT;
const TEAM_APPLY_RESULT TEAM_APPLY_RESULT_MAX = APPLY_REJECT;
const int TEAM_APPLY_RESULT_ARRAYSIZE = TEAM_APPLY_RESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* TEAM_APPLY_RESULT_descriptor();
inline const ::std::string& TEAM_APPLY_RESULT_Name(TEAM_APPLY_RESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    TEAM_APPLY_RESULT_descriptor(), value);
}
inline bool TEAM_APPLY_RESULT_Parse(
    const ::std::string& name, TEAM_APPLY_RESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TEAM_APPLY_RESULT>(
    TEAM_APPLY_RESULT_descriptor(), name, value);
}
enum TEAM_LINEUP_OPERATION {
  SAVE_MODIFY = 1,
  RESET_DEFAULT_LINEUP = 2
};
bool TEAM_LINEUP_OPERATION_IsValid(int value);
const TEAM_LINEUP_OPERATION TEAM_LINEUP_OPERATION_MIN = SAVE_MODIFY;
const TEAM_LINEUP_OPERATION TEAM_LINEUP_OPERATION_MAX = RESET_DEFAULT_LINEUP;
const int TEAM_LINEUP_OPERATION_ARRAYSIZE = TEAM_LINEUP_OPERATION_MAX + 1;

const ::google::protobuf::EnumDescriptor* TEAM_LINEUP_OPERATION_descriptor();
inline const ::std::string& TEAM_LINEUP_OPERATION_Name(TEAM_LINEUP_OPERATION value) {
  return ::google::protobuf::internal::NameOfEnum(
    TEAM_LINEUP_OPERATION_descriptor(), value);
}
inline bool TEAM_LINEUP_OPERATION_Parse(
    const ::std::string& name, TEAM_LINEUP_OPERATION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TEAM_LINEUP_OPERATION>(
    TEAM_LINEUP_OPERATION_descriptor(), name, value);
}
enum SERVER_SYNC_TEAM_TYPE {
  CREATE_TEAM = 1,
  DELETE_TEAM = 2,
  MEMBER_CHANGE = 3,
  LEADER_CHANGE = 4,
  LOAD_TEAM = 5
};
bool SERVER_SYNC_TEAM_TYPE_IsValid(int value);
const SERVER_SYNC_TEAM_TYPE SERVER_SYNC_TEAM_TYPE_MIN = CREATE_TEAM;
const SERVER_SYNC_TEAM_TYPE SERVER_SYNC_TEAM_TYPE_MAX = LOAD_TEAM;
const int SERVER_SYNC_TEAM_TYPE_ARRAYSIZE = SERVER_SYNC_TEAM_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_SYNC_TEAM_TYPE_descriptor();
inline const ::std::string& SERVER_SYNC_TEAM_TYPE_Name(SERVER_SYNC_TEAM_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_SYNC_TEAM_TYPE_descriptor(), value);
}
inline bool SERVER_SYNC_TEAM_TYPE_Parse(
    const ::std::string& name, SERVER_SYNC_TEAM_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_SYNC_TEAM_TYPE>(
    SERVER_SYNC_TEAM_TYPE_descriptor(), name, value);
}
enum RoleLimitType {
  RoleLimitType_DAILY_QUEST = 2,
  RoleLimitType_DAILY_QUEST_GENERATE = 3,
  RoleLimitType_HIRE_YINGLING_NORMAL = 4,
  RoleLimitType_HIRE_YINGLING_JUNIOR = 5,
  RoleLimitType_HIRE_YINGLING_INTERMEDIATE = 6,
  RoleLimitType_HIRE_YINGLING_SENIOR = 7,
  RoleLimitType_DAILY_INSTANCE = 8,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_1 = 9,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_2 = 10,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_3 = 11,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_4 = 12,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_5 = 13,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_6 = 14,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_7 = 15,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_8 = 16,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_9 = 17,
  RoleLimitType_CHALLENGE_SPACE_TIME_LEVEL_10 = 18,
  RoleLimitType_VIP_SKIP_FIGHT_DAILY_LIMIT = 19,
  RoleLimitType_VIP_AUTO_FIGHT_LIMIT = 20,
  RoleLimitType_DAILY_GIFT_VIP_0 = 21,
  RoleLimitType_DAILY_GIFT_VIP_1 = 22,
  RoleLimitType_DAILY_GIFT_VIP_2 = 23,
  RoleLimitType_DAILY_GIFT_VIP_3 = 24,
  RoleLimitType_DAILY_GIFT_VIP_4 = 25,
  RoleLimitType_DAILY_GIFT_VIP_5 = 26,
  RoleLimitType_DAILY_GIFT_VIP_6 = 27,
  RoleLimitType_DAILY_GIFT_VIP_7 = 28,
  RoleLimitType_DAILY_GIFT_VIP_8 = 29,
  RoleLimitType_DAILY_GIFT_VIP_9 = 30,
  RoleLimitType_DAILY_GIFT_VIP_10 = 31,
  RoleLimitType_DAILY_GIFT_VIP_11 = 32,
  RoleLimitType_DAILY_GIFT_VIP_12 = 33,
  RoleLimitType_DAILY_ARENA_CHALLENGE_TIMES = 35,
  RoleLimitType_DAILY_FLY_SHOES_LIMIT = 36,
  RoleLimitType_ARENA_CHALLENGE_COOLDOWN = 37,
  RoleLimitType_CARRYON_SHOP = 38,
  RoleLimitType_CARRYON_DEPOT = 39,
  RoleLimitType_HUNT_LIMIT = 40,
  RoleLimitType_XUNLUO_QUEST_COOLDOWN = 41,
  RoleLimitType_PHY_STRENGTH_BUY_LIMIT = 42,
  RoleLimitType_VIP_FAST_PRACTICE_SKILL_LIMIT = 43,
  RoleLimitType_YOULI_MAP_FINISH = 44,
  RoleLimitType_YOULI_MAP_RESET = 45,
  RoleLimitType_YOULI_MAP_DICE = 46,
  RoleLimitType_GUILD_CIRCLE_QUEST = 47,
  RoleLimitType_HIT_YELLOW_DUCK_LIMIT = 48,
  RoleLimitType_WING_SPIRIT_GENERATOR = 49
};
bool RoleLimitType_IsValid(int value);
const RoleLimitType RoleLimitType_MIN = RoleLimitType_DAILY_QUEST;
const RoleLimitType RoleLimitType_MAX = RoleLimitType_WING_SPIRIT_GENERATOR;
const int RoleLimitType_ARRAYSIZE = RoleLimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleLimitType_descriptor();
inline const ::std::string& RoleLimitType_Name(RoleLimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleLimitType_descriptor(), value);
}
inline bool RoleLimitType_Parse(
    const ::std::string& name, RoleLimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleLimitType>(
    RoleLimitType_descriptor(), name, value);
}
enum FunctionLimitType {
  FunctionLimitType_HIRE_YINGLING_SENIOR = 1,
  FunctionLimitType_SPEED_UP_AUTO_FIGHT = 2,
  FunctionLimitType_SENIOR_PRACTICE_SKILL = 3,
  FunctionLimitType_CARRYON_SHOP = 4,
  FunctionLimitType_CARRYON_DEPOT = 5,
  FunctionLimitType_WING_SPIRIT_ENABLE_LV4 = 6,
  FunctionLimitType_WING_SPIRIT_BULK_GENERATE = 7,
  FunctionLimitType_MAXVALUE = 100
};
bool FunctionLimitType_IsValid(int value);
const FunctionLimitType FunctionLimitType_MIN = FunctionLimitType_HIRE_YINGLING_SENIOR;
const FunctionLimitType FunctionLimitType_MAX = FunctionLimitType_MAXVALUE;
const int FunctionLimitType_ARRAYSIZE = FunctionLimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionLimitType_descriptor();
inline const ::std::string& FunctionLimitType_Name(FunctionLimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionLimitType_descriptor(), value);
}
inline bool FunctionLimitType_Parse(
    const ::std::string& name, FunctionLimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionLimitType>(
    FunctionLimitType_descriptor(), name, value);
}
enum NumberLimitType {
  NumberLimit_MAX_PLAYER_LEVEL = 1,
  NumberLimit_INIT_YOULI_NUM = 2,
  NumberLimit_HIRE_YINGLING_K = 3,
  NumberLimit_HIRE_YINGLING_E = 4,
  NumberLimit_HIRE_YINGLING_N = 5,
  NumberLimit_HIRE_YINGLING_PROTECT_NUM = 6,
  NumberLimit_LUCKY_ONCE_DIAMOND = 7,
  NumberLimit_GUILD_CRYSTAL_DURATION = 8,
  NumberLimit_GUILD_CRYSTAL_REWARD_COUNTDOWN = 9,
  NumberLimit_PVP_ENTER_LEVEL_LIMIT = 10,
  NumberLimit_PVP_MAX_LEVEL = 11,
  NumberLimit_PVP_NEW_LEVEL_CD = 12,
  NumberLimit_PVP_FIGHT_CD = 13,
  NumberLimit_PVP_RE_ENTER_CD = 14,
  NumberLimit_PVP_ROBOT_TIMEOUT = 15,
  NumberLimit_PVP_LEVEL_UP_TIMEOUT = 16,
  NumberLimit_PVP_SHOW_CONT_WIN_RANK_LEVEL = 17,
  NumberLimit_PVP_FIGHT_AUTO_SKIP_TIME = 18,
  NumberLimit_PVP_TOP_5_ANNOUNCE_LEVEL = 19,
  NumberLimit_PVP_ROBOT_CHECK_TIME = 20,
  NumberLimit_TRAIN_COIN_K = 21,
  NumberLimit_TRAIN_MIDDLE_COST_YB = 22,
  NumberLimit_TRAIN_HIGH_COST_YB = 23,
  NumberLimit_TRAIN_MIDDLE_ALTER_ITEM_ID = 24,
  NumberLimit_TRAIN_MIDDLE_ALTER_ITEM_NUM = 25,
  NumberLimit_TRAIN_FUNCTION_OPEN_LEVEL = 26,
  NumberLimit_HIRE_HERO_YINGLING_PROTECT_NUM = 27,
  NumberLimit_VIP_0_AUTO_INSTANCE_TIME = 28,
  NumberLimit_VIP_1_AUTO_INSTANCE_TIME = 29,
  NumberLimit_VIP_2_AUTO_INSTANCE_TIME = 30,
  NumberLimit_VIP_3_AUTO_INSTANCE_TIME = 31,
  NumberLimit_VIP_4_AUTO_INSTANCE_TIME = 32,
  NumberLimit_VIP_5_AUTO_INSTANCE_TIME = 33
};
bool NumberLimitType_IsValid(int value);
const NumberLimitType NumberLimitType_MIN = NumberLimit_MAX_PLAYER_LEVEL;
const NumberLimitType NumberLimitType_MAX = NumberLimit_VIP_5_AUTO_INSTANCE_TIME;
const int NumberLimitType_ARRAYSIZE = NumberLimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NumberLimitType_descriptor();
inline const ::std::string& NumberLimitType_Name(NumberLimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NumberLimitType_descriptor(), value);
}
inline bool NumberLimitType_Parse(
    const ::std::string& name, NumberLimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NumberLimitType>(
    NumberLimitType_descriptor(), name, value);
}
enum VipSettingsType {
  VipSettingsType_EXP_BONUS = 1,
  VipSettingsType_SKILL_PRACTICE_LIMIT = 2,
  VipSettingsType_FRIEND_LIMIT = 3
};
bool VipSettingsType_IsValid(int value);
const VipSettingsType VipSettingsType_MIN = VipSettingsType_EXP_BONUS;
const VipSettingsType VipSettingsType_MAX = VipSettingsType_FRIEND_LIMIT;
const int VipSettingsType_ARRAYSIZE = VipSettingsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VipSettingsType_descriptor();
inline const ::std::string& VipSettingsType_Name(VipSettingsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VipSettingsType_descriptor(), value);
}
inline bool VipSettingsType_Parse(
    const ::std::string& name, VipSettingsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VipSettingsType>(
    VipSettingsType_descriptor(), name, value);
}
enum PlayerBitType {
  PBT_FREEZE = 0,
  PBT_MUTE = 1,
  PBT_OBSERVER = 2,
  PBT_GM = 3,
  PBT_HIDDEN = 4,
  PBT_MAX = 14
};
bool PlayerBitType_IsValid(int value);
const PlayerBitType PlayerBitType_MIN = PBT_FREEZE;
const PlayerBitType PlayerBitType_MAX = PBT_MAX;
const int PlayerBitType_ARRAYSIZE = PlayerBitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerBitType_descriptor();
inline const ::std::string& PlayerBitType_Name(PlayerBitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerBitType_descriptor(), value);
}
inline bool PlayerBitType_Parse(
    const ::std::string& name, PlayerBitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerBitType>(
    PlayerBitType_descriptor(), name, value);
}
enum PlayerFlagType {
  PlayerFlagType_FIRST_GENERATE_YINGLING = 1,
  PlayerFlagType_CONTINIUS_LOGIN_DAYS = 2,
  PlayerFlagType_ACTIVITY_START_HIRE_YINGLING = 3,
  PlayerFlagType_ACTIVITY_END_HIRE_YINGLING = 4,
  PlayerFlagType_ACTIVITY_START_STRENGTH_EQUIP = 5,
  PlayerFlagType_ACTIVITY_END_STRENGTH_EQUIP = 6,
  PlayerFlagType_CURRENT_STACKABLE_HIRE_YINGLING_COST = 7,
  PlayerFlagType_CURRENT_STACKABLE_HIRE_HERO_YINGLING_COST = 8,
  PlayerFlagType_FUNCTION_LIMIT_START = 22,
  PlayerFlagType_FUNCTION_OPEN_1 = 23,
  PlayerFlagType_FUNCTION_OPEN_2 = 24,
  PlayerFlagType_FUNCTION_OPEN_3 = 25,
  PlayerFlagType_FUNCTION_OPEN_4 = 26,
  PlayerFlagType_FUNCTION_OPEN_5 = 27,
  PlayerFlagType_FUNCTION_OPEN_6 = 28,
  PlayerFlagType_FUNCTION_OPEN_7 = 29,
  PlayerFlagType_FUNCTION_OPEN_8 = 30,
  PlayerFlagType_LEVELUP_GIFT_ID = 31,
  PlayerFlagType_ADD_FAVORITE = 32,
  PlayerFlagType_FIRST_CHARGE = 33,
  PlayerFlagType_WEIXIN_VERIFY = 34,
  PlayerFlagType_DAILY_FIRST_CHARGE = 35,
  PlayerFlagType_DAILY_FIRST_CHARGE_NUM = 36,
  PlayerFlagType_DAILY_FIRST_CHARGE_CUR = 37,
  PlayerFlagType_ACC_CONSUME_DIAMOND = 38,
  PlayerFlagType_LUCKY_ONCE_DIAMOND = 39,
  PlayerFlagType_EXCHANGE_YINGLING_1_STATUS = 40,
  PlayerFlagType_EXCHANGE_YINGLING_2_STATUS = 41,
  PlayerFlagType_LUCKY_CREDITS = 42,
  PlayerFlagType_LUCKY_ONCE_MORE = 43,
  PlayerFlagType_LAST_ADD_EXTRA_LUCKY_TIME = 44,
  PlayerFlagType_OFFLINE_GIFT = 45,
  PlayerFlagType_IS_IN_AUTO_INSTANCE = 46,
  PlayerFlagType_INSTANCE_ID = 47,
  PlayerFlagType_INSTANCE_GRADE = 48,
  PlayerFlagType_STOP_ON_BAG_FULL = 49,
  PlayerFlagType_SOUL_EXCHANGE = 99,
  PlayerFlagType_FUNCTION_LIMIT_END = 100,
  PlayerFlagType_GIFT_START_ID = 101,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_1 = 102,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_2 = 103,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_3 = 104,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_4 = 105,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_5 = 106,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_6 = 107,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_7 = 108,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_8 = 109,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_9 = 110,
  PlayerFlagType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_10 = 111,
  PlayerFlagType_FIST_VIP_BONUS_1 = 112,
  PlayerFlagType_FIST_VIP_BONUS_2 = 113,
  PlayerFlagType_FIST_VIP_BONUS_3 = 114,
  PlayerFlagType_FIST_VIP_BONUS_4 = 115,
  PlayerFlagType_FIST_VIP_BONUS_5 = 116,
  PlayerFlagType_FIST_VIP_BONUS_6 = 117,
  PlayerFlagType_FIST_VIP_BONUS_7 = 118,
  PlayerFlagType_FIST_VIP_BONUS_8 = 119,
  PlayerFlagType_FIST_VIP_BONUS_9 = 120,
  PlayerFlagType_FIST_VIP_BONUS_10 = 121,
  PlayerFlagType_EQUIP_STRENGTH_TIME = 130,
  PlayerFlagType_ARENA_WIN_COUNT = 131,
  PlayerFlagType_TASK_WANTED_COUNT = 132,
  PlayerFlagType_PRACTICE_DAY_1 = 134,
  PlayerFlagType_PRACTICE_DAY_2 = 135,
  PlayerFlagType_PRACTICE_DAY_3 = 136,
  PlayerFlagType_PRACTICE_DAY_4 = 137,
  PlayerFlagType_PRACTICE_DAY_5 = 138,
  PlayerFlagType_PRACTICE_DAY_6 = 139,
  PlayerFlagType_PRACTICE_DAY_7 = 140,
  PlayerFlagType_FIGHT_CAPACITY_INC_1 = 141,
  PlayerFlagType_FIGHT_CAPACITY_INC_2 = 142,
  PlayerFlagType_FIGHT_CAPACITY_INC_3 = 143,
  PlayerFlagType_FIGHT_CAPACITY_INC_4 = 144,
  PlayerFlagType_FIGHT_CAPACITY_INC_5 = 145,
  PlayerFlagType_FIGHT_CAPACITY_INC_6 = 146,
  PlayerFlagType_FIGHT_CAPACITY_INC_7 = 147,
  PlayerFlagType_FIGHT_CAPACITY_INC_8 = 148,
  PlayerFlagType_FIGHT_CAPACITY_INC_9 = 149,
  PlayerFlagType_FIGHT_CAPACITY_INC_10 = 150,
  PlayerFlagType_FIGHT_CAPACITY_INC_11 = 151,
  PlayerFlagType_FIGHT_CAPACITY_INC_12 = 152,
  PlayerFlagType_FIGHT_CAPACITY_INC_13 = 153,
  PlayerFlagType_FIGHT_CAPACITY_INC_14 = 154,
  PlayerFlagType_FIGHT_CAPACITY_INC_15 = 155,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_1 = 160,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_2 = 161,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_3 = 162,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_4 = 163,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_5 = 164,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_6 = 165,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_7 = 166,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_8 = 167,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_9 = 168,
  PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_10 = 169,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_1 = 170,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_2 = 171,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_3 = 172,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_4 = 173,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_5 = 174,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_6 = 175,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_7 = 176,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_8 = 177,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_9 = 178,
  PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG_10 = 179,
  PlayerFlagType_CHARGE_LEVEL_1 = 181,
  PlayerFlagType_CHARGE_LEVEL_2 = 182,
  PlayerFlagType_CHARGE_LEVEL_3 = 183,
  PlayerFlagType_CHARGE_LEVEL_4 = 184,
  PlayerFlagType_CHARGE_LEVEL_5 = 185,
  PlayerFlagType_CHARGE_LEVEL_6 = 186,
  PlayerFlagType_CHARGE_LEVEL_7 = 187,
  PlayerFlagType_CHARGE_LEVEL_8 = 188,
  PlayerFlagType_GIFT_END_ID = 599
};
bool PlayerFlagType_IsValid(int value);
const PlayerFlagType PlayerFlagType_MIN = PlayerFlagType_FIRST_GENERATE_YINGLING;
const PlayerFlagType PlayerFlagType_MAX = PlayerFlagType_GIFT_END_ID;
const int PlayerFlagType_ARRAYSIZE = PlayerFlagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerFlagType_descriptor();
inline const ::std::string& PlayerFlagType_Name(PlayerFlagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerFlagType_descriptor(), value);
}
inline bool PlayerFlagType_Parse(
    const ::std::string& name, PlayerFlagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerFlagType>(
    PlayerFlagType_descriptor(), name, value);
}
enum StartupActivityType {
  StartupActivityType_HIRE_YINGLING = 1,
  StartupActivityType_STRENGTH_EQUIP = 2,
  StartupActivityType_SINGLE_CHARGE = 3,
  StartupActivityType_VIP_PRIVILEGES = 4,
  StartupActivityType_FIGHT_CAPACITY = 5,
  StartupActivityType_ADD_FAVORITE = 6,
  StartupActivityType_LEVEL_UP = 7,
  StartupActivityType_ALIEN_BOSS = 8,
  StartupActivityType_LUCKY_WHEEL = 9,
  StartupActivityType_PVP_ACT = 10,
  StartupActivityType_Preliminaries = 11,
  StartupActivityType_Quarter_Finals = 12,
  StartupActivityType_Semi_Finals = 13,
  StartupActivityType_Finals = 14,
  StartupActivityType_Preliminary_Advanced_Notification = 15,
  StartupActivityType_Preliminary_Hourly_Notification = 16,
  StartupActivityType_Preliminary_CountDown_Notification = 17,
  StartupActivityType_Quarter_Competitor_Notification = 18
};
bool StartupActivityType_IsValid(int value);
const StartupActivityType StartupActivityType_MIN = StartupActivityType_HIRE_YINGLING;
const StartupActivityType StartupActivityType_MAX = StartupActivityType_Quarter_Competitor_Notification;
const int StartupActivityType_ARRAYSIZE = StartupActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartupActivityType_descriptor();
inline const ::std::string& StartupActivityType_Name(StartupActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartupActivityType_descriptor(), value);
}
inline bool StartupActivityType_Parse(
    const ::std::string& name, StartupActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartupActivityType>(
    StartupActivityType_descriptor(), name, value);
}
enum ClientPlayerFlagType {
  PlayerFlagType_CLIENT_SCENE_START_ID = 10000,
  PlayerFlagType_CLIENT_SCENE_END_ID = 11999,
  PlayerFlagType_CLIENT_GUIDE_START_ID = 12000,
  PlayerFlagType_CLIENT_GUIDE_END_ID = 12999,
  PlayerFlagType_CLIENT_SCENE_START_ID2 = 100000,
  PlayerFlagType_CLIENT_SCENE_END_ID2 = 200000
};
bool ClientPlayerFlagType_IsValid(int value);
const ClientPlayerFlagType ClientPlayerFlagType_MIN = PlayerFlagType_CLIENT_SCENE_START_ID;
const ClientPlayerFlagType ClientPlayerFlagType_MAX = PlayerFlagType_CLIENT_SCENE_END_ID2;
const int ClientPlayerFlagType_ARRAYSIZE = ClientPlayerFlagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientPlayerFlagType_descriptor();
inline const ::std::string& ClientPlayerFlagType_Name(ClientPlayerFlagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientPlayerFlagType_descriptor(), value);
}
inline bool ClientPlayerFlagType_Parse(
    const ::std::string& name, ClientPlayerFlagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientPlayerFlagType>(
    ClientPlayerFlagType_descriptor(), name, value);
}
enum TrainType {
  TrainType_DEFAULT = 0,
  TrainType_NORMAL = 1,
  TrainType_MIDDLE = 2,
  TrainType_HIGH = 3
};
bool TrainType_IsValid(int value);
const TrainType TrainType_MIN = TrainType_DEFAULT;
const TrainType TrainType_MAX = TrainType_HIGH;
const int TrainType_ARRAYSIZE = TrainType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrainType_descriptor();
inline const ::std::string& TrainType_Name(TrainType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrainType_descriptor(), value);
}
inline bool TrainType_Parse(
    const ::std::string& name, TrainType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrainType>(
    TrainType_descriptor(), name, value);
}
enum BUY_MORE_TIMES_TYPE {
  BUY_ARENA_CHALLENGE_TIME = 1
};
bool BUY_MORE_TIMES_TYPE_IsValid(int value);
const BUY_MORE_TIMES_TYPE BUY_MORE_TIMES_TYPE_MIN = BUY_ARENA_CHALLENGE_TIME;
const BUY_MORE_TIMES_TYPE BUY_MORE_TIMES_TYPE_MAX = BUY_ARENA_CHALLENGE_TIME;
const int BUY_MORE_TIMES_TYPE_ARRAYSIZE = BUY_MORE_TIMES_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BUY_MORE_TIMES_TYPE_descriptor();
inline const ::std::string& BUY_MORE_TIMES_TYPE_Name(BUY_MORE_TIMES_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BUY_MORE_TIMES_TYPE_descriptor(), value);
}
inline bool BUY_MORE_TIMES_TYPE_Parse(
    const ::std::string& name, BUY_MORE_TIMES_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BUY_MORE_TIMES_TYPE>(
    BUY_MORE_TIMES_TYPE_descriptor(), name, value);
}
enum BUY_CLEAR_CD_TYPE {
  BUY_CLEAR_CHALLENGE_CD = 1,
  BUY_SPEED_UP_RACTICE_SKILL_CD = 2
};
bool BUY_CLEAR_CD_TYPE_IsValid(int value);
const BUY_CLEAR_CD_TYPE BUY_CLEAR_CD_TYPE_MIN = BUY_CLEAR_CHALLENGE_CD;
const BUY_CLEAR_CD_TYPE BUY_CLEAR_CD_TYPE_MAX = BUY_SPEED_UP_RACTICE_SKILL_CD;
const int BUY_CLEAR_CD_TYPE_ARRAYSIZE = BUY_CLEAR_CD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* BUY_CLEAR_CD_TYPE_descriptor();
inline const ::std::string& BUY_CLEAR_CD_TYPE_Name(BUY_CLEAR_CD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    BUY_CLEAR_CD_TYPE_descriptor(), value);
}
inline bool BUY_CLEAR_CD_TYPE_Parse(
    const ::std::string& name, BUY_CLEAR_CD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BUY_CLEAR_CD_TYPE>(
    BUY_CLEAR_CD_TYPE_descriptor(), name, value);
}
enum UniqueNameType {
  UniqueNameType_PLAYER_NAME = 1,
  UniqueNameType_GUILD_NAME = 2
};
bool UniqueNameType_IsValid(int value);
const UniqueNameType UniqueNameType_MIN = UniqueNameType_PLAYER_NAME;
const UniqueNameType UniqueNameType_MAX = UniqueNameType_GUILD_NAME;
const int UniqueNameType_ARRAYSIZE = UniqueNameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UniqueNameType_descriptor();
inline const ::std::string& UniqueNameType_Name(UniqueNameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UniqueNameType_descriptor(), value);
}
inline bool UniqueNameType_Parse(
    const ::std::string& name, UniqueNameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UniqueNameType>(
    UniqueNameType_descriptor(), name, value);
}
enum GuildSkillStatus {
  GuildSkill_CANT_RESEARCH = 1,
  GuildSkill_UNRESEARCHED = 2,
  GuildSkill_RESEARCHING = 3,
  GuildSkill_RESEARCHED = 4,
  GuildSkill_CANT_LEARN = 5,
  GuildSkill_UNLEARNED = 6,
  GuildSkill_LEARNED = 7
};
bool GuildSkillStatus_IsValid(int value);
const GuildSkillStatus GuildSkillStatus_MIN = GuildSkill_CANT_RESEARCH;
const GuildSkillStatus GuildSkillStatus_MAX = GuildSkill_LEARNED;
const int GuildSkillStatus_ARRAYSIZE = GuildSkillStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildSkillStatus_descriptor();
inline const ::std::string& GuildSkillStatus_Name(GuildSkillStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildSkillStatus_descriptor(), value);
}
inline bool GuildSkillStatus_Parse(
    const ::std::string& name, GuildSkillStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildSkillStatus>(
    GuildSkillStatus_descriptor(), name, value);
}
enum FunctionType {
  FunctionType_HIRE_YINGLING = 1,
  FunctionType_ARENA = 2
};
bool FunctionType_IsValid(int value);
const FunctionType FunctionType_MIN = FunctionType_HIRE_YINGLING;
const FunctionType FunctionType_MAX = FunctionType_ARENA;
const int FunctionType_ARRAYSIZE = FunctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FunctionType_descriptor();
inline const ::std::string& FunctionType_Name(FunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FunctionType_descriptor(), value);
}
inline bool FunctionType_Parse(
    const ::std::string& name, FunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FunctionType>(
    FunctionType_descriptor(), name, value);
}
enum LivenessType {
  LIVENESS_MARKET_CONSUME = 0,
  LIVENESS_EQUIP_STRENGTH = 1,
  LIVENESS_SINGLE_INSTANCE = 2,
  LIVENESS_TEAM_INSTANCE = 3,
  LIVENESS_DAILY_QUEST = 4,
  LIVENESS_ARENA_FIGHT = 5,
  LIVENESS_LOGIN = 6,
  LIVENESS_AUTO_FIGHT = 7,
  LIVENESS_PRACTICE_SKILL = 8,
  LIVENESS_HIRE_YINGLING = 9,
  LIVENESS_TOTAL = 10
};
bool LivenessType_IsValid(int value);
const LivenessType LivenessType_MIN = LIVENESS_MARKET_CONSUME;
const LivenessType LivenessType_MAX = LIVENESS_TOTAL;
const int LivenessType_ARRAYSIZE = LivenessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LivenessType_descriptor();
inline const ::std::string& LivenessType_Name(LivenessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LivenessType_descriptor(), value);
}
inline bool LivenessType_Parse(
    const ::std::string& name, LivenessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LivenessType>(
    LivenessType_descriptor(), name, value);
}
enum PlayerConfigType {
  PC_DENY_STRENGER_TEAM = 0,
  PC_DENY_STRENGER_GUILD = 1,
  PC_DENY_STRENGER_FIGHT = 2,
  PC_DENY_STRENGER_TALK = 3,
  PC_FRIEND = 4
};
bool PlayerConfigType_IsValid(int value);
const PlayerConfigType PlayerConfigType_MIN = PC_DENY_STRENGER_TEAM;
const PlayerConfigType PlayerConfigType_MAX = PC_FRIEND;
const int PlayerConfigType_ARRAYSIZE = PlayerConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerConfigType_descriptor();
inline const ::std::string& PlayerConfigType_Name(PlayerConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerConfigType_descriptor(), value);
}
inline bool PlayerConfigType_Parse(
    const ::std::string& name, PlayerConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerConfigType>(
    PlayerConfigType_descriptor(), name, value);
}
enum FriendConfigType {
  FC_VERIFY = 0,
  FC_DENY = 1,
  FC_ACCEPT = 2
};
bool FriendConfigType_IsValid(int value);
const FriendConfigType FriendConfigType_MIN = FC_VERIFY;
const FriendConfigType FriendConfigType_MAX = FC_ACCEPT;
const int FriendConfigType_ARRAYSIZE = FriendConfigType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendConfigType_descriptor();
inline const ::std::string& FriendConfigType_Name(FriendConfigType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendConfigType_descriptor(), value);
}
inline bool FriendConfigType_Parse(
    const ::std::string& name, FriendConfigType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendConfigType>(
    FriendConfigType_descriptor(), name, value);
}
enum UpdateMonsterBuffType {
  MB_NEW = 0,
  MB_LOSE = 1,
  MB_SUBSTITUTE = 2,
  MB_UPDATE = 3
};
bool UpdateMonsterBuffType_IsValid(int value);
const UpdateMonsterBuffType UpdateMonsterBuffType_MIN = MB_NEW;
const UpdateMonsterBuffType UpdateMonsterBuffType_MAX = MB_UPDATE;
const int UpdateMonsterBuffType_ARRAYSIZE = UpdateMonsterBuffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpdateMonsterBuffType_descriptor();
inline const ::std::string& UpdateMonsterBuffType_Name(UpdateMonsterBuffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpdateMonsterBuffType_descriptor(), value);
}
inline bool UpdateMonsterBuffType_Parse(
    const ::std::string& name, UpdateMonsterBuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpdateMonsterBuffType>(
    UpdateMonsterBuffType_descriptor(), name, value);
}
enum TeamChannelMemberNotifyType {
  TCMT_TEAM_MEMBER_LEVEL_UP = 1,
  TCMT_TEAM_MEMBER_HIGH_QUALITY_ITEM = 2
};
bool TeamChannelMemberNotifyType_IsValid(int value);
const TeamChannelMemberNotifyType TeamChannelMemberNotifyType_MIN = TCMT_TEAM_MEMBER_LEVEL_UP;
const TeamChannelMemberNotifyType TeamChannelMemberNotifyType_MAX = TCMT_TEAM_MEMBER_HIGH_QUALITY_ITEM;
const int TeamChannelMemberNotifyType_ARRAYSIZE = TeamChannelMemberNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamChannelMemberNotifyType_descriptor();
inline const ::std::string& TeamChannelMemberNotifyType_Name(TeamChannelMemberNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamChannelMemberNotifyType_descriptor(), value);
}
inline bool TeamChannelMemberNotifyType_Parse(
    const ::std::string& name, TeamChannelMemberNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamChannelMemberNotifyType>(
    TeamChannelMemberNotifyType_descriptor(), name, value);
}
enum TitleId {
  TITLE_ARENA_NO_1 = 10011,
  TITLE_ARENA_NO_2 = 10012,
  TITLE_ARENA_NO_3 = 10013,
  TITLE_SWORDMAN_LEVEl_NO_1 = 10021,
  TITLE_WIZARD_LEVEl_NO_1 = 10022,
  TITLE_ARCHER_LEVEl_NO_1 = 10023,
  TITLE_SWORDMAN_FIGHT_NO_1 = 10024,
  TITLE_WIZARD_FIGHT_NO_1 = 10025,
  TITLE_ARCHER_FIGHT_NO_1 = 10026,
  TITLE_COINS_RANK_NO_1 = 10027,
  TITLE_GUILD_RANK_NO_1 = 10041,
  TITLE_WORLD_BOSS_NO_1 = 10031,
  TITLE_PVP_NO_1 = 10051,
  TITLE_GUILD_WAR_NO_1 = 10052,
  TITLE_GUILD_WAR_MVP = 10053
};
bool TitleId_IsValid(int value);
const TitleId TitleId_MIN = TITLE_ARENA_NO_1;
const TitleId TitleId_MAX = TITLE_GUILD_WAR_MVP;
const int TitleId_ARRAYSIZE = TitleId_MAX + 1;

const ::google::protobuf::EnumDescriptor* TitleId_descriptor();
inline const ::std::string& TitleId_Name(TitleId value) {
  return ::google::protobuf::internal::NameOfEnum(
    TitleId_descriptor(), value);
}
inline bool TitleId_Parse(
    const ::std::string& name, TitleId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TitleId>(
    TitleId_descriptor(), name, value);
}
enum ROOM_OPERATION {
  CHANGE_ROOM_LEADER = 1,
  KICK_OUT_ROOM = 2,
  LEAVE_ROOM = 3,
  UPDATE_PLAYER_READY = 4,
  UPDATE_ROOM_PWD = 5
};
bool ROOM_OPERATION_IsValid(int value);
const ROOM_OPERATION ROOM_OPERATION_MIN = CHANGE_ROOM_LEADER;
const ROOM_OPERATION ROOM_OPERATION_MAX = UPDATE_ROOM_PWD;
const int ROOM_OPERATION_ARRAYSIZE = ROOM_OPERATION_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROOM_OPERATION_descriptor();
inline const ::std::string& ROOM_OPERATION_Name(ROOM_OPERATION value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROOM_OPERATION_descriptor(), value);
}
inline bool ROOM_OPERATION_Parse(
    const ::std::string& name, ROOM_OPERATION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROOM_OPERATION>(
    ROOM_OPERATION_descriptor(), name, value);
}
// ===================================================================

class InstanceCardInfo : public ::google::protobuf::Message {
 public:
  InstanceCardInfo();
  virtual ~InstanceCardInfo();
  
  InstanceCardInfo(const InstanceCardInfo& from);
  
  inline InstanceCardInfo& operator=(const InstanceCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceCardInfo& default_instance();
  
  void Swap(InstanceCardInfo* other);
  
  // implements Message ----------------------------------------------
  
  InstanceCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceCardInfo& from);
  void MergeFrom(const InstanceCardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // required int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);
  
  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 icon_id = 4;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 4;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.InstanceCardInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 icon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static InstanceCardInfo* default_instance_;
};
// -------------------------------------------------------------------

class InstanceWantedInfo : public ::google::protobuf::Message {
 public:
  InstanceWantedInfo();
  virtual ~InstanceWantedInfo();
  
  InstanceWantedInfo(const InstanceWantedInfo& from);
  
  inline InstanceWantedInfo& operator=(const InstanceWantedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceWantedInfo& default_instance();
  
  void Swap(InstanceWantedInfo* other);
  
  // implements Message ----------------------------------------------
  
  InstanceWantedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceWantedInfo& from);
  void MergeFrom(const InstanceWantedInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);
  
  // optional int32 left_time = 2;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  inline int card_info_size() const;
  inline void clear_card_info();
  static const int kCardInfoFieldNumber = 3;
  inline const ::protocols::common::InstanceCardInfo& card_info(int index) const;
  inline ::protocols::common::InstanceCardInfo* mutable_card_info(int index);
  inline ::protocols::common::InstanceCardInfo* add_card_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::InstanceCardInfo >&
      card_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::InstanceCardInfo >*
      mutable_card_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.InstanceWantedInfo)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 left_time_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::InstanceCardInfo > card_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static InstanceWantedInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuffInfo : public ::google::protobuf::Message {
 public:
  BuffInfo();
  virtual ~BuffInfo();
  
  BuffInfo(const BuffInfo& from);
  
  inline BuffInfo& operator=(const BuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffInfo& default_instance();
  
  void Swap(BuffInfo* other);
  
  // implements Message ----------------------------------------------
  
  BuffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffInfo& from);
  void MergeFrom(const BuffInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 buff_id = 1;
  inline bool has_buff_id() const;
  inline void clear_buff_id();
  static const int kBuffIdFieldNumber = 1;
  inline ::google::protobuf::int32 buff_id() const;
  inline void set_buff_id(::google::protobuf::int32 value);
  
  // optional int32 buff_value = 2;
  inline bool has_buff_value() const;
  inline void clear_buff_value();
  static const int kBuffValueFieldNumber = 2;
  inline ::google::protobuf::int32 buff_value() const;
  inline void set_buff_value(::google::protobuf::int32 value);
  
  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BuffInfo)
 private:
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_buff_value();
  inline void clear_has_buff_value();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 buff_id_;
  ::google::protobuf::int32 buff_value_;
  ::google::protobuf::int32 left_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static BuffInfo* default_instance_;
};
// -------------------------------------------------------------------

class Fighter : public ::google::protobuf::Message {
 public:
  Fighter();
  virtual ~Fighter();
  
  Fighter(const Fighter& from);
  
  inline Fighter& operator=(const Fighter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fighter& default_instance();
  
  void Swap(Fighter* other);
  
  // implements Message ----------------------------------------------
  
  Fighter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fighter& from);
  void MergeFrom(const Fighter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::int32 camp() const;
  inline void set_camp(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int64 guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional int32 tid = 4;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 4;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);
  
  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 max_hp = 16;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 16;
  inline ::google::protobuf::int32 max_hp() const;
  inline void set_max_hp(::google::protobuf::int32 value);
  
  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 is_player = 7;
  inline bool has_is_player() const;
  inline void clear_is_player();
  static const int kIsPlayerFieldNumber = 7;
  inline ::google::protobuf::int32 is_player() const;
  inline void set_is_player(::google::protobuf::int32 value);
  
  // optional int32 is_team_leader = 8;
  inline bool has_is_team_leader() const;
  inline void clear_is_team_leader();
  static const int kIsTeamLeaderFieldNumber = 8;
  inline ::google::protobuf::int32 is_team_leader() const;
  inline void set_is_team_leader(::google::protobuf::int32 value);
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string owner_name = 15;
  inline bool has_owner_name() const;
  inline void clear_owner_name();
  static const int kOwnerNameFieldNumber = 15;
  inline const ::std::string& owner_name() const;
  inline void set_owner_name(const ::std::string& value);
  inline void set_owner_name(const char* value);
  inline void set_owner_name(const char* value, size_t size);
  inline ::std::string* mutable_owner_name();
  inline ::std::string* release_owner_name();
  
  // optional int32 quality = 10;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 10;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 phy_attack = 11;
  inline bool has_phy_attack() const;
  inline void clear_phy_attack();
  static const int kPhyAttackFieldNumber = 11;
  inline ::google::protobuf::int32 phy_attack() const;
  inline void set_phy_attack(::google::protobuf::int32 value);
  
  // optional int32 phy_defence = 12;
  inline bool has_phy_defence() const;
  inline void clear_phy_defence();
  static const int kPhyDefenceFieldNumber = 12;
  inline ::google::protobuf::int32 phy_defence() const;
  inline void set_phy_defence(::google::protobuf::int32 value);
  
  // optional int32 mag_attack = 13;
  inline bool has_mag_attack() const;
  inline void clear_mag_attack();
  static const int kMagAttackFieldNumber = 13;
  inline ::google::protobuf::int32 mag_attack() const;
  inline void set_mag_attack(::google::protobuf::int32 value);
  
  // optional int32 mag_defence = 14;
  inline bool has_mag_defence() const;
  inline void clear_mag_defence();
  static const int kMagDefenceFieldNumber = 14;
  inline ::google::protobuf::int32 mag_defence() const;
  inline void set_mag_defence(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.Fighter)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_player();
  inline void clear_has_is_player();
  inline void set_has_is_team_leader();
  inline void clear_has_is_team_leader();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_owner_name();
  inline void clear_has_owner_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_phy_attack();
  inline void clear_has_phy_attack();
  inline void set_has_phy_defence();
  inline void clear_has_phy_defence();
  inline void set_has_mag_attack();
  inline void clear_has_mag_attack();
  inline void set_has_mag_defence();
  inline void clear_has_mag_defence();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 camp_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 max_hp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 is_player_;
  ::google::protobuf::int32 is_team_leader_;
  ::std::string* name_;
  ::std::string* owner_name_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 phy_attack_;
  ::google::protobuf::int32 phy_defence_;
  ::google::protobuf::int32 mag_attack_;
  ::google::protobuf::int32 mag_defence_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Fighter* default_instance_;
};
// -------------------------------------------------------------------

class SkillBonus : public ::google::protobuf::Message {
 public:
  SkillBonus();
  virtual ~SkillBonus();
  
  SkillBonus(const SkillBonus& from);
  
  inline SkillBonus& operator=(const SkillBonus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillBonus& default_instance();
  
  void Swap(SkillBonus* other);
  
  // implements Message ----------------------------------------------
  
  SkillBonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillBonus& from);
  void MergeFrom(const SkillBonus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // required int32 skill_level = 3;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 3;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);
  
  // required int32 exp_bonus = 2;
  inline bool has_exp_bonus() const;
  inline void clear_exp_bonus();
  static const int kExpBonusFieldNumber = 2;
  inline ::google::protobuf::int32 exp_bonus() const;
  inline void set_exp_bonus(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SkillBonus)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_exp_bonus();
  inline void clear_has_exp_bonus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::int32 exp_bonus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static SkillBonus* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPhyStrengthInfo : public ::google::protobuf::Message {
 public:
  PlayerPhyStrengthInfo();
  virtual ~PlayerPhyStrengthInfo();
  
  PlayerPhyStrengthInfo(const PlayerPhyStrengthInfo& from);
  
  inline PlayerPhyStrengthInfo& operator=(const PlayerPhyStrengthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPhyStrengthInfo& default_instance();
  
  void Swap(PlayerPhyStrengthInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerPhyStrengthInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPhyStrengthInfo& from);
  void MergeFrom(const PlayerPhyStrengthInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 phy_strength = 1 [default = 0];
  inline bool has_phy_strength() const;
  inline void clear_phy_strength();
  static const int kPhyStrengthFieldNumber = 1;
  inline ::google::protobuf::int32 phy_strength() const;
  inline void set_phy_strength(::google::protobuf::int32 value);
  
  // optional int32 phy_strength_limit = 2 [default = 0];
  inline bool has_phy_strength_limit() const;
  inline void clear_phy_strength_limit();
  static const int kPhyStrengthLimitFieldNumber = 2;
  inline ::google::protobuf::int32 phy_strength_limit() const;
  inline void set_phy_strength_limit(::google::protobuf::int32 value);
  
  // optional int32 extra_phy_strength = 3 [default = 0];
  inline bool has_extra_phy_strength() const;
  inline void clear_extra_phy_strength();
  static const int kExtraPhyStrengthFieldNumber = 3;
  inline ::google::protobuf::int32 extra_phy_strength() const;
  inline void set_extra_phy_strength(::google::protobuf::int32 value);
  
  // optional int32 extra_phy_strength_limit = 4 [default = 0];
  inline bool has_extra_phy_strength_limit() const;
  inline void clear_extra_phy_strength_limit();
  static const int kExtraPhyStrengthLimitFieldNumber = 4;
  inline ::google::protobuf::int32 extra_phy_strength_limit() const;
  inline void set_extra_phy_strength_limit(::google::protobuf::int32 value);
  
  // optional int32 time_for_recover_phy_strength = 5 [default = 0];
  inline bool has_time_for_recover_phy_strength() const;
  inline void clear_time_for_recover_phy_strength();
  static const int kTimeForRecoverPhyStrengthFieldNumber = 5;
  inline ::google::protobuf::int32 time_for_recover_phy_strength() const;
  inline void set_time_for_recover_phy_strength(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerPhyStrengthInfo)
 private:
  inline void set_has_phy_strength();
  inline void clear_has_phy_strength();
  inline void set_has_phy_strength_limit();
  inline void clear_has_phy_strength_limit();
  inline void set_has_extra_phy_strength();
  inline void clear_has_extra_phy_strength();
  inline void set_has_extra_phy_strength_limit();
  inline void clear_has_extra_phy_strength_limit();
  inline void set_has_time_for_recover_phy_strength();
  inline void clear_has_time_for_recover_phy_strength();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 phy_strength_;
  ::google::protobuf::int32 phy_strength_limit_;
  ::google::protobuf::int32 extra_phy_strength_;
  ::google::protobuf::int32 extra_phy_strength_limit_;
  ::google::protobuf::int32 time_for_recover_phy_strength_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerPhyStrengthInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfo : public ::google::protobuf::Message {
 public:
  PlayerInfo();
  virtual ~PlayerInfo();
  
  PlayerInfo(const PlayerInfo& from);
  
  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfo& default_instance();
  
  void Swap(PlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional int32 tid = 16;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 16;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);
  
  // optional int32 map_id = 2 [default = 1];
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 map_x = 3 [default = 1];
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 3;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);
  
  // optional int32 map_y = 4 [default = 1];
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 4;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);
  
  // optional int32 vip_level = 5 [default = 0];
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 5;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // optional .protocols.common.Profession job = 6 [default = WIZARD];
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 6;
  inline protocols::common::Profession job() const;
  inline void set_job(protocols::common::Profession value);
  
  // optional int32 job_level = 7 [default = 1];
  inline bool has_job_level() const;
  inline void clear_job_level();
  static const int kJobLevelFieldNumber = 7;
  inline ::google::protobuf::int32 job_level() const;
  inline void set_job_level(::google::protobuf::int32 value);
  
  // optional int32 flag = 8 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .protocols.common.Gender gender = 10 [default = MALE];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 10;
  inline protocols::common::Gender gender() const;
  inline void set_gender(protocols::common::Gender value);
  
  // optional int32 hp = 11 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 11;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 exp = 12 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 12;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 vip_end_sec = 13 [default = 0];
  inline bool has_vip_end_sec() const;
  inline void clear_vip_end_sec();
  static const int kVipEndSecFieldNumber = 13;
  inline ::google::protobuf::int32 vip_end_sec() const;
  inline void set_vip_end_sec(::google::protobuf::int32 value);
  
  // optional int32 lineup_capacity = 21 [default = 0];
  inline bool has_lineup_capacity() const;
  inline void clear_lineup_capacity();
  static const int kLineupCapacityFieldNumber = 21;
  inline ::google::protobuf::int32 lineup_capacity() const;
  inline void set_lineup_capacity(::google::protobuf::int32 value);
  
  // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 15;
  inline protocols::common::GameStatus status() const;
  inline void set_status(protocols::common::GameStatus value);
  
  // optional int64 leader_guid = 17;
  inline bool has_leader_guid() const;
  inline void clear_leader_guid();
  static const int kLeaderGuidFieldNumber = 17;
  inline ::google::protobuf::int64 leader_guid() const;
  inline void set_leader_guid(::google::protobuf::int64 value);
  
  // optional int32 server_id = 20;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 20;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional int32 guild_id = 18 [default = 0];
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 18;
  inline ::google::protobuf::int32 guild_id() const;
  inline void set_guild_id(::google::protobuf::int32 value);
  
  // optional string guild_name = 19 [default = ""];
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 19;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  
  // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
  inline bool has_player_phy_strength() const;
  inline void clear_player_phy_strength();
  static const int kPlayerPhyStrengthFieldNumber = 23;
  inline const ::protocols::common::PlayerPhyStrengthInfo& player_phy_strength() const;
  inline ::protocols::common::PlayerPhyStrengthInfo* mutable_player_phy_strength();
  inline ::protocols::common::PlayerPhyStrengthInfo* release_player_phy_strength();
  
  // optional int32 map_instance_id = 22 [default = 0];
  inline bool has_map_instance_id() const;
  inline void clear_map_instance_id();
  static const int kMapInstanceIdFieldNumber = 22;
  inline ::google::protobuf::int32 map_instance_id() const;
  inline void set_map_instance_id(::google::protobuf::int32 value);
  
  // optional int64 follow_guid = 24 [default = 0];
  inline bool has_follow_guid() const;
  inline void clear_follow_guid();
  static const int kFollowGuidFieldNumber = 24;
  inline ::google::protobuf::int64 follow_guid() const;
  inline void set_follow_guid(::google::protobuf::int64 value);
  
  // optional int32 direction = 25 [default = 1];
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 25;
  inline ::google::protobuf::int32 direction() const;
  inline void set_direction(::google::protobuf::int32 value);
  
  // optional int64 role_create_time = 26;
  inline bool has_role_create_time() const;
  inline void clear_role_create_time();
  static const int kRoleCreateTimeFieldNumber = 26;
  inline ::google::protobuf::int64 role_create_time() const;
  inline void set_role_create_time(::google::protobuf::int64 value);
  
  // optional int32 wing_tid = 27 [default = 0];
  inline bool has_wing_tid() const;
  inline void clear_wing_tid();
  static const int kWingTidFieldNumber = 27;
  inline ::google::protobuf::int32 wing_tid() const;
  inline void set_wing_tid(::google::protobuf::int32 value);
  
  // optional int32 guild_title = 28 [default = 0];
  inline bool has_guild_title() const;
  inline void clear_guild_title();
  static const int kGuildTitleFieldNumber = 28;
  inline ::google::protobuf::int32 guild_title() const;
  inline void set_guild_title(::google::protobuf::int32 value);
  
  // optional int32 title = 29 [default = 0];
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 29;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);
  
  // optional int32 practice_exp = 30 [default = 0];
  inline bool has_practice_exp() const;
  inline void clear_practice_exp();
  static const int kPracticeExpFieldNumber = 30;
  inline ::google::protobuf::int32 practice_exp() const;
  inline void set_practice_exp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_job_level();
  inline void clear_has_job_level();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_vip_end_sec();
  inline void clear_has_vip_end_sec();
  inline void set_has_lineup_capacity();
  inline void clear_has_lineup_capacity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_leader_guid();
  inline void clear_has_leader_guid();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_player_phy_strength();
  inline void clear_has_player_phy_strength();
  inline void set_has_map_instance_id();
  inline void clear_has_map_instance_id();
  inline void set_has_follow_guid();
  inline void clear_has_follow_guid();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_role_create_time();
  inline void clear_has_role_create_time();
  inline void set_has_wing_tid();
  inline void clear_has_wing_tid();
  inline void set_has_guild_title();
  inline void clear_has_guild_title();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_practice_exp();
  inline void clear_has_practice_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::int32 map_y_;
  ::google::protobuf::int32 vip_level_;
  int job_;
  ::google::protobuf::int32 job_level_;
  ::google::protobuf::int32 flag_;
  ::std::string* name_;
  int gender_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 vip_end_sec_;
  ::google::protobuf::int32 lineup_capacity_;
  int status_;
  ::google::protobuf::int64 leader_guid_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 guild_id_;
  ::std::string* guild_name_;
  ::protocols::common::PlayerPhyStrengthInfo* player_phy_strength_;
  ::google::protobuf::int64 follow_guid_;
  ::google::protobuf::int32 map_instance_id_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int64 role_create_time_;
  ::google::protobuf::int32 wing_tid_;
  ::google::protobuf::int32 guild_title_;
  ::google::protobuf::int32 title_;
  ::google::protobuf::int32 practice_exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class NPCInfo : public ::google::protobuf::Message {
 public:
  NPCInfo();
  virtual ~NPCInfo();
  
  NPCInfo(const NPCInfo& from);
  
  inline NPCInfo& operator=(const NPCInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCInfo& default_instance();
  
  void Swap(NPCInfo* other);
  
  // implements Message ----------------------------------------------
  
  NPCInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCInfo& from);
  void MergeFrom(const NPCInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 npc_id = 1;
  inline bool has_npc_id() const;
  inline void clear_npc_id();
  static const int kNpcIdFieldNumber = 1;
  inline ::google::protobuf::int32 npc_id() const;
  inline void set_npc_id(::google::protobuf::int32 value);
  
  // optional int32 npc_tid = 2;
  inline bool has_npc_tid() const;
  inline void clear_npc_tid();
  static const int kNpcTidFieldNumber = 2;
  inline ::google::protobuf::int32 npc_tid() const;
  inline void set_npc_tid(::google::protobuf::int32 value);
  
  // optional string npc_name = 3;
  inline bool has_npc_name() const;
  inline void clear_npc_name();
  static const int kNpcNameFieldNumber = 3;
  inline const ::std::string& npc_name() const;
  inline void set_npc_name(const ::std::string& value);
  inline void set_npc_name(const char* value);
  inline void set_npc_name(const char* value, size_t size);
  inline ::std::string* mutable_npc_name();
  inline ::std::string* release_npc_name();
  
  // optional int32 npc_level = 4;
  inline bool has_npc_level() const;
  inline void clear_npc_level();
  static const int kNpcLevelFieldNumber = 4;
  inline ::google::protobuf::int32 npc_level() const;
  inline void set_npc_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.NPCInfo)
 private:
  inline void set_has_npc_id();
  inline void clear_has_npc_id();
  inline void set_has_npc_tid();
  inline void clear_has_npc_tid();
  inline void set_has_npc_name();
  inline void clear_has_npc_name();
  inline void set_has_npc_level();
  inline void clear_has_npc_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 npc_id_;
  ::google::protobuf::int32 npc_tid_;
  ::std::string* npc_name_;
  ::google::protobuf::int32 npc_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static NPCInfo* default_instance_;
};
// -------------------------------------------------------------------

class BaojuInfo : public ::google::protobuf::Message {
 public:
  BaojuInfo();
  virtual ~BaojuInfo();
  
  BaojuInfo(const BaojuInfo& from);
  
  inline BaojuInfo& operator=(const BaojuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaojuInfo& default_instance();
  
  void Swap(BaojuInfo* other);
  
  // implements Message ----------------------------------------------
  
  BaojuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaojuInfo& from);
  void MergeFrom(const BaojuInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BaojuInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static BaojuInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message {
 public:
  ItemInfo();
  virtual ~ItemInfo();
  
  ItemInfo(const ItemInfo& from);
  
  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();
  
  void Swap(ItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int64 item_id() const;
  inline void set_item_id(::google::protobuf::int64 value);
  
  // optional int32 count = 2 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // optional int32 expired = 3 [default = 0];
  inline bool has_expired() const;
  inline void clear_expired();
  static const int kExpiredFieldNumber = 3;
  inline ::google::protobuf::int32 expired() const;
  inline void set_expired(::google::protobuf::int32 value);
  
  // optional int32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional int32 pos_type = 5;
  inline bool has_pos_type() const;
  inline void clear_pos_type();
  static const int kPosTypeFieldNumber = 5;
  inline ::google::protobuf::int32 pos_type() const;
  inline void set_pos_type(::google::protobuf::int32 value);
  
  // optional bool bind_flag = 6 [default = false];
  inline bool has_bind_flag() const;
  inline void clear_bind_flag();
  static const int kBindFlagFieldNumber = 6;
  inline bool bind_flag() const;
  inline void set_bind_flag(bool value);
  
  // optional int32 strength_level = 7 [default = 0];
  inline bool has_strength_level() const;
  inline void clear_strength_level();
  static const int kStrengthLevelFieldNumber = 7;
  inline ::google::protobuf::int32 strength_level() const;
  inline void set_strength_level(::google::protobuf::int32 value);
  
  // optional int32 mark = 8 [default = 0];
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 8;
  inline ::google::protobuf::int32 mark() const;
  inline void set_mark(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.ItemInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_expired();
  inline void clear_has_expired();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_pos_type();
  inline void clear_has_pos_type();
  inline void set_has_bind_flag();
  inline void clear_has_bind_flag();
  inline void set_has_strength_level();
  inline void clear_has_strength_level();
  inline void set_has_mark();
  inline void clear_has_mark();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 item_id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 expired_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 pos_type_;
  bool bind_flag_;
  ::google::protobuf::int32 strength_level_;
  ::google::protobuf::int32 mark_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillInfo : public ::google::protobuf::Message {
 public:
  SkillInfo();
  virtual ~SkillInfo();
  
  SkillInfo(const SkillInfo& from);
  
  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillInfo& default_instance();
  
  void Swap(SkillInfo* other);
  
  // implements Message ----------------------------------------------
  
  SkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillInfo& from);
  void MergeFrom(const SkillInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 equip_slot_index = 3 [default = -1];
  inline bool has_equip_slot_index() const;
  inline void clear_equip_slot_index();
  static const int kEquipSlotIndexFieldNumber = 3;
  inline ::google::protobuf::int32 equip_slot_index() const;
  inline void set_equip_slot_index(::google::protobuf::int32 value);
  
  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 is_practicing = 5 [default = 0];
  inline bool has_is_practicing() const;
  inline void clear_is_practicing();
  static const int kIsPracticingFieldNumber = 5;
  inline ::google::protobuf::int32 is_practicing() const;
  inline void set_is_practicing(::google::protobuf::int32 value);
  
  // optional int32 delta_time = 6;
  inline bool has_delta_time() const;
  inline void clear_delta_time();
  static const int kDeltaTimeFieldNumber = 6;
  inline ::google::protobuf::int32 delta_time() const;
  inline void set_delta_time(::google::protobuf::int32 value);
  
  // optional int32 delta_add_exp = 7;
  inline bool has_delta_add_exp() const;
  inline void clear_delta_add_exp();
  static const int kDeltaAddExpFieldNumber = 7;
  inline ::google::protobuf::int32 delta_add_exp() const;
  inline void set_delta_add_exp(::google::protobuf::int32 value);
  
  // optional int32 practice_time = 8;
  inline bool has_practice_time() const;
  inline void clear_practice_time();
  static const int kPracticeTimeFieldNumber = 8;
  inline ::google::protobuf::int32 practice_time() const;
  inline void set_practice_time(::google::protobuf::int32 value);
  
  // optional int32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 time_left_for_research = 10;
  inline bool has_time_left_for_research() const;
  inline void clear_time_left_for_research();
  static const int kTimeLeftForResearchFieldNumber = 10;
  inline ::google::protobuf::int32 time_left_for_research() const;
  inline void set_time_left_for_research(::google::protobuf::int32 value);
  
  // optional int32 is_used = 11;
  inline bool has_is_used() const;
  inline void clear_is_used();
  static const int kIsUsedFieldNumber = 11;
  inline ::google::protobuf::int32 is_used() const;
  inline void set_is_used(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SkillInfo)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_equip_slot_index();
  inline void clear_has_equip_slot_index();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_is_practicing();
  inline void clear_has_is_practicing();
  inline void set_has_delta_time();
  inline void clear_has_delta_time();
  inline void set_has_delta_add_exp();
  inline void clear_has_delta_add_exp();
  inline void set_has_practice_time();
  inline void clear_has_practice_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_time_left_for_research();
  inline void clear_has_time_left_for_research();
  inline void set_has_is_used();
  inline void clear_has_is_used();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 equip_slot_index_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 is_practicing_;
  ::google::protobuf::int32 delta_time_;
  ::google::protobuf::int32 delta_add_exp_;
  ::google::protobuf::int32 practice_time_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 time_left_for_research_;
  ::google::protobuf::int32 is_used_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static SkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class BattleSkillInfo : public ::google::protobuf::Message {
 public:
  BattleSkillInfo();
  virtual ~BattleSkillInfo();
  
  BattleSkillInfo(const BattleSkillInfo& from);
  
  inline BattleSkillInfo& operator=(const BattleSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleSkillInfo& default_instance();
  
  void Swap(BattleSkillInfo* other);
  
  // implements Message ----------------------------------------------
  
  BattleSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleSkillInfo& from);
  void MergeFrom(const BattleSkillInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);
  
  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 battle_skill_type = 3 [default = 2];
  inline bool has_battle_skill_type() const;
  inline void clear_battle_skill_type();
  static const int kBattleSkillTypeFieldNumber = 3;
  inline ::google::protobuf::int32 battle_skill_type() const;
  inline void set_battle_skill_type(::google::protobuf::int32 value);
  
  // optional int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BattleSkillInfo)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battle_skill_type();
  inline void clear_has_battle_skill_type();
  inline void set_has_exp();
  inline void clear_has_exp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 battle_skill_type_;
  ::google::protobuf::int32 exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static BattleSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class BankInfo : public ::google::protobuf::Message {
 public:
  BankInfo();
  virtual ~BankInfo();
  
  BankInfo(const BankInfo& from);
  
  inline BankInfo& operator=(const BankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BankInfo& default_instance();
  
  void Swap(BankInfo* other);
  
  // implements Message ----------------------------------------------
  
  BankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BankInfo& from);
  void MergeFrom(const BankInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 coin = 1;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 1;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);
  
  // optional int32 coupon = 2;
  inline bool has_coupon() const;
  inline void clear_coupon();
  static const int kCouponFieldNumber = 2;
  inline ::google::protobuf::int32 coupon() const;
  inline void set_coupon(::google::protobuf::int32 value);
  
  // optional int32 diamond = 3;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  inline ::google::protobuf::int32 diamond() const;
  inline void set_diamond(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BankInfo)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_coupon();
  inline void clear_has_coupon();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 coupon_;
  ::google::protobuf::int32 diamond_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static BankInfo* default_instance_;
};
// -------------------------------------------------------------------

class YinglingInfo : public ::google::protobuf::Message {
 public:
  YinglingInfo();
  virtual ~YinglingInfo();
  
  YinglingInfo(const YinglingInfo& from);
  
  inline YinglingInfo& operator=(const YinglingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YinglingInfo& default_instance();
  
  void Swap(YinglingInfo* other);
  
  // implements Message ----------------------------------------------
  
  YinglingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YinglingInfo& from);
  void MergeFrom(const YinglingInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required int32 tid = 12;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 12;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);
  
  // optional .protocols.common.Profession job = 2 [default = WIZARD];
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline protocols::common::Profession job() const;
  inline void set_job(protocols::common::Profession value);
  
  // optional .protocols.common.Gender gender = 15 [default = MALE];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 15;
  inline protocols::common::Gender gender() const;
  inline void set_gender(protocols::common::Gender value);
  
  // optional int32 job_level = 3 [default = 0];
  inline bool has_job_level() const;
  inline void clear_job_level();
  static const int kJobLevelFieldNumber = 3;
  inline ::google::protobuf::int32 job_level() const;
  inline void set_job_level(::google::protobuf::int32 value);
  
  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 quality = 9 [default = 0];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 9;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 fight_capacity = 10 [default = 0];
  inline bool has_fight_capacity() const;
  inline void clear_fight_capacity();
  static const int kFightCapacityFieldNumber = 10;
  inline ::google::protobuf::int32 fight_capacity() const;
  inline void set_fight_capacity(::google::protobuf::int32 value);
  
  // optional int32 is_in_fight_lineup = 16 [default = 0];
  inline bool has_is_in_fight_lineup() const;
  inline void clear_is_in_fight_lineup();
  static const int kIsInFightLineupFieldNumber = 16;
  inline ::google::protobuf::int32 is_in_fight_lineup() const;
  inline void set_is_in_fight_lineup(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.YinglingInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_job_level();
  inline void clear_has_job_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_fight_capacity();
  inline void clear_has_fight_capacity();
  inline void set_has_is_in_fight_lineup();
  inline void clear_has_is_in_fight_lineup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 tid_;
  int job_;
  int gender_;
  ::google::protobuf::int32 job_level_;
  ::std::string* name_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 fight_capacity_;
  ::google::protobuf::int32 is_in_fight_lineup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YinglingInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuddyDetailInfo : public ::google::protobuf::Message {
 public:
  BuddyDetailInfo();
  virtual ~BuddyDetailInfo();
  
  BuddyDetailInfo(const BuddyDetailInfo& from);
  
  inline BuddyDetailInfo& operator=(const BuddyDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuddyDetailInfo& default_instance();
  
  void Swap(BuddyDetailInfo* other);
  
  // implements Message ----------------------------------------------
  
  BuddyDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuddyDetailInfo& from);
  void MergeFrom(const BuddyDetailInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 8;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 8;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required string name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  inline int total_attr_list_size() const;
  inline void clear_total_attr_list();
  static const int kTotalAttrListFieldNumber = 5;
  inline const ::protocols::common::AttributeData& total_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_total_attr_list(int index);
  inline ::protocols::common::AttributeData* add_total_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      total_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_total_attr_list();
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  inline int bare_attr_list_size() const;
  inline void clear_bare_attr_list();
  static const int kBareAttrListFieldNumber = 6;
  inline const ::protocols::common::AttributeData& bare_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_bare_attr_list(int index);
  inline ::protocols::common::AttributeData* add_bare_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      bare_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_bare_attr_list();
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 7;
  inline const ::protocols::common::EquipInfo& equip_list(int index) const;
  inline ::protocols::common::EquipInfo* mutable_equip_list(int index);
  inline ::protocols::common::EquipInfo* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipInfo >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipInfo >*
      mutable_equip_list();
  
  // optional int32 exp = 15 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 15;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 hp = 16 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 16;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 cur_soul = 17 [default = 0];
  inline bool has_cur_soul() const;
  inline void clear_cur_soul();
  static const int kCurSoulFieldNumber = 17;
  inline ::google::protobuf::int32 cur_soul() const;
  inline void set_cur_soul(::google::protobuf::int32 value);
  
  // optional int32 max_soul = 18 [default = 0];
  inline bool has_max_soul() const;
  inline void clear_max_soul();
  static const int kMaxSoulFieldNumber = 18;
  inline ::google::protobuf::int32 max_soul() const;
  inline void set_max_soul(::google::protobuf::int32 value);
  
  // optional int32 quality = 19 [default = 0];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 19;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 fight_capacity = 21 [default = 0];
  inline bool has_fight_capacity() const;
  inline void clear_fight_capacity();
  static const int kFightCapacityFieldNumber = 21;
  inline ::google::protobuf::int32 fight_capacity() const;
  inline void set_fight_capacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BuddyDetailInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_cur_soul();
  inline void clear_has_cur_soul();
  inline void set_has_max_soul();
  inline void clear_has_max_soul();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_fight_capacity();
  inline void clear_has_fight_capacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > total_attr_list_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > bare_attr_list_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipInfo > equip_list_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 cur_soul_;
  ::google::protobuf::int32 max_soul_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 fight_capacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static BuddyDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBIntPair : public ::google::protobuf::Message {
 public:
  PBIntPair();
  virtual ~PBIntPair();
  
  PBIntPair(const PBIntPair& from);
  
  inline PBIntPair& operator=(const PBIntPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBIntPair& default_instance();
  
  void Swap(PBIntPair* other);
  
  // implements Message ----------------------------------------------
  
  PBIntPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBIntPair& from);
  void MergeFrom(const PBIntPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PBIntPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PBIntPair* default_instance_;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::Message {
 public:
  Relation();
  virtual ~Relation();
  
  Relation(const Relation& from);
  
  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation& default_instance();
  
  void Swap(Relation* other);
  
  // implements Message ----------------------------------------------
  
  Relation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required int32 relation = 2;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 2;
  inline ::google::protobuf::int32 relation() const;
  inline void set_relation(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.Relation)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_relation();
  inline void clear_has_relation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 relation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Relation* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRelationData : public ::google::protobuf::Message {
 public:
  PlayerRelationData();
  virtual ~PlayerRelationData();
  
  PlayerRelationData(const PlayerRelationData& from);
  
  inline PlayerRelationData& operator=(const PlayerRelationData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRelationData& default_instance();
  
  void Swap(PlayerRelationData* other);
  
  // implements Message ----------------------------------------------
  
  PlayerRelationData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRelationData& from);
  void MergeFrom(const PlayerRelationData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.Relation friend = 1;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::protocols::common::Relation& friend_(int index) const;
  inline ::protocols::common::Relation* mutable_friend_(int index);
  inline ::protocols::common::Relation* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Relation >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Relation >*
      mutable_friend_();
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerRelationData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::Relation > friend__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerRelationData* default_instance_;
};
// -------------------------------------------------------------------

class InstanceInfo : public ::google::protobuf::Message {
 public:
  InstanceInfo();
  virtual ~InstanceInfo();
  
  InstanceInfo(const InstanceInfo& from);
  
  inline InstanceInfo& operator=(const InstanceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceInfo& default_instance();
  
  void Swap(InstanceInfo* other);
  
  // implements Message ----------------------------------------------
  
  InstanceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceInfo& from);
  void MergeFrom(const InstanceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);
  
  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.InstanceInfo)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 grade_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static InstanceInfo* default_instance_;
};
// -------------------------------------------------------------------

class InstanceDetail : public ::google::protobuf::Message {
 public:
  InstanceDetail();
  virtual ~InstanceDetail();
  
  InstanceDetail(const InstanceDetail& from);
  
  inline InstanceDetail& operator=(const InstanceDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceDetail& default_instance();
  
  void Swap(InstanceDetail* other);
  
  // implements Message ----------------------------------------------
  
  InstanceDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceDetail& from);
  void MergeFrom(const InstanceDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);
  
  // optional int32 grade = 2;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 2;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);
  
  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 map_x = 4;
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 4;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);
  
  // optional int32 map_y = 5;
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 5;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);
  
  // repeated int32 monster_list = 6;
  inline int monster_list_size() const;
  inline void clear_monster_list();
  static const int kMonsterListFieldNumber = 6;
  inline ::google::protobuf::int32 monster_list(int index) const;
  inline void set_monster_list(int index, ::google::protobuf::int32 value);
  inline void add_monster_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monster_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monster_list();
  
  // repeated int32 killed_list = 7;
  inline int killed_list_size() const;
  inline void clear_killed_list();
  static const int kKilledListFieldNumber = 7;
  inline ::google::protobuf::int32 killed_list(int index) const;
  inline void set_killed_list(int index, ::google::protobuf::int32 value);
  inline void add_killed_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      killed_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_killed_list();
  
  // optional int32 last_transport_id = 8;
  inline bool has_last_transport_id() const;
  inline void clear_last_transport_id();
  static const int kLastTransportIdFieldNumber = 8;
  inline ::google::protobuf::int32 last_transport_id() const;
  inline void set_last_transport_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.InstanceDetail)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  inline void set_has_last_transport_id();
  inline void clear_has_last_transport_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 instance_id_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monster_list_;
  ::google::protobuf::int32 map_y_;
  ::google::protobuf::int32 last_transport_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > killed_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static InstanceDetail* default_instance_;
};
// -------------------------------------------------------------------

class MonsterInfo : public ::google::protobuf::Message {
 public:
  MonsterInfo();
  virtual ~MonsterInfo();
  
  MonsterInfo(const MonsterInfo& from);
  
  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterInfo& default_instance();
  
  void Swap(MonsterInfo* other);
  
  // implements Message ----------------------------------------------
  
  MonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterInfo& from);
  void MergeFrom(const MonsterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 hp = 3 [default = 0];
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 level = 4 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 drop_id = 5 [default = 0];
  inline bool has_drop_id() const;
  inline void clear_drop_id();
  static const int kDropIdFieldNumber = 5;
  inline ::google::protobuf::int32 drop_id() const;
  inline void set_drop_id(::google::protobuf::int32 value);
  
  // optional int32 exp = 6 [default = 0];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional bytes model_id = 7;
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 7;
  inline const ::std::string& model_id() const;
  inline void set_model_id(const ::std::string& value);
  inline void set_model_id(const char* value);
  inline void set_model_id(const void* value, size_t size);
  inline ::std::string* mutable_model_id();
  inline ::std::string* release_model_id();
  
  // optional bytes icon_id = 8;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 8;
  inline const ::std::string& icon_id() const;
  inline void set_icon_id(const ::std::string& value);
  inline void set_icon_id(const char* value);
  inline void set_icon_id(const void* value, size_t size);
  inline ::std::string* mutable_icon_id();
  inline ::std::string* release_icon_id();
  
  // @@protoc_insertion_point(class_scope:protocols.common.MonsterInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_drop_id();
  inline void clear_has_drop_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_model_id();
  inline void clear_has_model_id();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 drop_id_;
  ::google::protobuf::int32 exp_;
  ::std::string* model_id_;
  ::std::string* icon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static MonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class WingSpiritInfo : public ::google::protobuf::Message {
 public:
  WingSpiritInfo();
  virtual ~WingSpiritInfo();
  
  WingSpiritInfo(const WingSpiritInfo& from);
  
  inline WingSpiritInfo& operator=(const WingSpiritInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingSpiritInfo& default_instance();
  
  void Swap(WingSpiritInfo* other);
  
  // implements Message ----------------------------------------------
  
  WingSpiritInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingSpiritInfo& from);
  void MergeFrom(const WingSpiritInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int64 item_id() const;
  inline void set_item_id(::google::protobuf::int64 value);
  
  // optional int32 t_id = 9;
  inline bool has_t_id() const;
  inline void clear_t_id();
  static const int kTIdFieldNumber = 9;
  inline ::google::protobuf::int32 t_id() const;
  inline void set_t_id(::google::protobuf::int32 value);
  
  // optional bool is_fragment = 2;
  inline bool has_is_fragment() const;
  inline void clear_is_fragment();
  static const int kIsFragmentFieldNumber = 2;
  inline bool is_fragment() const;
  inline void set_is_fragment(bool value);
  
  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 self_exp = 4;
  inline bool has_self_exp() const;
  inline void clear_self_exp();
  static const int kSelfExpFieldNumber = 4;
  inline ::google::protobuf::int32 self_exp() const;
  inline void set_self_exp(::google::protobuf::int32 value);
  
  // optional int32 add_exp = 5;
  inline bool has_add_exp() const;
  inline void clear_add_exp();
  static const int kAddExpFieldNumber = 5;
  inline ::google::protobuf::int32 add_exp() const;
  inline void set_add_exp(::google::protobuf::int32 value);
  
  // optional int32 max_exp = 6;
  inline bool has_max_exp() const;
  inline void clear_max_exp();
  static const int kMaxExpFieldNumber = 6;
  inline ::google::protobuf::int32 max_exp() const;
  inline void set_max_exp(::google::protobuf::int32 value);
  
  // repeated .protocols.common.AttributeData attr_plus = 7;
  inline int attr_plus_size() const;
  inline void clear_attr_plus();
  static const int kAttrPlusFieldNumber = 7;
  inline const ::protocols::common::AttributeData& attr_plus(int index) const;
  inline ::protocols::common::AttributeData* mutable_attr_plus(int index);
  inline ::protocols::common::AttributeData* add_attr_plus();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      attr_plus() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_attr_plus();
  
  // optional int32 index = 8;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 8;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.WingSpiritInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_t_id();
  inline void clear_has_t_id();
  inline void set_has_is_fragment();
  inline void clear_has_is_fragment();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_self_exp();
  inline void clear_has_self_exp();
  inline void set_has_add_exp();
  inline void clear_has_add_exp();
  inline void set_has_max_exp();
  inline void clear_has_max_exp();
  inline void set_has_index();
  inline void clear_has_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 item_id_;
  ::google::protobuf::int32 t_id_;
  bool is_fragment_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 self_exp_;
  ::google::protobuf::int32 add_exp_;
  ::google::protobuf::int32 max_exp_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > attr_plus_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static WingSpiritInfo* default_instance_;
};
// -------------------------------------------------------------------

class WingSlotInfo : public ::google::protobuf::Message {
 public:
  WingSlotInfo();
  virtual ~WingSlotInfo();
  
  WingSlotInfo(const WingSlotInfo& from);
  
  inline WingSlotInfo& operator=(const WingSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingSlotInfo& default_instance();
  
  void Swap(WingSlotInfo* other);
  
  // implements Message ----------------------------------------------
  
  WingSlotInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingSlotInfo& from);
  void MergeFrom(const WingSlotInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 slot_num = 1;
  inline bool has_slot_num() const;
  inline void clear_slot_num();
  static const int kSlotNumFieldNumber = 1;
  inline ::google::protobuf::int32 slot_num() const;
  inline void set_slot_num(::google::protobuf::int32 value);
  
  // optional .protocols.common.WingSpiritInfo spirit = 2;
  inline bool has_spirit() const;
  inline void clear_spirit();
  static const int kSpiritFieldNumber = 2;
  inline const ::protocols::common::WingSpiritInfo& spirit() const;
  inline ::protocols::common::WingSpiritInfo* mutable_spirit();
  inline ::protocols::common::WingSpiritInfo* release_spirit();
  
  // @@protoc_insertion_point(class_scope:protocols.common.WingSlotInfo)
 private:
  inline void set_has_slot_num();
  inline void clear_has_slot_num();
  inline void set_has_spirit();
  inline void clear_has_spirit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::WingSpiritInfo* spirit_;
  ::google::protobuf::int32 slot_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static WingSlotInfo* default_instance_;
};
// -------------------------------------------------------------------

class WingItemInfo : public ::google::protobuf::Message {
 public:
  WingItemInfo();
  virtual ~WingItemInfo();
  
  WingItemInfo(const WingItemInfo& from);
  
  inline WingItemInfo& operator=(const WingItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingItemInfo& default_instance();
  
  void Swap(WingItemInfo* other);
  
  // implements Message ----------------------------------------------
  
  WingItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingItemInfo& from);
  void MergeFrom(const WingItemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 wing_tid = 1;
  inline bool has_wing_tid() const;
  inline void clear_wing_tid();
  static const int kWingTidFieldNumber = 1;
  inline ::google::protobuf::int32 wing_tid() const;
  inline void set_wing_tid(::google::protobuf::int32 value);
  
  // optional int64 wing_item_id = 5;
  inline bool has_wing_item_id() const;
  inline void clear_wing_item_id();
  static const int kWingItemIdFieldNumber = 5;
  inline ::google::protobuf::int64 wing_item_id() const;
  inline void set_wing_item_id(::google::protobuf::int64 value);
  
  // optional int64 equipt_guid = 2;
  inline bool has_equipt_guid() const;
  inline void clear_equipt_guid();
  static const int kEquiptGuidFieldNumber = 2;
  inline ::google::protobuf::int64 equipt_guid() const;
  inline void set_equipt_guid(::google::protobuf::int64 value);
  
  // repeated .protocols.common.WingSlotInfo slots = 3;
  inline int slots_size() const;
  inline void clear_slots();
  static const int kSlotsFieldNumber = 3;
  inline const ::protocols::common::WingSlotInfo& slots(int index) const;
  inline ::protocols::common::WingSlotInfo* mutable_slots(int index);
  inline ::protocols::common::WingSlotInfo* add_slots();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSlotInfo >&
      slots() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSlotInfo >*
      mutable_slots();
  
  // optional int64 point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline ::google::protobuf::int64 point() const;
  inline void set_point(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.WingItemInfo)
 private:
  inline void set_has_wing_tid();
  inline void clear_has_wing_tid();
  inline void set_has_wing_item_id();
  inline void clear_has_wing_item_id();
  inline void set_has_equipt_guid();
  inline void clear_has_equipt_guid();
  inline void set_has_point();
  inline void clear_has_point();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 wing_item_id_;
  ::google::protobuf::int64 equipt_guid_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSlotInfo > slots_;
  ::google::protobuf::int64 point_;
  ::google::protobuf::int32 wing_tid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static WingItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class WingSpiritBag : public ::google::protobuf::Message {
 public:
  WingSpiritBag();
  virtual ~WingSpiritBag();
  
  WingSpiritBag(const WingSpiritBag& from);
  
  inline WingSpiritBag& operator=(const WingSpiritBag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingSpiritBag& default_instance();
  
  void Swap(WingSpiritBag* other);
  
  // implements Message ----------------------------------------------
  
  WingSpiritBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingSpiritBag& from);
  void MergeFrom(const WingSpiritBag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 max_num = 1;
  inline bool has_max_num() const;
  inline void clear_max_num();
  static const int kMaxNumFieldNumber = 1;
  inline ::google::protobuf::int32 max_num() const;
  inline void set_max_num(::google::protobuf::int32 value);
  
  // optional int32 open_num = 2;
  inline bool has_open_num() const;
  inline void clear_open_num();
  static const int kOpenNumFieldNumber = 2;
  inline ::google::protobuf::int32 open_num() const;
  inline void set_open_num(::google::protobuf::int32 value);
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  inline int spirits_size() const;
  inline void clear_spirits();
  static const int kSpiritsFieldNumber = 3;
  inline const ::protocols::common::WingSpiritInfo& spirits(int index) const;
  inline ::protocols::common::WingSpiritInfo* mutable_spirits(int index);
  inline ::protocols::common::WingSpiritInfo* add_spirits();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSpiritInfo >&
      spirits() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSpiritInfo >*
      mutable_spirits();
  
  // @@protoc_insertion_point(class_scope:protocols.common.WingSpiritBag)
 private:
  inline void set_has_max_num();
  inline void clear_has_max_num();
  inline void set_has_open_num();
  inline void clear_has_open_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 max_num_;
  ::google::protobuf::int32 open_num_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSpiritInfo > spirits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static WingSpiritBag* default_instance_;
};
// -------------------------------------------------------------------

class SpiritGeneratorInfo : public ::google::protobuf::Message {
 public:
  SpiritGeneratorInfo();
  virtual ~SpiritGeneratorInfo();
  
  SpiritGeneratorInfo(const SpiritGeneratorInfo& from);
  
  inline SpiritGeneratorInfo& operator=(const SpiritGeneratorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiritGeneratorInfo& default_instance();
  
  void Swap(SpiritGeneratorInfo* other);
  
  // implements Message ----------------------------------------------
  
  SpiritGeneratorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiritGeneratorInfo& from);
  void MergeFrom(const SpiritGeneratorInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional bool is_on = 2;
  inline bool has_is_on() const;
  inline void clear_is_on();
  static const int kIsOnFieldNumber = 2;
  inline bool is_on() const;
  inline void set_is_on(bool value);
  
  // optional int32 cost_money = 3;
  inline bool has_cost_money() const;
  inline void clear_cost_money();
  static const int kCostMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 cost_money() const;
  inline void set_cost_money(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SpiritGeneratorInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_is_on();
  inline void clear_has_is_on();
  inline void set_has_cost_money();
  inline void clear_has_cost_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 level_;
  bool is_on_;
  ::google::protobuf::int32 cost_money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static SpiritGeneratorInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipInfo : public ::google::protobuf::Message {
 public:
  EquipInfo();
  virtual ~EquipInfo();
  
  EquipInfo(const EquipInfo& from);
  
  inline EquipInfo& operator=(const EquipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipInfo& default_instance();
  
  void Swap(EquipInfo* other);
  
  // implements Message ----------------------------------------------
  
  EquipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipInfo& from);
  void MergeFrom(const EquipInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int64 item_id() const;
  inline void set_item_id(::google::protobuf::int64 value);
  
  // optional .protocols.common.EquipPosition position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline protocols::common::EquipPosition position() const;
  inline void set_position(protocols::common::EquipPosition value);
  
  // optional int32 strength_level = 3 [default = 0];
  inline bool has_strength_level() const;
  inline void clear_strength_level();
  static const int kStrengthLevelFieldNumber = 3;
  inline ::google::protobuf::int32 strength_level() const;
  inline void set_strength_level(::google::protobuf::int32 value);
  
  // optional int32 mark = 4;
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 4;
  inline ::google::protobuf::int32 mark() const;
  inline void set_mark(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EquipInfo)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_strength_level();
  inline void clear_has_strength_level();
  inline void set_has_mark();
  inline void clear_has_mark();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 item_id_;
  int position_;
  ::google::protobuf::int32 strength_level_;
  ::google::protobuf::int32 mark_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static EquipInfo* default_instance_;
};
// -------------------------------------------------------------------

class AttributeData : public ::google::protobuf::Message {
 public:
  AttributeData();
  virtual ~AttributeData();
  
  AttributeData(const AttributeData& from);
  
  inline AttributeData& operator=(const AttributeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeData& default_instance();
  
  void Swap(AttributeData* other);
  
  // implements Message ----------------------------------------------
  
  AttributeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttributeData& from);
  void MergeFrom(const AttributeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.AttributeData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static AttributeData* default_instance_;
};
// -------------------------------------------------------------------

class EquipStoneData_StoneData : public ::google::protobuf::Message {
 public:
  EquipStoneData_StoneData();
  virtual ~EquipStoneData_StoneData();
  
  EquipStoneData_StoneData(const EquipStoneData_StoneData& from);
  
  inline EquipStoneData_StoneData& operator=(const EquipStoneData_StoneData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipStoneData_StoneData& default_instance();
  
  void Swap(EquipStoneData_StoneData* other);
  
  // implements Message ----------------------------------------------
  
  EquipStoneData_StoneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipStoneData_StoneData& from);
  void MergeFrom(const EquipStoneData_StoneData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 slot_index = 1;
  inline bool has_slot_index() const;
  inline void clear_slot_index();
  static const int kSlotIndexFieldNumber = 1;
  inline ::google::protobuf::int32 slot_index() const;
  inline void set_slot_index(::google::protobuf::int32 value);
  
  // optional int32 stone_id = 2;
  inline bool has_stone_id() const;
  inline void clear_stone_id();
  static const int kStoneIdFieldNumber = 2;
  inline ::google::protobuf::int32 stone_id() const;
  inline void set_stone_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EquipStoneData.StoneData)
 private:
  inline void set_has_slot_index();
  inline void clear_has_slot_index();
  inline void set_has_stone_id();
  inline void clear_has_stone_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 slot_index_;
  ::google::protobuf::int32 stone_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static EquipStoneData_StoneData* default_instance_;
};
// -------------------------------------------------------------------

class EquipStoneData : public ::google::protobuf::Message {
 public:
  EquipStoneData();
  virtual ~EquipStoneData();
  
  EquipStoneData(const EquipStoneData& from);
  
  inline EquipStoneData& operator=(const EquipStoneData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipStoneData& default_instance();
  
  void Swap(EquipStoneData* other);
  
  // implements Message ----------------------------------------------
  
  EquipStoneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipStoneData& from);
  void MergeFrom(const EquipStoneData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef EquipStoneData_StoneData StoneData;
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  inline int stone_data_size() const;
  inline void clear_stone_data();
  static const int kStoneDataFieldNumber = 2;
  inline const ::protocols::common::EquipStoneData_StoneData& stone_data(int index) const;
  inline ::protocols::common::EquipStoneData_StoneData* mutable_stone_data(int index);
  inline ::protocols::common::EquipStoneData_StoneData* add_stone_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipStoneData_StoneData >&
      stone_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipStoneData_StoneData >*
      mutable_stone_data();
  
  // optional int32 cur_socket_count = 3;
  inline bool has_cur_socket_count() const;
  inline void clear_cur_socket_count();
  static const int kCurSocketCountFieldNumber = 3;
  inline ::google::protobuf::int32 cur_socket_count() const;
  inline void set_cur_socket_count(::google::protobuf::int32 value);
  
  // optional int32 max_socket_count = 4;
  inline bool has_max_socket_count() const;
  inline void clear_max_socket_count();
  static const int kMaxSocketCountFieldNumber = 4;
  inline ::google::protobuf::int32 max_socket_count() const;
  inline void set_max_socket_count(::google::protobuf::int32 value);
  
  // optional int32 strength_client_chance = 5;
  inline bool has_strength_client_chance() const;
  inline void clear_strength_client_chance();
  static const int kStrengthClientChanceFieldNumber = 5;
  inline ::google::protobuf::int32 strength_client_chance() const;
  inline void set_strength_client_chance(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EquipStoneData)
 private:
  inline void set_has_cur_socket_count();
  inline void clear_has_cur_socket_count();
  inline void set_has_max_socket_count();
  inline void clear_has_max_socket_count();
  inline void set_has_strength_client_chance();
  inline void clear_has_strength_client_chance();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipStoneData_StoneData > stone_data_;
  ::google::protobuf::int32 cur_socket_count_;
  ::google::protobuf::int32 max_socket_count_;
  ::google::protobuf::int32 strength_client_chance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static EquipStoneData* default_instance_;
};
// -------------------------------------------------------------------

class DBSlotData : public ::google::protobuf::Message {
 public:
  DBSlotData();
  virtual ~DBSlotData();
  
  DBSlotData(const DBSlotData& from);
  
  inline DBSlotData& operator=(const DBSlotData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DBSlotData& default_instance();
  
  void Swap(DBSlotData* other);
  
  // implements Message ----------------------------------------------
  
  DBSlotData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBSlotData& from);
  void MergeFrom(const DBSlotData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 locked_attr_bits = 1;
  inline bool has_locked_attr_bits() const;
  inline void clear_locked_attr_bits();
  static const int kLockedAttrBitsFieldNumber = 1;
  inline ::google::protobuf::int32 locked_attr_bits() const;
  inline void set_locked_attr_bits(::google::protobuf::int32 value);
  
  // optional .protocols.common.EquipStoneData stone_data = 2;
  inline bool has_stone_data() const;
  inline void clear_stone_data();
  static const int kStoneDataFieldNumber = 2;
  inline const ::protocols::common::EquipStoneData& stone_data() const;
  inline ::protocols::common::EquipStoneData* mutable_stone_data();
  inline ::protocols::common::EquipStoneData* release_stone_data();
  
  // optional int32 socket_num = 3;
  inline bool has_socket_num() const;
  inline void clear_socket_num();
  static const int kSocketNumFieldNumber = 3;
  inline ::google::protobuf::int32 socket_num() const;
  inline void set_socket_num(::google::protobuf::int32 value);
  
  // optional int32 strength_fail_num = 4;
  inline bool has_strength_fail_num() const;
  inline void clear_strength_fail_num();
  static const int kStrengthFailNumFieldNumber = 4;
  inline ::google::protobuf::int32 strength_fail_num() const;
  inline void set_strength_fail_num(::google::protobuf::int32 value);
  
  // optional int32 strength_chance = 5;
  inline bool has_strength_chance() const;
  inline void clear_strength_chance();
  static const int kStrengthChanceFieldNumber = 5;
  inline ::google::protobuf::int32 strength_chance() const;
  inline void set_strength_chance(::google::protobuf::int32 value);
  
  // optional int32 strength_client_chance = 6;
  inline bool has_strength_client_chance() const;
  inline void clear_strength_client_chance();
  static const int kStrengthClientChanceFieldNumber = 6;
  inline ::google::protobuf::int32 strength_client_chance() const;
  inline void set_strength_client_chance(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.DBSlotData)
 private:
  inline void set_has_locked_attr_bits();
  inline void clear_has_locked_attr_bits();
  inline void set_has_stone_data();
  inline void clear_has_stone_data();
  inline void set_has_socket_num();
  inline void clear_has_socket_num();
  inline void set_has_strength_fail_num();
  inline void clear_has_strength_fail_num();
  inline void set_has_strength_chance();
  inline void clear_has_strength_chance();
  inline void set_has_strength_client_chance();
  inline void clear_has_strength_client_chance();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::EquipStoneData* stone_data_;
  ::google::protobuf::int32 locked_attr_bits_;
  ::google::protobuf::int32 socket_num_;
  ::google::protobuf::int32 strength_fail_num_;
  ::google::protobuf::int32 strength_chance_;
  ::google::protobuf::int32 strength_client_chance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static DBSlotData* default_instance_;
};
// -------------------------------------------------------------------

class EquipDetail : public ::google::protobuf::Message {
 public:
  EquipDetail();
  virtual ~EquipDetail();
  
  EquipDetail(const EquipDetail& from);
  
  inline EquipDetail& operator=(const EquipDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipDetail& default_instance();
  
  void Swap(EquipDetail* other);
  
  // implements Message ----------------------------------------------
  
  EquipDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipDetail& from);
  void MergeFrom(const EquipDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int64 item_id() const;
  inline void set_item_id(::google::protobuf::int64 value);
  
  // optional int32 expired = 2 [default = 0];
  inline bool has_expired() const;
  inline void clear_expired();
  static const int kExpiredFieldNumber = 2;
  inline ::google::protobuf::int32 expired() const;
  inline void set_expired(::google::protobuf::int32 value);
  
  // optional int32 strength_level = 3 [default = 0];
  inline bool has_strength_level() const;
  inline void clear_strength_level();
  static const int kStrengthLevelFieldNumber = 3;
  inline ::google::protobuf::int32 strength_level() const;
  inline void set_strength_level(::google::protobuf::int32 value);
  
  // optional int32 slot_count = 4 [default = 0];
  inline bool has_slot_count() const;
  inline void clear_slot_count();
  static const int kSlotCountFieldNumber = 4;
  inline ::google::protobuf::int32 slot_count() const;
  inline void set_slot_count(::google::protobuf::int32 value);
  
  // repeated .protocols.common.AttributeData attr_list = 5;
  inline int attr_list_size() const;
  inline void clear_attr_list();
  static const int kAttrListFieldNumber = 5;
  inline const ::protocols::common::AttributeData& attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_attr_list(int index);
  inline ::protocols::common::AttributeData* add_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_attr_list();
  
  // optional int32 bind_flag = 6 [default = 0];
  inline bool has_bind_flag() const;
  inline void clear_bind_flag();
  static const int kBindFlagFieldNumber = 6;
  inline ::google::protobuf::int32 bind_flag() const;
  inline void set_bind_flag(::google::protobuf::int32 value);
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  inline int extra_attr_list_size() const;
  inline void clear_extra_attr_list();
  static const int kExtraAttrListFieldNumber = 7;
  inline const ::protocols::common::AttributeData& extra_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_extra_attr_list(int index);
  inline ::protocols::common::AttributeData* add_extra_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      extra_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_extra_attr_list();
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  inline int strength_attr_list_size() const;
  inline void clear_strength_attr_list();
  static const int kStrengthAttrListFieldNumber = 9;
  inline const ::protocols::common::AttributeData& strength_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_strength_attr_list(int index);
  inline ::protocols::common::AttributeData* add_strength_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      strength_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_strength_attr_list();
  
  // optional int32 mark = 10;
  inline bool has_mark() const;
  inline void clear_mark();
  static const int kMarkFieldNumber = 10;
  inline ::google::protobuf::int32 mark() const;
  inline void set_mark(::google::protobuf::int32 value);
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  inline int stone_attr_list_size() const;
  inline void clear_stone_attr_list();
  static const int kStoneAttrListFieldNumber = 11;
  inline const ::protocols::common::AttributeData& stone_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_stone_attr_list(int index);
  inline ::protocols::common::AttributeData* add_stone_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      stone_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_stone_attr_list();
  
  // optional int32 locked_attr_bits = 12;
  inline bool has_locked_attr_bits() const;
  inline void clear_locked_attr_bits();
  static const int kLockedAttrBitsFieldNumber = 12;
  inline ::google::protobuf::int32 locked_attr_bits() const;
  inline void set_locked_attr_bits(::google::protobuf::int32 value);
  
  // optional .protocols.common.EquipStoneData stone_data = 13;
  inline bool has_stone_data() const;
  inline void clear_stone_data();
  static const int kStoneDataFieldNumber = 13;
  inline const ::protocols::common::EquipStoneData& stone_data() const;
  inline ::protocols::common::EquipStoneData* mutable_stone_data();
  inline ::protocols::common::EquipStoneData* release_stone_data();
  
  // optional .protocols.common.WingItemInfo wing_info = 14;
  inline bool has_wing_info() const;
  inline void clear_wing_info();
  static const int kWingInfoFieldNumber = 14;
  inline const ::protocols::common::WingItemInfo& wing_info() const;
  inline ::protocols::common::WingItemInfo* mutable_wing_info();
  inline ::protocols::common::WingItemInfo* release_wing_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.EquipDetail)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_expired();
  inline void clear_has_expired();
  inline void set_has_strength_level();
  inline void clear_has_strength_level();
  inline void set_has_slot_count();
  inline void clear_has_slot_count();
  inline void set_has_bind_flag();
  inline void clear_has_bind_flag();
  inline void set_has_mark();
  inline void clear_has_mark();
  inline void set_has_locked_attr_bits();
  inline void clear_has_locked_attr_bits();
  inline void set_has_stone_data();
  inline void clear_has_stone_data();
  inline void set_has_wing_info();
  inline void clear_has_wing_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 item_id_;
  ::google::protobuf::int32 expired_;
  ::google::protobuf::int32 strength_level_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > attr_list_;
  ::google::protobuf::int32 slot_count_;
  ::google::protobuf::int32 bind_flag_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > extra_attr_list_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > strength_attr_list_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > stone_attr_list_;
  ::google::protobuf::int32 mark_;
  ::google::protobuf::int32 locked_attr_bits_;
  ::protocols::common::EquipStoneData* stone_data_;
  ::protocols::common::WingItemInfo* wing_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static EquipDetail* default_instance_;
};
// -------------------------------------------------------------------

class FighterInfo : public ::google::protobuf::Message {
 public:
  FighterInfo();
  virtual ~FighterInfo();
  
  FighterInfo(const FighterInfo& from);
  
  inline FighterInfo& operator=(const FighterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FighterInfo& default_instance();
  
  void Swap(FighterInfo* other);
  
  // implements Message ----------------------------------------------
  
  FighterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FighterInfo& from);
  void MergeFrom(const FighterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required int32 battle_index = 2 [default = 0];
  inline bool has_battle_index() const;
  inline void clear_battle_index();
  static const int kBattleIndexFieldNumber = 2;
  inline ::google::protobuf::int32 battle_index() const;
  inline void set_battle_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FighterInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_battle_index();
  inline void clear_has_battle_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 battle_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static FighterInfo* default_instance_;
};
// -------------------------------------------------------------------

class LineupInfo : public ::google::protobuf::Message {
 public:
  LineupInfo();
  virtual ~LineupInfo();
  
  LineupInfo(const LineupInfo& from);
  
  inline LineupInfo& operator=(const LineupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineupInfo& default_instance();
  
  void Swap(LineupInfo* other);
  
  // implements Message ----------------------------------------------
  
  LineupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineupInfo& from);
  void MergeFrom(const LineupInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 lineup_id = 1;
  inline bool has_lineup_id() const;
  inline void clear_lineup_id();
  static const int kLineupIdFieldNumber = 1;
  inline ::google::protobuf::int32 lineup_id() const;
  inline void set_lineup_id(::google::protobuf::int32 value);
  
  // required string lineup_name = 2;
  inline bool has_lineup_name() const;
  inline void clear_lineup_name();
  static const int kLineupNameFieldNumber = 2;
  inline const ::std::string& lineup_name() const;
  inline void set_lineup_name(const ::std::string& value);
  inline void set_lineup_name(const char* value);
  inline void set_lineup_name(const char* value, size_t size);
  inline ::std::string* mutable_lineup_name();
  inline ::std::string* release_lineup_name();
  
  // repeated int32 battle_skill_id = 3;
  inline int battle_skill_id_size() const;
  inline void clear_battle_skill_id();
  static const int kBattleSkillIdFieldNumber = 3;
  inline ::google::protobuf::int32 battle_skill_id(int index) const;
  inline void set_battle_skill_id(int index, ::google::protobuf::int32 value);
  inline void add_battle_skill_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      battle_skill_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_battle_skill_id();
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  inline int fighter_size() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 4;
  inline const ::protocols::common::FighterInfo& fighter(int index) const;
  inline ::protocols::common::FighterInfo* mutable_fighter(int index);
  inline ::protocols::common::FighterInfo* add_fighter();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >&
      fighter() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >*
      mutable_fighter();
  
  // optional int32 lineup_fight_capacity = 5;
  inline bool has_lineup_fight_capacity() const;
  inline void clear_lineup_fight_capacity();
  static const int kLineupFightCapacityFieldNumber = 5;
  inline ::google::protobuf::int32 lineup_fight_capacity() const;
  inline void set_lineup_fight_capacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.LineupInfo)
 private:
  inline void set_has_lineup_id();
  inline void clear_has_lineup_id();
  inline void set_has_lineup_name();
  inline void clear_has_lineup_name();
  inline void set_has_lineup_fight_capacity();
  inline void clear_has_lineup_fight_capacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lineup_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > battle_skill_id_;
  ::google::protobuf::int32 lineup_id_;
  ::google::protobuf::int32 lineup_fight_capacity_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo > fighter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static LineupInfo* default_instance_;
};
// -------------------------------------------------------------------

class Money1 : public ::google::protobuf::Message {
 public:
  Money1();
  virtual ~Money1();
  
  Money1(const Money1& from);
  
  inline Money1& operator=(const Money1& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Money1& default_instance();
  
  void Swap(Money1* other);
  
  // implements Message ----------------------------------------------
  
  Money1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Money1& from);
  void MergeFrom(const Money1& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protocols.common.MONEY_TYPE money_type = 1;
  inline bool has_money_type() const;
  inline void clear_money_type();
  static const int kMoneyTypeFieldNumber = 1;
  inline protocols::common::MONEY_TYPE money_type() const;
  inline void set_money_type(protocols::common::MONEY_TYPE value);
  
  // required int64 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int64 num() const;
  inline void set_num(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.Money1)
 private:
  inline void set_has_money_type();
  inline void clear_has_money_type();
  inline void set_has_num();
  inline void clear_has_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 num_;
  int money_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Money1* default_instance_;
};
// -------------------------------------------------------------------

class Money : public ::google::protobuf::Message {
 public:
  Money();
  virtual ~Money();
  
  Money(const Money& from);
  
  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Money& default_instance();
  
  void Swap(Money* other);
  
  // implements Message ----------------------------------------------
  
  Money* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.Money1 money = 1;
  inline int money_size() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline const ::protocols::common::Money1& money(int index) const;
  inline ::protocols::common::Money1* mutable_money(int index);
  inline ::protocols::common::Money1* add_money();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Money1 >&
      money() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Money1 >*
      mutable_money();
  
  // @@protoc_insertion_point(class_scope:protocols.common.Money)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::Money1 > money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Money* default_instance_;
};
// -------------------------------------------------------------------

class QuestAction : public ::google::protobuf::Message {
 public:
  QuestAction();
  virtual ~QuestAction();
  
  QuestAction(const QuestAction& from);
  
  inline QuestAction& operator=(const QuestAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestAction& default_instance();
  
  void Swap(QuestAction* other);
  
  // implements Message ----------------------------------------------
  
  QuestAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestAction& from);
  void MergeFrom(const QuestAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.QuestActionType action_type = 1;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  inline protocols::common::QuestActionType action_type() const;
  inline void set_action_type(protocols::common::QuestActionType value);
  
  // repeated int32 action_param = 2;
  inline int action_param_size() const;
  inline void clear_action_param();
  static const int kActionParamFieldNumber = 2;
  inline ::google::protobuf::int32 action_param(int index) const;
  inline void set_action_param(int index, ::google::protobuf::int32 value);
  inline void add_action_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      action_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_action_param();
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestAction)
 private:
  inline void set_has_action_type();
  inline void clear_has_action_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > action_param_;
  int action_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestAction* default_instance_;
};
// -------------------------------------------------------------------

class QuestActionsPb : public ::google::protobuf::Message {
 public:
  QuestActionsPb();
  virtual ~QuestActionsPb();
  
  QuestActionsPb(const QuestActionsPb& from);
  
  inline QuestActionsPb& operator=(const QuestActionsPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestActionsPb& default_instance();
  
  void Swap(QuestActionsPb* other);
  
  // implements Message ----------------------------------------------
  
  QuestActionsPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestActionsPb& from);
  void MergeFrom(const QuestActionsPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.QuestAction actions = 1;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 1;
  inline const ::protocols::common::QuestAction& actions(int index) const;
  inline ::protocols::common::QuestAction* mutable_actions(int index);
  inline ::protocols::common::QuestAction* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >*
      mutable_actions();
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestActionsPb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction > actions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestActionsPb* default_instance_;
};
// -------------------------------------------------------------------

class QuestPb : public ::google::protobuf::Message {
 public:
  QuestPb();
  virtual ~QuestPb();
  
  QuestPb(const QuestPb& from);
  
  inline QuestPb& operator=(const QuestPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestPb& default_instance();
  
  void Swap(QuestPb* other);
  
  // implements Message ----------------------------------------------
  
  QuestPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestPb& from);
  void MergeFrom(const QuestPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 quest_id = 1;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 1;
  inline ::google::protobuf::int32 quest_id() const;
  inline void set_quest_id(::google::protobuf::int32 value);
  
  // optional .protocols.common.QuestStatus quest_status = 2;
  inline bool has_quest_status() const;
  inline void clear_quest_status();
  static const int kQuestStatusFieldNumber = 2;
  inline protocols::common::QuestStatus quest_status() const;
  inline void set_quest_status(protocols::common::QuestStatus value);
  
  // optional .protocols.common.QuestActionsPb actions = 3;
  inline bool has_actions() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 3;
  inline const ::protocols::common::QuestActionsPb& actions() const;
  inline ::protocols::common::QuestActionsPb* mutable_actions();
  inline ::protocols::common::QuestActionsPb* release_actions();
  
  // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
  inline bool has_quest_type() const;
  inline void clear_quest_type();
  static const int kQuestTypeFieldNumber = 4;
  inline protocols::common::QuestType quest_type() const;
  inline void set_quest_type(protocols::common::QuestType value);
  
  // optional int32 reward_exp = 5;
  inline bool has_reward_exp() const;
  inline void clear_reward_exp();
  static const int kRewardExpFieldNumber = 5;
  inline ::google::protobuf::int32 reward_exp() const;
  inline void set_reward_exp(::google::protobuf::int32 value);
  
  // optional int32 reward_coin = 6;
  inline bool has_reward_coin() const;
  inline void clear_reward_coin();
  static const int kRewardCoinFieldNumber = 6;
  inline ::google::protobuf::int32 reward_coin() const;
  inline void set_reward_coin(::google::protobuf::int32 value);
  
  // optional int32 circle_index = 7;
  inline bool has_circle_index() const;
  inline void clear_circle_index();
  static const int kCircleIndexFieldNumber = 7;
  inline ::google::protobuf::int32 circle_index() const;
  inline void set_circle_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestPb)
 private:
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_quest_status();
  inline void clear_has_quest_status();
  inline void set_has_actions();
  inline void clear_has_actions();
  inline void set_has_quest_type();
  inline void clear_has_quest_type();
  inline void set_has_reward_exp();
  inline void clear_has_reward_exp();
  inline void set_has_reward_coin();
  inline void clear_has_reward_coin();
  inline void set_has_circle_index();
  inline void clear_has_circle_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 quest_id_;
  int quest_status_;
  ::protocols::common::QuestActionsPb* actions_;
  int quest_type_;
  ::google::protobuf::int32 reward_exp_;
  ::google::protobuf::int32 reward_coin_;
  ::google::protobuf::int32 circle_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestPb* default_instance_;
};
// -------------------------------------------------------------------

class QuestPreCondition : public ::google::protobuf::Message {
 public:
  QuestPreCondition();
  virtual ~QuestPreCondition();
  
  QuestPreCondition(const QuestPreCondition& from);
  
  inline QuestPreCondition& operator=(const QuestPreCondition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestPreCondition& default_instance();
  
  void Swap(QuestPreCondition* other);
  
  // implements Message ----------------------------------------------
  
  QuestPreCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestPreCondition& from);
  void MergeFrom(const QuestPreCondition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pre_quest_id = 1;
  inline bool has_pre_quest_id() const;
  inline void clear_pre_quest_id();
  static const int kPreQuestIdFieldNumber = 1;
  inline ::google::protobuf::int32 pre_quest_id() const;
  inline void set_pre_quest_id(::google::protobuf::int32 value);
  
  // optional int32 player_level_min = 2 [default = 1];
  inline bool has_player_level_min() const;
  inline void clear_player_level_min();
  static const int kPlayerLevelMinFieldNumber = 2;
  inline ::google::protobuf::int32 player_level_min() const;
  inline void set_player_level_min(::google::protobuf::int32 value);
  
  // optional int32 player_level_max = 3;
  inline bool has_player_level_max() const;
  inline void clear_player_level_max();
  static const int kPlayerLevelMaxFieldNumber = 3;
  inline ::google::protobuf::int32 player_level_max() const;
  inline void set_player_level_max(::google::protobuf::int32 value);
  
  // optional int64 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);
  
  // optional int64 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 end_time() const;
  inline void set_end_time(::google::protobuf::int64 value);
  
  // optional int64 region_id = 6;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 6;
  inline ::google::protobuf::int64 region_id() const;
  inline void set_region_id(::google::protobuf::int64 value);
  
  // optional bool auto_accept = 7 [default = false];
  inline bool has_auto_accept() const;
  inline void clear_auto_accept();
  static const int kAutoAcceptFieldNumber = 7;
  inline bool auto_accept() const;
  inline void set_auto_accept(bool value);
  
  // optional .protocols.common.Profession pro_limit = 8;
  inline bool has_pro_limit() const;
  inline void clear_pro_limit();
  static const int kProLimitFieldNumber = 8;
  inline protocols::common::Profession pro_limit() const;
  inline void set_pro_limit(protocols::common::Profession value);
  
  // repeated int32 pre_quest_ids = 9;
  inline int pre_quest_ids_size() const;
  inline void clear_pre_quest_ids();
  static const int kPreQuestIdsFieldNumber = 9;
  inline ::google::protobuf::int32 pre_quest_ids(int index) const;
  inline void set_pre_quest_ids(int index, ::google::protobuf::int32 value);
  inline void add_pre_quest_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pre_quest_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pre_quest_ids();
  
  // repeated int32 post_quest_ids = 10;
  inline int post_quest_ids_size() const;
  inline void clear_post_quest_ids();
  static const int kPostQuestIdsFieldNumber = 10;
  inline ::google::protobuf::int32 post_quest_ids(int index) const;
  inline void set_post_quest_ids(int index, ::google::protobuf::int32 value);
  inline void add_post_quest_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      post_quest_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_post_quest_ids();
  
  // optional bool auto_commit = 11 [default = false];
  inline bool has_auto_commit() const;
  inline void clear_auto_commit();
  static const int kAutoCommitFieldNumber = 11;
  inline bool auto_commit() const;
  inline void set_auto_commit(bool value);
  
  // optional bool can_be_cancelled = 12 [default = false];
  inline bool has_can_be_cancelled() const;
  inline void clear_can_be_cancelled();
  static const int kCanBeCancelledFieldNumber = 12;
  inline bool can_be_cancelled() const;
  inline void set_can_be_cancelled(bool value);
  
  // optional bool daily_reset = 13 [default = false];
  inline bool has_daily_reset() const;
  inline void clear_daily_reset();
  static const int kDailyResetFieldNumber = 13;
  inline bool daily_reset() const;
  inline void set_daily_reset(bool value);
  
  // optional bool need_guild = 14;
  inline bool has_need_guild() const;
  inline void clear_need_guild();
  static const int kNeedGuildFieldNumber = 14;
  inline bool need_guild() const;
  inline void set_need_guild(bool value);
  
  // optional bool need_guild_check = 15;
  inline bool has_need_guild_check() const;
  inline void clear_need_guild_check();
  static const int kNeedGuildCheckFieldNumber = 15;
  inline bool need_guild_check() const;
  inline void set_need_guild_check(bool value);
  
  // optional bool repeatable = 16;
  inline bool has_repeatable() const;
  inline void clear_repeatable();
  static const int kRepeatableFieldNumber = 16;
  inline bool repeatable() const;
  inline void set_repeatable(bool value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestPreCondition)
 private:
  inline void set_has_pre_quest_id();
  inline void clear_has_pre_quest_id();
  inline void set_has_player_level_min();
  inline void clear_has_player_level_min();
  inline void set_has_player_level_max();
  inline void clear_has_player_level_max();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_auto_accept();
  inline void clear_has_auto_accept();
  inline void set_has_pro_limit();
  inline void clear_has_pro_limit();
  inline void set_has_auto_commit();
  inline void clear_has_auto_commit();
  inline void set_has_can_be_cancelled();
  inline void clear_has_can_be_cancelled();
  inline void set_has_daily_reset();
  inline void clear_has_daily_reset();
  inline void set_has_need_guild();
  inline void clear_has_need_guild();
  inline void set_has_need_guild_check();
  inline void clear_has_need_guild_check();
  inline void set_has_repeatable();
  inline void clear_has_repeatable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pre_quest_id_;
  ::google::protobuf::int32 player_level_min_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 player_level_max_;
  int pro_limit_;
  ::google::protobuf::int64 region_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pre_quest_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > post_quest_ids_;
  bool auto_accept_;
  bool auto_commit_;
  bool can_be_cancelled_;
  bool daily_reset_;
  bool need_guild_;
  bool need_guild_check_;
  bool repeatable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestPreCondition* default_instance_;
};
// -------------------------------------------------------------------

class QuestRewards_QuestRewardItem : public ::google::protobuf::Message {
 public:
  QuestRewards_QuestRewardItem();
  virtual ~QuestRewards_QuestRewardItem();
  
  QuestRewards_QuestRewardItem(const QuestRewards_QuestRewardItem& from);
  
  inline QuestRewards_QuestRewardItem& operator=(const QuestRewards_QuestRewardItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestRewards_QuestRewardItem& default_instance();
  
  void Swap(QuestRewards_QuestRewardItem* other);
  
  // implements Message ----------------------------------------------
  
  QuestRewards_QuestRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestRewards_QuestRewardItem& from);
  void MergeFrom(const QuestRewards_QuestRewardItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::int32 item_num() const;
  inline void set_item_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestRewards.QuestRewardItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestRewards_QuestRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class QuestRewards : public ::google::protobuf::Message {
 public:
  QuestRewards();
  virtual ~QuestRewards();
  
  QuestRewards(const QuestRewards& from);
  
  inline QuestRewards& operator=(const QuestRewards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestRewards& default_instance();
  
  void Swap(QuestRewards* other);
  
  // implements Message ----------------------------------------------
  
  QuestRewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestRewards& from);
  void MergeFrom(const QuestRewards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QuestRewards_QuestRewardItem QuestRewardItem;
  
  // accessors -------------------------------------------------------
  
  // optional int32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);
  
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::protocols::common::QuestRewards_QuestRewardItem& item(int index) const;
  inline ::protocols::common::QuestRewards_QuestRewardItem* mutable_item(int index);
  inline ::protocols::common::QuestRewards_QuestRewardItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestRewards_QuestRewardItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestRewards_QuestRewardItem >*
      mutable_item();
  
  // optional int32 guild_contribution = 4;
  inline bool has_guild_contribution() const;
  inline void clear_guild_contribution();
  static const int kGuildContributionFieldNumber = 4;
  inline ::google::protobuf::int32 guild_contribution() const;
  inline void set_guild_contribution(::google::protobuf::int32 value);
  
  // optional int32 guild_exp = 5;
  inline bool has_guild_exp() const;
  inline void clear_guild_exp();
  static const int kGuildExpFieldNumber = 5;
  inline ::google::protobuf::int32 guild_exp() const;
  inline void set_guild_exp(::google::protobuf::int32 value);
  
  // optional int32 guild_crystal = 6;
  inline bool has_guild_crystal() const;
  inline void clear_guild_crystal();
  static const int kGuildCrystalFieldNumber = 6;
  inline ::google::protobuf::int32 guild_crystal() const;
  inline void set_guild_crystal(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestRewards)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_guild_contribution();
  inline void clear_has_guild_contribution();
  inline void set_has_guild_exp();
  inline void clear_has_guild_exp();
  inline void set_has_guild_crystal();
  inline void clear_has_guild_crystal();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestRewards_QuestRewardItem > item_;
  ::google::protobuf::int32 guild_contribution_;
  ::google::protobuf::int32 guild_exp_;
  ::google::protobuf::int32 guild_crystal_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestRewards* default_instance_;
};
// -------------------------------------------------------------------

class QuestProtoype : public ::google::protobuf::Message {
 public:
  QuestProtoype();
  virtual ~QuestProtoype();
  
  QuestProtoype(const QuestProtoype& from);
  
  inline QuestProtoype& operator=(const QuestProtoype& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestProtoype& default_instance();
  
  void Swap(QuestProtoype* other);
  
  // implements Message ----------------------------------------------
  
  QuestProtoype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestProtoype& from);
  void MergeFrom(const QuestProtoype& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 quest_id = 1;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 1;
  inline ::google::protobuf::int32 quest_id() const;
  inline void set_quest_id(::google::protobuf::int32 value);
  
  // optional bytes quest_name = 2;
  inline bool has_quest_name() const;
  inline void clear_quest_name();
  static const int kQuestNameFieldNumber = 2;
  inline const ::std::string& quest_name() const;
  inline void set_quest_name(const ::std::string& value);
  inline void set_quest_name(const char* value);
  inline void set_quest_name(const void* value, size_t size);
  inline ::std::string* mutable_quest_name();
  inline ::std::string* release_quest_name();
  
  // optional .protocols.common.QuestPreCondition pre_condition = 3;
  inline bool has_pre_condition() const;
  inline void clear_pre_condition();
  static const int kPreConditionFieldNumber = 3;
  inline const ::protocols::common::QuestPreCondition& pre_condition() const;
  inline ::protocols::common::QuestPreCondition* mutable_pre_condition();
  inline ::protocols::common::QuestPreCondition* release_pre_condition();
  
  // repeated .protocols.common.QuestAction actions = 4;
  inline int actions_size() const;
  inline void clear_actions();
  static const int kActionsFieldNumber = 4;
  inline const ::protocols::common::QuestAction& actions(int index) const;
  inline ::protocols::common::QuestAction* mutable_actions(int index);
  inline ::protocols::common::QuestAction* add_actions();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >&
      actions() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >*
      mutable_actions();
  
  // optional .protocols.common.QuestRewards rewards = 5;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 5;
  inline const ::protocols::common::QuestRewards& rewards() const;
  inline ::protocols::common::QuestRewards* mutable_rewards();
  inline ::protocols::common::QuestRewards* release_rewards();
  
  // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
  inline bool has_quest_type() const;
  inline void clear_quest_type();
  static const int kQuestTypeFieldNumber = 6;
  inline protocols::common::QuestType quest_type() const;
  inline void set_quest_type(protocols::common::QuestType value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuestProtoype)
 private:
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_quest_name();
  inline void clear_has_quest_name();
  inline void set_has_pre_condition();
  inline void clear_has_pre_condition();
  inline void set_has_rewards();
  inline void clear_has_rewards();
  inline void set_has_quest_type();
  inline void clear_has_quest_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* quest_name_;
  ::protocols::common::QuestPreCondition* pre_condition_;
  ::google::protobuf::int32 quest_id_;
  int quest_type_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction > actions_;
  ::protocols::common::QuestRewards* rewards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static QuestProtoype* default_instance_;
};
// -------------------------------------------------------------------

class GuildCrystalReward : public ::google::protobuf::Message {
 public:
  GuildCrystalReward();
  virtual ~GuildCrystalReward();
  
  GuildCrystalReward(const GuildCrystalReward& from);
  
  inline GuildCrystalReward& operator=(const GuildCrystalReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCrystalReward& default_instance();
  
  void Swap(GuildCrystalReward* other);
  
  // implements Message ----------------------------------------------
  
  GuildCrystalReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCrystalReward& from);
  void MergeFrom(const GuildCrystalReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);
  
  // optional int32 item_count = 4;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 4;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);
  
  // optional bool picked = 5;
  inline bool has_picked() const;
  inline void clear_picked();
  static const int kPickedFieldNumber = 5;
  inline bool picked() const;
  inline void set_picked(bool value);
  
  // optional int32 collecting_player_id = 6;
  inline bool has_collecting_player_id() const;
  inline void clear_collecting_player_id();
  static const int kCollectingPlayerIdFieldNumber = 6;
  inline ::google::protobuf::int32 collecting_player_id() const;
  inline void set_collecting_player_id(::google::protobuf::int32 value);
  
  // optional int32 collecting_tick = 7;
  inline bool has_collecting_tick() const;
  inline void clear_collecting_tick();
  static const int kCollectingTickFieldNumber = 7;
  inline ::google::protobuf::int32 collecting_tick() const;
  inline void set_collecting_tick(::google::protobuf::int32 value);
  
  // optional int32 display_id = 8;
  inline bool has_display_id() const;
  inline void clear_display_id();
  static const int kDisplayIdFieldNumber = 8;
  inline ::google::protobuf::int32 display_id() const;
  inline void set_display_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildCrystalReward)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_picked();
  inline void clear_has_picked();
  inline void set_has_collecting_player_id();
  inline void clear_has_collecting_player_id();
  inline void set_has_collecting_tick();
  inline void clear_has_collecting_tick();
  inline void set_has_display_id();
  inline void clear_has_display_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;
  bool picked_;
  ::google::protobuf::int32 collecting_player_id_;
  ::google::protobuf::int32 collecting_tick_;
  ::google::protobuf::int32 display_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static GuildCrystalReward* default_instance_;
};
// -------------------------------------------------------------------

class TreasureBoxReward : public ::google::protobuf::Message {
 public:
  TreasureBoxReward();
  virtual ~TreasureBoxReward();
  
  TreasureBoxReward(const TreasureBoxReward& from);
  
  inline TreasureBoxReward& operator=(const TreasureBoxReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureBoxReward& default_instance();
  
  void Swap(TreasureBoxReward* other);
  
  // implements Message ----------------------------------------------
  
  TreasureBoxReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureBoxReward& from);
  void MergeFrom(const TreasureBoxReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 act_id = 1;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 1;
  inline ::google::protobuf::int32 act_id() const;
  inline void set_act_id(::google::protobuf::int32 value);
  
  // optional int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 map_x = 4;
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 4;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);
  
  // optional int32 map_y = 5;
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 5;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);
  
  // optional int32 icon_id = 6;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 6;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TreasureBoxReward)
 private:
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 act_id_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::int32 map_y_;
  ::google::protobuf::int32 icon_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static TreasureBoxReward* default_instance_;
};
// -------------------------------------------------------------------

class GuildCrystalTowerActivityData : public ::google::protobuf::Message {
 public:
  GuildCrystalTowerActivityData();
  virtual ~GuildCrystalTowerActivityData();
  
  GuildCrystalTowerActivityData(const GuildCrystalTowerActivityData& from);
  
  inline GuildCrystalTowerActivityData& operator=(const GuildCrystalTowerActivityData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCrystalTowerActivityData& default_instance();
  
  void Swap(GuildCrystalTowerActivityData* other);
  
  // implements Message ----------------------------------------------
  
  GuildCrystalTowerActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCrystalTowerActivityData& from);
  void MergeFrom(const GuildCrystalTowerActivityData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 last_activity_time_sec = 1;
  inline bool has_last_activity_time_sec() const;
  inline void clear_last_activity_time_sec();
  static const int kLastActivityTimeSecFieldNumber = 1;
  inline ::google::protobuf::int32 last_activity_time_sec() const;
  inline void set_last_activity_time_sec(::google::protobuf::int32 value);
  
  // optional int32 tower_category = 2;
  inline bool has_tower_category() const;
  inline void clear_tower_category();
  static const int kTowerCategoryFieldNumber = 2;
  inline ::google::protobuf::int32 tower_category() const;
  inline void set_tower_category(::google::protobuf::int32 value);
  
  // optional int32 start_sec = 3;
  inline bool has_start_sec() const;
  inline void clear_start_sec();
  static const int kStartSecFieldNumber = 3;
  inline ::google::protobuf::int32 start_sec() const;
  inline void set_start_sec(::google::protobuf::int32 value);
  
  // optional int32 activity_duration = 4;
  inline bool has_activity_duration() const;
  inline void clear_activity_duration();
  static const int kActivityDurationFieldNumber = 4;
  inline ::google::protobuf::int32 activity_duration() const;
  inline void set_activity_duration(::google::protobuf::int32 value);
  
  // optional int32 reward_count_down_sec = 5;
  inline bool has_reward_count_down_sec() const;
  inline void clear_reward_count_down_sec();
  static const int kRewardCountDownSecFieldNumber = 5;
  inline ::google::protobuf::int32 reward_count_down_sec() const;
  inline void set_reward_count_down_sec(::google::protobuf::int32 value);
  
  // repeated int32 piece_count = 6;
  inline int piece_count_size() const;
  inline void clear_piece_count();
  static const int kPieceCountFieldNumber = 6;
  inline ::google::protobuf::int32 piece_count(int index) const;
  inline void set_piece_count(int index, ::google::protobuf::int32 value);
  inline void add_piece_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      piece_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_piece_count();
  
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 7;
  inline const ::protocols::common::GuildCrystalReward& rewards(int index) const;
  inline ::protocols::common::GuildCrystalReward* mutable_rewards(int index);
  inline ::protocols::common::GuildCrystalReward* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildCrystalReward >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildCrystalReward >*
      mutable_rewards();
  
  // optional int32 tower_level = 8;
  inline bool has_tower_level() const;
  inline void clear_tower_level();
  static const int kTowerLevelFieldNumber = 8;
  inline ::google::protobuf::int32 tower_level() const;
  inline void set_tower_level(::google::protobuf::int32 value);
  
  // optional .protocols.common.ActivityStatus activity_status = 9;
  inline bool has_activity_status() const;
  inline void clear_activity_status();
  static const int kActivityStatusFieldNumber = 9;
  inline protocols::common::ActivityStatus activity_status() const;
  inline void set_activity_status(protocols::common::ActivityStatus value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildCrystalTowerActivityData)
 private:
  inline void set_has_last_activity_time_sec();
  inline void clear_has_last_activity_time_sec();
  inline void set_has_tower_category();
  inline void clear_has_tower_category();
  inline void set_has_start_sec();
  inline void clear_has_start_sec();
  inline void set_has_activity_duration();
  inline void clear_has_activity_duration();
  inline void set_has_reward_count_down_sec();
  inline void clear_has_reward_count_down_sec();
  inline void set_has_tower_level();
  inline void clear_has_tower_level();
  inline void set_has_activity_status();
  inline void clear_has_activity_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 last_activity_time_sec_;
  ::google::protobuf::int32 tower_category_;
  ::google::protobuf::int32 start_sec_;
  ::google::protobuf::int32 activity_duration_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > piece_count_;
  ::google::protobuf::int32 reward_count_down_sec_;
  ::google::protobuf::int32 tower_level_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildCrystalReward > rewards_;
  int activity_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static GuildCrystalTowerActivityData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPosBeforeInstance : public ::google::protobuf::Message {
 public:
  PlayerPosBeforeInstance();
  virtual ~PlayerPosBeforeInstance();
  
  PlayerPosBeforeInstance(const PlayerPosBeforeInstance& from);
  
  inline PlayerPosBeforeInstance& operator=(const PlayerPosBeforeInstance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPosBeforeInstance& default_instance();
  
  void Swap(PlayerPosBeforeInstance* other);
  
  // implements Message ----------------------------------------------
  
  PlayerPosBeforeInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPosBeforeInstance& from);
  void MergeFrom(const PlayerPosBeforeInstance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // required int32 map_x = 2;
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 2;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);
  
  // required int32 map_y = 3;
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 3;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerPosBeforeInstance)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::int32 map_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerPosBeforeInstance* default_instance_;
};
// -------------------------------------------------------------------

class TeamMemberInfo : public ::google::protobuf::Message {
 public:
  TeamMemberInfo();
  virtual ~TeamMemberInfo();
  
  TeamMemberInfo(const TeamMemberInfo& from);
  
  inline TeamMemberInfo& operator=(const TeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMemberInfo& default_instance();
  
  void Swap(TeamMemberInfo* other);
  
  // implements Message ----------------------------------------------
  
  TeamMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamMemberInfo& from);
  void MergeFrom(const TeamMemberInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 seq_no = 1;
  inline bool has_seq_no() const;
  inline void clear_seq_no();
  static const int kSeqNoFieldNumber = 1;
  inline ::google::protobuf::int32 seq_no() const;
  inline void set_seq_no(::google::protobuf::int32 value);
  
  // required int64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 is_online = 4;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 4;
  inline ::google::protobuf::int32 is_online() const;
  inline void set_is_online(::google::protobuf::int32 value);
  
  // optional .protocols.common.Profession job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline protocols::common::Profession job() const;
  inline void set_job(protocols::common::Profession value);
  
  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 fight_capacity = 8;
  inline bool has_fight_capacity() const;
  inline void clear_fight_capacity();
  static const int kFightCapacityFieldNumber = 8;
  inline ::google::protobuf::int32 fight_capacity() const;
  inline void set_fight_capacity(::google::protobuf::int32 value);
  
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  inline int yingling_info_size() const;
  inline void clear_yingling_info();
  static const int kYinglingInfoFieldNumber = 7;
  inline const ::protocols::common::YinglingInfo& yingling_info(int index) const;
  inline ::protocols::common::YinglingInfo* mutable_yingling_info(int index);
  inline ::protocols::common::YinglingInfo* add_yingling_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingInfo >&
      yingling_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingInfo >*
      mutable_yingling_info();
  
  // optional bool is_ready = 9;
  inline bool has_is_ready() const;
  inline void clear_is_ready();
  static const int kIsReadyFieldNumber = 9;
  inline bool is_ready() const;
  inline void set_is_ready(bool value);
  
  // optional int32 wing_id = 10;
  inline bool has_wing_id() const;
  inline void clear_wing_id();
  static const int kWingIdFieldNumber = 10;
  inline ::google::protobuf::int32 wing_id() const;
  inline void set_wing_id(::google::protobuf::int32 value);
  
  // optional int32 titile = 11;
  inline bool has_titile() const;
  inline void clear_titile();
  static const int kTitileFieldNumber = 11;
  inline ::google::protobuf::int32 titile() const;
  inline void set_titile(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TeamMemberInfo)
 private:
  inline void set_has_seq_no();
  inline void clear_has_seq_no();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight_capacity();
  inline void clear_has_fight_capacity();
  inline void set_has_is_ready();
  inline void clear_has_is_ready();
  inline void set_has_wing_id();
  inline void clear_has_wing_id();
  inline void set_has_titile();
  inline void clear_has_titile();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 seq_no_;
  ::google::protobuf::int32 is_online_;
  ::std::string* name_;
  int job_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingInfo > yingling_info_;
  ::google::protobuf::int32 fight_capacity_;
  bool is_ready_;
  ::google::protobuf::int32 wing_id_;
  ::google::protobuf::int32 titile_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static TeamMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfo : public ::google::protobuf::Message {
 public:
  TeamInfo();
  virtual ~TeamInfo();
  
  TeamInfo(const TeamInfo& from);
  
  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();
  
  void Swap(TeamInfo* other);
  
  // implements Message ----------------------------------------------
  
  TeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 team_id = 1;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int64 leader_guid = 3;
  inline bool has_leader_guid() const;
  inline void clear_leader_guid();
  static const int kLeaderGuidFieldNumber = 3;
  inline ::google::protobuf::int64 leader_guid() const;
  inline void set_leader_guid(::google::protobuf::int64 value);
  
  // required int32 team_member_limit = 4;
  inline bool has_team_member_limit() const;
  inline void clear_team_member_limit();
  static const int kTeamMemberLimitFieldNumber = 4;
  inline ::google::protobuf::int32 team_member_limit() const;
  inline void set_team_member_limit(::google::protobuf::int32 value);
  
  // optional int32 cur_team_member = 5;
  inline bool has_cur_team_member() const;
  inline void clear_cur_team_member();
  static const int kCurTeamMemberFieldNumber = 5;
  inline ::google::protobuf::int32 cur_team_member() const;
  inline void set_cur_team_member(::google::protobuf::int32 value);
  
  // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
  inline bool has_objective() const;
  inline void clear_objective();
  static const int kObjectiveFieldNumber = 6;
  inline protocols::common::TEAM_OBJECTIVE_TYPE objective() const;
  inline void set_objective(protocols::common::TEAM_OBJECTIVE_TYPE value);
  
  // optional int32 custom_pass_id = 7;
  inline bool has_custom_pass_id() const;
  inline void clear_custom_pass_id();
  static const int kCustomPassIdFieldNumber = 7;
  inline ::google::protobuf::int32 custom_pass_id() const;
  inline void set_custom_pass_id(::google::protobuf::int32 value);
  
  // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
  inline bool has_difficult_level() const;
  inline void clear_difficult_level();
  static const int kDifficultLevelFieldNumber = 8;
  inline protocols::common::DIFFICULTY_LEVEL difficult_level() const;
  inline void set_difficult_level(protocols::common::DIFFICULTY_LEVEL value);
  
  // optional int32 min_level_required = 9;
  inline bool has_min_level_required() const;
  inline void clear_min_level_required();
  static const int kMinLevelRequiredFieldNumber = 9;
  inline ::google::protobuf::int32 min_level_required() const;
  inline void set_min_level_required(::google::protobuf::int32 value);
  
  // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
  inline bool has_add_member_type() const;
  inline void clear_add_member_type();
  static const int kAddMemberTypeFieldNumber = 10;
  inline protocols::common::TEAM_ADD_TYPE add_member_type() const;
  inline void set_add_member_type(protocols::common::TEAM_ADD_TYPE value);
  
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  inline int team_member_size() const;
  inline void clear_team_member();
  static const int kTeamMemberFieldNumber = 11;
  inline const ::protocols::common::TeamMemberInfo& team_member(int index) const;
  inline ::protocols::common::TeamMemberInfo* mutable_team_member(int index);
  inline ::protocols::common::TeamMemberInfo* add_team_member();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TeamMemberInfo >&
      team_member() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TeamMemberInfo >*
      mutable_team_member();
  
  // optional int32 team_battle_skill_id = 13;
  inline bool has_team_battle_skill_id() const;
  inline void clear_team_battle_skill_id();
  static const int kTeamBattleSkillIdFieldNumber = 13;
  inline ::google::protobuf::int32 team_battle_skill_id() const;
  inline void set_team_battle_skill_id(::google::protobuf::int32 value);
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  inline int fighter_info_size() const;
  inline void clear_fighter_info();
  static const int kFighterInfoFieldNumber = 14;
  inline const ::protocols::common::FighterInfo& fighter_info(int index) const;
  inline ::protocols::common::FighterInfo* mutable_fighter_info(int index);
  inline ::protocols::common::FighterInfo* add_fighter_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >&
      fighter_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >*
      mutable_fighter_info();
  
  // optional int32 team_create_type = 15 [default = 1];
  inline bool has_team_create_type() const;
  inline void clear_team_create_type();
  static const int kTeamCreateTypeFieldNumber = 15;
  inline ::google::protobuf::int32 team_create_type() const;
  inline void set_team_create_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TeamInfo)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_leader_guid();
  inline void clear_has_leader_guid();
  inline void set_has_team_member_limit();
  inline void clear_has_team_member_limit();
  inline void set_has_cur_team_member();
  inline void clear_has_cur_team_member();
  inline void set_has_objective();
  inline void clear_has_objective();
  inline void set_has_custom_pass_id();
  inline void clear_has_custom_pass_id();
  inline void set_has_difficult_level();
  inline void clear_has_difficult_level();
  inline void set_has_min_level_required();
  inline void clear_has_min_level_required();
  inline void set_has_add_member_type();
  inline void clear_has_add_member_type();
  inline void set_has_team_battle_skill_id();
  inline void clear_has_team_battle_skill_id();
  inline void set_has_team_create_type();
  inline void clear_has_team_create_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 team_id_;
  ::google::protobuf::int32 team_member_limit_;
  ::google::protobuf::int64 leader_guid_;
  ::google::protobuf::int32 cur_team_member_;
  int objective_;
  ::google::protobuf::int32 custom_pass_id_;
  int difficult_level_;
  ::google::protobuf::int32 min_level_required_;
  int add_member_type_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::TeamMemberInfo > team_member_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo > fighter_info_;
  ::google::protobuf::int32 team_battle_skill_id_;
  ::google::protobuf::int32 team_create_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static TeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class CoolDown : public ::google::protobuf::Message {
 public:
  CoolDown();
  virtual ~CoolDown();
  
  CoolDown(const CoolDown& from);
  
  inline CoolDown& operator=(const CoolDown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoolDown& default_instance();
  
  void Swap(CoolDown* other);
  
  // implements Message ----------------------------------------------
  
  CoolDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoolDown& from);
  void MergeFrom(const CoolDown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 sec = 2;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 2;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.CoolDown)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sec();
  inline void clear_has_sec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 sec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static CoolDown* default_instance_;
};
// -------------------------------------------------------------------

class RoleCoolDownPb : public ::google::protobuf::Message {
 public:
  RoleCoolDownPb();
  virtual ~RoleCoolDownPb();
  
  RoleCoolDownPb(const RoleCoolDownPb& from);
  
  inline RoleCoolDownPb& operator=(const RoleCoolDownPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleCoolDownPb& default_instance();
  
  void Swap(RoleCoolDownPb* other);
  
  // implements Message ----------------------------------------------
  
  RoleCoolDownPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleCoolDownPb& from);
  void MergeFrom(const RoleCoolDownPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.CoolDown cool_down = 2;
  inline int cool_down_size() const;
  inline void clear_cool_down();
  static const int kCoolDownFieldNumber = 2;
  inline const ::protocols::common::CoolDown& cool_down(int index) const;
  inline ::protocols::common::CoolDown* mutable_cool_down(int index);
  inline ::protocols::common::CoolDown* add_cool_down();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::CoolDown >&
      cool_down() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::CoolDown >*
      mutable_cool_down();
  
  // @@protoc_insertion_point(class_scope:protocols.common.RoleCoolDownPb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::CoolDown > cool_down_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static RoleCoolDownPb* default_instance_;
};
// -------------------------------------------------------------------

class DailyCountLimit : public ::google::protobuf::Message {
 public:
  DailyCountLimit();
  virtual ~DailyCountLimit();
  
  DailyCountLimit(const DailyCountLimit& from);
  
  inline DailyCountLimit& operator=(const DailyCountLimit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyCountLimit& default_instance();
  
  void Swap(DailyCountLimit* other);
  
  // implements Message ----------------------------------------------
  
  DailyCountLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyCountLimit& from);
  void MergeFrom(const DailyCountLimit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 limit_type = 1;
  inline bool has_limit_type() const;
  inline void clear_limit_type();
  static const int kLimitTypeFieldNumber = 1;
  inline ::google::protobuf::int32 limit_type() const;
  inline void set_limit_type(::google::protobuf::int32 value);
  
  // required int32 limit_count = 2;
  inline bool has_limit_count() const;
  inline void clear_limit_count();
  static const int kLimitCountFieldNumber = 2;
  inline ::google::protobuf::int32 limit_count() const;
  inline void set_limit_count(::google::protobuf::int32 value);
  
  // required int32 current_count = 3;
  inline bool has_current_count() const;
  inline void clear_current_count();
  static const int kCurrentCountFieldNumber = 3;
  inline ::google::protobuf::int32 current_count() const;
  inline void set_current_count(::google::protobuf::int32 value);
  
  // required int32 limit_purchase_count = 4;
  inline bool has_limit_purchase_count() const;
  inline void clear_limit_purchase_count();
  static const int kLimitPurchaseCountFieldNumber = 4;
  inline ::google::protobuf::int32 limit_purchase_count() const;
  inline void set_limit_purchase_count(::google::protobuf::int32 value);
  
  // required int32 current_purchase_count = 5;
  inline bool has_current_purchase_count() const;
  inline void clear_current_purchase_count();
  static const int kCurrentPurchaseCountFieldNumber = 5;
  inline ::google::protobuf::int32 current_purchase_count() const;
  inline void set_current_purchase_count(::google::protobuf::int32 value);
  
  // optional int32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::int32 update_time() const;
  inline void set_update_time(::google::protobuf::int32 value);
  
  // optional int32 add_count = 7;
  inline bool has_add_count() const;
  inline void clear_add_count();
  static const int kAddCountFieldNumber = 7;
  inline ::google::protobuf::int32 add_count() const;
  inline void set_add_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.DailyCountLimit)
 private:
  inline void set_has_limit_type();
  inline void clear_has_limit_type();
  inline void set_has_limit_count();
  inline void clear_has_limit_count();
  inline void set_has_current_count();
  inline void clear_has_current_count();
  inline void set_has_limit_purchase_count();
  inline void clear_has_limit_purchase_count();
  inline void set_has_current_purchase_count();
  inline void clear_has_current_purchase_count();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_add_count();
  inline void clear_has_add_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 limit_type_;
  ::google::protobuf::int32 limit_count_;
  ::google::protobuf::int32 current_count_;
  ::google::protobuf::int32 limit_purchase_count_;
  ::google::protobuf::int32 current_purchase_count_;
  ::google::protobuf::int32 update_time_;
  ::google::protobuf::int32 add_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static DailyCountLimit* default_instance_;
};
// -------------------------------------------------------------------

class RoleDailyLimitPb : public ::google::protobuf::Message {
 public:
  RoleDailyLimitPb();
  virtual ~RoleDailyLimitPb();
  
  RoleDailyLimitPb(const RoleDailyLimitPb& from);
  
  inline RoleDailyLimitPb& operator=(const RoleDailyLimitPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDailyLimitPb& default_instance();
  
  void Swap(RoleDailyLimitPb* other);
  
  // implements Message ----------------------------------------------
  
  RoleDailyLimitPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDailyLimitPb& from);
  void MergeFrom(const RoleDailyLimitPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  inline int daily_limit_size() const;
  inline void clear_daily_limit();
  static const int kDailyLimitFieldNumber = 1;
  inline const ::protocols::common::DailyCountLimit& daily_limit(int index) const;
  inline ::protocols::common::DailyCountLimit* mutable_daily_limit(int index);
  inline ::protocols::common::DailyCountLimit* add_daily_limit();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyCountLimit >&
      daily_limit() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyCountLimit >*
      mutable_daily_limit();
  
  // @@protoc_insertion_point(class_scope:protocols.common.RoleDailyLimitPb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyCountLimit > daily_limit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static RoleDailyLimitPb* default_instance_;
};
// -------------------------------------------------------------------

class DBRoleLimitDataPb : public ::google::protobuf::Message {
 public:
  DBRoleLimitDataPb();
  virtual ~DBRoleLimitDataPb();
  
  DBRoleLimitDataPb(const DBRoleLimitDataPb& from);
  
  inline DBRoleLimitDataPb& operator=(const DBRoleLimitDataPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DBRoleLimitDataPb& default_instance();
  
  void Swap(DBRoleLimitDataPb* other);
  
  // implements Message ----------------------------------------------
  
  DBRoleLimitDataPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBRoleLimitDataPb& from);
  void MergeFrom(const DBRoleLimitDataPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  inline bool has_cool_down() const;
  inline void clear_cool_down();
  static const int kCoolDownFieldNumber = 1;
  inline const ::protocols::common::RoleCoolDownPb& cool_down() const;
  inline ::protocols::common::RoleCoolDownPb* mutable_cool_down();
  inline ::protocols::common::RoleCoolDownPb* release_cool_down();
  
  // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
  inline bool has_count_limit() const;
  inline void clear_count_limit();
  static const int kCountLimitFieldNumber = 2;
  inline const ::protocols::common::RoleDailyLimitPb& count_limit() const;
  inline ::protocols::common::RoleDailyLimitPb* mutable_count_limit();
  inline ::protocols::common::RoleDailyLimitPb* release_count_limit();
  
  // optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
  inline bool has_hired_yingling_count() const;
  inline void clear_hired_yingling_count();
  static const int kHiredYinglingCountFieldNumber = 3;
  inline const ::protocols::common::RoleHiredYinglingCount& hired_yingling_count() const;
  inline ::protocols::common::RoleHiredYinglingCount* mutable_hired_yingling_count();
  inline ::protocols::common::RoleHiredYinglingCount* release_hired_yingling_count();
  
  // optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
  inline bool has_strength_equip_count() const;
  inline void clear_strength_equip_count();
  static const int kStrengthEquipCountFieldNumber = 4;
  inline const ::protocols::common::RoleStrengthEquipCount& strength_equip_count() const;
  inline ::protocols::common::RoleStrengthEquipCount* mutable_strength_equip_count();
  inline ::protocols::common::RoleStrengthEquipCount* release_strength_equip_count();
  
  // optional int32 guild_contrib = 5;
  inline bool has_guild_contrib() const;
  inline void clear_guild_contrib();
  static const int kGuildContribFieldNumber = 5;
  inline ::google::protobuf::int32 guild_contrib() const;
  inline void set_guild_contrib(::google::protobuf::int32 value);
  
  // optional .protocols.common.YouLiMapData youli_data = 6;
  inline bool has_youli_data() const;
  inline void clear_youli_data();
  static const int kYouliDataFieldNumber = 6;
  inline const ::protocols::common::YouLiMapData& youli_data() const;
  inline ::protocols::common::YouLiMapData* mutable_youli_data();
  inline ::protocols::common::YouLiMapData* release_youli_data();
  
  // optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
  inline bool has_yingling_combo_data() const;
  inline void clear_yingling_combo_data();
  static const int kYinglingComboDataFieldNumber = 7;
  inline const ::protocols::common::YinglingComboStatus& yingling_combo_data() const;
  inline ::protocols::common::YinglingComboStatus* mutable_yingling_combo_data();
  inline ::protocols::common::YinglingComboStatus* release_yingling_combo_data();
  
  // optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
  inline bool has_yingling_train_status() const;
  inline void clear_yingling_train_status();
  static const int kYinglingTrainStatusFieldNumber = 8;
  inline const ::protocols::common::YinglingTrainStatus& yingling_train_status() const;
  inline ::protocols::common::YinglingTrainStatus* mutable_yingling_train_status();
  inline ::protocols::common::YinglingTrainStatus* release_yingling_train_status();
  
  // @@protoc_insertion_point(class_scope:protocols.common.DBRoleLimitDataPb)
 private:
  inline void set_has_cool_down();
  inline void clear_has_cool_down();
  inline void set_has_count_limit();
  inline void clear_has_count_limit();
  inline void set_has_hired_yingling_count();
  inline void clear_has_hired_yingling_count();
  inline void set_has_strength_equip_count();
  inline void clear_has_strength_equip_count();
  inline void set_has_guild_contrib();
  inline void clear_has_guild_contrib();
  inline void set_has_youli_data();
  inline void clear_has_youli_data();
  inline void set_has_yingling_combo_data();
  inline void clear_has_yingling_combo_data();
  inline void set_has_yingling_train_status();
  inline void clear_has_yingling_train_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::RoleCoolDownPb* cool_down_;
  ::protocols::common::RoleDailyLimitPb* count_limit_;
  ::protocols::common::RoleHiredYinglingCount* hired_yingling_count_;
  ::protocols::common::RoleStrengthEquipCount* strength_equip_count_;
  ::protocols::common::YouLiMapData* youli_data_;
  ::protocols::common::YinglingComboStatus* yingling_combo_data_;
  ::protocols::common::YinglingTrainStatus* yingling_train_status_;
  ::google::protobuf::int32 guild_contrib_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static DBRoleLimitDataPb* default_instance_;
};
// -------------------------------------------------------------------

class HiredYinglingCount : public ::google::protobuf::Message {
 public:
  HiredYinglingCount();
  virtual ~HiredYinglingCount();
  
  HiredYinglingCount(const HiredYinglingCount& from);
  
  inline HiredYinglingCount& operator=(const HiredYinglingCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HiredYinglingCount& default_instance();
  
  void Swap(HiredYinglingCount* other);
  
  // implements Message ----------------------------------------------
  
  HiredYinglingCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HiredYinglingCount& from);
  void MergeFrom(const HiredYinglingCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.HiredYinglingCount)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static HiredYinglingCount* default_instance_;
};
// -------------------------------------------------------------------

class RoleHiredYinglingCount : public ::google::protobuf::Message {
 public:
  RoleHiredYinglingCount();
  virtual ~RoleHiredYinglingCount();
  
  RoleHiredYinglingCount(const RoleHiredYinglingCount& from);
  
  inline RoleHiredYinglingCount& operator=(const RoleHiredYinglingCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHiredYinglingCount& default_instance();
  
  void Swap(RoleHiredYinglingCount* other);
  
  // implements Message ----------------------------------------------
  
  RoleHiredYinglingCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHiredYinglingCount& from);
  void MergeFrom(const RoleHiredYinglingCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.HiredYinglingCount data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::protocols::common::HiredYinglingCount& data(int index) const;
  inline ::protocols::common::HiredYinglingCount* mutable_data(int index);
  inline ::protocols::common::HiredYinglingCount* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
      mutable_data();
  
  // repeated int32 yingling_tid = 2;
  inline int yingling_tid_size() const;
  inline void clear_yingling_tid();
  static const int kYinglingTidFieldNumber = 2;
  inline ::google::protobuf::int32 yingling_tid(int index) const;
  inline void set_yingling_tid(int index, ::google::protobuf::int32 value);
  inline void add_yingling_tid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      yingling_tid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_yingling_tid();
  
  // repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
  inline int yingling_pro_size() const;
  inline void clear_yingling_pro();
  static const int kYinglingProFieldNumber = 3;
  inline const ::protocols::common::HiredYinglingCount& yingling_pro(int index) const;
  inline ::protocols::common::HiredYinglingCount* mutable_yingling_pro(int index);
  inline ::protocols::common::HiredYinglingCount* add_yingling_pro();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
      yingling_pro() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
      mutable_yingling_pro();
  
  // repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
  inline int yingling_quality_size() const;
  inline void clear_yingling_quality();
  static const int kYinglingQualityFieldNumber = 4;
  inline const ::protocols::common::HiredYinglingCount& yingling_quality(int index) const;
  inline ::protocols::common::HiredYinglingCount* mutable_yingling_quality(int index);
  inline ::protocols::common::HiredYinglingCount* add_yingling_quality();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
      yingling_quality() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
      mutable_yingling_quality();
  
  // @@protoc_insertion_point(class_scope:protocols.common.RoleHiredYinglingCount)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount > data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > yingling_tid_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount > yingling_pro_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount > yingling_quality_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static RoleHiredYinglingCount* default_instance_;
};
// -------------------------------------------------------------------

class StrengthEquipCount : public ::google::protobuf::Message {
 public:
  StrengthEquipCount();
  virtual ~StrengthEquipCount();
  
  StrengthEquipCount(const StrengthEquipCount& from);
  
  inline StrengthEquipCount& operator=(const StrengthEquipCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StrengthEquipCount& default_instance();
  
  void Swap(StrengthEquipCount* other);
  
  // implements Message ----------------------------------------------
  
  StrengthEquipCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrengthEquipCount& from);
  void MergeFrom(const StrengthEquipCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 strength_level = 1;
  inline bool has_strength_level() const;
  inline void clear_strength_level();
  static const int kStrengthLevelFieldNumber = 1;
  inline ::google::protobuf::int32 strength_level() const;
  inline void set_strength_level(::google::protobuf::int32 value);
  
  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.StrengthEquipCount)
 private:
  inline void set_has_strength_level();
  inline void clear_has_strength_level();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 strength_level_;
  ::google::protobuf::int32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static StrengthEquipCount* default_instance_;
};
// -------------------------------------------------------------------

class RoleStrengthEquipCount : public ::google::protobuf::Message {
 public:
  RoleStrengthEquipCount();
  virtual ~RoleStrengthEquipCount();
  
  RoleStrengthEquipCount(const RoleStrengthEquipCount& from);
  
  inline RoleStrengthEquipCount& operator=(const RoleStrengthEquipCount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleStrengthEquipCount& default_instance();
  
  void Swap(RoleStrengthEquipCount* other);
  
  // implements Message ----------------------------------------------
  
  RoleStrengthEquipCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleStrengthEquipCount& from);
  void MergeFrom(const RoleStrengthEquipCount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.StrengthEquipCount data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::protocols::common::StrengthEquipCount& data(int index) const;
  inline ::protocols::common::StrengthEquipCount* mutable_data(int index);
  inline ::protocols::common::StrengthEquipCount* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::StrengthEquipCount >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::StrengthEquipCount >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:protocols.common.RoleStrengthEquipCount)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::StrengthEquipCount > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static RoleStrengthEquipCount* default_instance_;
};
// -------------------------------------------------------------------

class DailyQuest : public ::google::protobuf::Message {
 public:
  DailyQuest();
  virtual ~DailyQuest();
  
  DailyQuest(const DailyQuest& from);
  
  inline DailyQuest& operator=(const DailyQuest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyQuest& default_instance();
  
  void Swap(DailyQuest* other);
  
  // implements Message ----------------------------------------------
  
  DailyQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyQuest& from);
  void MergeFrom(const DailyQuest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 quest_id = 1;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 1;
  inline ::google::protobuf::int32 quest_id() const;
  inline void set_quest_id(::google::protobuf::int32 value);
  
  // required int32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);
  
  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // required int32 category = 4;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 4;
  inline ::google::protobuf::int32 category() const;
  inline void set_category(::google::protobuf::int32 value);
  
  // optional int32 reward_exp = 5;
  inline bool has_reward_exp() const;
  inline void clear_reward_exp();
  static const int kRewardExpFieldNumber = 5;
  inline ::google::protobuf::int32 reward_exp() const;
  inline void set_reward_exp(::google::protobuf::int32 value);
  
  // optional int32 reward_coin = 6;
  inline bool has_reward_coin() const;
  inline void clear_reward_coin();
  static const int kRewardCoinFieldNumber = 6;
  inline ::google::protobuf::int32 reward_coin() const;
  inline void set_reward_coin(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.DailyQuest)
 private:
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_reward_exp();
  inline void clear_has_reward_exp();
  inline void set_has_reward_coin();
  inline void clear_has_reward_coin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 quest_id_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 category_;
  ::google::protobuf::int32 reward_exp_;
  ::google::protobuf::int32 reward_coin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static DailyQuest* default_instance_;
};
// -------------------------------------------------------------------

class DailyQuestPb : public ::google::protobuf::Message {
 public:
  DailyQuestPb();
  virtual ~DailyQuestPb();
  
  DailyQuestPb(const DailyQuestPb& from);
  
  inline DailyQuestPb& operator=(const DailyQuestPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyQuestPb& default_instance();
  
  void Swap(DailyQuestPb* other);
  
  // implements Message ----------------------------------------------
  
  DailyQuestPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyQuestPb& from);
  void MergeFrom(const DailyQuestPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  inline int daily_quests_size() const;
  inline void clear_daily_quests();
  static const int kDailyQuestsFieldNumber = 1;
  inline const ::protocols::common::DailyQuest& daily_quests(int index) const;
  inline ::protocols::common::DailyQuest* mutable_daily_quests(int index);
  inline ::protocols::common::DailyQuest* add_daily_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >&
      daily_quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >*
      mutable_daily_quests();
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  inline int accepted_daily_quests_size() const;
  inline void clear_accepted_daily_quests();
  static const int kAcceptedDailyQuestsFieldNumber = 2;
  inline const ::protocols::common::DailyQuest& accepted_daily_quests(int index) const;
  inline ::protocols::common::DailyQuest* mutable_accepted_daily_quests(int index);
  inline ::protocols::common::DailyQuest* add_accepted_daily_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >&
      accepted_daily_quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >*
      mutable_accepted_daily_quests();
  
  // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
  inline bool has_xunluo_quest() const;
  inline void clear_xunluo_quest();
  static const int kXunluoQuestFieldNumber = 3;
  inline const ::protocols::common::XunluoQuestPb& xunluo_quest() const;
  inline ::protocols::common::XunluoQuestPb* mutable_xunluo_quest();
  inline ::protocols::common::XunluoQuestPb* release_xunluo_quest();
  
  // optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
  inline bool has_guild_circle_quest() const;
  inline void clear_guild_circle_quest();
  static const int kGuildCircleQuestFieldNumber = 4;
  inline const ::protocols::common::GuildCircleQuestPb& guild_circle_quest() const;
  inline ::protocols::common::GuildCircleQuestPb* mutable_guild_circle_quest();
  inline ::protocols::common::GuildCircleQuestPb* release_guild_circle_quest();
  
  // @@protoc_insertion_point(class_scope:protocols.common.DailyQuestPb)
 private:
  inline void set_has_xunluo_quest();
  inline void clear_has_xunluo_quest();
  inline void set_has_guild_circle_quest();
  inline void clear_has_guild_circle_quest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest > daily_quests_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest > accepted_daily_quests_;
  ::protocols::common::XunluoQuestPb* xunluo_quest_;
  ::protocols::common::GuildCircleQuestPb* guild_circle_quest_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static DailyQuestPb* default_instance_;
};
// -------------------------------------------------------------------

class XunluoQuestPb : public ::google::protobuf::Message {
 public:
  XunluoQuestPb();
  virtual ~XunluoQuestPb();
  
  XunluoQuestPb(const XunluoQuestPb& from);
  
  inline XunluoQuestPb& operator=(const XunluoQuestPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const XunluoQuestPb& default_instance();
  
  void Swap(XunluoQuestPb* other);
  
  // implements Message ----------------------------------------------
  
  XunluoQuestPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const XunluoQuestPb& from);
  void MergeFrom(const XunluoQuestPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cur_circle_index = 3;
  inline bool has_cur_circle_index() const;
  inline void clear_cur_circle_index();
  static const int kCurCircleIndexFieldNumber = 3;
  inline ::google::protobuf::int32 cur_circle_index() const;
  inline void set_cur_circle_index(::google::protobuf::int32 value);
  
  // optional int32 xunluo_quest_id = 4;
  inline bool has_xunluo_quest_id() const;
  inline void clear_xunluo_quest_id();
  static const int kXunluoQuestIdFieldNumber = 4;
  inline ::google::protobuf::int32 xunluo_quest_id() const;
  inline void set_xunluo_quest_id(::google::protobuf::int32 value);
  
  // optional int32 xunluo_reward_exp = 5;
  inline bool has_xunluo_reward_exp() const;
  inline void clear_xunluo_reward_exp();
  static const int kXunluoRewardExpFieldNumber = 5;
  inline ::google::protobuf::int32 xunluo_reward_exp() const;
  inline void set_xunluo_reward_exp(::google::protobuf::int32 value);
  
  // optional int32 xunluo_reward_coin = 6;
  inline bool has_xunluo_reward_coin() const;
  inline void clear_xunluo_reward_coin();
  static const int kXunluoRewardCoinFieldNumber = 6;
  inline ::google::protobuf::int32 xunluo_reward_coin() const;
  inline void set_xunluo_reward_coin(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.XunluoQuestPb)
 private:
  inline void set_has_cur_circle_index();
  inline void clear_has_cur_circle_index();
  inline void set_has_xunluo_quest_id();
  inline void clear_has_xunluo_quest_id();
  inline void set_has_xunluo_reward_exp();
  inline void clear_has_xunluo_reward_exp();
  inline void set_has_xunluo_reward_coin();
  inline void clear_has_xunluo_reward_coin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cur_circle_index_;
  ::google::protobuf::int32 xunluo_quest_id_;
  ::google::protobuf::int32 xunluo_reward_exp_;
  ::google::protobuf::int32 xunluo_reward_coin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static XunluoQuestPb* default_instance_;
};
// -------------------------------------------------------------------

class GuildCircleQuestPb : public ::google::protobuf::Message {
 public:
  GuildCircleQuestPb();
  virtual ~GuildCircleQuestPb();
  
  GuildCircleQuestPb(const GuildCircleQuestPb& from);
  
  inline GuildCircleQuestPb& operator=(const GuildCircleQuestPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCircleQuestPb& default_instance();
  
  void Swap(GuildCircleQuestPb* other);
  
  // implements Message ----------------------------------------------
  
  GuildCircleQuestPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCircleQuestPb& from);
  void MergeFrom(const GuildCircleQuestPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cur_circle_index = 1;
  inline bool has_cur_circle_index() const;
  inline void clear_cur_circle_index();
  static const int kCurCircleIndexFieldNumber = 1;
  inline ::google::protobuf::int32 cur_circle_index() const;
  inline void set_cur_circle_index(::google::protobuf::int32 value);
  
  // optional int32 quest_id = 2;
  inline bool has_quest_id() const;
  inline void clear_quest_id();
  static const int kQuestIdFieldNumber = 2;
  inline ::google::protobuf::int32 quest_id() const;
  inline void set_quest_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildCircleQuestPb)
 private:
  inline void set_has_cur_circle_index();
  inline void clear_has_cur_circle_index();
  inline void set_has_quest_id();
  inline void clear_has_quest_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 cur_circle_index_;
  ::google::protobuf::int32 quest_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static GuildCircleQuestPb* default_instance_;
};
// -------------------------------------------------------------------

class PlayerFlagPb : public ::google::protobuf::Message {
 public:
  PlayerFlagPb();
  virtual ~PlayerFlagPb();
  
  PlayerFlagPb(const PlayerFlagPb& from);
  
  inline PlayerFlagPb& operator=(const PlayerFlagPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFlagPb& default_instance();
  
  void Swap(PlayerFlagPb* other);
  
  // implements Message ----------------------------------------------
  
  PlayerFlagPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerFlagPb& from);
  void MergeFrom(const PlayerFlagPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerFlagPb)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerFlagPb* default_instance_;
};
// -------------------------------------------------------------------

class PlayerFlagDataPb : public ::google::protobuf::Message {
 public:
  PlayerFlagDataPb();
  virtual ~PlayerFlagDataPb();
  
  PlayerFlagDataPb(const PlayerFlagDataPb& from);
  
  inline PlayerFlagDataPb& operator=(const PlayerFlagDataPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerFlagDataPb& default_instance();
  
  void Swap(PlayerFlagDataPb* other);
  
  // implements Message ----------------------------------------------
  
  PlayerFlagDataPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerFlagDataPb& from);
  void MergeFrom(const PlayerFlagDataPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.PlayerFlagPb data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::protocols::common::PlayerFlagPb& data(int index) const;
  inline ::protocols::common::PlayerFlagPb* mutable_data(int index);
  inline ::protocols::common::PlayerFlagPb* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerFlagPb >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerFlagPb >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerFlagDataPb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerFlagPb > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerFlagDataPb* default_instance_;
};
// -------------------------------------------------------------------

class TrainAttribute : public ::google::protobuf::Message {
 public:
  TrainAttribute();
  virtual ~TrainAttribute();
  
  TrainAttribute(const TrainAttribute& from);
  
  inline TrainAttribute& operator=(const TrainAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrainAttribute& default_instance();
  
  void Swap(TrainAttribute* other);
  
  // implements Message ----------------------------------------------
  
  TrainAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrainAttribute& from);
  void MergeFrom(const TrainAttribute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // repeated .protocols.common.PBIntPair train_attribute = 2;
  inline int train_attribute_size() const;
  inline void clear_train_attribute();
  static const int kTrainAttributeFieldNumber = 2;
  inline const ::protocols::common::PBIntPair& train_attribute(int index) const;
  inline ::protocols::common::PBIntPair* mutable_train_attribute(int index);
  inline ::protocols::common::PBIntPair* add_train_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >&
      train_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >*
      mutable_train_attribute();
  
  // repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
  inline int unsave_train_attribute_size() const;
  inline void clear_unsave_train_attribute();
  static const int kUnsaveTrainAttributeFieldNumber = 3;
  inline const ::protocols::common::PBIntPair& unsave_train_attribute(int index) const;
  inline ::protocols::common::PBIntPair* mutable_unsave_train_attribute(int index);
  inline ::protocols::common::PBIntPair* add_unsave_train_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >&
      unsave_train_attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >*
      mutable_unsave_train_attribute();
  
  // @@protoc_insertion_point(class_scope:protocols.common.TrainAttribute)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair > train_attribute_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair > unsave_train_attribute_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static TrainAttribute* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPlayerInfo : public ::google::protobuf::Message {
 public:
  ArenaPlayerInfo();
  virtual ~ArenaPlayerInfo();
  
  ArenaPlayerInfo(const ArenaPlayerInfo& from);
  
  inline ArenaPlayerInfo& operator=(const ArenaPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPlayerInfo& default_instance();
  
  void Swap(ArenaPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  ArenaPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPlayerInfo& from);
  void MergeFrom(const ArenaPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // required int32 cur_rank = 4;
  inline bool has_cur_rank() const;
  inline void clear_cur_rank();
  static const int kCurRankFieldNumber = 4;
  inline ::google::protobuf::int32 cur_rank() const;
  inline void set_cur_rank(::google::protobuf::int32 value);
  
  // optional int32 highest_rank = 7;
  inline bool has_highest_rank() const;
  inline void clear_highest_rank();
  static const int kHighestRankFieldNumber = 7;
  inline ::google::protobuf::int32 highest_rank() const;
  inline void set_highest_rank(::google::protobuf::int32 value);
  
  // optional int32 titile = 5;
  inline bool has_titile() const;
  inline void clear_titile();
  static const int kTitileFieldNumber = 5;
  inline ::google::protobuf::int32 titile() const;
  inline void set_titile(::google::protobuf::int32 value);
  
  // optional int32 max_cont_wins = 6;
  inline bool has_max_cont_wins() const;
  inline void clear_max_cont_wins();
  static const int kMaxContWinsFieldNumber = 6;
  inline ::google::protobuf::int32 max_cont_wins() const;
  inline void set_max_cont_wins(::google::protobuf::int32 value);
  
  // optional int32 cur_cont_wins = 8;
  inline bool has_cur_cont_wins() const;
  inline void clear_cur_cont_wins();
  static const int kCurContWinsFieldNumber = 8;
  inline ::google::protobuf::int32 cur_cont_wins() const;
  inline void set_cur_cont_wins(::google::protobuf::int32 value);
  
  // optional int32 fight_capacity = 9;
  inline bool has_fight_capacity() const;
  inline void clear_fight_capacity();
  static const int kFightCapacityFieldNumber = 9;
  inline ::google::protobuf::int32 fight_capacity() const;
  inline void set_fight_capacity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.ArenaPlayerInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cur_rank();
  inline void clear_has_cur_rank();
  inline void set_has_highest_rank();
  inline void clear_has_highest_rank();
  inline void set_has_titile();
  inline void clear_has_titile();
  inline void set_has_max_cont_wins();
  inline void clear_has_max_cont_wins();
  inline void set_has_cur_cont_wins();
  inline void clear_has_cur_cont_wins();
  inline void set_has_fight_capacity();
  inline void clear_has_fight_capacity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 cur_rank_;
  ::google::protobuf::int32 highest_rank_;
  ::google::protobuf::int32 titile_;
  ::google::protobuf::int32 max_cont_wins_;
  ::google::protobuf::int32 cur_cont_wins_;
  ::google::protobuf::int32 fight_capacity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static ArenaPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class TreasureBox : public ::google::protobuf::Message {
 public:
  TreasureBox();
  virtual ~TreasureBox();
  
  TreasureBox(const TreasureBox& from);
  
  inline TreasureBox& operator=(const TreasureBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureBox& default_instance();
  
  void Swap(TreasureBox* other);
  
  // implements Message ----------------------------------------------
  
  TreasureBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureBox& from);
  void MergeFrom(const TreasureBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  inline int item_info_size() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::protocols::common::ItemInfo& item_info(int index) const;
  inline ::protocols::common::ItemInfo* mutable_item_info(int index);
  inline ::protocols::common::ItemInfo* add_item_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      item_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_item_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.TreasureBox)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > item_info_;
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static TreasureBox* default_instance_;
};
// -------------------------------------------------------------------

class UsedName : public ::google::protobuf::Message {
 public:
  UsedName();
  virtual ~UsedName();
  
  UsedName(const UsedName& from);
  
  inline UsedName& operator=(const UsedName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UsedName& default_instance();
  
  void Swap(UsedName* other);
  
  // implements Message ----------------------------------------------
  
  UsedName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UsedName& from);
  void MergeFrom(const UsedName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);
  
  // optional int64 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int64 status() const;
  inline void set_status(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.UsedName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int64 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static UsedName* default_instance_;
};
// -------------------------------------------------------------------

class UsedNameData : public ::google::protobuf::Message {
 public:
  UsedNameData();
  virtual ~UsedNameData();
  
  UsedNameData(const UsedNameData& from);
  
  inline UsedNameData& operator=(const UsedNameData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UsedNameData& default_instance();
  
  void Swap(UsedNameData* other);
  
  // implements Message ----------------------------------------------
  
  UsedNameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UsedNameData& from);
  void MergeFrom(const UsedNameData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.UsedName used_name = 1;
  inline int used_name_size() const;
  inline void clear_used_name();
  static const int kUsedNameFieldNumber = 1;
  inline const ::protocols::common::UsedName& used_name(int index) const;
  inline ::protocols::common::UsedName* mutable_used_name(int index);
  inline ::protocols::common::UsedName* add_used_name();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::UsedName >&
      used_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::UsedName >*
      mutable_used_name();
  
  // @@protoc_insertion_point(class_scope:protocols.common.UsedNameData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::UsedName > used_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static UsedNameData* default_instance_;
};
// -------------------------------------------------------------------

class UnuseNameMsg : public ::google::protobuf::Message {
 public:
  UnuseNameMsg();
  virtual ~UnuseNameMsg();
  
  UnuseNameMsg(const UnuseNameMsg& from);
  
  inline UnuseNameMsg& operator=(const UnuseNameMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnuseNameMsg& default_instance();
  
  void Swap(UnuseNameMsg* other);
  
  // implements Message ----------------------------------------------
  
  UnuseNameMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnuseNameMsg& from);
  void MergeFrom(const UnuseNameMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.UsedName name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::protocols::common::UsedName& name() const;
  inline ::protocols::common::UsedName* mutable_name();
  inline ::protocols::common::UsedName* release_name();
  
  // @@protoc_insertion_point(class_scope:protocols.common.UnuseNameMsg)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::UsedName* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static UnuseNameMsg* default_instance_;
};
// -------------------------------------------------------------------

class HideNpcData : public ::google::protobuf::Message {
 public:
  HideNpcData();
  virtual ~HideNpcData();
  
  HideNpcData(const HideNpcData& from);
  
  inline HideNpcData& operator=(const HideNpcData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideNpcData& default_instance();
  
  void Swap(HideNpcData* other);
  
  // implements Message ----------------------------------------------
  
  HideNpcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HideNpcData& from);
  void MergeFrom(const HideNpcData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 npc_id = 1;
  inline bool has_npc_id() const;
  inline void clear_npc_id();
  static const int kNpcIdFieldNumber = 1;
  inline ::google::protobuf::int32 npc_id() const;
  inline void set_npc_id(::google::protobuf::int32 value);
  
  // optional bool is_display = 2 [default = false];
  inline bool has_is_display() const;
  inline void clear_is_display();
  static const int kIsDisplayFieldNumber = 2;
  inline bool is_display() const;
  inline void set_is_display(bool value);
  
  // optional int32 map_id = 3;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 3;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 x = 4;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 5;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 5;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 rotate = 6;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 6;
  inline ::google::protobuf::int32 rotate() const;
  inline void set_rotate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.HideNpcData)
 private:
  inline void set_has_npc_id();
  inline void clear_has_npc_id();
  inline void set_has_is_display();
  inline void clear_has_is_display();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 npc_id_;
  bool is_display_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 rotate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static HideNpcData* default_instance_;
};
// -------------------------------------------------------------------

class HideNpcPb : public ::google::protobuf::Message {
 public:
  HideNpcPb();
  virtual ~HideNpcPb();
  
  HideNpcPb(const HideNpcPb& from);
  
  inline HideNpcPb& operator=(const HideNpcPb& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideNpcPb& default_instance();
  
  void Swap(HideNpcPb* other);
  
  // implements Message ----------------------------------------------
  
  HideNpcPb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HideNpcPb& from);
  void MergeFrom(const HideNpcPb& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 npc_ids = 1;
  inline int npc_ids_size() const;
  inline void clear_npc_ids();
  static const int kNpcIdsFieldNumber = 1;
  inline ::google::protobuf::int32 npc_ids(int index) const;
  inline void set_npc_ids(int index, ::google::protobuf::int32 value);
  inline void add_npc_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      npc_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_npc_ids();
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  inline int hide_datas_size() const;
  inline void clear_hide_datas();
  static const int kHideDatasFieldNumber = 2;
  inline const ::protocols::common::HideNpcData& hide_datas(int index) const;
  inline ::protocols::common::HideNpcData* mutable_hide_datas(int index);
  inline ::protocols::common::HideNpcData* add_hide_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HideNpcData >&
      hide_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HideNpcData >*
      mutable_hide_datas();
  
  // @@protoc_insertion_point(class_scope:protocols.common.HideNpcPb)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > npc_ids_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::HideNpcData > hide_datas_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static HideNpcPb* default_instance_;
};
// -------------------------------------------------------------------

class NpcPosition : public ::google::protobuf::Message {
 public:
  NpcPosition();
  virtual ~NpcPosition();
  
  NpcPosition(const NpcPosition& from);
  
  inline NpcPosition& operator=(const NpcPosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcPosition& default_instance();
  
  void Swap(NpcPosition* other);
  
  // implements Message ----------------------------------------------
  
  NpcPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcPosition& from);
  void MergeFrom(const NpcPosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional int32 rotate = 4;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 4;
  inline ::google::protobuf::int32 rotate() const;
  inline void set_rotate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.NpcPosition)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 rotate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static NpcPosition* default_instance_;
};
// -------------------------------------------------------------------

class OpenedFunctionNotify : public ::google::protobuf::Message {
 public:
  OpenedFunctionNotify();
  virtual ~OpenedFunctionNotify();
  
  OpenedFunctionNotify(const OpenedFunctionNotify& from);
  
  inline OpenedFunctionNotify& operator=(const OpenedFunctionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenedFunctionNotify& default_instance();
  
  void Swap(OpenedFunctionNotify* other);
  
  // implements Message ----------------------------------------------
  
  OpenedFunctionNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenedFunctionNotify& from);
  void MergeFrom(const OpenedFunctionNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 opened_function = 1;
  inline int opened_function_size() const;
  inline void clear_opened_function();
  static const int kOpenedFunctionFieldNumber = 1;
  inline ::google::protobuf::int32 opened_function(int index) const;
  inline void set_opened_function(int index, ::google::protobuf::int32 value);
  inline void add_opened_function(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opened_function() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opened_function();
  
  // @@protoc_insertion_point(class_scope:protocols.common.OpenedFunctionNotify)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opened_function_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static OpenedFunctionNotify* default_instance_;
};
// -------------------------------------------------------------------

class GetBuddyTemplateAttributeRequest : public ::google::protobuf::Message {
 public:
  GetBuddyTemplateAttributeRequest();
  virtual ~GetBuddyTemplateAttributeRequest();
  
  GetBuddyTemplateAttributeRequest(const GetBuddyTemplateAttributeRequest& from);
  
  inline GetBuddyTemplateAttributeRequest& operator=(const GetBuddyTemplateAttributeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBuddyTemplateAttributeRequest& default_instance();
  
  void Swap(GetBuddyTemplateAttributeRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetBuddyTemplateAttributeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBuddyTemplateAttributeRequest& from);
  void MergeFrom(const GetBuddyTemplateAttributeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetBuddyTemplateAttributeRequest)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static GetBuddyTemplateAttributeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetBuddyTemplateAttributeResponse : public ::google::protobuf::Message {
 public:
  GetBuddyTemplateAttributeResponse();
  virtual ~GetBuddyTemplateAttributeResponse();
  
  GetBuddyTemplateAttributeResponse(const GetBuddyTemplateAttributeResponse& from);
  
  inline GetBuddyTemplateAttributeResponse& operator=(const GetBuddyTemplateAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBuddyTemplateAttributeResponse& default_instance();
  
  void Swap(GetBuddyTemplateAttributeResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetBuddyTemplateAttributeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBuddyTemplateAttributeResponse& from);
  void MergeFrom(const GetBuddyTemplateAttributeResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  inline int bare_attr_list_size() const;
  inline void clear_bare_attr_list();
  static const int kBareAttrListFieldNumber = 2;
  inline const ::protocols::common::AttributeData& bare_attr_list(int index) const;
  inline ::protocols::common::AttributeData* mutable_bare_attr_list(int index);
  inline ::protocols::common::AttributeData* add_bare_attr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
      bare_attr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
      mutable_bare_attr_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetBuddyTemplateAttributeResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData > bare_attr_list_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static GetBuddyTemplateAttributeResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouLiMapData_GridData : public ::google::protobuf::Message {
 public:
  YouLiMapData_GridData();
  virtual ~YouLiMapData_GridData();
  
  YouLiMapData_GridData(const YouLiMapData_GridData& from);
  
  inline YouLiMapData_GridData& operator=(const YouLiMapData_GridData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YouLiMapData_GridData& default_instance();
  
  void Swap(YouLiMapData_GridData* other);
  
  // implements Message ----------------------------------------------
  
  YouLiMapData_GridData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YouLiMapData_GridData& from);
  void MergeFrom(const YouLiMapData_GridData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 grid_index = 1;
  inline bool has_grid_index() const;
  inline void clear_grid_index();
  static const int kGridIndexFieldNumber = 1;
  inline ::google::protobuf::int32 grid_index() const;
  inline void set_grid_index(::google::protobuf::int32 value);
  
  // required int32 grid_type = 2;
  inline bool has_grid_type() const;
  inline void clear_grid_type();
  static const int kGridTypeFieldNumber = 2;
  inline ::google::protobuf::int32 grid_type() const;
  inline void set_grid_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.YouLiMapData.GridData)
 private:
  inline void set_has_grid_index();
  inline void clear_has_grid_index();
  inline void set_has_grid_type();
  inline void clear_has_grid_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 grid_index_;
  ::google::protobuf::int32 grid_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YouLiMapData_GridData* default_instance_;
};
// -------------------------------------------------------------------

class YouLiMapData : public ::google::protobuf::Message {
 public:
  YouLiMapData();
  virtual ~YouLiMapData();
  
  YouLiMapData(const YouLiMapData& from);
  
  inline YouLiMapData& operator=(const YouLiMapData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YouLiMapData& default_instance();
  
  void Swap(YouLiMapData* other);
  
  // implements Message ----------------------------------------------
  
  YouLiMapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YouLiMapData& from);
  void MergeFrom(const YouLiMapData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef YouLiMapData_GridData GridData;
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
  inline int grid_data_size() const;
  inline void clear_grid_data();
  static const int kGridDataFieldNumber = 1;
  inline const ::protocols::common::YouLiMapData_GridData& grid_data(int index) const;
  inline ::protocols::common::YouLiMapData_GridData* mutable_grid_data(int index);
  inline ::protocols::common::YouLiMapData_GridData* add_grid_data();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YouLiMapData_GridData >&
      grid_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YouLiMapData_GridData >*
      mutable_grid_data();
  
  // optional int32 cur_grid_index = 2;
  inline bool has_cur_grid_index() const;
  inline void clear_cur_grid_index();
  static const int kCurGridIndexFieldNumber = 2;
  inline ::google::protobuf::int32 cur_grid_index() const;
  inline void set_cur_grid_index(::google::protobuf::int32 value);
  
  // optional int32 youli_num = 3;
  inline bool has_youli_num() const;
  inline void clear_youli_num();
  static const int kYouliNumFieldNumber = 3;
  inline ::google::protobuf::int32 youli_num() const;
  inline void set_youli_num(::google::protobuf::int32 value);
  
  // optional int32 max_youli_num = 4;
  inline bool has_max_youli_num() const;
  inline void clear_max_youli_num();
  static const int kMaxYouliNumFieldNumber = 4;
  inline ::google::protobuf::int32 max_youli_num() const;
  inline void set_max_youli_num(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.YouLiMapData)
 private:
  inline void set_has_cur_grid_index();
  inline void clear_has_cur_grid_index();
  inline void set_has_youli_num();
  inline void clear_has_youli_num();
  inline void set_has_max_youli_num();
  inline void clear_has_max_youli_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::YouLiMapData_GridData > grid_data_;
  ::google::protobuf::int32 cur_grid_index_;
  ::google::protobuf::int32 youli_num_;
  ::google::protobuf::int32 max_youli_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YouLiMapData* default_instance_;
};
// -------------------------------------------------------------------

class YinglingComboStatus_ComboMember : public ::google::protobuf::Message {
 public:
  YinglingComboStatus_ComboMember();
  virtual ~YinglingComboStatus_ComboMember();
  
  YinglingComboStatus_ComboMember(const YinglingComboStatus_ComboMember& from);
  
  inline YinglingComboStatus_ComboMember& operator=(const YinglingComboStatus_ComboMember& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YinglingComboStatus_ComboMember& default_instance();
  
  void Swap(YinglingComboStatus_ComboMember* other);
  
  // implements Message ----------------------------------------------
  
  YinglingComboStatus_ComboMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YinglingComboStatus_ComboMember& from);
  void MergeFrom(const YinglingComboStatus_ComboMember& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional int32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.YinglingComboStatus_ComboMember)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YinglingComboStatus_ComboMember* default_instance_;
};
// -------------------------------------------------------------------

class YinglingComboStatus_Combo : public ::google::protobuf::Message {
 public:
  YinglingComboStatus_Combo();
  virtual ~YinglingComboStatus_Combo();
  
  YinglingComboStatus_Combo(const YinglingComboStatus_Combo& from);
  
  inline YinglingComboStatus_Combo& operator=(const YinglingComboStatus_Combo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YinglingComboStatus_Combo& default_instance();
  
  void Swap(YinglingComboStatus_Combo* other);
  
  // implements Message ----------------------------------------------
  
  YinglingComboStatus_Combo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YinglingComboStatus_Combo& from);
  void MergeFrom(const YinglingComboStatus_Combo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 combo_id = 1;
  inline bool has_combo_id() const;
  inline void clear_combo_id();
  static const int kComboIdFieldNumber = 1;
  inline ::google::protobuf::int32 combo_id() const;
  inline void set_combo_id(::google::protobuf::int32 value);
  
  // optional int32 combo_level = 2;
  inline bool has_combo_level() const;
  inline void clear_combo_level();
  static const int kComboLevelFieldNumber = 2;
  inline ::google::protobuf::int32 combo_level() const;
  inline void set_combo_level(::google::protobuf::int32 value);
  
  // optional int32 combo_status = 3;
  inline bool has_combo_status() const;
  inline void clear_combo_status();
  static const int kComboStatusFieldNumber = 3;
  inline ::google::protobuf::int32 combo_status() const;
  inline void set_combo_status(::google::protobuf::int32 value);
  
  // repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 4;
  inline const ::protocols::common::YinglingComboStatus_ComboMember& member_list(int index) const;
  inline ::protocols::common::YinglingComboStatus_ComboMember* mutable_member_list(int index);
  inline ::protocols::common::YinglingComboStatus_ComboMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_ComboMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_ComboMember >*
      mutable_member_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.YinglingComboStatus_Combo)
 private:
  inline void set_has_combo_id();
  inline void clear_has_combo_id();
  inline void set_has_combo_level();
  inline void clear_has_combo_level();
  inline void set_has_combo_status();
  inline void clear_has_combo_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 combo_id_;
  ::google::protobuf::int32 combo_level_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_ComboMember > member_list_;
  ::google::protobuf::int32 combo_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YinglingComboStatus_Combo* default_instance_;
};
// -------------------------------------------------------------------

class YinglingComboStatus : public ::google::protobuf::Message {
 public:
  YinglingComboStatus();
  virtual ~YinglingComboStatus();
  
  YinglingComboStatus(const YinglingComboStatus& from);
  
  inline YinglingComboStatus& operator=(const YinglingComboStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YinglingComboStatus& default_instance();
  
  void Swap(YinglingComboStatus* other);
  
  // implements Message ----------------------------------------------
  
  YinglingComboStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YinglingComboStatus& from);
  void MergeFrom(const YinglingComboStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
  inline int combo_list_size() const;
  inline void clear_combo_list();
  static const int kComboListFieldNumber = 1;
  inline const ::protocols::common::YinglingComboStatus_Combo& combo_list(int index) const;
  inline ::protocols::common::YinglingComboStatus_Combo* mutable_combo_list(int index);
  inline ::protocols::common::YinglingComboStatus_Combo* add_combo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_Combo >&
      combo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_Combo >*
      mutable_combo_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.YinglingComboStatus)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_Combo > combo_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YinglingComboStatus* default_instance_;
};
// -------------------------------------------------------------------

class YinglingTrainStatus : public ::google::protobuf::Message {
 public:
  YinglingTrainStatus();
  virtual ~YinglingTrainStatus();
  
  YinglingTrainStatus(const YinglingTrainStatus& from);
  
  inline YinglingTrainStatus& operator=(const YinglingTrainStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const YinglingTrainStatus& default_instance();
  
  void Swap(YinglingTrainStatus* other);
  
  // implements Message ----------------------------------------------
  
  YinglingTrainStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YinglingTrainStatus& from);
  void MergeFrom(const YinglingTrainStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.TrainAttribute train_attribute_list = 1;
  inline int train_attribute_list_size() const;
  inline void clear_train_attribute_list();
  static const int kTrainAttributeListFieldNumber = 1;
  inline const ::protocols::common::TrainAttribute& train_attribute_list(int index) const;
  inline ::protocols::common::TrainAttribute* mutable_train_attribute_list(int index);
  inline ::protocols::common::TrainAttribute* add_train_attribute_list();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TrainAttribute >&
      train_attribute_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TrainAttribute >*
      mutable_train_attribute_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.YinglingTrainStatus)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::TrainAttribute > train_attribute_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fcommon_2eproto();
  friend void protobuf_AssignDesc_game_5fcommon_2eproto();
  friend void protobuf_ShutdownFile_game_5fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static YinglingTrainStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// InstanceCardInfo

// required int32 item_id = 1;
inline bool InstanceCardInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceCardInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceCardInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceCardInfo::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 InstanceCardInfo::item_id() const {
  return item_id_;
}
inline void InstanceCardInfo::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_count = 2;
inline bool InstanceCardInfo::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceCardInfo::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceCardInfo::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceCardInfo::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 InstanceCardInfo::item_count() const {
  return item_count_;
}
inline void InstanceCardInfo::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// required int32 type = 3;
inline bool InstanceCardInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstanceCardInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstanceCardInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstanceCardInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 InstanceCardInfo::type() const {
  return type_;
}
inline void InstanceCardInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 icon_id = 4;
inline bool InstanceCardInfo::has_icon_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstanceCardInfo::set_has_icon_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstanceCardInfo::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstanceCardInfo::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 InstanceCardInfo::icon_id() const {
  return icon_id_;
}
inline void InstanceCardInfo::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// -------------------------------------------------------------------

// InstanceWantedInfo

// required int32 instance_id = 1;
inline bool InstanceWantedInfo::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceWantedInfo::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceWantedInfo::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceWantedInfo::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 InstanceWantedInfo::instance_id() const {
  return instance_id_;
}
inline void InstanceWantedInfo::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional int32 left_time = 2;
inline bool InstanceWantedInfo::has_left_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceWantedInfo::set_has_left_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceWantedInfo::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceWantedInfo::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 InstanceWantedInfo::left_time() const {
  return left_time_;
}
inline void InstanceWantedInfo::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// repeated .protocols.common.InstanceCardInfo card_info = 3;
inline int InstanceWantedInfo::card_info_size() const {
  return card_info_.size();
}
inline void InstanceWantedInfo::clear_card_info() {
  card_info_.Clear();
}
inline const ::protocols::common::InstanceCardInfo& InstanceWantedInfo::card_info(int index) const {
  return card_info_.Get(index);
}
inline ::protocols::common::InstanceCardInfo* InstanceWantedInfo::mutable_card_info(int index) {
  return card_info_.Mutable(index);
}
inline ::protocols::common::InstanceCardInfo* InstanceWantedInfo::add_card_info() {
  return card_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::InstanceCardInfo >&
InstanceWantedInfo::card_info() const {
  return card_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::InstanceCardInfo >*
InstanceWantedInfo::mutable_card_info() {
  return &card_info_;
}

// -------------------------------------------------------------------

// BuffInfo

// required int32 buff_id = 1;
inline bool BuffInfo::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffInfo::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffInfo::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffInfo::clear_buff_id() {
  buff_id_ = 0;
  clear_has_buff_id();
}
inline ::google::protobuf::int32 BuffInfo::buff_id() const {
  return buff_id_;
}
inline void BuffInfo::set_buff_id(::google::protobuf::int32 value) {
  set_has_buff_id();
  buff_id_ = value;
}

// optional int32 buff_value = 2;
inline bool BuffInfo::has_buff_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffInfo::set_has_buff_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffInfo::clear_has_buff_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffInfo::clear_buff_value() {
  buff_value_ = 0;
  clear_has_buff_value();
}
inline ::google::protobuf::int32 BuffInfo::buff_value() const {
  return buff_value_;
}
inline void BuffInfo::set_buff_value(::google::protobuf::int32 value) {
  set_has_buff_value();
  buff_value_ = value;
}

// optional int32 left_time = 3;
inline bool BuffInfo::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffInfo::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffInfo::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffInfo::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 BuffInfo::left_time() const {
  return left_time_;
}
inline void BuffInfo::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// Fighter

// optional int32 camp = 1;
inline bool Fighter::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Fighter::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Fighter::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Fighter::clear_camp() {
  camp_ = 0;
  clear_has_camp();
}
inline ::google::protobuf::int32 Fighter::camp() const {
  return camp_;
}
inline void Fighter::set_camp(::google::protobuf::int32 value) {
  set_has_camp();
  camp_ = value;
}

// optional int32 index = 2;
inline bool Fighter::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Fighter::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Fighter::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Fighter::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Fighter::index() const {
  return index_;
}
inline void Fighter::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 guid = 3;
inline bool Fighter::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Fighter::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Fighter::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Fighter::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 Fighter::guid() const {
  return guid_;
}
inline void Fighter::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 tid = 4;
inline bool Fighter::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Fighter::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Fighter::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Fighter::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 Fighter::tid() const {
  return tid_;
}
inline void Fighter::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 hp = 5;
inline bool Fighter::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Fighter::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Fighter::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Fighter::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 Fighter::hp() const {
  return hp_;
}
inline void Fighter::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 max_hp = 16;
inline bool Fighter::has_max_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Fighter::set_has_max_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Fighter::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Fighter::clear_max_hp() {
  max_hp_ = 0;
  clear_has_max_hp();
}
inline ::google::protobuf::int32 Fighter::max_hp() const {
  return max_hp_;
}
inline void Fighter::set_max_hp(::google::protobuf::int32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional int32 level = 6;
inline bool Fighter::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Fighter::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Fighter::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Fighter::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Fighter::level() const {
  return level_;
}
inline void Fighter::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 is_player = 7;
inline bool Fighter::has_is_player() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Fighter::set_has_is_player() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Fighter::clear_has_is_player() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Fighter::clear_is_player() {
  is_player_ = 0;
  clear_has_is_player();
}
inline ::google::protobuf::int32 Fighter::is_player() const {
  return is_player_;
}
inline void Fighter::set_is_player(::google::protobuf::int32 value) {
  set_has_is_player();
  is_player_ = value;
}

// optional int32 is_team_leader = 8;
inline bool Fighter::has_is_team_leader() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Fighter::set_has_is_team_leader() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Fighter::clear_has_is_team_leader() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Fighter::clear_is_team_leader() {
  is_team_leader_ = 0;
  clear_has_is_team_leader();
}
inline ::google::protobuf::int32 Fighter::is_team_leader() const {
  return is_team_leader_;
}
inline void Fighter::set_is_team_leader(::google::protobuf::int32 value) {
  set_has_is_team_leader();
  is_team_leader_ = value;
}

// optional string name = 9;
inline bool Fighter::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Fighter::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Fighter::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Fighter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Fighter::name() const {
  return *name_;
}
inline void Fighter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fighter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Fighter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fighter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Fighter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string owner_name = 15;
inline bool Fighter::has_owner_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Fighter::set_has_owner_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Fighter::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Fighter::clear_owner_name() {
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    owner_name_->clear();
  }
  clear_has_owner_name();
}
inline const ::std::string& Fighter::owner_name() const {
  return *owner_name_;
}
inline void Fighter::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void Fighter::set_owner_name(const char* value) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(value);
}
inline void Fighter::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  owner_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Fighter::mutable_owner_name() {
  set_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    owner_name_ = new ::std::string;
  }
  return owner_name_;
}
inline ::std::string* Fighter::release_owner_name() {
  clear_has_owner_name();
  if (owner_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_name_;
    owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 quality = 10;
inline bool Fighter::has_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Fighter::set_has_quality() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Fighter::clear_has_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Fighter::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Fighter::quality() const {
  return quality_;
}
inline void Fighter::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 phy_attack = 11;
inline bool Fighter::has_phy_attack() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Fighter::set_has_phy_attack() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Fighter::clear_has_phy_attack() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Fighter::clear_phy_attack() {
  phy_attack_ = 0;
  clear_has_phy_attack();
}
inline ::google::protobuf::int32 Fighter::phy_attack() const {
  return phy_attack_;
}
inline void Fighter::set_phy_attack(::google::protobuf::int32 value) {
  set_has_phy_attack();
  phy_attack_ = value;
}

// optional int32 phy_defence = 12;
inline bool Fighter::has_phy_defence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Fighter::set_has_phy_defence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Fighter::clear_has_phy_defence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Fighter::clear_phy_defence() {
  phy_defence_ = 0;
  clear_has_phy_defence();
}
inline ::google::protobuf::int32 Fighter::phy_defence() const {
  return phy_defence_;
}
inline void Fighter::set_phy_defence(::google::protobuf::int32 value) {
  set_has_phy_defence();
  phy_defence_ = value;
}

// optional int32 mag_attack = 13;
inline bool Fighter::has_mag_attack() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Fighter::set_has_mag_attack() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Fighter::clear_has_mag_attack() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Fighter::clear_mag_attack() {
  mag_attack_ = 0;
  clear_has_mag_attack();
}
inline ::google::protobuf::int32 Fighter::mag_attack() const {
  return mag_attack_;
}
inline void Fighter::set_mag_attack(::google::protobuf::int32 value) {
  set_has_mag_attack();
  mag_attack_ = value;
}

// optional int32 mag_defence = 14;
inline bool Fighter::has_mag_defence() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Fighter::set_has_mag_defence() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Fighter::clear_has_mag_defence() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Fighter::clear_mag_defence() {
  mag_defence_ = 0;
  clear_has_mag_defence();
}
inline ::google::protobuf::int32 Fighter::mag_defence() const {
  return mag_defence_;
}
inline void Fighter::set_mag_defence(::google::protobuf::int32 value) {
  set_has_mag_defence();
  mag_defence_ = value;
}

// -------------------------------------------------------------------

// SkillBonus

// required int32 skill_id = 1;
inline bool SkillBonus::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillBonus::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillBonus::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillBonus::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 SkillBonus::skill_id() const {
  return skill_id_;
}
inline void SkillBonus::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required int32 skill_level = 3;
inline bool SkillBonus::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillBonus::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillBonus::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillBonus::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
}
inline ::google::protobuf::int32 SkillBonus::skill_level() const {
  return skill_level_;
}
inline void SkillBonus::set_skill_level(::google::protobuf::int32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// required int32 exp_bonus = 2;
inline bool SkillBonus::has_exp_bonus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillBonus::set_has_exp_bonus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillBonus::clear_has_exp_bonus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillBonus::clear_exp_bonus() {
  exp_bonus_ = 0;
  clear_has_exp_bonus();
}
inline ::google::protobuf::int32 SkillBonus::exp_bonus() const {
  return exp_bonus_;
}
inline void SkillBonus::set_exp_bonus(::google::protobuf::int32 value) {
  set_has_exp_bonus();
  exp_bonus_ = value;
}

// -------------------------------------------------------------------

// PlayerPhyStrengthInfo

// optional int32 phy_strength = 1 [default = 0];
inline bool PlayerPhyStrengthInfo::has_phy_strength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPhyStrengthInfo::set_has_phy_strength() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPhyStrengthInfo::clear_has_phy_strength() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPhyStrengthInfo::clear_phy_strength() {
  phy_strength_ = 0;
  clear_has_phy_strength();
}
inline ::google::protobuf::int32 PlayerPhyStrengthInfo::phy_strength() const {
  return phy_strength_;
}
inline void PlayerPhyStrengthInfo::set_phy_strength(::google::protobuf::int32 value) {
  set_has_phy_strength();
  phy_strength_ = value;
}

// optional int32 phy_strength_limit = 2 [default = 0];
inline bool PlayerPhyStrengthInfo::has_phy_strength_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPhyStrengthInfo::set_has_phy_strength_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPhyStrengthInfo::clear_has_phy_strength_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPhyStrengthInfo::clear_phy_strength_limit() {
  phy_strength_limit_ = 0;
  clear_has_phy_strength_limit();
}
inline ::google::protobuf::int32 PlayerPhyStrengthInfo::phy_strength_limit() const {
  return phy_strength_limit_;
}
inline void PlayerPhyStrengthInfo::set_phy_strength_limit(::google::protobuf::int32 value) {
  set_has_phy_strength_limit();
  phy_strength_limit_ = value;
}

// optional int32 extra_phy_strength = 3 [default = 0];
inline bool PlayerPhyStrengthInfo::has_extra_phy_strength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPhyStrengthInfo::set_has_extra_phy_strength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPhyStrengthInfo::clear_has_extra_phy_strength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPhyStrengthInfo::clear_extra_phy_strength() {
  extra_phy_strength_ = 0;
  clear_has_extra_phy_strength();
}
inline ::google::protobuf::int32 PlayerPhyStrengthInfo::extra_phy_strength() const {
  return extra_phy_strength_;
}
inline void PlayerPhyStrengthInfo::set_extra_phy_strength(::google::protobuf::int32 value) {
  set_has_extra_phy_strength();
  extra_phy_strength_ = value;
}

// optional int32 extra_phy_strength_limit = 4 [default = 0];
inline bool PlayerPhyStrengthInfo::has_extra_phy_strength_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerPhyStrengthInfo::set_has_extra_phy_strength_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerPhyStrengthInfo::clear_has_extra_phy_strength_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerPhyStrengthInfo::clear_extra_phy_strength_limit() {
  extra_phy_strength_limit_ = 0;
  clear_has_extra_phy_strength_limit();
}
inline ::google::protobuf::int32 PlayerPhyStrengthInfo::extra_phy_strength_limit() const {
  return extra_phy_strength_limit_;
}
inline void PlayerPhyStrengthInfo::set_extra_phy_strength_limit(::google::protobuf::int32 value) {
  set_has_extra_phy_strength_limit();
  extra_phy_strength_limit_ = value;
}

// optional int32 time_for_recover_phy_strength = 5 [default = 0];
inline bool PlayerPhyStrengthInfo::has_time_for_recover_phy_strength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerPhyStrengthInfo::set_has_time_for_recover_phy_strength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerPhyStrengthInfo::clear_has_time_for_recover_phy_strength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerPhyStrengthInfo::clear_time_for_recover_phy_strength() {
  time_for_recover_phy_strength_ = 0;
  clear_has_time_for_recover_phy_strength();
}
inline ::google::protobuf::int32 PlayerPhyStrengthInfo::time_for_recover_phy_strength() const {
  return time_for_recover_phy_strength_;
}
inline void PlayerPhyStrengthInfo::set_time_for_recover_phy_strength(::google::protobuf::int32 value) {
  set_has_time_for_recover_phy_strength();
  time_for_recover_phy_strength_ = value;
}

// -------------------------------------------------------------------

// PlayerInfo

// required int64 guid = 1;
inline bool PlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 PlayerInfo::guid() const {
  return guid_;
}
inline void PlayerInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 tid = 16;
inline bool PlayerInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerInfo::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 PlayerInfo::tid() const {
  return tid_;
}
inline void PlayerInfo::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 map_id = 2 [default = 1];
inline bool PlayerInfo::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerInfo::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerInfo::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerInfo::clear_map_id() {
  map_id_ = 1;
  clear_has_map_id();
}
inline ::google::protobuf::int32 PlayerInfo::map_id() const {
  return map_id_;
}
inline void PlayerInfo::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 map_x = 3 [default = 1];
inline bool PlayerInfo::has_map_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerInfo::set_has_map_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerInfo::clear_has_map_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerInfo::clear_map_x() {
  map_x_ = 1;
  clear_has_map_x();
}
inline ::google::protobuf::int32 PlayerInfo::map_x() const {
  return map_x_;
}
inline void PlayerInfo::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// optional int32 map_y = 4 [default = 1];
inline bool PlayerInfo::has_map_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerInfo::set_has_map_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerInfo::clear_has_map_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerInfo::clear_map_y() {
  map_y_ = 1;
  clear_has_map_y();
}
inline ::google::protobuf::int32 PlayerInfo::map_y() const {
  return map_y_;
}
inline void PlayerInfo::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// optional int32 vip_level = 5 [default = 0];
inline bool PlayerInfo::has_vip_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerInfo::set_has_vip_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerInfo::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerInfo::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 PlayerInfo::vip_level() const {
  return vip_level_;
}
inline void PlayerInfo::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional .protocols.common.Profession job = 6 [default = WIZARD];
inline bool PlayerInfo::has_job() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerInfo::set_has_job() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerInfo::clear_job() {
  job_ = 1;
  clear_has_job();
}
inline protocols::common::Profession PlayerInfo::job() const {
  return static_cast< protocols::common::Profession >(job_);
}
inline void PlayerInfo::set_job(protocols::common::Profession value) {
  GOOGLE_DCHECK(protocols::common::Profession_IsValid(value));
  set_has_job();
  job_ = value;
}

// optional int32 job_level = 7 [default = 1];
inline bool PlayerInfo::has_job_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerInfo::set_has_job_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerInfo::clear_has_job_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerInfo::clear_job_level() {
  job_level_ = 1;
  clear_has_job_level();
}
inline ::google::protobuf::int32 PlayerInfo::job_level() const {
  return job_level_;
}
inline void PlayerInfo::set_job_level(::google::protobuf::int32 value) {
  set_has_job_level();
  job_level_ = value;
}

// optional int32 flag = 8 [default = 0];
inline bool PlayerInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 PlayerInfo::flag() const {
  return flag_;
}
inline void PlayerInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional string name = 9;
inline bool PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerInfo::name() const {
  return *name_;
}
inline void PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protocols.common.Gender gender = 10 [default = MALE];
inline bool PlayerInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerInfo::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline protocols::common::Gender PlayerInfo::gender() const {
  return static_cast< protocols::common::Gender >(gender_);
}
inline void PlayerInfo::set_gender(protocols::common::Gender value) {
  GOOGLE_DCHECK(protocols::common::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional int32 hp = 11 [default = 0];
inline bool PlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 PlayerInfo::hp() const {
  return hp_;
}
inline void PlayerInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 exp = 12 [default = 0];
inline bool PlayerInfo::has_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerInfo::set_has_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 PlayerInfo::exp() const {
  return exp_;
}
inline void PlayerInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 vip_end_sec = 13 [default = 0];
inline bool PlayerInfo::has_vip_end_sec() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerInfo::set_has_vip_end_sec() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerInfo::clear_has_vip_end_sec() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerInfo::clear_vip_end_sec() {
  vip_end_sec_ = 0;
  clear_has_vip_end_sec();
}
inline ::google::protobuf::int32 PlayerInfo::vip_end_sec() const {
  return vip_end_sec_;
}
inline void PlayerInfo::set_vip_end_sec(::google::protobuf::int32 value) {
  set_has_vip_end_sec();
  vip_end_sec_ = value;
}

// optional int32 lineup_capacity = 21 [default = 0];
inline bool PlayerInfo::has_lineup_capacity() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerInfo::set_has_lineup_capacity() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerInfo::clear_has_lineup_capacity() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerInfo::clear_lineup_capacity() {
  lineup_capacity_ = 0;
  clear_has_lineup_capacity();
}
inline ::google::protobuf::int32 PlayerInfo::lineup_capacity() const {
  return lineup_capacity_;
}
inline void PlayerInfo::set_lineup_capacity(::google::protobuf::int32 value) {
  set_has_lineup_capacity();
  lineup_capacity_ = value;
}

// optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
inline bool PlayerInfo::has_status() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerInfo::set_has_status() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline protocols::common::GameStatus PlayerInfo::status() const {
  return static_cast< protocols::common::GameStatus >(status_);
}
inline void PlayerInfo::set_status(protocols::common::GameStatus value) {
  GOOGLE_DCHECK(protocols::common::GameStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int64 leader_guid = 17;
inline bool PlayerInfo::has_leader_guid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerInfo::set_has_leader_guid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerInfo::clear_has_leader_guid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerInfo::clear_leader_guid() {
  leader_guid_ = GOOGLE_LONGLONG(0);
  clear_has_leader_guid();
}
inline ::google::protobuf::int64 PlayerInfo::leader_guid() const {
  return leader_guid_;
}
inline void PlayerInfo::set_leader_guid(::google::protobuf::int64 value) {
  set_has_leader_guid();
  leader_guid_ = value;
}

// optional int32 server_id = 20;
inline bool PlayerInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlayerInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlayerInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlayerInfo::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 PlayerInfo::server_id() const {
  return server_id_;
}
inline void PlayerInfo::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int32 guild_id = 18 [default = 0];
inline bool PlayerInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlayerInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlayerInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlayerInfo::clear_guild_id() {
  guild_id_ = 0;
  clear_has_guild_id();
}
inline ::google::protobuf::int32 PlayerInfo::guild_id() const {
  return guild_id_;
}
inline void PlayerInfo::set_guild_id(::google::protobuf::int32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 19 [default = ""];
inline bool PlayerInfo::has_guild_name() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PlayerInfo::set_has_guild_name() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PlayerInfo::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PlayerInfo::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& PlayerInfo::guild_name() const {
  return *guild_name_;
}
inline void PlayerInfo::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void PlayerInfo::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void PlayerInfo::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerInfo::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* PlayerInfo::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
inline bool PlayerInfo::has_player_phy_strength() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PlayerInfo::set_has_player_phy_strength() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PlayerInfo::clear_has_player_phy_strength() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PlayerInfo::clear_player_phy_strength() {
  if (player_phy_strength_ != NULL) player_phy_strength_->::protocols::common::PlayerPhyStrengthInfo::Clear();
  clear_has_player_phy_strength();
}
inline const ::protocols::common::PlayerPhyStrengthInfo& PlayerInfo::player_phy_strength() const {
  return player_phy_strength_ != NULL ? *player_phy_strength_ : *default_instance_->player_phy_strength_;
}
inline ::protocols::common::PlayerPhyStrengthInfo* PlayerInfo::mutable_player_phy_strength() {
  set_has_player_phy_strength();
  if (player_phy_strength_ == NULL) player_phy_strength_ = new ::protocols::common::PlayerPhyStrengthInfo;
  return player_phy_strength_;
}
inline ::protocols::common::PlayerPhyStrengthInfo* PlayerInfo::release_player_phy_strength() {
  clear_has_player_phy_strength();
  ::protocols::common::PlayerPhyStrengthInfo* temp = player_phy_strength_;
  player_phy_strength_ = NULL;
  return temp;
}

// optional int32 map_instance_id = 22 [default = 0];
inline bool PlayerInfo::has_map_instance_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlayerInfo::set_has_map_instance_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlayerInfo::clear_has_map_instance_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlayerInfo::clear_map_instance_id() {
  map_instance_id_ = 0;
  clear_has_map_instance_id();
}
inline ::google::protobuf::int32 PlayerInfo::map_instance_id() const {
  return map_instance_id_;
}
inline void PlayerInfo::set_map_instance_id(::google::protobuf::int32 value) {
  set_has_map_instance_id();
  map_instance_id_ = value;
}

// optional int64 follow_guid = 24 [default = 0];
inline bool PlayerInfo::has_follow_guid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PlayerInfo::set_has_follow_guid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PlayerInfo::clear_has_follow_guid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PlayerInfo::clear_follow_guid() {
  follow_guid_ = GOOGLE_LONGLONG(0);
  clear_has_follow_guid();
}
inline ::google::protobuf::int64 PlayerInfo::follow_guid() const {
  return follow_guid_;
}
inline void PlayerInfo::set_follow_guid(::google::protobuf::int64 value) {
  set_has_follow_guid();
  follow_guid_ = value;
}

// optional int32 direction = 25 [default = 1];
inline bool PlayerInfo::has_direction() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PlayerInfo::set_has_direction() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PlayerInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PlayerInfo::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::google::protobuf::int32 PlayerInfo::direction() const {
  return direction_;
}
inline void PlayerInfo::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
}

// optional int64 role_create_time = 26;
inline bool PlayerInfo::has_role_create_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PlayerInfo::set_has_role_create_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PlayerInfo::clear_has_role_create_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PlayerInfo::clear_role_create_time() {
  role_create_time_ = GOOGLE_LONGLONG(0);
  clear_has_role_create_time();
}
inline ::google::protobuf::int64 PlayerInfo::role_create_time() const {
  return role_create_time_;
}
inline void PlayerInfo::set_role_create_time(::google::protobuf::int64 value) {
  set_has_role_create_time();
  role_create_time_ = value;
}

// optional int32 wing_tid = 27 [default = 0];
inline bool PlayerInfo::has_wing_tid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PlayerInfo::set_has_wing_tid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PlayerInfo::clear_has_wing_tid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PlayerInfo::clear_wing_tid() {
  wing_tid_ = 0;
  clear_has_wing_tid();
}
inline ::google::protobuf::int32 PlayerInfo::wing_tid() const {
  return wing_tid_;
}
inline void PlayerInfo::set_wing_tid(::google::protobuf::int32 value) {
  set_has_wing_tid();
  wing_tid_ = value;
}

// optional int32 guild_title = 28 [default = 0];
inline bool PlayerInfo::has_guild_title() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PlayerInfo::set_has_guild_title() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PlayerInfo::clear_has_guild_title() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PlayerInfo::clear_guild_title() {
  guild_title_ = 0;
  clear_has_guild_title();
}
inline ::google::protobuf::int32 PlayerInfo::guild_title() const {
  return guild_title_;
}
inline void PlayerInfo::set_guild_title(::google::protobuf::int32 value) {
  set_has_guild_title();
  guild_title_ = value;
}

// optional int32 title = 29 [default = 0];
inline bool PlayerInfo::has_title() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PlayerInfo::set_has_title() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PlayerInfo::clear_has_title() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PlayerInfo::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 PlayerInfo::title() const {
  return title_;
}
inline void PlayerInfo::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
}

// optional int32 practice_exp = 30 [default = 0];
inline bool PlayerInfo::has_practice_exp() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PlayerInfo::set_has_practice_exp() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PlayerInfo::clear_has_practice_exp() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PlayerInfo::clear_practice_exp() {
  practice_exp_ = 0;
  clear_has_practice_exp();
}
inline ::google::protobuf::int32 PlayerInfo::practice_exp() const {
  return practice_exp_;
}
inline void PlayerInfo::set_practice_exp(::google::protobuf::int32 value) {
  set_has_practice_exp();
  practice_exp_ = value;
}

// -------------------------------------------------------------------

// NPCInfo

// required int32 npc_id = 1;
inline bool NPCInfo::has_npc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCInfo::set_has_npc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCInfo::clear_has_npc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCInfo::clear_npc_id() {
  npc_id_ = 0;
  clear_has_npc_id();
}
inline ::google::protobuf::int32 NPCInfo::npc_id() const {
  return npc_id_;
}
inline void NPCInfo::set_npc_id(::google::protobuf::int32 value) {
  set_has_npc_id();
  npc_id_ = value;
}

// optional int32 npc_tid = 2;
inline bool NPCInfo::has_npc_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPCInfo::set_has_npc_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPCInfo::clear_has_npc_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPCInfo::clear_npc_tid() {
  npc_tid_ = 0;
  clear_has_npc_tid();
}
inline ::google::protobuf::int32 NPCInfo::npc_tid() const {
  return npc_tid_;
}
inline void NPCInfo::set_npc_tid(::google::protobuf::int32 value) {
  set_has_npc_tid();
  npc_tid_ = value;
}

// optional string npc_name = 3;
inline bool NPCInfo::has_npc_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NPCInfo::set_has_npc_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NPCInfo::clear_has_npc_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NPCInfo::clear_npc_name() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    npc_name_->clear();
  }
  clear_has_npc_name();
}
inline const ::std::string& NPCInfo::npc_name() const {
  return *npc_name_;
}
inline void NPCInfo::set_npc_name(const ::std::string& value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void NPCInfo::set_npc_name(const char* value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void NPCInfo::set_npc_name(const char* value, size_t size) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NPCInfo::mutable_npc_name() {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  return npc_name_;
}
inline ::std::string* NPCInfo::release_npc_name() {
  clear_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = npc_name_;
    npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 npc_level = 4;
inline bool NPCInfo::has_npc_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NPCInfo::set_has_npc_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NPCInfo::clear_has_npc_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NPCInfo::clear_npc_level() {
  npc_level_ = 0;
  clear_has_npc_level();
}
inline ::google::protobuf::int32 NPCInfo::npc_level() const {
  return npc_level_;
}
inline void NPCInfo::set_npc_level(::google::protobuf::int32 value) {
  set_has_npc_level();
  npc_level_ = value;
}

// -------------------------------------------------------------------

// BaojuInfo

// required int64 guid = 1;
inline bool BaojuInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaojuInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaojuInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaojuInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 BaojuInfo::guid() const {
  return guid_;
}
inline void BaojuInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// ItemInfo

// required int64 item_id = 1;
inline bool ItemInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_item_id() {
  item_id_ = GOOGLE_LONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::int64 ItemInfo::item_id() const {
  return item_id_;
}
inline void ItemInfo::set_item_id(::google::protobuf::int64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 count = 2 [default = 0];
inline bool ItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ItemInfo::count() const {
  return count_;
}
inline void ItemInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 expired = 3 [default = 0];
inline bool ItemInfo::has_expired() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemInfo::set_has_expired() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemInfo::clear_has_expired() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemInfo::clear_expired() {
  expired_ = 0;
  clear_has_expired();
}
inline ::google::protobuf::int32 ItemInfo::expired() const {
  return expired_;
}
inline void ItemInfo::set_expired(::google::protobuf::int32 value) {
  set_has_expired();
  expired_ = value;
}

// optional int32 pos = 4;
inline bool ItemInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemInfo::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 ItemInfo::pos() const {
  return pos_;
}
inline void ItemInfo::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 pos_type = 5;
inline bool ItemInfo::has_pos_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemInfo::set_has_pos_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemInfo::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemInfo::clear_pos_type() {
  pos_type_ = 0;
  clear_has_pos_type();
}
inline ::google::protobuf::int32 ItemInfo::pos_type() const {
  return pos_type_;
}
inline void ItemInfo::set_pos_type(::google::protobuf::int32 value) {
  set_has_pos_type();
  pos_type_ = value;
}

// optional bool bind_flag = 6 [default = false];
inline bool ItemInfo::has_bind_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemInfo::set_has_bind_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemInfo::clear_has_bind_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemInfo::clear_bind_flag() {
  bind_flag_ = false;
  clear_has_bind_flag();
}
inline bool ItemInfo::bind_flag() const {
  return bind_flag_;
}
inline void ItemInfo::set_bind_flag(bool value) {
  set_has_bind_flag();
  bind_flag_ = value;
}

// optional int32 strength_level = 7 [default = 0];
inline bool ItemInfo::has_strength_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemInfo::set_has_strength_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemInfo::clear_has_strength_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemInfo::clear_strength_level() {
  strength_level_ = 0;
  clear_has_strength_level();
}
inline ::google::protobuf::int32 ItemInfo::strength_level() const {
  return strength_level_;
}
inline void ItemInfo::set_strength_level(::google::protobuf::int32 value) {
  set_has_strength_level();
  strength_level_ = value;
}

// optional int32 mark = 8 [default = 0];
inline bool ItemInfo::has_mark() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemInfo::set_has_mark() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemInfo::clear_has_mark() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemInfo::clear_mark() {
  mark_ = 0;
  clear_has_mark();
}
inline ::google::protobuf::int32 ItemInfo::mark() const {
  return mark_;
}
inline void ItemInfo::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
}

// -------------------------------------------------------------------

// SkillInfo

// required int32 skill_id = 1;
inline bool SkillInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillInfo::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 SkillInfo::skill_id() const {
  return skill_id_;
}
inline void SkillInfo::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required int32 level = 2;
inline bool SkillInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SkillInfo::level() const {
  return level_;
}
inline void SkillInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 equip_slot_index = 3 [default = -1];
inline bool SkillInfo::has_equip_slot_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SkillInfo::set_has_equip_slot_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SkillInfo::clear_has_equip_slot_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SkillInfo::clear_equip_slot_index() {
  equip_slot_index_ = -1;
  clear_has_equip_slot_index();
}
inline ::google::protobuf::int32 SkillInfo::equip_slot_index() const {
  return equip_slot_index_;
}
inline void SkillInfo::set_equip_slot_index(::google::protobuf::int32 value) {
  set_has_equip_slot_index();
  equip_slot_index_ = value;
}

// optional int32 exp = 4;
inline bool SkillInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SkillInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SkillInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SkillInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 SkillInfo::exp() const {
  return exp_;
}
inline void SkillInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 is_practicing = 5 [default = 0];
inline bool SkillInfo::has_is_practicing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SkillInfo::set_has_is_practicing() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SkillInfo::clear_has_is_practicing() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SkillInfo::clear_is_practicing() {
  is_practicing_ = 0;
  clear_has_is_practicing();
}
inline ::google::protobuf::int32 SkillInfo::is_practicing() const {
  return is_practicing_;
}
inline void SkillInfo::set_is_practicing(::google::protobuf::int32 value) {
  set_has_is_practicing();
  is_practicing_ = value;
}

// optional int32 delta_time = 6;
inline bool SkillInfo::has_delta_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SkillInfo::set_has_delta_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SkillInfo::clear_has_delta_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SkillInfo::clear_delta_time() {
  delta_time_ = 0;
  clear_has_delta_time();
}
inline ::google::protobuf::int32 SkillInfo::delta_time() const {
  return delta_time_;
}
inline void SkillInfo::set_delta_time(::google::protobuf::int32 value) {
  set_has_delta_time();
  delta_time_ = value;
}

// optional int32 delta_add_exp = 7;
inline bool SkillInfo::has_delta_add_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SkillInfo::set_has_delta_add_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SkillInfo::clear_has_delta_add_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SkillInfo::clear_delta_add_exp() {
  delta_add_exp_ = 0;
  clear_has_delta_add_exp();
}
inline ::google::protobuf::int32 SkillInfo::delta_add_exp() const {
  return delta_add_exp_;
}
inline void SkillInfo::set_delta_add_exp(::google::protobuf::int32 value) {
  set_has_delta_add_exp();
  delta_add_exp_ = value;
}

// optional int32 practice_time = 8;
inline bool SkillInfo::has_practice_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SkillInfo::set_has_practice_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SkillInfo::clear_has_practice_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SkillInfo::clear_practice_time() {
  practice_time_ = 0;
  clear_has_practice_time();
}
inline ::google::protobuf::int32 SkillInfo::practice_time() const {
  return practice_time_;
}
inline void SkillInfo::set_practice_time(::google::protobuf::int32 value) {
  set_has_practice_time();
  practice_time_ = value;
}

// optional int32 status = 9;
inline bool SkillInfo::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SkillInfo::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SkillInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SkillInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 SkillInfo::status() const {
  return status_;
}
inline void SkillInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 time_left_for_research = 10;
inline bool SkillInfo::has_time_left_for_research() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SkillInfo::set_has_time_left_for_research() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SkillInfo::clear_has_time_left_for_research() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SkillInfo::clear_time_left_for_research() {
  time_left_for_research_ = 0;
  clear_has_time_left_for_research();
}
inline ::google::protobuf::int32 SkillInfo::time_left_for_research() const {
  return time_left_for_research_;
}
inline void SkillInfo::set_time_left_for_research(::google::protobuf::int32 value) {
  set_has_time_left_for_research();
  time_left_for_research_ = value;
}

// optional int32 is_used = 11;
inline bool SkillInfo::has_is_used() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SkillInfo::set_has_is_used() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SkillInfo::clear_has_is_used() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SkillInfo::clear_is_used() {
  is_used_ = 0;
  clear_has_is_used();
}
inline ::google::protobuf::int32 SkillInfo::is_used() const {
  return is_used_;
}
inline void SkillInfo::set_is_used(::google::protobuf::int32 value) {
  set_has_is_used();
  is_used_ = value;
}

// -------------------------------------------------------------------

// BattleSkillInfo

// required int32 skill_id = 1;
inline bool BattleSkillInfo::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleSkillInfo::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleSkillInfo::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleSkillInfo::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 BattleSkillInfo::skill_id() const {
  return skill_id_;
}
inline void BattleSkillInfo::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required int32 level = 2;
inline bool BattleSkillInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleSkillInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleSkillInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleSkillInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BattleSkillInfo::level() const {
  return level_;
}
inline void BattleSkillInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 battle_skill_type = 3 [default = 2];
inline bool BattleSkillInfo::has_battle_skill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleSkillInfo::set_has_battle_skill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleSkillInfo::clear_has_battle_skill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleSkillInfo::clear_battle_skill_type() {
  battle_skill_type_ = 2;
  clear_has_battle_skill_type();
}
inline ::google::protobuf::int32 BattleSkillInfo::battle_skill_type() const {
  return battle_skill_type_;
}
inline void BattleSkillInfo::set_battle_skill_type(::google::protobuf::int32 value) {
  set_has_battle_skill_type();
  battle_skill_type_ = value;
}

// optional int32 exp = 4;
inline bool BattleSkillInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleSkillInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleSkillInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleSkillInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 BattleSkillInfo::exp() const {
  return exp_;
}
inline void BattleSkillInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// BankInfo

// optional int32 coin = 1;
inline bool BankInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BankInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BankInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BankInfo::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 BankInfo::coin() const {
  return coin_;
}
inline void BankInfo::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// optional int32 coupon = 2;
inline bool BankInfo::has_coupon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BankInfo::set_has_coupon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BankInfo::clear_has_coupon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BankInfo::clear_coupon() {
  coupon_ = 0;
  clear_has_coupon();
}
inline ::google::protobuf::int32 BankInfo::coupon() const {
  return coupon_;
}
inline void BankInfo::set_coupon(::google::protobuf::int32 value) {
  set_has_coupon();
  coupon_ = value;
}

// optional int32 diamond = 3;
inline bool BankInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BankInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BankInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BankInfo::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 BankInfo::diamond() const {
  return diamond_;
}
inline void BankInfo::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
}

// -------------------------------------------------------------------

// YinglingInfo

// required int64 guid = 1;
inline bool YinglingInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YinglingInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YinglingInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YinglingInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 YinglingInfo::guid() const {
  return guid_;
}
inline void YinglingInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required int32 tid = 12;
inline bool YinglingInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YinglingInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YinglingInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YinglingInfo::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 YinglingInfo::tid() const {
  return tid_;
}
inline void YinglingInfo::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional .protocols.common.Profession job = 2 [default = WIZARD];
inline bool YinglingInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YinglingInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YinglingInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YinglingInfo::clear_job() {
  job_ = 1;
  clear_has_job();
}
inline protocols::common::Profession YinglingInfo::job() const {
  return static_cast< protocols::common::Profession >(job_);
}
inline void YinglingInfo::set_job(protocols::common::Profession value) {
  GOOGLE_DCHECK(protocols::common::Profession_IsValid(value));
  set_has_job();
  job_ = value;
}

// optional .protocols.common.Gender gender = 15 [default = MALE];
inline bool YinglingInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YinglingInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YinglingInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YinglingInfo::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline protocols::common::Gender YinglingInfo::gender() const {
  return static_cast< protocols::common::Gender >(gender_);
}
inline void YinglingInfo::set_gender(protocols::common::Gender value) {
  GOOGLE_DCHECK(protocols::common::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional int32 job_level = 3 [default = 0];
inline bool YinglingInfo::has_job_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YinglingInfo::set_has_job_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YinglingInfo::clear_has_job_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YinglingInfo::clear_job_level() {
  job_level_ = 0;
  clear_has_job_level();
}
inline ::google::protobuf::int32 YinglingInfo::job_level() const {
  return job_level_;
}
inline void YinglingInfo::set_job_level(::google::protobuf::int32 value) {
  set_has_job_level();
  job_level_ = value;
}

// required string name = 4;
inline bool YinglingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YinglingInfo::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YinglingInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YinglingInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& YinglingInfo::name() const {
  return *name_;
}
inline void YinglingInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void YinglingInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void YinglingInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* YinglingInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* YinglingInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 quality = 9 [default = 0];
inline bool YinglingInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YinglingInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YinglingInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YinglingInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 YinglingInfo::quality() const {
  return quality_;
}
inline void YinglingInfo::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 fight_capacity = 10 [default = 0];
inline bool YinglingInfo::has_fight_capacity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YinglingInfo::set_has_fight_capacity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YinglingInfo::clear_has_fight_capacity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YinglingInfo::clear_fight_capacity() {
  fight_capacity_ = 0;
  clear_has_fight_capacity();
}
inline ::google::protobuf::int32 YinglingInfo::fight_capacity() const {
  return fight_capacity_;
}
inline void YinglingInfo::set_fight_capacity(::google::protobuf::int32 value) {
  set_has_fight_capacity();
  fight_capacity_ = value;
}

// optional int32 is_in_fight_lineup = 16 [default = 0];
inline bool YinglingInfo::has_is_in_fight_lineup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YinglingInfo::set_has_is_in_fight_lineup() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YinglingInfo::clear_has_is_in_fight_lineup() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YinglingInfo::clear_is_in_fight_lineup() {
  is_in_fight_lineup_ = 0;
  clear_has_is_in_fight_lineup();
}
inline ::google::protobuf::int32 YinglingInfo::is_in_fight_lineup() const {
  return is_in_fight_lineup_;
}
inline void YinglingInfo::set_is_in_fight_lineup(::google::protobuf::int32 value) {
  set_has_is_in_fight_lineup();
  is_in_fight_lineup_ = value;
}

// -------------------------------------------------------------------

// BuddyDetailInfo

// required int64 guid = 8;
inline bool BuddyDetailInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuddyDetailInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuddyDetailInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuddyDetailInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 BuddyDetailInfo::guid() const {
  return guid_;
}
inline void BuddyDetailInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required string name = 20;
inline bool BuddyDetailInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuddyDetailInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuddyDetailInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuddyDetailInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BuddyDetailInfo::name() const {
  return *name_;
}
inline void BuddyDetailInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BuddyDetailInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BuddyDetailInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BuddyDetailInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BuddyDetailInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .protocols.common.AttributeData total_attr_list = 5;
inline int BuddyDetailInfo::total_attr_list_size() const {
  return total_attr_list_.size();
}
inline void BuddyDetailInfo::clear_total_attr_list() {
  total_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& BuddyDetailInfo::total_attr_list(int index) const {
  return total_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* BuddyDetailInfo::mutable_total_attr_list(int index) {
  return total_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* BuddyDetailInfo::add_total_attr_list() {
  return total_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
BuddyDetailInfo::total_attr_list() const {
  return total_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
BuddyDetailInfo::mutable_total_attr_list() {
  return &total_attr_list_;
}

// repeated .protocols.common.AttributeData bare_attr_list = 6;
inline int BuddyDetailInfo::bare_attr_list_size() const {
  return bare_attr_list_.size();
}
inline void BuddyDetailInfo::clear_bare_attr_list() {
  bare_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& BuddyDetailInfo::bare_attr_list(int index) const {
  return bare_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* BuddyDetailInfo::mutable_bare_attr_list(int index) {
  return bare_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* BuddyDetailInfo::add_bare_attr_list() {
  return bare_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
BuddyDetailInfo::bare_attr_list() const {
  return bare_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
BuddyDetailInfo::mutable_bare_attr_list() {
  return &bare_attr_list_;
}

// repeated .protocols.common.EquipInfo equip_list = 7;
inline int BuddyDetailInfo::equip_list_size() const {
  return equip_list_.size();
}
inline void BuddyDetailInfo::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::protocols::common::EquipInfo& BuddyDetailInfo::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::protocols::common::EquipInfo* BuddyDetailInfo::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::protocols::common::EquipInfo* BuddyDetailInfo::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipInfo >&
BuddyDetailInfo::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipInfo >*
BuddyDetailInfo::mutable_equip_list() {
  return &equip_list_;
}

// optional int32 exp = 15 [default = 0];
inline bool BuddyDetailInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuddyDetailInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuddyDetailInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuddyDetailInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 BuddyDetailInfo::exp() const {
  return exp_;
}
inline void BuddyDetailInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 hp = 16 [default = 0];
inline bool BuddyDetailInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuddyDetailInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuddyDetailInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuddyDetailInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BuddyDetailInfo::hp() const {
  return hp_;
}
inline void BuddyDetailInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 cur_soul = 17 [default = 0];
inline bool BuddyDetailInfo::has_cur_soul() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuddyDetailInfo::set_has_cur_soul() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuddyDetailInfo::clear_has_cur_soul() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuddyDetailInfo::clear_cur_soul() {
  cur_soul_ = 0;
  clear_has_cur_soul();
}
inline ::google::protobuf::int32 BuddyDetailInfo::cur_soul() const {
  return cur_soul_;
}
inline void BuddyDetailInfo::set_cur_soul(::google::protobuf::int32 value) {
  set_has_cur_soul();
  cur_soul_ = value;
}

// optional int32 max_soul = 18 [default = 0];
inline bool BuddyDetailInfo::has_max_soul() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BuddyDetailInfo::set_has_max_soul() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BuddyDetailInfo::clear_has_max_soul() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BuddyDetailInfo::clear_max_soul() {
  max_soul_ = 0;
  clear_has_max_soul();
}
inline ::google::protobuf::int32 BuddyDetailInfo::max_soul() const {
  return max_soul_;
}
inline void BuddyDetailInfo::set_max_soul(::google::protobuf::int32 value) {
  set_has_max_soul();
  max_soul_ = value;
}

// optional int32 quality = 19 [default = 0];
inline bool BuddyDetailInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BuddyDetailInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BuddyDetailInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BuddyDetailInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 BuddyDetailInfo::quality() const {
  return quality_;
}
inline void BuddyDetailInfo::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 fight_capacity = 21 [default = 0];
inline bool BuddyDetailInfo::has_fight_capacity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BuddyDetailInfo::set_has_fight_capacity() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BuddyDetailInfo::clear_has_fight_capacity() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BuddyDetailInfo::clear_fight_capacity() {
  fight_capacity_ = 0;
  clear_has_fight_capacity();
}
inline ::google::protobuf::int32 BuddyDetailInfo::fight_capacity() const {
  return fight_capacity_;
}
inline void BuddyDetailInfo::set_fight_capacity(::google::protobuf::int32 value) {
  set_has_fight_capacity();
  fight_capacity_ = value;
}

// -------------------------------------------------------------------

// PBIntPair

// required int32 key = 1;
inline bool PBIntPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBIntPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBIntPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBIntPair::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 PBIntPair::key() const {
  return key_;
}
inline void PBIntPair::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 value = 2;
inline bool PBIntPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBIntPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBIntPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBIntPair::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PBIntPair::value() const {
  return value_;
}
inline void PBIntPair::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Relation

// required int64 guid = 1;
inline bool Relation::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 Relation::guid() const {
  return guid_;
}
inline void Relation::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required int32 relation = 2;
inline bool Relation::has_relation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation::set_has_relation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation::clear_has_relation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation::clear_relation() {
  relation_ = 0;
  clear_has_relation();
}
inline ::google::protobuf::int32 Relation::relation() const {
  return relation_;
}
inline void Relation::set_relation(::google::protobuf::int32 value) {
  set_has_relation();
  relation_ = value;
}

// -------------------------------------------------------------------

// PlayerRelationData

// repeated .protocols.common.Relation friend = 1;
inline int PlayerRelationData::friend__size() const {
  return friend__.size();
}
inline void PlayerRelationData::clear_friend_() {
  friend__.Clear();
}
inline const ::protocols::common::Relation& PlayerRelationData::friend_(int index) const {
  return friend__.Get(index);
}
inline ::protocols::common::Relation* PlayerRelationData::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::protocols::common::Relation* PlayerRelationData::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Relation >&
PlayerRelationData::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Relation >*
PlayerRelationData::mutable_friend_() {
  return &friend__;
}

// -------------------------------------------------------------------

// InstanceInfo

// optional int32 instance_id = 1;
inline bool InstanceInfo::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceInfo::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceInfo::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceInfo::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 InstanceInfo::instance_id() const {
  return instance_id_;
}
inline void InstanceInfo::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional int32 grade = 2;
inline bool InstanceInfo::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceInfo::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceInfo::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceInfo::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 InstanceInfo::grade() const {
  return grade_;
}
inline void InstanceInfo::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// -------------------------------------------------------------------

// InstanceDetail

// optional int32 instance_id = 1;
inline bool InstanceDetail::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceDetail::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceDetail::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceDetail::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 InstanceDetail::instance_id() const {
  return instance_id_;
}
inline void InstanceDetail::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// optional int32 grade = 2;
inline bool InstanceDetail::has_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceDetail::set_has_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceDetail::clear_has_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceDetail::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 InstanceDetail::grade() const {
  return grade_;
}
inline void InstanceDetail::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 map_id = 3;
inline bool InstanceDetail::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstanceDetail::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstanceDetail::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstanceDetail::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 InstanceDetail::map_id() const {
  return map_id_;
}
inline void InstanceDetail::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 map_x = 4;
inline bool InstanceDetail::has_map_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstanceDetail::set_has_map_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstanceDetail::clear_has_map_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstanceDetail::clear_map_x() {
  map_x_ = 0;
  clear_has_map_x();
}
inline ::google::protobuf::int32 InstanceDetail::map_x() const {
  return map_x_;
}
inline void InstanceDetail::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// optional int32 map_y = 5;
inline bool InstanceDetail::has_map_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstanceDetail::set_has_map_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstanceDetail::clear_has_map_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstanceDetail::clear_map_y() {
  map_y_ = 0;
  clear_has_map_y();
}
inline ::google::protobuf::int32 InstanceDetail::map_y() const {
  return map_y_;
}
inline void InstanceDetail::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// repeated int32 monster_list = 6;
inline int InstanceDetail::monster_list_size() const {
  return monster_list_.size();
}
inline void InstanceDetail::clear_monster_list() {
  monster_list_.Clear();
}
inline ::google::protobuf::int32 InstanceDetail::monster_list(int index) const {
  return monster_list_.Get(index);
}
inline void InstanceDetail::set_monster_list(int index, ::google::protobuf::int32 value) {
  monster_list_.Set(index, value);
}
inline void InstanceDetail::add_monster_list(::google::protobuf::int32 value) {
  monster_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InstanceDetail::monster_list() const {
  return monster_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InstanceDetail::mutable_monster_list() {
  return &monster_list_;
}

// repeated int32 killed_list = 7;
inline int InstanceDetail::killed_list_size() const {
  return killed_list_.size();
}
inline void InstanceDetail::clear_killed_list() {
  killed_list_.Clear();
}
inline ::google::protobuf::int32 InstanceDetail::killed_list(int index) const {
  return killed_list_.Get(index);
}
inline void InstanceDetail::set_killed_list(int index, ::google::protobuf::int32 value) {
  killed_list_.Set(index, value);
}
inline void InstanceDetail::add_killed_list(::google::protobuf::int32 value) {
  killed_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
InstanceDetail::killed_list() const {
  return killed_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
InstanceDetail::mutable_killed_list() {
  return &killed_list_;
}

// optional int32 last_transport_id = 8;
inline bool InstanceDetail::has_last_transport_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InstanceDetail::set_has_last_transport_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InstanceDetail::clear_has_last_transport_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InstanceDetail::clear_last_transport_id() {
  last_transport_id_ = 0;
  clear_has_last_transport_id();
}
inline ::google::protobuf::int32 InstanceDetail::last_transport_id() const {
  return last_transport_id_;
}
inline void InstanceDetail::set_last_transport_id(::google::protobuf::int32 value) {
  set_has_last_transport_id();
  last_transport_id_ = value;
}

// -------------------------------------------------------------------

// MonsterInfo

// required int64 guid = 1;
inline bool MonsterInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 MonsterInfo::guid() const {
  return guid_;
}
inline void MonsterInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool MonsterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MonsterInfo::name() const {
  return *name_;
}
inline void MonsterInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MonsterInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MonsterInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonsterInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MonsterInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 hp = 3 [default = 0];
inline bool MonsterInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 MonsterInfo::hp() const {
  return hp_;
}
inline void MonsterInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 level = 4 [default = 0];
inline bool MonsterInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MonsterInfo::level() const {
  return level_;
}
inline void MonsterInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 drop_id = 5 [default = 0];
inline bool MonsterInfo::has_drop_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterInfo::set_has_drop_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterInfo::clear_has_drop_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterInfo::clear_drop_id() {
  drop_id_ = 0;
  clear_has_drop_id();
}
inline ::google::protobuf::int32 MonsterInfo::drop_id() const {
  return drop_id_;
}
inline void MonsterInfo::set_drop_id(::google::protobuf::int32 value) {
  set_has_drop_id();
  drop_id_ = value;
}

// optional int32 exp = 6 [default = 0];
inline bool MonsterInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 MonsterInfo::exp() const {
  return exp_;
}
inline void MonsterInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bytes model_id = 7;
inline bool MonsterInfo::has_model_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterInfo::set_has_model_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterInfo::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterInfo::clear_model_id() {
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    model_id_->clear();
  }
  clear_has_model_id();
}
inline const ::std::string& MonsterInfo::model_id() const {
  return *model_id_;
}
inline void MonsterInfo::set_model_id(const ::std::string& value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void MonsterInfo::set_model_id(const char* value) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(value);
}
inline void MonsterInfo::set_model_id(const void* value, size_t size) {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  model_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonsterInfo::mutable_model_id() {
  set_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    model_id_ = new ::std::string;
  }
  return model_id_;
}
inline ::std::string* MonsterInfo::release_model_id() {
  clear_has_model_id();
  if (model_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_id_;
    model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes icon_id = 8;
inline bool MonsterInfo::has_icon_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterInfo::set_has_icon_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterInfo::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterInfo::clear_icon_id() {
  if (icon_id_ != &::google::protobuf::internal::kEmptyString) {
    icon_id_->clear();
  }
  clear_has_icon_id();
}
inline const ::std::string& MonsterInfo::icon_id() const {
  return *icon_id_;
}
inline void MonsterInfo::set_icon_id(const ::std::string& value) {
  set_has_icon_id();
  if (icon_id_ == &::google::protobuf::internal::kEmptyString) {
    icon_id_ = new ::std::string;
  }
  icon_id_->assign(value);
}
inline void MonsterInfo::set_icon_id(const char* value) {
  set_has_icon_id();
  if (icon_id_ == &::google::protobuf::internal::kEmptyString) {
    icon_id_ = new ::std::string;
  }
  icon_id_->assign(value);
}
inline void MonsterInfo::set_icon_id(const void* value, size_t size) {
  set_has_icon_id();
  if (icon_id_ == &::google::protobuf::internal::kEmptyString) {
    icon_id_ = new ::std::string;
  }
  icon_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonsterInfo::mutable_icon_id() {
  set_has_icon_id();
  if (icon_id_ == &::google::protobuf::internal::kEmptyString) {
    icon_id_ = new ::std::string;
  }
  return icon_id_;
}
inline ::std::string* MonsterInfo::release_icon_id() {
  clear_has_icon_id();
  if (icon_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_id_;
    icon_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WingSpiritInfo

// optional int64 item_id = 1;
inline bool WingSpiritInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingSpiritInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingSpiritInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingSpiritInfo::clear_item_id() {
  item_id_ = GOOGLE_LONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::int64 WingSpiritInfo::item_id() const {
  return item_id_;
}
inline void WingSpiritInfo::set_item_id(::google::protobuf::int64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 t_id = 9;
inline bool WingSpiritInfo::has_t_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingSpiritInfo::set_has_t_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingSpiritInfo::clear_has_t_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingSpiritInfo::clear_t_id() {
  t_id_ = 0;
  clear_has_t_id();
}
inline ::google::protobuf::int32 WingSpiritInfo::t_id() const {
  return t_id_;
}
inline void WingSpiritInfo::set_t_id(::google::protobuf::int32 value) {
  set_has_t_id();
  t_id_ = value;
}

// optional bool is_fragment = 2;
inline bool WingSpiritInfo::has_is_fragment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WingSpiritInfo::set_has_is_fragment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WingSpiritInfo::clear_has_is_fragment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WingSpiritInfo::clear_is_fragment() {
  is_fragment_ = false;
  clear_has_is_fragment();
}
inline bool WingSpiritInfo::is_fragment() const {
  return is_fragment_;
}
inline void WingSpiritInfo::set_is_fragment(bool value) {
  set_has_is_fragment();
  is_fragment_ = value;
}

// optional int32 level = 3;
inline bool WingSpiritInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WingSpiritInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WingSpiritInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WingSpiritInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 WingSpiritInfo::level() const {
  return level_;
}
inline void WingSpiritInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 self_exp = 4;
inline bool WingSpiritInfo::has_self_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WingSpiritInfo::set_has_self_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WingSpiritInfo::clear_has_self_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WingSpiritInfo::clear_self_exp() {
  self_exp_ = 0;
  clear_has_self_exp();
}
inline ::google::protobuf::int32 WingSpiritInfo::self_exp() const {
  return self_exp_;
}
inline void WingSpiritInfo::set_self_exp(::google::protobuf::int32 value) {
  set_has_self_exp();
  self_exp_ = value;
}

// optional int32 add_exp = 5;
inline bool WingSpiritInfo::has_add_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WingSpiritInfo::set_has_add_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WingSpiritInfo::clear_has_add_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WingSpiritInfo::clear_add_exp() {
  add_exp_ = 0;
  clear_has_add_exp();
}
inline ::google::protobuf::int32 WingSpiritInfo::add_exp() const {
  return add_exp_;
}
inline void WingSpiritInfo::set_add_exp(::google::protobuf::int32 value) {
  set_has_add_exp();
  add_exp_ = value;
}

// optional int32 max_exp = 6;
inline bool WingSpiritInfo::has_max_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WingSpiritInfo::set_has_max_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WingSpiritInfo::clear_has_max_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WingSpiritInfo::clear_max_exp() {
  max_exp_ = 0;
  clear_has_max_exp();
}
inline ::google::protobuf::int32 WingSpiritInfo::max_exp() const {
  return max_exp_;
}
inline void WingSpiritInfo::set_max_exp(::google::protobuf::int32 value) {
  set_has_max_exp();
  max_exp_ = value;
}

// repeated .protocols.common.AttributeData attr_plus = 7;
inline int WingSpiritInfo::attr_plus_size() const {
  return attr_plus_.size();
}
inline void WingSpiritInfo::clear_attr_plus() {
  attr_plus_.Clear();
}
inline const ::protocols::common::AttributeData& WingSpiritInfo::attr_plus(int index) const {
  return attr_plus_.Get(index);
}
inline ::protocols::common::AttributeData* WingSpiritInfo::mutable_attr_plus(int index) {
  return attr_plus_.Mutable(index);
}
inline ::protocols::common::AttributeData* WingSpiritInfo::add_attr_plus() {
  return attr_plus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
WingSpiritInfo::attr_plus() const {
  return attr_plus_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
WingSpiritInfo::mutable_attr_plus() {
  return &attr_plus_;
}

// optional int32 index = 8;
inline bool WingSpiritInfo::has_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WingSpiritInfo::set_has_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WingSpiritInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WingSpiritInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 WingSpiritInfo::index() const {
  return index_;
}
inline void WingSpiritInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// WingSlotInfo

// optional int32 slot_num = 1;
inline bool WingSlotInfo::has_slot_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingSlotInfo::set_has_slot_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingSlotInfo::clear_has_slot_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingSlotInfo::clear_slot_num() {
  slot_num_ = 0;
  clear_has_slot_num();
}
inline ::google::protobuf::int32 WingSlotInfo::slot_num() const {
  return slot_num_;
}
inline void WingSlotInfo::set_slot_num(::google::protobuf::int32 value) {
  set_has_slot_num();
  slot_num_ = value;
}

// optional .protocols.common.WingSpiritInfo spirit = 2;
inline bool WingSlotInfo::has_spirit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingSlotInfo::set_has_spirit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingSlotInfo::clear_has_spirit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingSlotInfo::clear_spirit() {
  if (spirit_ != NULL) spirit_->::protocols::common::WingSpiritInfo::Clear();
  clear_has_spirit();
}
inline const ::protocols::common::WingSpiritInfo& WingSlotInfo::spirit() const {
  return spirit_ != NULL ? *spirit_ : *default_instance_->spirit_;
}
inline ::protocols::common::WingSpiritInfo* WingSlotInfo::mutable_spirit() {
  set_has_spirit();
  if (spirit_ == NULL) spirit_ = new ::protocols::common::WingSpiritInfo;
  return spirit_;
}
inline ::protocols::common::WingSpiritInfo* WingSlotInfo::release_spirit() {
  clear_has_spirit();
  ::protocols::common::WingSpiritInfo* temp = spirit_;
  spirit_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// WingItemInfo

// optional int32 wing_tid = 1;
inline bool WingItemInfo::has_wing_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingItemInfo::set_has_wing_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingItemInfo::clear_has_wing_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingItemInfo::clear_wing_tid() {
  wing_tid_ = 0;
  clear_has_wing_tid();
}
inline ::google::protobuf::int32 WingItemInfo::wing_tid() const {
  return wing_tid_;
}
inline void WingItemInfo::set_wing_tid(::google::protobuf::int32 value) {
  set_has_wing_tid();
  wing_tid_ = value;
}

// optional int64 wing_item_id = 5;
inline bool WingItemInfo::has_wing_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingItemInfo::set_has_wing_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingItemInfo::clear_has_wing_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingItemInfo::clear_wing_item_id() {
  wing_item_id_ = GOOGLE_LONGLONG(0);
  clear_has_wing_item_id();
}
inline ::google::protobuf::int64 WingItemInfo::wing_item_id() const {
  return wing_item_id_;
}
inline void WingItemInfo::set_wing_item_id(::google::protobuf::int64 value) {
  set_has_wing_item_id();
  wing_item_id_ = value;
}

// optional int64 equipt_guid = 2;
inline bool WingItemInfo::has_equipt_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WingItemInfo::set_has_equipt_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WingItemInfo::clear_has_equipt_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WingItemInfo::clear_equipt_guid() {
  equipt_guid_ = GOOGLE_LONGLONG(0);
  clear_has_equipt_guid();
}
inline ::google::protobuf::int64 WingItemInfo::equipt_guid() const {
  return equipt_guid_;
}
inline void WingItemInfo::set_equipt_guid(::google::protobuf::int64 value) {
  set_has_equipt_guid();
  equipt_guid_ = value;
}

// repeated .protocols.common.WingSlotInfo slots = 3;
inline int WingItemInfo::slots_size() const {
  return slots_.size();
}
inline void WingItemInfo::clear_slots() {
  slots_.Clear();
}
inline const ::protocols::common::WingSlotInfo& WingItemInfo::slots(int index) const {
  return slots_.Get(index);
}
inline ::protocols::common::WingSlotInfo* WingItemInfo::mutable_slots(int index) {
  return slots_.Mutable(index);
}
inline ::protocols::common::WingSlotInfo* WingItemInfo::add_slots() {
  return slots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSlotInfo >&
WingItemInfo::slots() const {
  return slots_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSlotInfo >*
WingItemInfo::mutable_slots() {
  return &slots_;
}

// optional int64 point = 4;
inline bool WingItemInfo::has_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WingItemInfo::set_has_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WingItemInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WingItemInfo::clear_point() {
  point_ = GOOGLE_LONGLONG(0);
  clear_has_point();
}
inline ::google::protobuf::int64 WingItemInfo::point() const {
  return point_;
}
inline void WingItemInfo::set_point(::google::protobuf::int64 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// WingSpiritBag

// optional int32 max_num = 1;
inline bool WingSpiritBag::has_max_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingSpiritBag::set_has_max_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingSpiritBag::clear_has_max_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingSpiritBag::clear_max_num() {
  max_num_ = 0;
  clear_has_max_num();
}
inline ::google::protobuf::int32 WingSpiritBag::max_num() const {
  return max_num_;
}
inline void WingSpiritBag::set_max_num(::google::protobuf::int32 value) {
  set_has_max_num();
  max_num_ = value;
}

// optional int32 open_num = 2;
inline bool WingSpiritBag::has_open_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingSpiritBag::set_has_open_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingSpiritBag::clear_has_open_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingSpiritBag::clear_open_num() {
  open_num_ = 0;
  clear_has_open_num();
}
inline ::google::protobuf::int32 WingSpiritBag::open_num() const {
  return open_num_;
}
inline void WingSpiritBag::set_open_num(::google::protobuf::int32 value) {
  set_has_open_num();
  open_num_ = value;
}

// repeated .protocols.common.WingSpiritInfo spirits = 3;
inline int WingSpiritBag::spirits_size() const {
  return spirits_.size();
}
inline void WingSpiritBag::clear_spirits() {
  spirits_.Clear();
}
inline const ::protocols::common::WingSpiritInfo& WingSpiritBag::spirits(int index) const {
  return spirits_.Get(index);
}
inline ::protocols::common::WingSpiritInfo* WingSpiritBag::mutable_spirits(int index) {
  return spirits_.Mutable(index);
}
inline ::protocols::common::WingSpiritInfo* WingSpiritBag::add_spirits() {
  return spirits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSpiritInfo >&
WingSpiritBag::spirits() const {
  return spirits_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::WingSpiritInfo >*
WingSpiritBag::mutable_spirits() {
  return &spirits_;
}

// -------------------------------------------------------------------

// SpiritGeneratorInfo

// optional int32 level = 1;
inline bool SpiritGeneratorInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpiritGeneratorInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpiritGeneratorInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpiritGeneratorInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 SpiritGeneratorInfo::level() const {
  return level_;
}
inline void SpiritGeneratorInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional bool is_on = 2;
inline bool SpiritGeneratorInfo::has_is_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpiritGeneratorInfo::set_has_is_on() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpiritGeneratorInfo::clear_has_is_on() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpiritGeneratorInfo::clear_is_on() {
  is_on_ = false;
  clear_has_is_on();
}
inline bool SpiritGeneratorInfo::is_on() const {
  return is_on_;
}
inline void SpiritGeneratorInfo::set_is_on(bool value) {
  set_has_is_on();
  is_on_ = value;
}

// optional int32 cost_money = 3;
inline bool SpiritGeneratorInfo::has_cost_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpiritGeneratorInfo::set_has_cost_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpiritGeneratorInfo::clear_has_cost_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpiritGeneratorInfo::clear_cost_money() {
  cost_money_ = 0;
  clear_has_cost_money();
}
inline ::google::protobuf::int32 SpiritGeneratorInfo::cost_money() const {
  return cost_money_;
}
inline void SpiritGeneratorInfo::set_cost_money(::google::protobuf::int32 value) {
  set_has_cost_money();
  cost_money_ = value;
}

// -------------------------------------------------------------------

// EquipInfo

// required int64 item_id = 1;
inline bool EquipInfo::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipInfo::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipInfo::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipInfo::clear_item_id() {
  item_id_ = GOOGLE_LONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::int64 EquipInfo::item_id() const {
  return item_id_;
}
inline void EquipInfo::set_item_id(::google::protobuf::int64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional .protocols.common.EquipPosition position = 2;
inline bool EquipInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipInfo::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline protocols::common::EquipPosition EquipInfo::position() const {
  return static_cast< protocols::common::EquipPosition >(position_);
}
inline void EquipInfo::set_position(protocols::common::EquipPosition value) {
  GOOGLE_DCHECK(protocols::common::EquipPosition_IsValid(value));
  set_has_position();
  position_ = value;
}

// optional int32 strength_level = 3 [default = 0];
inline bool EquipInfo::has_strength_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipInfo::set_has_strength_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipInfo::clear_has_strength_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipInfo::clear_strength_level() {
  strength_level_ = 0;
  clear_has_strength_level();
}
inline ::google::protobuf::int32 EquipInfo::strength_level() const {
  return strength_level_;
}
inline void EquipInfo::set_strength_level(::google::protobuf::int32 value) {
  set_has_strength_level();
  strength_level_ = value;
}

// optional int32 mark = 4;
inline bool EquipInfo::has_mark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipInfo::set_has_mark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipInfo::clear_has_mark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipInfo::clear_mark() {
  mark_ = 0;
  clear_has_mark();
}
inline ::google::protobuf::int32 EquipInfo::mark() const {
  return mark_;
}
inline void EquipInfo::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
}

// -------------------------------------------------------------------

// AttributeData

// optional int32 key = 1;
inline bool AttributeData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttributeData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttributeData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttributeData::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 AttributeData::key() const {
  return key_;
}
inline void AttributeData::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 value = 2;
inline bool AttributeData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttributeData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttributeData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttributeData::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 AttributeData::value() const {
  return value_;
}
inline void AttributeData::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// EquipStoneData_StoneData

// optional int32 slot_index = 1;
inline bool EquipStoneData_StoneData::has_slot_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipStoneData_StoneData::set_has_slot_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipStoneData_StoneData::clear_has_slot_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipStoneData_StoneData::clear_slot_index() {
  slot_index_ = 0;
  clear_has_slot_index();
}
inline ::google::protobuf::int32 EquipStoneData_StoneData::slot_index() const {
  return slot_index_;
}
inline void EquipStoneData_StoneData::set_slot_index(::google::protobuf::int32 value) {
  set_has_slot_index();
  slot_index_ = value;
}

// optional int32 stone_id = 2;
inline bool EquipStoneData_StoneData::has_stone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipStoneData_StoneData::set_has_stone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipStoneData_StoneData::clear_has_stone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipStoneData_StoneData::clear_stone_id() {
  stone_id_ = 0;
  clear_has_stone_id();
}
inline ::google::protobuf::int32 EquipStoneData_StoneData::stone_id() const {
  return stone_id_;
}
inline void EquipStoneData_StoneData::set_stone_id(::google::protobuf::int32 value) {
  set_has_stone_id();
  stone_id_ = value;
}

// -------------------------------------------------------------------

// EquipStoneData

// repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
inline int EquipStoneData::stone_data_size() const {
  return stone_data_.size();
}
inline void EquipStoneData::clear_stone_data() {
  stone_data_.Clear();
}
inline const ::protocols::common::EquipStoneData_StoneData& EquipStoneData::stone_data(int index) const {
  return stone_data_.Get(index);
}
inline ::protocols::common::EquipStoneData_StoneData* EquipStoneData::mutable_stone_data(int index) {
  return stone_data_.Mutable(index);
}
inline ::protocols::common::EquipStoneData_StoneData* EquipStoneData::add_stone_data() {
  return stone_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipStoneData_StoneData >&
EquipStoneData::stone_data() const {
  return stone_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipStoneData_StoneData >*
EquipStoneData::mutable_stone_data() {
  return &stone_data_;
}

// optional int32 cur_socket_count = 3;
inline bool EquipStoneData::has_cur_socket_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipStoneData::set_has_cur_socket_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipStoneData::clear_has_cur_socket_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipStoneData::clear_cur_socket_count() {
  cur_socket_count_ = 0;
  clear_has_cur_socket_count();
}
inline ::google::protobuf::int32 EquipStoneData::cur_socket_count() const {
  return cur_socket_count_;
}
inline void EquipStoneData::set_cur_socket_count(::google::protobuf::int32 value) {
  set_has_cur_socket_count();
  cur_socket_count_ = value;
}

// optional int32 max_socket_count = 4;
inline bool EquipStoneData::has_max_socket_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipStoneData::set_has_max_socket_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipStoneData::clear_has_max_socket_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipStoneData::clear_max_socket_count() {
  max_socket_count_ = 0;
  clear_has_max_socket_count();
}
inline ::google::protobuf::int32 EquipStoneData::max_socket_count() const {
  return max_socket_count_;
}
inline void EquipStoneData::set_max_socket_count(::google::protobuf::int32 value) {
  set_has_max_socket_count();
  max_socket_count_ = value;
}

// optional int32 strength_client_chance = 5;
inline bool EquipStoneData::has_strength_client_chance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipStoneData::set_has_strength_client_chance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipStoneData::clear_has_strength_client_chance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipStoneData::clear_strength_client_chance() {
  strength_client_chance_ = 0;
  clear_has_strength_client_chance();
}
inline ::google::protobuf::int32 EquipStoneData::strength_client_chance() const {
  return strength_client_chance_;
}
inline void EquipStoneData::set_strength_client_chance(::google::protobuf::int32 value) {
  set_has_strength_client_chance();
  strength_client_chance_ = value;
}

// -------------------------------------------------------------------

// DBSlotData

// optional int32 locked_attr_bits = 1;
inline bool DBSlotData::has_locked_attr_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBSlotData::set_has_locked_attr_bits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBSlotData::clear_has_locked_attr_bits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBSlotData::clear_locked_attr_bits() {
  locked_attr_bits_ = 0;
  clear_has_locked_attr_bits();
}
inline ::google::protobuf::int32 DBSlotData::locked_attr_bits() const {
  return locked_attr_bits_;
}
inline void DBSlotData::set_locked_attr_bits(::google::protobuf::int32 value) {
  set_has_locked_attr_bits();
  locked_attr_bits_ = value;
}

// optional .protocols.common.EquipStoneData stone_data = 2;
inline bool DBSlotData::has_stone_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBSlotData::set_has_stone_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBSlotData::clear_has_stone_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBSlotData::clear_stone_data() {
  if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
  clear_has_stone_data();
}
inline const ::protocols::common::EquipStoneData& DBSlotData::stone_data() const {
  return stone_data_ != NULL ? *stone_data_ : *default_instance_->stone_data_;
}
inline ::protocols::common::EquipStoneData* DBSlotData::mutable_stone_data() {
  set_has_stone_data();
  if (stone_data_ == NULL) stone_data_ = new ::protocols::common::EquipStoneData;
  return stone_data_;
}
inline ::protocols::common::EquipStoneData* DBSlotData::release_stone_data() {
  clear_has_stone_data();
  ::protocols::common::EquipStoneData* temp = stone_data_;
  stone_data_ = NULL;
  return temp;
}

// optional int32 socket_num = 3;
inline bool DBSlotData::has_socket_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBSlotData::set_has_socket_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBSlotData::clear_has_socket_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBSlotData::clear_socket_num() {
  socket_num_ = 0;
  clear_has_socket_num();
}
inline ::google::protobuf::int32 DBSlotData::socket_num() const {
  return socket_num_;
}
inline void DBSlotData::set_socket_num(::google::protobuf::int32 value) {
  set_has_socket_num();
  socket_num_ = value;
}

// optional int32 strength_fail_num = 4;
inline bool DBSlotData::has_strength_fail_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBSlotData::set_has_strength_fail_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBSlotData::clear_has_strength_fail_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBSlotData::clear_strength_fail_num() {
  strength_fail_num_ = 0;
  clear_has_strength_fail_num();
}
inline ::google::protobuf::int32 DBSlotData::strength_fail_num() const {
  return strength_fail_num_;
}
inline void DBSlotData::set_strength_fail_num(::google::protobuf::int32 value) {
  set_has_strength_fail_num();
  strength_fail_num_ = value;
}

// optional int32 strength_chance = 5;
inline bool DBSlotData::has_strength_chance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBSlotData::set_has_strength_chance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBSlotData::clear_has_strength_chance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBSlotData::clear_strength_chance() {
  strength_chance_ = 0;
  clear_has_strength_chance();
}
inline ::google::protobuf::int32 DBSlotData::strength_chance() const {
  return strength_chance_;
}
inline void DBSlotData::set_strength_chance(::google::protobuf::int32 value) {
  set_has_strength_chance();
  strength_chance_ = value;
}

// optional int32 strength_client_chance = 6;
inline bool DBSlotData::has_strength_client_chance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBSlotData::set_has_strength_client_chance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBSlotData::clear_has_strength_client_chance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBSlotData::clear_strength_client_chance() {
  strength_client_chance_ = 0;
  clear_has_strength_client_chance();
}
inline ::google::protobuf::int32 DBSlotData::strength_client_chance() const {
  return strength_client_chance_;
}
inline void DBSlotData::set_strength_client_chance(::google::protobuf::int32 value) {
  set_has_strength_client_chance();
  strength_client_chance_ = value;
}

// -------------------------------------------------------------------

// EquipDetail

// required int64 item_id = 1;
inline bool EquipDetail::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipDetail::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipDetail::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipDetail::clear_item_id() {
  item_id_ = GOOGLE_LONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::int64 EquipDetail::item_id() const {
  return item_id_;
}
inline void EquipDetail::set_item_id(::google::protobuf::int64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 expired = 2 [default = 0];
inline bool EquipDetail::has_expired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipDetail::set_has_expired() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipDetail::clear_has_expired() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipDetail::clear_expired() {
  expired_ = 0;
  clear_has_expired();
}
inline ::google::protobuf::int32 EquipDetail::expired() const {
  return expired_;
}
inline void EquipDetail::set_expired(::google::protobuf::int32 value) {
  set_has_expired();
  expired_ = value;
}

// optional int32 strength_level = 3 [default = 0];
inline bool EquipDetail::has_strength_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipDetail::set_has_strength_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipDetail::clear_has_strength_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipDetail::clear_strength_level() {
  strength_level_ = 0;
  clear_has_strength_level();
}
inline ::google::protobuf::int32 EquipDetail::strength_level() const {
  return strength_level_;
}
inline void EquipDetail::set_strength_level(::google::protobuf::int32 value) {
  set_has_strength_level();
  strength_level_ = value;
}

// optional int32 slot_count = 4 [default = 0];
inline bool EquipDetail::has_slot_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipDetail::set_has_slot_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipDetail::clear_has_slot_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipDetail::clear_slot_count() {
  slot_count_ = 0;
  clear_has_slot_count();
}
inline ::google::protobuf::int32 EquipDetail::slot_count() const {
  return slot_count_;
}
inline void EquipDetail::set_slot_count(::google::protobuf::int32 value) {
  set_has_slot_count();
  slot_count_ = value;
}

// repeated .protocols.common.AttributeData attr_list = 5;
inline int EquipDetail::attr_list_size() const {
  return attr_list_.size();
}
inline void EquipDetail::clear_attr_list() {
  attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& EquipDetail::attr_list(int index) const {
  return attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* EquipDetail::mutable_attr_list(int index) {
  return attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* EquipDetail::add_attr_list() {
  return attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
EquipDetail::attr_list() const {
  return attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
EquipDetail::mutable_attr_list() {
  return &attr_list_;
}

// optional int32 bind_flag = 6 [default = 0];
inline bool EquipDetail::has_bind_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipDetail::set_has_bind_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipDetail::clear_has_bind_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipDetail::clear_bind_flag() {
  bind_flag_ = 0;
  clear_has_bind_flag();
}
inline ::google::protobuf::int32 EquipDetail::bind_flag() const {
  return bind_flag_;
}
inline void EquipDetail::set_bind_flag(::google::protobuf::int32 value) {
  set_has_bind_flag();
  bind_flag_ = value;
}

// repeated .protocols.common.AttributeData extra_attr_list = 7;
inline int EquipDetail::extra_attr_list_size() const {
  return extra_attr_list_.size();
}
inline void EquipDetail::clear_extra_attr_list() {
  extra_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& EquipDetail::extra_attr_list(int index) const {
  return extra_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* EquipDetail::mutable_extra_attr_list(int index) {
  return extra_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* EquipDetail::add_extra_attr_list() {
  return extra_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
EquipDetail::extra_attr_list() const {
  return extra_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
EquipDetail::mutable_extra_attr_list() {
  return &extra_attr_list_;
}

// repeated .protocols.common.AttributeData strength_attr_list = 9;
inline int EquipDetail::strength_attr_list_size() const {
  return strength_attr_list_.size();
}
inline void EquipDetail::clear_strength_attr_list() {
  strength_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& EquipDetail::strength_attr_list(int index) const {
  return strength_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* EquipDetail::mutable_strength_attr_list(int index) {
  return strength_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* EquipDetail::add_strength_attr_list() {
  return strength_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
EquipDetail::strength_attr_list() const {
  return strength_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
EquipDetail::mutable_strength_attr_list() {
  return &strength_attr_list_;
}

// optional int32 mark = 10;
inline bool EquipDetail::has_mark() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipDetail::set_has_mark() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipDetail::clear_has_mark() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipDetail::clear_mark() {
  mark_ = 0;
  clear_has_mark();
}
inline ::google::protobuf::int32 EquipDetail::mark() const {
  return mark_;
}
inline void EquipDetail::set_mark(::google::protobuf::int32 value) {
  set_has_mark();
  mark_ = value;
}

// repeated .protocols.common.AttributeData stone_attr_list = 11;
inline int EquipDetail::stone_attr_list_size() const {
  return stone_attr_list_.size();
}
inline void EquipDetail::clear_stone_attr_list() {
  stone_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& EquipDetail::stone_attr_list(int index) const {
  return stone_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* EquipDetail::mutable_stone_attr_list(int index) {
  return stone_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* EquipDetail::add_stone_attr_list() {
  return stone_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
EquipDetail::stone_attr_list() const {
  return stone_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
EquipDetail::mutable_stone_attr_list() {
  return &stone_attr_list_;
}

// optional int32 locked_attr_bits = 12;
inline bool EquipDetail::has_locked_attr_bits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipDetail::set_has_locked_attr_bits() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipDetail::clear_has_locked_attr_bits() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipDetail::clear_locked_attr_bits() {
  locked_attr_bits_ = 0;
  clear_has_locked_attr_bits();
}
inline ::google::protobuf::int32 EquipDetail::locked_attr_bits() const {
  return locked_attr_bits_;
}
inline void EquipDetail::set_locked_attr_bits(::google::protobuf::int32 value) {
  set_has_locked_attr_bits();
  locked_attr_bits_ = value;
}

// optional .protocols.common.EquipStoneData stone_data = 13;
inline bool EquipDetail::has_stone_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipDetail::set_has_stone_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipDetail::clear_has_stone_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipDetail::clear_stone_data() {
  if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
  clear_has_stone_data();
}
inline const ::protocols::common::EquipStoneData& EquipDetail::stone_data() const {
  return stone_data_ != NULL ? *stone_data_ : *default_instance_->stone_data_;
}
inline ::protocols::common::EquipStoneData* EquipDetail::mutable_stone_data() {
  set_has_stone_data();
  if (stone_data_ == NULL) stone_data_ = new ::protocols::common::EquipStoneData;
  return stone_data_;
}
inline ::protocols::common::EquipStoneData* EquipDetail::release_stone_data() {
  clear_has_stone_data();
  ::protocols::common::EquipStoneData* temp = stone_data_;
  stone_data_ = NULL;
  return temp;
}

// optional .protocols.common.WingItemInfo wing_info = 14;
inline bool EquipDetail::has_wing_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipDetail::set_has_wing_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipDetail::clear_has_wing_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipDetail::clear_wing_info() {
  if (wing_info_ != NULL) wing_info_->::protocols::common::WingItemInfo::Clear();
  clear_has_wing_info();
}
inline const ::protocols::common::WingItemInfo& EquipDetail::wing_info() const {
  return wing_info_ != NULL ? *wing_info_ : *default_instance_->wing_info_;
}
inline ::protocols::common::WingItemInfo* EquipDetail::mutable_wing_info() {
  set_has_wing_info();
  if (wing_info_ == NULL) wing_info_ = new ::protocols::common::WingItemInfo;
  return wing_info_;
}
inline ::protocols::common::WingItemInfo* EquipDetail::release_wing_info() {
  clear_has_wing_info();
  ::protocols::common::WingItemInfo* temp = wing_info_;
  wing_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FighterInfo

// required int64 guid = 1;
inline bool FighterInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FighterInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FighterInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FighterInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 FighterInfo::guid() const {
  return guid_;
}
inline void FighterInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required int32 battle_index = 2 [default = 0];
inline bool FighterInfo::has_battle_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FighterInfo::set_has_battle_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FighterInfo::clear_has_battle_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FighterInfo::clear_battle_index() {
  battle_index_ = 0;
  clear_has_battle_index();
}
inline ::google::protobuf::int32 FighterInfo::battle_index() const {
  return battle_index_;
}
inline void FighterInfo::set_battle_index(::google::protobuf::int32 value) {
  set_has_battle_index();
  battle_index_ = value;
}

// -------------------------------------------------------------------

// LineupInfo

// required int32 lineup_id = 1;
inline bool LineupInfo::has_lineup_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineupInfo::set_has_lineup_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineupInfo::clear_has_lineup_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineupInfo::clear_lineup_id() {
  lineup_id_ = 0;
  clear_has_lineup_id();
}
inline ::google::protobuf::int32 LineupInfo::lineup_id() const {
  return lineup_id_;
}
inline void LineupInfo::set_lineup_id(::google::protobuf::int32 value) {
  set_has_lineup_id();
  lineup_id_ = value;
}

// required string lineup_name = 2;
inline bool LineupInfo::has_lineup_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineupInfo::set_has_lineup_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineupInfo::clear_has_lineup_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineupInfo::clear_lineup_name() {
  if (lineup_name_ != &::google::protobuf::internal::kEmptyString) {
    lineup_name_->clear();
  }
  clear_has_lineup_name();
}
inline const ::std::string& LineupInfo::lineup_name() const {
  return *lineup_name_;
}
inline void LineupInfo::set_lineup_name(const ::std::string& value) {
  set_has_lineup_name();
  if (lineup_name_ == &::google::protobuf::internal::kEmptyString) {
    lineup_name_ = new ::std::string;
  }
  lineup_name_->assign(value);
}
inline void LineupInfo::set_lineup_name(const char* value) {
  set_has_lineup_name();
  if (lineup_name_ == &::google::protobuf::internal::kEmptyString) {
    lineup_name_ = new ::std::string;
  }
  lineup_name_->assign(value);
}
inline void LineupInfo::set_lineup_name(const char* value, size_t size) {
  set_has_lineup_name();
  if (lineup_name_ == &::google::protobuf::internal::kEmptyString) {
    lineup_name_ = new ::std::string;
  }
  lineup_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineupInfo::mutable_lineup_name() {
  set_has_lineup_name();
  if (lineup_name_ == &::google::protobuf::internal::kEmptyString) {
    lineup_name_ = new ::std::string;
  }
  return lineup_name_;
}
inline ::std::string* LineupInfo::release_lineup_name() {
  clear_has_lineup_name();
  if (lineup_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lineup_name_;
    lineup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated int32 battle_skill_id = 3;
inline int LineupInfo::battle_skill_id_size() const {
  return battle_skill_id_.size();
}
inline void LineupInfo::clear_battle_skill_id() {
  battle_skill_id_.Clear();
}
inline ::google::protobuf::int32 LineupInfo::battle_skill_id(int index) const {
  return battle_skill_id_.Get(index);
}
inline void LineupInfo::set_battle_skill_id(int index, ::google::protobuf::int32 value) {
  battle_skill_id_.Set(index, value);
}
inline void LineupInfo::add_battle_skill_id(::google::protobuf::int32 value) {
  battle_skill_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineupInfo::battle_skill_id() const {
  return battle_skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineupInfo::mutable_battle_skill_id() {
  return &battle_skill_id_;
}

// repeated .protocols.common.FighterInfo fighter = 4;
inline int LineupInfo::fighter_size() const {
  return fighter_.size();
}
inline void LineupInfo::clear_fighter() {
  fighter_.Clear();
}
inline const ::protocols::common::FighterInfo& LineupInfo::fighter(int index) const {
  return fighter_.Get(index);
}
inline ::protocols::common::FighterInfo* LineupInfo::mutable_fighter(int index) {
  return fighter_.Mutable(index);
}
inline ::protocols::common::FighterInfo* LineupInfo::add_fighter() {
  return fighter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >&
LineupInfo::fighter() const {
  return fighter_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >*
LineupInfo::mutable_fighter() {
  return &fighter_;
}

// optional int32 lineup_fight_capacity = 5;
inline bool LineupInfo::has_lineup_fight_capacity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineupInfo::set_has_lineup_fight_capacity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineupInfo::clear_has_lineup_fight_capacity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineupInfo::clear_lineup_fight_capacity() {
  lineup_fight_capacity_ = 0;
  clear_has_lineup_fight_capacity();
}
inline ::google::protobuf::int32 LineupInfo::lineup_fight_capacity() const {
  return lineup_fight_capacity_;
}
inline void LineupInfo::set_lineup_fight_capacity(::google::protobuf::int32 value) {
  set_has_lineup_fight_capacity();
  lineup_fight_capacity_ = value;
}

// -------------------------------------------------------------------

// Money1

// required .protocols.common.MONEY_TYPE money_type = 1;
inline bool Money1::has_money_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Money1::set_has_money_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Money1::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Money1::clear_money_type() {
  money_type_ = 1;
  clear_has_money_type();
}
inline protocols::common::MONEY_TYPE Money1::money_type() const {
  return static_cast< protocols::common::MONEY_TYPE >(money_type_);
}
inline void Money1::set_money_type(protocols::common::MONEY_TYPE value) {
  GOOGLE_DCHECK(protocols::common::MONEY_TYPE_IsValid(value));
  set_has_money_type();
  money_type_ = value;
}

// required int64 num = 2;
inline bool Money1::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Money1::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Money1::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Money1::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::int64 Money1::num() const {
  return num_;
}
inline void Money1::set_num(::google::protobuf::int64 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Money

// repeated .protocols.common.Money1 money = 1;
inline int Money::money_size() const {
  return money_.size();
}
inline void Money::clear_money() {
  money_.Clear();
}
inline const ::protocols::common::Money1& Money::money(int index) const {
  return money_.Get(index);
}
inline ::protocols::common::Money1* Money::mutable_money(int index) {
  return money_.Mutable(index);
}
inline ::protocols::common::Money1* Money::add_money() {
  return money_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Money1 >&
Money::money() const {
  return money_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Money1 >*
Money::mutable_money() {
  return &money_;
}

// -------------------------------------------------------------------

// QuestAction

// optional .protocols.common.QuestActionType action_type = 1;
inline bool QuestAction::has_action_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestAction::set_has_action_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestAction::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestAction::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline protocols::common::QuestActionType QuestAction::action_type() const {
  return static_cast< protocols::common::QuestActionType >(action_type_);
}
inline void QuestAction::set_action_type(protocols::common::QuestActionType value) {
  GOOGLE_DCHECK(protocols::common::QuestActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
}

// repeated int32 action_param = 2;
inline int QuestAction::action_param_size() const {
  return action_param_.size();
}
inline void QuestAction::clear_action_param() {
  action_param_.Clear();
}
inline ::google::protobuf::int32 QuestAction::action_param(int index) const {
  return action_param_.Get(index);
}
inline void QuestAction::set_action_param(int index, ::google::protobuf::int32 value) {
  action_param_.Set(index, value);
}
inline void QuestAction::add_action_param(::google::protobuf::int32 value) {
  action_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuestAction::action_param() const {
  return action_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuestAction::mutable_action_param() {
  return &action_param_;
}

// -------------------------------------------------------------------

// QuestActionsPb

// repeated .protocols.common.QuestAction actions = 1;
inline int QuestActionsPb::actions_size() const {
  return actions_.size();
}
inline void QuestActionsPb::clear_actions() {
  actions_.Clear();
}
inline const ::protocols::common::QuestAction& QuestActionsPb::actions(int index) const {
  return actions_.Get(index);
}
inline ::protocols::common::QuestAction* QuestActionsPb::mutable_actions(int index) {
  return actions_.Mutable(index);
}
inline ::protocols::common::QuestAction* QuestActionsPb::add_actions() {
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >&
QuestActionsPb::actions() const {
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >*
QuestActionsPb::mutable_actions() {
  return &actions_;
}

// -------------------------------------------------------------------

// QuestPb

// optional int32 quest_id = 1;
inline bool QuestPb::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestPb::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestPb::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestPb::clear_quest_id() {
  quest_id_ = 0;
  clear_has_quest_id();
}
inline ::google::protobuf::int32 QuestPb::quest_id() const {
  return quest_id_;
}
inline void QuestPb::set_quest_id(::google::protobuf::int32 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// optional .protocols.common.QuestStatus quest_status = 2;
inline bool QuestPb::has_quest_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestPb::set_has_quest_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestPb::clear_has_quest_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestPb::clear_quest_status() {
  quest_status_ = 0;
  clear_has_quest_status();
}
inline protocols::common::QuestStatus QuestPb::quest_status() const {
  return static_cast< protocols::common::QuestStatus >(quest_status_);
}
inline void QuestPb::set_quest_status(protocols::common::QuestStatus value) {
  GOOGLE_DCHECK(protocols::common::QuestStatus_IsValid(value));
  set_has_quest_status();
  quest_status_ = value;
}

// optional .protocols.common.QuestActionsPb actions = 3;
inline bool QuestPb::has_actions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestPb::set_has_actions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestPb::clear_has_actions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestPb::clear_actions() {
  if (actions_ != NULL) actions_->::protocols::common::QuestActionsPb::Clear();
  clear_has_actions();
}
inline const ::protocols::common::QuestActionsPb& QuestPb::actions() const {
  return actions_ != NULL ? *actions_ : *default_instance_->actions_;
}
inline ::protocols::common::QuestActionsPb* QuestPb::mutable_actions() {
  set_has_actions();
  if (actions_ == NULL) actions_ = new ::protocols::common::QuestActionsPb;
  return actions_;
}
inline ::protocols::common::QuestActionsPb* QuestPb::release_actions() {
  clear_has_actions();
  ::protocols::common::QuestActionsPb* temp = actions_;
  actions_ = NULL;
  return temp;
}

// optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
inline bool QuestPb::has_quest_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestPb::set_has_quest_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestPb::clear_has_quest_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestPb::clear_quest_type() {
  quest_type_ = 1;
  clear_has_quest_type();
}
inline protocols::common::QuestType QuestPb::quest_type() const {
  return static_cast< protocols::common::QuestType >(quest_type_);
}
inline void QuestPb::set_quest_type(protocols::common::QuestType value) {
  GOOGLE_DCHECK(protocols::common::QuestType_IsValid(value));
  set_has_quest_type();
  quest_type_ = value;
}

// optional int32 reward_exp = 5;
inline bool QuestPb::has_reward_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestPb::set_has_reward_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestPb::clear_has_reward_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestPb::clear_reward_exp() {
  reward_exp_ = 0;
  clear_has_reward_exp();
}
inline ::google::protobuf::int32 QuestPb::reward_exp() const {
  return reward_exp_;
}
inline void QuestPb::set_reward_exp(::google::protobuf::int32 value) {
  set_has_reward_exp();
  reward_exp_ = value;
}

// optional int32 reward_coin = 6;
inline bool QuestPb::has_reward_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestPb::set_has_reward_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestPb::clear_has_reward_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestPb::clear_reward_coin() {
  reward_coin_ = 0;
  clear_has_reward_coin();
}
inline ::google::protobuf::int32 QuestPb::reward_coin() const {
  return reward_coin_;
}
inline void QuestPb::set_reward_coin(::google::protobuf::int32 value) {
  set_has_reward_coin();
  reward_coin_ = value;
}

// optional int32 circle_index = 7;
inline bool QuestPb::has_circle_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuestPb::set_has_circle_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuestPb::clear_has_circle_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuestPb::clear_circle_index() {
  circle_index_ = 0;
  clear_has_circle_index();
}
inline ::google::protobuf::int32 QuestPb::circle_index() const {
  return circle_index_;
}
inline void QuestPb::set_circle_index(::google::protobuf::int32 value) {
  set_has_circle_index();
  circle_index_ = value;
}

// -------------------------------------------------------------------

// QuestPreCondition

// optional int32 pre_quest_id = 1;
inline bool QuestPreCondition::has_pre_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestPreCondition::set_has_pre_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestPreCondition::clear_has_pre_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestPreCondition::clear_pre_quest_id() {
  pre_quest_id_ = 0;
  clear_has_pre_quest_id();
}
inline ::google::protobuf::int32 QuestPreCondition::pre_quest_id() const {
  return pre_quest_id_;
}
inline void QuestPreCondition::set_pre_quest_id(::google::protobuf::int32 value) {
  set_has_pre_quest_id();
  pre_quest_id_ = value;
}

// optional int32 player_level_min = 2 [default = 1];
inline bool QuestPreCondition::has_player_level_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestPreCondition::set_has_player_level_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestPreCondition::clear_has_player_level_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestPreCondition::clear_player_level_min() {
  player_level_min_ = 1;
  clear_has_player_level_min();
}
inline ::google::protobuf::int32 QuestPreCondition::player_level_min() const {
  return player_level_min_;
}
inline void QuestPreCondition::set_player_level_min(::google::protobuf::int32 value) {
  set_has_player_level_min();
  player_level_min_ = value;
}

// optional int32 player_level_max = 3;
inline bool QuestPreCondition::has_player_level_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestPreCondition::set_has_player_level_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestPreCondition::clear_has_player_level_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestPreCondition::clear_player_level_max() {
  player_level_max_ = 0;
  clear_has_player_level_max();
}
inline ::google::protobuf::int32 QuestPreCondition::player_level_max() const {
  return player_level_max_;
}
inline void QuestPreCondition::set_player_level_max(::google::protobuf::int32 value) {
  set_has_player_level_max();
  player_level_max_ = value;
}

// optional int64 start_time = 4;
inline bool QuestPreCondition::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestPreCondition::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestPreCondition::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestPreCondition::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 QuestPreCondition::start_time() const {
  return start_time_;
}
inline void QuestPreCondition::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int64 end_time = 5;
inline bool QuestPreCondition::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestPreCondition::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestPreCondition::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestPreCondition::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 QuestPreCondition::end_time() const {
  return end_time_;
}
inline void QuestPreCondition::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int64 region_id = 6;
inline bool QuestPreCondition::has_region_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestPreCondition::set_has_region_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestPreCondition::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestPreCondition::clear_region_id() {
  region_id_ = GOOGLE_LONGLONG(0);
  clear_has_region_id();
}
inline ::google::protobuf::int64 QuestPreCondition::region_id() const {
  return region_id_;
}
inline void QuestPreCondition::set_region_id(::google::protobuf::int64 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional bool auto_accept = 7 [default = false];
inline bool QuestPreCondition::has_auto_accept() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuestPreCondition::set_has_auto_accept() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuestPreCondition::clear_has_auto_accept() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuestPreCondition::clear_auto_accept() {
  auto_accept_ = false;
  clear_has_auto_accept();
}
inline bool QuestPreCondition::auto_accept() const {
  return auto_accept_;
}
inline void QuestPreCondition::set_auto_accept(bool value) {
  set_has_auto_accept();
  auto_accept_ = value;
}

// optional .protocols.common.Profession pro_limit = 8;
inline bool QuestPreCondition::has_pro_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuestPreCondition::set_has_pro_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuestPreCondition::clear_has_pro_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuestPreCondition::clear_pro_limit() {
  pro_limit_ = 1;
  clear_has_pro_limit();
}
inline protocols::common::Profession QuestPreCondition::pro_limit() const {
  return static_cast< protocols::common::Profession >(pro_limit_);
}
inline void QuestPreCondition::set_pro_limit(protocols::common::Profession value) {
  GOOGLE_DCHECK(protocols::common::Profession_IsValid(value));
  set_has_pro_limit();
  pro_limit_ = value;
}

// repeated int32 pre_quest_ids = 9;
inline int QuestPreCondition::pre_quest_ids_size() const {
  return pre_quest_ids_.size();
}
inline void QuestPreCondition::clear_pre_quest_ids() {
  pre_quest_ids_.Clear();
}
inline ::google::protobuf::int32 QuestPreCondition::pre_quest_ids(int index) const {
  return pre_quest_ids_.Get(index);
}
inline void QuestPreCondition::set_pre_quest_ids(int index, ::google::protobuf::int32 value) {
  pre_quest_ids_.Set(index, value);
}
inline void QuestPreCondition::add_pre_quest_ids(::google::protobuf::int32 value) {
  pre_quest_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuestPreCondition::pre_quest_ids() const {
  return pre_quest_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuestPreCondition::mutable_pre_quest_ids() {
  return &pre_quest_ids_;
}

// repeated int32 post_quest_ids = 10;
inline int QuestPreCondition::post_quest_ids_size() const {
  return post_quest_ids_.size();
}
inline void QuestPreCondition::clear_post_quest_ids() {
  post_quest_ids_.Clear();
}
inline ::google::protobuf::int32 QuestPreCondition::post_quest_ids(int index) const {
  return post_quest_ids_.Get(index);
}
inline void QuestPreCondition::set_post_quest_ids(int index, ::google::protobuf::int32 value) {
  post_quest_ids_.Set(index, value);
}
inline void QuestPreCondition::add_post_quest_ids(::google::protobuf::int32 value) {
  post_quest_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QuestPreCondition::post_quest_ids() const {
  return post_quest_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QuestPreCondition::mutable_post_quest_ids() {
  return &post_quest_ids_;
}

// optional bool auto_commit = 11 [default = false];
inline bool QuestPreCondition::has_auto_commit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QuestPreCondition::set_has_auto_commit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QuestPreCondition::clear_has_auto_commit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QuestPreCondition::clear_auto_commit() {
  auto_commit_ = false;
  clear_has_auto_commit();
}
inline bool QuestPreCondition::auto_commit() const {
  return auto_commit_;
}
inline void QuestPreCondition::set_auto_commit(bool value) {
  set_has_auto_commit();
  auto_commit_ = value;
}

// optional bool can_be_cancelled = 12 [default = false];
inline bool QuestPreCondition::has_can_be_cancelled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QuestPreCondition::set_has_can_be_cancelled() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QuestPreCondition::clear_has_can_be_cancelled() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QuestPreCondition::clear_can_be_cancelled() {
  can_be_cancelled_ = false;
  clear_has_can_be_cancelled();
}
inline bool QuestPreCondition::can_be_cancelled() const {
  return can_be_cancelled_;
}
inline void QuestPreCondition::set_can_be_cancelled(bool value) {
  set_has_can_be_cancelled();
  can_be_cancelled_ = value;
}

// optional bool daily_reset = 13 [default = false];
inline bool QuestPreCondition::has_daily_reset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QuestPreCondition::set_has_daily_reset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QuestPreCondition::clear_has_daily_reset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QuestPreCondition::clear_daily_reset() {
  daily_reset_ = false;
  clear_has_daily_reset();
}
inline bool QuestPreCondition::daily_reset() const {
  return daily_reset_;
}
inline void QuestPreCondition::set_daily_reset(bool value) {
  set_has_daily_reset();
  daily_reset_ = value;
}

// optional bool need_guild = 14;
inline bool QuestPreCondition::has_need_guild() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QuestPreCondition::set_has_need_guild() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QuestPreCondition::clear_has_need_guild() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QuestPreCondition::clear_need_guild() {
  need_guild_ = false;
  clear_has_need_guild();
}
inline bool QuestPreCondition::need_guild() const {
  return need_guild_;
}
inline void QuestPreCondition::set_need_guild(bool value) {
  set_has_need_guild();
  need_guild_ = value;
}

// optional bool need_guild_check = 15;
inline bool QuestPreCondition::has_need_guild_check() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QuestPreCondition::set_has_need_guild_check() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QuestPreCondition::clear_has_need_guild_check() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QuestPreCondition::clear_need_guild_check() {
  need_guild_check_ = false;
  clear_has_need_guild_check();
}
inline bool QuestPreCondition::need_guild_check() const {
  return need_guild_check_;
}
inline void QuestPreCondition::set_need_guild_check(bool value) {
  set_has_need_guild_check();
  need_guild_check_ = value;
}

// optional bool repeatable = 16;
inline bool QuestPreCondition::has_repeatable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QuestPreCondition::set_has_repeatable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QuestPreCondition::clear_has_repeatable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QuestPreCondition::clear_repeatable() {
  repeatable_ = false;
  clear_has_repeatable();
}
inline bool QuestPreCondition::repeatable() const {
  return repeatable_;
}
inline void QuestPreCondition::set_repeatable(bool value) {
  set_has_repeatable();
  repeatable_ = value;
}

// -------------------------------------------------------------------

// QuestRewards_QuestRewardItem

// required int32 item_id = 1;
inline bool QuestRewards_QuestRewardItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestRewards_QuestRewardItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestRewards_QuestRewardItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestRewards_QuestRewardItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 QuestRewards_QuestRewardItem::item_id() const {
  return item_id_;
}
inline void QuestRewards_QuestRewardItem::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_num = 2;
inline bool QuestRewards_QuestRewardItem::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestRewards_QuestRewardItem::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestRewards_QuestRewardItem::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestRewards_QuestRewardItem::clear_item_num() {
  item_num_ = 0;
  clear_has_item_num();
}
inline ::google::protobuf::int32 QuestRewards_QuestRewardItem::item_num() const {
  return item_num_;
}
inline void QuestRewards_QuestRewardItem::set_item_num(::google::protobuf::int32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// QuestRewards

// optional int32 exp = 1;
inline bool QuestRewards::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestRewards::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestRewards::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestRewards::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 QuestRewards::exp() const {
  return exp_;
}
inline void QuestRewards::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 coin = 2;
inline bool QuestRewards::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestRewards::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestRewards::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestRewards::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 QuestRewards::coin() const {
  return coin_;
}
inline void QuestRewards::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
}

// repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
inline int QuestRewards::item_size() const {
  return item_.size();
}
inline void QuestRewards::clear_item() {
  item_.Clear();
}
inline const ::protocols::common::QuestRewards_QuestRewardItem& QuestRewards::item(int index) const {
  return item_.Get(index);
}
inline ::protocols::common::QuestRewards_QuestRewardItem* QuestRewards::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::protocols::common::QuestRewards_QuestRewardItem* QuestRewards::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestRewards_QuestRewardItem >&
QuestRewards::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestRewards_QuestRewardItem >*
QuestRewards::mutable_item() {
  return &item_;
}

// optional int32 guild_contribution = 4;
inline bool QuestRewards::has_guild_contribution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestRewards::set_has_guild_contribution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestRewards::clear_has_guild_contribution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestRewards::clear_guild_contribution() {
  guild_contribution_ = 0;
  clear_has_guild_contribution();
}
inline ::google::protobuf::int32 QuestRewards::guild_contribution() const {
  return guild_contribution_;
}
inline void QuestRewards::set_guild_contribution(::google::protobuf::int32 value) {
  set_has_guild_contribution();
  guild_contribution_ = value;
}

// optional int32 guild_exp = 5;
inline bool QuestRewards::has_guild_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestRewards::set_has_guild_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestRewards::clear_has_guild_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestRewards::clear_guild_exp() {
  guild_exp_ = 0;
  clear_has_guild_exp();
}
inline ::google::protobuf::int32 QuestRewards::guild_exp() const {
  return guild_exp_;
}
inline void QuestRewards::set_guild_exp(::google::protobuf::int32 value) {
  set_has_guild_exp();
  guild_exp_ = value;
}

// optional int32 guild_crystal = 6;
inline bool QuestRewards::has_guild_crystal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestRewards::set_has_guild_crystal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestRewards::clear_has_guild_crystal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestRewards::clear_guild_crystal() {
  guild_crystal_ = 0;
  clear_has_guild_crystal();
}
inline ::google::protobuf::int32 QuestRewards::guild_crystal() const {
  return guild_crystal_;
}
inline void QuestRewards::set_guild_crystal(::google::protobuf::int32 value) {
  set_has_guild_crystal();
  guild_crystal_ = value;
}

// -------------------------------------------------------------------

// QuestProtoype

// required int32 quest_id = 1;
inline bool QuestProtoype::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestProtoype::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestProtoype::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestProtoype::clear_quest_id() {
  quest_id_ = 0;
  clear_has_quest_id();
}
inline ::google::protobuf::int32 QuestProtoype::quest_id() const {
  return quest_id_;
}
inline void QuestProtoype::set_quest_id(::google::protobuf::int32 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// optional bytes quest_name = 2;
inline bool QuestProtoype::has_quest_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestProtoype::set_has_quest_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestProtoype::clear_has_quest_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestProtoype::clear_quest_name() {
  if (quest_name_ != &::google::protobuf::internal::kEmptyString) {
    quest_name_->clear();
  }
  clear_has_quest_name();
}
inline const ::std::string& QuestProtoype::quest_name() const {
  return *quest_name_;
}
inline void QuestProtoype::set_quest_name(const ::std::string& value) {
  set_has_quest_name();
  if (quest_name_ == &::google::protobuf::internal::kEmptyString) {
    quest_name_ = new ::std::string;
  }
  quest_name_->assign(value);
}
inline void QuestProtoype::set_quest_name(const char* value) {
  set_has_quest_name();
  if (quest_name_ == &::google::protobuf::internal::kEmptyString) {
    quest_name_ = new ::std::string;
  }
  quest_name_->assign(value);
}
inline void QuestProtoype::set_quest_name(const void* value, size_t size) {
  set_has_quest_name();
  if (quest_name_ == &::google::protobuf::internal::kEmptyString) {
    quest_name_ = new ::std::string;
  }
  quest_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QuestProtoype::mutable_quest_name() {
  set_has_quest_name();
  if (quest_name_ == &::google::protobuf::internal::kEmptyString) {
    quest_name_ = new ::std::string;
  }
  return quest_name_;
}
inline ::std::string* QuestProtoype::release_quest_name() {
  clear_has_quest_name();
  if (quest_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = quest_name_;
    quest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protocols.common.QuestPreCondition pre_condition = 3;
inline bool QuestProtoype::has_pre_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestProtoype::set_has_pre_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestProtoype::clear_has_pre_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestProtoype::clear_pre_condition() {
  if (pre_condition_ != NULL) pre_condition_->::protocols::common::QuestPreCondition::Clear();
  clear_has_pre_condition();
}
inline const ::protocols::common::QuestPreCondition& QuestProtoype::pre_condition() const {
  return pre_condition_ != NULL ? *pre_condition_ : *default_instance_->pre_condition_;
}
inline ::protocols::common::QuestPreCondition* QuestProtoype::mutable_pre_condition() {
  set_has_pre_condition();
  if (pre_condition_ == NULL) pre_condition_ = new ::protocols::common::QuestPreCondition;
  return pre_condition_;
}
inline ::protocols::common::QuestPreCondition* QuestProtoype::release_pre_condition() {
  clear_has_pre_condition();
  ::protocols::common::QuestPreCondition* temp = pre_condition_;
  pre_condition_ = NULL;
  return temp;
}

// repeated .protocols.common.QuestAction actions = 4;
inline int QuestProtoype::actions_size() const {
  return actions_.size();
}
inline void QuestProtoype::clear_actions() {
  actions_.Clear();
}
inline const ::protocols::common::QuestAction& QuestProtoype::actions(int index) const {
  return actions_.Get(index);
}
inline ::protocols::common::QuestAction* QuestProtoype::mutable_actions(int index) {
  return actions_.Mutable(index);
}
inline ::protocols::common::QuestAction* QuestProtoype::add_actions() {
  return actions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >&
QuestProtoype::actions() const {
  return actions_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::QuestAction >*
QuestProtoype::mutable_actions() {
  return &actions_;
}

// optional .protocols.common.QuestRewards rewards = 5;
inline bool QuestProtoype::has_rewards() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestProtoype::set_has_rewards() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestProtoype::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestProtoype::clear_rewards() {
  if (rewards_ != NULL) rewards_->::protocols::common::QuestRewards::Clear();
  clear_has_rewards();
}
inline const ::protocols::common::QuestRewards& QuestProtoype::rewards() const {
  return rewards_ != NULL ? *rewards_ : *default_instance_->rewards_;
}
inline ::protocols::common::QuestRewards* QuestProtoype::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == NULL) rewards_ = new ::protocols::common::QuestRewards;
  return rewards_;
}
inline ::protocols::common::QuestRewards* QuestProtoype::release_rewards() {
  clear_has_rewards();
  ::protocols::common::QuestRewards* temp = rewards_;
  rewards_ = NULL;
  return temp;
}

// optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
inline bool QuestProtoype::has_quest_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestProtoype::set_has_quest_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestProtoype::clear_has_quest_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestProtoype::clear_quest_type() {
  quest_type_ = 1;
  clear_has_quest_type();
}
inline protocols::common::QuestType QuestProtoype::quest_type() const {
  return static_cast< protocols::common::QuestType >(quest_type_);
}
inline void QuestProtoype::set_quest_type(protocols::common::QuestType value) {
  GOOGLE_DCHECK(protocols::common::QuestType_IsValid(value));
  set_has_quest_type();
  quest_type_ = value;
}

// -------------------------------------------------------------------

// GuildCrystalReward

// optional int32 x = 1;
inline bool GuildCrystalReward::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCrystalReward::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCrystalReward::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCrystalReward::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 GuildCrystalReward::x() const {
  return x_;
}
inline void GuildCrystalReward::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool GuildCrystalReward::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCrystalReward::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCrystalReward::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCrystalReward::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 GuildCrystalReward::y() const {
  return y_;
}
inline void GuildCrystalReward::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 item_id = 3;
inline bool GuildCrystalReward::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCrystalReward::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCrystalReward::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCrystalReward::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 GuildCrystalReward::item_id() const {
  return item_id_;
}
inline void GuildCrystalReward::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_count = 4;
inline bool GuildCrystalReward::has_item_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCrystalReward::set_has_item_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCrystalReward::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCrystalReward::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 GuildCrystalReward::item_count() const {
  return item_count_;
}
inline void GuildCrystalReward::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional bool picked = 5;
inline bool GuildCrystalReward::has_picked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildCrystalReward::set_has_picked() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildCrystalReward::clear_has_picked() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildCrystalReward::clear_picked() {
  picked_ = false;
  clear_has_picked();
}
inline bool GuildCrystalReward::picked() const {
  return picked_;
}
inline void GuildCrystalReward::set_picked(bool value) {
  set_has_picked();
  picked_ = value;
}

// optional int32 collecting_player_id = 6;
inline bool GuildCrystalReward::has_collecting_player_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildCrystalReward::set_has_collecting_player_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildCrystalReward::clear_has_collecting_player_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildCrystalReward::clear_collecting_player_id() {
  collecting_player_id_ = 0;
  clear_has_collecting_player_id();
}
inline ::google::protobuf::int32 GuildCrystalReward::collecting_player_id() const {
  return collecting_player_id_;
}
inline void GuildCrystalReward::set_collecting_player_id(::google::protobuf::int32 value) {
  set_has_collecting_player_id();
  collecting_player_id_ = value;
}

// optional int32 collecting_tick = 7;
inline bool GuildCrystalReward::has_collecting_tick() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildCrystalReward::set_has_collecting_tick() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildCrystalReward::clear_has_collecting_tick() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildCrystalReward::clear_collecting_tick() {
  collecting_tick_ = 0;
  clear_has_collecting_tick();
}
inline ::google::protobuf::int32 GuildCrystalReward::collecting_tick() const {
  return collecting_tick_;
}
inline void GuildCrystalReward::set_collecting_tick(::google::protobuf::int32 value) {
  set_has_collecting_tick();
  collecting_tick_ = value;
}

// optional int32 display_id = 8;
inline bool GuildCrystalReward::has_display_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildCrystalReward::set_has_display_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildCrystalReward::clear_has_display_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildCrystalReward::clear_display_id() {
  display_id_ = 0;
  clear_has_display_id();
}
inline ::google::protobuf::int32 GuildCrystalReward::display_id() const {
  return display_id_;
}
inline void GuildCrystalReward::set_display_id(::google::protobuf::int32 value) {
  set_has_display_id();
  display_id_ = value;
}

// -------------------------------------------------------------------

// TreasureBoxReward

// optional int32 act_id = 1;
inline bool TreasureBoxReward::has_act_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureBoxReward::set_has_act_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureBoxReward::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureBoxReward::clear_act_id() {
  act_id_ = 0;
  clear_has_act_id();
}
inline ::google::protobuf::int32 TreasureBoxReward::act_id() const {
  return act_id_;
}
inline void TreasureBoxReward::set_act_id(::google::protobuf::int32 value) {
  set_has_act_id();
  act_id_ = value;
}

// optional int32 index = 2;
inline bool TreasureBoxReward::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureBoxReward::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureBoxReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureBoxReward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 TreasureBoxReward::index() const {
  return index_;
}
inline void TreasureBoxReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 map_id = 3;
inline bool TreasureBoxReward::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureBoxReward::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureBoxReward::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureBoxReward::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 TreasureBoxReward::map_id() const {
  return map_id_;
}
inline void TreasureBoxReward::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 map_x = 4;
inline bool TreasureBoxReward::has_map_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureBoxReward::set_has_map_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureBoxReward::clear_has_map_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureBoxReward::clear_map_x() {
  map_x_ = 0;
  clear_has_map_x();
}
inline ::google::protobuf::int32 TreasureBoxReward::map_x() const {
  return map_x_;
}
inline void TreasureBoxReward::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// optional int32 map_y = 5;
inline bool TreasureBoxReward::has_map_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreasureBoxReward::set_has_map_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreasureBoxReward::clear_has_map_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreasureBoxReward::clear_map_y() {
  map_y_ = 0;
  clear_has_map_y();
}
inline ::google::protobuf::int32 TreasureBoxReward::map_y() const {
  return map_y_;
}
inline void TreasureBoxReward::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// optional int32 icon_id = 6;
inline bool TreasureBoxReward::has_icon_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TreasureBoxReward::set_has_icon_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TreasureBoxReward::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TreasureBoxReward::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 TreasureBoxReward::icon_id() const {
  return icon_id_;
}
inline void TreasureBoxReward::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// -------------------------------------------------------------------

// GuildCrystalTowerActivityData

// optional int32 last_activity_time_sec = 1;
inline bool GuildCrystalTowerActivityData::has_last_activity_time_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_last_activity_time_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCrystalTowerActivityData::clear_has_last_activity_time_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCrystalTowerActivityData::clear_last_activity_time_sec() {
  last_activity_time_sec_ = 0;
  clear_has_last_activity_time_sec();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::last_activity_time_sec() const {
  return last_activity_time_sec_;
}
inline void GuildCrystalTowerActivityData::set_last_activity_time_sec(::google::protobuf::int32 value) {
  set_has_last_activity_time_sec();
  last_activity_time_sec_ = value;
}

// optional int32 tower_category = 2;
inline bool GuildCrystalTowerActivityData::has_tower_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_tower_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCrystalTowerActivityData::clear_has_tower_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCrystalTowerActivityData::clear_tower_category() {
  tower_category_ = 0;
  clear_has_tower_category();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::tower_category() const {
  return tower_category_;
}
inline void GuildCrystalTowerActivityData::set_tower_category(::google::protobuf::int32 value) {
  set_has_tower_category();
  tower_category_ = value;
}

// optional int32 start_sec = 3;
inline bool GuildCrystalTowerActivityData::has_start_sec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_start_sec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCrystalTowerActivityData::clear_has_start_sec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCrystalTowerActivityData::clear_start_sec() {
  start_sec_ = 0;
  clear_has_start_sec();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::start_sec() const {
  return start_sec_;
}
inline void GuildCrystalTowerActivityData::set_start_sec(::google::protobuf::int32 value) {
  set_has_start_sec();
  start_sec_ = value;
}

// optional int32 activity_duration = 4;
inline bool GuildCrystalTowerActivityData::has_activity_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_activity_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCrystalTowerActivityData::clear_has_activity_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCrystalTowerActivityData::clear_activity_duration() {
  activity_duration_ = 0;
  clear_has_activity_duration();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::activity_duration() const {
  return activity_duration_;
}
inline void GuildCrystalTowerActivityData::set_activity_duration(::google::protobuf::int32 value) {
  set_has_activity_duration();
  activity_duration_ = value;
}

// optional int32 reward_count_down_sec = 5;
inline bool GuildCrystalTowerActivityData::has_reward_count_down_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_reward_count_down_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildCrystalTowerActivityData::clear_has_reward_count_down_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildCrystalTowerActivityData::clear_reward_count_down_sec() {
  reward_count_down_sec_ = 0;
  clear_has_reward_count_down_sec();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::reward_count_down_sec() const {
  return reward_count_down_sec_;
}
inline void GuildCrystalTowerActivityData::set_reward_count_down_sec(::google::protobuf::int32 value) {
  set_has_reward_count_down_sec();
  reward_count_down_sec_ = value;
}

// repeated int32 piece_count = 6;
inline int GuildCrystalTowerActivityData::piece_count_size() const {
  return piece_count_.size();
}
inline void GuildCrystalTowerActivityData::clear_piece_count() {
  piece_count_.Clear();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::piece_count(int index) const {
  return piece_count_.Get(index);
}
inline void GuildCrystalTowerActivityData::set_piece_count(int index, ::google::protobuf::int32 value) {
  piece_count_.Set(index, value);
}
inline void GuildCrystalTowerActivityData::add_piece_count(::google::protobuf::int32 value) {
  piece_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildCrystalTowerActivityData::piece_count() const {
  return piece_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildCrystalTowerActivityData::mutable_piece_count() {
  return &piece_count_;
}

// repeated .protocols.common.GuildCrystalReward rewards = 7;
inline int GuildCrystalTowerActivityData::rewards_size() const {
  return rewards_.size();
}
inline void GuildCrystalTowerActivityData::clear_rewards() {
  rewards_.Clear();
}
inline const ::protocols::common::GuildCrystalReward& GuildCrystalTowerActivityData::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::protocols::common::GuildCrystalReward* GuildCrystalTowerActivityData::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::protocols::common::GuildCrystalReward* GuildCrystalTowerActivityData::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildCrystalReward >&
GuildCrystalTowerActivityData::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildCrystalReward >*
GuildCrystalTowerActivityData::mutable_rewards() {
  return &rewards_;
}

// optional int32 tower_level = 8;
inline bool GuildCrystalTowerActivityData::has_tower_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_tower_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildCrystalTowerActivityData::clear_has_tower_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildCrystalTowerActivityData::clear_tower_level() {
  tower_level_ = 0;
  clear_has_tower_level();
}
inline ::google::protobuf::int32 GuildCrystalTowerActivityData::tower_level() const {
  return tower_level_;
}
inline void GuildCrystalTowerActivityData::set_tower_level(::google::protobuf::int32 value) {
  set_has_tower_level();
  tower_level_ = value;
}

// optional .protocols.common.ActivityStatus activity_status = 9;
inline bool GuildCrystalTowerActivityData::has_activity_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildCrystalTowerActivityData::set_has_activity_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildCrystalTowerActivityData::clear_has_activity_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildCrystalTowerActivityData::clear_activity_status() {
  activity_status_ = 0;
  clear_has_activity_status();
}
inline protocols::common::ActivityStatus GuildCrystalTowerActivityData::activity_status() const {
  return static_cast< protocols::common::ActivityStatus >(activity_status_);
}
inline void GuildCrystalTowerActivityData::set_activity_status(protocols::common::ActivityStatus value) {
  GOOGLE_DCHECK(protocols::common::ActivityStatus_IsValid(value));
  set_has_activity_status();
  activity_status_ = value;
}

// -------------------------------------------------------------------

// PlayerPosBeforeInstance

// required int32 map_id = 1;
inline bool PlayerPosBeforeInstance::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPosBeforeInstance::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPosBeforeInstance::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPosBeforeInstance::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 PlayerPosBeforeInstance::map_id() const {
  return map_id_;
}
inline void PlayerPosBeforeInstance::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// required int32 map_x = 2;
inline bool PlayerPosBeforeInstance::has_map_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPosBeforeInstance::set_has_map_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPosBeforeInstance::clear_has_map_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPosBeforeInstance::clear_map_x() {
  map_x_ = 0;
  clear_has_map_x();
}
inline ::google::protobuf::int32 PlayerPosBeforeInstance::map_x() const {
  return map_x_;
}
inline void PlayerPosBeforeInstance::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// required int32 map_y = 3;
inline bool PlayerPosBeforeInstance::has_map_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPosBeforeInstance::set_has_map_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPosBeforeInstance::clear_has_map_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPosBeforeInstance::clear_map_y() {
  map_y_ = 0;
  clear_has_map_y();
}
inline ::google::protobuf::int32 PlayerPosBeforeInstance::map_y() const {
  return map_y_;
}
inline void PlayerPosBeforeInstance::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// -------------------------------------------------------------------

// TeamMemberInfo

// required int32 seq_no = 1;
inline bool TeamMemberInfo::has_seq_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMemberInfo::set_has_seq_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMemberInfo::clear_has_seq_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMemberInfo::clear_seq_no() {
  seq_no_ = 0;
  clear_has_seq_no();
}
inline ::google::protobuf::int32 TeamMemberInfo::seq_no() const {
  return seq_no_;
}
inline void TeamMemberInfo::set_seq_no(::google::protobuf::int32 value) {
  set_has_seq_no();
  seq_no_ = value;
}

// required int64 guid = 2;
inline bool TeamMemberInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMemberInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMemberInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMemberInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 TeamMemberInfo::guid() const {
  return guid_;
}
inline void TeamMemberInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string name = 3;
inline bool TeamMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamMemberInfo::name() const {
  return *name_;
}
inline void TeamMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TeamMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 is_online = 4;
inline bool TeamMemberInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamMemberInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamMemberInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamMemberInfo::clear_is_online() {
  is_online_ = 0;
  clear_has_is_online();
}
inline ::google::protobuf::int32 TeamMemberInfo::is_online() const {
  return is_online_;
}
inline void TeamMemberInfo::set_is_online(::google::protobuf::int32 value) {
  set_has_is_online();
  is_online_ = value;
}

// optional .protocols.common.Profession job = 5;
inline bool TeamMemberInfo::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamMemberInfo::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamMemberInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamMemberInfo::clear_job() {
  job_ = 1;
  clear_has_job();
}
inline protocols::common::Profession TeamMemberInfo::job() const {
  return static_cast< protocols::common::Profession >(job_);
}
inline void TeamMemberInfo::set_job(protocols::common::Profession value) {
  GOOGLE_DCHECK(protocols::common::Profession_IsValid(value));
  set_has_job();
  job_ = value;
}

// optional int32 level = 6;
inline bool TeamMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamMemberInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TeamMemberInfo::level() const {
  return level_;
}
inline void TeamMemberInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 fight_capacity = 8;
inline bool TeamMemberInfo::has_fight_capacity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamMemberInfo::set_has_fight_capacity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamMemberInfo::clear_has_fight_capacity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamMemberInfo::clear_fight_capacity() {
  fight_capacity_ = 0;
  clear_has_fight_capacity();
}
inline ::google::protobuf::int32 TeamMemberInfo::fight_capacity() const {
  return fight_capacity_;
}
inline void TeamMemberInfo::set_fight_capacity(::google::protobuf::int32 value) {
  set_has_fight_capacity();
  fight_capacity_ = value;
}

// repeated .protocols.common.YinglingInfo yingling_info = 7;
inline int TeamMemberInfo::yingling_info_size() const {
  return yingling_info_.size();
}
inline void TeamMemberInfo::clear_yingling_info() {
  yingling_info_.Clear();
}
inline const ::protocols::common::YinglingInfo& TeamMemberInfo::yingling_info(int index) const {
  return yingling_info_.Get(index);
}
inline ::protocols::common::YinglingInfo* TeamMemberInfo::mutable_yingling_info(int index) {
  return yingling_info_.Mutable(index);
}
inline ::protocols::common::YinglingInfo* TeamMemberInfo::add_yingling_info() {
  return yingling_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingInfo >&
TeamMemberInfo::yingling_info() const {
  return yingling_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingInfo >*
TeamMemberInfo::mutable_yingling_info() {
  return &yingling_info_;
}

// optional bool is_ready = 9;
inline bool TeamMemberInfo::has_is_ready() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamMemberInfo::set_has_is_ready() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamMemberInfo::clear_has_is_ready() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamMemberInfo::clear_is_ready() {
  is_ready_ = false;
  clear_has_is_ready();
}
inline bool TeamMemberInfo::is_ready() const {
  return is_ready_;
}
inline void TeamMemberInfo::set_is_ready(bool value) {
  set_has_is_ready();
  is_ready_ = value;
}

// optional int32 wing_id = 10;
inline bool TeamMemberInfo::has_wing_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamMemberInfo::set_has_wing_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamMemberInfo::clear_has_wing_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamMemberInfo::clear_wing_id() {
  wing_id_ = 0;
  clear_has_wing_id();
}
inline ::google::protobuf::int32 TeamMemberInfo::wing_id() const {
  return wing_id_;
}
inline void TeamMemberInfo::set_wing_id(::google::protobuf::int32 value) {
  set_has_wing_id();
  wing_id_ = value;
}

// optional int32 titile = 11;
inline bool TeamMemberInfo::has_titile() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TeamMemberInfo::set_has_titile() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TeamMemberInfo::clear_has_titile() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TeamMemberInfo::clear_titile() {
  titile_ = 0;
  clear_has_titile();
}
inline ::google::protobuf::int32 TeamMemberInfo::titile() const {
  return titile_;
}
inline void TeamMemberInfo::set_titile(::google::protobuf::int32 value) {
  set_has_titile();
  titile_ = value;
}

// -------------------------------------------------------------------

// TeamInfo

// required int32 team_id = 1;
inline bool TeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 TeamInfo::team_id() const {
  return team_id_;
}
inline void TeamInfo::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// required string name = 2;
inline bool TeamInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamInfo::name() const {
  return *name_;
}
inline void TeamInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TeamInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TeamInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 leader_guid = 3;
inline bool TeamInfo::has_leader_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfo::set_has_leader_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfo::clear_has_leader_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfo::clear_leader_guid() {
  leader_guid_ = GOOGLE_LONGLONG(0);
  clear_has_leader_guid();
}
inline ::google::protobuf::int64 TeamInfo::leader_guid() const {
  return leader_guid_;
}
inline void TeamInfo::set_leader_guid(::google::protobuf::int64 value) {
  set_has_leader_guid();
  leader_guid_ = value;
}

// required int32 team_member_limit = 4;
inline bool TeamInfo::has_team_member_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_team_member_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_team_member_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfo::clear_team_member_limit() {
  team_member_limit_ = 0;
  clear_has_team_member_limit();
}
inline ::google::protobuf::int32 TeamInfo::team_member_limit() const {
  return team_member_limit_;
}
inline void TeamInfo::set_team_member_limit(::google::protobuf::int32 value) {
  set_has_team_member_limit();
  team_member_limit_ = value;
}

// optional int32 cur_team_member = 5;
inline bool TeamInfo::has_cur_team_member() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_cur_team_member() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_cur_team_member() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfo::clear_cur_team_member() {
  cur_team_member_ = 0;
  clear_has_cur_team_member();
}
inline ::google::protobuf::int32 TeamInfo::cur_team_member() const {
  return cur_team_member_;
}
inline void TeamInfo::set_cur_team_member(::google::protobuf::int32 value) {
  set_has_cur_team_member();
  cur_team_member_ = value;
}

// optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
inline bool TeamInfo::has_objective() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamInfo::set_has_objective() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamInfo::clear_has_objective() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamInfo::clear_objective() {
  objective_ = 1;
  clear_has_objective();
}
inline protocols::common::TEAM_OBJECTIVE_TYPE TeamInfo::objective() const {
  return static_cast< protocols::common::TEAM_OBJECTIVE_TYPE >(objective_);
}
inline void TeamInfo::set_objective(protocols::common::TEAM_OBJECTIVE_TYPE value) {
  GOOGLE_DCHECK(protocols::common::TEAM_OBJECTIVE_TYPE_IsValid(value));
  set_has_objective();
  objective_ = value;
}

// optional int32 custom_pass_id = 7;
inline bool TeamInfo::has_custom_pass_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeamInfo::set_has_custom_pass_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeamInfo::clear_has_custom_pass_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeamInfo::clear_custom_pass_id() {
  custom_pass_id_ = 0;
  clear_has_custom_pass_id();
}
inline ::google::protobuf::int32 TeamInfo::custom_pass_id() const {
  return custom_pass_id_;
}
inline void TeamInfo::set_custom_pass_id(::google::protobuf::int32 value) {
  set_has_custom_pass_id();
  custom_pass_id_ = value;
}

// optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
inline bool TeamInfo::has_difficult_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeamInfo::set_has_difficult_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeamInfo::clear_has_difficult_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeamInfo::clear_difficult_level() {
  difficult_level_ = 1;
  clear_has_difficult_level();
}
inline protocols::common::DIFFICULTY_LEVEL TeamInfo::difficult_level() const {
  return static_cast< protocols::common::DIFFICULTY_LEVEL >(difficult_level_);
}
inline void TeamInfo::set_difficult_level(protocols::common::DIFFICULTY_LEVEL value) {
  GOOGLE_DCHECK(protocols::common::DIFFICULTY_LEVEL_IsValid(value));
  set_has_difficult_level();
  difficult_level_ = value;
}

// optional int32 min_level_required = 9;
inline bool TeamInfo::has_min_level_required() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeamInfo::set_has_min_level_required() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeamInfo::clear_has_min_level_required() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeamInfo::clear_min_level_required() {
  min_level_required_ = 0;
  clear_has_min_level_required();
}
inline ::google::protobuf::int32 TeamInfo::min_level_required() const {
  return min_level_required_;
}
inline void TeamInfo::set_min_level_required(::google::protobuf::int32 value) {
  set_has_min_level_required();
  min_level_required_ = value;
}

// optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
inline bool TeamInfo::has_add_member_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TeamInfo::set_has_add_member_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TeamInfo::clear_has_add_member_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TeamInfo::clear_add_member_type() {
  add_member_type_ = 1;
  clear_has_add_member_type();
}
inline protocols::common::TEAM_ADD_TYPE TeamInfo::add_member_type() const {
  return static_cast< protocols::common::TEAM_ADD_TYPE >(add_member_type_);
}
inline void TeamInfo::set_add_member_type(protocols::common::TEAM_ADD_TYPE value) {
  GOOGLE_DCHECK(protocols::common::TEAM_ADD_TYPE_IsValid(value));
  set_has_add_member_type();
  add_member_type_ = value;
}

// repeated .protocols.common.TeamMemberInfo team_member = 11;
inline int TeamInfo::team_member_size() const {
  return team_member_.size();
}
inline void TeamInfo::clear_team_member() {
  team_member_.Clear();
}
inline const ::protocols::common::TeamMemberInfo& TeamInfo::team_member(int index) const {
  return team_member_.Get(index);
}
inline ::protocols::common::TeamMemberInfo* TeamInfo::mutable_team_member(int index) {
  return team_member_.Mutable(index);
}
inline ::protocols::common::TeamMemberInfo* TeamInfo::add_team_member() {
  return team_member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TeamMemberInfo >&
TeamInfo::team_member() const {
  return team_member_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TeamMemberInfo >*
TeamInfo::mutable_team_member() {
  return &team_member_;
}

// optional int32 team_battle_skill_id = 13;
inline bool TeamInfo::has_team_battle_skill_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TeamInfo::set_has_team_battle_skill_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TeamInfo::clear_has_team_battle_skill_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TeamInfo::clear_team_battle_skill_id() {
  team_battle_skill_id_ = 0;
  clear_has_team_battle_skill_id();
}
inline ::google::protobuf::int32 TeamInfo::team_battle_skill_id() const {
  return team_battle_skill_id_;
}
inline void TeamInfo::set_team_battle_skill_id(::google::protobuf::int32 value) {
  set_has_team_battle_skill_id();
  team_battle_skill_id_ = value;
}

// repeated .protocols.common.FighterInfo fighter_info = 14;
inline int TeamInfo::fighter_info_size() const {
  return fighter_info_.size();
}
inline void TeamInfo::clear_fighter_info() {
  fighter_info_.Clear();
}
inline const ::protocols::common::FighterInfo& TeamInfo::fighter_info(int index) const {
  return fighter_info_.Get(index);
}
inline ::protocols::common::FighterInfo* TeamInfo::mutable_fighter_info(int index) {
  return fighter_info_.Mutable(index);
}
inline ::protocols::common::FighterInfo* TeamInfo::add_fighter_info() {
  return fighter_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >&
TeamInfo::fighter_info() const {
  return fighter_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::FighterInfo >*
TeamInfo::mutable_fighter_info() {
  return &fighter_info_;
}

// optional int32 team_create_type = 15 [default = 1];
inline bool TeamInfo::has_team_create_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TeamInfo::set_has_team_create_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TeamInfo::clear_has_team_create_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TeamInfo::clear_team_create_type() {
  team_create_type_ = 1;
  clear_has_team_create_type();
}
inline ::google::protobuf::int32 TeamInfo::team_create_type() const {
  return team_create_type_;
}
inline void TeamInfo::set_team_create_type(::google::protobuf::int32 value) {
  set_has_team_create_type();
  team_create_type_ = value;
}

// -------------------------------------------------------------------

// CoolDown

// required int32 type = 1;
inline bool CoolDown::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoolDown::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoolDown::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoolDown::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CoolDown::type() const {
  return type_;
}
inline void CoolDown::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 sec = 2;
inline bool CoolDown::has_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoolDown::set_has_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoolDown::clear_has_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoolDown::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 CoolDown::sec() const {
  return sec_;
}
inline void CoolDown::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// -------------------------------------------------------------------

// RoleCoolDownPb

// repeated .protocols.common.CoolDown cool_down = 2;
inline int RoleCoolDownPb::cool_down_size() const {
  return cool_down_.size();
}
inline void RoleCoolDownPb::clear_cool_down() {
  cool_down_.Clear();
}
inline const ::protocols::common::CoolDown& RoleCoolDownPb::cool_down(int index) const {
  return cool_down_.Get(index);
}
inline ::protocols::common::CoolDown* RoleCoolDownPb::mutable_cool_down(int index) {
  return cool_down_.Mutable(index);
}
inline ::protocols::common::CoolDown* RoleCoolDownPb::add_cool_down() {
  return cool_down_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::CoolDown >&
RoleCoolDownPb::cool_down() const {
  return cool_down_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::CoolDown >*
RoleCoolDownPb::mutable_cool_down() {
  return &cool_down_;
}

// -------------------------------------------------------------------

// DailyCountLimit

// required int32 limit_type = 1;
inline bool DailyCountLimit::has_limit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyCountLimit::set_has_limit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyCountLimit::clear_has_limit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyCountLimit::clear_limit_type() {
  limit_type_ = 0;
  clear_has_limit_type();
}
inline ::google::protobuf::int32 DailyCountLimit::limit_type() const {
  return limit_type_;
}
inline void DailyCountLimit::set_limit_type(::google::protobuf::int32 value) {
  set_has_limit_type();
  limit_type_ = value;
}

// required int32 limit_count = 2;
inline bool DailyCountLimit::has_limit_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyCountLimit::set_has_limit_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyCountLimit::clear_has_limit_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyCountLimit::clear_limit_count() {
  limit_count_ = 0;
  clear_has_limit_count();
}
inline ::google::protobuf::int32 DailyCountLimit::limit_count() const {
  return limit_count_;
}
inline void DailyCountLimit::set_limit_count(::google::protobuf::int32 value) {
  set_has_limit_count();
  limit_count_ = value;
}

// required int32 current_count = 3;
inline bool DailyCountLimit::has_current_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyCountLimit::set_has_current_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyCountLimit::clear_has_current_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyCountLimit::clear_current_count() {
  current_count_ = 0;
  clear_has_current_count();
}
inline ::google::protobuf::int32 DailyCountLimit::current_count() const {
  return current_count_;
}
inline void DailyCountLimit::set_current_count(::google::protobuf::int32 value) {
  set_has_current_count();
  current_count_ = value;
}

// required int32 limit_purchase_count = 4;
inline bool DailyCountLimit::has_limit_purchase_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyCountLimit::set_has_limit_purchase_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyCountLimit::clear_has_limit_purchase_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyCountLimit::clear_limit_purchase_count() {
  limit_purchase_count_ = 0;
  clear_has_limit_purchase_count();
}
inline ::google::protobuf::int32 DailyCountLimit::limit_purchase_count() const {
  return limit_purchase_count_;
}
inline void DailyCountLimit::set_limit_purchase_count(::google::protobuf::int32 value) {
  set_has_limit_purchase_count();
  limit_purchase_count_ = value;
}

// required int32 current_purchase_count = 5;
inline bool DailyCountLimit::has_current_purchase_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyCountLimit::set_has_current_purchase_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyCountLimit::clear_has_current_purchase_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyCountLimit::clear_current_purchase_count() {
  current_purchase_count_ = 0;
  clear_has_current_purchase_count();
}
inline ::google::protobuf::int32 DailyCountLimit::current_purchase_count() const {
  return current_purchase_count_;
}
inline void DailyCountLimit::set_current_purchase_count(::google::protobuf::int32 value) {
  set_has_current_purchase_count();
  current_purchase_count_ = value;
}

// optional int32 update_time = 6;
inline bool DailyCountLimit::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DailyCountLimit::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DailyCountLimit::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DailyCountLimit::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
inline ::google::protobuf::int32 DailyCountLimit::update_time() const {
  return update_time_;
}
inline void DailyCountLimit::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
}

// optional int32 add_count = 7;
inline bool DailyCountLimit::has_add_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DailyCountLimit::set_has_add_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DailyCountLimit::clear_has_add_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DailyCountLimit::clear_add_count() {
  add_count_ = 0;
  clear_has_add_count();
}
inline ::google::protobuf::int32 DailyCountLimit::add_count() const {
  return add_count_;
}
inline void DailyCountLimit::set_add_count(::google::protobuf::int32 value) {
  set_has_add_count();
  add_count_ = value;
}

// -------------------------------------------------------------------

// RoleDailyLimitPb

// repeated .protocols.common.DailyCountLimit daily_limit = 1;
inline int RoleDailyLimitPb::daily_limit_size() const {
  return daily_limit_.size();
}
inline void RoleDailyLimitPb::clear_daily_limit() {
  daily_limit_.Clear();
}
inline const ::protocols::common::DailyCountLimit& RoleDailyLimitPb::daily_limit(int index) const {
  return daily_limit_.Get(index);
}
inline ::protocols::common::DailyCountLimit* RoleDailyLimitPb::mutable_daily_limit(int index) {
  return daily_limit_.Mutable(index);
}
inline ::protocols::common::DailyCountLimit* RoleDailyLimitPb::add_daily_limit() {
  return daily_limit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyCountLimit >&
RoleDailyLimitPb::daily_limit() const {
  return daily_limit_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyCountLimit >*
RoleDailyLimitPb::mutable_daily_limit() {
  return &daily_limit_;
}

// -------------------------------------------------------------------

// DBRoleLimitDataPb

// optional .protocols.common.RoleCoolDownPb cool_down = 1;
inline bool DBRoleLimitDataPb::has_cool_down() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBRoleLimitDataPb::set_has_cool_down() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBRoleLimitDataPb::clear_has_cool_down() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBRoleLimitDataPb::clear_cool_down() {
  if (cool_down_ != NULL) cool_down_->::protocols::common::RoleCoolDownPb::Clear();
  clear_has_cool_down();
}
inline const ::protocols::common::RoleCoolDownPb& DBRoleLimitDataPb::cool_down() const {
  return cool_down_ != NULL ? *cool_down_ : *default_instance_->cool_down_;
}
inline ::protocols::common::RoleCoolDownPb* DBRoleLimitDataPb::mutable_cool_down() {
  set_has_cool_down();
  if (cool_down_ == NULL) cool_down_ = new ::protocols::common::RoleCoolDownPb;
  return cool_down_;
}
inline ::protocols::common::RoleCoolDownPb* DBRoleLimitDataPb::release_cool_down() {
  clear_has_cool_down();
  ::protocols::common::RoleCoolDownPb* temp = cool_down_;
  cool_down_ = NULL;
  return temp;
}

// optional .protocols.common.RoleDailyLimitPb count_limit = 2;
inline bool DBRoleLimitDataPb::has_count_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBRoleLimitDataPb::set_has_count_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBRoleLimitDataPb::clear_has_count_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBRoleLimitDataPb::clear_count_limit() {
  if (count_limit_ != NULL) count_limit_->::protocols::common::RoleDailyLimitPb::Clear();
  clear_has_count_limit();
}
inline const ::protocols::common::RoleDailyLimitPb& DBRoleLimitDataPb::count_limit() const {
  return count_limit_ != NULL ? *count_limit_ : *default_instance_->count_limit_;
}
inline ::protocols::common::RoleDailyLimitPb* DBRoleLimitDataPb::mutable_count_limit() {
  set_has_count_limit();
  if (count_limit_ == NULL) count_limit_ = new ::protocols::common::RoleDailyLimitPb;
  return count_limit_;
}
inline ::protocols::common::RoleDailyLimitPb* DBRoleLimitDataPb::release_count_limit() {
  clear_has_count_limit();
  ::protocols::common::RoleDailyLimitPb* temp = count_limit_;
  count_limit_ = NULL;
  return temp;
}

// optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
inline bool DBRoleLimitDataPb::has_hired_yingling_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBRoleLimitDataPb::set_has_hired_yingling_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBRoleLimitDataPb::clear_has_hired_yingling_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBRoleLimitDataPb::clear_hired_yingling_count() {
  if (hired_yingling_count_ != NULL) hired_yingling_count_->::protocols::common::RoleHiredYinglingCount::Clear();
  clear_has_hired_yingling_count();
}
inline const ::protocols::common::RoleHiredYinglingCount& DBRoleLimitDataPb::hired_yingling_count() const {
  return hired_yingling_count_ != NULL ? *hired_yingling_count_ : *default_instance_->hired_yingling_count_;
}
inline ::protocols::common::RoleHiredYinglingCount* DBRoleLimitDataPb::mutable_hired_yingling_count() {
  set_has_hired_yingling_count();
  if (hired_yingling_count_ == NULL) hired_yingling_count_ = new ::protocols::common::RoleHiredYinglingCount;
  return hired_yingling_count_;
}
inline ::protocols::common::RoleHiredYinglingCount* DBRoleLimitDataPb::release_hired_yingling_count() {
  clear_has_hired_yingling_count();
  ::protocols::common::RoleHiredYinglingCount* temp = hired_yingling_count_;
  hired_yingling_count_ = NULL;
  return temp;
}

// optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
inline bool DBRoleLimitDataPb::has_strength_equip_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBRoleLimitDataPb::set_has_strength_equip_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBRoleLimitDataPb::clear_has_strength_equip_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBRoleLimitDataPb::clear_strength_equip_count() {
  if (strength_equip_count_ != NULL) strength_equip_count_->::protocols::common::RoleStrengthEquipCount::Clear();
  clear_has_strength_equip_count();
}
inline const ::protocols::common::RoleStrengthEquipCount& DBRoleLimitDataPb::strength_equip_count() const {
  return strength_equip_count_ != NULL ? *strength_equip_count_ : *default_instance_->strength_equip_count_;
}
inline ::protocols::common::RoleStrengthEquipCount* DBRoleLimitDataPb::mutable_strength_equip_count() {
  set_has_strength_equip_count();
  if (strength_equip_count_ == NULL) strength_equip_count_ = new ::protocols::common::RoleStrengthEquipCount;
  return strength_equip_count_;
}
inline ::protocols::common::RoleStrengthEquipCount* DBRoleLimitDataPb::release_strength_equip_count() {
  clear_has_strength_equip_count();
  ::protocols::common::RoleStrengthEquipCount* temp = strength_equip_count_;
  strength_equip_count_ = NULL;
  return temp;
}

// optional int32 guild_contrib = 5;
inline bool DBRoleLimitDataPb::has_guild_contrib() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBRoleLimitDataPb::set_has_guild_contrib() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBRoleLimitDataPb::clear_has_guild_contrib() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBRoleLimitDataPb::clear_guild_contrib() {
  guild_contrib_ = 0;
  clear_has_guild_contrib();
}
inline ::google::protobuf::int32 DBRoleLimitDataPb::guild_contrib() const {
  return guild_contrib_;
}
inline void DBRoleLimitDataPb::set_guild_contrib(::google::protobuf::int32 value) {
  set_has_guild_contrib();
  guild_contrib_ = value;
}

// optional .protocols.common.YouLiMapData youli_data = 6;
inline bool DBRoleLimitDataPb::has_youli_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBRoleLimitDataPb::set_has_youli_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBRoleLimitDataPb::clear_has_youli_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBRoleLimitDataPb::clear_youli_data() {
  if (youli_data_ != NULL) youli_data_->::protocols::common::YouLiMapData::Clear();
  clear_has_youli_data();
}
inline const ::protocols::common::YouLiMapData& DBRoleLimitDataPb::youli_data() const {
  return youli_data_ != NULL ? *youli_data_ : *default_instance_->youli_data_;
}
inline ::protocols::common::YouLiMapData* DBRoleLimitDataPb::mutable_youli_data() {
  set_has_youli_data();
  if (youli_data_ == NULL) youli_data_ = new ::protocols::common::YouLiMapData;
  return youli_data_;
}
inline ::protocols::common::YouLiMapData* DBRoleLimitDataPb::release_youli_data() {
  clear_has_youli_data();
  ::protocols::common::YouLiMapData* temp = youli_data_;
  youli_data_ = NULL;
  return temp;
}

// optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
inline bool DBRoleLimitDataPb::has_yingling_combo_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBRoleLimitDataPb::set_has_yingling_combo_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBRoleLimitDataPb::clear_has_yingling_combo_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBRoleLimitDataPb::clear_yingling_combo_data() {
  if (yingling_combo_data_ != NULL) yingling_combo_data_->::protocols::common::YinglingComboStatus::Clear();
  clear_has_yingling_combo_data();
}
inline const ::protocols::common::YinglingComboStatus& DBRoleLimitDataPb::yingling_combo_data() const {
  return yingling_combo_data_ != NULL ? *yingling_combo_data_ : *default_instance_->yingling_combo_data_;
}
inline ::protocols::common::YinglingComboStatus* DBRoleLimitDataPb::mutable_yingling_combo_data() {
  set_has_yingling_combo_data();
  if (yingling_combo_data_ == NULL) yingling_combo_data_ = new ::protocols::common::YinglingComboStatus;
  return yingling_combo_data_;
}
inline ::protocols::common::YinglingComboStatus* DBRoleLimitDataPb::release_yingling_combo_data() {
  clear_has_yingling_combo_data();
  ::protocols::common::YinglingComboStatus* temp = yingling_combo_data_;
  yingling_combo_data_ = NULL;
  return temp;
}

// optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
inline bool DBRoleLimitDataPb::has_yingling_train_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBRoleLimitDataPb::set_has_yingling_train_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBRoleLimitDataPb::clear_has_yingling_train_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBRoleLimitDataPb::clear_yingling_train_status() {
  if (yingling_train_status_ != NULL) yingling_train_status_->::protocols::common::YinglingTrainStatus::Clear();
  clear_has_yingling_train_status();
}
inline const ::protocols::common::YinglingTrainStatus& DBRoleLimitDataPb::yingling_train_status() const {
  return yingling_train_status_ != NULL ? *yingling_train_status_ : *default_instance_->yingling_train_status_;
}
inline ::protocols::common::YinglingTrainStatus* DBRoleLimitDataPb::mutable_yingling_train_status() {
  set_has_yingling_train_status();
  if (yingling_train_status_ == NULL) yingling_train_status_ = new ::protocols::common::YinglingTrainStatus;
  return yingling_train_status_;
}
inline ::protocols::common::YinglingTrainStatus* DBRoleLimitDataPb::release_yingling_train_status() {
  clear_has_yingling_train_status();
  ::protocols::common::YinglingTrainStatus* temp = yingling_train_status_;
  yingling_train_status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// HiredYinglingCount

// required int32 quality = 1;
inline bool HiredYinglingCount::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HiredYinglingCount::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HiredYinglingCount::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HiredYinglingCount::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 HiredYinglingCount::quality() const {
  return quality_;
}
inline void HiredYinglingCount::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 count = 2;
inline bool HiredYinglingCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HiredYinglingCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HiredYinglingCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HiredYinglingCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 HiredYinglingCount::count() const {
  return count_;
}
inline void HiredYinglingCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// RoleHiredYinglingCount

// repeated .protocols.common.HiredYinglingCount data = 1;
inline int RoleHiredYinglingCount::data_size() const {
  return data_.size();
}
inline void RoleHiredYinglingCount::clear_data() {
  data_.Clear();
}
inline const ::protocols::common::HiredYinglingCount& RoleHiredYinglingCount::data(int index) const {
  return data_.Get(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
RoleHiredYinglingCount::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
RoleHiredYinglingCount::mutable_data() {
  return &data_;
}

// repeated int32 yingling_tid = 2;
inline int RoleHiredYinglingCount::yingling_tid_size() const {
  return yingling_tid_.size();
}
inline void RoleHiredYinglingCount::clear_yingling_tid() {
  yingling_tid_.Clear();
}
inline ::google::protobuf::int32 RoleHiredYinglingCount::yingling_tid(int index) const {
  return yingling_tid_.Get(index);
}
inline void RoleHiredYinglingCount::set_yingling_tid(int index, ::google::protobuf::int32 value) {
  yingling_tid_.Set(index, value);
}
inline void RoleHiredYinglingCount::add_yingling_tid(::google::protobuf::int32 value) {
  yingling_tid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoleHiredYinglingCount::yingling_tid() const {
  return yingling_tid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoleHiredYinglingCount::mutable_yingling_tid() {
  return &yingling_tid_;
}

// repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
inline int RoleHiredYinglingCount::yingling_pro_size() const {
  return yingling_pro_.size();
}
inline void RoleHiredYinglingCount::clear_yingling_pro() {
  yingling_pro_.Clear();
}
inline const ::protocols::common::HiredYinglingCount& RoleHiredYinglingCount::yingling_pro(int index) const {
  return yingling_pro_.Get(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::mutable_yingling_pro(int index) {
  return yingling_pro_.Mutable(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::add_yingling_pro() {
  return yingling_pro_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
RoleHiredYinglingCount::yingling_pro() const {
  return yingling_pro_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
RoleHiredYinglingCount::mutable_yingling_pro() {
  return &yingling_pro_;
}

// repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
inline int RoleHiredYinglingCount::yingling_quality_size() const {
  return yingling_quality_.size();
}
inline void RoleHiredYinglingCount::clear_yingling_quality() {
  yingling_quality_.Clear();
}
inline const ::protocols::common::HiredYinglingCount& RoleHiredYinglingCount::yingling_quality(int index) const {
  return yingling_quality_.Get(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::mutable_yingling_quality(int index) {
  return yingling_quality_.Mutable(index);
}
inline ::protocols::common::HiredYinglingCount* RoleHiredYinglingCount::add_yingling_quality() {
  return yingling_quality_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >&
RoleHiredYinglingCount::yingling_quality() const {
  return yingling_quality_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HiredYinglingCount >*
RoleHiredYinglingCount::mutable_yingling_quality() {
  return &yingling_quality_;
}

// -------------------------------------------------------------------

// StrengthEquipCount

// required int32 strength_level = 1;
inline bool StrengthEquipCount::has_strength_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrengthEquipCount::set_has_strength_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrengthEquipCount::clear_has_strength_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrengthEquipCount::clear_strength_level() {
  strength_level_ = 0;
  clear_has_strength_level();
}
inline ::google::protobuf::int32 StrengthEquipCount::strength_level() const {
  return strength_level_;
}
inline void StrengthEquipCount::set_strength_level(::google::protobuf::int32 value) {
  set_has_strength_level();
  strength_level_ = value;
}

// required int32 count = 2;
inline bool StrengthEquipCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrengthEquipCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrengthEquipCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrengthEquipCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 StrengthEquipCount::count() const {
  return count_;
}
inline void StrengthEquipCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// RoleStrengthEquipCount

// repeated .protocols.common.StrengthEquipCount data = 1;
inline int RoleStrengthEquipCount::data_size() const {
  return data_.size();
}
inline void RoleStrengthEquipCount::clear_data() {
  data_.Clear();
}
inline const ::protocols::common::StrengthEquipCount& RoleStrengthEquipCount::data(int index) const {
  return data_.Get(index);
}
inline ::protocols::common::StrengthEquipCount* RoleStrengthEquipCount::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protocols::common::StrengthEquipCount* RoleStrengthEquipCount::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::StrengthEquipCount >&
RoleStrengthEquipCount::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::StrengthEquipCount >*
RoleStrengthEquipCount::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// DailyQuest

// required int32 quest_id = 1;
inline bool DailyQuest::has_quest_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyQuest::set_has_quest_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyQuest::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyQuest::clear_quest_id() {
  quest_id_ = 0;
  clear_has_quest_id();
}
inline ::google::protobuf::int32 DailyQuest::quest_id() const {
  return quest_id_;
}
inline void DailyQuest::set_quest_id(::google::protobuf::int32 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// required int32 quality = 2;
inline bool DailyQuest::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyQuest::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyQuest::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyQuest::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 DailyQuest::quality() const {
  return quality_;
}
inline void DailyQuest::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// optional int32 status = 3;
inline bool DailyQuest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyQuest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyQuest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyQuest::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DailyQuest::status() const {
  return status_;
}
inline void DailyQuest::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 category = 4;
inline bool DailyQuest::has_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyQuest::set_has_category() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyQuest::clear_has_category() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyQuest::clear_category() {
  category_ = 0;
  clear_has_category();
}
inline ::google::protobuf::int32 DailyQuest::category() const {
  return category_;
}
inline void DailyQuest::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
}

// optional int32 reward_exp = 5;
inline bool DailyQuest::has_reward_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyQuest::set_has_reward_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyQuest::clear_has_reward_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyQuest::clear_reward_exp() {
  reward_exp_ = 0;
  clear_has_reward_exp();
}
inline ::google::protobuf::int32 DailyQuest::reward_exp() const {
  return reward_exp_;
}
inline void DailyQuest::set_reward_exp(::google::protobuf::int32 value) {
  set_has_reward_exp();
  reward_exp_ = value;
}

// optional int32 reward_coin = 6;
inline bool DailyQuest::has_reward_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DailyQuest::set_has_reward_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DailyQuest::clear_has_reward_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DailyQuest::clear_reward_coin() {
  reward_coin_ = 0;
  clear_has_reward_coin();
}
inline ::google::protobuf::int32 DailyQuest::reward_coin() const {
  return reward_coin_;
}
inline void DailyQuest::set_reward_coin(::google::protobuf::int32 value) {
  set_has_reward_coin();
  reward_coin_ = value;
}

// -------------------------------------------------------------------

// DailyQuestPb

// repeated .protocols.common.DailyQuest daily_quests = 1;
inline int DailyQuestPb::daily_quests_size() const {
  return daily_quests_.size();
}
inline void DailyQuestPb::clear_daily_quests() {
  daily_quests_.Clear();
}
inline const ::protocols::common::DailyQuest& DailyQuestPb::daily_quests(int index) const {
  return daily_quests_.Get(index);
}
inline ::protocols::common::DailyQuest* DailyQuestPb::mutable_daily_quests(int index) {
  return daily_quests_.Mutable(index);
}
inline ::protocols::common::DailyQuest* DailyQuestPb::add_daily_quests() {
  return daily_quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >&
DailyQuestPb::daily_quests() const {
  return daily_quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >*
DailyQuestPb::mutable_daily_quests() {
  return &daily_quests_;
}

// repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
inline int DailyQuestPb::accepted_daily_quests_size() const {
  return accepted_daily_quests_.size();
}
inline void DailyQuestPb::clear_accepted_daily_quests() {
  accepted_daily_quests_.Clear();
}
inline const ::protocols::common::DailyQuest& DailyQuestPb::accepted_daily_quests(int index) const {
  return accepted_daily_quests_.Get(index);
}
inline ::protocols::common::DailyQuest* DailyQuestPb::mutable_accepted_daily_quests(int index) {
  return accepted_daily_quests_.Mutable(index);
}
inline ::protocols::common::DailyQuest* DailyQuestPb::add_accepted_daily_quests() {
  return accepted_daily_quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >&
DailyQuestPb::accepted_daily_quests() const {
  return accepted_daily_quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::DailyQuest >*
DailyQuestPb::mutable_accepted_daily_quests() {
  return &accepted_daily_quests_;
}

// optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
inline bool DailyQuestPb::has_xunluo_quest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyQuestPb::set_has_xunluo_quest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyQuestPb::clear_has_xunluo_quest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyQuestPb::clear_xunluo_quest() {
  if (xunluo_quest_ != NULL) xunluo_quest_->::protocols::common::XunluoQuestPb::Clear();
  clear_has_xunluo_quest();
}
inline const ::protocols::common::XunluoQuestPb& DailyQuestPb::xunluo_quest() const {
  return xunluo_quest_ != NULL ? *xunluo_quest_ : *default_instance_->xunluo_quest_;
}
inline ::protocols::common::XunluoQuestPb* DailyQuestPb::mutable_xunluo_quest() {
  set_has_xunluo_quest();
  if (xunluo_quest_ == NULL) xunluo_quest_ = new ::protocols::common::XunluoQuestPb;
  return xunluo_quest_;
}
inline ::protocols::common::XunluoQuestPb* DailyQuestPb::release_xunluo_quest() {
  clear_has_xunluo_quest();
  ::protocols::common::XunluoQuestPb* temp = xunluo_quest_;
  xunluo_quest_ = NULL;
  return temp;
}

// optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
inline bool DailyQuestPb::has_guild_circle_quest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyQuestPb::set_has_guild_circle_quest() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyQuestPb::clear_has_guild_circle_quest() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyQuestPb::clear_guild_circle_quest() {
  if (guild_circle_quest_ != NULL) guild_circle_quest_->::protocols::common::GuildCircleQuestPb::Clear();
  clear_has_guild_circle_quest();
}
inline const ::protocols::common::GuildCircleQuestPb& DailyQuestPb::guild_circle_quest() const {
  return guild_circle_quest_ != NULL ? *guild_circle_quest_ : *default_instance_->guild_circle_quest_;
}
inline ::protocols::common::GuildCircleQuestPb* DailyQuestPb::mutable_guild_circle_quest() {
  set_has_guild_circle_quest();
  if (guild_circle_quest_ == NULL) guild_circle_quest_ = new ::protocols::common::GuildCircleQuestPb;
  return guild_circle_quest_;
}
inline ::protocols::common::GuildCircleQuestPb* DailyQuestPb::release_guild_circle_quest() {
  clear_has_guild_circle_quest();
  ::protocols::common::GuildCircleQuestPb* temp = guild_circle_quest_;
  guild_circle_quest_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// XunluoQuestPb

// optional int32 cur_circle_index = 3;
inline bool XunluoQuestPb::has_cur_circle_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XunluoQuestPb::set_has_cur_circle_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void XunluoQuestPb::clear_has_cur_circle_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void XunluoQuestPb::clear_cur_circle_index() {
  cur_circle_index_ = 0;
  clear_has_cur_circle_index();
}
inline ::google::protobuf::int32 XunluoQuestPb::cur_circle_index() const {
  return cur_circle_index_;
}
inline void XunluoQuestPb::set_cur_circle_index(::google::protobuf::int32 value) {
  set_has_cur_circle_index();
  cur_circle_index_ = value;
}

// optional int32 xunluo_quest_id = 4;
inline bool XunluoQuestPb::has_xunluo_quest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XunluoQuestPb::set_has_xunluo_quest_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void XunluoQuestPb::clear_has_xunluo_quest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void XunluoQuestPb::clear_xunluo_quest_id() {
  xunluo_quest_id_ = 0;
  clear_has_xunluo_quest_id();
}
inline ::google::protobuf::int32 XunluoQuestPb::xunluo_quest_id() const {
  return xunluo_quest_id_;
}
inline void XunluoQuestPb::set_xunluo_quest_id(::google::protobuf::int32 value) {
  set_has_xunluo_quest_id();
  xunluo_quest_id_ = value;
}

// optional int32 xunluo_reward_exp = 5;
inline bool XunluoQuestPb::has_xunluo_reward_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XunluoQuestPb::set_has_xunluo_reward_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void XunluoQuestPb::clear_has_xunluo_reward_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void XunluoQuestPb::clear_xunluo_reward_exp() {
  xunluo_reward_exp_ = 0;
  clear_has_xunluo_reward_exp();
}
inline ::google::protobuf::int32 XunluoQuestPb::xunluo_reward_exp() const {
  return xunluo_reward_exp_;
}
inline void XunluoQuestPb::set_xunluo_reward_exp(::google::protobuf::int32 value) {
  set_has_xunluo_reward_exp();
  xunluo_reward_exp_ = value;
}

// optional int32 xunluo_reward_coin = 6;
inline bool XunluoQuestPb::has_xunluo_reward_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void XunluoQuestPb::set_has_xunluo_reward_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void XunluoQuestPb::clear_has_xunluo_reward_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void XunluoQuestPb::clear_xunluo_reward_coin() {
  xunluo_reward_coin_ = 0;
  clear_has_xunluo_reward_coin();
}
inline ::google::protobuf::int32 XunluoQuestPb::xunluo_reward_coin() const {
  return xunluo_reward_coin_;
}
inline void XunluoQuestPb::set_xunluo_reward_coin(::google::protobuf::int32 value) {
  set_has_xunluo_reward_coin();
  xunluo_reward_coin_ = value;
}

// -------------------------------------------------------------------

// GuildCircleQuestPb

// optional int32 cur_circle_index = 1;
inline bool GuildCircleQuestPb::has_cur_circle_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCircleQuestPb::set_has_cur_circle_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCircleQuestPb::clear_has_cur_circle_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCircleQuestPb::clear_cur_circle_index() {
  cur_circle_index_ = 0;
  clear_has_cur_circle_index();
}
inline ::google::protobuf::int32 GuildCircleQuestPb::cur_circle_index() const {
  return cur_circle_index_;
}
inline void GuildCircleQuestPb::set_cur_circle_index(::google::protobuf::int32 value) {
  set_has_cur_circle_index();
  cur_circle_index_ = value;
}

// optional int32 quest_id = 2;
inline bool GuildCircleQuestPb::has_quest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCircleQuestPb::set_has_quest_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCircleQuestPb::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCircleQuestPb::clear_quest_id() {
  quest_id_ = 0;
  clear_has_quest_id();
}
inline ::google::protobuf::int32 GuildCircleQuestPb::quest_id() const {
  return quest_id_;
}
inline void GuildCircleQuestPb::set_quest_id(::google::protobuf::int32 value) {
  set_has_quest_id();
  quest_id_ = value;
}

// -------------------------------------------------------------------

// PlayerFlagPb

// required int32 type = 1;
inline bool PlayerFlagPb::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerFlagPb::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerFlagPb::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerFlagPb::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlayerFlagPb::type() const {
  return type_;
}
inline void PlayerFlagPb::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 value = 2;
inline bool PlayerFlagPb::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerFlagPb::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerFlagPb::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerFlagPb::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PlayerFlagPb::value() const {
  return value_;
}
inline void PlayerFlagPb::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PlayerFlagDataPb

// repeated .protocols.common.PlayerFlagPb data = 1;
inline int PlayerFlagDataPb::data_size() const {
  return data_.size();
}
inline void PlayerFlagDataPb::clear_data() {
  data_.Clear();
}
inline const ::protocols::common::PlayerFlagPb& PlayerFlagDataPb::data(int index) const {
  return data_.Get(index);
}
inline ::protocols::common::PlayerFlagPb* PlayerFlagDataPb::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::protocols::common::PlayerFlagPb* PlayerFlagDataPb::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerFlagPb >&
PlayerFlagDataPb::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerFlagPb >*
PlayerFlagDataPb::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// TrainAttribute

// optional int64 guid = 1;
inline bool TrainAttribute::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrainAttribute::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrainAttribute::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrainAttribute::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 TrainAttribute::guid() const {
  return guid_;
}
inline void TrainAttribute::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// repeated .protocols.common.PBIntPair train_attribute = 2;
inline int TrainAttribute::train_attribute_size() const {
  return train_attribute_.size();
}
inline void TrainAttribute::clear_train_attribute() {
  train_attribute_.Clear();
}
inline const ::protocols::common::PBIntPair& TrainAttribute::train_attribute(int index) const {
  return train_attribute_.Get(index);
}
inline ::protocols::common::PBIntPair* TrainAttribute::mutable_train_attribute(int index) {
  return train_attribute_.Mutable(index);
}
inline ::protocols::common::PBIntPair* TrainAttribute::add_train_attribute() {
  return train_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >&
TrainAttribute::train_attribute() const {
  return train_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >*
TrainAttribute::mutable_train_attribute() {
  return &train_attribute_;
}

// repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
inline int TrainAttribute::unsave_train_attribute_size() const {
  return unsave_train_attribute_.size();
}
inline void TrainAttribute::clear_unsave_train_attribute() {
  unsave_train_attribute_.Clear();
}
inline const ::protocols::common::PBIntPair& TrainAttribute::unsave_train_attribute(int index) const {
  return unsave_train_attribute_.Get(index);
}
inline ::protocols::common::PBIntPair* TrainAttribute::mutable_unsave_train_attribute(int index) {
  return unsave_train_attribute_.Mutable(index);
}
inline ::protocols::common::PBIntPair* TrainAttribute::add_unsave_train_attribute() {
  return unsave_train_attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >&
TrainAttribute::unsave_train_attribute() const {
  return unsave_train_attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PBIntPair >*
TrainAttribute::mutable_unsave_train_attribute() {
  return &unsave_train_attribute_;
}

// -------------------------------------------------------------------

// ArenaPlayerInfo

// required int64 guid = 1;
inline bool ArenaPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaPlayerInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 ArenaPlayerInfo::guid() const {
  return guid_;
}
inline void ArenaPlayerInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool ArenaPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ArenaPlayerInfo::name() const {
  return *name_;
}
inline void ArenaPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ArenaPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 level = 3;
inline bool ArenaPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::level() const {
  return level_;
}
inline void ArenaPlayerInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 cur_rank = 4;
inline bool ArenaPlayerInfo::has_cur_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaPlayerInfo::set_has_cur_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaPlayerInfo::clear_has_cur_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaPlayerInfo::clear_cur_rank() {
  cur_rank_ = 0;
  clear_has_cur_rank();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::cur_rank() const {
  return cur_rank_;
}
inline void ArenaPlayerInfo::set_cur_rank(::google::protobuf::int32 value) {
  set_has_cur_rank();
  cur_rank_ = value;
}

// optional int32 highest_rank = 7;
inline bool ArenaPlayerInfo::has_highest_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaPlayerInfo::set_has_highest_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaPlayerInfo::clear_has_highest_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaPlayerInfo::clear_highest_rank() {
  highest_rank_ = 0;
  clear_has_highest_rank();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::highest_rank() const {
  return highest_rank_;
}
inline void ArenaPlayerInfo::set_highest_rank(::google::protobuf::int32 value) {
  set_has_highest_rank();
  highest_rank_ = value;
}

// optional int32 titile = 5;
inline bool ArenaPlayerInfo::has_titile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaPlayerInfo::set_has_titile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaPlayerInfo::clear_has_titile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaPlayerInfo::clear_titile() {
  titile_ = 0;
  clear_has_titile();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::titile() const {
  return titile_;
}
inline void ArenaPlayerInfo::set_titile(::google::protobuf::int32 value) {
  set_has_titile();
  titile_ = value;
}

// optional int32 max_cont_wins = 6;
inline bool ArenaPlayerInfo::has_max_cont_wins() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaPlayerInfo::set_has_max_cont_wins() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaPlayerInfo::clear_has_max_cont_wins() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaPlayerInfo::clear_max_cont_wins() {
  max_cont_wins_ = 0;
  clear_has_max_cont_wins();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::max_cont_wins() const {
  return max_cont_wins_;
}
inline void ArenaPlayerInfo::set_max_cont_wins(::google::protobuf::int32 value) {
  set_has_max_cont_wins();
  max_cont_wins_ = value;
}

// optional int32 cur_cont_wins = 8;
inline bool ArenaPlayerInfo::has_cur_cont_wins() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArenaPlayerInfo::set_has_cur_cont_wins() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArenaPlayerInfo::clear_has_cur_cont_wins() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArenaPlayerInfo::clear_cur_cont_wins() {
  cur_cont_wins_ = 0;
  clear_has_cur_cont_wins();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::cur_cont_wins() const {
  return cur_cont_wins_;
}
inline void ArenaPlayerInfo::set_cur_cont_wins(::google::protobuf::int32 value) {
  set_has_cur_cont_wins();
  cur_cont_wins_ = value;
}

// optional int32 fight_capacity = 9;
inline bool ArenaPlayerInfo::has_fight_capacity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArenaPlayerInfo::set_has_fight_capacity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArenaPlayerInfo::clear_has_fight_capacity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArenaPlayerInfo::clear_fight_capacity() {
  fight_capacity_ = 0;
  clear_has_fight_capacity();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::fight_capacity() const {
  return fight_capacity_;
}
inline void ArenaPlayerInfo::set_fight_capacity(::google::protobuf::int32 value) {
  set_has_fight_capacity();
  fight_capacity_ = value;
}

// -------------------------------------------------------------------

// TreasureBox

// required int32 type = 1;
inline bool TreasureBox::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureBox::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureBox::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureBox::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TreasureBox::type() const {
  return type_;
}
inline void TreasureBox::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .protocols.common.ItemInfo item_info = 2;
inline int TreasureBox::item_info_size() const {
  return item_info_.size();
}
inline void TreasureBox::clear_item_info() {
  item_info_.Clear();
}
inline const ::protocols::common::ItemInfo& TreasureBox::item_info(int index) const {
  return item_info_.Get(index);
}
inline ::protocols::common::ItemInfo* TreasureBox::mutable_item_info(int index) {
  return item_info_.Mutable(index);
}
inline ::protocols::common::ItemInfo* TreasureBox::add_item_info() {
  return item_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
TreasureBox::item_info() const {
  return item_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
TreasureBox::mutable_item_info() {
  return &item_info_;
}

// -------------------------------------------------------------------

// UsedName

// optional string name = 1;
inline bool UsedName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UsedName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UsedName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UsedName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UsedName::name() const {
  return *name_;
}
inline void UsedName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UsedName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UsedName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UsedName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UsedName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 2;
inline bool UsedName::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UsedName::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UsedName::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UsedName::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UsedName::type() const {
  return type_;
}
inline void UsedName::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 server_id = 3;
inline bool UsedName::has_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UsedName::set_has_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UsedName::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UsedName::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 UsedName::server_id() const {
  return server_id_;
}
inline void UsedName::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional int64 status = 4;
inline bool UsedName::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UsedName::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UsedName::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UsedName::clear_status() {
  status_ = GOOGLE_LONGLONG(0);
  clear_has_status();
}
inline ::google::protobuf::int64 UsedName::status() const {
  return status_;
}
inline void UsedName::set_status(::google::protobuf::int64 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// UsedNameData

// repeated .protocols.common.UsedName used_name = 1;
inline int UsedNameData::used_name_size() const {
  return used_name_.size();
}
inline void UsedNameData::clear_used_name() {
  used_name_.Clear();
}
inline const ::protocols::common::UsedName& UsedNameData::used_name(int index) const {
  return used_name_.Get(index);
}
inline ::protocols::common::UsedName* UsedNameData::mutable_used_name(int index) {
  return used_name_.Mutable(index);
}
inline ::protocols::common::UsedName* UsedNameData::add_used_name() {
  return used_name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::UsedName >&
UsedNameData::used_name() const {
  return used_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::UsedName >*
UsedNameData::mutable_used_name() {
  return &used_name_;
}

// -------------------------------------------------------------------

// UnuseNameMsg

// optional .protocols.common.UsedName name = 1;
inline bool UnuseNameMsg::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnuseNameMsg::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnuseNameMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnuseNameMsg::clear_name() {
  if (name_ != NULL) name_->::protocols::common::UsedName::Clear();
  clear_has_name();
}
inline const ::protocols::common::UsedName& UnuseNameMsg::name() const {
  return name_ != NULL ? *name_ : *default_instance_->name_;
}
inline ::protocols::common::UsedName* UnuseNameMsg::mutable_name() {
  set_has_name();
  if (name_ == NULL) name_ = new ::protocols::common::UsedName;
  return name_;
}
inline ::protocols::common::UsedName* UnuseNameMsg::release_name() {
  clear_has_name();
  ::protocols::common::UsedName* temp = name_;
  name_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// HideNpcData

// required int32 npc_id = 1;
inline bool HideNpcData::has_npc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HideNpcData::set_has_npc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HideNpcData::clear_has_npc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HideNpcData::clear_npc_id() {
  npc_id_ = 0;
  clear_has_npc_id();
}
inline ::google::protobuf::int32 HideNpcData::npc_id() const {
  return npc_id_;
}
inline void HideNpcData::set_npc_id(::google::protobuf::int32 value) {
  set_has_npc_id();
  npc_id_ = value;
}

// optional bool is_display = 2 [default = false];
inline bool HideNpcData::has_is_display() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HideNpcData::set_has_is_display() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HideNpcData::clear_has_is_display() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HideNpcData::clear_is_display() {
  is_display_ = false;
  clear_has_is_display();
}
inline bool HideNpcData::is_display() const {
  return is_display_;
}
inline void HideNpcData::set_is_display(bool value) {
  set_has_is_display();
  is_display_ = value;
}

// optional int32 map_id = 3;
inline bool HideNpcData::has_map_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HideNpcData::set_has_map_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HideNpcData::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HideNpcData::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 HideNpcData::map_id() const {
  return map_id_;
}
inline void HideNpcData::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 x = 4;
inline bool HideNpcData::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HideNpcData::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HideNpcData::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HideNpcData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 HideNpcData::x() const {
  return x_;
}
inline void HideNpcData::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 5;
inline bool HideNpcData::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HideNpcData::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HideNpcData::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HideNpcData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 HideNpcData::y() const {
  return y_;
}
inline void HideNpcData::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 rotate = 6;
inline bool HideNpcData::has_rotate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HideNpcData::set_has_rotate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HideNpcData::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HideNpcData::clear_rotate() {
  rotate_ = 0;
  clear_has_rotate();
}
inline ::google::protobuf::int32 HideNpcData::rotate() const {
  return rotate_;
}
inline void HideNpcData::set_rotate(::google::protobuf::int32 value) {
  set_has_rotate();
  rotate_ = value;
}

// -------------------------------------------------------------------

// HideNpcPb

// repeated int32 npc_ids = 1;
inline int HideNpcPb::npc_ids_size() const {
  return npc_ids_.size();
}
inline void HideNpcPb::clear_npc_ids() {
  npc_ids_.Clear();
}
inline ::google::protobuf::int32 HideNpcPb::npc_ids(int index) const {
  return npc_ids_.Get(index);
}
inline void HideNpcPb::set_npc_ids(int index, ::google::protobuf::int32 value) {
  npc_ids_.Set(index, value);
}
inline void HideNpcPb::add_npc_ids(::google::protobuf::int32 value) {
  npc_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HideNpcPb::npc_ids() const {
  return npc_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HideNpcPb::mutable_npc_ids() {
  return &npc_ids_;
}

// repeated .protocols.common.HideNpcData hide_datas = 2;
inline int HideNpcPb::hide_datas_size() const {
  return hide_datas_.size();
}
inline void HideNpcPb::clear_hide_datas() {
  hide_datas_.Clear();
}
inline const ::protocols::common::HideNpcData& HideNpcPb::hide_datas(int index) const {
  return hide_datas_.Get(index);
}
inline ::protocols::common::HideNpcData* HideNpcPb::mutable_hide_datas(int index) {
  return hide_datas_.Mutable(index);
}
inline ::protocols::common::HideNpcData* HideNpcPb::add_hide_datas() {
  return hide_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::HideNpcData >&
HideNpcPb::hide_datas() const {
  return hide_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::HideNpcData >*
HideNpcPb::mutable_hide_datas() {
  return &hide_datas_;
}

// -------------------------------------------------------------------

// NpcPosition

// optional int32 map_id = 1;
inline bool NpcPosition::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcPosition::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcPosition::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcPosition::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 NpcPosition::map_id() const {
  return map_id_;
}
inline void NpcPosition::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 x = 2;
inline bool NpcPosition::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcPosition::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcPosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 NpcPosition::x() const {
  return x_;
}
inline void NpcPosition::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 3;
inline bool NpcPosition::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcPosition::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcPosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 NpcPosition::y() const {
  return y_;
}
inline void NpcPosition::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional int32 rotate = 4;
inline bool NpcPosition::has_rotate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NpcPosition::set_has_rotate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NpcPosition::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NpcPosition::clear_rotate() {
  rotate_ = 0;
  clear_has_rotate();
}
inline ::google::protobuf::int32 NpcPosition::rotate() const {
  return rotate_;
}
inline void NpcPosition::set_rotate(::google::protobuf::int32 value) {
  set_has_rotate();
  rotate_ = value;
}

// -------------------------------------------------------------------

// OpenedFunctionNotify

// repeated int32 opened_function = 1;
inline int OpenedFunctionNotify::opened_function_size() const {
  return opened_function_.size();
}
inline void OpenedFunctionNotify::clear_opened_function() {
  opened_function_.Clear();
}
inline ::google::protobuf::int32 OpenedFunctionNotify::opened_function(int index) const {
  return opened_function_.Get(index);
}
inline void OpenedFunctionNotify::set_opened_function(int index, ::google::protobuf::int32 value) {
  opened_function_.Set(index, value);
}
inline void OpenedFunctionNotify::add_opened_function(::google::protobuf::int32 value) {
  opened_function_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OpenedFunctionNotify::opened_function() const {
  return opened_function_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OpenedFunctionNotify::mutable_opened_function() {
  return &opened_function_;
}

// -------------------------------------------------------------------

// GetBuddyTemplateAttributeRequest

// required int32 tid = 1;
inline bool GetBuddyTemplateAttributeRequest::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBuddyTemplateAttributeRequest::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBuddyTemplateAttributeRequest::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBuddyTemplateAttributeRequest::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 GetBuddyTemplateAttributeRequest::tid() const {
  return tid_;
}
inline void GetBuddyTemplateAttributeRequest::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 level = 2;
inline bool GetBuddyTemplateAttributeRequest::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBuddyTemplateAttributeRequest::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBuddyTemplateAttributeRequest::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBuddyTemplateAttributeRequest::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GetBuddyTemplateAttributeRequest::level() const {
  return level_;
}
inline void GetBuddyTemplateAttributeRequest::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// GetBuddyTemplateAttributeResponse

// required int32 error_code = 1;
inline bool GetBuddyTemplateAttributeResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBuddyTemplateAttributeResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBuddyTemplateAttributeResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBuddyTemplateAttributeResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetBuddyTemplateAttributeResponse::error_code() const {
  return error_code_;
}
inline void GetBuddyTemplateAttributeResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .protocols.common.AttributeData bare_attr_list = 2;
inline int GetBuddyTemplateAttributeResponse::bare_attr_list_size() const {
  return bare_attr_list_.size();
}
inline void GetBuddyTemplateAttributeResponse::clear_bare_attr_list() {
  bare_attr_list_.Clear();
}
inline const ::protocols::common::AttributeData& GetBuddyTemplateAttributeResponse::bare_attr_list(int index) const {
  return bare_attr_list_.Get(index);
}
inline ::protocols::common::AttributeData* GetBuddyTemplateAttributeResponse::mutable_bare_attr_list(int index) {
  return bare_attr_list_.Mutable(index);
}
inline ::protocols::common::AttributeData* GetBuddyTemplateAttributeResponse::add_bare_attr_list() {
  return bare_attr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >&
GetBuddyTemplateAttributeResponse::bare_attr_list() const {
  return bare_attr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::AttributeData >*
GetBuddyTemplateAttributeResponse::mutable_bare_attr_list() {
  return &bare_attr_list_;
}

// -------------------------------------------------------------------

// YouLiMapData_GridData

// required int32 grid_index = 1;
inline bool YouLiMapData_GridData::has_grid_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouLiMapData_GridData::set_has_grid_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouLiMapData_GridData::clear_has_grid_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouLiMapData_GridData::clear_grid_index() {
  grid_index_ = 0;
  clear_has_grid_index();
}
inline ::google::protobuf::int32 YouLiMapData_GridData::grid_index() const {
  return grid_index_;
}
inline void YouLiMapData_GridData::set_grid_index(::google::protobuf::int32 value) {
  set_has_grid_index();
  grid_index_ = value;
}

// required int32 grid_type = 2;
inline bool YouLiMapData_GridData::has_grid_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouLiMapData_GridData::set_has_grid_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouLiMapData_GridData::clear_has_grid_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouLiMapData_GridData::clear_grid_type() {
  grid_type_ = 0;
  clear_has_grid_type();
}
inline ::google::protobuf::int32 YouLiMapData_GridData::grid_type() const {
  return grid_type_;
}
inline void YouLiMapData_GridData::set_grid_type(::google::protobuf::int32 value) {
  set_has_grid_type();
  grid_type_ = value;
}

// -------------------------------------------------------------------

// YouLiMapData

// repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
inline int YouLiMapData::grid_data_size() const {
  return grid_data_.size();
}
inline void YouLiMapData::clear_grid_data() {
  grid_data_.Clear();
}
inline const ::protocols::common::YouLiMapData_GridData& YouLiMapData::grid_data(int index) const {
  return grid_data_.Get(index);
}
inline ::protocols::common::YouLiMapData_GridData* YouLiMapData::mutable_grid_data(int index) {
  return grid_data_.Mutable(index);
}
inline ::protocols::common::YouLiMapData_GridData* YouLiMapData::add_grid_data() {
  return grid_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YouLiMapData_GridData >&
YouLiMapData::grid_data() const {
  return grid_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YouLiMapData_GridData >*
YouLiMapData::mutable_grid_data() {
  return &grid_data_;
}

// optional int32 cur_grid_index = 2;
inline bool YouLiMapData::has_cur_grid_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouLiMapData::set_has_cur_grid_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouLiMapData::clear_has_cur_grid_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouLiMapData::clear_cur_grid_index() {
  cur_grid_index_ = 0;
  clear_has_cur_grid_index();
}
inline ::google::protobuf::int32 YouLiMapData::cur_grid_index() const {
  return cur_grid_index_;
}
inline void YouLiMapData::set_cur_grid_index(::google::protobuf::int32 value) {
  set_has_cur_grid_index();
  cur_grid_index_ = value;
}

// optional int32 youli_num = 3;
inline bool YouLiMapData::has_youli_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouLiMapData::set_has_youli_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouLiMapData::clear_has_youli_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouLiMapData::clear_youli_num() {
  youli_num_ = 0;
  clear_has_youli_num();
}
inline ::google::protobuf::int32 YouLiMapData::youli_num() const {
  return youli_num_;
}
inline void YouLiMapData::set_youli_num(::google::protobuf::int32 value) {
  set_has_youli_num();
  youli_num_ = value;
}

// optional int32 max_youli_num = 4;
inline bool YouLiMapData::has_max_youli_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouLiMapData::set_has_max_youli_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouLiMapData::clear_has_max_youli_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouLiMapData::clear_max_youli_num() {
  max_youli_num_ = 0;
  clear_has_max_youli_num();
}
inline ::google::protobuf::int32 YouLiMapData::max_youli_num() const {
  return max_youli_num_;
}
inline void YouLiMapData::set_max_youli_num(::google::protobuf::int32 value) {
  set_has_max_youli_num();
  max_youli_num_ = value;
}

// -------------------------------------------------------------------

// YinglingComboStatus_ComboMember

// optional int32 type = 1;
inline bool YinglingComboStatus_ComboMember::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YinglingComboStatus_ComboMember::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YinglingComboStatus_ComboMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YinglingComboStatus_ComboMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 YinglingComboStatus_ComboMember::type() const {
  return type_;
}
inline void YinglingComboStatus_ComboMember::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool YinglingComboStatus_ComboMember::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YinglingComboStatus_ComboMember::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YinglingComboStatus_ComboMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YinglingComboStatus_ComboMember::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 YinglingComboStatus_ComboMember::id() const {
  return id_;
}
inline void YinglingComboStatus_ComboMember::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 status = 3;
inline bool YinglingComboStatus_ComboMember::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YinglingComboStatus_ComboMember::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YinglingComboStatus_ComboMember::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YinglingComboStatus_ComboMember::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 YinglingComboStatus_ComboMember::status() const {
  return status_;
}
inline void YinglingComboStatus_ComboMember::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// YinglingComboStatus_Combo

// optional int32 combo_id = 1;
inline bool YinglingComboStatus_Combo::has_combo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YinglingComboStatus_Combo::set_has_combo_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YinglingComboStatus_Combo::clear_has_combo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YinglingComboStatus_Combo::clear_combo_id() {
  combo_id_ = 0;
  clear_has_combo_id();
}
inline ::google::protobuf::int32 YinglingComboStatus_Combo::combo_id() const {
  return combo_id_;
}
inline void YinglingComboStatus_Combo::set_combo_id(::google::protobuf::int32 value) {
  set_has_combo_id();
  combo_id_ = value;
}

// optional int32 combo_level = 2;
inline bool YinglingComboStatus_Combo::has_combo_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YinglingComboStatus_Combo::set_has_combo_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YinglingComboStatus_Combo::clear_has_combo_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YinglingComboStatus_Combo::clear_combo_level() {
  combo_level_ = 0;
  clear_has_combo_level();
}
inline ::google::protobuf::int32 YinglingComboStatus_Combo::combo_level() const {
  return combo_level_;
}
inline void YinglingComboStatus_Combo::set_combo_level(::google::protobuf::int32 value) {
  set_has_combo_level();
  combo_level_ = value;
}

// optional int32 combo_status = 3;
inline bool YinglingComboStatus_Combo::has_combo_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YinglingComboStatus_Combo::set_has_combo_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YinglingComboStatus_Combo::clear_has_combo_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YinglingComboStatus_Combo::clear_combo_status() {
  combo_status_ = 0;
  clear_has_combo_status();
}
inline ::google::protobuf::int32 YinglingComboStatus_Combo::combo_status() const {
  return combo_status_;
}
inline void YinglingComboStatus_Combo::set_combo_status(::google::protobuf::int32 value) {
  set_has_combo_status();
  combo_status_ = value;
}

// repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
inline int YinglingComboStatus_Combo::member_list_size() const {
  return member_list_.size();
}
inline void YinglingComboStatus_Combo::clear_member_list() {
  member_list_.Clear();
}
inline const ::protocols::common::YinglingComboStatus_ComboMember& YinglingComboStatus_Combo::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::protocols::common::YinglingComboStatus_ComboMember* YinglingComboStatus_Combo::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::protocols::common::YinglingComboStatus_ComboMember* YinglingComboStatus_Combo::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_ComboMember >&
YinglingComboStatus_Combo::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_ComboMember >*
YinglingComboStatus_Combo::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// YinglingComboStatus

// repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
inline int YinglingComboStatus::combo_list_size() const {
  return combo_list_.size();
}
inline void YinglingComboStatus::clear_combo_list() {
  combo_list_.Clear();
}
inline const ::protocols::common::YinglingComboStatus_Combo& YinglingComboStatus::combo_list(int index) const {
  return combo_list_.Get(index);
}
inline ::protocols::common::YinglingComboStatus_Combo* YinglingComboStatus::mutable_combo_list(int index) {
  return combo_list_.Mutable(index);
}
inline ::protocols::common::YinglingComboStatus_Combo* YinglingComboStatus::add_combo_list() {
  return combo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_Combo >&
YinglingComboStatus::combo_list() const {
  return combo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::YinglingComboStatus_Combo >*
YinglingComboStatus::mutable_combo_list() {
  return &combo_list_;
}

// -------------------------------------------------------------------

// YinglingTrainStatus

// repeated .protocols.common.TrainAttribute train_attribute_list = 1;
inline int YinglingTrainStatus::train_attribute_list_size() const {
  return train_attribute_list_.size();
}
inline void YinglingTrainStatus::clear_train_attribute_list() {
  train_attribute_list_.Clear();
}
inline const ::protocols::common::TrainAttribute& YinglingTrainStatus::train_attribute_list(int index) const {
  return train_attribute_list_.Get(index);
}
inline ::protocols::common::TrainAttribute* YinglingTrainStatus::mutable_train_attribute_list(int index) {
  return train_attribute_list_.Mutable(index);
}
inline ::protocols::common::TrainAttribute* YinglingTrainStatus::add_train_attribute_list() {
  return train_attribute_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TrainAttribute >&
YinglingTrainStatus::train_attribute_list() const {
  return train_attribute_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TrainAttribute >*
YinglingTrainStatus::mutable_train_attribute_list() {
  return &train_attribute_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::MessageModule>() {
  return protocols::common::MessageModule_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::MessageType>() {
  return protocols::common::MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ItemPositionType>() {
  return protocols::common::ItemPositionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::DirectionType>() {
  return protocols::common::DirectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::MessageAction>() {
  return protocols::common::MessageAction_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::AttrChangeType>() {
  return protocols::common::AttrChangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ARENA_SELF_NOTICE_TYPE>() {
  return protocols::common::ARENA_SELF_NOTICE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ARENA_PUBLIC_NOTICE_TYPE>() {
  return protocols::common::ARENA_PUBLIC_NOTICE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PUBLIC_NOTICE_TYPE>() {
  return protocols::common::PUBLIC_NOTICE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::Profession>() {
  return protocols::common::Profession_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::Gender>() {
  return protocols::common::Gender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GameStatus>() {
  return protocols::common::GameStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::AccountStatus>() {
  return protocols::common::AccountStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::LEVEL_UP_TYPE>() {
  return protocols::common::LEVEL_UP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PRACTICE_MODE>() {
  return protocols::common::PRACTICE_MODE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PAY_FUNCTION_TYPE>() {
  return protocols::common::PAY_FUNCTION_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ENUM_ATTR>() {
  return protocols::common::ENUM_ATTR_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::SKIP_FIGHT_TYPE>() {
  return protocols::common::SKIP_FIGHT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FIGHT_TYPE>() {
  return protocols::common::FIGHT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::YinglingStatus>() {
  return protocols::common::YinglingStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::YinglingQuality>() {
  return protocols::common::YinglingQuality_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::RefreshYinglingListType>() {
  return protocols::common::RefreshYinglingListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::AnnounceType>() {
  return protocols::common::AnnounceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ItemType>() {
  return protocols::common::ItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::EquipPosition>() {
  return protocols::common::EquipPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::LINE_UP_OPERATION>() {
  return protocols::common::LINE_UP_OPERATION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::UPDATE_BATTLE_SKILL_TYPE>() {
  return protocols::common::UPDATE_BATTLE_SKILL_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::MONEY_TYPE>() {
  return protocols::common::MONEY_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::QuestActionType>() {
  return protocols::common::QuestActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::QuestAction_ClientActionType>() {
  return protocols::common::QuestAction_ClientActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::QuestStatus>() {
  return protocols::common::QuestStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::QuestType>() {
  return protocols::common::QuestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TreasureBoxBonusType>() {
  return protocols::common::TreasureBoxBonusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ActivityStatus>() {
  return protocols::common::ActivityStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::DIFFICULTY_LEVEL>() {
  return protocols::common::DIFFICULTY_LEVEL_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TEAM_OBJECTIVE_TYPE>() {
  return protocols::common::TEAM_OBJECTIVE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TEAM_ADD_TYPE>() {
  return protocols::common::TEAM_ADD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TEAM_OPERATION>() {
  return protocols::common::TEAM_OPERATION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TEAM_APPLY_RESULT>() {
  return protocols::common::TEAM_APPLY_RESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TEAM_LINEUP_OPERATION>() {
  return protocols::common::TEAM_LINEUP_OPERATION_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::SERVER_SYNC_TEAM_TYPE>() {
  return protocols::common::SERVER_SYNC_TEAM_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::RoleLimitType>() {
  return protocols::common::RoleLimitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FunctionLimitType>() {
  return protocols::common::FunctionLimitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::NumberLimitType>() {
  return protocols::common::NumberLimitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::VipSettingsType>() {
  return protocols::common::VipSettingsType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PlayerBitType>() {
  return protocols::common::PlayerBitType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PlayerFlagType>() {
  return protocols::common::PlayerFlagType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::StartupActivityType>() {
  return protocols::common::StartupActivityType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ClientPlayerFlagType>() {
  return protocols::common::ClientPlayerFlagType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TrainType>() {
  return protocols::common::TrainType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::BUY_MORE_TIMES_TYPE>() {
  return protocols::common::BUY_MORE_TIMES_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::BUY_CLEAR_CD_TYPE>() {
  return protocols::common::BUY_CLEAR_CD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::UniqueNameType>() {
  return protocols::common::UniqueNameType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GuildSkillStatus>() {
  return protocols::common::GuildSkillStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FunctionType>() {
  return protocols::common::FunctionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::LivenessType>() {
  return protocols::common::LivenessType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PlayerConfigType>() {
  return protocols::common::PlayerConfigType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FriendConfigType>() {
  return protocols::common::FriendConfigType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::UpdateMonsterBuffType>() {
  return protocols::common::UpdateMonsterBuffType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TeamChannelMemberNotifyType>() {
  return protocols::common::TeamChannelMemberNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TitleId>() {
  return protocols::common::TitleId_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ROOM_OPERATION>() {
  return protocols::common::ROOM_OPERATION_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fcommon_2eproto__INCLUDED
