// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_chat.proto

#ifndef PROTOBUF_game_5fchat_2eproto__INCLUDED
#define PROTOBUF_game_5fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "game_common.pb.h"
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5fchat_2eproto();
void protobuf_AssignDesc_game_5fchat_2eproto();
void protobuf_ShutdownFile_game_5fchat_2eproto();

class OpenChannelRequest;
class OpenChannelResponse;
class CloseChannelRequest;
class CloseChannelResponse;
class TalkChannelRequest;
class TalkChannelResponse;
class TalkChannelNotify;
class TalkPlayerRequest;
class TalkPlayerResponse;
class TalkPlayerNotify;
class FightResultBroadcastNotify;

enum ChannelType {
  CHANNEL_SYSTEM = 1,
  CHANNEL_TEAM = 2,
  CHANNEL_VIEW = 3,
  CHANNEL_GUILD = 4,
  CHANNEL_WORLD = 5,
  CHANNEL_BROADCAST = 6
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = CHANNEL_SYSTEM;
const ChannelType ChannelType_MAX = CHANNEL_BROADCAST;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class OpenChannelRequest : public ::google::protobuf::Message {
 public:
  OpenChannelRequest();
  virtual ~OpenChannelRequest();
  
  OpenChannelRequest(const OpenChannelRequest& from);
  
  inline OpenChannelRequest& operator=(const OpenChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenChannelRequest& default_instance();
  
  void Swap(OpenChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  OpenChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenChannelRequest& from);
  void MergeFrom(const OpenChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.ChannelType channel_list = 1;
  inline int channel_list_size() const;
  inline void clear_channel_list();
  static const int kChannelListFieldNumber = 1;
  inline protocols::common::ChannelType channel_list(int index) const;
  inline void set_channel_list(int index, protocols::common::ChannelType value);
  inline void add_channel_list(protocols::common::ChannelType value);
  inline const ::google::protobuf::RepeatedField<int>& channel_list() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_channel_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.OpenChannelRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField<int> channel_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static OpenChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class OpenChannelResponse : public ::google::protobuf::Message {
 public:
  OpenChannelResponse();
  virtual ~OpenChannelResponse();
  
  OpenChannelResponse(const OpenChannelResponse& from);
  
  inline OpenChannelResponse& operator=(const OpenChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenChannelResponse& default_instance();
  
  void Swap(OpenChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  OpenChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenChannelResponse& from);
  void MergeFrom(const OpenChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.OpenChannelResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static OpenChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloseChannelRequest : public ::google::protobuf::Message {
 public:
  CloseChannelRequest();
  virtual ~CloseChannelRequest();
  
  CloseChannelRequest(const CloseChannelRequest& from);
  
  inline CloseChannelRequest& operator=(const CloseChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseChannelRequest& default_instance();
  
  void Swap(CloseChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  CloseChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseChannelRequest& from);
  void MergeFrom(const CloseChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.ChannelType channel_list = 1;
  inline int channel_list_size() const;
  inline void clear_channel_list();
  static const int kChannelListFieldNumber = 1;
  inline protocols::common::ChannelType channel_list(int index) const;
  inline void set_channel_list(int index, protocols::common::ChannelType value);
  inline void add_channel_list(protocols::common::ChannelType value);
  inline const ::google::protobuf::RepeatedField<int>& channel_list() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_channel_list();
  
  // @@protoc_insertion_point(class_scope:protocols.common.CloseChannelRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField<int> channel_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static CloseChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloseChannelResponse : public ::google::protobuf::Message {
 public:
  CloseChannelResponse();
  virtual ~CloseChannelResponse();
  
  CloseChannelResponse(const CloseChannelResponse& from);
  
  inline CloseChannelResponse& operator=(const CloseChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseChannelResponse& default_instance();
  
  void Swap(CloseChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  CloseChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseChannelResponse& from);
  void MergeFrom(const CloseChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.CloseChannelResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static CloseChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class TalkChannelRequest : public ::google::protobuf::Message {
 public:
  TalkChannelRequest();
  virtual ~TalkChannelRequest();
  
  TalkChannelRequest(const TalkChannelRequest& from);
  
  inline TalkChannelRequest& operator=(const TalkChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkChannelRequest& default_instance();
  
  void Swap(TalkChannelRequest* other);
  
  // implements Message ----------------------------------------------
  
  TalkChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkChannelRequest& from);
  void MergeFrom(const TalkChannelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protocols.common.ChannelType channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline protocols::common::ChannelType channel() const;
  inline void set_channel(protocols::common::ChannelType value);
  
  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 flag = 3 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkChannelRequest)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* content_;
  int channel_;
  ::google::protobuf::int32 flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class TalkChannelResponse : public ::google::protobuf::Message {
 public:
  TalkChannelResponse();
  virtual ~TalkChannelResponse();
  
  TalkChannelResponse(const TalkChannelResponse& from);
  
  inline TalkChannelResponse& operator=(const TalkChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkChannelResponse& default_instance();
  
  void Swap(TalkChannelResponse* other);
  
  // implements Message ----------------------------------------------
  
  TalkChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkChannelResponse& from);
  void MergeFrom(const TalkChannelResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkChannelResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class TalkChannelNotify : public ::google::protobuf::Message {
 public:
  TalkChannelNotify();
  virtual ~TalkChannelNotify();
  
  TalkChannelNotify(const TalkChannelNotify& from);
  
  inline TalkChannelNotify& operator=(const TalkChannelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkChannelNotify& default_instance();
  
  void Swap(TalkChannelNotify* other);
  
  // implements Message ----------------------------------------------
  
  TalkChannelNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkChannelNotify& from);
  void MergeFrom(const TalkChannelNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 src_guid = 1;
  inline bool has_src_guid() const;
  inline void clear_src_guid();
  static const int kSrcGuidFieldNumber = 1;
  inline ::google::protobuf::int64 src_guid() const;
  inline void set_src_guid(::google::protobuf::int64 value);
  
  // optional string src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const char* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  
  // optional .protocols.common.ChannelType channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline protocols::common::ChannelType channel() const;
  inline void set_channel(protocols::common::ChannelType value);
  
  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 flag = 5 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 5;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional .protocols.common.Gender gender = 6 [default = MALE];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 6;
  inline protocols::common::Gender gender() const;
  inline void set_gender(protocols::common::Gender value);
  
  // optional int32 src_server_id = 7 [default = 0];
  inline bool has_src_server_id() const;
  inline void clear_src_server_id();
  static const int kSrcServerIdFieldNumber = 7;
  inline ::google::protobuf::int32 src_server_id() const;
  inline void set_src_server_id(::google::protobuf::int32 value);
  
  // optional int32 vip_level = 8 [default = 0];
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 8;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkChannelNotify)
 private:
  inline void set_has_src_guid();
  inline void clear_has_src_guid();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_src_server_id();
  inline void clear_has_src_server_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 src_guid_;
  ::std::string* src_name_;
  ::std::string* content_;
  int channel_;
  ::google::protobuf::int32 flag_;
  int gender_;
  ::google::protobuf::int32 src_server_id_;
  ::google::protobuf::int32 vip_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkChannelNotify* default_instance_;
};
// -------------------------------------------------------------------

class TalkPlayerRequest : public ::google::protobuf::Message {
 public:
  TalkPlayerRequest();
  virtual ~TalkPlayerRequest();
  
  TalkPlayerRequest(const TalkPlayerRequest& from);
  
  inline TalkPlayerRequest& operator=(const TalkPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkPlayerRequest& default_instance();
  
  void Swap(TalkPlayerRequest* other);
  
  // implements Message ----------------------------------------------
  
  TalkPlayerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkPlayerRequest& from);
  void MergeFrom(const TalkPlayerRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 dst_guid = 1;
  inline bool has_dst_guid() const;
  inline void clear_dst_guid();
  static const int kDstGuidFieldNumber = 1;
  inline ::google::protobuf::int64 dst_guid() const;
  inline void set_dst_guid(::google::protobuf::int64 value);
  
  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 flag = 3 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkPlayerRequest)
 private:
  inline void set_has_dst_guid();
  inline void clear_has_dst_guid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_flag();
  inline void clear_has_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 dst_guid_;
  ::std::string* content_;
  ::google::protobuf::int32 flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkPlayerRequest* default_instance_;
};
// -------------------------------------------------------------------

class TalkPlayerResponse : public ::google::protobuf::Message {
 public:
  TalkPlayerResponse();
  virtual ~TalkPlayerResponse();
  
  TalkPlayerResponse(const TalkPlayerResponse& from);
  
  inline TalkPlayerResponse& operator=(const TalkPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkPlayerResponse& default_instance();
  
  void Swap(TalkPlayerResponse* other);
  
  // implements Message ----------------------------------------------
  
  TalkPlayerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkPlayerResponse& from);
  void MergeFrom(const TalkPlayerResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkPlayerResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkPlayerResponse* default_instance_;
};
// -------------------------------------------------------------------

class TalkPlayerNotify : public ::google::protobuf::Message {
 public:
  TalkPlayerNotify();
  virtual ~TalkPlayerNotify();
  
  TalkPlayerNotify(const TalkPlayerNotify& from);
  
  inline TalkPlayerNotify& operator=(const TalkPlayerNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkPlayerNotify& default_instance();
  
  void Swap(TalkPlayerNotify* other);
  
  // implements Message ----------------------------------------------
  
  TalkPlayerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkPlayerNotify& from);
  void MergeFrom(const TalkPlayerNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 src_guid = 1;
  inline bool has_src_guid() const;
  inline void clear_src_guid();
  static const int kSrcGuidFieldNumber = 1;
  inline ::google::protobuf::int64 src_guid() const;
  inline void set_src_guid(::google::protobuf::int64 value);
  
  // optional string src_name = 2;
  inline bool has_src_name() const;
  inline void clear_src_name();
  static const int kSrcNameFieldNumber = 2;
  inline const ::std::string& src_name() const;
  inline void set_src_name(const ::std::string& value);
  inline void set_src_name(const char* value);
  inline void set_src_name(const char* value, size_t size);
  inline ::std::string* mutable_src_name();
  inline ::std::string* release_src_name();
  
  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  
  // optional int32 flag = 4 [default = 0];
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional .protocols.common.Gender gender = 5 [default = MALE];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 5;
  inline protocols::common::Gender gender() const;
  inline void set_gender(protocols::common::Gender value);
  
  // optional int32 src_server_id = 6 [default = 0];
  inline bool has_src_server_id() const;
  inline void clear_src_server_id();
  static const int kSrcServerIdFieldNumber = 6;
  inline ::google::protobuf::int32 src_server_id() const;
  inline void set_src_server_id(::google::protobuf::int32 value);
  
  // optional int32 vip_level = 7 [default = 0];
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TalkPlayerNotify)
 private:
  inline void set_has_src_guid();
  inline void clear_has_src_guid();
  inline void set_has_src_name();
  inline void clear_has_src_name();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_src_server_id();
  inline void clear_has_src_server_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 src_guid_;
  ::std::string* src_name_;
  ::std::string* content_;
  ::google::protobuf::int32 flag_;
  int gender_;
  ::google::protobuf::int32 src_server_id_;
  ::google::protobuf::int32 vip_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static TalkPlayerNotify* default_instance_;
};
// -------------------------------------------------------------------

class FightResultBroadcastNotify : public ::google::protobuf::Message {
 public:
  FightResultBroadcastNotify();
  virtual ~FightResultBroadcastNotify();
  
  FightResultBroadcastNotify(const FightResultBroadcastNotify& from);
  
  inline FightResultBroadcastNotify& operator=(const FightResultBroadcastNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FightResultBroadcastNotify& default_instance();
  
  void Swap(FightResultBroadcastNotify* other);
  
  // implements Message ----------------------------------------------
  
  FightResultBroadcastNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightResultBroadcastNotify& from);
  void MergeFrom(const FightResultBroadcastNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 channel_type = 1;
  inline bool has_channel_type() const;
  inline void clear_channel_type();
  static const int kChannelTypeFieldNumber = 1;
  inline ::google::protobuf::int32 channel_type() const;
  inline void set_channel_type(::google::protobuf::int32 value);
  
  // required int64 fight_key = 2;
  inline bool has_fight_key() const;
  inline void clear_fight_key();
  static const int kFightKeyFieldNumber = 2;
  inline ::google::protobuf::int64 fight_key() const;
  inline void set_fight_key(::google::protobuf::int64 value);
  
  // optional int32 fight_type = 12;
  inline bool has_fight_type() const;
  inline void clear_fight_type();
  static const int kFightTypeFieldNumber = 12;
  inline ::google::protobuf::int32 fight_type() const;
  inline void set_fight_type(::google::protobuf::int32 value);
  
  // required int64 attacker_guid = 3;
  inline bool has_attacker_guid() const;
  inline void clear_attacker_guid();
  static const int kAttackerGuidFieldNumber = 3;
  inline ::google::protobuf::int64 attacker_guid() const;
  inline void set_attacker_guid(::google::protobuf::int64 value);
  
  // required string attacker_name = 4;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 4;
  inline const ::std::string& attacker_name() const;
  inline void set_attacker_name(const ::std::string& value);
  inline void set_attacker_name(const char* value);
  inline void set_attacker_name(const char* value, size_t size);
  inline ::std::string* mutable_attacker_name();
  inline ::std::string* release_attacker_name();
  
  // optional int32 attacker_gender = 13;
  inline bool has_attacker_gender() const;
  inline void clear_attacker_gender();
  static const int kAttackerGenderFieldNumber = 13;
  inline ::google::protobuf::int32 attacker_gender() const;
  inline void set_attacker_gender(::google::protobuf::int32 value);
  
  // required int32 attacker_in_team = 5;
  inline bool has_attacker_in_team() const;
  inline void clear_attacker_in_team();
  static const int kAttackerInTeamFieldNumber = 5;
  inline ::google::protobuf::int32 attacker_in_team() const;
  inline void set_attacker_in_team(::google::protobuf::int32 value);
  
  // optional int32 attacker_vip_level = 6;
  inline bool has_attacker_vip_level() const;
  inline void clear_attacker_vip_level();
  static const int kAttackerVipLevelFieldNumber = 6;
  inline ::google::protobuf::int32 attacker_vip_level() const;
  inline void set_attacker_vip_level(::google::protobuf::int32 value);
  
  // required int64 defender_guid = 14;
  inline bool has_defender_guid() const;
  inline void clear_defender_guid();
  static const int kDefenderGuidFieldNumber = 14;
  inline ::google::protobuf::int64 defender_guid() const;
  inline void set_defender_guid(::google::protobuf::int64 value);
  
  // required string defender_name = 15;
  inline bool has_defender_name() const;
  inline void clear_defender_name();
  static const int kDefenderNameFieldNumber = 15;
  inline const ::std::string& defender_name() const;
  inline void set_defender_name(const ::std::string& value);
  inline void set_defender_name(const char* value);
  inline void set_defender_name(const char* value, size_t size);
  inline ::std::string* mutable_defender_name();
  inline ::std::string* release_defender_name();
  
  // required int32 defender_in_team = 9;
  inline bool has_defender_in_team() const;
  inline void clear_defender_in_team();
  static const int kDefenderInTeamFieldNumber = 9;
  inline ::google::protobuf::int32 defender_in_team() const;
  inline void set_defender_in_team(::google::protobuf::int32 value);
  
  // optional int32 defender_vip_level = 10;
  inline bool has_defender_vip_level() const;
  inline void clear_defender_vip_level();
  static const int kDefenderVipLevelFieldNumber = 10;
  inline ::google::protobuf::int32 defender_vip_level() const;
  inline void set_defender_vip_level(::google::protobuf::int32 value);
  
  // optional int32 is_attacker_win = 11;
  inline bool has_is_attacker_win() const;
  inline void clear_is_attacker_win();
  static const int kIsAttackerWinFieldNumber = 11;
  inline ::google::protobuf::int32 is_attacker_win() const;
  inline void set_is_attacker_win(::google::protobuf::int32 value);
  
  // optional int64 sender_guid = 16;
  inline bool has_sender_guid() const;
  inline void clear_sender_guid();
  static const int kSenderGuidFieldNumber = 16;
  inline ::google::protobuf::int64 sender_guid() const;
  inline void set_sender_guid(::google::protobuf::int64 value);
  
  // optional int32 sender_gender = 17;
  inline bool has_sender_gender() const;
  inline void clear_sender_gender();
  static const int kSenderGenderFieldNumber = 17;
  inline ::google::protobuf::int32 sender_gender() const;
  inline void set_sender_gender(::google::protobuf::int32 value);
  
  // optional int32 sender_vip_level = 18;
  inline bool has_sender_vip_level() const;
  inline void clear_sender_vip_level();
  static const int kSenderVipLevelFieldNumber = 18;
  inline ::google::protobuf::int32 sender_vip_level() const;
  inline void set_sender_vip_level(::google::protobuf::int32 value);
  
  // optional string sender_name = 19;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 19;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  
  // @@protoc_insertion_point(class_scope:protocols.common.FightResultBroadcastNotify)
 private:
  inline void set_has_channel_type();
  inline void clear_has_channel_type();
  inline void set_has_fight_key();
  inline void clear_has_fight_key();
  inline void set_has_fight_type();
  inline void clear_has_fight_type();
  inline void set_has_attacker_guid();
  inline void clear_has_attacker_guid();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_attacker_gender();
  inline void clear_has_attacker_gender();
  inline void set_has_attacker_in_team();
  inline void clear_has_attacker_in_team();
  inline void set_has_attacker_vip_level();
  inline void clear_has_attacker_vip_level();
  inline void set_has_defender_guid();
  inline void clear_has_defender_guid();
  inline void set_has_defender_name();
  inline void clear_has_defender_name();
  inline void set_has_defender_in_team();
  inline void clear_has_defender_in_team();
  inline void set_has_defender_vip_level();
  inline void clear_has_defender_vip_level();
  inline void set_has_is_attacker_win();
  inline void clear_has_is_attacker_win();
  inline void set_has_sender_guid();
  inline void clear_has_sender_guid();
  inline void set_has_sender_gender();
  inline void clear_has_sender_gender();
  inline void set_has_sender_vip_level();
  inline void clear_has_sender_vip_level();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 fight_key_;
  ::google::protobuf::int32 channel_type_;
  ::google::protobuf::int32 fight_type_;
  ::google::protobuf::int64 attacker_guid_;
  ::std::string* attacker_name_;
  ::google::protobuf::int32 attacker_gender_;
  ::google::protobuf::int32 attacker_in_team_;
  ::google::protobuf::int64 defender_guid_;
  ::google::protobuf::int32 attacker_vip_level_;
  ::google::protobuf::int32 defender_in_team_;
  ::std::string* defender_name_;
  ::google::protobuf::int32 defender_vip_level_;
  ::google::protobuf::int32 is_attacker_win_;
  ::google::protobuf::int64 sender_guid_;
  ::google::protobuf::int32 sender_gender_;
  ::google::protobuf::int32 sender_vip_level_;
  ::std::string* sender_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5fchat_2eproto();
  friend void protobuf_AssignDesc_game_5fchat_2eproto();
  friend void protobuf_ShutdownFile_game_5fchat_2eproto();
  
  void InitAsDefaultInstance();
  static FightResultBroadcastNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// OpenChannelRequest

// repeated .protocols.common.ChannelType channel_list = 1;
inline int OpenChannelRequest::channel_list_size() const {
  return channel_list_.size();
}
inline void OpenChannelRequest::clear_channel_list() {
  channel_list_.Clear();
}
inline protocols::common::ChannelType OpenChannelRequest::channel_list(int index) const {
  return static_cast< protocols::common::ChannelType >(channel_list_.Get(index));
}
inline void OpenChannelRequest::set_channel_list(int index, protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  channel_list_.Set(index, value);
}
inline void OpenChannelRequest::add_channel_list(protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  channel_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
OpenChannelRequest::channel_list() const {
  return channel_list_;
}
inline ::google::protobuf::RepeatedField<int>*
OpenChannelRequest::mutable_channel_list() {
  return &channel_list_;
}

// -------------------------------------------------------------------

// OpenChannelResponse

// required int32 error_code = 1;
inline bool OpenChannelResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenChannelResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenChannelResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenChannelResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 OpenChannelResponse::error_code() const {
  return error_code_;
}
inline void OpenChannelResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// CloseChannelRequest

// repeated .protocols.common.ChannelType channel_list = 1;
inline int CloseChannelRequest::channel_list_size() const {
  return channel_list_.size();
}
inline void CloseChannelRequest::clear_channel_list() {
  channel_list_.Clear();
}
inline protocols::common::ChannelType CloseChannelRequest::channel_list(int index) const {
  return static_cast< protocols::common::ChannelType >(channel_list_.Get(index));
}
inline void CloseChannelRequest::set_channel_list(int index, protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  channel_list_.Set(index, value);
}
inline void CloseChannelRequest::add_channel_list(protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  channel_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CloseChannelRequest::channel_list() const {
  return channel_list_;
}
inline ::google::protobuf::RepeatedField<int>*
CloseChannelRequest::mutable_channel_list() {
  return &channel_list_;
}

// -------------------------------------------------------------------

// CloseChannelResponse

// required int32 error_code = 1;
inline bool CloseChannelResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CloseChannelResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CloseChannelResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CloseChannelResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 CloseChannelResponse::error_code() const {
  return error_code_;
}
inline void CloseChannelResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// TalkChannelRequest

// required .protocols.common.ChannelType channel = 1;
inline bool TalkChannelRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkChannelRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkChannelRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkChannelRequest::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline protocols::common::ChannelType TalkChannelRequest::channel() const {
  return static_cast< protocols::common::ChannelType >(channel_);
}
inline void TalkChannelRequest::set_channel(protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// required string content = 2;
inline bool TalkChannelRequest::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkChannelRequest::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkChannelRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkChannelRequest::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TalkChannelRequest::content() const {
  return *content_;
}
inline void TalkChannelRequest::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkChannelRequest::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkChannelRequest::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkChannelRequest::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* TalkChannelRequest::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 3 [default = 0];
inline bool TalkChannelRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkChannelRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkChannelRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkChannelRequest::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 TalkChannelRequest::flag() const {
  return flag_;
}
inline void TalkChannelRequest::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// TalkChannelResponse

// required int32 error_code = 1;
inline bool TalkChannelResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkChannelResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkChannelResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkChannelResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TalkChannelResponse::error_code() const {
  return error_code_;
}
inline void TalkChannelResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// TalkChannelNotify

// required int64 src_guid = 1;
inline bool TalkChannelNotify::has_src_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkChannelNotify::set_has_src_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkChannelNotify::clear_has_src_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkChannelNotify::clear_src_guid() {
  src_guid_ = GOOGLE_LONGLONG(0);
  clear_has_src_guid();
}
inline ::google::protobuf::int64 TalkChannelNotify::src_guid() const {
  return src_guid_;
}
inline void TalkChannelNotify::set_src_guid(::google::protobuf::int64 value) {
  set_has_src_guid();
  src_guid_ = value;
}

// optional string src_name = 2;
inline bool TalkChannelNotify::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkChannelNotify::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkChannelNotify::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkChannelNotify::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& TalkChannelNotify::src_name() const {
  return *src_name_;
}
inline void TalkChannelNotify::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void TalkChannelNotify::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void TalkChannelNotify::set_src_name(const char* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkChannelNotify::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* TalkChannelNotify::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protocols.common.ChannelType channel = 3;
inline bool TalkChannelNotify::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkChannelNotify::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkChannelNotify::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkChannelNotify::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline protocols::common::ChannelType TalkChannelNotify::channel() const {
  return static_cast< protocols::common::ChannelType >(channel_);
}
inline void TalkChannelNotify::set_channel(protocols::common::ChannelType value) {
  GOOGLE_DCHECK(protocols::common::ChannelType_IsValid(value));
  set_has_channel();
  channel_ = value;
}

// required string content = 4;
inline bool TalkChannelNotify::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkChannelNotify::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkChannelNotify::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkChannelNotify::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TalkChannelNotify::content() const {
  return *content_;
}
inline void TalkChannelNotify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkChannelNotify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkChannelNotify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkChannelNotify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* TalkChannelNotify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 5 [default = 0];
inline bool TalkChannelNotify::has_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalkChannelNotify::set_has_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalkChannelNotify::clear_has_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalkChannelNotify::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 TalkChannelNotify::flag() const {
  return flag_;
}
inline void TalkChannelNotify::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional .protocols.common.Gender gender = 6 [default = MALE];
inline bool TalkChannelNotify::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TalkChannelNotify::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TalkChannelNotify::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TalkChannelNotify::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline protocols::common::Gender TalkChannelNotify::gender() const {
  return static_cast< protocols::common::Gender >(gender_);
}
inline void TalkChannelNotify::set_gender(protocols::common::Gender value) {
  GOOGLE_DCHECK(protocols::common::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional int32 src_server_id = 7 [default = 0];
inline bool TalkChannelNotify::has_src_server_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TalkChannelNotify::set_has_src_server_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TalkChannelNotify::clear_has_src_server_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TalkChannelNotify::clear_src_server_id() {
  src_server_id_ = 0;
  clear_has_src_server_id();
}
inline ::google::protobuf::int32 TalkChannelNotify::src_server_id() const {
  return src_server_id_;
}
inline void TalkChannelNotify::set_src_server_id(::google::protobuf::int32 value) {
  set_has_src_server_id();
  src_server_id_ = value;
}

// optional int32 vip_level = 8 [default = 0];
inline bool TalkChannelNotify::has_vip_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TalkChannelNotify::set_has_vip_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TalkChannelNotify::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TalkChannelNotify::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 TalkChannelNotify::vip_level() const {
  return vip_level_;
}
inline void TalkChannelNotify::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// TalkPlayerRequest

// required int64 dst_guid = 1;
inline bool TalkPlayerRequest::has_dst_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkPlayerRequest::set_has_dst_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkPlayerRequest::clear_has_dst_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkPlayerRequest::clear_dst_guid() {
  dst_guid_ = GOOGLE_LONGLONG(0);
  clear_has_dst_guid();
}
inline ::google::protobuf::int64 TalkPlayerRequest::dst_guid() const {
  return dst_guid_;
}
inline void TalkPlayerRequest::set_dst_guid(::google::protobuf::int64 value) {
  set_has_dst_guid();
  dst_guid_ = value;
}

// required string content = 2;
inline bool TalkPlayerRequest::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkPlayerRequest::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkPlayerRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkPlayerRequest::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TalkPlayerRequest::content() const {
  return *content_;
}
inline void TalkPlayerRequest::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkPlayerRequest::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkPlayerRequest::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkPlayerRequest::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* TalkPlayerRequest::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 3 [default = 0];
inline bool TalkPlayerRequest::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkPlayerRequest::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkPlayerRequest::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkPlayerRequest::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 TalkPlayerRequest::flag() const {
  return flag_;
}
inline void TalkPlayerRequest::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// TalkPlayerResponse

// required int32 error_code = 1;
inline bool TalkPlayerResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkPlayerResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkPlayerResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkPlayerResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TalkPlayerResponse::error_code() const {
  return error_code_;
}
inline void TalkPlayerResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// TalkPlayerNotify

// required int64 src_guid = 1;
inline bool TalkPlayerNotify::has_src_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TalkPlayerNotify::set_has_src_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TalkPlayerNotify::clear_has_src_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TalkPlayerNotify::clear_src_guid() {
  src_guid_ = GOOGLE_LONGLONG(0);
  clear_has_src_guid();
}
inline ::google::protobuf::int64 TalkPlayerNotify::src_guid() const {
  return src_guid_;
}
inline void TalkPlayerNotify::set_src_guid(::google::protobuf::int64 value) {
  set_has_src_guid();
  src_guid_ = value;
}

// optional string src_name = 2;
inline bool TalkPlayerNotify::has_src_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TalkPlayerNotify::set_has_src_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TalkPlayerNotify::clear_has_src_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TalkPlayerNotify::clear_src_name() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    src_name_->clear();
  }
  clear_has_src_name();
}
inline const ::std::string& TalkPlayerNotify::src_name() const {
  return *src_name_;
}
inline void TalkPlayerNotify::set_src_name(const ::std::string& value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void TalkPlayerNotify::set_src_name(const char* value) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(value);
}
inline void TalkPlayerNotify::set_src_name(const char* value, size_t size) {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  src_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkPlayerNotify::mutable_src_name() {
  set_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    src_name_ = new ::std::string;
  }
  return src_name_;
}
inline ::std::string* TalkPlayerNotify::release_src_name() {
  clear_has_src_name();
  if (src_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_name_;
    src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 3;
inline bool TalkPlayerNotify::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TalkPlayerNotify::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TalkPlayerNotify::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TalkPlayerNotify::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TalkPlayerNotify::content() const {
  return *content_;
}
inline void TalkPlayerNotify::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkPlayerNotify::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void TalkPlayerNotify::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TalkPlayerNotify::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* TalkPlayerNotify::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flag = 4 [default = 0];
inline bool TalkPlayerNotify::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TalkPlayerNotify::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TalkPlayerNotify::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TalkPlayerNotify::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 TalkPlayerNotify::flag() const {
  return flag_;
}
inline void TalkPlayerNotify::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional .protocols.common.Gender gender = 5 [default = MALE];
inline bool TalkPlayerNotify::has_gender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TalkPlayerNotify::set_has_gender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TalkPlayerNotify::clear_has_gender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TalkPlayerNotify::clear_gender() {
  gender_ = 1;
  clear_has_gender();
}
inline protocols::common::Gender TalkPlayerNotify::gender() const {
  return static_cast< protocols::common::Gender >(gender_);
}
inline void TalkPlayerNotify::set_gender(protocols::common::Gender value) {
  GOOGLE_DCHECK(protocols::common::Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional int32 src_server_id = 6 [default = 0];
inline bool TalkPlayerNotify::has_src_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TalkPlayerNotify::set_has_src_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TalkPlayerNotify::clear_has_src_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TalkPlayerNotify::clear_src_server_id() {
  src_server_id_ = 0;
  clear_has_src_server_id();
}
inline ::google::protobuf::int32 TalkPlayerNotify::src_server_id() const {
  return src_server_id_;
}
inline void TalkPlayerNotify::set_src_server_id(::google::protobuf::int32 value) {
  set_has_src_server_id();
  src_server_id_ = value;
}

// optional int32 vip_level = 7 [default = 0];
inline bool TalkPlayerNotify::has_vip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TalkPlayerNotify::set_has_vip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TalkPlayerNotify::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TalkPlayerNotify::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 TalkPlayerNotify::vip_level() const {
  return vip_level_;
}
inline void TalkPlayerNotify::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// -------------------------------------------------------------------

// FightResultBroadcastNotify

// required int32 channel_type = 1;
inline bool FightResultBroadcastNotify::has_channel_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightResultBroadcastNotify::set_has_channel_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightResultBroadcastNotify::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightResultBroadcastNotify::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::channel_type() const {
  return channel_type_;
}
inline void FightResultBroadcastNotify::set_channel_type(::google::protobuf::int32 value) {
  set_has_channel_type();
  channel_type_ = value;
}

// required int64 fight_key = 2;
inline bool FightResultBroadcastNotify::has_fight_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightResultBroadcastNotify::set_has_fight_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightResultBroadcastNotify::clear_has_fight_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightResultBroadcastNotify::clear_fight_key() {
  fight_key_ = GOOGLE_LONGLONG(0);
  clear_has_fight_key();
}
inline ::google::protobuf::int64 FightResultBroadcastNotify::fight_key() const {
  return fight_key_;
}
inline void FightResultBroadcastNotify::set_fight_key(::google::protobuf::int64 value) {
  set_has_fight_key();
  fight_key_ = value;
}

// optional int32 fight_type = 12;
inline bool FightResultBroadcastNotify::has_fight_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightResultBroadcastNotify::set_has_fight_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightResultBroadcastNotify::clear_has_fight_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightResultBroadcastNotify::clear_fight_type() {
  fight_type_ = 0;
  clear_has_fight_type();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::fight_type() const {
  return fight_type_;
}
inline void FightResultBroadcastNotify::set_fight_type(::google::protobuf::int32 value) {
  set_has_fight_type();
  fight_type_ = value;
}

// required int64 attacker_guid = 3;
inline bool FightResultBroadcastNotify::has_attacker_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightResultBroadcastNotify::set_has_attacker_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightResultBroadcastNotify::clear_has_attacker_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightResultBroadcastNotify::clear_attacker_guid() {
  attacker_guid_ = GOOGLE_LONGLONG(0);
  clear_has_attacker_guid();
}
inline ::google::protobuf::int64 FightResultBroadcastNotify::attacker_guid() const {
  return attacker_guid_;
}
inline void FightResultBroadcastNotify::set_attacker_guid(::google::protobuf::int64 value) {
  set_has_attacker_guid();
  attacker_guid_ = value;
}

// required string attacker_name = 4;
inline bool FightResultBroadcastNotify::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightResultBroadcastNotify::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightResultBroadcastNotify::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightResultBroadcastNotify::clear_attacker_name() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_name_->clear();
  }
  clear_has_attacker_name();
}
inline const ::std::string& FightResultBroadcastNotify::attacker_name() const {
  return *attacker_name_;
}
inline void FightResultBroadcastNotify::set_attacker_name(const ::std::string& value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_attacker_name(const char* value) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_attacker_name(const char* value, size_t size) {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightResultBroadcastNotify::mutable_attacker_name() {
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  return attacker_name_;
}
inline ::std::string* FightResultBroadcastNotify::release_attacker_name() {
  clear_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_name_;
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 attacker_gender = 13;
inline bool FightResultBroadcastNotify::has_attacker_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightResultBroadcastNotify::set_has_attacker_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightResultBroadcastNotify::clear_has_attacker_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightResultBroadcastNotify::clear_attacker_gender() {
  attacker_gender_ = 0;
  clear_has_attacker_gender();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::attacker_gender() const {
  return attacker_gender_;
}
inline void FightResultBroadcastNotify::set_attacker_gender(::google::protobuf::int32 value) {
  set_has_attacker_gender();
  attacker_gender_ = value;
}

// required int32 attacker_in_team = 5;
inline bool FightResultBroadcastNotify::has_attacker_in_team() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightResultBroadcastNotify::set_has_attacker_in_team() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightResultBroadcastNotify::clear_has_attacker_in_team() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightResultBroadcastNotify::clear_attacker_in_team() {
  attacker_in_team_ = 0;
  clear_has_attacker_in_team();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::attacker_in_team() const {
  return attacker_in_team_;
}
inline void FightResultBroadcastNotify::set_attacker_in_team(::google::protobuf::int32 value) {
  set_has_attacker_in_team();
  attacker_in_team_ = value;
}

// optional int32 attacker_vip_level = 6;
inline bool FightResultBroadcastNotify::has_attacker_vip_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightResultBroadcastNotify::set_has_attacker_vip_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightResultBroadcastNotify::clear_has_attacker_vip_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightResultBroadcastNotify::clear_attacker_vip_level() {
  attacker_vip_level_ = 0;
  clear_has_attacker_vip_level();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::attacker_vip_level() const {
  return attacker_vip_level_;
}
inline void FightResultBroadcastNotify::set_attacker_vip_level(::google::protobuf::int32 value) {
  set_has_attacker_vip_level();
  attacker_vip_level_ = value;
}

// required int64 defender_guid = 14;
inline bool FightResultBroadcastNotify::has_defender_guid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightResultBroadcastNotify::set_has_defender_guid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightResultBroadcastNotify::clear_has_defender_guid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightResultBroadcastNotify::clear_defender_guid() {
  defender_guid_ = GOOGLE_LONGLONG(0);
  clear_has_defender_guid();
}
inline ::google::protobuf::int64 FightResultBroadcastNotify::defender_guid() const {
  return defender_guid_;
}
inline void FightResultBroadcastNotify::set_defender_guid(::google::protobuf::int64 value) {
  set_has_defender_guid();
  defender_guid_ = value;
}

// required string defender_name = 15;
inline bool FightResultBroadcastNotify::has_defender_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightResultBroadcastNotify::set_has_defender_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightResultBroadcastNotify::clear_has_defender_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightResultBroadcastNotify::clear_defender_name() {
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    defender_name_->clear();
  }
  clear_has_defender_name();
}
inline const ::std::string& FightResultBroadcastNotify::defender_name() const {
  return *defender_name_;
}
inline void FightResultBroadcastNotify::set_defender_name(const ::std::string& value) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_defender_name(const char* value) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_defender_name(const char* value, size_t size) {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightResultBroadcastNotify::mutable_defender_name() {
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  return defender_name_;
}
inline ::std::string* FightResultBroadcastNotify::release_defender_name() {
  clear_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defender_name_;
    defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 defender_in_team = 9;
inline bool FightResultBroadcastNotify::has_defender_in_team() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightResultBroadcastNotify::set_has_defender_in_team() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightResultBroadcastNotify::clear_has_defender_in_team() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightResultBroadcastNotify::clear_defender_in_team() {
  defender_in_team_ = 0;
  clear_has_defender_in_team();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::defender_in_team() const {
  return defender_in_team_;
}
inline void FightResultBroadcastNotify::set_defender_in_team(::google::protobuf::int32 value) {
  set_has_defender_in_team();
  defender_in_team_ = value;
}

// optional int32 defender_vip_level = 10;
inline bool FightResultBroadcastNotify::has_defender_vip_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightResultBroadcastNotify::set_has_defender_vip_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightResultBroadcastNotify::clear_has_defender_vip_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightResultBroadcastNotify::clear_defender_vip_level() {
  defender_vip_level_ = 0;
  clear_has_defender_vip_level();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::defender_vip_level() const {
  return defender_vip_level_;
}
inline void FightResultBroadcastNotify::set_defender_vip_level(::google::protobuf::int32 value) {
  set_has_defender_vip_level();
  defender_vip_level_ = value;
}

// optional int32 is_attacker_win = 11;
inline bool FightResultBroadcastNotify::has_is_attacker_win() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightResultBroadcastNotify::set_has_is_attacker_win() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightResultBroadcastNotify::clear_has_is_attacker_win() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightResultBroadcastNotify::clear_is_attacker_win() {
  is_attacker_win_ = 0;
  clear_has_is_attacker_win();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::is_attacker_win() const {
  return is_attacker_win_;
}
inline void FightResultBroadcastNotify::set_is_attacker_win(::google::protobuf::int32 value) {
  set_has_is_attacker_win();
  is_attacker_win_ = value;
}

// optional int64 sender_guid = 16;
inline bool FightResultBroadcastNotify::has_sender_guid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightResultBroadcastNotify::set_has_sender_guid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightResultBroadcastNotify::clear_has_sender_guid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightResultBroadcastNotify::clear_sender_guid() {
  sender_guid_ = GOOGLE_LONGLONG(0);
  clear_has_sender_guid();
}
inline ::google::protobuf::int64 FightResultBroadcastNotify::sender_guid() const {
  return sender_guid_;
}
inline void FightResultBroadcastNotify::set_sender_guid(::google::protobuf::int64 value) {
  set_has_sender_guid();
  sender_guid_ = value;
}

// optional int32 sender_gender = 17;
inline bool FightResultBroadcastNotify::has_sender_gender() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightResultBroadcastNotify::set_has_sender_gender() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightResultBroadcastNotify::clear_has_sender_gender() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightResultBroadcastNotify::clear_sender_gender() {
  sender_gender_ = 0;
  clear_has_sender_gender();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::sender_gender() const {
  return sender_gender_;
}
inline void FightResultBroadcastNotify::set_sender_gender(::google::protobuf::int32 value) {
  set_has_sender_gender();
  sender_gender_ = value;
}

// optional int32 sender_vip_level = 18;
inline bool FightResultBroadcastNotify::has_sender_vip_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightResultBroadcastNotify::set_has_sender_vip_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightResultBroadcastNotify::clear_has_sender_vip_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightResultBroadcastNotify::clear_sender_vip_level() {
  sender_vip_level_ = 0;
  clear_has_sender_vip_level();
}
inline ::google::protobuf::int32 FightResultBroadcastNotify::sender_vip_level() const {
  return sender_vip_level_;
}
inline void FightResultBroadcastNotify::set_sender_vip_level(::google::protobuf::int32 value) {
  set_has_sender_vip_level();
  sender_vip_level_ = value;
}

// optional string sender_name = 19;
inline bool FightResultBroadcastNotify::has_sender_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FightResultBroadcastNotify::set_has_sender_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FightResultBroadcastNotify::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FightResultBroadcastNotify::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& FightResultBroadcastNotify::sender_name() const {
  return *sender_name_;
}
inline void FightResultBroadcastNotify::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void FightResultBroadcastNotify::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightResultBroadcastNotify::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* FightResultBroadcastNotify::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ChannelType>() {
  return protocols::common::ChannelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5fchat_2eproto__INCLUDED
