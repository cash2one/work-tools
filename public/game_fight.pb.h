// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_fight.proto

#ifndef PROTOBUF_game_5ffight_2eproto__INCLUDED
#define PROTOBUF_game_5ffight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "game_common.pb.h"
#include "game_guild.pb.h"
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_game_5ffight_2eproto();
void protobuf_AssignDesc_game_5ffight_2eproto();
void protobuf_ShutdownFile_game_5ffight_2eproto();

class Bonus;
class FightResult;
class FightMonsterRequest;
class FightMonsterResponse;
class SkipFightRequest;
class SkipFightResponse;
class LeaveFightRequest;
class LeaveFightResponse;
class SendFightToWorldRequest;
class SendFightToWorldResponse;
class GetFightDataRequest;
class GetFightDataResponse;
class AlienBossActNotify;
class EnterAlienBossMapRequest;
class EnterAlienBossMapResponse;
class LeaveAlienBossMapRequest;
class LeaveAlienBossMapResponse;
class PlayerBossHurt;
class AlienBossHurtRank;
class AlienBossRewardsNotify;
class EncourageBuffRequest;
class EncourageBuffResponse;
class QuickRespawnRequest;
class QuickRespawnResponse;
class UpdateAlienBossBuffNotify;
class GetBossMapInfoRequest;
class GetBossMapInfoResponse;
class EnterPvPMapRequest;
class EnterPvPMapResponse;
class LeavePvPMapRequest;
class LeavePvPMapResponse;
class GetPvPMapInfoRequest;
class PlayerPvPRankInfo;
class GetPvPMapInfoResponse;
class ClearPvPCDRequest;
class ClearPvPCDResponse;
class PvPUpdateCD;
class PvPActNotify;
class PvPRobotNotify;
class PvPBonusNotify;
class TakePvPGiftRequest;
class TakePvPGiftResponse;
class BossInfo;
class GuildWarContributionPlayer;
class EnterGuildWarMapRequest;
class EnterGuildWarMapResponse;
class LeaveGuildWarMapRequest;
class LeaveGuildWarMapResponse;
class GuildWarSchedule;
class GetGuildWarMapInfoRequest;
class GuildWarMapInfo;
class GetGuildWarMapInfoResponse;
class GuildWarNotify;
class GuildWarGuildBattleInfo;
class GuildWarPlayerInfo;
class GuildWarAward;
class GuildWarBattleResult;
class CompetitorGuild;
class GuildWarAddBuffRequest;
class GuildWarAddBuffResponse;
class GuildWarContributionRank;
class GuildWarContributionRankRequest;
class GuildWarContributionRankResponse;
class GuildWarContributionRankNotify;
class UpdateTreasureBoxNotify;
class TakeTreasureBoxBonusRequest;
class TakeTreasureBoxBonusResponse;
class GuildWarGetCompetitionInfoRequest;
class GuildWarGetCompetitionInfoResponse;
class GetAutoInstanceStatusRequest;
class GetAutoInstanceStatusResponse;
class StartAutoFightInstanceRequest;
class StartAutoFightInstanceResponse;
class StopAutoFightInstanceRequest;
class StopAutoFightInstanceResponse;
class FinishAutoFightInstanceRequest;
class FinishAutoFightInstanceResponse;
class AutoFightInstanceNotifyRequest;
class AutoFightInstanceNotifyResponse;
class AutoFightInstanceNotify;

enum AlienBossActNotifyType {
  AlienBossActNotifyType_PRE_START = 1,
  AlienBossActNotifyType_START = 2,
  AlienBossActNotifyType_TIME_LEFT = 3,
  AlienBossActNotifyType_ACT_PLAYER_COUNT = 4,
  AlienBossActNotifyType_DAMAGE_INCREASE_PERCENT = 5,
  AlienBossActNotifyType_FINISH = 6,
  AlienBossActNotifyType_MAP_CLOSE = 8,
  AlienBossActNotifyType_BOSS_HP = 7
};
bool AlienBossActNotifyType_IsValid(int value);
const AlienBossActNotifyType AlienBossActNotifyType_MIN = AlienBossActNotifyType_PRE_START;
const AlienBossActNotifyType AlienBossActNotifyType_MAX = AlienBossActNotifyType_MAP_CLOSE;
const int AlienBossActNotifyType_ARRAYSIZE = AlienBossActNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlienBossActNotifyType_descriptor();
inline const ::std::string& AlienBossActNotifyType_Name(AlienBossActNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlienBossActNotifyType_descriptor(), value);
}
inline bool AlienBossActNotifyType_Parse(
    const ::std::string& name, AlienBossActNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlienBossActNotifyType>(
    AlienBossActNotifyType_descriptor(), name, value);
}
enum AlienBossRewardsType {
  AlienBossRewardsType_RANK = 1,
  AlienBossRewardsType_LAST_SHOT = 2,
  AlienBossRewardsType_BASE = 3
};
bool AlienBossRewardsType_IsValid(int value);
const AlienBossRewardsType AlienBossRewardsType_MIN = AlienBossRewardsType_RANK;
const AlienBossRewardsType AlienBossRewardsType_MAX = AlienBossRewardsType_BASE;
const int AlienBossRewardsType_ARRAYSIZE = AlienBossRewardsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlienBossRewardsType_descriptor();
inline const ::std::string& AlienBossRewardsType_Name(AlienBossRewardsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlienBossRewardsType_descriptor(), value);
}
inline bool AlienBossRewardsType_Parse(
    const ::std::string& name, AlienBossRewardsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlienBossRewardsType>(
    AlienBossRewardsType_descriptor(), name, value);
}
enum PvPActNotifyType {
  PvP_CONT_WIN_UPDATE = 1,
  PvP_Challenge_NOTIFY = 2,
  PvP_BEATED_NOTIFY = 3,
  PvP_LEVEL_UPDATE = 4,
  PvP_WIN_COUNT = 5,
  PvP_PRE_START = 6,
  PvP_START = 7,
  PvP_FINISH = 8,
  PvP_LEVEL_FIRST_5 = 9,
  PvP_FIRST_BLOOD = 10,
  PvP_PLAYER_CONT_WIN = 11,
  PvP_BEAT_10_CONT_WIN = 12,
  PvP_TOP_3_WINNER = 13
};
bool PvPActNotifyType_IsValid(int value);
const PvPActNotifyType PvPActNotifyType_MIN = PvP_CONT_WIN_UPDATE;
const PvPActNotifyType PvPActNotifyType_MAX = PvP_TOP_3_WINNER;
const int PvPActNotifyType_ARRAYSIZE = PvPActNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PvPActNotifyType_descriptor();
inline const ::std::string& PvPActNotifyType_Name(PvPActNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PvPActNotifyType_descriptor(), value);
}
inline bool PvPActNotifyType_Parse(
    const ::std::string& name, PvPActNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PvPActNotifyType>(
    PvPActNotifyType_descriptor(), name, value);
}
enum PvPBonusType {
  PvPBonusType_WIN_BONUS = 1,
  PvPBonusType_SPEICIAL_LEVEL_BONUS = 2,
  PvPBonusType_MAX_LEVEL_BONUS = 3
};
bool PvPBonusType_IsValid(int value);
const PvPBonusType PvPBonusType_MIN = PvPBonusType_WIN_BONUS;
const PvPBonusType PvPBonusType_MAX = PvPBonusType_MAX_LEVEL_BONUS;
const int PvPBonusType_ARRAYSIZE = PvPBonusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PvPBonusType_descriptor();
inline const ::std::string& PvPBonusType_Name(PvPBonusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PvPBonusType_descriptor(), value);
}
inline bool PvPBonusType_Parse(
    const ::std::string& name, PvPBonusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PvPBonusType>(
    PvPBonusType_descriptor(), name, value);
}
enum ContestType {
  ContestType_Preliminaries = 1,
  ContestType_Quarter_Finals = 2,
  ContestType_Semi_Finals = 3,
  ContestType_Finals = 4
};
bool ContestType_IsValid(int value);
const ContestType ContestType_MIN = ContestType_Preliminaries;
const ContestType ContestType_MAX = ContestType_Finals;
const int ContestType_ARRAYSIZE = ContestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContestType_descriptor();
inline const ::std::string& ContestType_Name(ContestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContestType_descriptor(), value);
}
inline bool ContestType_Parse(
    const ::std::string& name, ContestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContestType>(
    ContestType_descriptor(), name, value);
}
enum ContestProgressType {
  ContestProgressType_Wait = 0,
  ContestProgressType_Prepare = 1,
  ContestProgressType_Start = 2,
  ContestProgressType_Fight_Finish = 3,
  ContestProgressType_Box_Bonus = 4,
  ContestProgressType_Map_Close = 5
};
bool ContestProgressType_IsValid(int value);
const ContestProgressType ContestProgressType_MIN = ContestProgressType_Wait;
const ContestProgressType ContestProgressType_MAX = ContestProgressType_Map_Close;
const int ContestProgressType_ARRAYSIZE = ContestProgressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContestProgressType_descriptor();
inline const ::std::string& ContestProgressType_Name(ContestProgressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContestProgressType_descriptor(), value);
}
inline bool ContestProgressType_Parse(
    const ::std::string& name, ContestProgressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContestProgressType>(
    ContestProgressType_descriptor(), name, value);
}
enum GuildWarEventType {
  GuildWarEvent_FutureEvent = 1,
  GuildWarEvent_NowEvent = 2
};
bool GuildWarEventType_IsValid(int value);
const GuildWarEventType GuildWarEventType_MIN = GuildWarEvent_FutureEvent;
const GuildWarEventType GuildWarEventType_MAX = GuildWarEvent_NowEvent;
const int GuildWarEventType_ARRAYSIZE = GuildWarEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildWarEventType_descriptor();
inline const ::std::string& GuildWarEventType_Name(GuildWarEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildWarEventType_descriptor(), value);
}
inline bool GuildWarEventType_Parse(
    const ::std::string& name, GuildWarEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildWarEventType>(
    GuildWarEventType_descriptor(), name, value);
}
enum GuildWarNotifyType {
  GuildWarNotify_CD = 1,
  GuildWarNotify_BOSS_Info = 2,
  GuildWarNotify_BOSS_BUFF = 3,
  GuildWarNotify_Kill_BOSS = 4,
  GuildWarNotify_ADD_BUFF = 5,
  GuildWarNotify_Preliminaries_Hourly_Notify = 6,
  GuildWarNotify_Preliminaries_CountDown_Notify = 7,
  GuildWarNotify_Prepare = 10,
  GuildWarNotify_Start = 8,
  GuildWarNotify_End = 9,
  GuildWarNotify_Close = 23,
  GuildWarNotify_BattleResult = 11,
  GuildWarNotify_FightResult = 12,
  GuildWarNotify_FinalGuildRank = 13,
  GuildWarNotify_Award_Personal = 14,
  GuildWarNotify_Award_Guild = 15,
  GuildWarNotify_Award_Rank_Personal = 16,
  GuildWarNotify_Award_Rank_Guild = 17,
  GuildWarNotify_Guild_Battle_Info = 18,
  GuildWarNotify_Win_Count_Down = 19,
  GuildWarNotify_Gift_Count_Down = 20,
  GuildWarNotify_System_Top_8_Notify = 21,
  GuildWarNotify_System_Quarter_Notify = 22,
  GuildWarNotify_BOSS_Personal_bonus = 24
};
bool GuildWarNotifyType_IsValid(int value);
const GuildWarNotifyType GuildWarNotifyType_MIN = GuildWarNotify_CD;
const GuildWarNotifyType GuildWarNotifyType_MAX = GuildWarNotify_BOSS_Personal_bonus;
const int GuildWarNotifyType_ARRAYSIZE = GuildWarNotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildWarNotifyType_descriptor();
inline const ::std::string& GuildWarNotifyType_Name(GuildWarNotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildWarNotifyType_descriptor(), value);
}
inline bool GuildWarNotifyType_Parse(
    const ::std::string& name, GuildWarNotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildWarNotifyType>(
    GuildWarNotifyType_descriptor(), name, value);
}
enum GuildWarBossBuffType {
  Boss_Damage_Buff = 1,
  Boss_Defence_Weak = 2
};
bool GuildWarBossBuffType_IsValid(int value);
const GuildWarBossBuffType GuildWarBossBuffType_MIN = Boss_Damage_Buff;
const GuildWarBossBuffType GuildWarBossBuffType_MAX = Boss_Defence_Weak;
const int GuildWarBossBuffType_ARRAYSIZE = GuildWarBossBuffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildWarBossBuffType_descriptor();
inline const ::std::string& GuildWarBossBuffType_Name(GuildWarBossBuffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildWarBossBuffType_descriptor(), value);
}
inline bool GuildWarBossBuffType_Parse(
    const ::std::string& name, GuildWarBossBuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildWarBossBuffType>(
    GuildWarBossBuffType_descriptor(), name, value);
}
// ===================================================================

class Bonus : public ::google::protobuf::Message {
 public:
  Bonus();
  virtual ~Bonus();
  
  Bonus(const Bonus& from);
  
  inline Bonus& operator=(const Bonus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bonus& default_instance();
  
  void Swap(Bonus* other);
  
  // implements Message ----------------------------------------------
  
  Bonus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bonus& from);
  void MergeFrom(const Bonus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional int32 exp_bonus = 2;
  inline bool has_exp_bonus() const;
  inline void clear_exp_bonus();
  static const int kExpBonusFieldNumber = 2;
  inline ::google::protobuf::int32 exp_bonus() const;
  inline void set_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 vip_level = 13;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 13;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);
  
  // optional int32 vip_exp_factor = 10;
  inline bool has_vip_exp_factor() const;
  inline void clear_vip_exp_factor();
  static const int kVipExpFactorFieldNumber = 10;
  inline ::google::protobuf::int32 vip_exp_factor() const;
  inline void set_vip_exp_factor(::google::protobuf::int32 value);
  
  // optional int32 team_exp_factor = 11;
  inline bool has_team_exp_factor() const;
  inline void clear_team_exp_factor();
  static const int kTeamExpFactorFieldNumber = 11;
  inline ::google::protobuf::int32 team_exp_factor() const;
  inline void set_team_exp_factor(::google::protobuf::int32 value);
  
  // optional int32 other_exp_factor = 12;
  inline bool has_other_exp_factor() const;
  inline void clear_other_exp_factor();
  static const int kOtherExpFactorFieldNumber = 12;
  inline ::google::protobuf::int32 other_exp_factor() const;
  inline void set_other_exp_factor(::google::protobuf::int32 value);
  
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  inline int skill_bonus_size() const;
  inline void clear_skill_bonus();
  static const int kSkillBonusFieldNumber = 3;
  inline const ::protocols::common::SkillBonus& skill_bonus(int index) const;
  inline ::protocols::common::SkillBonus* mutable_skill_bonus(int index);
  inline ::protocols::common::SkillBonus* add_skill_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillBonus >&
      skill_bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillBonus >*
      mutable_skill_bonus();
  
  // optional int32 gold_coin_bonus = 8;
  inline bool has_gold_coin_bonus() const;
  inline void clear_gold_coin_bonus();
  static const int kGoldCoinBonusFieldNumber = 8;
  inline ::google::protobuf::int32 gold_coin_bonus() const;
  inline void set_gold_coin_bonus(::google::protobuf::int32 value);
  
  // optional int32 bag_has_enough_slots = 4;
  inline bool has_bag_has_enough_slots() const;
  inline void clear_bag_has_enough_slots();
  static const int kBagHasEnoughSlotsFieldNumber = 4;
  inline ::google::protobuf::int32 bag_has_enough_slots() const;
  inline void set_bag_has_enough_slots(::google::protobuf::int32 value);
  
  // optional int32 base_exp_bonus = 9;
  inline bool has_base_exp_bonus() const;
  inline void clear_base_exp_bonus();
  static const int kBaseExpBonusFieldNumber = 9;
  inline ::google::protobuf::int32 base_exp_bonus() const;
  inline void set_base_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 base_gold_coin_bonus = 14;
  inline bool has_base_gold_coin_bonus() const;
  inline void clear_base_gold_coin_bonus();
  static const int kBaseGoldCoinBonusFieldNumber = 14;
  inline ::google::protobuf::int32 base_gold_coin_bonus() const;
  inline void set_base_gold_coin_bonus(::google::protobuf::int32 value);
  
  // optional int32 cont_win_exp_bonus = 15;
  inline bool has_cont_win_exp_bonus() const;
  inline void clear_cont_win_exp_bonus();
  static const int kContWinExpBonusFieldNumber = 15;
  inline ::google::protobuf::int32 cont_win_exp_bonus() const;
  inline void set_cont_win_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 cont_win_gold_bonus = 16;
  inline bool has_cont_win_gold_bonus() const;
  inline void clear_cont_win_gold_bonus();
  static const int kContWinGoldBonusFieldNumber = 16;
  inline ::google::protobuf::int32 cont_win_gold_bonus() const;
  inline void set_cont_win_gold_bonus(::google::protobuf::int32 value);
  
  // optional int32 de_cont_win_exp_bonus = 17;
  inline bool has_de_cont_win_exp_bonus() const;
  inline void clear_de_cont_win_exp_bonus();
  static const int kDeContWinExpBonusFieldNumber = 17;
  inline ::google::protobuf::int32 de_cont_win_exp_bonus() const;
  inline void set_de_cont_win_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 de_cont_win_gold_bonus = 18;
  inline bool has_de_cont_win_gold_bonus() const;
  inline void clear_de_cont_win_gold_bonus();
  static const int kDeContWinGoldBonusFieldNumber = 18;
  inline ::google::protobuf::int32 de_cont_win_gold_bonus() const;
  inline void set_de_cont_win_gold_bonus(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  inline int drop_item_size() const;
  inline void clear_drop_item();
  static const int kDropItemFieldNumber = 5;
  inline const ::protocols::common::ItemInfo& drop_item(int index) const;
  inline ::protocols::common::ItemInfo* mutable_drop_item(int index);
  inline ::protocols::common::ItemInfo* add_drop_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      drop_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_drop_item();
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  inline int quest_drop_item_size() const;
  inline void clear_quest_drop_item();
  static const int kQuestDropItemFieldNumber = 7;
  inline const ::protocols::common::ItemInfo& quest_drop_item(int index) const;
  inline ::protocols::common::ItemInfo* mutable_quest_drop_item(int index);
  inline ::protocols::common::ItemInfo* add_quest_drop_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      quest_drop_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_quest_drop_item();
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  inline int equipment_size() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 6;
  inline const ::protocols::common::EquipDetail& equipment(int index) const;
  inline ::protocols::common::EquipDetail* mutable_equipment(int index);
  inline ::protocols::common::EquipDetail* add_equipment();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipDetail >&
      equipment() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipDetail >*
      mutable_equipment();
  
  // @@protoc_insertion_point(class_scope:protocols.common.Bonus)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_exp_bonus();
  inline void clear_has_exp_bonus();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_vip_exp_factor();
  inline void clear_has_vip_exp_factor();
  inline void set_has_team_exp_factor();
  inline void clear_has_team_exp_factor();
  inline void set_has_other_exp_factor();
  inline void clear_has_other_exp_factor();
  inline void set_has_gold_coin_bonus();
  inline void clear_has_gold_coin_bonus();
  inline void set_has_bag_has_enough_slots();
  inline void clear_has_bag_has_enough_slots();
  inline void set_has_base_exp_bonus();
  inline void clear_has_base_exp_bonus();
  inline void set_has_base_gold_coin_bonus();
  inline void clear_has_base_gold_coin_bonus();
  inline void set_has_cont_win_exp_bonus();
  inline void clear_has_cont_win_exp_bonus();
  inline void set_has_cont_win_gold_bonus();
  inline void clear_has_cont_win_gold_bonus();
  inline void set_has_de_cont_win_exp_bonus();
  inline void clear_has_de_cont_win_exp_bonus();
  inline void set_has_de_cont_win_gold_bonus();
  inline void clear_has_de_cont_win_gold_bonus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 exp_bonus_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 vip_exp_factor_;
  ::google::protobuf::int32 team_exp_factor_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillBonus > skill_bonus_;
  ::google::protobuf::int32 other_exp_factor_;
  ::google::protobuf::int32 gold_coin_bonus_;
  ::google::protobuf::int32 bag_has_enough_slots_;
  ::google::protobuf::int32 base_exp_bonus_;
  ::google::protobuf::int32 base_gold_coin_bonus_;
  ::google::protobuf::int32 cont_win_exp_bonus_;
  ::google::protobuf::int32 cont_win_gold_bonus_;
  ::google::protobuf::int32 de_cont_win_exp_bonus_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > drop_item_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > quest_drop_item_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipDetail > equipment_;
  ::google::protobuf::int32 de_cont_win_gold_bonus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static Bonus* default_instance_;
};
// -------------------------------------------------------------------

class FightResult : public ::google::protobuf::Message {
 public:
  FightResult();
  virtual ~FightResult();
  
  FightResult(const FightResult& from);
  
  inline FightResult& operator=(const FightResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FightResult& default_instance();
  
  void Swap(FightResult* other);
  
  // implements Message ----------------------------------------------
  
  FightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightResult& from);
  void MergeFrom(const FightResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 battle_id = 5;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 5;
  inline ::google::protobuf::int32 battle_id() const;
  inline void set_battle_id(::google::protobuf::int32 value);
  
  // repeated .protocols.common.Fighter fighter = 1;
  inline int fighter_size() const;
  inline void clear_fighter();
  static const int kFighterFieldNumber = 1;
  inline const ::protocols::common::Fighter& fighter(int index) const;
  inline ::protocols::common::Fighter* mutable_fighter(int index);
  inline ::protocols::common::Fighter* add_fighter();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Fighter >&
      fighter() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Fighter >*
      mutable_fighter();
  
  // optional int32 winner = 2;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 2;
  inline ::google::protobuf::int32 winner() const;
  inline void set_winner(::google::protobuf::int32 value);
  
  // repeated .protocols.common.Bonus bonus = 3;
  inline int bonus_size() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 3;
  inline const ::protocols::common::Bonus& bonus(int index) const;
  inline ::protocols::common::Bonus* mutable_bonus(int index);
  inline ::protocols::common::Bonus* add_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Bonus >&
      bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Bonus >*
      mutable_bonus();
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  inline int camp_a_battle_skills_size() const;
  inline void clear_camp_a_battle_skills();
  static const int kCampABattleSkillsFieldNumber = 6;
  inline const ::protocols::common::SkillInfo& camp_a_battle_skills(int index) const;
  inline ::protocols::common::SkillInfo* mutable_camp_a_battle_skills(int index);
  inline ::protocols::common::SkillInfo* add_camp_a_battle_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >&
      camp_a_battle_skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >*
      mutable_camp_a_battle_skills();
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  inline int camp_b_battle_skills_size() const;
  inline void clear_camp_b_battle_skills();
  static const int kCampBBattleSkillsFieldNumber = 7;
  inline const ::protocols::common::SkillInfo& camp_b_battle_skills(int index) const;
  inline ::protocols::common::SkillInfo* mutable_camp_b_battle_skills(int index);
  inline ::protocols::common::SkillInfo* add_camp_b_battle_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >&
      camp_b_battle_skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >*
      mutable_camp_b_battle_skills();
  
  // repeated bytes round_data = 4;
  inline int round_data_size() const;
  inline void clear_round_data();
  static const int kRoundDataFieldNumber = 4;
  inline const ::std::string& round_data(int index) const;
  inline ::std::string* mutable_round_data(int index);
  inline void set_round_data(int index, const ::std::string& value);
  inline void set_round_data(int index, const char* value);
  inline void set_round_data(int index, const void* value, size_t size);
  inline ::std::string* add_round_data();
  inline void add_round_data(const ::std::string& value);
  inline void add_round_data(const char* value);
  inline void add_round_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& round_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_round_data();
  
  // optional string npc_name = 8;
  inline bool has_npc_name() const;
  inline void clear_npc_name();
  static const int kNpcNameFieldNumber = 8;
  inline const ::std::string& npc_name() const;
  inline void set_npc_name(const ::std::string& value);
  inline void set_npc_name(const char* value);
  inline void set_npc_name(const char* value, size_t size);
  inline ::std::string* mutable_npc_name();
  inline ::std::string* release_npc_name();
  
  // optional int32 npc_level = 11;
  inline bool has_npc_level() const;
  inline void clear_npc_level();
  static const int kNpcLevelFieldNumber = 11;
  inline ::google::protobuf::int32 npc_level() const;
  inline void set_npc_level(::google::protobuf::int32 value);
  
  // optional int32 left_free_skip_times = 9;
  inline bool has_left_free_skip_times() const;
  inline void clear_left_free_skip_times();
  static const int kLeftFreeSkipTimesFieldNumber = 9;
  inline ::google::protobuf::int32 left_free_skip_times() const;
  inline void set_left_free_skip_times(::google::protobuf::int32 value);
  
  // optional int32 auto_skip_time_limit = 10;
  inline bool has_auto_skip_time_limit() const;
  inline void clear_auto_skip_time_limit();
  static const int kAutoSkipTimeLimitFieldNumber = 10;
  inline ::google::protobuf::int32 auto_skip_time_limit() const;
  inline void set_auto_skip_time_limit(::google::protobuf::int32 value);
  
  // optional int32 camp_a_dead_persons = 12;
  inline bool has_camp_a_dead_persons() const;
  inline void clear_camp_a_dead_persons();
  static const int kCampADeadPersonsFieldNumber = 12;
  inline ::google::protobuf::int32 camp_a_dead_persons() const;
  inline void set_camp_a_dead_persons(::google::protobuf::int32 value);
  
  // optional int32 camp_b_dead_persons = 13;
  inline bool has_camp_b_dead_persons() const;
  inline void clear_camp_b_dead_persons();
  static const int kCampBDeadPersonsFieldNumber = 13;
  inline ::google::protobuf::int32 camp_b_dead_persons() const;
  inline void set_camp_b_dead_persons(::google::protobuf::int32 value);
  
  // optional int32 battle_group_id = 14;
  inline bool has_battle_group_id() const;
  inline void clear_battle_group_id();
  static const int kBattleGroupIdFieldNumber = 14;
  inline ::google::protobuf::int32 battle_group_id() const;
  inline void set_battle_group_id(::google::protobuf::int32 value);
  
  // optional int32 camp_a_dead_players = 15;
  inline bool has_camp_a_dead_players() const;
  inline void clear_camp_a_dead_players();
  static const int kCampADeadPlayersFieldNumber = 15;
  inline ::google::protobuf::int32 camp_a_dead_players() const;
  inline void set_camp_a_dead_players(::google::protobuf::int32 value);
  
  // optional int32 camp_b_dead_players = 16;
  inline bool has_camp_b_dead_players() const;
  inline void clear_camp_b_dead_players();
  static const int kCampBDeadPlayersFieldNumber = 16;
  inline ::google::protobuf::int32 camp_b_dead_players() const;
  inline void set_camp_b_dead_players(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FightResult)
 private:
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_npc_name();
  inline void clear_has_npc_name();
  inline void set_has_npc_level();
  inline void clear_has_npc_level();
  inline void set_has_left_free_skip_times();
  inline void clear_has_left_free_skip_times();
  inline void set_has_auto_skip_time_limit();
  inline void clear_has_auto_skip_time_limit();
  inline void set_has_camp_a_dead_persons();
  inline void clear_has_camp_a_dead_persons();
  inline void set_has_camp_b_dead_persons();
  inline void clear_has_camp_b_dead_persons();
  inline void set_has_battle_group_id();
  inline void clear_has_battle_group_id();
  inline void set_has_camp_a_dead_players();
  inline void clear_has_camp_a_dead_players();
  inline void set_has_camp_b_dead_players();
  inline void clear_has_camp_b_dead_players();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::Fighter > fighter_;
  ::google::protobuf::int32 battle_id_;
  ::google::protobuf::int32 winner_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::Bonus > bonus_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo > camp_a_battle_skills_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo > camp_b_battle_skills_;
  ::google::protobuf::RepeatedPtrField< ::std::string> round_data_;
  ::std::string* npc_name_;
  ::google::protobuf::int32 npc_level_;
  ::google::protobuf::int32 left_free_skip_times_;
  ::google::protobuf::int32 auto_skip_time_limit_;
  ::google::protobuf::int32 camp_a_dead_persons_;
  ::google::protobuf::int32 camp_b_dead_persons_;
  ::google::protobuf::int32 battle_group_id_;
  ::google::protobuf::int32 camp_a_dead_players_;
  ::google::protobuf::int32 camp_b_dead_players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static FightResult* default_instance_;
};
// -------------------------------------------------------------------

class FightMonsterRequest : public ::google::protobuf::Message {
 public:
  FightMonsterRequest();
  virtual ~FightMonsterRequest();
  
  FightMonsterRequest(const FightMonsterRequest& from);
  
  inline FightMonsterRequest& operator=(const FightMonsterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FightMonsterRequest& default_instance();
  
  void Swap(FightMonsterRequest* other);
  
  // implements Message ----------------------------------------------
  
  FightMonsterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightMonsterRequest& from);
  void MergeFrom(const FightMonsterRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 npc_id = 1;
  inline bool has_npc_id() const;
  inline void clear_npc_id();
  static const int kNpcIdFieldNumber = 1;
  inline ::google::protobuf::int32 npc_id() const;
  inline void set_npc_id(::google::protobuf::int32 value);
  
  // optional int32 battle_npc_id = 2;
  inline bool has_battle_npc_id() const;
  inline void clear_battle_npc_id();
  static const int kBattleNpcIdFieldNumber = 2;
  inline ::google::protobuf::int32 battle_npc_id() const;
  inline void set_battle_npc_id(::google::protobuf::int32 value);
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 3;
  inline bool has_fight_type() const;
  inline void clear_fight_type();
  static const int kFightTypeFieldNumber = 3;
  inline protocols::common::FIGHT_TYPE fight_type() const;
  inline void set_fight_type(protocols::common::FIGHT_TYPE value);
  
  // optional int32 npc_map_x = 4 [default = 0];
  inline bool has_npc_map_x() const;
  inline void clear_npc_map_x();
  static const int kNpcMapXFieldNumber = 4;
  inline ::google::protobuf::int32 npc_map_x() const;
  inline void set_npc_map_x(::google::protobuf::int32 value);
  
  // optional int32 npc_map_y = 5 [default = 0];
  inline bool has_npc_map_y() const;
  inline void clear_npc_map_y();
  static const int kNpcMapYFieldNumber = 5;
  inline ::google::protobuf::int32 npc_map_y() const;
  inline void set_npc_map_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FightMonsterRequest)
 private:
  inline void set_has_npc_id();
  inline void clear_has_npc_id();
  inline void set_has_battle_npc_id();
  inline void clear_has_battle_npc_id();
  inline void set_has_fight_type();
  inline void clear_has_fight_type();
  inline void set_has_npc_map_x();
  inline void clear_has_npc_map_x();
  inline void set_has_npc_map_y();
  inline void clear_has_npc_map_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 npc_id_;
  ::google::protobuf::int32 battle_npc_id_;
  int fight_type_;
  ::google::protobuf::int32 npc_map_x_;
  ::google::protobuf::int32 npc_map_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static FightMonsterRequest* default_instance_;
};
// -------------------------------------------------------------------

class FightMonsterResponse : public ::google::protobuf::Message {
 public:
  FightMonsterResponse();
  virtual ~FightMonsterResponse();
  
  FightMonsterResponse(const FightMonsterResponse& from);
  
  inline FightMonsterResponse& operator=(const FightMonsterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FightMonsterResponse& default_instance();
  
  void Swap(FightMonsterResponse* other);
  
  // implements Message ----------------------------------------------
  
  FightMonsterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightMonsterResponse& from);
  void MergeFrom(const FightMonsterResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 2;
  inline bool has_fight_type() const;
  inline void clear_fight_type();
  static const int kFightTypeFieldNumber = 2;
  inline protocols::common::FIGHT_TYPE fight_type() const;
  inline void set_fight_type(protocols::common::FIGHT_TYPE value);
  
  // optional int32 npc_id = 3;
  inline bool has_npc_id() const;
  inline void clear_npc_id();
  static const int kNpcIdFieldNumber = 3;
  inline ::google::protobuf::int32 npc_id() const;
  inline void set_npc_id(::google::protobuf::int32 value);
  
  // optional .protocols.common.FightResult result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline const ::protocols::common::FightResult& result() const;
  inline ::protocols::common::FightResult* mutable_result();
  inline ::protocols::common::FightResult* release_result();
  
  // optional int64 attacker_guid = 5;
  inline bool has_attacker_guid() const;
  inline void clear_attacker_guid();
  static const int kAttackerGuidFieldNumber = 5;
  inline ::google::protobuf::int64 attacker_guid() const;
  inline void set_attacker_guid(::google::protobuf::int64 value);
  
  // optional int64 defender_guid = 7;
  inline bool has_defender_guid() const;
  inline void clear_defender_guid();
  static const int kDefenderGuidFieldNumber = 7;
  inline ::google::protobuf::int64 defender_guid() const;
  inline void set_defender_guid(::google::protobuf::int64 value);
  
  // optional int64 attacker_fight_key = 8;
  inline bool has_attacker_fight_key() const;
  inline void clear_attacker_fight_key();
  static const int kAttackerFightKeyFieldNumber = 8;
  inline ::google::protobuf::int64 attacker_fight_key() const;
  inline void set_attacker_fight_key(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FightMonsterResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_fight_type();
  inline void clear_has_fight_type();
  inline void set_has_npc_id();
  inline void clear_has_npc_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_attacker_guid();
  inline void clear_has_attacker_guid();
  inline void set_has_defender_guid();
  inline void clear_has_defender_guid();
  inline void set_has_attacker_fight_key();
  inline void clear_has_attacker_fight_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  int fight_type_;
  ::protocols::common::FightResult* result_;
  ::google::protobuf::int64 attacker_guid_;
  ::google::protobuf::int64 defender_guid_;
  ::google::protobuf::int64 attacker_fight_key_;
  ::google::protobuf::int32 npc_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static FightMonsterResponse* default_instance_;
};
// -------------------------------------------------------------------

class SkipFightRequest : public ::google::protobuf::Message {
 public:
  SkipFightRequest();
  virtual ~SkipFightRequest();
  
  SkipFightRequest(const SkipFightRequest& from);
  
  inline SkipFightRequest& operator=(const SkipFightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipFightRequest& default_instance();
  
  void Swap(SkipFightRequest* other);
  
  // implements Message ----------------------------------------------
  
  SkipFightRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipFightRequest& from);
  void MergeFrom(const SkipFightRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
  inline bool has_skip_fight_type() const;
  inline void clear_skip_fight_type();
  static const int kSkipFightTypeFieldNumber = 1;
  inline protocols::common::SKIP_FIGHT_TYPE skip_fight_type() const;
  inline void set_skip_fight_type(protocols::common::SKIP_FIGHT_TYPE value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SkipFightRequest)
 private:
  inline void set_has_skip_fight_type();
  inline void clear_has_skip_fight_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int skip_fight_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static SkipFightRequest* default_instance_;
};
// -------------------------------------------------------------------

class SkipFightResponse : public ::google::protobuf::Message {
 public:
  SkipFightResponse();
  virtual ~SkipFightResponse();
  
  SkipFightResponse(const SkipFightResponse& from);
  
  inline SkipFightResponse& operator=(const SkipFightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipFightResponse& default_instance();
  
  void Swap(SkipFightResponse* other);
  
  // implements Message ----------------------------------------------
  
  SkipFightResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipFightResponse& from);
  void MergeFrom(const SkipFightResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 left_free_skip_fight_times = 2;
  inline bool has_left_free_skip_fight_times() const;
  inline void clear_left_free_skip_fight_times();
  static const int kLeftFreeSkipFightTimesFieldNumber = 2;
  inline ::google::protobuf::int32 left_free_skip_fight_times() const;
  inline void set_left_free_skip_fight_times(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SkipFightResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_left_free_skip_fight_times();
  inline void clear_has_left_free_skip_fight_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 left_free_skip_fight_times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static SkipFightResponse* default_instance_;
};
// -------------------------------------------------------------------

class LeaveFightRequest : public ::google::protobuf::Message {
 public:
  LeaveFightRequest();
  virtual ~LeaveFightRequest();
  
  LeaveFightRequest(const LeaveFightRequest& from);
  
  inline LeaveFightRequest& operator=(const LeaveFightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveFightRequest& default_instance();
  
  void Swap(LeaveFightRequest* other);
  
  // implements Message ----------------------------------------------
  
  LeaveFightRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveFightRequest& from);
  void MergeFrom(const LeaveFightRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveFightRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveFightRequest* default_instance_;
};
// -------------------------------------------------------------------

class LeaveFightResponse : public ::google::protobuf::Message {
 public:
  LeaveFightResponse();
  virtual ~LeaveFightResponse();
  
  LeaveFightResponse(const LeaveFightResponse& from);
  
  inline LeaveFightResponse& operator=(const LeaveFightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveFightResponse& default_instance();
  
  void Swap(LeaveFightResponse* other);
  
  // implements Message ----------------------------------------------
  
  LeaveFightResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveFightResponse& from);
  void MergeFrom(const LeaveFightResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 map_id = 2;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);
  
  // optional int32 map_x = 3;
  inline bool has_map_x() const;
  inline void clear_map_x();
  static const int kMapXFieldNumber = 3;
  inline ::google::protobuf::int32 map_x() const;
  inline void set_map_x(::google::protobuf::int32 value);
  
  // optional int32 map_y = 4;
  inline bool has_map_y() const;
  inline void clear_map_y();
  static const int kMapYFieldNumber = 4;
  inline ::google::protobuf::int32 map_y() const;
  inline void set_map_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveFightResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_map_x();
  inline void clear_has_map_x();
  inline void set_has_map_y();
  inline void clear_has_map_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 map_x_;
  ::google::protobuf::int32 map_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveFightResponse* default_instance_;
};
// -------------------------------------------------------------------

class SendFightToWorldRequest : public ::google::protobuf::Message {
 public:
  SendFightToWorldRequest();
  virtual ~SendFightToWorldRequest();
  
  SendFightToWorldRequest(const SendFightToWorldRequest& from);
  
  inline SendFightToWorldRequest& operator=(const SendFightToWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFightToWorldRequest& default_instance();
  
  void Swap(SendFightToWorldRequest* other);
  
  // implements Message ----------------------------------------------
  
  SendFightToWorldRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendFightToWorldRequest& from);
  void MergeFrom(const SendFightToWorldRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 fight_key = 1;
  inline bool has_fight_key() const;
  inline void clear_fight_key();
  static const int kFightKeyFieldNumber = 1;
  inline ::google::protobuf::int64 fight_key() const;
  inline void set_fight_key(::google::protobuf::int64 value);
  
  // optional int32 is_need_broadcast = 2;
  inline bool has_is_need_broadcast() const;
  inline void clear_is_need_broadcast();
  static const int kIsNeedBroadcastFieldNumber = 2;
  inline ::google::protobuf::int32 is_need_broadcast() const;
  inline void set_is_need_broadcast(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SendFightToWorldRequest)
 private:
  inline void set_has_fight_key();
  inline void clear_has_fight_key();
  inline void set_has_is_need_broadcast();
  inline void clear_has_is_need_broadcast();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 fight_key_;
  ::google::protobuf::int32 is_need_broadcast_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static SendFightToWorldRequest* default_instance_;
};
// -------------------------------------------------------------------

class SendFightToWorldResponse : public ::google::protobuf::Message {
 public:
  SendFightToWorldResponse();
  virtual ~SendFightToWorldResponse();
  
  SendFightToWorldResponse(const SendFightToWorldResponse& from);
  
  inline SendFightToWorldResponse& operator=(const SendFightToWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFightToWorldResponse& default_instance();
  
  void Swap(SendFightToWorldResponse* other);
  
  // implements Message ----------------------------------------------
  
  SendFightToWorldResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendFightToWorldResponse& from);
  void MergeFrom(const SendFightToWorldResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.SendFightToWorldResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static SendFightToWorldResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFightDataRequest : public ::google::protobuf::Message {
 public:
  GetFightDataRequest();
  virtual ~GetFightDataRequest();
  
  GetFightDataRequest(const GetFightDataRequest& from);
  
  inline GetFightDataRequest& operator=(const GetFightDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFightDataRequest& default_instance();
  
  void Swap(GetFightDataRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFightDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFightDataRequest& from);
  void MergeFrom(const GetFightDataRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 fight_key = 1;
  inline bool has_fight_key() const;
  inline void clear_fight_key();
  static const int kFightKeyFieldNumber = 1;
  inline ::google::protobuf::int64 fight_key() const;
  inline void set_fight_key(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetFightDataRequest)
 private:
  inline void set_has_fight_key();
  inline void clear_has_fight_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 fight_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetFightDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFightDataResponse : public ::google::protobuf::Message {
 public:
  GetFightDataResponse();
  virtual ~GetFightDataResponse();
  
  GetFightDataResponse(const GetFightDataResponse& from);
  
  inline GetFightDataResponse& operator=(const GetFightDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFightDataResponse& default_instance();
  
  void Swap(GetFightDataResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFightDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFightDataResponse& from);
  void MergeFrom(const GetFightDataResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int64 fight_key = 2;
  inline bool has_fight_key() const;
  inline void clear_fight_key();
  static const int kFightKeyFieldNumber = 2;
  inline ::google::protobuf::int64 fight_key() const;
  inline void set_fight_key(::google::protobuf::int64 value);
  
  // optional .protocols.common.FightMonsterResponse fight_data = 3;
  inline bool has_fight_data() const;
  inline void clear_fight_data();
  static const int kFightDataFieldNumber = 3;
  inline const ::protocols::common::FightMonsterResponse& fight_data() const;
  inline ::protocols::common::FightMonsterResponse* mutable_fight_data();
  inline ::protocols::common::FightMonsterResponse* release_fight_data();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetFightDataResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_fight_key();
  inline void clear_has_fight_key();
  inline void set_has_fight_data();
  inline void clear_has_fight_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 fight_key_;
  ::protocols::common::FightMonsterResponse* fight_data_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetFightDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class AlienBossActNotify : public ::google::protobuf::Message {
 public:
  AlienBossActNotify();
  virtual ~AlienBossActNotify();
  
  AlienBossActNotify(const AlienBossActNotify& from);
  
  inline AlienBossActNotify& operator=(const AlienBossActNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlienBossActNotify& default_instance();
  
  void Swap(AlienBossActNotify* other);
  
  // implements Message ----------------------------------------------
  
  AlienBossActNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlienBossActNotify& from);
  void MergeFrom(const AlienBossActNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 notify_type() const;
  inline void set_notify_type(::google::protobuf::int32 value);
  
  // optional int32 time_left = 2;
  inline bool has_time_left() const;
  inline void clear_time_left();
  static const int kTimeLeftFieldNumber = 2;
  inline ::google::protobuf::int32 time_left() const;
  inline void set_time_left(::google::protobuf::int32 value);
  
  // optional int32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::int32 player_count() const;
  inline void set_player_count(::google::protobuf::int32 value);
  
  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 damage_increase_percent = 5;
  inline bool has_damage_increase_percent() const;
  inline void clear_damage_increase_percent();
  static const int kDamageIncreasePercentFieldNumber = 5;
  inline ::google::protobuf::int32 damage_increase_percent() const;
  inline void set_damage_increase_percent(::google::protobuf::int32 value);
  
  // optional int32 max_hp = 6;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 6;
  inline ::google::protobuf::int32 max_hp() const;
  inline void set_max_hp(::google::protobuf::int32 value);
  
  // optional int32 hp = 7;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 7;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional string boss_name = 8;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 8;
  inline const ::std::string& boss_name() const;
  inline void set_boss_name(const ::std::string& value);
  inline void set_boss_name(const char* value);
  inline void set_boss_name(const char* value, size_t size);
  inline ::std::string* mutable_boss_name();
  inline ::std::string* release_boss_name();
  
  // optional int32 boss_level = 9;
  inline bool has_boss_level() const;
  inline void clear_boss_level();
  static const int kBossLevelFieldNumber = 9;
  inline ::google::protobuf::int32 boss_level() const;
  inline void set_boss_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.AlienBossActNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_time_left();
  inline void clear_has_time_left();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_damage_increase_percent();
  inline void clear_has_damage_increase_percent();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_boss_level();
  inline void clear_has_boss_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 notify_type_;
  ::google::protobuf::int32 time_left_;
  ::google::protobuf::int32 player_count_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 damage_increase_percent_;
  ::google::protobuf::int32 max_hp_;
  ::std::string* boss_name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 boss_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AlienBossActNotify* default_instance_;
};
// -------------------------------------------------------------------

class EnterAlienBossMapRequest : public ::google::protobuf::Message {
 public:
  EnterAlienBossMapRequest();
  virtual ~EnterAlienBossMapRequest();
  
  EnterAlienBossMapRequest(const EnterAlienBossMapRequest& from);
  
  inline EnterAlienBossMapRequest& operator=(const EnterAlienBossMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterAlienBossMapRequest& default_instance();
  
  void Swap(EnterAlienBossMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  EnterAlienBossMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterAlienBossMapRequest& from);
  void MergeFrom(const EnterAlienBossMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterAlienBossMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterAlienBossMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnterAlienBossMapResponse : public ::google::protobuf::Message {
 public:
  EnterAlienBossMapResponse();
  virtual ~EnterAlienBossMapResponse();
  
  EnterAlienBossMapResponse(const EnterAlienBossMapResponse& from);
  
  inline EnterAlienBossMapResponse& operator=(const EnterAlienBossMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterAlienBossMapResponse& default_instance();
  
  void Swap(EnterAlienBossMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  EnterAlienBossMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterAlienBossMapResponse& from);
  void MergeFrom(const EnterAlienBossMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterAlienBossMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterAlienBossMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class LeaveAlienBossMapRequest : public ::google::protobuf::Message {
 public:
  LeaveAlienBossMapRequest();
  virtual ~LeaveAlienBossMapRequest();
  
  LeaveAlienBossMapRequest(const LeaveAlienBossMapRequest& from);
  
  inline LeaveAlienBossMapRequest& operator=(const LeaveAlienBossMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveAlienBossMapRequest& default_instance();
  
  void Swap(LeaveAlienBossMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  LeaveAlienBossMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveAlienBossMapRequest& from);
  void MergeFrom(const LeaveAlienBossMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveAlienBossMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveAlienBossMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class LeaveAlienBossMapResponse : public ::google::protobuf::Message {
 public:
  LeaveAlienBossMapResponse();
  virtual ~LeaveAlienBossMapResponse();
  
  LeaveAlienBossMapResponse(const LeaveAlienBossMapResponse& from);
  
  inline LeaveAlienBossMapResponse& operator=(const LeaveAlienBossMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveAlienBossMapResponse& default_instance();
  
  void Swap(LeaveAlienBossMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  LeaveAlienBossMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveAlienBossMapResponse& from);
  void MergeFrom(const LeaveAlienBossMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveAlienBossMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveAlienBossMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBossHurt : public ::google::protobuf::Message {
 public:
  PlayerBossHurt();
  virtual ~PlayerBossHurt();
  
  PlayerBossHurt(const PlayerBossHurt& from);
  
  inline PlayerBossHurt& operator=(const PlayerBossHurt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBossHurt& default_instance();
  
  void Swap(PlayerBossHurt* other);
  
  // implements Message ----------------------------------------------
  
  PlayerBossHurt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBossHurt& from);
  void MergeFrom(const PlayerBossHurt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 role_id = 9;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 9;
  inline ::google::protobuf::int32 role_id() const;
  inline void set_role_id(::google::protobuf::int32 value);
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // optional int32 damage_percent = 4;
  inline bool has_damage_percent() const;
  inline void clear_damage_percent();
  static const int kDamagePercentFieldNumber = 4;
  inline ::google::protobuf::int32 damage_percent() const;
  inline void set_damage_percent(::google::protobuf::int32 value);
  
  // optional int32 coin_bonus = 5;
  inline bool has_coin_bonus() const;
  inline void clear_coin_bonus();
  static const int kCoinBonusFieldNumber = 5;
  inline ::google::protobuf::int32 coin_bonus() const;
  inline void set_coin_bonus(::google::protobuf::int32 value);
  
  // optional int32 exp_bonus = 6;
  inline bool has_exp_bonus() const;
  inline void clear_exp_bonus();
  static const int kExpBonusFieldNumber = 6;
  inline ::google::protobuf::int32 exp_bonus() const;
  inline void set_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 treasure_box_id = 8;
  inline bool has_treasure_box_id() const;
  inline void clear_treasure_box_id();
  static const int kTreasureBoxIdFieldNumber = 8;
  inline ::google::protobuf::int32 treasure_box_id() const;
  inline void set_treasure_box_id(::google::protobuf::int32 value);
  
  // optional int32 treasure_box_count = 7;
  inline bool has_treasure_box_count() const;
  inline void clear_treasure_box_count();
  static const int kTreasureBoxCountFieldNumber = 7;
  inline ::google::protobuf::int32 treasure_box_count() const;
  inline void set_treasure_box_count(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerBossHurt)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_damage_percent();
  inline void clear_has_damage_percent();
  inline void set_has_coin_bonus();
  inline void clear_has_coin_bonus();
  inline void set_has_exp_bonus();
  inline void clear_has_exp_bonus();
  inline void set_has_treasure_box_id();
  inline void clear_has_treasure_box_id();
  inline void set_has_treasure_box_count();
  inline void clear_has_treasure_box_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 role_id_;
  ::google::protobuf::int32 rank_;
  ::std::string* name_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 damage_percent_;
  ::google::protobuf::int32 coin_bonus_;
  ::google::protobuf::int32 exp_bonus_;
  ::google::protobuf::int32 treasure_box_id_;
  ::google::protobuf::int32 treasure_box_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerBossHurt* default_instance_;
};
// -------------------------------------------------------------------

class AlienBossHurtRank : public ::google::protobuf::Message {
 public:
  AlienBossHurtRank();
  virtual ~AlienBossHurtRank();
  
  AlienBossHurtRank(const AlienBossHurtRank& from);
  
  inline AlienBossHurtRank& operator=(const AlienBossHurtRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlienBossHurtRank& default_instance();
  
  void Swap(AlienBossHurtRank* other);
  
  // implements Message ----------------------------------------------
  
  AlienBossHurtRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlienBossHurtRank& from);
  void MergeFrom(const AlienBossHurtRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .protocols.common.PlayerBossHurt own_hurt = 1;
  inline bool has_own_hurt() const;
  inline void clear_own_hurt();
  static const int kOwnHurtFieldNumber = 1;
  inline const ::protocols::common::PlayerBossHurt& own_hurt() const;
  inline ::protocols::common::PlayerBossHurt* mutable_own_hurt();
  inline ::protocols::common::PlayerBossHurt* release_own_hurt();
  
  // repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
  inline int hurt_rank_size() const;
  inline void clear_hurt_rank();
  static const int kHurtRankFieldNumber = 2;
  inline const ::protocols::common::PlayerBossHurt& hurt_rank(int index) const;
  inline ::protocols::common::PlayerBossHurt* mutable_hurt_rank(int index);
  inline ::protocols::common::PlayerBossHurt* add_hurt_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >&
      hurt_rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >*
      mutable_hurt_rank();
  
  // @@protoc_insertion_point(class_scope:protocols.common.AlienBossHurtRank)
 private:
  inline void set_has_own_hurt();
  inline void clear_has_own_hurt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::PlayerBossHurt* own_hurt_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt > hurt_rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AlienBossHurtRank* default_instance_;
};
// -------------------------------------------------------------------

class AlienBossRewardsNotify : public ::google::protobuf::Message {
 public:
  AlienBossRewardsNotify();
  virtual ~AlienBossRewardsNotify();
  
  AlienBossRewardsNotify(const AlienBossRewardsNotify& from);
  
  inline AlienBossRewardsNotify& operator=(const AlienBossRewardsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AlienBossRewardsNotify& default_instance();
  
  void Swap(AlienBossRewardsNotify* other);
  
  // implements Message ----------------------------------------------
  
  AlienBossRewardsNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlienBossRewardsNotify& from);
  void MergeFrom(const AlienBossRewardsNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 is_boss_dead = 3;
  inline bool has_is_boss_dead() const;
  inline void clear_is_boss_dead();
  static const int kIsBossDeadFieldNumber = 3;
  inline ::google::protobuf::int32 is_boss_dead() const;
  inline void set_is_boss_dead(::google::protobuf::int32 value);
  
  // required int32 rewards_type = 1;
  inline bool has_rewards_type() const;
  inline void clear_rewards_type();
  static const int kRewardsTypeFieldNumber = 1;
  inline ::google::protobuf::int32 rewards_type() const;
  inline void set_rewards_type(::google::protobuf::int32 value);
  
  // repeated .protocols.common.PlayerBossHurt reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::protocols::common::PlayerBossHurt& reward(int index) const;
  inline ::protocols::common::PlayerBossHurt* mutable_reward(int index);
  inline ::protocols::common::PlayerBossHurt* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >*
      mutable_reward();
  
  // @@protoc_insertion_point(class_scope:protocols.common.AlienBossRewardsNotify)
 private:
  inline void set_has_is_boss_dead();
  inline void clear_has_is_boss_dead();
  inline void set_has_rewards_type();
  inline void clear_has_rewards_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 is_boss_dead_;
  ::google::protobuf::int32 rewards_type_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt > reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AlienBossRewardsNotify* default_instance_;
};
// -------------------------------------------------------------------

class EncourageBuffRequest : public ::google::protobuf::Message {
 public:
  EncourageBuffRequest();
  virtual ~EncourageBuffRequest();
  
  EncourageBuffRequest(const EncourageBuffRequest& from);
  
  inline EncourageBuffRequest& operator=(const EncourageBuffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncourageBuffRequest& default_instance();
  
  void Swap(EncourageBuffRequest* other);
  
  // implements Message ----------------------------------------------
  
  EncourageBuffRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncourageBuffRequest& from);
  void MergeFrom(const EncourageBuffRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EncourageBuffRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EncourageBuffRequest* default_instance_;
};
// -------------------------------------------------------------------

class EncourageBuffResponse : public ::google::protobuf::Message {
 public:
  EncourageBuffResponse();
  virtual ~EncourageBuffResponse();
  
  EncourageBuffResponse(const EncourageBuffResponse& from);
  
  inline EncourageBuffResponse& operator=(const EncourageBuffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncourageBuffResponse& default_instance();
  
  void Swap(EncourageBuffResponse* other);
  
  // implements Message ----------------------------------------------
  
  EncourageBuffResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EncourageBuffResponse& from);
  void MergeFrom(const EncourageBuffResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 buff_value = 2;
  inline bool has_buff_value() const;
  inline void clear_buff_value();
  static const int kBuffValueFieldNumber = 2;
  inline ::google::protobuf::int32 buff_value() const;
  inline void set_buff_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EncourageBuffResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_buff_value();
  inline void clear_has_buff_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 buff_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EncourageBuffResponse* default_instance_;
};
// -------------------------------------------------------------------

class QuickRespawnRequest : public ::google::protobuf::Message {
 public:
  QuickRespawnRequest();
  virtual ~QuickRespawnRequest();
  
  QuickRespawnRequest(const QuickRespawnRequest& from);
  
  inline QuickRespawnRequest& operator=(const QuickRespawnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickRespawnRequest& default_instance();
  
  void Swap(QuickRespawnRequest* other);
  
  // implements Message ----------------------------------------------
  
  QuickRespawnRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickRespawnRequest& from);
  void MergeFrom(const QuickRespawnRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuickRespawnRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static QuickRespawnRequest* default_instance_;
};
// -------------------------------------------------------------------

class QuickRespawnResponse : public ::google::protobuf::Message {
 public:
  QuickRespawnResponse();
  virtual ~QuickRespawnResponse();
  
  QuickRespawnResponse(const QuickRespawnResponse& from);
  
  inline QuickRespawnResponse& operator=(const QuickRespawnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickRespawnResponse& default_instance();
  
  void Swap(QuickRespawnResponse* other);
  
  // implements Message ----------------------------------------------
  
  QuickRespawnResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickRespawnResponse& from);
  void MergeFrom(const QuickRespawnResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.QuickRespawnResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static QuickRespawnResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAlienBossBuffNotify : public ::google::protobuf::Message {
 public:
  UpdateAlienBossBuffNotify();
  virtual ~UpdateAlienBossBuffNotify();
  
  UpdateAlienBossBuffNotify(const UpdateAlienBossBuffNotify& from);
  
  inline UpdateAlienBossBuffNotify& operator=(const UpdateAlienBossBuffNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAlienBossBuffNotify& default_instance();
  
  void Swap(UpdateAlienBossBuffNotify* other);
  
  // implements Message ----------------------------------------------
  
  UpdateAlienBossBuffNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAlienBossBuffNotify& from);
  void MergeFrom(const UpdateAlienBossBuffNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 buff_value = 1;
  inline bool has_buff_value() const;
  inline void clear_buff_value();
  static const int kBuffValueFieldNumber = 1;
  inline ::google::protobuf::int32 buff_value() const;
  inline void set_buff_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.UpdateAlienBossBuffNotify)
 private:
  inline void set_has_buff_value();
  inline void clear_has_buff_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 buff_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateAlienBossBuffNotify* default_instance_;
};
// -------------------------------------------------------------------

class GetBossMapInfoRequest : public ::google::protobuf::Message {
 public:
  GetBossMapInfoRequest();
  virtual ~GetBossMapInfoRequest();
  
  GetBossMapInfoRequest(const GetBossMapInfoRequest& from);
  
  inline GetBossMapInfoRequest& operator=(const GetBossMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBossMapInfoRequest& default_instance();
  
  void Swap(GetBossMapInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetBossMapInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBossMapInfoRequest& from);
  void MergeFrom(const GetBossMapInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetBossMapInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetBossMapInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetBossMapInfoResponse : public ::google::protobuf::Message {
 public:
  GetBossMapInfoResponse();
  virtual ~GetBossMapInfoResponse();
  
  GetBossMapInfoResponse(const GetBossMapInfoResponse& from);
  
  inline GetBossMapInfoResponse& operator=(const GetBossMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBossMapInfoResponse& default_instance();
  
  void Swap(GetBossMapInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetBossMapInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBossMapInfoResponse& from);
  void MergeFrom(const GetBossMapInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 time_left = 2;
  inline bool has_time_left() const;
  inline void clear_time_left();
  static const int kTimeLeftFieldNumber = 2;
  inline ::google::protobuf::int32 time_left() const;
  inline void set_time_left(::google::protobuf::int32 value);
  
  // optional int32 player_count = 3;
  inline bool has_player_count() const;
  inline void clear_player_count();
  static const int kPlayerCountFieldNumber = 3;
  inline ::google::protobuf::int32 player_count() const;
  inline void set_player_count(::google::protobuf::int32 value);
  
  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 damage_increase_percent = 5;
  inline bool has_damage_increase_percent() const;
  inline void clear_damage_increase_percent();
  static const int kDamageIncreasePercentFieldNumber = 5;
  inline ::google::protobuf::int32 damage_increase_percent() const;
  inline void set_damage_increase_percent(::google::protobuf::int32 value);
  
  // optional int32 max_hp = 6;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 6;
  inline ::google::protobuf::int32 max_hp() const;
  inline void set_max_hp(::google::protobuf::int32 value);
  
  // optional int32 hp = 7;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 7;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional string boss_name = 8;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 8;
  inline const ::std::string& boss_name() const;
  inline void set_boss_name(const ::std::string& value);
  inline void set_boss_name(const char* value);
  inline void set_boss_name(const char* value, size_t size);
  inline ::std::string* mutable_boss_name();
  inline ::std::string* release_boss_name();
  
  // optional int32 player_is_dead = 9;
  inline bool has_player_is_dead() const;
  inline void clear_player_is_dead();
  static const int kPlayerIsDeadFieldNumber = 9;
  inline ::google::protobuf::int32 player_is_dead() const;
  inline void set_player_is_dead(::google::protobuf::int32 value);
  
  // optional int32 time_left_to_respawn = 10;
  inline bool has_time_left_to_respawn() const;
  inline void clear_time_left_to_respawn();
  static const int kTimeLeftToRespawnFieldNumber = 10;
  inline ::google::protobuf::int32 time_left_to_respawn() const;
  inline void set_time_left_to_respawn(::google::protobuf::int32 value);
  
  // optional int32 boss_level = 11;
  inline bool has_boss_level() const;
  inline void clear_boss_level();
  static const int kBossLevelFieldNumber = 11;
  inline ::google::protobuf::int32 boss_level() const;
  inline void set_boss_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetBossMapInfoResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_time_left();
  inline void clear_has_time_left();
  inline void set_has_player_count();
  inline void clear_has_player_count();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_damage_increase_percent();
  inline void clear_has_damage_increase_percent();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_player_is_dead();
  inline void clear_has_player_is_dead();
  inline void set_has_time_left_to_respawn();
  inline void clear_has_time_left_to_respawn();
  inline void set_has_boss_level();
  inline void clear_has_boss_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 time_left_;
  ::google::protobuf::int32 player_count_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 damage_increase_percent_;
  ::google::protobuf::int32 max_hp_;
  ::std::string* boss_name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 player_is_dead_;
  ::google::protobuf::int32 time_left_to_respawn_;
  ::google::protobuf::int32 boss_level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetBossMapInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class EnterPvPMapRequest : public ::google::protobuf::Message {
 public:
  EnterPvPMapRequest();
  virtual ~EnterPvPMapRequest();
  
  EnterPvPMapRequest(const EnterPvPMapRequest& from);
  
  inline EnterPvPMapRequest& operator=(const EnterPvPMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPvPMapRequest& default_instance();
  
  void Swap(EnterPvPMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  EnterPvPMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterPvPMapRequest& from);
  void MergeFrom(const EnterPvPMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterPvPMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterPvPMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnterPvPMapResponse : public ::google::protobuf::Message {
 public:
  EnterPvPMapResponse();
  virtual ~EnterPvPMapResponse();
  
  EnterPvPMapResponse(const EnterPvPMapResponse& from);
  
  inline EnterPvPMapResponse& operator=(const EnterPvPMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterPvPMapResponse& default_instance();
  
  void Swap(EnterPvPMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  EnterPvPMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterPvPMapResponse& from);
  void MergeFrom(const EnterPvPMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterPvPMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterPvPMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class LeavePvPMapRequest : public ::google::protobuf::Message {
 public:
  LeavePvPMapRequest();
  virtual ~LeavePvPMapRequest();
  
  LeavePvPMapRequest(const LeavePvPMapRequest& from);
  
  inline LeavePvPMapRequest& operator=(const LeavePvPMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeavePvPMapRequest& default_instance();
  
  void Swap(LeavePvPMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  LeavePvPMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeavePvPMapRequest& from);
  void MergeFrom(const LeavePvPMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeavePvPMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeavePvPMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class LeavePvPMapResponse : public ::google::protobuf::Message {
 public:
  LeavePvPMapResponse();
  virtual ~LeavePvPMapResponse();
  
  LeavePvPMapResponse(const LeavePvPMapResponse& from);
  
  inline LeavePvPMapResponse& operator=(const LeavePvPMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeavePvPMapResponse& default_instance();
  
  void Swap(LeavePvPMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  LeavePvPMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeavePvPMapResponse& from);
  void MergeFrom(const LeavePvPMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeavePvPMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeavePvPMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetPvPMapInfoRequest : public ::google::protobuf::Message {
 public:
  GetPvPMapInfoRequest();
  virtual ~GetPvPMapInfoRequest();
  
  GetPvPMapInfoRequest(const GetPvPMapInfoRequest& from);
  
  inline GetPvPMapInfoRequest& operator=(const GetPvPMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPvPMapInfoRequest& default_instance();
  
  void Swap(GetPvPMapInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetPvPMapInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPvPMapInfoRequest& from);
  void MergeFrom(const GetPvPMapInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetPvPMapInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetPvPMapInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPvPRankInfo : public ::google::protobuf::Message {
 public:
  PlayerPvPRankInfo();
  virtual ~PlayerPvPRankInfo();
  
  PlayerPvPRankInfo(const PlayerPvPRankInfo& from);
  
  inline PlayerPvPRankInfo& operator=(const PlayerPvPRankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPvPRankInfo& default_instance();
  
  void Swap(PlayerPvPRankInfo* other);
  
  // implements Message ----------------------------------------------
  
  PlayerPvPRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPvPRankInfo& from);
  void MergeFrom(const PlayerPvPRankInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 cont_win = 3;
  inline bool has_cont_win() const;
  inline void clear_cont_win();
  static const int kContWinFieldNumber = 3;
  inline ::google::protobuf::int32 cont_win() const;
  inline void set_cont_win(::google::protobuf::int32 value);
  
  // optional int32 role_level = 5;
  inline bool has_role_level() const;
  inline void clear_role_level();
  static const int kRoleLevelFieldNumber = 5;
  inline ::google::protobuf::int32 role_level() const;
  inline void set_role_level(::google::protobuf::int32 value);
  
  // optional int32 gender = 6;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 6;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PlayerPvPRankInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cont_win();
  inline void clear_has_cont_win();
  inline void set_has_role_level();
  inline void clear_has_role_level();
  inline void set_has_gender();
  inline void clear_has_gender();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 cont_win_;
  ::google::protobuf::int32 role_level_;
  ::google::protobuf::int32 gender_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerPvPRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetPvPMapInfoResponse : public ::google::protobuf::Message {
 public:
  GetPvPMapInfoResponse();
  virtual ~GetPvPMapInfoResponse();
  
  GetPvPMapInfoResponse(const GetPvPMapInfoResponse& from);
  
  inline GetPvPMapInfoResponse& operator=(const GetPvPMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPvPMapInfoResponse& default_instance();
  
  void Swap(GetPvPMapInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetPvPMapInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPvPMapInfoResponse& from);
  void MergeFrom(const GetPvPMapInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  inline int rank_info_size() const;
  inline void clear_rank_info();
  static const int kRankInfoFieldNumber = 2;
  inline const ::protocols::common::PlayerPvPRankInfo& rank_info(int index) const;
  inline ::protocols::common::PlayerPvPRankInfo* mutable_rank_info(int index);
  inline ::protocols::common::PlayerPvPRankInfo* add_rank_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >&
      rank_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >*
      mutable_rank_info();
  
  // optional int32 cd_left = 3;
  inline bool has_cd_left() const;
  inline void clear_cd_left();
  static const int kCdLeftFieldNumber = 3;
  inline ::google::protobuf::int32 cd_left() const;
  inline void set_cd_left(::google::protobuf::int32 value);
  
  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional int32 cur_win = 5;
  inline bool has_cur_win() const;
  inline void clear_cur_win();
  static const int kCurWinFieldNumber = 5;
  inline ::google::protobuf::int32 cur_win() const;
  inline void set_cur_win(::google::protobuf::int32 value);
  
  // optional int32 winner_bonus_taken = 6;
  inline bool has_winner_bonus_taken() const;
  inline void clear_winner_bonus_taken();
  static const int kWinnerBonusTakenFieldNumber = 6;
  inline ::google::protobuf::int32 winner_bonus_taken() const;
  inline void set_winner_bonus_taken(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetPvPMapInfoResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_cd_left();
  inline void clear_has_cd_left();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cur_win();
  inline void clear_has_cur_win();
  inline void set_has_winner_bonus_taken();
  inline void clear_has_winner_bonus_taken();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo > rank_info_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 cd_left_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 cur_win_;
  ::google::protobuf::int32 winner_bonus_taken_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetPvPMapInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ClearPvPCDRequest : public ::google::protobuf::Message {
 public:
  ClearPvPCDRequest();
  virtual ~ClearPvPCDRequest();
  
  ClearPvPCDRequest(const ClearPvPCDRequest& from);
  
  inline ClearPvPCDRequest& operator=(const ClearPvPCDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearPvPCDRequest& default_instance();
  
  void Swap(ClearPvPCDRequest* other);
  
  // implements Message ----------------------------------------------
  
  ClearPvPCDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearPvPCDRequest& from);
  void MergeFrom(const ClearPvPCDRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.ClearPvPCDRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static ClearPvPCDRequest* default_instance_;
};
// -------------------------------------------------------------------

class ClearPvPCDResponse : public ::google::protobuf::Message {
 public:
  ClearPvPCDResponse();
  virtual ~ClearPvPCDResponse();
  
  ClearPvPCDResponse(const ClearPvPCDResponse& from);
  
  inline ClearPvPCDResponse& operator=(const ClearPvPCDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearPvPCDResponse& default_instance();
  
  void Swap(ClearPvPCDResponse* other);
  
  // implements Message ----------------------------------------------
  
  ClearPvPCDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearPvPCDResponse& from);
  void MergeFrom(const ClearPvPCDResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.ClearPvPCDResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static ClearPvPCDResponse* default_instance_;
};
// -------------------------------------------------------------------

class PvPUpdateCD : public ::google::protobuf::Message {
 public:
  PvPUpdateCD();
  virtual ~PvPUpdateCD();
  
  PvPUpdateCD(const PvPUpdateCD& from);
  
  inline PvPUpdateCD& operator=(const PvPUpdateCD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPUpdateCD& default_instance();
  
  void Swap(PvPUpdateCD* other);
  
  // implements Message ----------------------------------------------
  
  PvPUpdateCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPUpdateCD& from);
  void MergeFrom(const PvPUpdateCD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cd_left = 1;
  inline bool has_cd_left() const;
  inline void clear_cd_left();
  static const int kCdLeftFieldNumber = 1;
  inline ::google::protobuf::int32 cd_left() const;
  inline void set_cd_left(::google::protobuf::int32 value);
  
  // repeated int64 black_guid = 3;
  inline int black_guid_size() const;
  inline void clear_black_guid();
  static const int kBlackGuidFieldNumber = 3;
  inline ::google::protobuf::int64 black_guid(int index) const;
  inline void set_black_guid(int index, ::google::protobuf::int64 value);
  inline void add_black_guid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      black_guid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_black_guid();
  
  // @@protoc_insertion_point(class_scope:protocols.common.PvPUpdateCD)
 private:
  inline void set_has_cd_left();
  inline void clear_has_cd_left();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > black_guid_;
  ::google::protobuf::int32 cd_left_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PvPUpdateCD* default_instance_;
};
// -------------------------------------------------------------------

class PvPActNotify : public ::google::protobuf::Message {
 public:
  PvPActNotify();
  virtual ~PvPActNotify();
  
  PvPActNotify(const PvPActNotify& from);
  
  inline PvPActNotify& operator=(const PvPActNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPActNotify& default_instance();
  
  void Swap(PvPActNotify* other);
  
  // implements Message ----------------------------------------------
  
  PvPActNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPActNotify& from);
  void MergeFrom(const PvPActNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 update_type = 1;
  inline bool has_update_type() const;
  inline void clear_update_type();
  static const int kUpdateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 update_type() const;
  inline void set_update_type(::google::protobuf::int32 value);
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  inline int rank_info_size() const;
  inline void clear_rank_info();
  static const int kRankInfoFieldNumber = 2;
  inline const ::protocols::common::PlayerPvPRankInfo& rank_info(int index) const;
  inline ::protocols::common::PlayerPvPRankInfo* mutable_rank_info(int index);
  inline ::protocols::common::PlayerPvPRankInfo* add_rank_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >&
      rank_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >*
      mutable_rank_info();
  
  // optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
  inline bool has_defender_info() const;
  inline void clear_defender_info();
  static const int kDefenderInfoFieldNumber = 3;
  inline const ::protocols::common::PlayerPvPRankInfo& defender_info() const;
  inline ::protocols::common::PlayerPvPRankInfo* mutable_defender_info();
  inline ::protocols::common::PlayerPvPRankInfo* release_defender_info();
  
  // optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
  inline bool has_attacker_info() const;
  inline void clear_attacker_info();
  static const int kAttackerInfoFieldNumber = 4;
  inline const ::protocols::common::PlayerPvPRankInfo& attacker_info() const;
  inline ::protocols::common::PlayerPvPRankInfo* mutable_attacker_info();
  inline ::protocols::common::PlayerPvPRankInfo* release_attacker_info();
  
  // optional int32 player_cur_level = 5;
  inline bool has_player_cur_level() const;
  inline void clear_player_cur_level();
  static const int kPlayerCurLevelFieldNumber = 5;
  inline ::google::protobuf::int32 player_cur_level() const;
  inline void set_player_cur_level(::google::protobuf::int32 value);
  
  // optional int32 player_cur_win = 6;
  inline bool has_player_cur_win() const;
  inline void clear_player_cur_win();
  static const int kPlayerCurWinFieldNumber = 6;
  inline ::google::protobuf::int32 player_cur_win() const;
  inline void set_player_cur_win(::google::protobuf::int32 value);
  
  // optional int32 player_cont_win = 9;
  inline bool has_player_cont_win() const;
  inline void clear_player_cont_win();
  static const int kPlayerContWinFieldNumber = 9;
  inline ::google::protobuf::int32 player_cont_win() const;
  inline void set_player_cont_win(::google::protobuf::int32 value);
  
  // optional int32 time_left = 7;
  inline bool has_time_left() const;
  inline void clear_time_left();
  static const int kTimeLeftFieldNumber = 7;
  inline ::google::protobuf::int32 time_left() const;
  inline void set_time_left(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo bonus_item = 8;
  inline int bonus_item_size() const;
  inline void clear_bonus_item();
  static const int kBonusItemFieldNumber = 8;
  inline const ::protocols::common::ItemInfo& bonus_item(int index) const;
  inline ::protocols::common::ItemInfo* mutable_bonus_item(int index);
  inline ::protocols::common::ItemInfo* add_bonus_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      bonus_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_bonus_item();
  
  // @@protoc_insertion_point(class_scope:protocols.common.PvPActNotify)
 private:
  inline void set_has_update_type();
  inline void clear_has_update_type();
  inline void set_has_defender_info();
  inline void clear_has_defender_info();
  inline void set_has_attacker_info();
  inline void clear_has_attacker_info();
  inline void set_has_player_cur_level();
  inline void clear_has_player_cur_level();
  inline void set_has_player_cur_win();
  inline void clear_has_player_cur_win();
  inline void set_has_player_cont_win();
  inline void clear_has_player_cont_win();
  inline void set_has_time_left();
  inline void clear_has_time_left();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo > rank_info_;
  ::protocols::common::PlayerPvPRankInfo* defender_info_;
  ::google::protobuf::int32 update_type_;
  ::google::protobuf::int32 player_cur_level_;
  ::protocols::common::PlayerPvPRankInfo* attacker_info_;
  ::google::protobuf::int32 player_cur_win_;
  ::google::protobuf::int32 player_cont_win_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > bonus_item_;
  ::google::protobuf::int32 time_left_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PvPActNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvPRobotNotify : public ::google::protobuf::Message {
 public:
  PvPRobotNotify();
  virtual ~PvPRobotNotify();
  
  PvPRobotNotify(const PvPRobotNotify& from);
  
  inline PvPRobotNotify& operator=(const PvPRobotNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPRobotNotify& default_instance();
  
  void Swap(PvPRobotNotify* other);
  
  // implements Message ----------------------------------------------
  
  PvPRobotNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPRobotNotify& from);
  void MergeFrom(const PvPRobotNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 robot_type = 1;
  inline bool has_robot_type() const;
  inline void clear_robot_type();
  static const int kRobotTypeFieldNumber = 1;
  inline ::google::protobuf::int32 robot_type() const;
  inline void set_robot_type(::google::protobuf::int32 value);
  
  // optional int32 robot_id = 2;
  inline bool has_robot_id() const;
  inline void clear_robot_id();
  static const int kRobotIdFieldNumber = 2;
  inline ::google::protobuf::int32 robot_id() const;
  inline void set_robot_id(::google::protobuf::int32 value);
  
  // optional int32 robot_level = 3;
  inline bool has_robot_level() const;
  inline void clear_robot_level();
  static const int kRobotLevelFieldNumber = 3;
  inline ::google::protobuf::int32 robot_level() const;
  inline void set_robot_level(::google::protobuf::int32 value);
  
  // optional int32 robot_map_x = 4;
  inline bool has_robot_map_x() const;
  inline void clear_robot_map_x();
  static const int kRobotMapXFieldNumber = 4;
  inline ::google::protobuf::int32 robot_map_x() const;
  inline void set_robot_map_x(::google::protobuf::int32 value);
  
  // optional int32 robot_map_y = 5;
  inline bool has_robot_map_y() const;
  inline void clear_robot_map_y();
  static const int kRobotMapYFieldNumber = 5;
  inline ::google::protobuf::int32 robot_map_y() const;
  inline void set_robot_map_y(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.PvPRobotNotify)
 private:
  inline void set_has_robot_type();
  inline void clear_has_robot_type();
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_robot_level();
  inline void clear_has_robot_level();
  inline void set_has_robot_map_x();
  inline void clear_has_robot_map_x();
  inline void set_has_robot_map_y();
  inline void clear_has_robot_map_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 robot_type_;
  ::google::protobuf::int32 robot_id_;
  ::google::protobuf::int32 robot_level_;
  ::google::protobuf::int32 robot_map_x_;
  ::google::protobuf::int32 robot_map_y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PvPRobotNotify* default_instance_;
};
// -------------------------------------------------------------------

class PvPBonusNotify : public ::google::protobuf::Message {
 public:
  PvPBonusNotify();
  virtual ~PvPBonusNotify();
  
  PvPBonusNotify(const PvPBonusNotify& from);
  
  inline PvPBonusNotify& operator=(const PvPBonusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPBonusNotify& default_instance();
  
  void Swap(PvPBonusNotify* other);
  
  // implements Message ----------------------------------------------
  
  PvPBonusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPBonusNotify& from);
  void MergeFrom(const PvPBonusNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bonus_type = 1;
  inline bool has_bonus_type() const;
  inline void clear_bonus_type();
  static const int kBonusTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bonus_type() const;
  inline void set_bonus_type(::google::protobuf::int32 value);
  
  // optional int32 cur_level = 3;
  inline bool has_cur_level() const;
  inline void clear_cur_level();
  static const int kCurLevelFieldNumber = 3;
  inline ::google::protobuf::int32 cur_level() const;
  inline void set_cur_level(::google::protobuf::int32 value);
  
  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  inline int item_info_size() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 2;
  inline const ::protocols::common::ItemInfo& item_info(int index) const;
  inline ::protocols::common::ItemInfo* mutable_item_info(int index);
  inline ::protocols::common::ItemInfo* add_item_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      item_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_item_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.PvPBonusNotify)
 private:
  inline void set_has_bonus_type();
  inline void clear_has_bonus_type();
  inline void set_has_cur_level();
  inline void clear_has_cur_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bonus_type_;
  ::google::protobuf::int32 cur_level_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > item_info_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static PvPBonusNotify* default_instance_;
};
// -------------------------------------------------------------------

class TakePvPGiftRequest : public ::google::protobuf::Message {
 public:
  TakePvPGiftRequest();
  virtual ~TakePvPGiftRequest();
  
  TakePvPGiftRequest(const TakePvPGiftRequest& from);
  
  inline TakePvPGiftRequest& operator=(const TakePvPGiftRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakePvPGiftRequest& default_instance();
  
  void Swap(TakePvPGiftRequest* other);
  
  // implements Message ----------------------------------------------
  
  TakePvPGiftRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakePvPGiftRequest& from);
  void MergeFrom(const TakePvPGiftRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bonus_type = 1;
  inline bool has_bonus_type() const;
  inline void clear_bonus_type();
  static const int kBonusTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bonus_type() const;
  inline void set_bonus_type(::google::protobuf::int32 value);
  
  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TakePvPGiftRequest)
 private:
  inline void set_has_bonus_type();
  inline void clear_has_bonus_type();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bonus_type_;
  ::google::protobuf::int32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static TakePvPGiftRequest* default_instance_;
};
// -------------------------------------------------------------------

class TakePvPGiftResponse : public ::google::protobuf::Message {
 public:
  TakePvPGiftResponse();
  virtual ~TakePvPGiftResponse();
  
  TakePvPGiftResponse(const TakePvPGiftResponse& from);
  
  inline TakePvPGiftResponse& operator=(const TakePvPGiftResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakePvPGiftResponse& default_instance();
  
  void Swap(TakePvPGiftResponse* other);
  
  // implements Message ----------------------------------------------
  
  TakePvPGiftResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakePvPGiftResponse& from);
  void MergeFrom(const TakePvPGiftResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TakePvPGiftResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static TakePvPGiftResponse* default_instance_;
};
// -------------------------------------------------------------------

class BossInfo : public ::google::protobuf::Message {
 public:
  BossInfo();
  virtual ~BossInfo();
  
  BossInfo(const BossInfo& from);
  
  inline BossInfo& operator=(const BossInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BossInfo& default_instance();
  
  void Swap(BossInfo* other);
  
  // implements Message ----------------------------------------------
  
  BossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossInfo& from);
  void MergeFrom(const BossInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string boss_name = 1;
  inline bool has_boss_name() const;
  inline void clear_boss_name();
  static const int kBossNameFieldNumber = 1;
  inline const ::std::string& boss_name() const;
  inline void set_boss_name(const ::std::string& value);
  inline void set_boss_name(const char* value);
  inline void set_boss_name(const char* value, size_t size);
  inline ::std::string* mutable_boss_name();
  inline ::std::string* release_boss_name();
  
  // optional int32 boss_level = 2;
  inline bool has_boss_level() const;
  inline void clear_boss_level();
  static const int kBossLevelFieldNumber = 2;
  inline ::google::protobuf::int32 boss_level() const;
  inline void set_boss_level(::google::protobuf::int32 value);
  
  // optional int32 max_hp = 3;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 3;
  inline ::google::protobuf::int32 max_hp() const;
  inline void set_max_hp(::google::protobuf::int32 value);
  
  // optional int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 show_status = 5;
  inline bool has_show_status() const;
  inline void clear_show_status();
  static const int kShowStatusFieldNumber = 5;
  inline ::google::protobuf::int32 show_status() const;
  inline void set_show_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.BossInfo)
 private:
  inline void set_has_boss_name();
  inline void clear_has_boss_name();
  inline void set_has_boss_level();
  inline void clear_has_boss_level();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_show_status();
  inline void clear_has_show_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* boss_name_;
  ::google::protobuf::int32 boss_level_;
  ::google::protobuf::int32 max_hp_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 show_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static BossInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarContributionPlayer : public ::google::protobuf::Message {
 public:
  GuildWarContributionPlayer();
  virtual ~GuildWarContributionPlayer();
  
  GuildWarContributionPlayer(const GuildWarContributionPlayer& from);
  
  inline GuildWarContributionPlayer& operator=(const GuildWarContributionPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarContributionPlayer& default_instance();
  
  void Swap(GuildWarContributionPlayer* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarContributionPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarContributionPlayer& from);
  void MergeFrom(const GuildWarContributionPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);
  
  // optional int32 encourage_time = 5;
  inline bool has_encourage_time() const;
  inline void clear_encourage_time();
  static const int kEncourageTimeFieldNumber = 5;
  inline ::google::protobuf::int32 encourage_time() const;
  inline void set_encourage_time(::google::protobuf::int32 value);
  
  // optional int32 contribution = 6;
  inline bool has_contribution() const;
  inline void clear_contribution();
  static const int kContributionFieldNumber = 6;
  inline ::google::protobuf::int32 contribution() const;
  inline void set_contribution(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarContributionPlayer)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_encourage_time();
  inline void clear_has_encourage_time();
  inline void set_has_contribution();
  inline void clear_has_contribution();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 damage_;
  ::std::string* name_;
  ::google::protobuf::int32 encourage_time_;
  ::google::protobuf::int32 contribution_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarContributionPlayer* default_instance_;
};
// -------------------------------------------------------------------

class EnterGuildWarMapRequest : public ::google::protobuf::Message {
 public:
  EnterGuildWarMapRequest();
  virtual ~EnterGuildWarMapRequest();
  
  EnterGuildWarMapRequest(const EnterGuildWarMapRequest& from);
  
  inline EnterGuildWarMapRequest& operator=(const EnterGuildWarMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGuildWarMapRequest& default_instance();
  
  void Swap(EnterGuildWarMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  EnterGuildWarMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGuildWarMapRequest& from);
  void MergeFrom(const EnterGuildWarMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterGuildWarMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterGuildWarMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class EnterGuildWarMapResponse : public ::google::protobuf::Message {
 public:
  EnterGuildWarMapResponse();
  virtual ~EnterGuildWarMapResponse();
  
  EnterGuildWarMapResponse(const EnterGuildWarMapResponse& from);
  
  inline EnterGuildWarMapResponse& operator=(const EnterGuildWarMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGuildWarMapResponse& default_instance();
  
  void Swap(EnterGuildWarMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  EnterGuildWarMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGuildWarMapResponse& from);
  void MergeFrom(const EnterGuildWarMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.EnterGuildWarMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static EnterGuildWarMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class LeaveGuildWarMapRequest : public ::google::protobuf::Message {
 public:
  LeaveGuildWarMapRequest();
  virtual ~LeaveGuildWarMapRequest();
  
  LeaveGuildWarMapRequest(const LeaveGuildWarMapRequest& from);
  
  inline LeaveGuildWarMapRequest& operator=(const LeaveGuildWarMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGuildWarMapRequest& default_instance();
  
  void Swap(LeaveGuildWarMapRequest* other);
  
  // implements Message ----------------------------------------------
  
  LeaveGuildWarMapRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveGuildWarMapRequest& from);
  void MergeFrom(const LeaveGuildWarMapRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveGuildWarMapRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveGuildWarMapRequest* default_instance_;
};
// -------------------------------------------------------------------

class LeaveGuildWarMapResponse : public ::google::protobuf::Message {
 public:
  LeaveGuildWarMapResponse();
  virtual ~LeaveGuildWarMapResponse();
  
  LeaveGuildWarMapResponse(const LeaveGuildWarMapResponse& from);
  
  inline LeaveGuildWarMapResponse& operator=(const LeaveGuildWarMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGuildWarMapResponse& default_instance();
  
  void Swap(LeaveGuildWarMapResponse* other);
  
  // implements Message ----------------------------------------------
  
  LeaveGuildWarMapResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveGuildWarMapResponse& from);
  void MergeFrom(const LeaveGuildWarMapResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.LeaveGuildWarMapResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static LeaveGuildWarMapResponse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarSchedule : public ::google::protobuf::Message {
 public:
  GuildWarSchedule();
  virtual ~GuildWarSchedule();
  
  GuildWarSchedule(const GuildWarSchedule& from);
  
  inline GuildWarSchedule& operator=(const GuildWarSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarSchedule& default_instance();
  
  void Swap(GuildWarSchedule* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarSchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarSchedule& from);
  void MergeFrom(const GuildWarSchedule& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline ::google::protobuf::int32 event_type() const;
  inline void set_event_type(::google::protobuf::int32 value);
  
  // required int32 contest_type = 2;
  inline bool has_contest_type() const;
  inline void clear_contest_type();
  static const int kContestTypeFieldNumber = 2;
  inline ::google::protobuf::int32 contest_type() const;
  inline void set_contest_type(::google::protobuf::int32 value);
  
  // required int32 ContestProgressType = 3;
  inline bool has_contestprogresstype() const;
  inline void clear_contestprogresstype();
  static const int kContestProgressTypeFieldNumber = 3;
  inline ::google::protobuf::int32 contestprogresstype() const;
  inline void set_contestprogresstype(::google::protobuf::int32 value);
  
  // optional int32 start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::int32 start_time() const;
  inline void set_start_time(::google::protobuf::int32 value);
  
  // optional int32 end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);
  
  // optional int32 time_left = 7;
  inline bool has_time_left() const;
  inline void clear_time_left();
  static const int kTimeLeftFieldNumber = 7;
  inline ::google::protobuf::int32 time_left() const;
  inline void set_time_left(::google::protobuf::int32 value);
  
  // repeated .protocols.common.CompetitorGuild competitor_info = 6;
  inline int competitor_info_size() const;
  inline void clear_competitor_info();
  static const int kCompetitorInfoFieldNumber = 6;
  inline const ::protocols::common::CompetitorGuild& competitor_info(int index) const;
  inline ::protocols::common::CompetitorGuild* mutable_competitor_info(int index);
  inline ::protocols::common::CompetitorGuild* add_competitor_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::CompetitorGuild >&
      competitor_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::CompetitorGuild >*
      mutable_competitor_info();
  
  // optional string str_start_time = 8;
  inline bool has_str_start_time() const;
  inline void clear_str_start_time();
  static const int kStrStartTimeFieldNumber = 8;
  inline const ::std::string& str_start_time() const;
  inline void set_str_start_time(const ::std::string& value);
  inline void set_str_start_time(const char* value);
  inline void set_str_start_time(const char* value, size_t size);
  inline ::std::string* mutable_str_start_time();
  inline ::std::string* release_str_start_time();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarSchedule)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_contest_type();
  inline void clear_has_contest_type();
  inline void set_has_contestprogresstype();
  inline void clear_has_contestprogresstype();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_time_left();
  inline void clear_has_time_left();
  inline void set_has_str_start_time();
  inline void clear_has_str_start_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 event_type_;
  ::google::protobuf::int32 contest_type_;
  ::google::protobuf::int32 contestprogresstype_;
  ::google::protobuf::int32 start_time_;
  ::google::protobuf::int32 end_time_;
  ::google::protobuf::int32 time_left_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::CompetitorGuild > competitor_info_;
  ::std::string* str_start_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarSchedule* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildWarMapInfoRequest : public ::google::protobuf::Message {
 public:
  GetGuildWarMapInfoRequest();
  virtual ~GetGuildWarMapInfoRequest();
  
  GetGuildWarMapInfoRequest(const GetGuildWarMapInfoRequest& from);
  
  inline GetGuildWarMapInfoRequest& operator=(const GetGuildWarMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildWarMapInfoRequest& default_instance();
  
  void Swap(GetGuildWarMapInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetGuildWarMapInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildWarMapInfoRequest& from);
  void MergeFrom(const GetGuildWarMapInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetGuildWarMapInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetGuildWarMapInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarMapInfo : public ::google::protobuf::Message {
 public:
  GuildWarMapInfo();
  virtual ~GuildWarMapInfo();
  
  GuildWarMapInfo(const GuildWarMapInfo& from);
  
  inline GuildWarMapInfo& operator=(const GuildWarMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarMapInfo& default_instance();
  
  void Swap(GuildWarMapInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarMapInfo& from);
  void MergeFrom(const GuildWarMapInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.GuildWarSchedule schedule = 1;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  inline const ::protocols::common::GuildWarSchedule& schedule() const;
  inline ::protocols::common::GuildWarSchedule* mutable_schedule();
  inline ::protocols::common::GuildWarSchedule* release_schedule();
  
  // optional int32 damage_buff_value = 2;
  inline bool has_damage_buff_value() const;
  inline void clear_damage_buff_value();
  static const int kDamageBuffValueFieldNumber = 2;
  inline ::google::protobuf::int32 damage_buff_value() const;
  inline void set_damage_buff_value(::google::protobuf::int32 value);
  
  // optional int32 defence_buff_value = 3;
  inline bool has_defence_buff_value() const;
  inline void clear_defence_buff_value();
  static const int kDefenceBuffValueFieldNumber = 3;
  inline ::google::protobuf::int32 defence_buff_value() const;
  inline void set_defence_buff_value(::google::protobuf::int32 value);
  
  // optional .protocols.common.BossInfo boss_info = 4;
  inline bool has_boss_info() const;
  inline void clear_boss_info();
  static const int kBossInfoFieldNumber = 4;
  inline const ::protocols::common::BossInfo& boss_info() const;
  inline ::protocols::common::BossInfo* mutable_boss_info();
  inline ::protocols::common::BossInfo* release_boss_info();
  
  // optional int32 cd_left = 5;
  inline bool has_cd_left() const;
  inline void clear_cd_left();
  static const int kCdLeftFieldNumber = 5;
  inline ::google::protobuf::int32 cd_left() const;
  inline void set_cd_left(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarMapInfo)
 private:
  inline void set_has_schedule();
  inline void clear_has_schedule();
  inline void set_has_damage_buff_value();
  inline void clear_has_damage_buff_value();
  inline void set_has_defence_buff_value();
  inline void clear_has_defence_buff_value();
  inline void set_has_boss_info();
  inline void clear_has_boss_info();
  inline void set_has_cd_left();
  inline void clear_has_cd_left();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildWarSchedule* schedule_;
  ::google::protobuf::int32 damage_buff_value_;
  ::google::protobuf::int32 defence_buff_value_;
  ::protocols::common::BossInfo* boss_info_;
  ::google::protobuf::int32 cd_left_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildWarMapInfoResponse : public ::google::protobuf::Message {
 public:
  GetGuildWarMapInfoResponse();
  virtual ~GetGuildWarMapInfoResponse();
  
  GetGuildWarMapInfoResponse(const GetGuildWarMapInfoResponse& from);
  
  inline GetGuildWarMapInfoResponse& operator=(const GetGuildWarMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildWarMapInfoResponse& default_instance();
  
  void Swap(GetGuildWarMapInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetGuildWarMapInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildWarMapInfoResponse& from);
  void MergeFrom(const GetGuildWarMapInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  inline bool has_map_info() const;
  inline void clear_map_info();
  static const int kMapInfoFieldNumber = 2;
  inline const ::protocols::common::GuildWarMapInfo& map_info() const;
  inline ::protocols::common::GuildWarMapInfo* mutable_map_info();
  inline ::protocols::common::GuildWarMapInfo* release_map_info();
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
  inline bool has_battle_info_a() const;
  inline void clear_battle_info_a();
  static const int kBattleInfoAFieldNumber = 3;
  inline const ::protocols::common::GuildWarGuildBattleInfo& battle_info_a() const;
  inline ::protocols::common::GuildWarGuildBattleInfo* mutable_battle_info_a();
  inline ::protocols::common::GuildWarGuildBattleInfo* release_battle_info_a();
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
  inline bool has_battle_info_b() const;
  inline void clear_battle_info_b();
  static const int kBattleInfoBFieldNumber = 4;
  inline const ::protocols::common::GuildWarGuildBattleInfo& battle_info_b() const;
  inline ::protocols::common::GuildWarGuildBattleInfo* mutable_battle_info_b();
  inline ::protocols::common::GuildWarGuildBattleInfo* release_battle_info_b();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetGuildWarMapInfoResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_map_info();
  inline void clear_has_map_info();
  inline void set_has_battle_info_a();
  inline void clear_has_battle_info_a();
  inline void set_has_battle_info_b();
  inline void clear_has_battle_info_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildWarMapInfo* map_info_;
  ::protocols::common::GuildWarGuildBattleInfo* battle_info_a_;
  ::protocols::common::GuildWarGuildBattleInfo* battle_info_b_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetGuildWarMapInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarNotify : public ::google::protobuf::Message {
 public:
  GuildWarNotify();
  virtual ~GuildWarNotify();
  
  GuildWarNotify(const GuildWarNotify& from);
  
  inline GuildWarNotify& operator=(const GuildWarNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarNotify& default_instance();
  
  void Swap(GuildWarNotify* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarNotify& from);
  void MergeFrom(const GuildWarNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 notify_type = 1;
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 notify_type() const;
  inline void set_notify_type(::google::protobuf::int32 value);
  
  // optional int32 guild_id = 13;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 13;
  inline ::google::protobuf::int32 guild_id() const;
  inline void set_guild_id(::google::protobuf::int32 value);
  
  // optional string guild_name = 14;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 14;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  inline bool has_map_info() const;
  inline void clear_map_info();
  static const int kMapInfoFieldNumber = 2;
  inline const ::protocols::common::GuildWarMapInfo& map_info() const;
  inline ::protocols::common::GuildWarMapInfo* mutable_map_info();
  inline ::protocols::common::GuildWarMapInfo* release_map_info();
  
  // optional int32 add_buff_type = 3;
  inline bool has_add_buff_type() const;
  inline void clear_add_buff_type();
  static const int kAddBuffTypeFieldNumber = 3;
  inline ::google::protobuf::int32 add_buff_type() const;
  inline void set_add_buff_type(::google::protobuf::int32 value);
  
  // optional .protocols.common.GuildWarContributionPlayer player_info = 4;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 4;
  inline const ::protocols::common::GuildWarContributionPlayer& player_info() const;
  inline ::protocols::common::GuildWarContributionPlayer* mutable_player_info();
  inline ::protocols::common::GuildWarContributionPlayer* release_player_info();
  
  // optional int32 delta_contribution = 5;
  inline bool has_delta_contribution() const;
  inline void clear_delta_contribution();
  static const int kDeltaContributionFieldNumber = 5;
  inline ::google::protobuf::int32 delta_contribution() const;
  inline void set_delta_contribution(::google::protobuf::int32 value);
  
  // optional int32 cd_left = 7;
  inline bool has_cd_left() const;
  inline void clear_cd_left();
  static const int kCdLeftFieldNumber = 7;
  inline ::google::protobuf::int32 cd_left() const;
  inline void set_cd_left(::google::protobuf::int32 value);
  
  // repeated .protocols.common.GuildWarBattleResult battle_result = 8;
  inline int battle_result_size() const;
  inline void clear_battle_result();
  static const int kBattleResultFieldNumber = 8;
  inline const ::protocols::common::GuildWarBattleResult& battle_result(int index) const;
  inline ::protocols::common::GuildWarBattleResult* mutable_battle_result(int index);
  inline ::protocols::common::GuildWarBattleResult* add_battle_result();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarBattleResult >&
      battle_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarBattleResult >*
      mutable_battle_result();
  
  // repeated .protocols.common.GuildInfo guild_ranks = 9;
  inline int guild_ranks_size() const;
  inline void clear_guild_ranks();
  static const int kGuildRanksFieldNumber = 9;
  inline const ::protocols::common::GuildInfo& guild_ranks(int index) const;
  inline ::protocols::common::GuildInfo* mutable_guild_ranks(int index);
  inline ::protocols::common::GuildInfo* add_guild_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildInfo >&
      guild_ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildInfo >*
      mutable_guild_ranks();
  
  // optional .protocols.common.GuildWarAward award = 10;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 10;
  inline const ::protocols::common::GuildWarAward& award() const;
  inline ::protocols::common::GuildWarAward* mutable_award();
  inline ::protocols::common::GuildWarAward* release_award();
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
  inline bool has_battle_info_a() const;
  inline void clear_battle_info_a();
  static const int kBattleInfoAFieldNumber = 11;
  inline const ::protocols::common::GuildWarGuildBattleInfo& battle_info_a() const;
  inline ::protocols::common::GuildWarGuildBattleInfo* mutable_battle_info_a();
  inline ::protocols::common::GuildWarGuildBattleInfo* release_battle_info_a();
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
  inline bool has_battle_info_b() const;
  inline void clear_battle_info_b();
  static const int kBattleInfoBFieldNumber = 12;
  inline const ::protocols::common::GuildWarGuildBattleInfo& battle_info_b() const;
  inline ::protocols::common::GuildWarGuildBattleInfo* mutable_battle_info_b();
  inline ::protocols::common::GuildWarGuildBattleInfo* release_battle_info_b();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarNotify)
 private:
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_map_info();
  inline void clear_has_map_info();
  inline void set_has_add_buff_type();
  inline void clear_has_add_buff_type();
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_delta_contribution();
  inline void clear_has_delta_contribution();
  inline void set_has_cd_left();
  inline void clear_has_cd_left();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_battle_info_a();
  inline void clear_has_battle_info_a();
  inline void set_has_battle_info_b();
  inline void clear_has_battle_info_b();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 notify_type_;
  ::google::protobuf::int32 guild_id_;
  ::std::string* guild_name_;
  ::protocols::common::GuildWarMapInfo* map_info_;
  ::protocols::common::GuildWarContributionPlayer* player_info_;
  ::google::protobuf::int32 add_buff_type_;
  ::google::protobuf::int32 delta_contribution_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarBattleResult > battle_result_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildInfo > guild_ranks_;
  ::protocols::common::GuildWarAward* award_;
  ::protocols::common::GuildWarGuildBattleInfo* battle_info_a_;
  ::protocols::common::GuildWarGuildBattleInfo* battle_info_b_;
  ::google::protobuf::int32 cd_left_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarNotify* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarGuildBattleInfo : public ::google::protobuf::Message {
 public:
  GuildWarGuildBattleInfo();
  virtual ~GuildWarGuildBattleInfo();
  
  GuildWarGuildBattleInfo(const GuildWarGuildBattleInfo& from);
  
  inline GuildWarGuildBattleInfo& operator=(const GuildWarGuildBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarGuildBattleInfo& default_instance();
  
  void Swap(GuildWarGuildBattleInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarGuildBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarGuildBattleInfo& from);
  void MergeFrom(const GuildWarGuildBattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::int32 guild_id() const;
  inline void set_guild_id(::google::protobuf::int32 value);
  
  // optional string guild_name = 2;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  
  // optional int32 player_left = 3;
  inline bool has_player_left() const;
  inline void clear_player_left();
  static const int kPlayerLeftFieldNumber = 3;
  inline ::google::protobuf::int32 player_left() const;
  inline void set_player_left(::google::protobuf::int32 value);
  
  // repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
  inline int player_infos_size() const;
  inline void clear_player_infos();
  static const int kPlayerInfosFieldNumber = 4;
  inline const ::protocols::common::GuildWarPlayerInfo& player_infos(int index) const;
  inline ::protocols::common::GuildWarPlayerInfo* mutable_player_infos(int index);
  inline ::protocols::common::GuildWarPlayerInfo* add_player_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarPlayerInfo >&
      player_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarPlayerInfo >*
      mutable_player_infos();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarGuildBattleInfo)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_player_left();
  inline void clear_has_player_left();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* guild_name_;
  ::google::protobuf::int32 guild_id_;
  ::google::protobuf::int32 player_left_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarPlayerInfo > player_infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarGuildBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarPlayerInfo : public ::google::protobuf::Message {
 public:
  GuildWarPlayerInfo();
  virtual ~GuildWarPlayerInfo();
  
  GuildWarPlayerInfo(const GuildWarPlayerInfo& from);
  
  inline GuildWarPlayerInfo& operator=(const GuildWarPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarPlayerInfo& default_instance();
  
  void Swap(GuildWarPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarPlayerInfo& from);
  void MergeFrom(const GuildWarPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);
  
  // optional int32 team_id = 8;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 8;
  inline ::google::protobuf::int32 team_id() const;
  inline void set_team_id(::google::protobuf::int32 value);
  
  // optional int64 team_leader_id = 3;
  inline bool has_team_leader_id() const;
  inline void clear_team_leader_id();
  static const int kTeamLeaderIdFieldNumber = 3;
  inline ::google::protobuf::int64 team_leader_id() const;
  inline void set_team_leader_id(::google::protobuf::int64 value);
  
  // optional bool is_dead = 4;
  inline bool has_is_dead() const;
  inline void clear_is_dead();
  static const int kIsDeadFieldNumber = 4;
  inline bool is_dead() const;
  inline void set_is_dead(bool value);
  
  // optional int32 death_num = 5;
  inline bool has_death_num() const;
  inline void clear_death_num();
  static const int kDeathNumFieldNumber = 5;
  inline ::google::protobuf::int32 death_num() const;
  inline void set_death_num(::google::protobuf::int32 value);
  
  // optional int32 win_num = 6;
  inline bool has_win_num() const;
  inline void clear_win_num();
  static const int kWinNumFieldNumber = 6;
  inline ::google::protobuf::int32 win_num() const;
  inline void set_win_num(::google::protobuf::int32 value);
  
  // optional int32 devote_num = 7;
  inline bool has_devote_num() const;
  inline void clear_devote_num();
  static const int kDevoteNumFieldNumber = 7;
  inline ::google::protobuf::int32 devote_num() const;
  inline void set_devote_num(::google::protobuf::int32 value);
  
  // optional int32 cd_left = 9;
  inline bool has_cd_left() const;
  inline void clear_cd_left();
  static const int kCdLeftFieldNumber = 9;
  inline ::google::protobuf::int32 cd_left() const;
  inline void set_cd_left(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarPlayerInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_leader_id();
  inline void clear_has_team_leader_id();
  inline void set_has_is_dead();
  inline void clear_has_is_dead();
  inline void set_has_death_num();
  inline void clear_has_death_num();
  inline void set_has_win_num();
  inline void clear_has_win_num();
  inline void set_has_devote_num();
  inline void clear_has_devote_num();
  inline void set_has_cd_left();
  inline void clear_has_cd_left();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int64 team_leader_id_;
  ::google::protobuf::int32 team_id_;
  bool is_dead_;
  ::google::protobuf::int32 death_num_;
  ::google::protobuf::int32 win_num_;
  ::google::protobuf::int32 devote_num_;
  ::google::protobuf::int32 cd_left_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarAward : public ::google::protobuf::Message {
 public:
  GuildWarAward();
  virtual ~GuildWarAward();
  
  GuildWarAward(const GuildWarAward& from);
  
  inline GuildWarAward& operator=(const GuildWarAward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarAward& default_instance();
  
  void Swap(GuildWarAward* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarAward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarAward& from);
  void MergeFrom(const GuildWarAward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool is_winer = 1;
  inline bool has_is_winer() const;
  inline void clear_is_winer();
  static const int kIsWinerFieldNumber = 1;
  inline bool is_winer() const;
  inline void set_is_winer(bool value);
  
  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);
  
  // optional int32 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);
  
  // optional int32 opponent_guild_id = 4;
  inline bool has_opponent_guild_id() const;
  inline void clear_opponent_guild_id();
  static const int kOpponentGuildIdFieldNumber = 4;
  inline ::google::protobuf::int32 opponent_guild_id() const;
  inline void set_opponent_guild_id(::google::protobuf::int32 value);
  
  // optional string opponent_guild_name = 5;
  inline bool has_opponent_guild_name() const;
  inline void clear_opponent_guild_name();
  static const int kOpponentGuildNameFieldNumber = 5;
  inline const ::std::string& opponent_guild_name() const;
  inline void set_opponent_guild_name(const ::std::string& value);
  inline void set_opponent_guild_name(const char* value);
  inline void set_opponent_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_opponent_guild_name();
  inline ::std::string* release_opponent_guild_name();
  
  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarAward)
 private:
  inline void set_has_is_winer();
  inline void clear_has_is_winer();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_opponent_guild_id();
  inline void clear_has_opponent_guild_id();
  inline void set_has_opponent_guild_name();
  inline void clear_has_opponent_guild_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool is_winer_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 opponent_guild_id_;
  ::std::string* opponent_guild_name_;
  ::google::protobuf::int32 rank_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarAward* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarBattleResult : public ::google::protobuf::Message {
 public:
  GuildWarBattleResult();
  virtual ~GuildWarBattleResult();
  
  GuildWarBattleResult(const GuildWarBattleResult& from);
  
  inline GuildWarBattleResult& operator=(const GuildWarBattleResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarBattleResult& default_instance();
  
  void Swap(GuildWarBattleResult* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarBattleResult& from);
  void MergeFrom(const GuildWarBattleResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.GuildInfo camp_a_guild = 1;
  inline bool has_camp_a_guild() const;
  inline void clear_camp_a_guild();
  static const int kCampAGuildFieldNumber = 1;
  inline const ::protocols::common::GuildInfo& camp_a_guild() const;
  inline ::protocols::common::GuildInfo* mutable_camp_a_guild();
  inline ::protocols::common::GuildInfo* release_camp_a_guild();
  
  // optional .protocols.common.GuildInfo camp_b_guild = 2;
  inline bool has_camp_b_guild() const;
  inline void clear_camp_b_guild();
  static const int kCampBGuildFieldNumber = 2;
  inline const ::protocols::common::GuildInfo& camp_b_guild() const;
  inline ::protocols::common::GuildInfo* mutable_camp_b_guild();
  inline ::protocols::common::GuildInfo* release_camp_b_guild();
  
  // optional int32 win_num_of_a = 3;
  inline bool has_win_num_of_a() const;
  inline void clear_win_num_of_a();
  static const int kWinNumOfAFieldNumber = 3;
  inline ::google::protobuf::int32 win_num_of_a() const;
  inline void set_win_num_of_a(::google::protobuf::int32 value);
  
  // optional string player_a_name = 4;
  inline bool has_player_a_name() const;
  inline void clear_player_a_name();
  static const int kPlayerANameFieldNumber = 4;
  inline const ::std::string& player_a_name() const;
  inline void set_player_a_name(const ::std::string& value);
  inline void set_player_a_name(const char* value);
  inline void set_player_a_name(const char* value, size_t size);
  inline ::std::string* mutable_player_a_name();
  inline ::std::string* release_player_a_name();
  
  // optional string player_b_name = 5;
  inline bool has_player_b_name() const;
  inline void clear_player_b_name();
  static const int kPlayerBNameFieldNumber = 5;
  inline const ::std::string& player_b_name() const;
  inline void set_player_b_name(const ::std::string& value);
  inline void set_player_b_name(const char* value);
  inline void set_player_b_name(const char* value, size_t size);
  inline ::std::string* mutable_player_b_name();
  inline ::std::string* release_player_b_name();
  
  // optional int64 player_a_guid = 6;
  inline bool has_player_a_guid() const;
  inline void clear_player_a_guid();
  static const int kPlayerAGuidFieldNumber = 6;
  inline ::google::protobuf::int64 player_a_guid() const;
  inline void set_player_a_guid(::google::protobuf::int64 value);
  
  // optional int64 player_b_guid = 7;
  inline bool has_player_b_guid() const;
  inline void clear_player_b_guid();
  static const int kPlayerBGuidFieldNumber = 7;
  inline ::google::protobuf::int64 player_b_guid() const;
  inline void set_player_b_guid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarBattleResult)
 private:
  inline void set_has_camp_a_guild();
  inline void clear_has_camp_a_guild();
  inline void set_has_camp_b_guild();
  inline void clear_has_camp_b_guild();
  inline void set_has_win_num_of_a();
  inline void clear_has_win_num_of_a();
  inline void set_has_player_a_name();
  inline void clear_has_player_a_name();
  inline void set_has_player_b_name();
  inline void clear_has_player_b_name();
  inline void set_has_player_a_guid();
  inline void clear_has_player_a_guid();
  inline void set_has_player_b_guid();
  inline void clear_has_player_b_guid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildInfo* camp_a_guild_;
  ::protocols::common::GuildInfo* camp_b_guild_;
  ::std::string* player_a_name_;
  ::std::string* player_b_name_;
  ::google::protobuf::int64 player_a_guid_;
  ::google::protobuf::int64 player_b_guid_;
  ::google::protobuf::int32 win_num_of_a_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarBattleResult* default_instance_;
};
// -------------------------------------------------------------------

class CompetitorGuild : public ::google::protobuf::Message {
 public:
  CompetitorGuild();
  virtual ~CompetitorGuild();
  
  CompetitorGuild(const CompetitorGuild& from);
  
  inline CompetitorGuild& operator=(const CompetitorGuild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompetitorGuild& default_instance();
  
  void Swap(CompetitorGuild* other);
  
  // implements Message ----------------------------------------------
  
  CompetitorGuild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompetitorGuild& from);
  void MergeFrom(const CompetitorGuild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 section = 1;
  inline bool has_section() const;
  inline void clear_section();
  static const int kSectionFieldNumber = 1;
  inline ::google::protobuf::int32 section() const;
  inline void set_section(::google::protobuf::int32 value);
  
  // optional .protocols.common.GuildInfo camp_a_guild = 2;
  inline bool has_camp_a_guild() const;
  inline void clear_camp_a_guild();
  static const int kCampAGuildFieldNumber = 2;
  inline const ::protocols::common::GuildInfo& camp_a_guild() const;
  inline ::protocols::common::GuildInfo* mutable_camp_a_guild();
  inline ::protocols::common::GuildInfo* release_camp_a_guild();
  
  // optional .protocols.common.GuildInfo camp_b_guild = 3;
  inline bool has_camp_b_guild() const;
  inline void clear_camp_b_guild();
  static const int kCampBGuildFieldNumber = 3;
  inline const ::protocols::common::GuildInfo& camp_b_guild() const;
  inline ::protocols::common::GuildInfo* mutable_camp_b_guild();
  inline ::protocols::common::GuildInfo* release_camp_b_guild();
  
  // optional int32 winner_guild_id = 4;
  inline bool has_winner_guild_id() const;
  inline void clear_winner_guild_id();
  static const int kWinnerGuildIdFieldNumber = 4;
  inline ::google::protobuf::int32 winner_guild_id() const;
  inline void set_winner_guild_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.CompetitorGuild)
 private:
  inline void set_has_section();
  inline void clear_has_section();
  inline void set_has_camp_a_guild();
  inline void clear_has_camp_a_guild();
  inline void set_has_camp_b_guild();
  inline void clear_has_camp_b_guild();
  inline void set_has_winner_guild_id();
  inline void clear_has_winner_guild_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildInfo* camp_a_guild_;
  ::google::protobuf::int32 section_;
  ::google::protobuf::int32 winner_guild_id_;
  ::protocols::common::GuildInfo* camp_b_guild_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static CompetitorGuild* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarAddBuffRequest : public ::google::protobuf::Message {
 public:
  GuildWarAddBuffRequest();
  virtual ~GuildWarAddBuffRequest();
  
  GuildWarAddBuffRequest(const GuildWarAddBuffRequest& from);
  
  inline GuildWarAddBuffRequest& operator=(const GuildWarAddBuffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarAddBuffRequest& default_instance();
  
  void Swap(GuildWarAddBuffRequest* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarAddBuffRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarAddBuffRequest& from);
  void MergeFrom(const GuildWarAddBuffRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarAddBuffRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarAddBuffRequest* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarAddBuffResponse : public ::google::protobuf::Message {
 public:
  GuildWarAddBuffResponse();
  virtual ~GuildWarAddBuffResponse();
  
  GuildWarAddBuffResponse(const GuildWarAddBuffResponse& from);
  
  inline GuildWarAddBuffResponse& operator=(const GuildWarAddBuffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarAddBuffResponse& default_instance();
  
  void Swap(GuildWarAddBuffResponse* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarAddBuffResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarAddBuffResponse& from);
  void MergeFrom(const GuildWarAddBuffResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 damage_buff_value = 2;
  inline bool has_damage_buff_value() const;
  inline void clear_damage_buff_value();
  static const int kDamageBuffValueFieldNumber = 2;
  inline ::google::protobuf::int32 damage_buff_value() const;
  inline void set_damage_buff_value(::google::protobuf::int32 value);
  
  // optional int32 defence_buff_value = 3;
  inline bool has_defence_buff_value() const;
  inline void clear_defence_buff_value();
  static const int kDefenceBuffValueFieldNumber = 3;
  inline ::google::protobuf::int32 defence_buff_value() const;
  inline void set_defence_buff_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarAddBuffResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_damage_buff_value();
  inline void clear_has_damage_buff_value();
  inline void set_has_defence_buff_value();
  inline void clear_has_defence_buff_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 damage_buff_value_;
  ::google::protobuf::int32 defence_buff_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarAddBuffResponse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarContributionRank : public ::google::protobuf::Message {
 public:
  GuildWarContributionRank();
  virtual ~GuildWarContributionRank();
  
  GuildWarContributionRank(const GuildWarContributionRank& from);
  
  inline GuildWarContributionRank& operator=(const GuildWarContributionRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarContributionRank& default_instance();
  
  void Swap(GuildWarContributionRank* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarContributionRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarContributionRank& from);
  void MergeFrom(const GuildWarContributionRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
  inline int rank_player_size() const;
  inline void clear_rank_player();
  static const int kRankPlayerFieldNumber = 1;
  inline const ::protocols::common::GuildWarContributionPlayer& rank_player(int index) const;
  inline ::protocols::common::GuildWarContributionPlayer* mutable_rank_player(int index);
  inline ::protocols::common::GuildWarContributionPlayer* add_rank_player();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarContributionPlayer >&
      rank_player() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarContributionPlayer >*
      mutable_rank_player();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarContributionRank)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarContributionPlayer > rank_player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarContributionRank* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarContributionRankRequest : public ::google::protobuf::Message {
 public:
  GuildWarContributionRankRequest();
  virtual ~GuildWarContributionRankRequest();
  
  GuildWarContributionRankRequest(const GuildWarContributionRankRequest& from);
  
  inline GuildWarContributionRankRequest& operator=(const GuildWarContributionRankRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarContributionRankRequest& default_instance();
  
  void Swap(GuildWarContributionRankRequest* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarContributionRankRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarContributionRankRequest& from);
  void MergeFrom(const GuildWarContributionRankRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarContributionRankRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarContributionRankRequest* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarContributionRankResponse : public ::google::protobuf::Message {
 public:
  GuildWarContributionRankResponse();
  virtual ~GuildWarContributionRankResponse();
  
  GuildWarContributionRankResponse(const GuildWarContributionRankResponse& from);
  
  inline GuildWarContributionRankResponse& operator=(const GuildWarContributionRankResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarContributionRankResponse& default_instance();
  
  void Swap(GuildWarContributionRankResponse* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarContributionRankResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarContributionRankResponse& from);
  void MergeFrom(const GuildWarContributionRankResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .protocols.common.GuildWarContributionRank rank_info = 2;
  inline bool has_rank_info() const;
  inline void clear_rank_info();
  static const int kRankInfoFieldNumber = 2;
  inline const ::protocols::common::GuildWarContributionRank& rank_info() const;
  inline ::protocols::common::GuildWarContributionRank* mutable_rank_info();
  inline ::protocols::common::GuildWarContributionRank* release_rank_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarContributionRankResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_rank_info();
  inline void clear_has_rank_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildWarContributionRank* rank_info_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarContributionRankResponse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarContributionRankNotify : public ::google::protobuf::Message {
 public:
  GuildWarContributionRankNotify();
  virtual ~GuildWarContributionRankNotify();
  
  GuildWarContributionRankNotify(const GuildWarContributionRankNotify& from);
  
  inline GuildWarContributionRankNotify& operator=(const GuildWarContributionRankNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarContributionRankNotify& default_instance();
  
  void Swap(GuildWarContributionRankNotify* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarContributionRankNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarContributionRankNotify& from);
  void MergeFrom(const GuildWarContributionRankNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protocols.common.GuildWarContributionRank rank_info = 1;
  inline bool has_rank_info() const;
  inline void clear_rank_info();
  static const int kRankInfoFieldNumber = 1;
  inline const ::protocols::common::GuildWarContributionRank& rank_info() const;
  inline ::protocols::common::GuildWarContributionRank* mutable_rank_info();
  inline ::protocols::common::GuildWarContributionRank* release_rank_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarContributionRankNotify)
 private:
  inline void set_has_rank_info();
  inline void clear_has_rank_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildWarContributionRank* rank_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarContributionRankNotify* default_instance_;
};
// -------------------------------------------------------------------

class UpdateTreasureBoxNotify : public ::google::protobuf::Message {
 public:
  UpdateTreasureBoxNotify();
  virtual ~UpdateTreasureBoxNotify();
  
  UpdateTreasureBoxNotify(const UpdateTreasureBoxNotify& from);
  
  inline UpdateTreasureBoxNotify& operator=(const UpdateTreasureBoxNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTreasureBoxNotify& default_instance();
  
  void Swap(UpdateTreasureBoxNotify* other);
  
  // implements Message ----------------------------------------------
  
  UpdateTreasureBoxNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateTreasureBoxNotify& from);
  void MergeFrom(const UpdateTreasureBoxNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 bonus_type = 1;
  inline bool has_bonus_type() const;
  inline void clear_bonus_type();
  static const int kBonusTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bonus_type() const;
  inline void set_bonus_type(::google::protobuf::int32 value);
  
  // repeated .protocols.common.TreasureBoxReward box_info = 2;
  inline int box_info_size() const;
  inline void clear_box_info();
  static const int kBoxInfoFieldNumber = 2;
  inline const ::protocols::common::TreasureBoxReward& box_info(int index) const;
  inline ::protocols::common::TreasureBoxReward* mutable_box_info(int index);
  inline ::protocols::common::TreasureBoxReward* add_box_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TreasureBoxReward >&
      box_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TreasureBoxReward >*
      mutable_box_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.UpdateTreasureBoxNotify)
 private:
  inline void set_has_bonus_type();
  inline void clear_has_bonus_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::TreasureBoxReward > box_info_;
  ::google::protobuf::int32 bonus_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateTreasureBoxNotify* default_instance_;
};
// -------------------------------------------------------------------

class TakeTreasureBoxBonusRequest : public ::google::protobuf::Message {
 public:
  TakeTreasureBoxBonusRequest();
  virtual ~TakeTreasureBoxBonusRequest();
  
  TakeTreasureBoxBonusRequest(const TakeTreasureBoxBonusRequest& from);
  
  inline TakeTreasureBoxBonusRequest& operator=(const TakeTreasureBoxBonusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeTreasureBoxBonusRequest& default_instance();
  
  void Swap(TakeTreasureBoxBonusRequest* other);
  
  // implements Message ----------------------------------------------
  
  TakeTreasureBoxBonusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeTreasureBoxBonusRequest& from);
  void MergeFrom(const TakeTreasureBoxBonusRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 bonus_type = 1;
  inline bool has_bonus_type() const;
  inline void clear_bonus_type();
  static const int kBonusTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bonus_type() const;
  inline void set_bonus_type(::google::protobuf::int32 value);
  
  // optional int32 box_index = 2;
  inline bool has_box_index() const;
  inline void clear_box_index();
  static const int kBoxIndexFieldNumber = 2;
  inline ::google::protobuf::int32 box_index() const;
  inline void set_box_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.TakeTreasureBoxBonusRequest)
 private:
  inline void set_has_bonus_type();
  inline void clear_has_bonus_type();
  inline void set_has_box_index();
  inline void clear_has_box_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bonus_type_;
  ::google::protobuf::int32 box_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static TakeTreasureBoxBonusRequest* default_instance_;
};
// -------------------------------------------------------------------

class TakeTreasureBoxBonusResponse : public ::google::protobuf::Message {
 public:
  TakeTreasureBoxBonusResponse();
  virtual ~TakeTreasureBoxBonusResponse();
  
  TakeTreasureBoxBonusResponse(const TakeTreasureBoxBonusResponse& from);
  
  inline TakeTreasureBoxBonusResponse& operator=(const TakeTreasureBoxBonusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeTreasureBoxBonusResponse& default_instance();
  
  void Swap(TakeTreasureBoxBonusResponse* other);
  
  // implements Message ----------------------------------------------
  
  TakeTreasureBoxBonusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeTreasureBoxBonusResponse& from);
  void MergeFrom(const TakeTreasureBoxBonusResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::protocols::common::ItemInfo& item(int index) const;
  inline ::protocols::common::ItemInfo* mutable_item(int index);
  inline ::protocols::common::ItemInfo* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_item();
  
  // @@protoc_insertion_point(class_scope:protocols.common.TakeTreasureBoxBonusResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > item_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static TakeTreasureBoxBonusResponse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarGetCompetitionInfoRequest : public ::google::protobuf::Message {
 public:
  GuildWarGetCompetitionInfoRequest();
  virtual ~GuildWarGetCompetitionInfoRequest();
  
  GuildWarGetCompetitionInfoRequest(const GuildWarGetCompetitionInfoRequest& from);
  
  inline GuildWarGetCompetitionInfoRequest& operator=(const GuildWarGetCompetitionInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarGetCompetitionInfoRequest& default_instance();
  
  void Swap(GuildWarGetCompetitionInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarGetCompetitionInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarGetCompetitionInfoRequest& from);
  void MergeFrom(const GuildWarGetCompetitionInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarGetCompetitionInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarGetCompetitionInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarGetCompetitionInfoResponse : public ::google::protobuf::Message {
 public:
  GuildWarGetCompetitionInfoResponse();
  virtual ~GuildWarGetCompetitionInfoResponse();
  
  GuildWarGetCompetitionInfoResponse(const GuildWarGetCompetitionInfoResponse& from);
  
  inline GuildWarGetCompetitionInfoResponse& operator=(const GuildWarGetCompetitionInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarGetCompetitionInfoResponse& default_instance();
  
  void Swap(GuildWarGetCompetitionInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  GuildWarGetCompetitionInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarGetCompetitionInfoResponse& from);
  void MergeFrom(const GuildWarGetCompetitionInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .protocols.common.GuildWarSchedule schedule = 2;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 2;
  inline const ::protocols::common::GuildWarSchedule& schedule() const;
  inline ::protocols::common::GuildWarSchedule* mutable_schedule();
  inline ::protocols::common::GuildWarSchedule* release_schedule();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GuildWarGetCompetitionInfoResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_schedule();
  inline void clear_has_schedule();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::GuildWarSchedule* schedule_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GuildWarGetCompetitionInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAutoInstanceStatusRequest : public ::google::protobuf::Message {
 public:
  GetAutoInstanceStatusRequest();
  virtual ~GetAutoInstanceStatusRequest();
  
  GetAutoInstanceStatusRequest(const GetAutoInstanceStatusRequest& from);
  
  inline GetAutoInstanceStatusRequest& operator=(const GetAutoInstanceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAutoInstanceStatusRequest& default_instance();
  
  void Swap(GetAutoInstanceStatusRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetAutoInstanceStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAutoInstanceStatusRequest& from);
  void MergeFrom(const GetAutoInstanceStatusRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 instance_id = 1;
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetAutoInstanceStatusRequest)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 instance_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetAutoInstanceStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetAutoInstanceStatusResponse : public ::google::protobuf::Message {
 public:
  GetAutoInstanceStatusResponse();
  virtual ~GetAutoInstanceStatusResponse();
  
  GetAutoInstanceStatusResponse(const GetAutoInstanceStatusResponse& from);
  
  inline GetAutoInstanceStatusResponse& operator=(const GetAutoInstanceStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAutoInstanceStatusResponse& default_instance();
  
  void Swap(GetAutoInstanceStatusResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetAutoInstanceStatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAutoInstanceStatusResponse& from);
  void MergeFrom(const GetAutoInstanceStatusResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional .protocols.common.InstanceInfo inst_info = 2;
  inline bool has_inst_info() const;
  inline void clear_inst_info();
  static const int kInstInfoFieldNumber = 2;
  inline const ::protocols::common::InstanceInfo& inst_info() const;
  inline ::protocols::common::InstanceInfo* mutable_inst_info();
  inline ::protocols::common::InstanceInfo* release_inst_info();
  
  // @@protoc_insertion_point(class_scope:protocols.common.GetAutoInstanceStatusResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_inst_info();
  inline void clear_has_inst_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::InstanceInfo* inst_info_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static GetAutoInstanceStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class StartAutoFightInstanceRequest : public ::google::protobuf::Message {
 public:
  StartAutoFightInstanceRequest();
  virtual ~StartAutoFightInstanceRequest();
  
  StartAutoFightInstanceRequest(const StartAutoFightInstanceRequest& from);
  
  inline StartAutoFightInstanceRequest& operator=(const StartAutoFightInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartAutoFightInstanceRequest& default_instance();
  
  void Swap(StartAutoFightInstanceRequest* other);
  
  // implements Message ----------------------------------------------
  
  StartAutoFightInstanceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartAutoFightInstanceRequest& from);
  void MergeFrom(const StartAutoFightInstanceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 auto_fight_times = 1;
  inline bool has_auto_fight_times() const;
  inline void clear_auto_fight_times();
  static const int kAutoFightTimesFieldNumber = 1;
  inline ::google::protobuf::int32 auto_fight_times() const;
  inline void set_auto_fight_times(::google::protobuf::int32 value);
  
  // required .protocols.common.InstanceInfo inst_info = 2;
  inline bool has_inst_info() const;
  inline void clear_inst_info();
  static const int kInstInfoFieldNumber = 2;
  inline const ::protocols::common::InstanceInfo& inst_info() const;
  inline ::protocols::common::InstanceInfo* mutable_inst_info();
  inline ::protocols::common::InstanceInfo* release_inst_info();
  
  // required int32 stop_on_bag_full = 3;
  inline bool has_stop_on_bag_full() const;
  inline void clear_stop_on_bag_full();
  static const int kStopOnBagFullFieldNumber = 3;
  inline ::google::protobuf::int32 stop_on_bag_full() const;
  inline void set_stop_on_bag_full(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.StartAutoFightInstanceRequest)
 private:
  inline void set_has_auto_fight_times();
  inline void clear_has_auto_fight_times();
  inline void set_has_inst_info();
  inline void clear_has_inst_info();
  inline void set_has_stop_on_bag_full();
  inline void clear_has_stop_on_bag_full();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::protocols::common::InstanceInfo* inst_info_;
  ::google::protobuf::int32 auto_fight_times_;
  ::google::protobuf::int32 stop_on_bag_full_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static StartAutoFightInstanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class StartAutoFightInstanceResponse : public ::google::protobuf::Message {
 public:
  StartAutoFightInstanceResponse();
  virtual ~StartAutoFightInstanceResponse();
  
  StartAutoFightInstanceResponse(const StartAutoFightInstanceResponse& from);
  
  inline StartAutoFightInstanceResponse& operator=(const StartAutoFightInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartAutoFightInstanceResponse& default_instance();
  
  void Swap(StartAutoFightInstanceResponse* other);
  
  // implements Message ----------------------------------------------
  
  StartAutoFightInstanceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StartAutoFightInstanceResponse& from);
  void MergeFrom(const StartAutoFightInstanceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 left_time = 2;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.StartAutoFightInstanceResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 left_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static StartAutoFightInstanceResponse* default_instance_;
};
// -------------------------------------------------------------------

class StopAutoFightInstanceRequest : public ::google::protobuf::Message {
 public:
  StopAutoFightInstanceRequest();
  virtual ~StopAutoFightInstanceRequest();
  
  StopAutoFightInstanceRequest(const StopAutoFightInstanceRequest& from);
  
  inline StopAutoFightInstanceRequest& operator=(const StopAutoFightInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopAutoFightInstanceRequest& default_instance();
  
  void Swap(StopAutoFightInstanceRequest* other);
  
  // implements Message ----------------------------------------------
  
  StopAutoFightInstanceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopAutoFightInstanceRequest& from);
  void MergeFrom(const StopAutoFightInstanceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.StopAutoFightInstanceRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static StopAutoFightInstanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class StopAutoFightInstanceResponse : public ::google::protobuf::Message {
 public:
  StopAutoFightInstanceResponse();
  virtual ~StopAutoFightInstanceResponse();
  
  StopAutoFightInstanceResponse(const StopAutoFightInstanceResponse& from);
  
  inline StopAutoFightInstanceResponse& operator=(const StopAutoFightInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopAutoFightInstanceResponse& default_instance();
  
  void Swap(StopAutoFightInstanceResponse* other);
  
  // implements Message ----------------------------------------------
  
  StopAutoFightInstanceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopAutoFightInstanceResponse& from);
  void MergeFrom(const StopAutoFightInstanceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.StopAutoFightInstanceResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static StopAutoFightInstanceResponse* default_instance_;
};
// -------------------------------------------------------------------

class FinishAutoFightInstanceRequest : public ::google::protobuf::Message {
 public:
  FinishAutoFightInstanceRequest();
  virtual ~FinishAutoFightInstanceRequest();
  
  FinishAutoFightInstanceRequest(const FinishAutoFightInstanceRequest& from);
  
  inline FinishAutoFightInstanceRequest& operator=(const FinishAutoFightInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishAutoFightInstanceRequest& default_instance();
  
  void Swap(FinishAutoFightInstanceRequest* other);
  
  // implements Message ----------------------------------------------
  
  FinishAutoFightInstanceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinishAutoFightInstanceRequest& from);
  void MergeFrom(const FinishAutoFightInstanceRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 get_money_flag = 1;
  inline bool has_get_money_flag() const;
  inline void clear_get_money_flag();
  static const int kGetMoneyFlagFieldNumber = 1;
  inline ::google::protobuf::int32 get_money_flag() const;
  inline void set_get_money_flag(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FinishAutoFightInstanceRequest)
 private:
  inline void set_has_get_money_flag();
  inline void clear_has_get_money_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 get_money_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static FinishAutoFightInstanceRequest* default_instance_;
};
// -------------------------------------------------------------------

class FinishAutoFightInstanceResponse : public ::google::protobuf::Message {
 public:
  FinishAutoFightInstanceResponse();
  virtual ~FinishAutoFightInstanceResponse();
  
  FinishAutoFightInstanceResponse(const FinishAutoFightInstanceResponse& from);
  
  inline FinishAutoFightInstanceResponse& operator=(const FinishAutoFightInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishAutoFightInstanceResponse& default_instance();
  
  void Swap(FinishAutoFightInstanceResponse* other);
  
  // implements Message ----------------------------------------------
  
  FinishAutoFightInstanceResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinishAutoFightInstanceResponse& from);
  void MergeFrom(const FinishAutoFightInstanceResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional int32 need_money = 2;
  inline bool has_need_money() const;
  inline void clear_need_money();
  static const int kNeedMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 need_money() const;
  inline void set_need_money(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.FinishAutoFightInstanceResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_need_money();
  inline void clear_has_need_money();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 need_money_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static FinishAutoFightInstanceResponse* default_instance_;
};
// -------------------------------------------------------------------

class AutoFightInstanceNotifyRequest : public ::google::protobuf::Message {
 public:
  AutoFightInstanceNotifyRequest();
  virtual ~AutoFightInstanceNotifyRequest();
  
  AutoFightInstanceNotifyRequest(const AutoFightInstanceNotifyRequest& from);
  
  inline AutoFightInstanceNotifyRequest& operator=(const AutoFightInstanceNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoFightInstanceNotifyRequest& default_instance();
  
  void Swap(AutoFightInstanceNotifyRequest* other);
  
  // implements Message ----------------------------------------------
  
  AutoFightInstanceNotifyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoFightInstanceNotifyRequest& from);
  void MergeFrom(const AutoFightInstanceNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:protocols.common.AutoFightInstanceNotifyRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AutoFightInstanceNotifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class AutoFightInstanceNotifyResponse : public ::google::protobuf::Message {
 public:
  AutoFightInstanceNotifyResponse();
  virtual ~AutoFightInstanceNotifyResponse();
  
  AutoFightInstanceNotifyResponse(const AutoFightInstanceNotifyResponse& from);
  
  inline AutoFightInstanceNotifyResponse& operator=(const AutoFightInstanceNotifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoFightInstanceNotifyResponse& default_instance();
  
  void Swap(AutoFightInstanceNotifyResponse* other);
  
  // implements Message ----------------------------------------------
  
  AutoFightInstanceNotifyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoFightInstanceNotifyResponse& from);
  void MergeFrom(const AutoFightInstanceNotifyResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.AutoFightInstanceNotifyResponse)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AutoFightInstanceNotifyResponse* default_instance_;
};
// -------------------------------------------------------------------

class AutoFightInstanceNotify : public ::google::protobuf::Message {
 public:
  AutoFightInstanceNotify();
  virtual ~AutoFightInstanceNotify();
  
  AutoFightInstanceNotify(const AutoFightInstanceNotify& from);
  
  inline AutoFightInstanceNotify& operator=(const AutoFightInstanceNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoFightInstanceNotify& default_instance();
  
  void Swap(AutoFightInstanceNotify* other);
  
  // implements Message ----------------------------------------------
  
  AutoFightInstanceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AutoFightInstanceNotify& from);
  void MergeFrom(const AutoFightInstanceNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 is_fight_finish = 1;
  inline bool has_is_fight_finish() const;
  inline void clear_is_fight_finish();
  static const int kIsFightFinishFieldNumber = 1;
  inline ::google::protobuf::int32 is_fight_finish() const;
  inline void set_is_fight_finish(::google::protobuf::int32 value);
  
  // optional int32 finish_error_code = 2;
  inline bool has_finish_error_code() const;
  inline void clear_finish_error_code();
  static const int kFinishErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 finish_error_code() const;
  inline void set_finish_error_code(::google::protobuf::int32 value);
  
  // optional int32 cur_fight_time = 3;
  inline bool has_cur_fight_time() const;
  inline void clear_cur_fight_time();
  static const int kCurFightTimeFieldNumber = 3;
  inline ::google::protobuf::int32 cur_fight_time() const;
  inline void set_cur_fight_time(::google::protobuf::int32 value);
  
  // optional int32 left_auto_fight_times = 4;
  inline bool has_left_auto_fight_times() const;
  inline void clear_left_auto_fight_times();
  static const int kLeftAutoFightTimesFieldNumber = 4;
  inline ::google::protobuf::int32 left_auto_fight_times() const;
  inline void set_left_auto_fight_times(::google::protobuf::int32 value);
  
  // optional int32 exp_bonus = 5;
  inline bool has_exp_bonus() const;
  inline void clear_exp_bonus();
  static const int kExpBonusFieldNumber = 5;
  inline ::google::protobuf::int32 exp_bonus() const;
  inline void set_exp_bonus(::google::protobuf::int32 value);
  
  // optional int32 coin_bonus = 6;
  inline bool has_coin_bonus() const;
  inline void clear_coin_bonus();
  static const int kCoinBonusFieldNumber = 6;
  inline ::google::protobuf::int32 coin_bonus() const;
  inline void set_coin_bonus(::google::protobuf::int32 value);
  
  // repeated .protocols.common.ItemInfo item_bonus = 7;
  inline int item_bonus_size() const;
  inline void clear_item_bonus();
  static const int kItemBonusFieldNumber = 7;
  inline const ::protocols::common::ItemInfo& item_bonus(int index) const;
  inline ::protocols::common::ItemInfo* mutable_item_bonus(int index);
  inline ::protocols::common::ItemInfo* add_item_bonus();
  inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
      item_bonus() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
      mutable_item_bonus();
  
  // optional int32 left_time = 8;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 8;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protocols.common.AutoFightInstanceNotify)
 private:
  inline void set_has_is_fight_finish();
  inline void clear_has_is_fight_finish();
  inline void set_has_finish_error_code();
  inline void clear_has_finish_error_code();
  inline void set_has_cur_fight_time();
  inline void clear_has_cur_fight_time();
  inline void set_has_left_auto_fight_times();
  inline void clear_has_left_auto_fight_times();
  inline void set_has_exp_bonus();
  inline void clear_has_exp_bonus();
  inline void set_has_coin_bonus();
  inline void clear_has_coin_bonus();
  inline void set_has_left_time();
  inline void clear_has_left_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 is_fight_finish_;
  ::google::protobuf::int32 finish_error_code_;
  ::google::protobuf::int32 cur_fight_time_;
  ::google::protobuf::int32 left_auto_fight_times_;
  ::google::protobuf::int32 exp_bonus_;
  ::google::protobuf::int32 coin_bonus_;
  ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo > item_bonus_;
  ::google::protobuf::int32 left_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_game_5ffight_2eproto();
  friend void protobuf_AssignDesc_game_5ffight_2eproto();
  friend void protobuf_ShutdownFile_game_5ffight_2eproto();
  
  void InitAsDefaultInstance();
  static AutoFightInstanceNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// Bonus

// optional int64 guid = 1;
inline bool Bonus::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bonus::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bonus::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bonus::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 Bonus::guid() const {
  return guid_;
}
inline void Bonus::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 exp_bonus = 2;
inline bool Bonus::has_exp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bonus::set_has_exp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bonus::clear_has_exp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bonus::clear_exp_bonus() {
  exp_bonus_ = 0;
  clear_has_exp_bonus();
}
inline ::google::protobuf::int32 Bonus::exp_bonus() const {
  return exp_bonus_;
}
inline void Bonus::set_exp_bonus(::google::protobuf::int32 value) {
  set_has_exp_bonus();
  exp_bonus_ = value;
}

// optional int32 vip_level = 13;
inline bool Bonus::has_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bonus::set_has_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bonus::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bonus::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 Bonus::vip_level() const {
  return vip_level_;
}
inline void Bonus::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 vip_exp_factor = 10;
inline bool Bonus::has_vip_exp_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bonus::set_has_vip_exp_factor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bonus::clear_has_vip_exp_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bonus::clear_vip_exp_factor() {
  vip_exp_factor_ = 0;
  clear_has_vip_exp_factor();
}
inline ::google::protobuf::int32 Bonus::vip_exp_factor() const {
  return vip_exp_factor_;
}
inline void Bonus::set_vip_exp_factor(::google::protobuf::int32 value) {
  set_has_vip_exp_factor();
  vip_exp_factor_ = value;
}

// optional int32 team_exp_factor = 11;
inline bool Bonus::has_team_exp_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Bonus::set_has_team_exp_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Bonus::clear_has_team_exp_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Bonus::clear_team_exp_factor() {
  team_exp_factor_ = 0;
  clear_has_team_exp_factor();
}
inline ::google::protobuf::int32 Bonus::team_exp_factor() const {
  return team_exp_factor_;
}
inline void Bonus::set_team_exp_factor(::google::protobuf::int32 value) {
  set_has_team_exp_factor();
  team_exp_factor_ = value;
}

// optional int32 other_exp_factor = 12;
inline bool Bonus::has_other_exp_factor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Bonus::set_has_other_exp_factor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Bonus::clear_has_other_exp_factor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Bonus::clear_other_exp_factor() {
  other_exp_factor_ = 0;
  clear_has_other_exp_factor();
}
inline ::google::protobuf::int32 Bonus::other_exp_factor() const {
  return other_exp_factor_;
}
inline void Bonus::set_other_exp_factor(::google::protobuf::int32 value) {
  set_has_other_exp_factor();
  other_exp_factor_ = value;
}

// repeated .protocols.common.SkillBonus skill_bonus = 3;
inline int Bonus::skill_bonus_size() const {
  return skill_bonus_.size();
}
inline void Bonus::clear_skill_bonus() {
  skill_bonus_.Clear();
}
inline const ::protocols::common::SkillBonus& Bonus::skill_bonus(int index) const {
  return skill_bonus_.Get(index);
}
inline ::protocols::common::SkillBonus* Bonus::mutable_skill_bonus(int index) {
  return skill_bonus_.Mutable(index);
}
inline ::protocols::common::SkillBonus* Bonus::add_skill_bonus() {
  return skill_bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillBonus >&
Bonus::skill_bonus() const {
  return skill_bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillBonus >*
Bonus::mutable_skill_bonus() {
  return &skill_bonus_;
}

// optional int32 gold_coin_bonus = 8;
inline bool Bonus::has_gold_coin_bonus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Bonus::set_has_gold_coin_bonus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Bonus::clear_has_gold_coin_bonus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Bonus::clear_gold_coin_bonus() {
  gold_coin_bonus_ = 0;
  clear_has_gold_coin_bonus();
}
inline ::google::protobuf::int32 Bonus::gold_coin_bonus() const {
  return gold_coin_bonus_;
}
inline void Bonus::set_gold_coin_bonus(::google::protobuf::int32 value) {
  set_has_gold_coin_bonus();
  gold_coin_bonus_ = value;
}

// optional int32 bag_has_enough_slots = 4;
inline bool Bonus::has_bag_has_enough_slots() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Bonus::set_has_bag_has_enough_slots() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Bonus::clear_has_bag_has_enough_slots() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Bonus::clear_bag_has_enough_slots() {
  bag_has_enough_slots_ = 0;
  clear_has_bag_has_enough_slots();
}
inline ::google::protobuf::int32 Bonus::bag_has_enough_slots() const {
  return bag_has_enough_slots_;
}
inline void Bonus::set_bag_has_enough_slots(::google::protobuf::int32 value) {
  set_has_bag_has_enough_slots();
  bag_has_enough_slots_ = value;
}

// optional int32 base_exp_bonus = 9;
inline bool Bonus::has_base_exp_bonus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Bonus::set_has_base_exp_bonus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Bonus::clear_has_base_exp_bonus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Bonus::clear_base_exp_bonus() {
  base_exp_bonus_ = 0;
  clear_has_base_exp_bonus();
}
inline ::google::protobuf::int32 Bonus::base_exp_bonus() const {
  return base_exp_bonus_;
}
inline void Bonus::set_base_exp_bonus(::google::protobuf::int32 value) {
  set_has_base_exp_bonus();
  base_exp_bonus_ = value;
}

// optional int32 base_gold_coin_bonus = 14;
inline bool Bonus::has_base_gold_coin_bonus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Bonus::set_has_base_gold_coin_bonus() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Bonus::clear_has_base_gold_coin_bonus() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Bonus::clear_base_gold_coin_bonus() {
  base_gold_coin_bonus_ = 0;
  clear_has_base_gold_coin_bonus();
}
inline ::google::protobuf::int32 Bonus::base_gold_coin_bonus() const {
  return base_gold_coin_bonus_;
}
inline void Bonus::set_base_gold_coin_bonus(::google::protobuf::int32 value) {
  set_has_base_gold_coin_bonus();
  base_gold_coin_bonus_ = value;
}

// optional int32 cont_win_exp_bonus = 15;
inline bool Bonus::has_cont_win_exp_bonus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Bonus::set_has_cont_win_exp_bonus() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Bonus::clear_has_cont_win_exp_bonus() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Bonus::clear_cont_win_exp_bonus() {
  cont_win_exp_bonus_ = 0;
  clear_has_cont_win_exp_bonus();
}
inline ::google::protobuf::int32 Bonus::cont_win_exp_bonus() const {
  return cont_win_exp_bonus_;
}
inline void Bonus::set_cont_win_exp_bonus(::google::protobuf::int32 value) {
  set_has_cont_win_exp_bonus();
  cont_win_exp_bonus_ = value;
}

// optional int32 cont_win_gold_bonus = 16;
inline bool Bonus::has_cont_win_gold_bonus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Bonus::set_has_cont_win_gold_bonus() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Bonus::clear_has_cont_win_gold_bonus() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Bonus::clear_cont_win_gold_bonus() {
  cont_win_gold_bonus_ = 0;
  clear_has_cont_win_gold_bonus();
}
inline ::google::protobuf::int32 Bonus::cont_win_gold_bonus() const {
  return cont_win_gold_bonus_;
}
inline void Bonus::set_cont_win_gold_bonus(::google::protobuf::int32 value) {
  set_has_cont_win_gold_bonus();
  cont_win_gold_bonus_ = value;
}

// optional int32 de_cont_win_exp_bonus = 17;
inline bool Bonus::has_de_cont_win_exp_bonus() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Bonus::set_has_de_cont_win_exp_bonus() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Bonus::clear_has_de_cont_win_exp_bonus() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Bonus::clear_de_cont_win_exp_bonus() {
  de_cont_win_exp_bonus_ = 0;
  clear_has_de_cont_win_exp_bonus();
}
inline ::google::protobuf::int32 Bonus::de_cont_win_exp_bonus() const {
  return de_cont_win_exp_bonus_;
}
inline void Bonus::set_de_cont_win_exp_bonus(::google::protobuf::int32 value) {
  set_has_de_cont_win_exp_bonus();
  de_cont_win_exp_bonus_ = value;
}

// optional int32 de_cont_win_gold_bonus = 18;
inline bool Bonus::has_de_cont_win_gold_bonus() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Bonus::set_has_de_cont_win_gold_bonus() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Bonus::clear_has_de_cont_win_gold_bonus() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Bonus::clear_de_cont_win_gold_bonus() {
  de_cont_win_gold_bonus_ = 0;
  clear_has_de_cont_win_gold_bonus();
}
inline ::google::protobuf::int32 Bonus::de_cont_win_gold_bonus() const {
  return de_cont_win_gold_bonus_;
}
inline void Bonus::set_de_cont_win_gold_bonus(::google::protobuf::int32 value) {
  set_has_de_cont_win_gold_bonus();
  de_cont_win_gold_bonus_ = value;
}

// repeated .protocols.common.ItemInfo drop_item = 5;
inline int Bonus::drop_item_size() const {
  return drop_item_.size();
}
inline void Bonus::clear_drop_item() {
  drop_item_.Clear();
}
inline const ::protocols::common::ItemInfo& Bonus::drop_item(int index) const {
  return drop_item_.Get(index);
}
inline ::protocols::common::ItemInfo* Bonus::mutable_drop_item(int index) {
  return drop_item_.Mutable(index);
}
inline ::protocols::common::ItemInfo* Bonus::add_drop_item() {
  return drop_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
Bonus::drop_item() const {
  return drop_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
Bonus::mutable_drop_item() {
  return &drop_item_;
}

// repeated .protocols.common.ItemInfo quest_drop_item = 7;
inline int Bonus::quest_drop_item_size() const {
  return quest_drop_item_.size();
}
inline void Bonus::clear_quest_drop_item() {
  quest_drop_item_.Clear();
}
inline const ::protocols::common::ItemInfo& Bonus::quest_drop_item(int index) const {
  return quest_drop_item_.Get(index);
}
inline ::protocols::common::ItemInfo* Bonus::mutable_quest_drop_item(int index) {
  return quest_drop_item_.Mutable(index);
}
inline ::protocols::common::ItemInfo* Bonus::add_quest_drop_item() {
  return quest_drop_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
Bonus::quest_drop_item() const {
  return quest_drop_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
Bonus::mutable_quest_drop_item() {
  return &quest_drop_item_;
}

// repeated .protocols.common.EquipDetail equipment = 6;
inline int Bonus::equipment_size() const {
  return equipment_.size();
}
inline void Bonus::clear_equipment() {
  equipment_.Clear();
}
inline const ::protocols::common::EquipDetail& Bonus::equipment(int index) const {
  return equipment_.Get(index);
}
inline ::protocols::common::EquipDetail* Bonus::mutable_equipment(int index) {
  return equipment_.Mutable(index);
}
inline ::protocols::common::EquipDetail* Bonus::add_equipment() {
  return equipment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipDetail >&
Bonus::equipment() const {
  return equipment_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::EquipDetail >*
Bonus::mutable_equipment() {
  return &equipment_;
}

// -------------------------------------------------------------------

// FightResult

// required int32 battle_id = 5;
inline bool FightResult::has_battle_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightResult::set_has_battle_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightResult::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightResult::clear_battle_id() {
  battle_id_ = 0;
  clear_has_battle_id();
}
inline ::google::protobuf::int32 FightResult::battle_id() const {
  return battle_id_;
}
inline void FightResult::set_battle_id(::google::protobuf::int32 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// repeated .protocols.common.Fighter fighter = 1;
inline int FightResult::fighter_size() const {
  return fighter_.size();
}
inline void FightResult::clear_fighter() {
  fighter_.Clear();
}
inline const ::protocols::common::Fighter& FightResult::fighter(int index) const {
  return fighter_.Get(index);
}
inline ::protocols::common::Fighter* FightResult::mutable_fighter(int index) {
  return fighter_.Mutable(index);
}
inline ::protocols::common::Fighter* FightResult::add_fighter() {
  return fighter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Fighter >&
FightResult::fighter() const {
  return fighter_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Fighter >*
FightResult::mutable_fighter() {
  return &fighter_;
}

// optional int32 winner = 2;
inline bool FightResult::has_winner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightResult::set_has_winner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightResult::clear_has_winner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightResult::clear_winner() {
  winner_ = 0;
  clear_has_winner();
}
inline ::google::protobuf::int32 FightResult::winner() const {
  return winner_;
}
inline void FightResult::set_winner(::google::protobuf::int32 value) {
  set_has_winner();
  winner_ = value;
}

// repeated .protocols.common.Bonus bonus = 3;
inline int FightResult::bonus_size() const {
  return bonus_.size();
}
inline void FightResult::clear_bonus() {
  bonus_.Clear();
}
inline const ::protocols::common::Bonus& FightResult::bonus(int index) const {
  return bonus_.Get(index);
}
inline ::protocols::common::Bonus* FightResult::mutable_bonus(int index) {
  return bonus_.Mutable(index);
}
inline ::protocols::common::Bonus* FightResult::add_bonus() {
  return bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::Bonus >&
FightResult::bonus() const {
  return bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::Bonus >*
FightResult::mutable_bonus() {
  return &bonus_;
}

// repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
inline int FightResult::camp_a_battle_skills_size() const {
  return camp_a_battle_skills_.size();
}
inline void FightResult::clear_camp_a_battle_skills() {
  camp_a_battle_skills_.Clear();
}
inline const ::protocols::common::SkillInfo& FightResult::camp_a_battle_skills(int index) const {
  return camp_a_battle_skills_.Get(index);
}
inline ::protocols::common::SkillInfo* FightResult::mutable_camp_a_battle_skills(int index) {
  return camp_a_battle_skills_.Mutable(index);
}
inline ::protocols::common::SkillInfo* FightResult::add_camp_a_battle_skills() {
  return camp_a_battle_skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >&
FightResult::camp_a_battle_skills() const {
  return camp_a_battle_skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >*
FightResult::mutable_camp_a_battle_skills() {
  return &camp_a_battle_skills_;
}

// repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
inline int FightResult::camp_b_battle_skills_size() const {
  return camp_b_battle_skills_.size();
}
inline void FightResult::clear_camp_b_battle_skills() {
  camp_b_battle_skills_.Clear();
}
inline const ::protocols::common::SkillInfo& FightResult::camp_b_battle_skills(int index) const {
  return camp_b_battle_skills_.Get(index);
}
inline ::protocols::common::SkillInfo* FightResult::mutable_camp_b_battle_skills(int index) {
  return camp_b_battle_skills_.Mutable(index);
}
inline ::protocols::common::SkillInfo* FightResult::add_camp_b_battle_skills() {
  return camp_b_battle_skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >&
FightResult::camp_b_battle_skills() const {
  return camp_b_battle_skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::SkillInfo >*
FightResult::mutable_camp_b_battle_skills() {
  return &camp_b_battle_skills_;
}

// repeated bytes round_data = 4;
inline int FightResult::round_data_size() const {
  return round_data_.size();
}
inline void FightResult::clear_round_data() {
  round_data_.Clear();
}
inline const ::std::string& FightResult::round_data(int index) const {
  return round_data_.Get(index);
}
inline ::std::string* FightResult::mutable_round_data(int index) {
  return round_data_.Mutable(index);
}
inline void FightResult::set_round_data(int index, const ::std::string& value) {
  round_data_.Mutable(index)->assign(value);
}
inline void FightResult::set_round_data(int index, const char* value) {
  round_data_.Mutable(index)->assign(value);
}
inline void FightResult::set_round_data(int index, const void* value, size_t size) {
  round_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightResult::add_round_data() {
  return round_data_.Add();
}
inline void FightResult::add_round_data(const ::std::string& value) {
  round_data_.Add()->assign(value);
}
inline void FightResult::add_round_data(const char* value) {
  round_data_.Add()->assign(value);
}
inline void FightResult::add_round_data(const void* value, size_t size) {
  round_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FightResult::round_data() const {
  return round_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FightResult::mutable_round_data() {
  return &round_data_;
}

// optional string npc_name = 8;
inline bool FightResult::has_npc_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightResult::set_has_npc_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightResult::clear_has_npc_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightResult::clear_npc_name() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    npc_name_->clear();
  }
  clear_has_npc_name();
}
inline const ::std::string& FightResult::npc_name() const {
  return *npc_name_;
}
inline void FightResult::set_npc_name(const ::std::string& value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void FightResult::set_npc_name(const char* value) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(value);
}
inline void FightResult::set_npc_name(const char* value, size_t size) {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  npc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightResult::mutable_npc_name() {
  set_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    npc_name_ = new ::std::string;
  }
  return npc_name_;
}
inline ::std::string* FightResult::release_npc_name() {
  clear_has_npc_name();
  if (npc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = npc_name_;
    npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 npc_level = 11;
inline bool FightResult::has_npc_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FightResult::set_has_npc_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FightResult::clear_has_npc_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FightResult::clear_npc_level() {
  npc_level_ = 0;
  clear_has_npc_level();
}
inline ::google::protobuf::int32 FightResult::npc_level() const {
  return npc_level_;
}
inline void FightResult::set_npc_level(::google::protobuf::int32 value) {
  set_has_npc_level();
  npc_level_ = value;
}

// optional int32 left_free_skip_times = 9;
inline bool FightResult::has_left_free_skip_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FightResult::set_has_left_free_skip_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FightResult::clear_has_left_free_skip_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FightResult::clear_left_free_skip_times() {
  left_free_skip_times_ = 0;
  clear_has_left_free_skip_times();
}
inline ::google::protobuf::int32 FightResult::left_free_skip_times() const {
  return left_free_skip_times_;
}
inline void FightResult::set_left_free_skip_times(::google::protobuf::int32 value) {
  set_has_left_free_skip_times();
  left_free_skip_times_ = value;
}

// optional int32 auto_skip_time_limit = 10;
inline bool FightResult::has_auto_skip_time_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FightResult::set_has_auto_skip_time_limit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FightResult::clear_has_auto_skip_time_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FightResult::clear_auto_skip_time_limit() {
  auto_skip_time_limit_ = 0;
  clear_has_auto_skip_time_limit();
}
inline ::google::protobuf::int32 FightResult::auto_skip_time_limit() const {
  return auto_skip_time_limit_;
}
inline void FightResult::set_auto_skip_time_limit(::google::protobuf::int32 value) {
  set_has_auto_skip_time_limit();
  auto_skip_time_limit_ = value;
}

// optional int32 camp_a_dead_persons = 12;
inline bool FightResult::has_camp_a_dead_persons() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FightResult::set_has_camp_a_dead_persons() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FightResult::clear_has_camp_a_dead_persons() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FightResult::clear_camp_a_dead_persons() {
  camp_a_dead_persons_ = 0;
  clear_has_camp_a_dead_persons();
}
inline ::google::protobuf::int32 FightResult::camp_a_dead_persons() const {
  return camp_a_dead_persons_;
}
inline void FightResult::set_camp_a_dead_persons(::google::protobuf::int32 value) {
  set_has_camp_a_dead_persons();
  camp_a_dead_persons_ = value;
}

// optional int32 camp_b_dead_persons = 13;
inline bool FightResult::has_camp_b_dead_persons() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FightResult::set_has_camp_b_dead_persons() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FightResult::clear_has_camp_b_dead_persons() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FightResult::clear_camp_b_dead_persons() {
  camp_b_dead_persons_ = 0;
  clear_has_camp_b_dead_persons();
}
inline ::google::protobuf::int32 FightResult::camp_b_dead_persons() const {
  return camp_b_dead_persons_;
}
inline void FightResult::set_camp_b_dead_persons(::google::protobuf::int32 value) {
  set_has_camp_b_dead_persons();
  camp_b_dead_persons_ = value;
}

// optional int32 battle_group_id = 14;
inline bool FightResult::has_battle_group_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FightResult::set_has_battle_group_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FightResult::clear_has_battle_group_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FightResult::clear_battle_group_id() {
  battle_group_id_ = 0;
  clear_has_battle_group_id();
}
inline ::google::protobuf::int32 FightResult::battle_group_id() const {
  return battle_group_id_;
}
inline void FightResult::set_battle_group_id(::google::protobuf::int32 value) {
  set_has_battle_group_id();
  battle_group_id_ = value;
}

// optional int32 camp_a_dead_players = 15;
inline bool FightResult::has_camp_a_dead_players() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FightResult::set_has_camp_a_dead_players() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FightResult::clear_has_camp_a_dead_players() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FightResult::clear_camp_a_dead_players() {
  camp_a_dead_players_ = 0;
  clear_has_camp_a_dead_players();
}
inline ::google::protobuf::int32 FightResult::camp_a_dead_players() const {
  return camp_a_dead_players_;
}
inline void FightResult::set_camp_a_dead_players(::google::protobuf::int32 value) {
  set_has_camp_a_dead_players();
  camp_a_dead_players_ = value;
}

// optional int32 camp_b_dead_players = 16;
inline bool FightResult::has_camp_b_dead_players() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FightResult::set_has_camp_b_dead_players() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FightResult::clear_has_camp_b_dead_players() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FightResult::clear_camp_b_dead_players() {
  camp_b_dead_players_ = 0;
  clear_has_camp_b_dead_players();
}
inline ::google::protobuf::int32 FightResult::camp_b_dead_players() const {
  return camp_b_dead_players_;
}
inline void FightResult::set_camp_b_dead_players(::google::protobuf::int32 value) {
  set_has_camp_b_dead_players();
  camp_b_dead_players_ = value;
}

// -------------------------------------------------------------------

// FightMonsterRequest

// optional int32 npc_id = 1;
inline bool FightMonsterRequest::has_npc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightMonsterRequest::set_has_npc_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightMonsterRequest::clear_has_npc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightMonsterRequest::clear_npc_id() {
  npc_id_ = 0;
  clear_has_npc_id();
}
inline ::google::protobuf::int32 FightMonsterRequest::npc_id() const {
  return npc_id_;
}
inline void FightMonsterRequest::set_npc_id(::google::protobuf::int32 value) {
  set_has_npc_id();
  npc_id_ = value;
}

// optional int32 battle_npc_id = 2;
inline bool FightMonsterRequest::has_battle_npc_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightMonsterRequest::set_has_battle_npc_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightMonsterRequest::clear_has_battle_npc_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightMonsterRequest::clear_battle_npc_id() {
  battle_npc_id_ = 0;
  clear_has_battle_npc_id();
}
inline ::google::protobuf::int32 FightMonsterRequest::battle_npc_id() const {
  return battle_npc_id_;
}
inline void FightMonsterRequest::set_battle_npc_id(::google::protobuf::int32 value) {
  set_has_battle_npc_id();
  battle_npc_id_ = value;
}

// optional .protocols.common.FIGHT_TYPE fight_type = 3;
inline bool FightMonsterRequest::has_fight_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightMonsterRequest::set_has_fight_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightMonsterRequest::clear_has_fight_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightMonsterRequest::clear_fight_type() {
  fight_type_ = 1;
  clear_has_fight_type();
}
inline protocols::common::FIGHT_TYPE FightMonsterRequest::fight_type() const {
  return static_cast< protocols::common::FIGHT_TYPE >(fight_type_);
}
inline void FightMonsterRequest::set_fight_type(protocols::common::FIGHT_TYPE value) {
  GOOGLE_DCHECK(protocols::common::FIGHT_TYPE_IsValid(value));
  set_has_fight_type();
  fight_type_ = value;
}

// optional int32 npc_map_x = 4 [default = 0];
inline bool FightMonsterRequest::has_npc_map_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightMonsterRequest::set_has_npc_map_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightMonsterRequest::clear_has_npc_map_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightMonsterRequest::clear_npc_map_x() {
  npc_map_x_ = 0;
  clear_has_npc_map_x();
}
inline ::google::protobuf::int32 FightMonsterRequest::npc_map_x() const {
  return npc_map_x_;
}
inline void FightMonsterRequest::set_npc_map_x(::google::protobuf::int32 value) {
  set_has_npc_map_x();
  npc_map_x_ = value;
}

// optional int32 npc_map_y = 5 [default = 0];
inline bool FightMonsterRequest::has_npc_map_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightMonsterRequest::set_has_npc_map_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightMonsterRequest::clear_has_npc_map_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightMonsterRequest::clear_npc_map_y() {
  npc_map_y_ = 0;
  clear_has_npc_map_y();
}
inline ::google::protobuf::int32 FightMonsterRequest::npc_map_y() const {
  return npc_map_y_;
}
inline void FightMonsterRequest::set_npc_map_y(::google::protobuf::int32 value) {
  set_has_npc_map_y();
  npc_map_y_ = value;
}

// -------------------------------------------------------------------

// FightMonsterResponse

// required int32 error_code = 1;
inline bool FightMonsterResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightMonsterResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightMonsterResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightMonsterResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 FightMonsterResponse::error_code() const {
  return error_code_;
}
inline void FightMonsterResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .protocols.common.FIGHT_TYPE fight_type = 2;
inline bool FightMonsterResponse::has_fight_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightMonsterResponse::set_has_fight_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightMonsterResponse::clear_has_fight_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightMonsterResponse::clear_fight_type() {
  fight_type_ = 1;
  clear_has_fight_type();
}
inline protocols::common::FIGHT_TYPE FightMonsterResponse::fight_type() const {
  return static_cast< protocols::common::FIGHT_TYPE >(fight_type_);
}
inline void FightMonsterResponse::set_fight_type(protocols::common::FIGHT_TYPE value) {
  GOOGLE_DCHECK(protocols::common::FIGHT_TYPE_IsValid(value));
  set_has_fight_type();
  fight_type_ = value;
}

// optional int32 npc_id = 3;
inline bool FightMonsterResponse::has_npc_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightMonsterResponse::set_has_npc_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightMonsterResponse::clear_has_npc_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightMonsterResponse::clear_npc_id() {
  npc_id_ = 0;
  clear_has_npc_id();
}
inline ::google::protobuf::int32 FightMonsterResponse::npc_id() const {
  return npc_id_;
}
inline void FightMonsterResponse::set_npc_id(::google::protobuf::int32 value) {
  set_has_npc_id();
  npc_id_ = value;
}

// optional .protocols.common.FightResult result = 4;
inline bool FightMonsterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightMonsterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightMonsterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightMonsterResponse::clear_result() {
  if (result_ != NULL) result_->::protocols::common::FightResult::Clear();
  clear_has_result();
}
inline const ::protocols::common::FightResult& FightMonsterResponse::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::protocols::common::FightResult* FightMonsterResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::protocols::common::FightResult;
  return result_;
}
inline ::protocols::common::FightResult* FightMonsterResponse::release_result() {
  clear_has_result();
  ::protocols::common::FightResult* temp = result_;
  result_ = NULL;
  return temp;
}

// optional int64 attacker_guid = 5;
inline bool FightMonsterResponse::has_attacker_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightMonsterResponse::set_has_attacker_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightMonsterResponse::clear_has_attacker_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightMonsterResponse::clear_attacker_guid() {
  attacker_guid_ = GOOGLE_LONGLONG(0);
  clear_has_attacker_guid();
}
inline ::google::protobuf::int64 FightMonsterResponse::attacker_guid() const {
  return attacker_guid_;
}
inline void FightMonsterResponse::set_attacker_guid(::google::protobuf::int64 value) {
  set_has_attacker_guid();
  attacker_guid_ = value;
}

// optional int64 defender_guid = 7;
inline bool FightMonsterResponse::has_defender_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightMonsterResponse::set_has_defender_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightMonsterResponse::clear_has_defender_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightMonsterResponse::clear_defender_guid() {
  defender_guid_ = GOOGLE_LONGLONG(0);
  clear_has_defender_guid();
}
inline ::google::protobuf::int64 FightMonsterResponse::defender_guid() const {
  return defender_guid_;
}
inline void FightMonsterResponse::set_defender_guid(::google::protobuf::int64 value) {
  set_has_defender_guid();
  defender_guid_ = value;
}

// optional int64 attacker_fight_key = 8;
inline bool FightMonsterResponse::has_attacker_fight_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightMonsterResponse::set_has_attacker_fight_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightMonsterResponse::clear_has_attacker_fight_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightMonsterResponse::clear_attacker_fight_key() {
  attacker_fight_key_ = GOOGLE_LONGLONG(0);
  clear_has_attacker_fight_key();
}
inline ::google::protobuf::int64 FightMonsterResponse::attacker_fight_key() const {
  return attacker_fight_key_;
}
inline void FightMonsterResponse::set_attacker_fight_key(::google::protobuf::int64 value) {
  set_has_attacker_fight_key();
  attacker_fight_key_ = value;
}

// -------------------------------------------------------------------

// SkipFightRequest

// required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
inline bool SkipFightRequest::has_skip_fight_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkipFightRequest::set_has_skip_fight_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkipFightRequest::clear_has_skip_fight_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkipFightRequest::clear_skip_fight_type() {
  skip_fight_type_ = 1;
  clear_has_skip_fight_type();
}
inline protocols::common::SKIP_FIGHT_TYPE SkipFightRequest::skip_fight_type() const {
  return static_cast< protocols::common::SKIP_FIGHT_TYPE >(skip_fight_type_);
}
inline void SkipFightRequest::set_skip_fight_type(protocols::common::SKIP_FIGHT_TYPE value) {
  GOOGLE_DCHECK(protocols::common::SKIP_FIGHT_TYPE_IsValid(value));
  set_has_skip_fight_type();
  skip_fight_type_ = value;
}

// -------------------------------------------------------------------

// SkipFightResponse

// required int32 error_code = 1;
inline bool SkipFightResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkipFightResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkipFightResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkipFightResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SkipFightResponse::error_code() const {
  return error_code_;
}
inline void SkipFightResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 left_free_skip_fight_times = 2;
inline bool SkipFightResponse::has_left_free_skip_fight_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkipFightResponse::set_has_left_free_skip_fight_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkipFightResponse::clear_has_left_free_skip_fight_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkipFightResponse::clear_left_free_skip_fight_times() {
  left_free_skip_fight_times_ = 0;
  clear_has_left_free_skip_fight_times();
}
inline ::google::protobuf::int32 SkipFightResponse::left_free_skip_fight_times() const {
  return left_free_skip_fight_times_;
}
inline void SkipFightResponse::set_left_free_skip_fight_times(::google::protobuf::int32 value) {
  set_has_left_free_skip_fight_times();
  left_free_skip_fight_times_ = value;
}

// -------------------------------------------------------------------

// LeaveFightRequest

// -------------------------------------------------------------------

// LeaveFightResponse

// required int32 error_code = 1;
inline bool LeaveFightResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveFightResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveFightResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveFightResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 LeaveFightResponse::error_code() const {
  return error_code_;
}
inline void LeaveFightResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 map_id = 2;
inline bool LeaveFightResponse::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveFightResponse::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveFightResponse::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveFightResponse::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 LeaveFightResponse::map_id() const {
  return map_id_;
}
inline void LeaveFightResponse::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
}

// optional int32 map_x = 3;
inline bool LeaveFightResponse::has_map_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaveFightResponse::set_has_map_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaveFightResponse::clear_has_map_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaveFightResponse::clear_map_x() {
  map_x_ = 0;
  clear_has_map_x();
}
inline ::google::protobuf::int32 LeaveFightResponse::map_x() const {
  return map_x_;
}
inline void LeaveFightResponse::set_map_x(::google::protobuf::int32 value) {
  set_has_map_x();
  map_x_ = value;
}

// optional int32 map_y = 4;
inline bool LeaveFightResponse::has_map_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeaveFightResponse::set_has_map_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeaveFightResponse::clear_has_map_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeaveFightResponse::clear_map_y() {
  map_y_ = 0;
  clear_has_map_y();
}
inline ::google::protobuf::int32 LeaveFightResponse::map_y() const {
  return map_y_;
}
inline void LeaveFightResponse::set_map_y(::google::protobuf::int32 value) {
  set_has_map_y();
  map_y_ = value;
}

// -------------------------------------------------------------------

// SendFightToWorldRequest

// required int64 fight_key = 1;
inline bool SendFightToWorldRequest::has_fight_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendFightToWorldRequest::set_has_fight_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendFightToWorldRequest::clear_has_fight_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendFightToWorldRequest::clear_fight_key() {
  fight_key_ = GOOGLE_LONGLONG(0);
  clear_has_fight_key();
}
inline ::google::protobuf::int64 SendFightToWorldRequest::fight_key() const {
  return fight_key_;
}
inline void SendFightToWorldRequest::set_fight_key(::google::protobuf::int64 value) {
  set_has_fight_key();
  fight_key_ = value;
}

// optional int32 is_need_broadcast = 2;
inline bool SendFightToWorldRequest::has_is_need_broadcast() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendFightToWorldRequest::set_has_is_need_broadcast() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendFightToWorldRequest::clear_has_is_need_broadcast() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendFightToWorldRequest::clear_is_need_broadcast() {
  is_need_broadcast_ = 0;
  clear_has_is_need_broadcast();
}
inline ::google::protobuf::int32 SendFightToWorldRequest::is_need_broadcast() const {
  return is_need_broadcast_;
}
inline void SendFightToWorldRequest::set_is_need_broadcast(::google::protobuf::int32 value) {
  set_has_is_need_broadcast();
  is_need_broadcast_ = value;
}

// -------------------------------------------------------------------

// SendFightToWorldResponse

// required int32 error_code = 1;
inline bool SendFightToWorldResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendFightToWorldResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendFightToWorldResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendFightToWorldResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 SendFightToWorldResponse::error_code() const {
  return error_code_;
}
inline void SendFightToWorldResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// GetFightDataRequest

// required int64 fight_key = 1;
inline bool GetFightDataRequest::has_fight_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFightDataRequest::set_has_fight_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFightDataRequest::clear_has_fight_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFightDataRequest::clear_fight_key() {
  fight_key_ = GOOGLE_LONGLONG(0);
  clear_has_fight_key();
}
inline ::google::protobuf::int64 GetFightDataRequest::fight_key() const {
  return fight_key_;
}
inline void GetFightDataRequest::set_fight_key(::google::protobuf::int64 value) {
  set_has_fight_key();
  fight_key_ = value;
}

// -------------------------------------------------------------------

// GetFightDataResponse

// required int32 error_code = 1;
inline bool GetFightDataResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFightDataResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFightDataResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFightDataResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetFightDataResponse::error_code() const {
  return error_code_;
}
inline void GetFightDataResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int64 fight_key = 2;
inline bool GetFightDataResponse::has_fight_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFightDataResponse::set_has_fight_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFightDataResponse::clear_has_fight_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFightDataResponse::clear_fight_key() {
  fight_key_ = GOOGLE_LONGLONG(0);
  clear_has_fight_key();
}
inline ::google::protobuf::int64 GetFightDataResponse::fight_key() const {
  return fight_key_;
}
inline void GetFightDataResponse::set_fight_key(::google::protobuf::int64 value) {
  set_has_fight_key();
  fight_key_ = value;
}

// optional .protocols.common.FightMonsterResponse fight_data = 3;
inline bool GetFightDataResponse::has_fight_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFightDataResponse::set_has_fight_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetFightDataResponse::clear_has_fight_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetFightDataResponse::clear_fight_data() {
  if (fight_data_ != NULL) fight_data_->::protocols::common::FightMonsterResponse::Clear();
  clear_has_fight_data();
}
inline const ::protocols::common::FightMonsterResponse& GetFightDataResponse::fight_data() const {
  return fight_data_ != NULL ? *fight_data_ : *default_instance_->fight_data_;
}
inline ::protocols::common::FightMonsterResponse* GetFightDataResponse::mutable_fight_data() {
  set_has_fight_data();
  if (fight_data_ == NULL) fight_data_ = new ::protocols::common::FightMonsterResponse;
  return fight_data_;
}
inline ::protocols::common::FightMonsterResponse* GetFightDataResponse::release_fight_data() {
  clear_has_fight_data();
  ::protocols::common::FightMonsterResponse* temp = fight_data_;
  fight_data_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AlienBossActNotify

// required int32 notify_type = 1;
inline bool AlienBossActNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlienBossActNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlienBossActNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlienBossActNotify::clear_notify_type() {
  notify_type_ = 0;
  clear_has_notify_type();
}
inline ::google::protobuf::int32 AlienBossActNotify::notify_type() const {
  return notify_type_;
}
inline void AlienBossActNotify::set_notify_type(::google::protobuf::int32 value) {
  set_has_notify_type();
  notify_type_ = value;
}

// optional int32 time_left = 2;
inline bool AlienBossActNotify::has_time_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlienBossActNotify::set_has_time_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlienBossActNotify::clear_has_time_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlienBossActNotify::clear_time_left() {
  time_left_ = 0;
  clear_has_time_left();
}
inline ::google::protobuf::int32 AlienBossActNotify::time_left() const {
  return time_left_;
}
inline void AlienBossActNotify::set_time_left(::google::protobuf::int32 value) {
  set_has_time_left();
  time_left_ = value;
}

// optional int32 player_count = 3;
inline bool AlienBossActNotify::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlienBossActNotify::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlienBossActNotify::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlienBossActNotify::clear_player_count() {
  player_count_ = 0;
  clear_has_player_count();
}
inline ::google::protobuf::int32 AlienBossActNotify::player_count() const {
  return player_count_;
}
inline void AlienBossActNotify::set_player_count(::google::protobuf::int32 value) {
  set_has_player_count();
  player_count_ = value;
}

// optional int32 status = 4;
inline bool AlienBossActNotify::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlienBossActNotify::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlienBossActNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlienBossActNotify::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AlienBossActNotify::status() const {
  return status_;
}
inline void AlienBossActNotify::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 damage_increase_percent = 5;
inline bool AlienBossActNotify::has_damage_increase_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlienBossActNotify::set_has_damage_increase_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlienBossActNotify::clear_has_damage_increase_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlienBossActNotify::clear_damage_increase_percent() {
  damage_increase_percent_ = 0;
  clear_has_damage_increase_percent();
}
inline ::google::protobuf::int32 AlienBossActNotify::damage_increase_percent() const {
  return damage_increase_percent_;
}
inline void AlienBossActNotify::set_damage_increase_percent(::google::protobuf::int32 value) {
  set_has_damage_increase_percent();
  damage_increase_percent_ = value;
}

// optional int32 max_hp = 6;
inline bool AlienBossActNotify::has_max_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlienBossActNotify::set_has_max_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlienBossActNotify::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlienBossActNotify::clear_max_hp() {
  max_hp_ = 0;
  clear_has_max_hp();
}
inline ::google::protobuf::int32 AlienBossActNotify::max_hp() const {
  return max_hp_;
}
inline void AlienBossActNotify::set_max_hp(::google::protobuf::int32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional int32 hp = 7;
inline bool AlienBossActNotify::has_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlienBossActNotify::set_has_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlienBossActNotify::clear_has_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlienBossActNotify::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 AlienBossActNotify::hp() const {
  return hp_;
}
inline void AlienBossActNotify::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional string boss_name = 8;
inline bool AlienBossActNotify::has_boss_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlienBossActNotify::set_has_boss_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlienBossActNotify::clear_has_boss_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlienBossActNotify::clear_boss_name() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    boss_name_->clear();
  }
  clear_has_boss_name();
}
inline const ::std::string& AlienBossActNotify::boss_name() const {
  return *boss_name_;
}
inline void AlienBossActNotify::set_boss_name(const ::std::string& value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void AlienBossActNotify::set_boss_name(const char* value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void AlienBossActNotify::set_boss_name(const char* value, size_t size) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlienBossActNotify::mutable_boss_name() {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  return boss_name_;
}
inline ::std::string* AlienBossActNotify::release_boss_name() {
  clear_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_name_;
    boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 boss_level = 9;
inline bool AlienBossActNotify::has_boss_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlienBossActNotify::set_has_boss_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlienBossActNotify::clear_has_boss_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlienBossActNotify::clear_boss_level() {
  boss_level_ = 0;
  clear_has_boss_level();
}
inline ::google::protobuf::int32 AlienBossActNotify::boss_level() const {
  return boss_level_;
}
inline void AlienBossActNotify::set_boss_level(::google::protobuf::int32 value) {
  set_has_boss_level();
  boss_level_ = value;
}

// -------------------------------------------------------------------

// EnterAlienBossMapRequest

// -------------------------------------------------------------------

// EnterAlienBossMapResponse

// required int32 error_code = 1;
inline bool EnterAlienBossMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterAlienBossMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterAlienBossMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterAlienBossMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 EnterAlienBossMapResponse::error_code() const {
  return error_code_;
}
inline void EnterAlienBossMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// LeaveAlienBossMapRequest

// -------------------------------------------------------------------

// LeaveAlienBossMapResponse

// required int32 error_code = 1;
inline bool LeaveAlienBossMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveAlienBossMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveAlienBossMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveAlienBossMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 LeaveAlienBossMapResponse::error_code() const {
  return error_code_;
}
inline void LeaveAlienBossMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// PlayerBossHurt

// optional int32 role_id = 9;
inline bool PlayerBossHurt::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBossHurt::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBossHurt::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBossHurt::clear_role_id() {
  role_id_ = 0;
  clear_has_role_id();
}
inline ::google::protobuf::int32 PlayerBossHurt::role_id() const {
  return role_id_;
}
inline void PlayerBossHurt::set_role_id(::google::protobuf::int32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 rank = 1;
inline bool PlayerBossHurt::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBossHurt::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBossHurt::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBossHurt::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PlayerBossHurt::rank() const {
  return rank_;
}
inline void PlayerBossHurt::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 2;
inline bool PlayerBossHurt::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBossHurt::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBossHurt::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBossHurt::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerBossHurt::name() const {
  return *name_;
}
inline void PlayerBossHurt::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerBossHurt::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerBossHurt::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBossHurt::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerBossHurt::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 damage = 3;
inline bool PlayerBossHurt::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerBossHurt::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerBossHurt::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerBossHurt::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 PlayerBossHurt::damage() const {
  return damage_;
}
inline void PlayerBossHurt::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 damage_percent = 4;
inline bool PlayerBossHurt::has_damage_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerBossHurt::set_has_damage_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerBossHurt::clear_has_damage_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerBossHurt::clear_damage_percent() {
  damage_percent_ = 0;
  clear_has_damage_percent();
}
inline ::google::protobuf::int32 PlayerBossHurt::damage_percent() const {
  return damage_percent_;
}
inline void PlayerBossHurt::set_damage_percent(::google::protobuf::int32 value) {
  set_has_damage_percent();
  damage_percent_ = value;
}

// optional int32 coin_bonus = 5;
inline bool PlayerBossHurt::has_coin_bonus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerBossHurt::set_has_coin_bonus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerBossHurt::clear_has_coin_bonus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerBossHurt::clear_coin_bonus() {
  coin_bonus_ = 0;
  clear_has_coin_bonus();
}
inline ::google::protobuf::int32 PlayerBossHurt::coin_bonus() const {
  return coin_bonus_;
}
inline void PlayerBossHurt::set_coin_bonus(::google::protobuf::int32 value) {
  set_has_coin_bonus();
  coin_bonus_ = value;
}

// optional int32 exp_bonus = 6;
inline bool PlayerBossHurt::has_exp_bonus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerBossHurt::set_has_exp_bonus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerBossHurt::clear_has_exp_bonus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerBossHurt::clear_exp_bonus() {
  exp_bonus_ = 0;
  clear_has_exp_bonus();
}
inline ::google::protobuf::int32 PlayerBossHurt::exp_bonus() const {
  return exp_bonus_;
}
inline void PlayerBossHurt::set_exp_bonus(::google::protobuf::int32 value) {
  set_has_exp_bonus();
  exp_bonus_ = value;
}

// optional int32 treasure_box_id = 8;
inline bool PlayerBossHurt::has_treasure_box_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerBossHurt::set_has_treasure_box_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerBossHurt::clear_has_treasure_box_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerBossHurt::clear_treasure_box_id() {
  treasure_box_id_ = 0;
  clear_has_treasure_box_id();
}
inline ::google::protobuf::int32 PlayerBossHurt::treasure_box_id() const {
  return treasure_box_id_;
}
inline void PlayerBossHurt::set_treasure_box_id(::google::protobuf::int32 value) {
  set_has_treasure_box_id();
  treasure_box_id_ = value;
}

// optional int32 treasure_box_count = 7;
inline bool PlayerBossHurt::has_treasure_box_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerBossHurt::set_has_treasure_box_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerBossHurt::clear_has_treasure_box_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerBossHurt::clear_treasure_box_count() {
  treasure_box_count_ = 0;
  clear_has_treasure_box_count();
}
inline ::google::protobuf::int32 PlayerBossHurt::treasure_box_count() const {
  return treasure_box_count_;
}
inline void PlayerBossHurt::set_treasure_box_count(::google::protobuf::int32 value) {
  set_has_treasure_box_count();
  treasure_box_count_ = value;
}

// -------------------------------------------------------------------

// AlienBossHurtRank

// required .protocols.common.PlayerBossHurt own_hurt = 1;
inline bool AlienBossHurtRank::has_own_hurt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlienBossHurtRank::set_has_own_hurt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlienBossHurtRank::clear_has_own_hurt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlienBossHurtRank::clear_own_hurt() {
  if (own_hurt_ != NULL) own_hurt_->::protocols::common::PlayerBossHurt::Clear();
  clear_has_own_hurt();
}
inline const ::protocols::common::PlayerBossHurt& AlienBossHurtRank::own_hurt() const {
  return own_hurt_ != NULL ? *own_hurt_ : *default_instance_->own_hurt_;
}
inline ::protocols::common::PlayerBossHurt* AlienBossHurtRank::mutable_own_hurt() {
  set_has_own_hurt();
  if (own_hurt_ == NULL) own_hurt_ = new ::protocols::common::PlayerBossHurt;
  return own_hurt_;
}
inline ::protocols::common::PlayerBossHurt* AlienBossHurtRank::release_own_hurt() {
  clear_has_own_hurt();
  ::protocols::common::PlayerBossHurt* temp = own_hurt_;
  own_hurt_ = NULL;
  return temp;
}

// repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
inline int AlienBossHurtRank::hurt_rank_size() const {
  return hurt_rank_.size();
}
inline void AlienBossHurtRank::clear_hurt_rank() {
  hurt_rank_.Clear();
}
inline const ::protocols::common::PlayerBossHurt& AlienBossHurtRank::hurt_rank(int index) const {
  return hurt_rank_.Get(index);
}
inline ::protocols::common::PlayerBossHurt* AlienBossHurtRank::mutable_hurt_rank(int index) {
  return hurt_rank_.Mutable(index);
}
inline ::protocols::common::PlayerBossHurt* AlienBossHurtRank::add_hurt_rank() {
  return hurt_rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >&
AlienBossHurtRank::hurt_rank() const {
  return hurt_rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >*
AlienBossHurtRank::mutable_hurt_rank() {
  return &hurt_rank_;
}

// -------------------------------------------------------------------

// AlienBossRewardsNotify

// optional int32 is_boss_dead = 3;
inline bool AlienBossRewardsNotify::has_is_boss_dead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlienBossRewardsNotify::set_has_is_boss_dead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlienBossRewardsNotify::clear_has_is_boss_dead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlienBossRewardsNotify::clear_is_boss_dead() {
  is_boss_dead_ = 0;
  clear_has_is_boss_dead();
}
inline ::google::protobuf::int32 AlienBossRewardsNotify::is_boss_dead() const {
  return is_boss_dead_;
}
inline void AlienBossRewardsNotify::set_is_boss_dead(::google::protobuf::int32 value) {
  set_has_is_boss_dead();
  is_boss_dead_ = value;
}

// required int32 rewards_type = 1;
inline bool AlienBossRewardsNotify::has_rewards_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlienBossRewardsNotify::set_has_rewards_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlienBossRewardsNotify::clear_has_rewards_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlienBossRewardsNotify::clear_rewards_type() {
  rewards_type_ = 0;
  clear_has_rewards_type();
}
inline ::google::protobuf::int32 AlienBossRewardsNotify::rewards_type() const {
  return rewards_type_;
}
inline void AlienBossRewardsNotify::set_rewards_type(::google::protobuf::int32 value) {
  set_has_rewards_type();
  rewards_type_ = value;
}

// repeated .protocols.common.PlayerBossHurt reward = 2;
inline int AlienBossRewardsNotify::reward_size() const {
  return reward_.size();
}
inline void AlienBossRewardsNotify::clear_reward() {
  reward_.Clear();
}
inline const ::protocols::common::PlayerBossHurt& AlienBossRewardsNotify::reward(int index) const {
  return reward_.Get(index);
}
inline ::protocols::common::PlayerBossHurt* AlienBossRewardsNotify::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::protocols::common::PlayerBossHurt* AlienBossRewardsNotify::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >&
AlienBossRewardsNotify::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerBossHurt >*
AlienBossRewardsNotify::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// EncourageBuffRequest

// required int32 type = 1;
inline bool EncourageBuffRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncourageBuffRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncourageBuffRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncourageBuffRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EncourageBuffRequest::type() const {
  return type_;
}
inline void EncourageBuffRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// EncourageBuffResponse

// required int32 error_code = 1;
inline bool EncourageBuffResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncourageBuffResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncourageBuffResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncourageBuffResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 EncourageBuffResponse::error_code() const {
  return error_code_;
}
inline void EncourageBuffResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 buff_value = 2;
inline bool EncourageBuffResponse::has_buff_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncourageBuffResponse::set_has_buff_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncourageBuffResponse::clear_has_buff_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncourageBuffResponse::clear_buff_value() {
  buff_value_ = 0;
  clear_has_buff_value();
}
inline ::google::protobuf::int32 EncourageBuffResponse::buff_value() const {
  return buff_value_;
}
inline void EncourageBuffResponse::set_buff_value(::google::protobuf::int32 value) {
  set_has_buff_value();
  buff_value_ = value;
}

// -------------------------------------------------------------------

// QuickRespawnRequest

// -------------------------------------------------------------------

// QuickRespawnResponse

// required int32 error_code = 1;
inline bool QuickRespawnResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuickRespawnResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuickRespawnResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuickRespawnResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 QuickRespawnResponse::error_code() const {
  return error_code_;
}
inline void QuickRespawnResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// UpdateAlienBossBuffNotify

// optional int32 buff_value = 1;
inline bool UpdateAlienBossBuffNotify::has_buff_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAlienBossBuffNotify::set_has_buff_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAlienBossBuffNotify::clear_has_buff_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAlienBossBuffNotify::clear_buff_value() {
  buff_value_ = 0;
  clear_has_buff_value();
}
inline ::google::protobuf::int32 UpdateAlienBossBuffNotify::buff_value() const {
  return buff_value_;
}
inline void UpdateAlienBossBuffNotify::set_buff_value(::google::protobuf::int32 value) {
  set_has_buff_value();
  buff_value_ = value;
}

// -------------------------------------------------------------------

// GetBossMapInfoRequest

// -------------------------------------------------------------------

// GetBossMapInfoResponse

// required int32 error_code = 1;
inline bool GetBossMapInfoResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBossMapInfoResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBossMapInfoResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBossMapInfoResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::error_code() const {
  return error_code_;
}
inline void GetBossMapInfoResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 time_left = 2;
inline bool GetBossMapInfoResponse::has_time_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBossMapInfoResponse::set_has_time_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBossMapInfoResponse::clear_has_time_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBossMapInfoResponse::clear_time_left() {
  time_left_ = 0;
  clear_has_time_left();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::time_left() const {
  return time_left_;
}
inline void GetBossMapInfoResponse::set_time_left(::google::protobuf::int32 value) {
  set_has_time_left();
  time_left_ = value;
}

// optional int32 player_count = 3;
inline bool GetBossMapInfoResponse::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBossMapInfoResponse::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBossMapInfoResponse::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBossMapInfoResponse::clear_player_count() {
  player_count_ = 0;
  clear_has_player_count();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::player_count() const {
  return player_count_;
}
inline void GetBossMapInfoResponse::set_player_count(::google::protobuf::int32 value) {
  set_has_player_count();
  player_count_ = value;
}

// optional int32 status = 4;
inline bool GetBossMapInfoResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetBossMapInfoResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetBossMapInfoResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetBossMapInfoResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::status() const {
  return status_;
}
inline void GetBossMapInfoResponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 damage_increase_percent = 5;
inline bool GetBossMapInfoResponse::has_damage_increase_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetBossMapInfoResponse::set_has_damage_increase_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetBossMapInfoResponse::clear_has_damage_increase_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetBossMapInfoResponse::clear_damage_increase_percent() {
  damage_increase_percent_ = 0;
  clear_has_damage_increase_percent();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::damage_increase_percent() const {
  return damage_increase_percent_;
}
inline void GetBossMapInfoResponse::set_damage_increase_percent(::google::protobuf::int32 value) {
  set_has_damage_increase_percent();
  damage_increase_percent_ = value;
}

// optional int32 max_hp = 6;
inline bool GetBossMapInfoResponse::has_max_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetBossMapInfoResponse::set_has_max_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetBossMapInfoResponse::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetBossMapInfoResponse::clear_max_hp() {
  max_hp_ = 0;
  clear_has_max_hp();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::max_hp() const {
  return max_hp_;
}
inline void GetBossMapInfoResponse::set_max_hp(::google::protobuf::int32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional int32 hp = 7;
inline bool GetBossMapInfoResponse::has_hp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetBossMapInfoResponse::set_has_hp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetBossMapInfoResponse::clear_has_hp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetBossMapInfoResponse::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::hp() const {
  return hp_;
}
inline void GetBossMapInfoResponse::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional string boss_name = 8;
inline bool GetBossMapInfoResponse::has_boss_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetBossMapInfoResponse::set_has_boss_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetBossMapInfoResponse::clear_has_boss_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetBossMapInfoResponse::clear_boss_name() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    boss_name_->clear();
  }
  clear_has_boss_name();
}
inline const ::std::string& GetBossMapInfoResponse::boss_name() const {
  return *boss_name_;
}
inline void GetBossMapInfoResponse::set_boss_name(const ::std::string& value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void GetBossMapInfoResponse::set_boss_name(const char* value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void GetBossMapInfoResponse::set_boss_name(const char* value, size_t size) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBossMapInfoResponse::mutable_boss_name() {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  return boss_name_;
}
inline ::std::string* GetBossMapInfoResponse::release_boss_name() {
  clear_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_name_;
    boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 player_is_dead = 9;
inline bool GetBossMapInfoResponse::has_player_is_dead() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetBossMapInfoResponse::set_has_player_is_dead() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetBossMapInfoResponse::clear_has_player_is_dead() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetBossMapInfoResponse::clear_player_is_dead() {
  player_is_dead_ = 0;
  clear_has_player_is_dead();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::player_is_dead() const {
  return player_is_dead_;
}
inline void GetBossMapInfoResponse::set_player_is_dead(::google::protobuf::int32 value) {
  set_has_player_is_dead();
  player_is_dead_ = value;
}

// optional int32 time_left_to_respawn = 10;
inline bool GetBossMapInfoResponse::has_time_left_to_respawn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetBossMapInfoResponse::set_has_time_left_to_respawn() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetBossMapInfoResponse::clear_has_time_left_to_respawn() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetBossMapInfoResponse::clear_time_left_to_respawn() {
  time_left_to_respawn_ = 0;
  clear_has_time_left_to_respawn();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::time_left_to_respawn() const {
  return time_left_to_respawn_;
}
inline void GetBossMapInfoResponse::set_time_left_to_respawn(::google::protobuf::int32 value) {
  set_has_time_left_to_respawn();
  time_left_to_respawn_ = value;
}

// optional int32 boss_level = 11;
inline bool GetBossMapInfoResponse::has_boss_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetBossMapInfoResponse::set_has_boss_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetBossMapInfoResponse::clear_has_boss_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetBossMapInfoResponse::clear_boss_level() {
  boss_level_ = 0;
  clear_has_boss_level();
}
inline ::google::protobuf::int32 GetBossMapInfoResponse::boss_level() const {
  return boss_level_;
}
inline void GetBossMapInfoResponse::set_boss_level(::google::protobuf::int32 value) {
  set_has_boss_level();
  boss_level_ = value;
}

// -------------------------------------------------------------------

// EnterPvPMapRequest

// -------------------------------------------------------------------

// EnterPvPMapResponse

// required int32 error_code = 1;
inline bool EnterPvPMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterPvPMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterPvPMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterPvPMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 EnterPvPMapResponse::error_code() const {
  return error_code_;
}
inline void EnterPvPMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// LeavePvPMapRequest

// -------------------------------------------------------------------

// LeavePvPMapResponse

// required int32 error_code = 1;
inline bool LeavePvPMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeavePvPMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeavePvPMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeavePvPMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 LeavePvPMapResponse::error_code() const {
  return error_code_;
}
inline void LeavePvPMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// GetPvPMapInfoRequest

// -------------------------------------------------------------------

// PlayerPvPRankInfo

// optional int64 guid = 4;
inline bool PlayerPvPRankInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPvPRankInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPvPRankInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPvPRankInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 PlayerPvPRankInfo::guid() const {
  return guid_;
}
inline void PlayerPvPRankInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 rank = 1;
inline bool PlayerPvPRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPvPRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPvPRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPvPRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PlayerPvPRankInfo::rank() const {
  return rank_;
}
inline void PlayerPvPRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 2;
inline bool PlayerPvPRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPvPRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPvPRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPvPRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerPvPRankInfo::name() const {
  return *name_;
}
inline void PlayerPvPRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerPvPRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerPvPRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPvPRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerPvPRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cont_win = 3;
inline bool PlayerPvPRankInfo::has_cont_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerPvPRankInfo::set_has_cont_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerPvPRankInfo::clear_has_cont_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerPvPRankInfo::clear_cont_win() {
  cont_win_ = 0;
  clear_has_cont_win();
}
inline ::google::protobuf::int32 PlayerPvPRankInfo::cont_win() const {
  return cont_win_;
}
inline void PlayerPvPRankInfo::set_cont_win(::google::protobuf::int32 value) {
  set_has_cont_win();
  cont_win_ = value;
}

// optional int32 role_level = 5;
inline bool PlayerPvPRankInfo::has_role_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerPvPRankInfo::set_has_role_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerPvPRankInfo::clear_has_role_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerPvPRankInfo::clear_role_level() {
  role_level_ = 0;
  clear_has_role_level();
}
inline ::google::protobuf::int32 PlayerPvPRankInfo::role_level() const {
  return role_level_;
}
inline void PlayerPvPRankInfo::set_role_level(::google::protobuf::int32 value) {
  set_has_role_level();
  role_level_ = value;
}

// optional int32 gender = 6;
inline bool PlayerPvPRankInfo::has_gender() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerPvPRankInfo::set_has_gender() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerPvPRankInfo::clear_has_gender() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerPvPRankInfo::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 PlayerPvPRankInfo::gender() const {
  return gender_;
}
inline void PlayerPvPRankInfo::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// -------------------------------------------------------------------

// GetPvPMapInfoResponse

// required int32 error_code = 1;
inline bool GetPvPMapInfoResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPvPMapInfoResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPvPMapInfoResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPvPMapInfoResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetPvPMapInfoResponse::error_code() const {
  return error_code_;
}
inline void GetPvPMapInfoResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
inline int GetPvPMapInfoResponse::rank_info_size() const {
  return rank_info_.size();
}
inline void GetPvPMapInfoResponse::clear_rank_info() {
  rank_info_.Clear();
}
inline const ::protocols::common::PlayerPvPRankInfo& GetPvPMapInfoResponse::rank_info(int index) const {
  return rank_info_.Get(index);
}
inline ::protocols::common::PlayerPvPRankInfo* GetPvPMapInfoResponse::mutable_rank_info(int index) {
  return rank_info_.Mutable(index);
}
inline ::protocols::common::PlayerPvPRankInfo* GetPvPMapInfoResponse::add_rank_info() {
  return rank_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >&
GetPvPMapInfoResponse::rank_info() const {
  return rank_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >*
GetPvPMapInfoResponse::mutable_rank_info() {
  return &rank_info_;
}

// optional int32 cd_left = 3;
inline bool GetPvPMapInfoResponse::has_cd_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPvPMapInfoResponse::set_has_cd_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPvPMapInfoResponse::clear_has_cd_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPvPMapInfoResponse::clear_cd_left() {
  cd_left_ = 0;
  clear_has_cd_left();
}
inline ::google::protobuf::int32 GetPvPMapInfoResponse::cd_left() const {
  return cd_left_;
}
inline void GetPvPMapInfoResponse::set_cd_left(::google::protobuf::int32 value) {
  set_has_cd_left();
  cd_left_ = value;
}

// optional int32 level = 4;
inline bool GetPvPMapInfoResponse::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPvPMapInfoResponse::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPvPMapInfoResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPvPMapInfoResponse::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GetPvPMapInfoResponse::level() const {
  return level_;
}
inline void GetPvPMapInfoResponse::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 cur_win = 5;
inline bool GetPvPMapInfoResponse::has_cur_win() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetPvPMapInfoResponse::set_has_cur_win() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetPvPMapInfoResponse::clear_has_cur_win() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetPvPMapInfoResponse::clear_cur_win() {
  cur_win_ = 0;
  clear_has_cur_win();
}
inline ::google::protobuf::int32 GetPvPMapInfoResponse::cur_win() const {
  return cur_win_;
}
inline void GetPvPMapInfoResponse::set_cur_win(::google::protobuf::int32 value) {
  set_has_cur_win();
  cur_win_ = value;
}

// optional int32 winner_bonus_taken = 6;
inline bool GetPvPMapInfoResponse::has_winner_bonus_taken() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetPvPMapInfoResponse::set_has_winner_bonus_taken() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetPvPMapInfoResponse::clear_has_winner_bonus_taken() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetPvPMapInfoResponse::clear_winner_bonus_taken() {
  winner_bonus_taken_ = 0;
  clear_has_winner_bonus_taken();
}
inline ::google::protobuf::int32 GetPvPMapInfoResponse::winner_bonus_taken() const {
  return winner_bonus_taken_;
}
inline void GetPvPMapInfoResponse::set_winner_bonus_taken(::google::protobuf::int32 value) {
  set_has_winner_bonus_taken();
  winner_bonus_taken_ = value;
}

// -------------------------------------------------------------------

// ClearPvPCDRequest

// -------------------------------------------------------------------

// ClearPvPCDResponse

// required int32 error_code = 1;
inline bool ClearPvPCDResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClearPvPCDResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClearPvPCDResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClearPvPCDResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 ClearPvPCDResponse::error_code() const {
  return error_code_;
}
inline void ClearPvPCDResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// PvPUpdateCD

// optional int32 cd_left = 1;
inline bool PvPUpdateCD::has_cd_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPUpdateCD::set_has_cd_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPUpdateCD::clear_has_cd_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPUpdateCD::clear_cd_left() {
  cd_left_ = 0;
  clear_has_cd_left();
}
inline ::google::protobuf::int32 PvPUpdateCD::cd_left() const {
  return cd_left_;
}
inline void PvPUpdateCD::set_cd_left(::google::protobuf::int32 value) {
  set_has_cd_left();
  cd_left_ = value;
}

// repeated int64 black_guid = 3;
inline int PvPUpdateCD::black_guid_size() const {
  return black_guid_.size();
}
inline void PvPUpdateCD::clear_black_guid() {
  black_guid_.Clear();
}
inline ::google::protobuf::int64 PvPUpdateCD::black_guid(int index) const {
  return black_guid_.Get(index);
}
inline void PvPUpdateCD::set_black_guid(int index, ::google::protobuf::int64 value) {
  black_guid_.Set(index, value);
}
inline void PvPUpdateCD::add_black_guid(::google::protobuf::int64 value) {
  black_guid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PvPUpdateCD::black_guid() const {
  return black_guid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PvPUpdateCD::mutable_black_guid() {
  return &black_guid_;
}

// -------------------------------------------------------------------

// PvPActNotify

// required int32 update_type = 1;
inline bool PvPActNotify::has_update_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPActNotify::set_has_update_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPActNotify::clear_has_update_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPActNotify::clear_update_type() {
  update_type_ = 0;
  clear_has_update_type();
}
inline ::google::protobuf::int32 PvPActNotify::update_type() const {
  return update_type_;
}
inline void PvPActNotify::set_update_type(::google::protobuf::int32 value) {
  set_has_update_type();
  update_type_ = value;
}

// repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
inline int PvPActNotify::rank_info_size() const {
  return rank_info_.size();
}
inline void PvPActNotify::clear_rank_info() {
  rank_info_.Clear();
}
inline const ::protocols::common::PlayerPvPRankInfo& PvPActNotify::rank_info(int index) const {
  return rank_info_.Get(index);
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::mutable_rank_info(int index) {
  return rank_info_.Mutable(index);
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::add_rank_info() {
  return rank_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >&
PvPActNotify::rank_info() const {
  return rank_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::PlayerPvPRankInfo >*
PvPActNotify::mutable_rank_info() {
  return &rank_info_;
}

// optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
inline bool PvPActNotify::has_defender_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPActNotify::set_has_defender_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPActNotify::clear_has_defender_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPActNotify::clear_defender_info() {
  if (defender_info_ != NULL) defender_info_->::protocols::common::PlayerPvPRankInfo::Clear();
  clear_has_defender_info();
}
inline const ::protocols::common::PlayerPvPRankInfo& PvPActNotify::defender_info() const {
  return defender_info_ != NULL ? *defender_info_ : *default_instance_->defender_info_;
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::mutable_defender_info() {
  set_has_defender_info();
  if (defender_info_ == NULL) defender_info_ = new ::protocols::common::PlayerPvPRankInfo;
  return defender_info_;
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::release_defender_info() {
  clear_has_defender_info();
  ::protocols::common::PlayerPvPRankInfo* temp = defender_info_;
  defender_info_ = NULL;
  return temp;
}

// optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
inline bool PvPActNotify::has_attacker_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPActNotify::set_has_attacker_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPActNotify::clear_has_attacker_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPActNotify::clear_attacker_info() {
  if (attacker_info_ != NULL) attacker_info_->::protocols::common::PlayerPvPRankInfo::Clear();
  clear_has_attacker_info();
}
inline const ::protocols::common::PlayerPvPRankInfo& PvPActNotify::attacker_info() const {
  return attacker_info_ != NULL ? *attacker_info_ : *default_instance_->attacker_info_;
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::mutable_attacker_info() {
  set_has_attacker_info();
  if (attacker_info_ == NULL) attacker_info_ = new ::protocols::common::PlayerPvPRankInfo;
  return attacker_info_;
}
inline ::protocols::common::PlayerPvPRankInfo* PvPActNotify::release_attacker_info() {
  clear_has_attacker_info();
  ::protocols::common::PlayerPvPRankInfo* temp = attacker_info_;
  attacker_info_ = NULL;
  return temp;
}

// optional int32 player_cur_level = 5;
inline bool PvPActNotify::has_player_cur_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPActNotify::set_has_player_cur_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPActNotify::clear_has_player_cur_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPActNotify::clear_player_cur_level() {
  player_cur_level_ = 0;
  clear_has_player_cur_level();
}
inline ::google::protobuf::int32 PvPActNotify::player_cur_level() const {
  return player_cur_level_;
}
inline void PvPActNotify::set_player_cur_level(::google::protobuf::int32 value) {
  set_has_player_cur_level();
  player_cur_level_ = value;
}

// optional int32 player_cur_win = 6;
inline bool PvPActNotify::has_player_cur_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPActNotify::set_has_player_cur_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPActNotify::clear_has_player_cur_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPActNotify::clear_player_cur_win() {
  player_cur_win_ = 0;
  clear_has_player_cur_win();
}
inline ::google::protobuf::int32 PvPActNotify::player_cur_win() const {
  return player_cur_win_;
}
inline void PvPActNotify::set_player_cur_win(::google::protobuf::int32 value) {
  set_has_player_cur_win();
  player_cur_win_ = value;
}

// optional int32 player_cont_win = 9;
inline bool PvPActNotify::has_player_cont_win() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvPActNotify::set_has_player_cont_win() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvPActNotify::clear_has_player_cont_win() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvPActNotify::clear_player_cont_win() {
  player_cont_win_ = 0;
  clear_has_player_cont_win();
}
inline ::google::protobuf::int32 PvPActNotify::player_cont_win() const {
  return player_cont_win_;
}
inline void PvPActNotify::set_player_cont_win(::google::protobuf::int32 value) {
  set_has_player_cont_win();
  player_cont_win_ = value;
}

// optional int32 time_left = 7;
inline bool PvPActNotify::has_time_left() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PvPActNotify::set_has_time_left() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PvPActNotify::clear_has_time_left() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PvPActNotify::clear_time_left() {
  time_left_ = 0;
  clear_has_time_left();
}
inline ::google::protobuf::int32 PvPActNotify::time_left() const {
  return time_left_;
}
inline void PvPActNotify::set_time_left(::google::protobuf::int32 value) {
  set_has_time_left();
  time_left_ = value;
}

// repeated .protocols.common.ItemInfo bonus_item = 8;
inline int PvPActNotify::bonus_item_size() const {
  return bonus_item_.size();
}
inline void PvPActNotify::clear_bonus_item() {
  bonus_item_.Clear();
}
inline const ::protocols::common::ItemInfo& PvPActNotify::bonus_item(int index) const {
  return bonus_item_.Get(index);
}
inline ::protocols::common::ItemInfo* PvPActNotify::mutable_bonus_item(int index) {
  return bonus_item_.Mutable(index);
}
inline ::protocols::common::ItemInfo* PvPActNotify::add_bonus_item() {
  return bonus_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
PvPActNotify::bonus_item() const {
  return bonus_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
PvPActNotify::mutable_bonus_item() {
  return &bonus_item_;
}

// -------------------------------------------------------------------

// PvPRobotNotify

// optional int32 robot_type = 1;
inline bool PvPRobotNotify::has_robot_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPRobotNotify::set_has_robot_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPRobotNotify::clear_has_robot_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPRobotNotify::clear_robot_type() {
  robot_type_ = 0;
  clear_has_robot_type();
}
inline ::google::protobuf::int32 PvPRobotNotify::robot_type() const {
  return robot_type_;
}
inline void PvPRobotNotify::set_robot_type(::google::protobuf::int32 value) {
  set_has_robot_type();
  robot_type_ = value;
}

// optional int32 robot_id = 2;
inline bool PvPRobotNotify::has_robot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPRobotNotify::set_has_robot_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPRobotNotify::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPRobotNotify::clear_robot_id() {
  robot_id_ = 0;
  clear_has_robot_id();
}
inline ::google::protobuf::int32 PvPRobotNotify::robot_id() const {
  return robot_id_;
}
inline void PvPRobotNotify::set_robot_id(::google::protobuf::int32 value) {
  set_has_robot_id();
  robot_id_ = value;
}

// optional int32 robot_level = 3;
inline bool PvPRobotNotify::has_robot_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPRobotNotify::set_has_robot_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPRobotNotify::clear_has_robot_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPRobotNotify::clear_robot_level() {
  robot_level_ = 0;
  clear_has_robot_level();
}
inline ::google::protobuf::int32 PvPRobotNotify::robot_level() const {
  return robot_level_;
}
inline void PvPRobotNotify::set_robot_level(::google::protobuf::int32 value) {
  set_has_robot_level();
  robot_level_ = value;
}

// optional int32 robot_map_x = 4;
inline bool PvPRobotNotify::has_robot_map_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPRobotNotify::set_has_robot_map_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPRobotNotify::clear_has_robot_map_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPRobotNotify::clear_robot_map_x() {
  robot_map_x_ = 0;
  clear_has_robot_map_x();
}
inline ::google::protobuf::int32 PvPRobotNotify::robot_map_x() const {
  return robot_map_x_;
}
inline void PvPRobotNotify::set_robot_map_x(::google::protobuf::int32 value) {
  set_has_robot_map_x();
  robot_map_x_ = value;
}

// optional int32 robot_map_y = 5;
inline bool PvPRobotNotify::has_robot_map_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPRobotNotify::set_has_robot_map_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPRobotNotify::clear_has_robot_map_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPRobotNotify::clear_robot_map_y() {
  robot_map_y_ = 0;
  clear_has_robot_map_y();
}
inline ::google::protobuf::int32 PvPRobotNotify::robot_map_y() const {
  return robot_map_y_;
}
inline void PvPRobotNotify::set_robot_map_y(::google::protobuf::int32 value) {
  set_has_robot_map_y();
  robot_map_y_ = value;
}

// -------------------------------------------------------------------

// PvPBonusNotify

// optional int32 bonus_type = 1;
inline bool PvPBonusNotify::has_bonus_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPBonusNotify::set_has_bonus_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPBonusNotify::clear_has_bonus_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPBonusNotify::clear_bonus_type() {
  bonus_type_ = 0;
  clear_has_bonus_type();
}
inline ::google::protobuf::int32 PvPBonusNotify::bonus_type() const {
  return bonus_type_;
}
inline void PvPBonusNotify::set_bonus_type(::google::protobuf::int32 value) {
  set_has_bonus_type();
  bonus_type_ = value;
}

// optional int32 cur_level = 3;
inline bool PvPBonusNotify::has_cur_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPBonusNotify::set_has_cur_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPBonusNotify::clear_has_cur_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPBonusNotify::clear_cur_level() {
  cur_level_ = 0;
  clear_has_cur_level();
}
inline ::google::protobuf::int32 PvPBonusNotify::cur_level() const {
  return cur_level_;
}
inline void PvPBonusNotify::set_cur_level(::google::protobuf::int32 value) {
  set_has_cur_level();
  cur_level_ = value;
}

// optional int32 rank = 4;
inline bool PvPBonusNotify::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPBonusNotify::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPBonusNotify::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPBonusNotify::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 PvPBonusNotify::rank() const {
  return rank_;
}
inline void PvPBonusNotify::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .protocols.common.ItemInfo item_info = 2;
inline int PvPBonusNotify::item_info_size() const {
  return item_info_.size();
}
inline void PvPBonusNotify::clear_item_info() {
  item_info_.Clear();
}
inline const ::protocols::common::ItemInfo& PvPBonusNotify::item_info(int index) const {
  return item_info_.Get(index);
}
inline ::protocols::common::ItemInfo* PvPBonusNotify::mutable_item_info(int index) {
  return item_info_.Mutable(index);
}
inline ::protocols::common::ItemInfo* PvPBonusNotify::add_item_info() {
  return item_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
PvPBonusNotify::item_info() const {
  return item_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
PvPBonusNotify::mutable_item_info() {
  return &item_info_;
}

// -------------------------------------------------------------------

// TakePvPGiftRequest

// optional int32 bonus_type = 1;
inline bool TakePvPGiftRequest::has_bonus_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakePvPGiftRequest::set_has_bonus_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakePvPGiftRequest::clear_has_bonus_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakePvPGiftRequest::clear_bonus_type() {
  bonus_type_ = 0;
  clear_has_bonus_type();
}
inline ::google::protobuf::int32 TakePvPGiftRequest::bonus_type() const {
  return bonus_type_;
}
inline void TakePvPGiftRequest::set_bonus_type(::google::protobuf::int32 value) {
  set_has_bonus_type();
  bonus_type_ = value;
}

// optional int32 level = 2;
inline bool TakePvPGiftRequest::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakePvPGiftRequest::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakePvPGiftRequest::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakePvPGiftRequest::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 TakePvPGiftRequest::level() const {
  return level_;
}
inline void TakePvPGiftRequest::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// TakePvPGiftResponse

// required int32 error_code = 1;
inline bool TakePvPGiftResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakePvPGiftResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakePvPGiftResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakePvPGiftResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TakePvPGiftResponse::error_code() const {
  return error_code_;
}
inline void TakePvPGiftResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// BossInfo

// optional string boss_name = 1;
inline bool BossInfo::has_boss_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossInfo::set_has_boss_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossInfo::clear_has_boss_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossInfo::clear_boss_name() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    boss_name_->clear();
  }
  clear_has_boss_name();
}
inline const ::std::string& BossInfo::boss_name() const {
  return *boss_name_;
}
inline void BossInfo::set_boss_name(const ::std::string& value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void BossInfo::set_boss_name(const char* value) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(value);
}
inline void BossInfo::set_boss_name(const char* value, size_t size) {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  boss_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossInfo::mutable_boss_name() {
  set_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    boss_name_ = new ::std::string;
  }
  return boss_name_;
}
inline ::std::string* BossInfo::release_boss_name() {
  clear_has_boss_name();
  if (boss_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_name_;
    boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 boss_level = 2;
inline bool BossInfo::has_boss_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossInfo::set_has_boss_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossInfo::clear_has_boss_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossInfo::clear_boss_level() {
  boss_level_ = 0;
  clear_has_boss_level();
}
inline ::google::protobuf::int32 BossInfo::boss_level() const {
  return boss_level_;
}
inline void BossInfo::set_boss_level(::google::protobuf::int32 value) {
  set_has_boss_level();
  boss_level_ = value;
}

// optional int32 max_hp = 3;
inline bool BossInfo::has_max_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossInfo::set_has_max_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossInfo::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossInfo::clear_max_hp() {
  max_hp_ = 0;
  clear_has_max_hp();
}
inline ::google::protobuf::int32 BossInfo::max_hp() const {
  return max_hp_;
}
inline void BossInfo::set_max_hp(::google::protobuf::int32 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional int32 hp = 4;
inline bool BossInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BossInfo::hp() const {
  return hp_;
}
inline void BossInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 show_status = 5;
inline bool BossInfo::has_show_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossInfo::set_has_show_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossInfo::clear_has_show_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossInfo::clear_show_status() {
  show_status_ = 0;
  clear_has_show_status();
}
inline ::google::protobuf::int32 BossInfo::show_status() const {
  return show_status_;
}
inline void BossInfo::set_show_status(::google::protobuf::int32 value) {
  set_has_show_status();
  show_status_ = value;
}

// -------------------------------------------------------------------

// GuildWarContributionPlayer

// optional int32 rank = 1;
inline bool GuildWarContributionPlayer::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarContributionPlayer::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarContributionPlayer::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarContributionPlayer::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GuildWarContributionPlayer::rank() const {
  return rank_;
}
inline void GuildWarContributionPlayer::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 guid = 2;
inline bool GuildWarContributionPlayer::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarContributionPlayer::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarContributionPlayer::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarContributionPlayer::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 GuildWarContributionPlayer::guid() const {
  return guid_;
}
inline void GuildWarContributionPlayer::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional string name = 3;
inline bool GuildWarContributionPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarContributionPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarContributionPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarContributionPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GuildWarContributionPlayer::name() const {
  return *name_;
}
inline void GuildWarContributionPlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildWarContributionPlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildWarContributionPlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarContributionPlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildWarContributionPlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 damage = 4;
inline bool GuildWarContributionPlayer::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarContributionPlayer::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarContributionPlayer::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarContributionPlayer::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 GuildWarContributionPlayer::damage() const {
  return damage_;
}
inline void GuildWarContributionPlayer::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int32 encourage_time = 5;
inline bool GuildWarContributionPlayer::has_encourage_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarContributionPlayer::set_has_encourage_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarContributionPlayer::clear_has_encourage_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarContributionPlayer::clear_encourage_time() {
  encourage_time_ = 0;
  clear_has_encourage_time();
}
inline ::google::protobuf::int32 GuildWarContributionPlayer::encourage_time() const {
  return encourage_time_;
}
inline void GuildWarContributionPlayer::set_encourage_time(::google::protobuf::int32 value) {
  set_has_encourage_time();
  encourage_time_ = value;
}

// optional int32 contribution = 6;
inline bool GuildWarContributionPlayer::has_contribution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarContributionPlayer::set_has_contribution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarContributionPlayer::clear_has_contribution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarContributionPlayer::clear_contribution() {
  contribution_ = 0;
  clear_has_contribution();
}
inline ::google::protobuf::int32 GuildWarContributionPlayer::contribution() const {
  return contribution_;
}
inline void GuildWarContributionPlayer::set_contribution(::google::protobuf::int32 value) {
  set_has_contribution();
  contribution_ = value;
}

// -------------------------------------------------------------------

// EnterGuildWarMapRequest

// -------------------------------------------------------------------

// EnterGuildWarMapResponse

// required int32 error_code = 1;
inline bool EnterGuildWarMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGuildWarMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGuildWarMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGuildWarMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 EnterGuildWarMapResponse::error_code() const {
  return error_code_;
}
inline void EnterGuildWarMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// LeaveGuildWarMapRequest

// -------------------------------------------------------------------

// LeaveGuildWarMapResponse

// required int32 error_code = 1;
inline bool LeaveGuildWarMapResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveGuildWarMapResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveGuildWarMapResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveGuildWarMapResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 LeaveGuildWarMapResponse::error_code() const {
  return error_code_;
}
inline void LeaveGuildWarMapResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// GuildWarSchedule

// optional int32 event_type = 1;
inline bool GuildWarSchedule::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarSchedule::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarSchedule::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarSchedule::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::google::protobuf::int32 GuildWarSchedule::event_type() const {
  return event_type_;
}
inline void GuildWarSchedule::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
}

// required int32 contest_type = 2;
inline bool GuildWarSchedule::has_contest_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarSchedule::set_has_contest_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarSchedule::clear_has_contest_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarSchedule::clear_contest_type() {
  contest_type_ = 0;
  clear_has_contest_type();
}
inline ::google::protobuf::int32 GuildWarSchedule::contest_type() const {
  return contest_type_;
}
inline void GuildWarSchedule::set_contest_type(::google::protobuf::int32 value) {
  set_has_contest_type();
  contest_type_ = value;
}

// required int32 ContestProgressType = 3;
inline bool GuildWarSchedule::has_contestprogresstype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarSchedule::set_has_contestprogresstype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarSchedule::clear_has_contestprogresstype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarSchedule::clear_contestprogresstype() {
  contestprogresstype_ = 0;
  clear_has_contestprogresstype();
}
inline ::google::protobuf::int32 GuildWarSchedule::contestprogresstype() const {
  return contestprogresstype_;
}
inline void GuildWarSchedule::set_contestprogresstype(::google::protobuf::int32 value) {
  set_has_contestprogresstype();
  contestprogresstype_ = value;
}

// optional int32 start_time = 4;
inline bool GuildWarSchedule::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarSchedule::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarSchedule::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarSchedule::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
inline ::google::protobuf::int32 GuildWarSchedule::start_time() const {
  return start_time_;
}
inline void GuildWarSchedule::set_start_time(::google::protobuf::int32 value) {
  set_has_start_time();
  start_time_ = value;
}

// optional int32 end_time = 5;
inline bool GuildWarSchedule::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarSchedule::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarSchedule::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarSchedule::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 GuildWarSchedule::end_time() const {
  return end_time_;
}
inline void GuildWarSchedule::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 time_left = 7;
inline bool GuildWarSchedule::has_time_left() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarSchedule::set_has_time_left() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarSchedule::clear_has_time_left() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarSchedule::clear_time_left() {
  time_left_ = 0;
  clear_has_time_left();
}
inline ::google::protobuf::int32 GuildWarSchedule::time_left() const {
  return time_left_;
}
inline void GuildWarSchedule::set_time_left(::google::protobuf::int32 value) {
  set_has_time_left();
  time_left_ = value;
}

// repeated .protocols.common.CompetitorGuild competitor_info = 6;
inline int GuildWarSchedule::competitor_info_size() const {
  return competitor_info_.size();
}
inline void GuildWarSchedule::clear_competitor_info() {
  competitor_info_.Clear();
}
inline const ::protocols::common::CompetitorGuild& GuildWarSchedule::competitor_info(int index) const {
  return competitor_info_.Get(index);
}
inline ::protocols::common::CompetitorGuild* GuildWarSchedule::mutable_competitor_info(int index) {
  return competitor_info_.Mutable(index);
}
inline ::protocols::common::CompetitorGuild* GuildWarSchedule::add_competitor_info() {
  return competitor_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::CompetitorGuild >&
GuildWarSchedule::competitor_info() const {
  return competitor_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::CompetitorGuild >*
GuildWarSchedule::mutable_competitor_info() {
  return &competitor_info_;
}

// optional string str_start_time = 8;
inline bool GuildWarSchedule::has_str_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildWarSchedule::set_has_str_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildWarSchedule::clear_has_str_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildWarSchedule::clear_str_start_time() {
  if (str_start_time_ != &::google::protobuf::internal::kEmptyString) {
    str_start_time_->clear();
  }
  clear_has_str_start_time();
}
inline const ::std::string& GuildWarSchedule::str_start_time() const {
  return *str_start_time_;
}
inline void GuildWarSchedule::set_str_start_time(const ::std::string& value) {
  set_has_str_start_time();
  if (str_start_time_ == &::google::protobuf::internal::kEmptyString) {
    str_start_time_ = new ::std::string;
  }
  str_start_time_->assign(value);
}
inline void GuildWarSchedule::set_str_start_time(const char* value) {
  set_has_str_start_time();
  if (str_start_time_ == &::google::protobuf::internal::kEmptyString) {
    str_start_time_ = new ::std::string;
  }
  str_start_time_->assign(value);
}
inline void GuildWarSchedule::set_str_start_time(const char* value, size_t size) {
  set_has_str_start_time();
  if (str_start_time_ == &::google::protobuf::internal::kEmptyString) {
    str_start_time_ = new ::std::string;
  }
  str_start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarSchedule::mutable_str_start_time() {
  set_has_str_start_time();
  if (str_start_time_ == &::google::protobuf::internal::kEmptyString) {
    str_start_time_ = new ::std::string;
  }
  return str_start_time_;
}
inline ::std::string* GuildWarSchedule::release_str_start_time() {
  clear_has_str_start_time();
  if (str_start_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_start_time_;
    str_start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetGuildWarMapInfoRequest

// -------------------------------------------------------------------

// GuildWarMapInfo

// optional .protocols.common.GuildWarSchedule schedule = 1;
inline bool GuildWarMapInfo::has_schedule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarMapInfo::set_has_schedule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarMapInfo::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarMapInfo::clear_schedule() {
  if (schedule_ != NULL) schedule_->::protocols::common::GuildWarSchedule::Clear();
  clear_has_schedule();
}
inline const ::protocols::common::GuildWarSchedule& GuildWarMapInfo::schedule() const {
  return schedule_ != NULL ? *schedule_ : *default_instance_->schedule_;
}
inline ::protocols::common::GuildWarSchedule* GuildWarMapInfo::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) schedule_ = new ::protocols::common::GuildWarSchedule;
  return schedule_;
}
inline ::protocols::common::GuildWarSchedule* GuildWarMapInfo::release_schedule() {
  clear_has_schedule();
  ::protocols::common::GuildWarSchedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}

// optional int32 damage_buff_value = 2;
inline bool GuildWarMapInfo::has_damage_buff_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarMapInfo::set_has_damage_buff_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarMapInfo::clear_has_damage_buff_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarMapInfo::clear_damage_buff_value() {
  damage_buff_value_ = 0;
  clear_has_damage_buff_value();
}
inline ::google::protobuf::int32 GuildWarMapInfo::damage_buff_value() const {
  return damage_buff_value_;
}
inline void GuildWarMapInfo::set_damage_buff_value(::google::protobuf::int32 value) {
  set_has_damage_buff_value();
  damage_buff_value_ = value;
}

// optional int32 defence_buff_value = 3;
inline bool GuildWarMapInfo::has_defence_buff_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarMapInfo::set_has_defence_buff_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarMapInfo::clear_has_defence_buff_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarMapInfo::clear_defence_buff_value() {
  defence_buff_value_ = 0;
  clear_has_defence_buff_value();
}
inline ::google::protobuf::int32 GuildWarMapInfo::defence_buff_value() const {
  return defence_buff_value_;
}
inline void GuildWarMapInfo::set_defence_buff_value(::google::protobuf::int32 value) {
  set_has_defence_buff_value();
  defence_buff_value_ = value;
}

// optional .protocols.common.BossInfo boss_info = 4;
inline bool GuildWarMapInfo::has_boss_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarMapInfo::set_has_boss_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarMapInfo::clear_has_boss_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarMapInfo::clear_boss_info() {
  if (boss_info_ != NULL) boss_info_->::protocols::common::BossInfo::Clear();
  clear_has_boss_info();
}
inline const ::protocols::common::BossInfo& GuildWarMapInfo::boss_info() const {
  return boss_info_ != NULL ? *boss_info_ : *default_instance_->boss_info_;
}
inline ::protocols::common::BossInfo* GuildWarMapInfo::mutable_boss_info() {
  set_has_boss_info();
  if (boss_info_ == NULL) boss_info_ = new ::protocols::common::BossInfo;
  return boss_info_;
}
inline ::protocols::common::BossInfo* GuildWarMapInfo::release_boss_info() {
  clear_has_boss_info();
  ::protocols::common::BossInfo* temp = boss_info_;
  boss_info_ = NULL;
  return temp;
}

// optional int32 cd_left = 5;
inline bool GuildWarMapInfo::has_cd_left() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarMapInfo::set_has_cd_left() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarMapInfo::clear_has_cd_left() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarMapInfo::clear_cd_left() {
  cd_left_ = 0;
  clear_has_cd_left();
}
inline ::google::protobuf::int32 GuildWarMapInfo::cd_left() const {
  return cd_left_;
}
inline void GuildWarMapInfo::set_cd_left(::google::protobuf::int32 value) {
  set_has_cd_left();
  cd_left_ = value;
}

// -------------------------------------------------------------------

// GetGuildWarMapInfoResponse

// required int32 error_code = 1;
inline bool GetGuildWarMapInfoResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGuildWarMapInfoResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGuildWarMapInfoResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGuildWarMapInfoResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetGuildWarMapInfoResponse::error_code() const {
  return error_code_;
}
inline void GetGuildWarMapInfoResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .protocols.common.GuildWarMapInfo map_info = 2;
inline bool GetGuildWarMapInfoResponse::has_map_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetGuildWarMapInfoResponse::set_has_map_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetGuildWarMapInfoResponse::clear_has_map_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetGuildWarMapInfoResponse::clear_map_info() {
  if (map_info_ != NULL) map_info_->::protocols::common::GuildWarMapInfo::Clear();
  clear_has_map_info();
}
inline const ::protocols::common::GuildWarMapInfo& GetGuildWarMapInfoResponse::map_info() const {
  return map_info_ != NULL ? *map_info_ : *default_instance_->map_info_;
}
inline ::protocols::common::GuildWarMapInfo* GetGuildWarMapInfoResponse::mutable_map_info() {
  set_has_map_info();
  if (map_info_ == NULL) map_info_ = new ::protocols::common::GuildWarMapInfo;
  return map_info_;
}
inline ::protocols::common::GuildWarMapInfo* GetGuildWarMapInfoResponse::release_map_info() {
  clear_has_map_info();
  ::protocols::common::GuildWarMapInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}

// optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
inline bool GetGuildWarMapInfoResponse::has_battle_info_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetGuildWarMapInfoResponse::set_has_battle_info_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetGuildWarMapInfoResponse::clear_has_battle_info_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetGuildWarMapInfoResponse::clear_battle_info_a() {
  if (battle_info_a_ != NULL) battle_info_a_->::protocols::common::GuildWarGuildBattleInfo::Clear();
  clear_has_battle_info_a();
}
inline const ::protocols::common::GuildWarGuildBattleInfo& GetGuildWarMapInfoResponse::battle_info_a() const {
  return battle_info_a_ != NULL ? *battle_info_a_ : *default_instance_->battle_info_a_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GetGuildWarMapInfoResponse::mutable_battle_info_a() {
  set_has_battle_info_a();
  if (battle_info_a_ == NULL) battle_info_a_ = new ::protocols::common::GuildWarGuildBattleInfo;
  return battle_info_a_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GetGuildWarMapInfoResponse::release_battle_info_a() {
  clear_has_battle_info_a();
  ::protocols::common::GuildWarGuildBattleInfo* temp = battle_info_a_;
  battle_info_a_ = NULL;
  return temp;
}

// optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
inline bool GetGuildWarMapInfoResponse::has_battle_info_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetGuildWarMapInfoResponse::set_has_battle_info_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetGuildWarMapInfoResponse::clear_has_battle_info_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetGuildWarMapInfoResponse::clear_battle_info_b() {
  if (battle_info_b_ != NULL) battle_info_b_->::protocols::common::GuildWarGuildBattleInfo::Clear();
  clear_has_battle_info_b();
}
inline const ::protocols::common::GuildWarGuildBattleInfo& GetGuildWarMapInfoResponse::battle_info_b() const {
  return battle_info_b_ != NULL ? *battle_info_b_ : *default_instance_->battle_info_b_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GetGuildWarMapInfoResponse::mutable_battle_info_b() {
  set_has_battle_info_b();
  if (battle_info_b_ == NULL) battle_info_b_ = new ::protocols::common::GuildWarGuildBattleInfo;
  return battle_info_b_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GetGuildWarMapInfoResponse::release_battle_info_b() {
  clear_has_battle_info_b();
  ::protocols::common::GuildWarGuildBattleInfo* temp = battle_info_b_;
  battle_info_b_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GuildWarNotify

// required int32 notify_type = 1;
inline bool GuildWarNotify::has_notify_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarNotify::set_has_notify_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarNotify::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarNotify::clear_notify_type() {
  notify_type_ = 0;
  clear_has_notify_type();
}
inline ::google::protobuf::int32 GuildWarNotify::notify_type() const {
  return notify_type_;
}
inline void GuildWarNotify::set_notify_type(::google::protobuf::int32 value) {
  set_has_notify_type();
  notify_type_ = value;
}

// optional int32 guild_id = 13;
inline bool GuildWarNotify::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarNotify::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarNotify::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarNotify::clear_guild_id() {
  guild_id_ = 0;
  clear_has_guild_id();
}
inline ::google::protobuf::int32 GuildWarNotify::guild_id() const {
  return guild_id_;
}
inline void GuildWarNotify::set_guild_id(::google::protobuf::int32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 14;
inline bool GuildWarNotify::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarNotify::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarNotify::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarNotify::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GuildWarNotify::guild_name() const {
  return *guild_name_;
}
inline void GuildWarNotify::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildWarNotify::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildWarNotify::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarNotify::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GuildWarNotify::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protocols.common.GuildWarMapInfo map_info = 2;
inline bool GuildWarNotify::has_map_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarNotify::set_has_map_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarNotify::clear_has_map_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarNotify::clear_map_info() {
  if (map_info_ != NULL) map_info_->::protocols::common::GuildWarMapInfo::Clear();
  clear_has_map_info();
}
inline const ::protocols::common::GuildWarMapInfo& GuildWarNotify::map_info() const {
  return map_info_ != NULL ? *map_info_ : *default_instance_->map_info_;
}
inline ::protocols::common::GuildWarMapInfo* GuildWarNotify::mutable_map_info() {
  set_has_map_info();
  if (map_info_ == NULL) map_info_ = new ::protocols::common::GuildWarMapInfo;
  return map_info_;
}
inline ::protocols::common::GuildWarMapInfo* GuildWarNotify::release_map_info() {
  clear_has_map_info();
  ::protocols::common::GuildWarMapInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}

// optional int32 add_buff_type = 3;
inline bool GuildWarNotify::has_add_buff_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarNotify::set_has_add_buff_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarNotify::clear_has_add_buff_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarNotify::clear_add_buff_type() {
  add_buff_type_ = 0;
  clear_has_add_buff_type();
}
inline ::google::protobuf::int32 GuildWarNotify::add_buff_type() const {
  return add_buff_type_;
}
inline void GuildWarNotify::set_add_buff_type(::google::protobuf::int32 value) {
  set_has_add_buff_type();
  add_buff_type_ = value;
}

// optional .protocols.common.GuildWarContributionPlayer player_info = 4;
inline bool GuildWarNotify::has_player_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarNotify::set_has_player_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarNotify::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarNotify::clear_player_info() {
  if (player_info_ != NULL) player_info_->::protocols::common::GuildWarContributionPlayer::Clear();
  clear_has_player_info();
}
inline const ::protocols::common::GuildWarContributionPlayer& GuildWarNotify::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::protocols::common::GuildWarContributionPlayer* GuildWarNotify::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::protocols::common::GuildWarContributionPlayer;
  return player_info_;
}
inline ::protocols::common::GuildWarContributionPlayer* GuildWarNotify::release_player_info() {
  clear_has_player_info();
  ::protocols::common::GuildWarContributionPlayer* temp = player_info_;
  player_info_ = NULL;
  return temp;
}

// optional int32 delta_contribution = 5;
inline bool GuildWarNotify::has_delta_contribution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildWarNotify::set_has_delta_contribution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildWarNotify::clear_has_delta_contribution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildWarNotify::clear_delta_contribution() {
  delta_contribution_ = 0;
  clear_has_delta_contribution();
}
inline ::google::protobuf::int32 GuildWarNotify::delta_contribution() const {
  return delta_contribution_;
}
inline void GuildWarNotify::set_delta_contribution(::google::protobuf::int32 value) {
  set_has_delta_contribution();
  delta_contribution_ = value;
}

// optional int32 cd_left = 7;
inline bool GuildWarNotify::has_cd_left() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildWarNotify::set_has_cd_left() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildWarNotify::clear_has_cd_left() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildWarNotify::clear_cd_left() {
  cd_left_ = 0;
  clear_has_cd_left();
}
inline ::google::protobuf::int32 GuildWarNotify::cd_left() const {
  return cd_left_;
}
inline void GuildWarNotify::set_cd_left(::google::protobuf::int32 value) {
  set_has_cd_left();
  cd_left_ = value;
}

// repeated .protocols.common.GuildWarBattleResult battle_result = 8;
inline int GuildWarNotify::battle_result_size() const {
  return battle_result_.size();
}
inline void GuildWarNotify::clear_battle_result() {
  battle_result_.Clear();
}
inline const ::protocols::common::GuildWarBattleResult& GuildWarNotify::battle_result(int index) const {
  return battle_result_.Get(index);
}
inline ::protocols::common::GuildWarBattleResult* GuildWarNotify::mutable_battle_result(int index) {
  return battle_result_.Mutable(index);
}
inline ::protocols::common::GuildWarBattleResult* GuildWarNotify::add_battle_result() {
  return battle_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarBattleResult >&
GuildWarNotify::battle_result() const {
  return battle_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarBattleResult >*
GuildWarNotify::mutable_battle_result() {
  return &battle_result_;
}

// repeated .protocols.common.GuildInfo guild_ranks = 9;
inline int GuildWarNotify::guild_ranks_size() const {
  return guild_ranks_.size();
}
inline void GuildWarNotify::clear_guild_ranks() {
  guild_ranks_.Clear();
}
inline const ::protocols::common::GuildInfo& GuildWarNotify::guild_ranks(int index) const {
  return guild_ranks_.Get(index);
}
inline ::protocols::common::GuildInfo* GuildWarNotify::mutable_guild_ranks(int index) {
  return guild_ranks_.Mutable(index);
}
inline ::protocols::common::GuildInfo* GuildWarNotify::add_guild_ranks() {
  return guild_ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildInfo >&
GuildWarNotify::guild_ranks() const {
  return guild_ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildInfo >*
GuildWarNotify::mutable_guild_ranks() {
  return &guild_ranks_;
}

// optional .protocols.common.GuildWarAward award = 10;
inline bool GuildWarNotify::has_award() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildWarNotify::set_has_award() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildWarNotify::clear_has_award() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildWarNotify::clear_award() {
  if (award_ != NULL) award_->::protocols::common::GuildWarAward::Clear();
  clear_has_award();
}
inline const ::protocols::common::GuildWarAward& GuildWarNotify::award() const {
  return award_ != NULL ? *award_ : *default_instance_->award_;
}
inline ::protocols::common::GuildWarAward* GuildWarNotify::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::protocols::common::GuildWarAward;
  return award_;
}
inline ::protocols::common::GuildWarAward* GuildWarNotify::release_award() {
  clear_has_award();
  ::protocols::common::GuildWarAward* temp = award_;
  award_ = NULL;
  return temp;
}

// optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
inline bool GuildWarNotify::has_battle_info_a() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildWarNotify::set_has_battle_info_a() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildWarNotify::clear_has_battle_info_a() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildWarNotify::clear_battle_info_a() {
  if (battle_info_a_ != NULL) battle_info_a_->::protocols::common::GuildWarGuildBattleInfo::Clear();
  clear_has_battle_info_a();
}
inline const ::protocols::common::GuildWarGuildBattleInfo& GuildWarNotify::battle_info_a() const {
  return battle_info_a_ != NULL ? *battle_info_a_ : *default_instance_->battle_info_a_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GuildWarNotify::mutable_battle_info_a() {
  set_has_battle_info_a();
  if (battle_info_a_ == NULL) battle_info_a_ = new ::protocols::common::GuildWarGuildBattleInfo;
  return battle_info_a_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GuildWarNotify::release_battle_info_a() {
  clear_has_battle_info_a();
  ::protocols::common::GuildWarGuildBattleInfo* temp = battle_info_a_;
  battle_info_a_ = NULL;
  return temp;
}

// optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
inline bool GuildWarNotify::has_battle_info_b() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildWarNotify::set_has_battle_info_b() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildWarNotify::clear_has_battle_info_b() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildWarNotify::clear_battle_info_b() {
  if (battle_info_b_ != NULL) battle_info_b_->::protocols::common::GuildWarGuildBattleInfo::Clear();
  clear_has_battle_info_b();
}
inline const ::protocols::common::GuildWarGuildBattleInfo& GuildWarNotify::battle_info_b() const {
  return battle_info_b_ != NULL ? *battle_info_b_ : *default_instance_->battle_info_b_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GuildWarNotify::mutable_battle_info_b() {
  set_has_battle_info_b();
  if (battle_info_b_ == NULL) battle_info_b_ = new ::protocols::common::GuildWarGuildBattleInfo;
  return battle_info_b_;
}
inline ::protocols::common::GuildWarGuildBattleInfo* GuildWarNotify::release_battle_info_b() {
  clear_has_battle_info_b();
  ::protocols::common::GuildWarGuildBattleInfo* temp = battle_info_b_;
  battle_info_b_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GuildWarGuildBattleInfo

// optional int32 guild_id = 1;
inline bool GuildWarGuildBattleInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarGuildBattleInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarGuildBattleInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarGuildBattleInfo::clear_guild_id() {
  guild_id_ = 0;
  clear_has_guild_id();
}
inline ::google::protobuf::int32 GuildWarGuildBattleInfo::guild_id() const {
  return guild_id_;
}
inline void GuildWarGuildBattleInfo::set_guild_id(::google::protobuf::int32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string guild_name = 2;
inline bool GuildWarGuildBattleInfo::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarGuildBattleInfo::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarGuildBattleInfo::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarGuildBattleInfo::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GuildWarGuildBattleInfo::guild_name() const {
  return *guild_name_;
}
inline void GuildWarGuildBattleInfo::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildWarGuildBattleInfo::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildWarGuildBattleInfo::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarGuildBattleInfo::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GuildWarGuildBattleInfo::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 player_left = 3;
inline bool GuildWarGuildBattleInfo::has_player_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarGuildBattleInfo::set_has_player_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarGuildBattleInfo::clear_has_player_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarGuildBattleInfo::clear_player_left() {
  player_left_ = 0;
  clear_has_player_left();
}
inline ::google::protobuf::int32 GuildWarGuildBattleInfo::player_left() const {
  return player_left_;
}
inline void GuildWarGuildBattleInfo::set_player_left(::google::protobuf::int32 value) {
  set_has_player_left();
  player_left_ = value;
}

// repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
inline int GuildWarGuildBattleInfo::player_infos_size() const {
  return player_infos_.size();
}
inline void GuildWarGuildBattleInfo::clear_player_infos() {
  player_infos_.Clear();
}
inline const ::protocols::common::GuildWarPlayerInfo& GuildWarGuildBattleInfo::player_infos(int index) const {
  return player_infos_.Get(index);
}
inline ::protocols::common::GuildWarPlayerInfo* GuildWarGuildBattleInfo::mutable_player_infos(int index) {
  return player_infos_.Mutable(index);
}
inline ::protocols::common::GuildWarPlayerInfo* GuildWarGuildBattleInfo::add_player_infos() {
  return player_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarPlayerInfo >&
GuildWarGuildBattleInfo::player_infos() const {
  return player_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarPlayerInfo >*
GuildWarGuildBattleInfo::mutable_player_infos() {
  return &player_infos_;
}

// -------------------------------------------------------------------

// GuildWarPlayerInfo

// optional string name = 1;
inline bool GuildWarPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GuildWarPlayerInfo::name() const {
  return *name_;
}
inline void GuildWarPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildWarPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildWarPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildWarPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 guid = 2;
inline bool GuildWarPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarPlayerInfo::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 GuildWarPlayerInfo::guid() const {
  return guid_;
}
inline void GuildWarPlayerInfo::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// optional int32 team_id = 8;
inline bool GuildWarPlayerInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarPlayerInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarPlayerInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarPlayerInfo::clear_team_id() {
  team_id_ = 0;
  clear_has_team_id();
}
inline ::google::protobuf::int32 GuildWarPlayerInfo::team_id() const {
  return team_id_;
}
inline void GuildWarPlayerInfo::set_team_id(::google::protobuf::int32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional int64 team_leader_id = 3;
inline bool GuildWarPlayerInfo::has_team_leader_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarPlayerInfo::set_has_team_leader_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarPlayerInfo::clear_has_team_leader_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarPlayerInfo::clear_team_leader_id() {
  team_leader_id_ = GOOGLE_LONGLONG(0);
  clear_has_team_leader_id();
}
inline ::google::protobuf::int64 GuildWarPlayerInfo::team_leader_id() const {
  return team_leader_id_;
}
inline void GuildWarPlayerInfo::set_team_leader_id(::google::protobuf::int64 value) {
  set_has_team_leader_id();
  team_leader_id_ = value;
}

// optional bool is_dead = 4;
inline bool GuildWarPlayerInfo::has_is_dead() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarPlayerInfo::set_has_is_dead() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarPlayerInfo::clear_has_is_dead() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarPlayerInfo::clear_is_dead() {
  is_dead_ = false;
  clear_has_is_dead();
}
inline bool GuildWarPlayerInfo::is_dead() const {
  return is_dead_;
}
inline void GuildWarPlayerInfo::set_is_dead(bool value) {
  set_has_is_dead();
  is_dead_ = value;
}

// optional int32 death_num = 5;
inline bool GuildWarPlayerInfo::has_death_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarPlayerInfo::set_has_death_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarPlayerInfo::clear_has_death_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarPlayerInfo::clear_death_num() {
  death_num_ = 0;
  clear_has_death_num();
}
inline ::google::protobuf::int32 GuildWarPlayerInfo::death_num() const {
  return death_num_;
}
inline void GuildWarPlayerInfo::set_death_num(::google::protobuf::int32 value) {
  set_has_death_num();
  death_num_ = value;
}

// optional int32 win_num = 6;
inline bool GuildWarPlayerInfo::has_win_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildWarPlayerInfo::set_has_win_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildWarPlayerInfo::clear_has_win_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildWarPlayerInfo::clear_win_num() {
  win_num_ = 0;
  clear_has_win_num();
}
inline ::google::protobuf::int32 GuildWarPlayerInfo::win_num() const {
  return win_num_;
}
inline void GuildWarPlayerInfo::set_win_num(::google::protobuf::int32 value) {
  set_has_win_num();
  win_num_ = value;
}

// optional int32 devote_num = 7;
inline bool GuildWarPlayerInfo::has_devote_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildWarPlayerInfo::set_has_devote_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildWarPlayerInfo::clear_has_devote_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildWarPlayerInfo::clear_devote_num() {
  devote_num_ = 0;
  clear_has_devote_num();
}
inline ::google::protobuf::int32 GuildWarPlayerInfo::devote_num() const {
  return devote_num_;
}
inline void GuildWarPlayerInfo::set_devote_num(::google::protobuf::int32 value) {
  set_has_devote_num();
  devote_num_ = value;
}

// optional int32 cd_left = 9;
inline bool GuildWarPlayerInfo::has_cd_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildWarPlayerInfo::set_has_cd_left() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildWarPlayerInfo::clear_has_cd_left() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildWarPlayerInfo::clear_cd_left() {
  cd_left_ = 0;
  clear_has_cd_left();
}
inline ::google::protobuf::int32 GuildWarPlayerInfo::cd_left() const {
  return cd_left_;
}
inline void GuildWarPlayerInfo::set_cd_left(::google::protobuf::int32 value) {
  set_has_cd_left();
  cd_left_ = value;
}

// -------------------------------------------------------------------

// GuildWarAward

// optional bool is_winer = 1;
inline bool GuildWarAward::has_is_winer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarAward::set_has_is_winer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarAward::clear_has_is_winer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarAward::clear_is_winer() {
  is_winer_ = false;
  clear_has_is_winer();
}
inline bool GuildWarAward::is_winer() const {
  return is_winer_;
}
inline void GuildWarAward::set_is_winer(bool value) {
  set_has_is_winer();
  is_winer_ = value;
}

// optional int32 exp = 2;
inline bool GuildWarAward::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarAward::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarAward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarAward::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GuildWarAward::exp() const {
  return exp_;
}
inline void GuildWarAward::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 gold = 3;
inline bool GuildWarAward::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarAward::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarAward::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarAward::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 GuildWarAward::gold() const {
  return gold_;
}
inline void GuildWarAward::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 opponent_guild_id = 4;
inline bool GuildWarAward::has_opponent_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarAward::set_has_opponent_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarAward::clear_has_opponent_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarAward::clear_opponent_guild_id() {
  opponent_guild_id_ = 0;
  clear_has_opponent_guild_id();
}
inline ::google::protobuf::int32 GuildWarAward::opponent_guild_id() const {
  return opponent_guild_id_;
}
inline void GuildWarAward::set_opponent_guild_id(::google::protobuf::int32 value) {
  set_has_opponent_guild_id();
  opponent_guild_id_ = value;
}

// optional string opponent_guild_name = 5;
inline bool GuildWarAward::has_opponent_guild_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarAward::set_has_opponent_guild_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarAward::clear_has_opponent_guild_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarAward::clear_opponent_guild_name() {
  if (opponent_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    opponent_guild_name_->clear();
  }
  clear_has_opponent_guild_name();
}
inline const ::std::string& GuildWarAward::opponent_guild_name() const {
  return *opponent_guild_name_;
}
inline void GuildWarAward::set_opponent_guild_name(const ::std::string& value) {
  set_has_opponent_guild_name();
  if (opponent_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    opponent_guild_name_ = new ::std::string;
  }
  opponent_guild_name_->assign(value);
}
inline void GuildWarAward::set_opponent_guild_name(const char* value) {
  set_has_opponent_guild_name();
  if (opponent_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    opponent_guild_name_ = new ::std::string;
  }
  opponent_guild_name_->assign(value);
}
inline void GuildWarAward::set_opponent_guild_name(const char* value, size_t size) {
  set_has_opponent_guild_name();
  if (opponent_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    opponent_guild_name_ = new ::std::string;
  }
  opponent_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarAward::mutable_opponent_guild_name() {
  set_has_opponent_guild_name();
  if (opponent_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    opponent_guild_name_ = new ::std::string;
  }
  return opponent_guild_name_;
}
inline ::std::string* GuildWarAward::release_opponent_guild_name() {
  clear_has_opponent_guild_name();
  if (opponent_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opponent_guild_name_;
    opponent_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 rank = 6;
inline bool GuildWarAward::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarAward::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarAward::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarAward::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GuildWarAward::rank() const {
  return rank_;
}
inline void GuildWarAward::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// GuildWarBattleResult

// optional .protocols.common.GuildInfo camp_a_guild = 1;
inline bool GuildWarBattleResult::has_camp_a_guild() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarBattleResult::set_has_camp_a_guild() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarBattleResult::clear_has_camp_a_guild() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarBattleResult::clear_camp_a_guild() {
  if (camp_a_guild_ != NULL) camp_a_guild_->::protocols::common::GuildInfo::Clear();
  clear_has_camp_a_guild();
}
inline const ::protocols::common::GuildInfo& GuildWarBattleResult::camp_a_guild() const {
  return camp_a_guild_ != NULL ? *camp_a_guild_ : *default_instance_->camp_a_guild_;
}
inline ::protocols::common::GuildInfo* GuildWarBattleResult::mutable_camp_a_guild() {
  set_has_camp_a_guild();
  if (camp_a_guild_ == NULL) camp_a_guild_ = new ::protocols::common::GuildInfo;
  return camp_a_guild_;
}
inline ::protocols::common::GuildInfo* GuildWarBattleResult::release_camp_a_guild() {
  clear_has_camp_a_guild();
  ::protocols::common::GuildInfo* temp = camp_a_guild_;
  camp_a_guild_ = NULL;
  return temp;
}

// optional .protocols.common.GuildInfo camp_b_guild = 2;
inline bool GuildWarBattleResult::has_camp_b_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarBattleResult::set_has_camp_b_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarBattleResult::clear_has_camp_b_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarBattleResult::clear_camp_b_guild() {
  if (camp_b_guild_ != NULL) camp_b_guild_->::protocols::common::GuildInfo::Clear();
  clear_has_camp_b_guild();
}
inline const ::protocols::common::GuildInfo& GuildWarBattleResult::camp_b_guild() const {
  return camp_b_guild_ != NULL ? *camp_b_guild_ : *default_instance_->camp_b_guild_;
}
inline ::protocols::common::GuildInfo* GuildWarBattleResult::mutable_camp_b_guild() {
  set_has_camp_b_guild();
  if (camp_b_guild_ == NULL) camp_b_guild_ = new ::protocols::common::GuildInfo;
  return camp_b_guild_;
}
inline ::protocols::common::GuildInfo* GuildWarBattleResult::release_camp_b_guild() {
  clear_has_camp_b_guild();
  ::protocols::common::GuildInfo* temp = camp_b_guild_;
  camp_b_guild_ = NULL;
  return temp;
}

// optional int32 win_num_of_a = 3;
inline bool GuildWarBattleResult::has_win_num_of_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarBattleResult::set_has_win_num_of_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarBattleResult::clear_has_win_num_of_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarBattleResult::clear_win_num_of_a() {
  win_num_of_a_ = 0;
  clear_has_win_num_of_a();
}
inline ::google::protobuf::int32 GuildWarBattleResult::win_num_of_a() const {
  return win_num_of_a_;
}
inline void GuildWarBattleResult::set_win_num_of_a(::google::protobuf::int32 value) {
  set_has_win_num_of_a();
  win_num_of_a_ = value;
}

// optional string player_a_name = 4;
inline bool GuildWarBattleResult::has_player_a_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarBattleResult::set_has_player_a_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarBattleResult::clear_has_player_a_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarBattleResult::clear_player_a_name() {
  if (player_a_name_ != &::google::protobuf::internal::kEmptyString) {
    player_a_name_->clear();
  }
  clear_has_player_a_name();
}
inline const ::std::string& GuildWarBattleResult::player_a_name() const {
  return *player_a_name_;
}
inline void GuildWarBattleResult::set_player_a_name(const ::std::string& value) {
  set_has_player_a_name();
  if (player_a_name_ == &::google::protobuf::internal::kEmptyString) {
    player_a_name_ = new ::std::string;
  }
  player_a_name_->assign(value);
}
inline void GuildWarBattleResult::set_player_a_name(const char* value) {
  set_has_player_a_name();
  if (player_a_name_ == &::google::protobuf::internal::kEmptyString) {
    player_a_name_ = new ::std::string;
  }
  player_a_name_->assign(value);
}
inline void GuildWarBattleResult::set_player_a_name(const char* value, size_t size) {
  set_has_player_a_name();
  if (player_a_name_ == &::google::protobuf::internal::kEmptyString) {
    player_a_name_ = new ::std::string;
  }
  player_a_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarBattleResult::mutable_player_a_name() {
  set_has_player_a_name();
  if (player_a_name_ == &::google::protobuf::internal::kEmptyString) {
    player_a_name_ = new ::std::string;
  }
  return player_a_name_;
}
inline ::std::string* GuildWarBattleResult::release_player_a_name() {
  clear_has_player_a_name();
  if (player_a_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_a_name_;
    player_a_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string player_b_name = 5;
inline bool GuildWarBattleResult::has_player_b_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarBattleResult::set_has_player_b_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarBattleResult::clear_has_player_b_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarBattleResult::clear_player_b_name() {
  if (player_b_name_ != &::google::protobuf::internal::kEmptyString) {
    player_b_name_->clear();
  }
  clear_has_player_b_name();
}
inline const ::std::string& GuildWarBattleResult::player_b_name() const {
  return *player_b_name_;
}
inline void GuildWarBattleResult::set_player_b_name(const ::std::string& value) {
  set_has_player_b_name();
  if (player_b_name_ == &::google::protobuf::internal::kEmptyString) {
    player_b_name_ = new ::std::string;
  }
  player_b_name_->assign(value);
}
inline void GuildWarBattleResult::set_player_b_name(const char* value) {
  set_has_player_b_name();
  if (player_b_name_ == &::google::protobuf::internal::kEmptyString) {
    player_b_name_ = new ::std::string;
  }
  player_b_name_->assign(value);
}
inline void GuildWarBattleResult::set_player_b_name(const char* value, size_t size) {
  set_has_player_b_name();
  if (player_b_name_ == &::google::protobuf::internal::kEmptyString) {
    player_b_name_ = new ::std::string;
  }
  player_b_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarBattleResult::mutable_player_b_name() {
  set_has_player_b_name();
  if (player_b_name_ == &::google::protobuf::internal::kEmptyString) {
    player_b_name_ = new ::std::string;
  }
  return player_b_name_;
}
inline ::std::string* GuildWarBattleResult::release_player_b_name() {
  clear_has_player_b_name();
  if (player_b_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_b_name_;
    player_b_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 player_a_guid = 6;
inline bool GuildWarBattleResult::has_player_a_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWarBattleResult::set_has_player_a_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWarBattleResult::clear_has_player_a_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWarBattleResult::clear_player_a_guid() {
  player_a_guid_ = GOOGLE_LONGLONG(0);
  clear_has_player_a_guid();
}
inline ::google::protobuf::int64 GuildWarBattleResult::player_a_guid() const {
  return player_a_guid_;
}
inline void GuildWarBattleResult::set_player_a_guid(::google::protobuf::int64 value) {
  set_has_player_a_guid();
  player_a_guid_ = value;
}

// optional int64 player_b_guid = 7;
inline bool GuildWarBattleResult::has_player_b_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildWarBattleResult::set_has_player_b_guid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildWarBattleResult::clear_has_player_b_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildWarBattleResult::clear_player_b_guid() {
  player_b_guid_ = GOOGLE_LONGLONG(0);
  clear_has_player_b_guid();
}
inline ::google::protobuf::int64 GuildWarBattleResult::player_b_guid() const {
  return player_b_guid_;
}
inline void GuildWarBattleResult::set_player_b_guid(::google::protobuf::int64 value) {
  set_has_player_b_guid();
  player_b_guid_ = value;
}

// -------------------------------------------------------------------

// CompetitorGuild

// optional int32 section = 1;
inline bool CompetitorGuild::has_section() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompetitorGuild::set_has_section() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompetitorGuild::clear_has_section() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompetitorGuild::clear_section() {
  section_ = 0;
  clear_has_section();
}
inline ::google::protobuf::int32 CompetitorGuild::section() const {
  return section_;
}
inline void CompetitorGuild::set_section(::google::protobuf::int32 value) {
  set_has_section();
  section_ = value;
}

// optional .protocols.common.GuildInfo camp_a_guild = 2;
inline bool CompetitorGuild::has_camp_a_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompetitorGuild::set_has_camp_a_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompetitorGuild::clear_has_camp_a_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompetitorGuild::clear_camp_a_guild() {
  if (camp_a_guild_ != NULL) camp_a_guild_->::protocols::common::GuildInfo::Clear();
  clear_has_camp_a_guild();
}
inline const ::protocols::common::GuildInfo& CompetitorGuild::camp_a_guild() const {
  return camp_a_guild_ != NULL ? *camp_a_guild_ : *default_instance_->camp_a_guild_;
}
inline ::protocols::common::GuildInfo* CompetitorGuild::mutable_camp_a_guild() {
  set_has_camp_a_guild();
  if (camp_a_guild_ == NULL) camp_a_guild_ = new ::protocols::common::GuildInfo;
  return camp_a_guild_;
}
inline ::protocols::common::GuildInfo* CompetitorGuild::release_camp_a_guild() {
  clear_has_camp_a_guild();
  ::protocols::common::GuildInfo* temp = camp_a_guild_;
  camp_a_guild_ = NULL;
  return temp;
}

// optional .protocols.common.GuildInfo camp_b_guild = 3;
inline bool CompetitorGuild::has_camp_b_guild() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompetitorGuild::set_has_camp_b_guild() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompetitorGuild::clear_has_camp_b_guild() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompetitorGuild::clear_camp_b_guild() {
  if (camp_b_guild_ != NULL) camp_b_guild_->::protocols::common::GuildInfo::Clear();
  clear_has_camp_b_guild();
}
inline const ::protocols::common::GuildInfo& CompetitorGuild::camp_b_guild() const {
  return camp_b_guild_ != NULL ? *camp_b_guild_ : *default_instance_->camp_b_guild_;
}
inline ::protocols::common::GuildInfo* CompetitorGuild::mutable_camp_b_guild() {
  set_has_camp_b_guild();
  if (camp_b_guild_ == NULL) camp_b_guild_ = new ::protocols::common::GuildInfo;
  return camp_b_guild_;
}
inline ::protocols::common::GuildInfo* CompetitorGuild::release_camp_b_guild() {
  clear_has_camp_b_guild();
  ::protocols::common::GuildInfo* temp = camp_b_guild_;
  camp_b_guild_ = NULL;
  return temp;
}

// optional int32 winner_guild_id = 4;
inline bool CompetitorGuild::has_winner_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompetitorGuild::set_has_winner_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompetitorGuild::clear_has_winner_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompetitorGuild::clear_winner_guild_id() {
  winner_guild_id_ = 0;
  clear_has_winner_guild_id();
}
inline ::google::protobuf::int32 CompetitorGuild::winner_guild_id() const {
  return winner_guild_id_;
}
inline void CompetitorGuild::set_winner_guild_id(::google::protobuf::int32 value) {
  set_has_winner_guild_id();
  winner_guild_id_ = value;
}

// -------------------------------------------------------------------

// GuildWarAddBuffRequest

// required int32 type = 1;
inline bool GuildWarAddBuffRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarAddBuffRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarAddBuffRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarAddBuffRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GuildWarAddBuffRequest::type() const {
  return type_;
}
inline void GuildWarAddBuffRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GuildWarAddBuffResponse

// required int32 error_code = 1;
inline bool GuildWarAddBuffResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarAddBuffResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarAddBuffResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarAddBuffResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GuildWarAddBuffResponse::error_code() const {
  return error_code_;
}
inline void GuildWarAddBuffResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 damage_buff_value = 2;
inline bool GuildWarAddBuffResponse::has_damage_buff_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarAddBuffResponse::set_has_damage_buff_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarAddBuffResponse::clear_has_damage_buff_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarAddBuffResponse::clear_damage_buff_value() {
  damage_buff_value_ = 0;
  clear_has_damage_buff_value();
}
inline ::google::protobuf::int32 GuildWarAddBuffResponse::damage_buff_value() const {
  return damage_buff_value_;
}
inline void GuildWarAddBuffResponse::set_damage_buff_value(::google::protobuf::int32 value) {
  set_has_damage_buff_value();
  damage_buff_value_ = value;
}

// optional int32 defence_buff_value = 3;
inline bool GuildWarAddBuffResponse::has_defence_buff_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarAddBuffResponse::set_has_defence_buff_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarAddBuffResponse::clear_has_defence_buff_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarAddBuffResponse::clear_defence_buff_value() {
  defence_buff_value_ = 0;
  clear_has_defence_buff_value();
}
inline ::google::protobuf::int32 GuildWarAddBuffResponse::defence_buff_value() const {
  return defence_buff_value_;
}
inline void GuildWarAddBuffResponse::set_defence_buff_value(::google::protobuf::int32 value) {
  set_has_defence_buff_value();
  defence_buff_value_ = value;
}

// -------------------------------------------------------------------

// GuildWarContributionRank

// repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
inline int GuildWarContributionRank::rank_player_size() const {
  return rank_player_.size();
}
inline void GuildWarContributionRank::clear_rank_player() {
  rank_player_.Clear();
}
inline const ::protocols::common::GuildWarContributionPlayer& GuildWarContributionRank::rank_player(int index) const {
  return rank_player_.Get(index);
}
inline ::protocols::common::GuildWarContributionPlayer* GuildWarContributionRank::mutable_rank_player(int index) {
  return rank_player_.Mutable(index);
}
inline ::protocols::common::GuildWarContributionPlayer* GuildWarContributionRank::add_rank_player() {
  return rank_player_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarContributionPlayer >&
GuildWarContributionRank::rank_player() const {
  return rank_player_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::GuildWarContributionPlayer >*
GuildWarContributionRank::mutable_rank_player() {
  return &rank_player_;
}

// -------------------------------------------------------------------

// GuildWarContributionRankRequest

// -------------------------------------------------------------------

// GuildWarContributionRankResponse

// required int32 error_code = 1;
inline bool GuildWarContributionRankResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarContributionRankResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarContributionRankResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarContributionRankResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GuildWarContributionRankResponse::error_code() const {
  return error_code_;
}
inline void GuildWarContributionRankResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .protocols.common.GuildWarContributionRank rank_info = 2;
inline bool GuildWarContributionRankResponse::has_rank_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarContributionRankResponse::set_has_rank_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarContributionRankResponse::clear_has_rank_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarContributionRankResponse::clear_rank_info() {
  if (rank_info_ != NULL) rank_info_->::protocols::common::GuildWarContributionRank::Clear();
  clear_has_rank_info();
}
inline const ::protocols::common::GuildWarContributionRank& GuildWarContributionRankResponse::rank_info() const {
  return rank_info_ != NULL ? *rank_info_ : *default_instance_->rank_info_;
}
inline ::protocols::common::GuildWarContributionRank* GuildWarContributionRankResponse::mutable_rank_info() {
  set_has_rank_info();
  if (rank_info_ == NULL) rank_info_ = new ::protocols::common::GuildWarContributionRank;
  return rank_info_;
}
inline ::protocols::common::GuildWarContributionRank* GuildWarContributionRankResponse::release_rank_info() {
  clear_has_rank_info();
  ::protocols::common::GuildWarContributionRank* temp = rank_info_;
  rank_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GuildWarContributionRankNotify

// optional .protocols.common.GuildWarContributionRank rank_info = 1;
inline bool GuildWarContributionRankNotify::has_rank_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarContributionRankNotify::set_has_rank_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarContributionRankNotify::clear_has_rank_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarContributionRankNotify::clear_rank_info() {
  if (rank_info_ != NULL) rank_info_->::protocols::common::GuildWarContributionRank::Clear();
  clear_has_rank_info();
}
inline const ::protocols::common::GuildWarContributionRank& GuildWarContributionRankNotify::rank_info() const {
  return rank_info_ != NULL ? *rank_info_ : *default_instance_->rank_info_;
}
inline ::protocols::common::GuildWarContributionRank* GuildWarContributionRankNotify::mutable_rank_info() {
  set_has_rank_info();
  if (rank_info_ == NULL) rank_info_ = new ::protocols::common::GuildWarContributionRank;
  return rank_info_;
}
inline ::protocols::common::GuildWarContributionRank* GuildWarContributionRankNotify::release_rank_info() {
  clear_has_rank_info();
  ::protocols::common::GuildWarContributionRank* temp = rank_info_;
  rank_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UpdateTreasureBoxNotify

// required int32 bonus_type = 1;
inline bool UpdateTreasureBoxNotify::has_bonus_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTreasureBoxNotify::set_has_bonus_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTreasureBoxNotify::clear_has_bonus_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTreasureBoxNotify::clear_bonus_type() {
  bonus_type_ = 0;
  clear_has_bonus_type();
}
inline ::google::protobuf::int32 UpdateTreasureBoxNotify::bonus_type() const {
  return bonus_type_;
}
inline void UpdateTreasureBoxNotify::set_bonus_type(::google::protobuf::int32 value) {
  set_has_bonus_type();
  bonus_type_ = value;
}

// repeated .protocols.common.TreasureBoxReward box_info = 2;
inline int UpdateTreasureBoxNotify::box_info_size() const {
  return box_info_.size();
}
inline void UpdateTreasureBoxNotify::clear_box_info() {
  box_info_.Clear();
}
inline const ::protocols::common::TreasureBoxReward& UpdateTreasureBoxNotify::box_info(int index) const {
  return box_info_.Get(index);
}
inline ::protocols::common::TreasureBoxReward* UpdateTreasureBoxNotify::mutable_box_info(int index) {
  return box_info_.Mutable(index);
}
inline ::protocols::common::TreasureBoxReward* UpdateTreasureBoxNotify::add_box_info() {
  return box_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::TreasureBoxReward >&
UpdateTreasureBoxNotify::box_info() const {
  return box_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::TreasureBoxReward >*
UpdateTreasureBoxNotify::mutable_box_info() {
  return &box_info_;
}

// -------------------------------------------------------------------

// TakeTreasureBoxBonusRequest

// required int32 bonus_type = 1;
inline bool TakeTreasureBoxBonusRequest::has_bonus_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeTreasureBoxBonusRequest::set_has_bonus_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeTreasureBoxBonusRequest::clear_has_bonus_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeTreasureBoxBonusRequest::clear_bonus_type() {
  bonus_type_ = 0;
  clear_has_bonus_type();
}
inline ::google::protobuf::int32 TakeTreasureBoxBonusRequest::bonus_type() const {
  return bonus_type_;
}
inline void TakeTreasureBoxBonusRequest::set_bonus_type(::google::protobuf::int32 value) {
  set_has_bonus_type();
  bonus_type_ = value;
}

// optional int32 box_index = 2;
inline bool TakeTreasureBoxBonusRequest::has_box_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeTreasureBoxBonusRequest::set_has_box_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeTreasureBoxBonusRequest::clear_has_box_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeTreasureBoxBonusRequest::clear_box_index() {
  box_index_ = 0;
  clear_has_box_index();
}
inline ::google::protobuf::int32 TakeTreasureBoxBonusRequest::box_index() const {
  return box_index_;
}
inline void TakeTreasureBoxBonusRequest::set_box_index(::google::protobuf::int32 value) {
  set_has_box_index();
  box_index_ = value;
}

// -------------------------------------------------------------------

// TakeTreasureBoxBonusResponse

// required int32 error_code = 1;
inline bool TakeTreasureBoxBonusResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeTreasureBoxBonusResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeTreasureBoxBonusResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeTreasureBoxBonusResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 TakeTreasureBoxBonusResponse::error_code() const {
  return error_code_;
}
inline void TakeTreasureBoxBonusResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .protocols.common.ItemInfo item = 2;
inline int TakeTreasureBoxBonusResponse::item_size() const {
  return item_.size();
}
inline void TakeTreasureBoxBonusResponse::clear_item() {
  item_.Clear();
}
inline const ::protocols::common::ItemInfo& TakeTreasureBoxBonusResponse::item(int index) const {
  return item_.Get(index);
}
inline ::protocols::common::ItemInfo* TakeTreasureBoxBonusResponse::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::protocols::common::ItemInfo* TakeTreasureBoxBonusResponse::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
TakeTreasureBoxBonusResponse::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
TakeTreasureBoxBonusResponse::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// GuildWarGetCompetitionInfoRequest

// -------------------------------------------------------------------

// GuildWarGetCompetitionInfoResponse

// required int32 error_code = 1;
inline bool GuildWarGetCompetitionInfoResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarGetCompetitionInfoResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarGetCompetitionInfoResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarGetCompetitionInfoResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GuildWarGetCompetitionInfoResponse::error_code() const {
  return error_code_;
}
inline void GuildWarGetCompetitionInfoResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .protocols.common.GuildWarSchedule schedule = 2;
inline bool GuildWarGetCompetitionInfoResponse::has_schedule() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarGetCompetitionInfoResponse::set_has_schedule() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarGetCompetitionInfoResponse::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarGetCompetitionInfoResponse::clear_schedule() {
  if (schedule_ != NULL) schedule_->::protocols::common::GuildWarSchedule::Clear();
  clear_has_schedule();
}
inline const ::protocols::common::GuildWarSchedule& GuildWarGetCompetitionInfoResponse::schedule() const {
  return schedule_ != NULL ? *schedule_ : *default_instance_->schedule_;
}
inline ::protocols::common::GuildWarSchedule* GuildWarGetCompetitionInfoResponse::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) schedule_ = new ::protocols::common::GuildWarSchedule;
  return schedule_;
}
inline ::protocols::common::GuildWarSchedule* GuildWarGetCompetitionInfoResponse::release_schedule() {
  clear_has_schedule();
  ::protocols::common::GuildWarSchedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GetAutoInstanceStatusRequest

// required int32 instance_id = 1;
inline bool GetAutoInstanceStatusRequest::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAutoInstanceStatusRequest::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAutoInstanceStatusRequest::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAutoInstanceStatusRequest::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 GetAutoInstanceStatusRequest::instance_id() const {
  return instance_id_;
}
inline void GetAutoInstanceStatusRequest::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
}

// -------------------------------------------------------------------

// GetAutoInstanceStatusResponse

// required int32 error_code = 1;
inline bool GetAutoInstanceStatusResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAutoInstanceStatusResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAutoInstanceStatusResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAutoInstanceStatusResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 GetAutoInstanceStatusResponse::error_code() const {
  return error_code_;
}
inline void GetAutoInstanceStatusResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .protocols.common.InstanceInfo inst_info = 2;
inline bool GetAutoInstanceStatusResponse::has_inst_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAutoInstanceStatusResponse::set_has_inst_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAutoInstanceStatusResponse::clear_has_inst_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAutoInstanceStatusResponse::clear_inst_info() {
  if (inst_info_ != NULL) inst_info_->::protocols::common::InstanceInfo::Clear();
  clear_has_inst_info();
}
inline const ::protocols::common::InstanceInfo& GetAutoInstanceStatusResponse::inst_info() const {
  return inst_info_ != NULL ? *inst_info_ : *default_instance_->inst_info_;
}
inline ::protocols::common::InstanceInfo* GetAutoInstanceStatusResponse::mutable_inst_info() {
  set_has_inst_info();
  if (inst_info_ == NULL) inst_info_ = new ::protocols::common::InstanceInfo;
  return inst_info_;
}
inline ::protocols::common::InstanceInfo* GetAutoInstanceStatusResponse::release_inst_info() {
  clear_has_inst_info();
  ::protocols::common::InstanceInfo* temp = inst_info_;
  inst_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// StartAutoFightInstanceRequest

// required int32 auto_fight_times = 1;
inline bool StartAutoFightInstanceRequest::has_auto_fight_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartAutoFightInstanceRequest::set_has_auto_fight_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartAutoFightInstanceRequest::clear_has_auto_fight_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartAutoFightInstanceRequest::clear_auto_fight_times() {
  auto_fight_times_ = 0;
  clear_has_auto_fight_times();
}
inline ::google::protobuf::int32 StartAutoFightInstanceRequest::auto_fight_times() const {
  return auto_fight_times_;
}
inline void StartAutoFightInstanceRequest::set_auto_fight_times(::google::protobuf::int32 value) {
  set_has_auto_fight_times();
  auto_fight_times_ = value;
}

// required .protocols.common.InstanceInfo inst_info = 2;
inline bool StartAutoFightInstanceRequest::has_inst_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartAutoFightInstanceRequest::set_has_inst_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartAutoFightInstanceRequest::clear_has_inst_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartAutoFightInstanceRequest::clear_inst_info() {
  if (inst_info_ != NULL) inst_info_->::protocols::common::InstanceInfo::Clear();
  clear_has_inst_info();
}
inline const ::protocols::common::InstanceInfo& StartAutoFightInstanceRequest::inst_info() const {
  return inst_info_ != NULL ? *inst_info_ : *default_instance_->inst_info_;
}
inline ::protocols::common::InstanceInfo* StartAutoFightInstanceRequest::mutable_inst_info() {
  set_has_inst_info();
  if (inst_info_ == NULL) inst_info_ = new ::protocols::common::InstanceInfo;
  return inst_info_;
}
inline ::protocols::common::InstanceInfo* StartAutoFightInstanceRequest::release_inst_info() {
  clear_has_inst_info();
  ::protocols::common::InstanceInfo* temp = inst_info_;
  inst_info_ = NULL;
  return temp;
}

// required int32 stop_on_bag_full = 3;
inline bool StartAutoFightInstanceRequest::has_stop_on_bag_full() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StartAutoFightInstanceRequest::set_has_stop_on_bag_full() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StartAutoFightInstanceRequest::clear_has_stop_on_bag_full() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StartAutoFightInstanceRequest::clear_stop_on_bag_full() {
  stop_on_bag_full_ = 0;
  clear_has_stop_on_bag_full();
}
inline ::google::protobuf::int32 StartAutoFightInstanceRequest::stop_on_bag_full() const {
  return stop_on_bag_full_;
}
inline void StartAutoFightInstanceRequest::set_stop_on_bag_full(::google::protobuf::int32 value) {
  set_has_stop_on_bag_full();
  stop_on_bag_full_ = value;
}

// -------------------------------------------------------------------

// StartAutoFightInstanceResponse

// required int32 error_code = 1;
inline bool StartAutoFightInstanceResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartAutoFightInstanceResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartAutoFightInstanceResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartAutoFightInstanceResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 StartAutoFightInstanceResponse::error_code() const {
  return error_code_;
}
inline void StartAutoFightInstanceResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 left_time = 2;
inline bool StartAutoFightInstanceResponse::has_left_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StartAutoFightInstanceResponse::set_has_left_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StartAutoFightInstanceResponse::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StartAutoFightInstanceResponse::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 StartAutoFightInstanceResponse::left_time() const {
  return left_time_;
}
inline void StartAutoFightInstanceResponse::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// StopAutoFightInstanceRequest

// -------------------------------------------------------------------

// StopAutoFightInstanceResponse

// required int32 error_code = 1;
inline bool StopAutoFightInstanceResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopAutoFightInstanceResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopAutoFightInstanceResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopAutoFightInstanceResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 StopAutoFightInstanceResponse::error_code() const {
  return error_code_;
}
inline void StopAutoFightInstanceResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// FinishAutoFightInstanceRequest

// optional int32 get_money_flag = 1;
inline bool FinishAutoFightInstanceRequest::has_get_money_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinishAutoFightInstanceRequest::set_has_get_money_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinishAutoFightInstanceRequest::clear_has_get_money_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinishAutoFightInstanceRequest::clear_get_money_flag() {
  get_money_flag_ = 0;
  clear_has_get_money_flag();
}
inline ::google::protobuf::int32 FinishAutoFightInstanceRequest::get_money_flag() const {
  return get_money_flag_;
}
inline void FinishAutoFightInstanceRequest::set_get_money_flag(::google::protobuf::int32 value) {
  set_has_get_money_flag();
  get_money_flag_ = value;
}

// -------------------------------------------------------------------

// FinishAutoFightInstanceResponse

// required int32 error_code = 1;
inline bool FinishAutoFightInstanceResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FinishAutoFightInstanceResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FinishAutoFightInstanceResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FinishAutoFightInstanceResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 FinishAutoFightInstanceResponse::error_code() const {
  return error_code_;
}
inline void FinishAutoFightInstanceResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional int32 need_money = 2;
inline bool FinishAutoFightInstanceResponse::has_need_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinishAutoFightInstanceResponse::set_has_need_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinishAutoFightInstanceResponse::clear_has_need_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinishAutoFightInstanceResponse::clear_need_money() {
  need_money_ = 0;
  clear_has_need_money();
}
inline ::google::protobuf::int32 FinishAutoFightInstanceResponse::need_money() const {
  return need_money_;
}
inline void FinishAutoFightInstanceResponse::set_need_money(::google::protobuf::int32 value) {
  set_has_need_money();
  need_money_ = value;
}

// -------------------------------------------------------------------

// AutoFightInstanceNotifyRequest

// -------------------------------------------------------------------

// AutoFightInstanceNotifyResponse

// required int32 error_code = 1;
inline bool AutoFightInstanceNotifyResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoFightInstanceNotifyResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoFightInstanceNotifyResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoFightInstanceNotifyResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AutoFightInstanceNotifyResponse::error_code() const {
  return error_code_;
}
inline void AutoFightInstanceNotifyResponse::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// AutoFightInstanceNotify

// optional int32 is_fight_finish = 1;
inline bool AutoFightInstanceNotify::has_is_fight_finish() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoFightInstanceNotify::set_has_is_fight_finish() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoFightInstanceNotify::clear_has_is_fight_finish() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoFightInstanceNotify::clear_is_fight_finish() {
  is_fight_finish_ = 0;
  clear_has_is_fight_finish();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::is_fight_finish() const {
  return is_fight_finish_;
}
inline void AutoFightInstanceNotify::set_is_fight_finish(::google::protobuf::int32 value) {
  set_has_is_fight_finish();
  is_fight_finish_ = value;
}

// optional int32 finish_error_code = 2;
inline bool AutoFightInstanceNotify::has_finish_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoFightInstanceNotify::set_has_finish_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoFightInstanceNotify::clear_has_finish_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoFightInstanceNotify::clear_finish_error_code() {
  finish_error_code_ = 0;
  clear_has_finish_error_code();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::finish_error_code() const {
  return finish_error_code_;
}
inline void AutoFightInstanceNotify::set_finish_error_code(::google::protobuf::int32 value) {
  set_has_finish_error_code();
  finish_error_code_ = value;
}

// optional int32 cur_fight_time = 3;
inline bool AutoFightInstanceNotify::has_cur_fight_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoFightInstanceNotify::set_has_cur_fight_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoFightInstanceNotify::clear_has_cur_fight_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoFightInstanceNotify::clear_cur_fight_time() {
  cur_fight_time_ = 0;
  clear_has_cur_fight_time();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::cur_fight_time() const {
  return cur_fight_time_;
}
inline void AutoFightInstanceNotify::set_cur_fight_time(::google::protobuf::int32 value) {
  set_has_cur_fight_time();
  cur_fight_time_ = value;
}

// optional int32 left_auto_fight_times = 4;
inline bool AutoFightInstanceNotify::has_left_auto_fight_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoFightInstanceNotify::set_has_left_auto_fight_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoFightInstanceNotify::clear_has_left_auto_fight_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoFightInstanceNotify::clear_left_auto_fight_times() {
  left_auto_fight_times_ = 0;
  clear_has_left_auto_fight_times();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::left_auto_fight_times() const {
  return left_auto_fight_times_;
}
inline void AutoFightInstanceNotify::set_left_auto_fight_times(::google::protobuf::int32 value) {
  set_has_left_auto_fight_times();
  left_auto_fight_times_ = value;
}

// optional int32 exp_bonus = 5;
inline bool AutoFightInstanceNotify::has_exp_bonus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutoFightInstanceNotify::set_has_exp_bonus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AutoFightInstanceNotify::clear_has_exp_bonus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AutoFightInstanceNotify::clear_exp_bonus() {
  exp_bonus_ = 0;
  clear_has_exp_bonus();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::exp_bonus() const {
  return exp_bonus_;
}
inline void AutoFightInstanceNotify::set_exp_bonus(::google::protobuf::int32 value) {
  set_has_exp_bonus();
  exp_bonus_ = value;
}

// optional int32 coin_bonus = 6;
inline bool AutoFightInstanceNotify::has_coin_bonus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AutoFightInstanceNotify::set_has_coin_bonus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AutoFightInstanceNotify::clear_has_coin_bonus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AutoFightInstanceNotify::clear_coin_bonus() {
  coin_bonus_ = 0;
  clear_has_coin_bonus();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::coin_bonus() const {
  return coin_bonus_;
}
inline void AutoFightInstanceNotify::set_coin_bonus(::google::protobuf::int32 value) {
  set_has_coin_bonus();
  coin_bonus_ = value;
}

// repeated .protocols.common.ItemInfo item_bonus = 7;
inline int AutoFightInstanceNotify::item_bonus_size() const {
  return item_bonus_.size();
}
inline void AutoFightInstanceNotify::clear_item_bonus() {
  item_bonus_.Clear();
}
inline const ::protocols::common::ItemInfo& AutoFightInstanceNotify::item_bonus(int index) const {
  return item_bonus_.Get(index);
}
inline ::protocols::common::ItemInfo* AutoFightInstanceNotify::mutable_item_bonus(int index) {
  return item_bonus_.Mutable(index);
}
inline ::protocols::common::ItemInfo* AutoFightInstanceNotify::add_item_bonus() {
  return item_bonus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >&
AutoFightInstanceNotify::item_bonus() const {
  return item_bonus_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocols::common::ItemInfo >*
AutoFightInstanceNotify::mutable_item_bonus() {
  return &item_bonus_;
}

// optional int32 left_time = 8;
inline bool AutoFightInstanceNotify::has_left_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AutoFightInstanceNotify::set_has_left_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AutoFightInstanceNotify::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AutoFightInstanceNotify::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 AutoFightInstanceNotify::left_time() const {
  return left_time_;
}
inline void AutoFightInstanceNotify::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::AlienBossActNotifyType>() {
  return protocols::common::AlienBossActNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::AlienBossRewardsType>() {
  return protocols::common::AlienBossRewardsType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PvPActNotifyType>() {
  return protocols::common::PvPActNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::PvPBonusType>() {
  return protocols::common::PvPBonusType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ContestType>() {
  return protocols::common::ContestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ContestProgressType>() {
  return protocols::common::ContestProgressType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GuildWarEventType>() {
  return protocols::common::GuildWarEventType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GuildWarNotifyType>() {
  return protocols::common::GuildWarNotifyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GuildWarBossBuffType>() {
  return protocols::common::GuildWarBossBuffType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_game_5ffight_2eproto__INCLUDED
