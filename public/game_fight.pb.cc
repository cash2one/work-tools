// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_fight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* Bonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightMonsterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightMonsterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightMonsterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightMonsterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipFightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveFightRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveFightRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveFightResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveFightResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFightToWorldRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFightToWorldRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFightToWorldResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFightToWorldResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFightDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFightDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFightDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFightDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlienBossActNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlienBossActNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterAlienBossMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterAlienBossMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterAlienBossMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterAlienBossMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveAlienBossMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveAlienBossMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveAlienBossMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveAlienBossMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBossHurt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBossHurt_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlienBossHurtRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlienBossHurtRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlienBossRewardsNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlienBossRewardsNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncourageBuffRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncourageBuffRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncourageBuffResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncourageBuffResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickRespawnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickRespawnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickRespawnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickRespawnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAlienBossBuffNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAlienBossBuffNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBossMapInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBossMapInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBossMapInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBossMapInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPvPMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPvPMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPvPMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPvPMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeavePvPMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeavePvPMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeavePvPMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeavePvPMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPvPMapInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPvPMapInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPvPRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPvPRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPvPMapInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPvPMapInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearPvPCDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearPvPCDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearPvPCDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearPvPCDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPUpdateCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPUpdateCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPActNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPActNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPRobotNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPRobotNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPBonusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPBonusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakePvPGiftRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakePvPGiftRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakePvPGiftResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakePvPGiftResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarContributionPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarContributionPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildWarMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildWarMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildWarMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildWarMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGuildWarMapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGuildWarMapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGuildWarMapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGuildWarMapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildWarMapInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildWarMapInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildWarMapInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildWarMapInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarGuildBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarGuildBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompetitorGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompetitorGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarAddBuffRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarAddBuffRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarAddBuffResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarAddBuffResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarContributionRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarContributionRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarContributionRankRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarContributionRankRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarContributionRankResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarContributionRankResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarContributionRankNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarContributionRankNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTreasureBoxNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTreasureBoxNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTreasureBoxBonusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTreasureBoxBonusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeTreasureBoxBonusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeTreasureBoxBonusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarGetCompetitionInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarGetCompetitionInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarGetCompetitionInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarGetCompetitionInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAutoInstanceStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAutoInstanceStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAutoInstanceStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAutoInstanceStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartAutoFightInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartAutoFightInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartAutoFightInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartAutoFightInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAutoFightInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAutoFightInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopAutoFightInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopAutoFightInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishAutoFightInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishAutoFightInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishAutoFightInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishAutoFightInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightInstanceNotifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightInstanceNotifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightInstanceNotifyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightInstanceNotifyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoFightInstanceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoFightInstanceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AlienBossActNotifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AlienBossRewardsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PvPActNotifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PvPBonusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContestProgressType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildWarEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildWarNotifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildWarBossBuffType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5ffight_2eproto() {
  protobuf_AddDesc_game_5ffight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_fight.proto");
  GOOGLE_CHECK(file != NULL);
  Bonus_descriptor_ = file->message_type(0);
  static const int Bonus_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, vip_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, team_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, other_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, skill_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, gold_coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, bag_has_enough_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, base_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, base_gold_coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, cont_win_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, cont_win_gold_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, de_cont_win_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, de_cont_win_gold_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, drop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, quest_drop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, equipment_),
  };
  Bonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bonus_descriptor_,
      Bonus::default_instance_,
      Bonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bonus));
  FightResult_descriptor_ = file->message_type(1);
  static const int FightResult_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_a_battle_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_b_battle_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, round_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, npc_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, left_free_skip_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, auto_skip_time_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_a_dead_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_b_dead_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, battle_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_a_dead_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_b_dead_players_),
  };
  FightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightResult_descriptor_,
      FightResult::default_instance_,
      FightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightResult));
  FightMonsterRequest_descriptor_ = file->message_type(2);
  static const int FightMonsterRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, battle_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, npc_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, npc_map_y_),
  };
  FightMonsterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightMonsterRequest_descriptor_,
      FightMonsterRequest::default_instance_,
      FightMonsterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightMonsterRequest));
  FightMonsterResponse_descriptor_ = file->message_type(3);
  static const int FightMonsterResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, attacker_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, defender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, attacker_fight_key_),
  };
  FightMonsterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightMonsterResponse_descriptor_,
      FightMonsterResponse::default_instance_,
      FightMonsterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightMonsterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightMonsterResponse));
  SkipFightRequest_descriptor_ = file->message_type(4);
  static const int SkipFightRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightRequest, skip_fight_type_),
  };
  SkipFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkipFightRequest_descriptor_,
      SkipFightRequest::default_instance_,
      SkipFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkipFightRequest));
  SkipFightResponse_descriptor_ = file->message_type(5);
  static const int SkipFightResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightResponse, left_free_skip_fight_times_),
  };
  SkipFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkipFightResponse_descriptor_,
      SkipFightResponse::default_instance_,
      SkipFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkipFightResponse));
  LeaveFightRequest_descriptor_ = file->message_type(6);
  static const int LeaveFightRequest_offsets_[1] = {
  };
  LeaveFightRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveFightRequest_descriptor_,
      LeaveFightRequest::default_instance_,
      LeaveFightRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveFightRequest));
  LeaveFightResponse_descriptor_ = file->message_type(7);
  static const int LeaveFightResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, map_y_),
  };
  LeaveFightResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveFightResponse_descriptor_,
      LeaveFightResponse::default_instance_,
      LeaveFightResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveFightResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveFightResponse));
  SendFightToWorldRequest_descriptor_ = file->message_type(8);
  static const int SendFightToWorldRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldRequest, fight_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldRequest, is_need_broadcast_),
  };
  SendFightToWorldRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFightToWorldRequest_descriptor_,
      SendFightToWorldRequest::default_instance_,
      SendFightToWorldRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFightToWorldRequest));
  SendFightToWorldResponse_descriptor_ = file->message_type(9);
  static const int SendFightToWorldResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldResponse, error_code_),
  };
  SendFightToWorldResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFightToWorldResponse_descriptor_,
      SendFightToWorldResponse::default_instance_,
      SendFightToWorldResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFightToWorldResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFightToWorldResponse));
  GetFightDataRequest_descriptor_ = file->message_type(10);
  static const int GetFightDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataRequest, fight_key_),
  };
  GetFightDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFightDataRequest_descriptor_,
      GetFightDataRequest::default_instance_,
      GetFightDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFightDataRequest));
  GetFightDataResponse_descriptor_ = file->message_type(11);
  static const int GetFightDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataResponse, fight_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataResponse, fight_data_),
  };
  GetFightDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFightDataResponse_descriptor_,
      GetFightDataResponse::default_instance_,
      GetFightDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFightDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFightDataResponse));
  AlienBossActNotify_descriptor_ = file->message_type(12);
  static const int AlienBossActNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, damage_increase_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, boss_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, boss_level_),
  };
  AlienBossActNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlienBossActNotify_descriptor_,
      AlienBossActNotify::default_instance_,
      AlienBossActNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossActNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlienBossActNotify));
  EnterAlienBossMapRequest_descriptor_ = file->message_type(13);
  static const int EnterAlienBossMapRequest_offsets_[1] = {
  };
  EnterAlienBossMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterAlienBossMapRequest_descriptor_,
      EnterAlienBossMapRequest::default_instance_,
      EnterAlienBossMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterAlienBossMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterAlienBossMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterAlienBossMapRequest));
  EnterAlienBossMapResponse_descriptor_ = file->message_type(14);
  static const int EnterAlienBossMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterAlienBossMapResponse, error_code_),
  };
  EnterAlienBossMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterAlienBossMapResponse_descriptor_,
      EnterAlienBossMapResponse::default_instance_,
      EnterAlienBossMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterAlienBossMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterAlienBossMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterAlienBossMapResponse));
  LeaveAlienBossMapRequest_descriptor_ = file->message_type(15);
  static const int LeaveAlienBossMapRequest_offsets_[1] = {
  };
  LeaveAlienBossMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveAlienBossMapRequest_descriptor_,
      LeaveAlienBossMapRequest::default_instance_,
      LeaveAlienBossMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveAlienBossMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveAlienBossMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveAlienBossMapRequest));
  LeaveAlienBossMapResponse_descriptor_ = file->message_type(16);
  static const int LeaveAlienBossMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveAlienBossMapResponse, error_code_),
  };
  LeaveAlienBossMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveAlienBossMapResponse_descriptor_,
      LeaveAlienBossMapResponse::default_instance_,
      LeaveAlienBossMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveAlienBossMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveAlienBossMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveAlienBossMapResponse));
  PlayerBossHurt_descriptor_ = file->message_type(17);
  static const int PlayerBossHurt_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, damage_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, treasure_box_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, treasure_box_count_),
  };
  PlayerBossHurt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBossHurt_descriptor_,
      PlayerBossHurt::default_instance_,
      PlayerBossHurt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBossHurt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBossHurt));
  AlienBossHurtRank_descriptor_ = file->message_type(18);
  static const int AlienBossHurtRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossHurtRank, own_hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossHurtRank, hurt_rank_),
  };
  AlienBossHurtRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlienBossHurtRank_descriptor_,
      AlienBossHurtRank::default_instance_,
      AlienBossHurtRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossHurtRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossHurtRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlienBossHurtRank));
  AlienBossRewardsNotify_descriptor_ = file->message_type(19);
  static const int AlienBossRewardsNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossRewardsNotify, is_boss_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossRewardsNotify, rewards_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossRewardsNotify, reward_),
  };
  AlienBossRewardsNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlienBossRewardsNotify_descriptor_,
      AlienBossRewardsNotify::default_instance_,
      AlienBossRewardsNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossRewardsNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlienBossRewardsNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlienBossRewardsNotify));
  EncourageBuffRequest_descriptor_ = file->message_type(20);
  static const int EncourageBuffRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffRequest, type_),
  };
  EncourageBuffRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncourageBuffRequest_descriptor_,
      EncourageBuffRequest::default_instance_,
      EncourageBuffRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncourageBuffRequest));
  EncourageBuffResponse_descriptor_ = file->message_type(21);
  static const int EncourageBuffResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffResponse, buff_value_),
  };
  EncourageBuffResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncourageBuffResponse_descriptor_,
      EncourageBuffResponse::default_instance_,
      EncourageBuffResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncourageBuffResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncourageBuffResponse));
  QuickRespawnRequest_descriptor_ = file->message_type(22);
  static const int QuickRespawnRequest_offsets_[1] = {
  };
  QuickRespawnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickRespawnRequest_descriptor_,
      QuickRespawnRequest::default_instance_,
      QuickRespawnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRespawnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRespawnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickRespawnRequest));
  QuickRespawnResponse_descriptor_ = file->message_type(23);
  static const int QuickRespawnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRespawnResponse, error_code_),
  };
  QuickRespawnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickRespawnResponse_descriptor_,
      QuickRespawnResponse::default_instance_,
      QuickRespawnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRespawnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickRespawnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickRespawnResponse));
  UpdateAlienBossBuffNotify_descriptor_ = file->message_type(24);
  static const int UpdateAlienBossBuffNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAlienBossBuffNotify, buff_value_),
  };
  UpdateAlienBossBuffNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAlienBossBuffNotify_descriptor_,
      UpdateAlienBossBuffNotify::default_instance_,
      UpdateAlienBossBuffNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAlienBossBuffNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAlienBossBuffNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAlienBossBuffNotify));
  GetBossMapInfoRequest_descriptor_ = file->message_type(25);
  static const int GetBossMapInfoRequest_offsets_[1] = {
  };
  GetBossMapInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBossMapInfoRequest_descriptor_,
      GetBossMapInfoRequest::default_instance_,
      GetBossMapInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBossMapInfoRequest));
  GetBossMapInfoResponse_descriptor_ = file->message_type(26);
  static const int GetBossMapInfoResponse_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, player_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, damage_increase_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, boss_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, player_is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, time_left_to_respawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, boss_level_),
  };
  GetBossMapInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBossMapInfoResponse_descriptor_,
      GetBossMapInfoResponse::default_instance_,
      GetBossMapInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBossMapInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBossMapInfoResponse));
  EnterPvPMapRequest_descriptor_ = file->message_type(27);
  static const int EnterPvPMapRequest_offsets_[1] = {
  };
  EnterPvPMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPvPMapRequest_descriptor_,
      EnterPvPMapRequest::default_instance_,
      EnterPvPMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvPMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvPMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPvPMapRequest));
  EnterPvPMapResponse_descriptor_ = file->message_type(28);
  static const int EnterPvPMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvPMapResponse, error_code_),
  };
  EnterPvPMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPvPMapResponse_descriptor_,
      EnterPvPMapResponse::default_instance_,
      EnterPvPMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvPMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPvPMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPvPMapResponse));
  LeavePvPMapRequest_descriptor_ = file->message_type(29);
  static const int LeavePvPMapRequest_offsets_[1] = {
  };
  LeavePvPMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeavePvPMapRequest_descriptor_,
      LeavePvPMapRequest::default_instance_,
      LeavePvPMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvPMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvPMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeavePvPMapRequest));
  LeavePvPMapResponse_descriptor_ = file->message_type(30);
  static const int LeavePvPMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvPMapResponse, error_code_),
  };
  LeavePvPMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeavePvPMapResponse_descriptor_,
      LeavePvPMapResponse::default_instance_,
      LeavePvPMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvPMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeavePvPMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeavePvPMapResponse));
  GetPvPMapInfoRequest_descriptor_ = file->message_type(31);
  static const int GetPvPMapInfoRequest_offsets_[1] = {
  };
  GetPvPMapInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPvPMapInfoRequest_descriptor_,
      GetPvPMapInfoRequest::default_instance_,
      GetPvPMapInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPvPMapInfoRequest));
  PlayerPvPRankInfo_descriptor_ = file->message_type(32);
  static const int PlayerPvPRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, cont_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, role_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, gender_),
  };
  PlayerPvPRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPvPRankInfo_descriptor_,
      PlayerPvPRankInfo::default_instance_,
      PlayerPvPRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPvPRankInfo));
  GetPvPMapInfoResponse_descriptor_ = file->message_type(33);
  static const int GetPvPMapInfoResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, rank_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, cd_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, cur_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, winner_bonus_taken_),
  };
  GetPvPMapInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPvPMapInfoResponse_descriptor_,
      GetPvPMapInfoResponse::default_instance_,
      GetPvPMapInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPvPMapInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPvPMapInfoResponse));
  ClearPvPCDRequest_descriptor_ = file->message_type(34);
  static const int ClearPvPCDRequest_offsets_[1] = {
  };
  ClearPvPCDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearPvPCDRequest_descriptor_,
      ClearPvPCDRequest::default_instance_,
      ClearPvPCDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvPCDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvPCDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearPvPCDRequest));
  ClearPvPCDResponse_descriptor_ = file->message_type(35);
  static const int ClearPvPCDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvPCDResponse, error_code_),
  };
  ClearPvPCDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearPvPCDResponse_descriptor_,
      ClearPvPCDResponse::default_instance_,
      ClearPvPCDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvPCDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearPvPCDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearPvPCDResponse));
  PvPUpdateCD_descriptor_ = file->message_type(36);
  static const int PvPUpdateCD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPUpdateCD, cd_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPUpdateCD, black_guid_),
  };
  PvPUpdateCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPUpdateCD_descriptor_,
      PvPUpdateCD::default_instance_,
      PvPUpdateCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPUpdateCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPUpdateCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPUpdateCD));
  PvPActNotify_descriptor_ = file->message_type(37);
  static const int PvPActNotify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, update_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, rank_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, defender_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, attacker_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, player_cur_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, player_cur_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, player_cont_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, bonus_item_),
  };
  PvPActNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPActNotify_descriptor_,
      PvPActNotify::default_instance_,
      PvPActNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPActNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPActNotify));
  PvPRobotNotify_descriptor_ = file->message_type(38);
  static const int PvPRobotNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, robot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, robot_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, robot_map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, robot_map_y_),
  };
  PvPRobotNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPRobotNotify_descriptor_,
      PvPRobotNotify::default_instance_,
      PvPRobotNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPRobotNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPRobotNotify));
  PvPBonusNotify_descriptor_ = file->message_type(39);
  static const int PvPBonusNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, bonus_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, cur_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, item_info_),
  };
  PvPBonusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPBonusNotify_descriptor_,
      PvPBonusNotify::default_instance_,
      PvPBonusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBonusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPBonusNotify));
  TakePvPGiftRequest_descriptor_ = file->message_type(40);
  static const int TakePvPGiftRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftRequest, bonus_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftRequest, level_),
  };
  TakePvPGiftRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakePvPGiftRequest_descriptor_,
      TakePvPGiftRequest::default_instance_,
      TakePvPGiftRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakePvPGiftRequest));
  TakePvPGiftResponse_descriptor_ = file->message_type(41);
  static const int TakePvPGiftResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftResponse, error_code_),
  };
  TakePvPGiftResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakePvPGiftResponse_descriptor_,
      TakePvPGiftResponse::default_instance_,
      TakePvPGiftResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakePvPGiftResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakePvPGiftResponse));
  BossInfo_descriptor_ = file->message_type(42);
  static const int BossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, boss_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, boss_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, show_status_),
  };
  BossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossInfo_descriptor_,
      BossInfo::default_instance_,
      BossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossInfo));
  GuildWarContributionPlayer_descriptor_ = file->message_type(43);
  static const int GuildWarContributionPlayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, encourage_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, contribution_),
  };
  GuildWarContributionPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarContributionPlayer_descriptor_,
      GuildWarContributionPlayer::default_instance_,
      GuildWarContributionPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarContributionPlayer));
  EnterGuildWarMapRequest_descriptor_ = file->message_type(44);
  static const int EnterGuildWarMapRequest_offsets_[1] = {
  };
  EnterGuildWarMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildWarMapRequest_descriptor_,
      EnterGuildWarMapRequest::default_instance_,
      EnterGuildWarMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildWarMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildWarMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildWarMapRequest));
  EnterGuildWarMapResponse_descriptor_ = file->message_type(45);
  static const int EnterGuildWarMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildWarMapResponse, error_code_),
  };
  EnterGuildWarMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildWarMapResponse_descriptor_,
      EnterGuildWarMapResponse::default_instance_,
      EnterGuildWarMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildWarMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildWarMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildWarMapResponse));
  LeaveGuildWarMapRequest_descriptor_ = file->message_type(46);
  static const int LeaveGuildWarMapRequest_offsets_[1] = {
  };
  LeaveGuildWarMapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGuildWarMapRequest_descriptor_,
      LeaveGuildWarMapRequest::default_instance_,
      LeaveGuildWarMapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildWarMapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildWarMapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGuildWarMapRequest));
  LeaveGuildWarMapResponse_descriptor_ = file->message_type(47);
  static const int LeaveGuildWarMapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildWarMapResponse, error_code_),
  };
  LeaveGuildWarMapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGuildWarMapResponse_descriptor_,
      LeaveGuildWarMapResponse::default_instance_,
      LeaveGuildWarMapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildWarMapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGuildWarMapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGuildWarMapResponse));
  GuildWarSchedule_descriptor_ = file->message_type(48);
  static const int GuildWarSchedule_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, contest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, contestprogresstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, competitor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, str_start_time_),
  };
  GuildWarSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarSchedule_descriptor_,
      GuildWarSchedule::default_instance_,
      GuildWarSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarSchedule));
  GetGuildWarMapInfoRequest_descriptor_ = file->message_type(49);
  static const int GetGuildWarMapInfoRequest_offsets_[1] = {
  };
  GetGuildWarMapInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildWarMapInfoRequest_descriptor_,
      GetGuildWarMapInfoRequest::default_instance_,
      GetGuildWarMapInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildWarMapInfoRequest));
  GuildWarMapInfo_descriptor_ = file->message_type(50);
  static const int GuildWarMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, damage_buff_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, defence_buff_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, boss_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, cd_left_),
  };
  GuildWarMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarMapInfo_descriptor_,
      GuildWarMapInfo::default_instance_,
      GuildWarMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarMapInfo));
  GetGuildWarMapInfoResponse_descriptor_ = file->message_type(51);
  static const int GetGuildWarMapInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, map_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, battle_info_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, battle_info_b_),
  };
  GetGuildWarMapInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildWarMapInfoResponse_descriptor_,
      GetGuildWarMapInfoResponse::default_instance_,
      GetGuildWarMapInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWarMapInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildWarMapInfoResponse));
  GuildWarNotify_descriptor_ = file->message_type(52);
  static const int GuildWarNotify_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, map_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, add_buff_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, delta_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, cd_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, battle_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, guild_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, battle_info_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, battle_info_b_),
  };
  GuildWarNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarNotify_descriptor_,
      GuildWarNotify::default_instance_,
      GuildWarNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarNotify));
  GuildWarGuildBattleInfo_descriptor_ = file->message_type(53);
  static const int GuildWarGuildBattleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, player_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, player_infos_),
  };
  GuildWarGuildBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarGuildBattleInfo_descriptor_,
      GuildWarGuildBattleInfo::default_instance_,
      GuildWarGuildBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGuildBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarGuildBattleInfo));
  GuildWarPlayerInfo_descriptor_ = file->message_type(54);
  static const int GuildWarPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, team_leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, is_dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, death_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, devote_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, cd_left_),
  };
  GuildWarPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarPlayerInfo_descriptor_,
      GuildWarPlayerInfo::default_instance_,
      GuildWarPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarPlayerInfo));
  GuildWarAward_descriptor_ = file->message_type(55);
  static const int GuildWarAward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, is_winer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, opponent_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, opponent_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, rank_),
  };
  GuildWarAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarAward_descriptor_,
      GuildWarAward::default_instance_,
      GuildWarAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarAward));
  GuildWarBattleResult_descriptor_ = file->message_type(56);
  static const int GuildWarBattleResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, camp_a_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, camp_b_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, win_num_of_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, player_a_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, player_b_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, player_a_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, player_b_guid_),
  };
  GuildWarBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarBattleResult_descriptor_,
      GuildWarBattleResult::default_instance_,
      GuildWarBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarBattleResult));
  CompetitorGuild_descriptor_ = file->message_type(57);
  static const int CompetitorGuild_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, section_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, camp_a_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, camp_b_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, winner_guild_id_),
  };
  CompetitorGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompetitorGuild_descriptor_,
      CompetitorGuild::default_instance_,
      CompetitorGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompetitorGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompetitorGuild));
  GuildWarAddBuffRequest_descriptor_ = file->message_type(58);
  static const int GuildWarAddBuffRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffRequest, type_),
  };
  GuildWarAddBuffRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarAddBuffRequest_descriptor_,
      GuildWarAddBuffRequest::default_instance_,
      GuildWarAddBuffRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarAddBuffRequest));
  GuildWarAddBuffResponse_descriptor_ = file->message_type(59);
  static const int GuildWarAddBuffResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffResponse, damage_buff_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffResponse, defence_buff_value_),
  };
  GuildWarAddBuffResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarAddBuffResponse_descriptor_,
      GuildWarAddBuffResponse::default_instance_,
      GuildWarAddBuffResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarAddBuffResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarAddBuffResponse));
  GuildWarContributionRank_descriptor_ = file->message_type(60);
  static const int GuildWarContributionRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRank, rank_player_),
  };
  GuildWarContributionRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarContributionRank_descriptor_,
      GuildWarContributionRank::default_instance_,
      GuildWarContributionRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarContributionRank));
  GuildWarContributionRankRequest_descriptor_ = file->message_type(61);
  static const int GuildWarContributionRankRequest_offsets_[1] = {
  };
  GuildWarContributionRankRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarContributionRankRequest_descriptor_,
      GuildWarContributionRankRequest::default_instance_,
      GuildWarContributionRankRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarContributionRankRequest));
  GuildWarContributionRankResponse_descriptor_ = file->message_type(62);
  static const int GuildWarContributionRankResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankResponse, rank_info_),
  };
  GuildWarContributionRankResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarContributionRankResponse_descriptor_,
      GuildWarContributionRankResponse::default_instance_,
      GuildWarContributionRankResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarContributionRankResponse));
  GuildWarContributionRankNotify_descriptor_ = file->message_type(63);
  static const int GuildWarContributionRankNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankNotify, rank_info_),
  };
  GuildWarContributionRankNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarContributionRankNotify_descriptor_,
      GuildWarContributionRankNotify::default_instance_,
      GuildWarContributionRankNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarContributionRankNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarContributionRankNotify));
  UpdateTreasureBoxNotify_descriptor_ = file->message_type(64);
  static const int UpdateTreasureBoxNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTreasureBoxNotify, bonus_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTreasureBoxNotify, box_info_),
  };
  UpdateTreasureBoxNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTreasureBoxNotify_descriptor_,
      UpdateTreasureBoxNotify::default_instance_,
      UpdateTreasureBoxNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTreasureBoxNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTreasureBoxNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTreasureBoxNotify));
  TakeTreasureBoxBonusRequest_descriptor_ = file->message_type(65);
  static const int TakeTreasureBoxBonusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusRequest, bonus_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusRequest, box_index_),
  };
  TakeTreasureBoxBonusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTreasureBoxBonusRequest_descriptor_,
      TakeTreasureBoxBonusRequest::default_instance_,
      TakeTreasureBoxBonusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTreasureBoxBonusRequest));
  TakeTreasureBoxBonusResponse_descriptor_ = file->message_type(66);
  static const int TakeTreasureBoxBonusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusResponse, item_),
  };
  TakeTreasureBoxBonusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeTreasureBoxBonusResponse_descriptor_,
      TakeTreasureBoxBonusResponse::default_instance_,
      TakeTreasureBoxBonusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeTreasureBoxBonusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeTreasureBoxBonusResponse));
  GuildWarGetCompetitionInfoRequest_descriptor_ = file->message_type(67);
  static const int GuildWarGetCompetitionInfoRequest_offsets_[1] = {
  };
  GuildWarGetCompetitionInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarGetCompetitionInfoRequest_descriptor_,
      GuildWarGetCompetitionInfoRequest::default_instance_,
      GuildWarGetCompetitionInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarGetCompetitionInfoRequest));
  GuildWarGetCompetitionInfoResponse_descriptor_ = file->message_type(68);
  static const int GuildWarGetCompetitionInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoResponse, schedule_),
  };
  GuildWarGetCompetitionInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarGetCompetitionInfoResponse_descriptor_,
      GuildWarGetCompetitionInfoResponse::default_instance_,
      GuildWarGetCompetitionInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarGetCompetitionInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarGetCompetitionInfoResponse));
  GetAutoInstanceStatusRequest_descriptor_ = file->message_type(69);
  static const int GetAutoInstanceStatusRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusRequest, instance_id_),
  };
  GetAutoInstanceStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAutoInstanceStatusRequest_descriptor_,
      GetAutoInstanceStatusRequest::default_instance_,
      GetAutoInstanceStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAutoInstanceStatusRequest));
  GetAutoInstanceStatusResponse_descriptor_ = file->message_type(70);
  static const int GetAutoInstanceStatusResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusResponse, inst_info_),
  };
  GetAutoInstanceStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAutoInstanceStatusResponse_descriptor_,
      GetAutoInstanceStatusResponse::default_instance_,
      GetAutoInstanceStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAutoInstanceStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAutoInstanceStatusResponse));
  StartAutoFightInstanceRequest_descriptor_ = file->message_type(71);
  static const int StartAutoFightInstanceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceRequest, auto_fight_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceRequest, inst_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceRequest, stop_on_bag_full_),
  };
  StartAutoFightInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartAutoFightInstanceRequest_descriptor_,
      StartAutoFightInstanceRequest::default_instance_,
      StartAutoFightInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartAutoFightInstanceRequest));
  StartAutoFightInstanceResponse_descriptor_ = file->message_type(72);
  static const int StartAutoFightInstanceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceResponse, left_time_),
  };
  StartAutoFightInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartAutoFightInstanceResponse_descriptor_,
      StartAutoFightInstanceResponse::default_instance_,
      StartAutoFightInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartAutoFightInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartAutoFightInstanceResponse));
  StopAutoFightInstanceRequest_descriptor_ = file->message_type(73);
  static const int StopAutoFightInstanceRequest_offsets_[1] = {
  };
  StopAutoFightInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAutoFightInstanceRequest_descriptor_,
      StopAutoFightInstanceRequest::default_instance_,
      StopAutoFightInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAutoFightInstanceRequest));
  StopAutoFightInstanceResponse_descriptor_ = file->message_type(74);
  static const int StopAutoFightInstanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightInstanceResponse, error_code_),
  };
  StopAutoFightInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopAutoFightInstanceResponse_descriptor_,
      StopAutoFightInstanceResponse::default_instance_,
      StopAutoFightInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopAutoFightInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopAutoFightInstanceResponse));
  FinishAutoFightInstanceRequest_descriptor_ = file->message_type(75);
  static const int FinishAutoFightInstanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceRequest, get_money_flag_),
  };
  FinishAutoFightInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishAutoFightInstanceRequest_descriptor_,
      FinishAutoFightInstanceRequest::default_instance_,
      FinishAutoFightInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishAutoFightInstanceRequest));
  FinishAutoFightInstanceResponse_descriptor_ = file->message_type(76);
  static const int FinishAutoFightInstanceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceResponse, need_money_),
  };
  FinishAutoFightInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishAutoFightInstanceResponse_descriptor_,
      FinishAutoFightInstanceResponse::default_instance_,
      FinishAutoFightInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishAutoFightInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishAutoFightInstanceResponse));
  AutoFightInstanceNotifyRequest_descriptor_ = file->message_type(77);
  static const int AutoFightInstanceNotifyRequest_offsets_[1] = {
  };
  AutoFightInstanceNotifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightInstanceNotifyRequest_descriptor_,
      AutoFightInstanceNotifyRequest::default_instance_,
      AutoFightInstanceNotifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightInstanceNotifyRequest));
  AutoFightInstanceNotifyResponse_descriptor_ = file->message_type(78);
  static const int AutoFightInstanceNotifyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotifyResponse, error_code_),
  };
  AutoFightInstanceNotifyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightInstanceNotifyResponse_descriptor_,
      AutoFightInstanceNotifyResponse::default_instance_,
      AutoFightInstanceNotifyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotifyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotifyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightInstanceNotifyResponse));
  AutoFightInstanceNotify_descriptor_ = file->message_type(79);
  static const int AutoFightInstanceNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, is_fight_finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, finish_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, cur_fight_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, left_auto_fight_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, item_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, left_time_),
  };
  AutoFightInstanceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoFightInstanceNotify_descriptor_,
      AutoFightInstanceNotify::default_instance_,
      AutoFightInstanceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoFightInstanceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoFightInstanceNotify));
  AlienBossActNotifyType_descriptor_ = file->enum_type(0);
  AlienBossRewardsType_descriptor_ = file->enum_type(1);
  PvPActNotifyType_descriptor_ = file->enum_type(2);
  PvPBonusType_descriptor_ = file->enum_type(3);
  ContestType_descriptor_ = file->enum_type(4);
  ContestProgressType_descriptor_ = file->enum_type(5);
  GuildWarEventType_descriptor_ = file->enum_type(6);
  GuildWarNotifyType_descriptor_ = file->enum_type(7);
  GuildWarBossBuffType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5ffight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bonus_descriptor_, &Bonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightResult_descriptor_, &FightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightMonsterRequest_descriptor_, &FightMonsterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightMonsterResponse_descriptor_, &FightMonsterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkipFightRequest_descriptor_, &SkipFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkipFightResponse_descriptor_, &SkipFightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveFightRequest_descriptor_, &LeaveFightRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveFightResponse_descriptor_, &LeaveFightResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFightToWorldRequest_descriptor_, &SendFightToWorldRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFightToWorldResponse_descriptor_, &SendFightToWorldResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFightDataRequest_descriptor_, &GetFightDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFightDataResponse_descriptor_, &GetFightDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlienBossActNotify_descriptor_, &AlienBossActNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterAlienBossMapRequest_descriptor_, &EnterAlienBossMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterAlienBossMapResponse_descriptor_, &EnterAlienBossMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveAlienBossMapRequest_descriptor_, &LeaveAlienBossMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveAlienBossMapResponse_descriptor_, &LeaveAlienBossMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBossHurt_descriptor_, &PlayerBossHurt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlienBossHurtRank_descriptor_, &AlienBossHurtRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlienBossRewardsNotify_descriptor_, &AlienBossRewardsNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncourageBuffRequest_descriptor_, &EncourageBuffRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncourageBuffResponse_descriptor_, &EncourageBuffResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickRespawnRequest_descriptor_, &QuickRespawnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickRespawnResponse_descriptor_, &QuickRespawnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAlienBossBuffNotify_descriptor_, &UpdateAlienBossBuffNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBossMapInfoRequest_descriptor_, &GetBossMapInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBossMapInfoResponse_descriptor_, &GetBossMapInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPvPMapRequest_descriptor_, &EnterPvPMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPvPMapResponse_descriptor_, &EnterPvPMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeavePvPMapRequest_descriptor_, &LeavePvPMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeavePvPMapResponse_descriptor_, &LeavePvPMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPvPMapInfoRequest_descriptor_, &GetPvPMapInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPvPRankInfo_descriptor_, &PlayerPvPRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPvPMapInfoResponse_descriptor_, &GetPvPMapInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearPvPCDRequest_descriptor_, &ClearPvPCDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearPvPCDResponse_descriptor_, &ClearPvPCDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPUpdateCD_descriptor_, &PvPUpdateCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPActNotify_descriptor_, &PvPActNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPRobotNotify_descriptor_, &PvPRobotNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPBonusNotify_descriptor_, &PvPBonusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakePvPGiftRequest_descriptor_, &TakePvPGiftRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakePvPGiftResponse_descriptor_, &TakePvPGiftResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossInfo_descriptor_, &BossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarContributionPlayer_descriptor_, &GuildWarContributionPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildWarMapRequest_descriptor_, &EnterGuildWarMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildWarMapResponse_descriptor_, &EnterGuildWarMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGuildWarMapRequest_descriptor_, &LeaveGuildWarMapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGuildWarMapResponse_descriptor_, &LeaveGuildWarMapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarSchedule_descriptor_, &GuildWarSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildWarMapInfoRequest_descriptor_, &GetGuildWarMapInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarMapInfo_descriptor_, &GuildWarMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildWarMapInfoResponse_descriptor_, &GetGuildWarMapInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarNotify_descriptor_, &GuildWarNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarGuildBattleInfo_descriptor_, &GuildWarGuildBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarPlayerInfo_descriptor_, &GuildWarPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarAward_descriptor_, &GuildWarAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarBattleResult_descriptor_, &GuildWarBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompetitorGuild_descriptor_, &CompetitorGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarAddBuffRequest_descriptor_, &GuildWarAddBuffRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarAddBuffResponse_descriptor_, &GuildWarAddBuffResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarContributionRank_descriptor_, &GuildWarContributionRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarContributionRankRequest_descriptor_, &GuildWarContributionRankRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarContributionRankResponse_descriptor_, &GuildWarContributionRankResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarContributionRankNotify_descriptor_, &GuildWarContributionRankNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTreasureBoxNotify_descriptor_, &UpdateTreasureBoxNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTreasureBoxBonusRequest_descriptor_, &TakeTreasureBoxBonusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeTreasureBoxBonusResponse_descriptor_, &TakeTreasureBoxBonusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarGetCompetitionInfoRequest_descriptor_, &GuildWarGetCompetitionInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarGetCompetitionInfoResponse_descriptor_, &GuildWarGetCompetitionInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAutoInstanceStatusRequest_descriptor_, &GetAutoInstanceStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAutoInstanceStatusResponse_descriptor_, &GetAutoInstanceStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartAutoFightInstanceRequest_descriptor_, &StartAutoFightInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartAutoFightInstanceResponse_descriptor_, &StartAutoFightInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAutoFightInstanceRequest_descriptor_, &StopAutoFightInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopAutoFightInstanceResponse_descriptor_, &StopAutoFightInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishAutoFightInstanceRequest_descriptor_, &FinishAutoFightInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishAutoFightInstanceResponse_descriptor_, &FinishAutoFightInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightInstanceNotifyRequest_descriptor_, &AutoFightInstanceNotifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightInstanceNotifyResponse_descriptor_, &AutoFightInstanceNotifyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoFightInstanceNotify_descriptor_, &AutoFightInstanceNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5ffight_2eproto() {
  delete Bonus::default_instance_;
  delete Bonus_reflection_;
  delete FightResult::default_instance_;
  delete FightResult_reflection_;
  delete FightMonsterRequest::default_instance_;
  delete FightMonsterRequest_reflection_;
  delete FightMonsterResponse::default_instance_;
  delete FightMonsterResponse_reflection_;
  delete SkipFightRequest::default_instance_;
  delete SkipFightRequest_reflection_;
  delete SkipFightResponse::default_instance_;
  delete SkipFightResponse_reflection_;
  delete LeaveFightRequest::default_instance_;
  delete LeaveFightRequest_reflection_;
  delete LeaveFightResponse::default_instance_;
  delete LeaveFightResponse_reflection_;
  delete SendFightToWorldRequest::default_instance_;
  delete SendFightToWorldRequest_reflection_;
  delete SendFightToWorldResponse::default_instance_;
  delete SendFightToWorldResponse_reflection_;
  delete GetFightDataRequest::default_instance_;
  delete GetFightDataRequest_reflection_;
  delete GetFightDataResponse::default_instance_;
  delete GetFightDataResponse_reflection_;
  delete AlienBossActNotify::default_instance_;
  delete AlienBossActNotify_reflection_;
  delete EnterAlienBossMapRequest::default_instance_;
  delete EnterAlienBossMapRequest_reflection_;
  delete EnterAlienBossMapResponse::default_instance_;
  delete EnterAlienBossMapResponse_reflection_;
  delete LeaveAlienBossMapRequest::default_instance_;
  delete LeaveAlienBossMapRequest_reflection_;
  delete LeaveAlienBossMapResponse::default_instance_;
  delete LeaveAlienBossMapResponse_reflection_;
  delete PlayerBossHurt::default_instance_;
  delete PlayerBossHurt_reflection_;
  delete AlienBossHurtRank::default_instance_;
  delete AlienBossHurtRank_reflection_;
  delete AlienBossRewardsNotify::default_instance_;
  delete AlienBossRewardsNotify_reflection_;
  delete EncourageBuffRequest::default_instance_;
  delete EncourageBuffRequest_reflection_;
  delete EncourageBuffResponse::default_instance_;
  delete EncourageBuffResponse_reflection_;
  delete QuickRespawnRequest::default_instance_;
  delete QuickRespawnRequest_reflection_;
  delete QuickRespawnResponse::default_instance_;
  delete QuickRespawnResponse_reflection_;
  delete UpdateAlienBossBuffNotify::default_instance_;
  delete UpdateAlienBossBuffNotify_reflection_;
  delete GetBossMapInfoRequest::default_instance_;
  delete GetBossMapInfoRequest_reflection_;
  delete GetBossMapInfoResponse::default_instance_;
  delete GetBossMapInfoResponse_reflection_;
  delete EnterPvPMapRequest::default_instance_;
  delete EnterPvPMapRequest_reflection_;
  delete EnterPvPMapResponse::default_instance_;
  delete EnterPvPMapResponse_reflection_;
  delete LeavePvPMapRequest::default_instance_;
  delete LeavePvPMapRequest_reflection_;
  delete LeavePvPMapResponse::default_instance_;
  delete LeavePvPMapResponse_reflection_;
  delete GetPvPMapInfoRequest::default_instance_;
  delete GetPvPMapInfoRequest_reflection_;
  delete PlayerPvPRankInfo::default_instance_;
  delete PlayerPvPRankInfo_reflection_;
  delete GetPvPMapInfoResponse::default_instance_;
  delete GetPvPMapInfoResponse_reflection_;
  delete ClearPvPCDRequest::default_instance_;
  delete ClearPvPCDRequest_reflection_;
  delete ClearPvPCDResponse::default_instance_;
  delete ClearPvPCDResponse_reflection_;
  delete PvPUpdateCD::default_instance_;
  delete PvPUpdateCD_reflection_;
  delete PvPActNotify::default_instance_;
  delete PvPActNotify_reflection_;
  delete PvPRobotNotify::default_instance_;
  delete PvPRobotNotify_reflection_;
  delete PvPBonusNotify::default_instance_;
  delete PvPBonusNotify_reflection_;
  delete TakePvPGiftRequest::default_instance_;
  delete TakePvPGiftRequest_reflection_;
  delete TakePvPGiftResponse::default_instance_;
  delete TakePvPGiftResponse_reflection_;
  delete BossInfo::default_instance_;
  delete BossInfo_reflection_;
  delete GuildWarContributionPlayer::default_instance_;
  delete GuildWarContributionPlayer_reflection_;
  delete EnterGuildWarMapRequest::default_instance_;
  delete EnterGuildWarMapRequest_reflection_;
  delete EnterGuildWarMapResponse::default_instance_;
  delete EnterGuildWarMapResponse_reflection_;
  delete LeaveGuildWarMapRequest::default_instance_;
  delete LeaveGuildWarMapRequest_reflection_;
  delete LeaveGuildWarMapResponse::default_instance_;
  delete LeaveGuildWarMapResponse_reflection_;
  delete GuildWarSchedule::default_instance_;
  delete GuildWarSchedule_reflection_;
  delete GetGuildWarMapInfoRequest::default_instance_;
  delete GetGuildWarMapInfoRequest_reflection_;
  delete GuildWarMapInfo::default_instance_;
  delete GuildWarMapInfo_reflection_;
  delete GetGuildWarMapInfoResponse::default_instance_;
  delete GetGuildWarMapInfoResponse_reflection_;
  delete GuildWarNotify::default_instance_;
  delete GuildWarNotify_reflection_;
  delete GuildWarGuildBattleInfo::default_instance_;
  delete GuildWarGuildBattleInfo_reflection_;
  delete GuildWarPlayerInfo::default_instance_;
  delete GuildWarPlayerInfo_reflection_;
  delete GuildWarAward::default_instance_;
  delete GuildWarAward_reflection_;
  delete GuildWarBattleResult::default_instance_;
  delete GuildWarBattleResult_reflection_;
  delete CompetitorGuild::default_instance_;
  delete CompetitorGuild_reflection_;
  delete GuildWarAddBuffRequest::default_instance_;
  delete GuildWarAddBuffRequest_reflection_;
  delete GuildWarAddBuffResponse::default_instance_;
  delete GuildWarAddBuffResponse_reflection_;
  delete GuildWarContributionRank::default_instance_;
  delete GuildWarContributionRank_reflection_;
  delete GuildWarContributionRankRequest::default_instance_;
  delete GuildWarContributionRankRequest_reflection_;
  delete GuildWarContributionRankResponse::default_instance_;
  delete GuildWarContributionRankResponse_reflection_;
  delete GuildWarContributionRankNotify::default_instance_;
  delete GuildWarContributionRankNotify_reflection_;
  delete UpdateTreasureBoxNotify::default_instance_;
  delete UpdateTreasureBoxNotify_reflection_;
  delete TakeTreasureBoxBonusRequest::default_instance_;
  delete TakeTreasureBoxBonusRequest_reflection_;
  delete TakeTreasureBoxBonusResponse::default_instance_;
  delete TakeTreasureBoxBonusResponse_reflection_;
  delete GuildWarGetCompetitionInfoRequest::default_instance_;
  delete GuildWarGetCompetitionInfoRequest_reflection_;
  delete GuildWarGetCompetitionInfoResponse::default_instance_;
  delete GuildWarGetCompetitionInfoResponse_reflection_;
  delete GetAutoInstanceStatusRequest::default_instance_;
  delete GetAutoInstanceStatusRequest_reflection_;
  delete GetAutoInstanceStatusResponse::default_instance_;
  delete GetAutoInstanceStatusResponse_reflection_;
  delete StartAutoFightInstanceRequest::default_instance_;
  delete StartAutoFightInstanceRequest_reflection_;
  delete StartAutoFightInstanceResponse::default_instance_;
  delete StartAutoFightInstanceResponse_reflection_;
  delete StopAutoFightInstanceRequest::default_instance_;
  delete StopAutoFightInstanceRequest_reflection_;
  delete StopAutoFightInstanceResponse::default_instance_;
  delete StopAutoFightInstanceResponse_reflection_;
  delete FinishAutoFightInstanceRequest::default_instance_;
  delete FinishAutoFightInstanceRequest_reflection_;
  delete FinishAutoFightInstanceResponse::default_instance_;
  delete FinishAutoFightInstanceResponse_reflection_;
  delete AutoFightInstanceNotifyRequest::default_instance_;
  delete AutoFightInstanceNotifyRequest_reflection_;
  delete AutoFightInstanceNotifyResponse::default_instance_;
  delete AutoFightInstanceNotifyResponse_reflection_;
  delete AutoFightInstanceNotify::default_instance_;
  delete AutoFightInstanceNotify_reflection_;
}

void protobuf_AddDesc_game_5ffight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::protocols::common::protobuf_AddDesc_game_5fguild_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020game_fight.proto\022\020protocols.common\032\021ga"
    "me_common.proto\032\020game_guild.proto\"\264\004\n\005Bo"
    "nus\022\014\n\004guid\030\001 \001(\003\022\021\n\texp_bonus\030\002 \001(\005\022\021\n\t"
    "vip_level\030\r \001(\005\022\026\n\016vip_exp_factor\030\n \001(\005\022"
    "\027\n\017team_exp_factor\030\013 \001(\005\022\030\n\020other_exp_fa"
    "ctor\030\014 \001(\005\0221\n\013skill_bonus\030\003 \003(\0132\034.protoc"
    "ols.common.SkillBonus\022\027\n\017gold_coin_bonus"
    "\030\010 \001(\005\022\034\n\024bag_has_enough_slots\030\004 \001(\005\022\026\n\016"
    "base_exp_bonus\030\t \001(\005\022\034\n\024base_gold_coin_b"
    "onus\030\016 \001(\005\022\032\n\022cont_win_exp_bonus\030\017 \001(\005\022\033"
    "\n\023cont_win_gold_bonus\030\020 \001(\005\022\035\n\025de_cont_w"
    "in_exp_bonus\030\021 \001(\005\022\036\n\026de_cont_win_gold_b"
    "onus\030\022 \001(\005\022-\n\tdrop_item\030\005 \003(\0132\032.protocol"
    "s.common.ItemInfo\0223\n\017quest_drop_item\030\007 \003"
    "(\0132\032.protocols.common.ItemInfo\0220\n\tequipm"
    "ent\030\006 \003(\0132\035.protocols.common.EquipDetail"
    "\"\374\003\n\013FightResult\022\021\n\tbattle_id\030\005 \002(\005\022*\n\007f"
    "ighter\030\001 \003(\0132\031.protocols.common.Fighter\022"
    "\016\n\006winner\030\002 \001(\005\022&\n\005bonus\030\003 \003(\0132\027.protoco"
    "ls.common.Bonus\0229\n\024camp_a_battle_skills\030"
    "\006 \003(\0132\033.protocols.common.SkillInfo\0229\n\024ca"
    "mp_b_battle_skills\030\007 \003(\0132\033.protocols.com"
    "mon.SkillInfo\022\022\n\nround_data\030\004 \003(\014\022\020\n\010npc"
    "_name\030\010 \001(\t\022\021\n\tnpc_level\030\013 \001(\005\022\034\n\024left_f"
    "ree_skip_times\030\t \001(\005\022\034\n\024auto_skip_time_l"
    "imit\030\n \001(\005\022\033\n\023camp_a_dead_persons\030\014 \001(\005\022"
    "\033\n\023camp_b_dead_persons\030\r \001(\005\022\027\n\017battle_g"
    "roup_id\030\016 \001(\005\022\033\n\023camp_a_dead_players\030\017 \001"
    "(\005\022\033\n\023camp_b_dead_players\030\020 \001(\005\"\232\001\n\023Figh"
    "tMonsterRequest\022\016\n\006npc_id\030\001 \001(\005\022\025\n\rbattl"
    "e_npc_id\030\002 \001(\005\0220\n\nfight_type\030\003 \001(\0162\034.pro"
    "tocols.common.FIGHT_TYPE\022\024\n\tnpc_map_x\030\004 "
    "\001(\005:\0010\022\024\n\tnpc_map_y\030\005 \001(\005:\0010\"\345\001\n\024FightMo"
    "nsterResponse\022\022\n\nerror_code\030\001 \002(\005\0220\n\nfig"
    "ht_type\030\002 \001(\0162\034.protocols.common.FIGHT_T"
    "YPE\022\016\n\006npc_id\030\003 \001(\005\022-\n\006result\030\004 \001(\0132\035.pr"
    "otocols.common.FightResult\022\025\n\rattacker_g"
    "uid\030\005 \001(\003\022\025\n\rdefender_guid\030\007 \001(\003\022\032\n\022atta"
    "cker_fight_key\030\010 \001(\003\"N\n\020SkipFightRequest"
    "\022:\n\017skip_fight_type\030\001 \002(\0162!.protocols.co"
    "mmon.SKIP_FIGHT_TYPE\"K\n\021SkipFightRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\022\"\n\032left_free_skip_"
    "fight_times\030\002 \001(\005\"\023\n\021LeaveFightRequest\"V"
    "\n\022LeaveFightResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\022\016\n\006map_id\030\002 \001(\005\022\r\n\005map_x\030\003 \001(\005\022\r\n\005map_y"
    "\030\004 \001(\005\"G\n\027SendFightToWorldRequest\022\021\n\tfig"
    "ht_key\030\001 \002(\003\022\031\n\021is_need_broadcast\030\002 \001(\005\""
    ".\n\030SendFightToWorldResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\"(\n\023GetFightDataRequest\022\021\n\tfight_"
    "key\030\001 \002(\003\"y\n\024GetFightDataResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\022\021\n\tfight_key\030\002 \001(\003\022:\n\nfigh"
    "t_data\030\003 \001(\0132&.protocols.common.FightMon"
    "sterResponse\"\306\001\n\022AlienBossActNotify\022\023\n\013n"
    "otify_type\030\001 \002(\005\022\021\n\ttime_left\030\002 \001(\005\022\024\n\014p"
    "layer_count\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\037\n\027dam"
    "age_increase_percent\030\005 \001(\005\022\016\n\006max_hp\030\006 \001"
    "(\005\022\n\n\002hp\030\007 \001(\005\022\021\n\tboss_name\030\010 \001(\t\022\022\n\nbos"
    "s_level\030\t \001(\005\"\032\n\030EnterAlienBossMapReques"
    "t\"/\n\031EnterAlienBossMapResponse\022\022\n\nerror_"
    "code\030\001 \002(\005\"\032\n\030LeaveAlienBossMapRequest\"/"
    "\n\031LeaveAlienBossMapResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\"\301\001\n\016PlayerBossHurt\022\017\n\007role_id\030\t "
    "\001(\005\022\014\n\004rank\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\016\n\006damag"
    "e\030\003 \001(\005\022\026\n\016damage_percent\030\004 \001(\005\022\022\n\ncoin_"
    "bonus\030\005 \001(\005\022\021\n\texp_bonus\030\006 \001(\005\022\027\n\017treasu"
    "re_box_id\030\010 \001(\005\022\032\n\022treasure_box_count\030\007 "
    "\001(\005\"|\n\021AlienBossHurtRank\0222\n\010own_hurt\030\001 \002"
    "(\0132 .protocols.common.PlayerBossHurt\0223\n\t"
    "hurt_rank\030\002 \003(\0132 .protocols.common.Playe"
    "rBossHurt\"v\n\026AlienBossRewardsNotify\022\024\n\014i"
    "s_boss_dead\030\003 \001(\005\022\024\n\014rewards_type\030\001 \002(\005\022"
    "0\n\006reward\030\002 \003(\0132 .protocols.common.Playe"
    "rBossHurt\"$\n\024EncourageBuffRequest\022\014\n\004typ"
    "e\030\001 \002(\005\"\?\n\025EncourageBuffResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\022\022\n\nbuff_value\030\002 \001(\005\"\025\n\023Quic"
    "kRespawnRequest\"*\n\024QuickRespawnResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\"/\n\031UpdateAlienBossBu"
    "ffNotify\022\022\n\nbuff_value\030\001 \001(\005\"\027\n\025GetBossM"
    "apInfoRequest\"\377\001\n\026GetBossMapInfoResponse"
    "\022\022\n\nerror_code\030\001 \002(\005\022\021\n\ttime_left\030\002 \001(\005\022"
    "\024\n\014player_count\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\037\n"
    "\027damage_increase_percent\030\005 \001(\005\022\016\n\006max_hp"
    "\030\006 \001(\005\022\n\n\002hp\030\007 \001(\005\022\021\n\tboss_name\030\010 \001(\t\022\026\n"
    "\016player_is_dead\030\t \001(\005\022\034\n\024time_left_to_re"
    "spawn\030\n \001(\005\022\022\n\nboss_level\030\013 \001(\005\"\024\n\022Enter"
    "PvPMapRequest\")\n\023EnterPvPMapResponse\022\022\n\n"
    "error_code\030\001 \002(\005\"\024\n\022LeavePvPMapRequest\")"
    "\n\023LeavePvPMapResponse\022\022\n\nerror_code\030\001 \002("
    "\005\"\026\n\024GetPvPMapInfoRequest\"s\n\021PlayerPvPRa"
    "nkInfo\022\014\n\004guid\030\004 \001(\003\022\014\n\004rank\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\020\n\010cont_win\030\003 \001(\005\022\022\n\nrole_level"
    "\030\005 \001(\005\022\016\n\006gender\030\006 \001(\005\"\260\001\n\025GetPvPMapInfo"
    "Response\022\022\n\nerror_code\030\001 \002(\005\0226\n\trank_inf"
    "o\030\002 \003(\0132#.protocols.common.PlayerPvPRank"
    "Info\022\017\n\007cd_left\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\017\n\007"
    "cur_win\030\005 \001(\005\022\032\n\022winner_bonus_taken\030\006 \001("
    "\005\"\023\n\021ClearPvPCDRequest\"(\n\022ClearPvPCDResp"
    "onse\022\022\n\nerror_code\030\001 \002(\005\"2\n\013PvPUpdateCD\022"
    "\017\n\007cd_left\030\001 \001(\005\022\022\n\nblack_guid\030\003 \003(\003\"\341\002\n"
    "\014PvPActNotify\022\023\n\013update_type\030\001 \002(\005\0226\n\tra"
    "nk_info\030\002 \003(\0132#.protocols.common.PlayerP"
    "vPRankInfo\022:\n\rdefender_info\030\003 \001(\0132#.prot"
    "ocols.common.PlayerPvPRankInfo\022:\n\rattack"
    "er_info\030\004 \001(\0132#.protocols.common.PlayerP"
    "vPRankInfo\022\030\n\020player_cur_level\030\005 \001(\005\022\026\n\016"
    "player_cur_win\030\006 \001(\005\022\027\n\017player_cont_win\030"
    "\t \001(\005\022\021\n\ttime_left\030\007 \001(\005\022.\n\nbonus_item\030\010"
    " \003(\0132\032.protocols.common.ItemInfo\"u\n\016PvPR"
    "obotNotify\022\022\n\nrobot_type\030\001 \001(\005\022\020\n\010robot_"
    "id\030\002 \001(\005\022\023\n\013robot_level\030\003 \001(\005\022\023\n\013robot_m"
    "ap_x\030\004 \001(\005\022\023\n\013robot_map_y\030\005 \001(\005\"t\n\016PvPBo"
    "nusNotify\022\022\n\nbonus_type\030\001 \001(\005\022\021\n\tcur_lev"
    "el\030\003 \001(\005\022\014\n\004rank\030\004 \001(\005\022-\n\titem_info\030\002 \003("
    "\0132\032.protocols.common.ItemInfo\"7\n\022TakePvP"
    "GiftRequest\022\022\n\nbonus_type\030\001 \001(\005\022\r\n\005level"
    "\030\002 \001(\005\")\n\023TakePvPGiftResponse\022\022\n\nerror_c"
    "ode\030\001 \002(\005\"b\n\010BossInfo\022\021\n\tboss_name\030\001 \001(\t"
    "\022\022\n\nboss_level\030\002 \001(\005\022\016\n\006max_hp\030\003 \001(\005\022\n\n\002"
    "hp\030\004 \001(\005\022\023\n\013show_status\030\005 \001(\005\"\204\001\n\032GuildW"
    "arContributionPlayer\022\014\n\004rank\030\001 \001(\005\022\014\n\004gu"
    "id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\016\n\006damage\030\004 \001(\005\022\026"
    "\n\016encourage_time\030\005 \001(\005\022\024\n\014contribution\030\006"
    " \001(\005\"\031\n\027EnterGuildWarMapRequest\".\n\030Enter"
    "GuildWarMapResponse\022\022\n\nerror_code\030\001 \002(\005\""
    "\031\n\027LeaveGuildWarMapRequest\".\n\030LeaveGuild"
    "WarMapResponse\022\022\n\nerror_code\030\001 \002(\005\"\346\001\n\020G"
    "uildWarSchedule\022\022\n\nevent_type\030\001 \001(\005\022\024\n\014c"
    "ontest_type\030\002 \002(\005\022\033\n\023ContestProgressType"
    "\030\003 \002(\005\022\022\n\nstart_time\030\004 \001(\005\022\020\n\010end_time\030\005"
    " \001(\005\022\021\n\ttime_left\030\007 \001(\005\022:\n\017competitor_in"
    "fo\030\006 \003(\0132!.protocols.common.CompetitorGu"
    "ild\022\026\n\016str_start_time\030\010 \001(\t\"\033\n\031GetGuildW"
    "arMapInfoRequest\"\276\001\n\017GuildWarMapInfo\0224\n\010"
    "schedule\030\001 \001(\0132\".protocols.common.GuildW"
    "arSchedule\022\031\n\021damage_buff_value\030\002 \001(\005\022\032\n"
    "\022defence_buff_value\030\003 \001(\005\022-\n\tboss_info\030\004"
    " \001(\0132\032.protocols.common.BossInfo\022\017\n\007cd_l"
    "eft\030\005 \001(\005\"\351\001\n\032GetGuildWarMapInfoResponse"
    "\022\022\n\nerror_code\030\001 \002(\005\0223\n\010map_info\030\002 \001(\0132!"
    ".protocols.common.GuildWarMapInfo\022@\n\rbat"
    "tle_info_a\030\003 \001(\0132).protocols.common.Guil"
    "dWarGuildBattleInfo\022@\n\rbattle_info_b\030\004 \001"
    "(\0132).protocols.common.GuildWarGuildBattl"
    "eInfo\"\254\004\n\016GuildWarNotify\022\023\n\013notify_type\030"
    "\001 \002(\005\022\020\n\010guild_id\030\r \001(\005\022\022\n\nguild_name\030\016 "
    "\001(\t\0223\n\010map_info\030\002 \001(\0132!.protocols.common"
    ".GuildWarMapInfo\022\025\n\radd_buff_type\030\003 \001(\005\022"
    "A\n\013player_info\030\004 \001(\0132,.protocols.common."
    "GuildWarContributionPlayer\022\032\n\022delta_cont"
    "ribution\030\005 \001(\005\022\017\n\007cd_left\030\007 \001(\005\022=\n\rbattl"
    "e_result\030\010 \003(\0132&.protocols.common.GuildW"
    "arBattleResult\0220\n\013guild_ranks\030\t \003(\0132\033.pr"
    "otocols.common.GuildInfo\022.\n\005award\030\n \001(\0132"
    "\037.protocols.common.GuildWarAward\022@\n\rbatt"
    "le_info_a\030\013 \001(\0132).protocols.common.Guild"
    "WarGuildBattleInfo\022@\n\rbattle_info_b\030\014 \001("
    "\0132).protocols.common.GuildWarGuildBattle"
    "Info\"\220\001\n\027GuildWarGuildBattleInfo\022\020\n\010guil"
    "d_id\030\001 \001(\005\022\022\n\nguild_name\030\002 \001(\t\022\023\n\013player"
    "_left\030\003 \001(\005\022:\n\014player_infos\030\004 \003(\0132$.prot"
    "ocols.common.GuildWarPlayerInfo\"\263\001\n\022Guil"
    "dWarPlayerInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004guid\030\002 \001"
    "(\003\022\017\n\007team_id\030\010 \001(\005\022\026\n\016team_leader_id\030\003 "
    "\001(\003\022\017\n\007is_dead\030\004 \001(\010\022\021\n\tdeath_num\030\005 \001(\005\022"
    "\017\n\007win_num\030\006 \001(\005\022\022\n\ndevote_num\030\007 \001(\005\022\017\n\007"
    "cd_left\030\t \001(\005\"\202\001\n\rGuildWarAward\022\020\n\010is_wi"
    "ner\030\001 \001(\010\022\013\n\003exp\030\002 \001(\005\022\014\n\004gold\030\003 \001(\005\022\031\n\021"
    "opponent_guild_id\030\004 \001(\005\022\033\n\023opponent_guil"
    "d_name\030\005 \001(\t\022\014\n\004rank\030\006 \001(\005\"\356\001\n\024GuildWarB"
    "attleResult\0221\n\014camp_a_guild\030\001 \001(\0132\033.prot"
    "ocols.common.GuildInfo\0221\n\014camp_b_guild\030\002"
    " \001(\0132\033.protocols.common.GuildInfo\022\024\n\014win"
    "_num_of_a\030\003 \001(\005\022\025\n\rplayer_a_name\030\004 \001(\t\022\025"
    "\n\rplayer_b_name\030\005 \001(\t\022\025\n\rplayer_a_guid\030\006"
    " \001(\003\022\025\n\rplayer_b_guid\030\007 \001(\003\"\241\001\n\017Competit"
    "orGuild\022\017\n\007section\030\001 \001(\005\0221\n\014camp_a_guild"
    "\030\002 \001(\0132\033.protocols.common.GuildInfo\0221\n\014c"
    "amp_b_guild\030\003 \001(\0132\033.protocols.common.Gui"
    "ldInfo\022\027\n\017winner_guild_id\030\004 \001(\005\"&\n\026Guild"
    "WarAddBuffRequest\022\014\n\004type\030\001 \002(\005\"d\n\027Guild"
    "WarAddBuffResponse\022\022\n\nerror_code\030\001 \002(\005\022\031"
    "\n\021damage_buff_value\030\002 \001(\005\022\032\n\022defence_buf"
    "f_value\030\003 \001(\005\"]\n\030GuildWarContributionRan"
    "k\022A\n\013rank_player\030\001 \003(\0132,.protocols.commo"
    "n.GuildWarContributionPlayer\"!\n\037GuildWar"
    "ContributionRankRequest\"u\n GuildWarContr"
    "ibutionRankResponse\022\022\n\nerror_code\030\001 \002(\005\022"
    "=\n\trank_info\030\002 \001(\0132*.protocols.common.Gu"
    "ildWarContributionRank\"_\n\036GuildWarContri"
    "butionRankNotify\022=\n\trank_info\030\001 \001(\0132*.pr"
    "otocols.common.GuildWarContributionRank\""
    "d\n\027UpdateTreasureBoxNotify\022\022\n\nbonus_type"
    "\030\001 \002(\005\0225\n\010box_info\030\002 \003(\0132#.protocols.com"
    "mon.TreasureBoxReward\"D\n\033TakeTreasureBox"
    "BonusRequest\022\022\n\nbonus_type\030\001 \002(\005\022\021\n\tbox_"
    "index\030\002 \001(\005\"\\\n\034TakeTreasureBoxBonusRespo"
    "nse\022\022\n\nerror_code\030\001 \002(\005\022(\n\004item\030\002 \003(\0132\032."
    "protocols.common.ItemInfo\"#\n!GuildWarGet"
    "CompetitionInfoRequest\"n\n\"GuildWarGetCom"
    "petitionInfoResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\0224\n\010schedule\030\002 \001(\0132\".protocols.common.Gu"
    "ildWarSchedule\"3\n\034GetAutoInstanceStatusR"
    "equest\022\023\n\013instance_id\030\001 \002(\005\"f\n\035GetAutoIn"
    "stanceStatusResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\0221\n\tinst_info\030\002 \001(\0132\036.protocols.common.I"
    "nstanceInfo\"\206\001\n\035StartAutoFightInstanceRe"
    "quest\022\030\n\020auto_fight_times\030\001 \002(\005\0221\n\tinst_"
    "info\030\002 \002(\0132\036.protocols.common.InstanceIn"
    "fo\022\030\n\020stop_on_bag_full\030\003 \002(\005\"G\n\036StartAut"
    "oFightInstanceResponse\022\022\n\nerror_code\030\001 \002"
    "(\005\022\021\n\tleft_time\030\002 \001(\005\"\036\n\034StopAutoFightIn"
    "stanceRequest\"3\n\035StopAutoFightInstanceRe"
    "sponse\022\022\n\nerror_code\030\001 \002(\005\"8\n\036FinishAuto"
    "FightInstanceRequest\022\026\n\016get_money_flag\030\001"
    " \001(\005\"I\n\037FinishAutoFightInstanceResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\022\022\n\nneed_money\030\002 \001(\005\""
    " \n\036AutoFightInstanceNotifyRequest\"5\n\037Aut"
    "oFightInstanceNotifyResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"\356\001\n\027AutoFightInstanceNotify\022\027\n\017"
    "is_fight_finish\030\001 \001(\005\022\031\n\021finish_error_co"
    "de\030\002 \001(\005\022\026\n\016cur_fight_time\030\003 \001(\005\022\035\n\025left"
    "_auto_fight_times\030\004 \001(\005\022\021\n\texp_bonus\030\005 \001"
    "(\005\022\022\n\ncoin_bonus\030\006 \001(\005\022.\n\nitem_bonus\030\007 \003"
    "(\0132\032.protocols.common.ItemInfo\022\021\n\tleft_t"
    "ime\030\010 \001(\005*\324\002\n\026AlienBossActNotifyType\022$\n "
    "AlienBossActNotifyType_PRE_START\020\001\022 \n\034Al"
    "ienBossActNotifyType_START\020\002\022$\n AlienBos"
    "sActNotifyType_TIME_LEFT\020\003\022+\n\'AlienBossA"
    "ctNotifyType_ACT_PLAYER_COUNT\020\004\0222\n.Alien"
    "BossActNotifyType_DAMAGE_INCREASE_PERCEN"
    "T\020\005\022!\n\035AlienBossActNotifyType_FINISH\020\006\022$"
    "\n AlienBossActNotifyType_MAP_CLOSE\020\010\022\"\n\036"
    "AlienBossActNotifyType_BOSS_HP\020\007*x\n\024Alie"
    "nBossRewardsType\022\035\n\031AlienBossRewardsType"
    "_RANK\020\001\022\"\n\036AlienBossRewardsType_LAST_SHO"
    "T\020\002\022\035\n\031AlienBossRewardsType_BASE\020\003*\254\002\n\020P"
    "vPActNotifyType\022\027\n\023PvP_CONT_WIN_UPDATE\020\001"
    "\022\030\n\024PvP_Challenge_NOTIFY\020\002\022\025\n\021PvP_BEATED"
    "_NOTIFY\020\003\022\024\n\020PvP_LEVEL_UPDATE\020\004\022\021\n\rPvP_W"
    "IN_COUNT\020\005\022\021\n\rPvP_PRE_START\020\006\022\r\n\tPvP_STA"
    "RT\020\007\022\016\n\nPvP_FINISH\020\010\022\025\n\021PvP_LEVEL_FIRST_"
    "5\020\t\022\023\n\017PvP_FIRST_BLOOD\020\n\022\027\n\023PvP_PLAYER_C"
    "ONT_WIN\020\013\022\030\n\024PvP_BEAT_10_CONT_WIN\020\014\022\024\n\020P"
    "vP_TOP_3_WINNER\020\r*s\n\014PvPBonusType\022\032\n\026PvP"
    "BonusType_WIN_BONUS\020\001\022%\n!PvPBonusType_SP"
    "EICIAL_LEVEL_BONUS\020\002\022 \n\034PvPBonusType_MAX"
    "_LEVEL_BONUS\020\003*\201\001\n\013ContestType\022\035\n\031Contes"
    "tType_Preliminaries\020\001\022\036\n\032ContestType_Qua"
    "rter_Finals\020\002\022\033\n\027ContestType_Semi_Finals"
    "\020\003\022\026\n\022ContestType_Finals\020\004*\337\001\n\023ContestPr"
    "ogressType\022\034\n\030ContestProgressType_Wait\020\000"
    "\022\037\n\033ContestProgressType_Prepare\020\001\022\035\n\031Con"
    "testProgressType_Start\020\002\022$\n ContestProgr"
    "essType_Fight_Finish\020\003\022!\n\035ContestProgres"
    "sType_Box_Bonus\020\004\022!\n\035ContestProgressType"
    "_Map_Close\020\005*N\n\021GuildWarEventType\022\035\n\031Gui"
    "ldWarEvent_FutureEvent\020\001\022\032\n\026GuildWarEven"
    "t_NowEvent\020\002*\310\006\n\022GuildWarNotifyType\022\025\n\021G"
    "uildWarNotify_CD\020\001\022\034\n\030GuildWarNotify_BOS"
    "S_Info\020\002\022\034\n\030GuildWarNotify_BOSS_BUFF\020\003\022\034"
    "\n\030GuildWarNotify_Kill_BOSS\020\004\022\033\n\027GuildWar"
    "Notify_ADD_BUFF\020\005\022.\n*GuildWarNotify_Prel"
    "iminaries_Hourly_Notify\020\006\0221\n-GuildWarNot"
    "ify_Preliminaries_CountDown_Notify\020\007\022\032\n\026"
    "GuildWarNotify_Prepare\020\n\022\030\n\024GuildWarNoti"
    "fy_Start\020\010\022\026\n\022GuildWarNotify_End\020\t\022\030\n\024Gu"
    "ildWarNotify_Close\020\027\022\037\n\033GuildWarNotify_B"
    "attleResult\020\013\022\036\n\032GuildWarNotify_FightRes"
    "ult\020\014\022!\n\035GuildWarNotify_FinalGuildRank\020\r"
    "\022!\n\035GuildWarNotify_Award_Personal\020\016\022\036\n\032G"
    "uildWarNotify_Award_Guild\020\017\022&\n\"GuildWarN"
    "otify_Award_Rank_Personal\020\020\022#\n\037GuildWarN"
    "otify_Award_Rank_Guild\020\021\022$\n GuildWarNoti"
    "fy_Guild_Battle_Info\020\022\022!\n\035GuildWarNotify"
    "_Win_Count_Down\020\023\022\"\n\036GuildWarNotify_Gift"
    "_Count_Down\020\024\022&\n\"GuildWarNotify_System_T"
    "op_8_Notify\020\025\022(\n$GuildWarNotify_System_Q"
    "uarter_Notify\020\026\022&\n\"GuildWarNotify_BOSS_P"
    "ersonal_bonus\020\030*C\n\024GuildWarBossBuffType\022"
    "\024\n\020Boss_Damage_Buff\020\001\022\025\n\021Boss_Defence_We"
    "ak\020\002", 11204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_fight.proto", &protobuf_RegisterTypes);
  Bonus::default_instance_ = new Bonus();
  FightResult::default_instance_ = new FightResult();
  FightMonsterRequest::default_instance_ = new FightMonsterRequest();
  FightMonsterResponse::default_instance_ = new FightMonsterResponse();
  SkipFightRequest::default_instance_ = new SkipFightRequest();
  SkipFightResponse::default_instance_ = new SkipFightResponse();
  LeaveFightRequest::default_instance_ = new LeaveFightRequest();
  LeaveFightResponse::default_instance_ = new LeaveFightResponse();
  SendFightToWorldRequest::default_instance_ = new SendFightToWorldRequest();
  SendFightToWorldResponse::default_instance_ = new SendFightToWorldResponse();
  GetFightDataRequest::default_instance_ = new GetFightDataRequest();
  GetFightDataResponse::default_instance_ = new GetFightDataResponse();
  AlienBossActNotify::default_instance_ = new AlienBossActNotify();
  EnterAlienBossMapRequest::default_instance_ = new EnterAlienBossMapRequest();
  EnterAlienBossMapResponse::default_instance_ = new EnterAlienBossMapResponse();
  LeaveAlienBossMapRequest::default_instance_ = new LeaveAlienBossMapRequest();
  LeaveAlienBossMapResponse::default_instance_ = new LeaveAlienBossMapResponse();
  PlayerBossHurt::default_instance_ = new PlayerBossHurt();
  AlienBossHurtRank::default_instance_ = new AlienBossHurtRank();
  AlienBossRewardsNotify::default_instance_ = new AlienBossRewardsNotify();
  EncourageBuffRequest::default_instance_ = new EncourageBuffRequest();
  EncourageBuffResponse::default_instance_ = new EncourageBuffResponse();
  QuickRespawnRequest::default_instance_ = new QuickRespawnRequest();
  QuickRespawnResponse::default_instance_ = new QuickRespawnResponse();
  UpdateAlienBossBuffNotify::default_instance_ = new UpdateAlienBossBuffNotify();
  GetBossMapInfoRequest::default_instance_ = new GetBossMapInfoRequest();
  GetBossMapInfoResponse::default_instance_ = new GetBossMapInfoResponse();
  EnterPvPMapRequest::default_instance_ = new EnterPvPMapRequest();
  EnterPvPMapResponse::default_instance_ = new EnterPvPMapResponse();
  LeavePvPMapRequest::default_instance_ = new LeavePvPMapRequest();
  LeavePvPMapResponse::default_instance_ = new LeavePvPMapResponse();
  GetPvPMapInfoRequest::default_instance_ = new GetPvPMapInfoRequest();
  PlayerPvPRankInfo::default_instance_ = new PlayerPvPRankInfo();
  GetPvPMapInfoResponse::default_instance_ = new GetPvPMapInfoResponse();
  ClearPvPCDRequest::default_instance_ = new ClearPvPCDRequest();
  ClearPvPCDResponse::default_instance_ = new ClearPvPCDResponse();
  PvPUpdateCD::default_instance_ = new PvPUpdateCD();
  PvPActNotify::default_instance_ = new PvPActNotify();
  PvPRobotNotify::default_instance_ = new PvPRobotNotify();
  PvPBonusNotify::default_instance_ = new PvPBonusNotify();
  TakePvPGiftRequest::default_instance_ = new TakePvPGiftRequest();
  TakePvPGiftResponse::default_instance_ = new TakePvPGiftResponse();
  BossInfo::default_instance_ = new BossInfo();
  GuildWarContributionPlayer::default_instance_ = new GuildWarContributionPlayer();
  EnterGuildWarMapRequest::default_instance_ = new EnterGuildWarMapRequest();
  EnterGuildWarMapResponse::default_instance_ = new EnterGuildWarMapResponse();
  LeaveGuildWarMapRequest::default_instance_ = new LeaveGuildWarMapRequest();
  LeaveGuildWarMapResponse::default_instance_ = new LeaveGuildWarMapResponse();
  GuildWarSchedule::default_instance_ = new GuildWarSchedule();
  GetGuildWarMapInfoRequest::default_instance_ = new GetGuildWarMapInfoRequest();
  GuildWarMapInfo::default_instance_ = new GuildWarMapInfo();
  GetGuildWarMapInfoResponse::default_instance_ = new GetGuildWarMapInfoResponse();
  GuildWarNotify::default_instance_ = new GuildWarNotify();
  GuildWarGuildBattleInfo::default_instance_ = new GuildWarGuildBattleInfo();
  GuildWarPlayerInfo::default_instance_ = new GuildWarPlayerInfo();
  GuildWarAward::default_instance_ = new GuildWarAward();
  GuildWarBattleResult::default_instance_ = new GuildWarBattleResult();
  CompetitorGuild::default_instance_ = new CompetitorGuild();
  GuildWarAddBuffRequest::default_instance_ = new GuildWarAddBuffRequest();
  GuildWarAddBuffResponse::default_instance_ = new GuildWarAddBuffResponse();
  GuildWarContributionRank::default_instance_ = new GuildWarContributionRank();
  GuildWarContributionRankRequest::default_instance_ = new GuildWarContributionRankRequest();
  GuildWarContributionRankResponse::default_instance_ = new GuildWarContributionRankResponse();
  GuildWarContributionRankNotify::default_instance_ = new GuildWarContributionRankNotify();
  UpdateTreasureBoxNotify::default_instance_ = new UpdateTreasureBoxNotify();
  TakeTreasureBoxBonusRequest::default_instance_ = new TakeTreasureBoxBonusRequest();
  TakeTreasureBoxBonusResponse::default_instance_ = new TakeTreasureBoxBonusResponse();
  GuildWarGetCompetitionInfoRequest::default_instance_ = new GuildWarGetCompetitionInfoRequest();
  GuildWarGetCompetitionInfoResponse::default_instance_ = new GuildWarGetCompetitionInfoResponse();
  GetAutoInstanceStatusRequest::default_instance_ = new GetAutoInstanceStatusRequest();
  GetAutoInstanceStatusResponse::default_instance_ = new GetAutoInstanceStatusResponse();
  StartAutoFightInstanceRequest::default_instance_ = new StartAutoFightInstanceRequest();
  StartAutoFightInstanceResponse::default_instance_ = new StartAutoFightInstanceResponse();
  StopAutoFightInstanceRequest::default_instance_ = new StopAutoFightInstanceRequest();
  StopAutoFightInstanceResponse::default_instance_ = new StopAutoFightInstanceResponse();
  FinishAutoFightInstanceRequest::default_instance_ = new FinishAutoFightInstanceRequest();
  FinishAutoFightInstanceResponse::default_instance_ = new FinishAutoFightInstanceResponse();
  AutoFightInstanceNotifyRequest::default_instance_ = new AutoFightInstanceNotifyRequest();
  AutoFightInstanceNotifyResponse::default_instance_ = new AutoFightInstanceNotifyResponse();
  AutoFightInstanceNotify::default_instance_ = new AutoFightInstanceNotify();
  Bonus::default_instance_->InitAsDefaultInstance();
  FightResult::default_instance_->InitAsDefaultInstance();
  FightMonsterRequest::default_instance_->InitAsDefaultInstance();
  FightMonsterResponse::default_instance_->InitAsDefaultInstance();
  SkipFightRequest::default_instance_->InitAsDefaultInstance();
  SkipFightResponse::default_instance_->InitAsDefaultInstance();
  LeaveFightRequest::default_instance_->InitAsDefaultInstance();
  LeaveFightResponse::default_instance_->InitAsDefaultInstance();
  SendFightToWorldRequest::default_instance_->InitAsDefaultInstance();
  SendFightToWorldResponse::default_instance_->InitAsDefaultInstance();
  GetFightDataRequest::default_instance_->InitAsDefaultInstance();
  GetFightDataResponse::default_instance_->InitAsDefaultInstance();
  AlienBossActNotify::default_instance_->InitAsDefaultInstance();
  EnterAlienBossMapRequest::default_instance_->InitAsDefaultInstance();
  EnterAlienBossMapResponse::default_instance_->InitAsDefaultInstance();
  LeaveAlienBossMapRequest::default_instance_->InitAsDefaultInstance();
  LeaveAlienBossMapResponse::default_instance_->InitAsDefaultInstance();
  PlayerBossHurt::default_instance_->InitAsDefaultInstance();
  AlienBossHurtRank::default_instance_->InitAsDefaultInstance();
  AlienBossRewardsNotify::default_instance_->InitAsDefaultInstance();
  EncourageBuffRequest::default_instance_->InitAsDefaultInstance();
  EncourageBuffResponse::default_instance_->InitAsDefaultInstance();
  QuickRespawnRequest::default_instance_->InitAsDefaultInstance();
  QuickRespawnResponse::default_instance_->InitAsDefaultInstance();
  UpdateAlienBossBuffNotify::default_instance_->InitAsDefaultInstance();
  GetBossMapInfoRequest::default_instance_->InitAsDefaultInstance();
  GetBossMapInfoResponse::default_instance_->InitAsDefaultInstance();
  EnterPvPMapRequest::default_instance_->InitAsDefaultInstance();
  EnterPvPMapResponse::default_instance_->InitAsDefaultInstance();
  LeavePvPMapRequest::default_instance_->InitAsDefaultInstance();
  LeavePvPMapResponse::default_instance_->InitAsDefaultInstance();
  GetPvPMapInfoRequest::default_instance_->InitAsDefaultInstance();
  PlayerPvPRankInfo::default_instance_->InitAsDefaultInstance();
  GetPvPMapInfoResponse::default_instance_->InitAsDefaultInstance();
  ClearPvPCDRequest::default_instance_->InitAsDefaultInstance();
  ClearPvPCDResponse::default_instance_->InitAsDefaultInstance();
  PvPUpdateCD::default_instance_->InitAsDefaultInstance();
  PvPActNotify::default_instance_->InitAsDefaultInstance();
  PvPRobotNotify::default_instance_->InitAsDefaultInstance();
  PvPBonusNotify::default_instance_->InitAsDefaultInstance();
  TakePvPGiftRequest::default_instance_->InitAsDefaultInstance();
  TakePvPGiftResponse::default_instance_->InitAsDefaultInstance();
  BossInfo::default_instance_->InitAsDefaultInstance();
  GuildWarContributionPlayer::default_instance_->InitAsDefaultInstance();
  EnterGuildWarMapRequest::default_instance_->InitAsDefaultInstance();
  EnterGuildWarMapResponse::default_instance_->InitAsDefaultInstance();
  LeaveGuildWarMapRequest::default_instance_->InitAsDefaultInstance();
  LeaveGuildWarMapResponse::default_instance_->InitAsDefaultInstance();
  GuildWarSchedule::default_instance_->InitAsDefaultInstance();
  GetGuildWarMapInfoRequest::default_instance_->InitAsDefaultInstance();
  GuildWarMapInfo::default_instance_->InitAsDefaultInstance();
  GetGuildWarMapInfoResponse::default_instance_->InitAsDefaultInstance();
  GuildWarNotify::default_instance_->InitAsDefaultInstance();
  GuildWarGuildBattleInfo::default_instance_->InitAsDefaultInstance();
  GuildWarPlayerInfo::default_instance_->InitAsDefaultInstance();
  GuildWarAward::default_instance_->InitAsDefaultInstance();
  GuildWarBattleResult::default_instance_->InitAsDefaultInstance();
  CompetitorGuild::default_instance_->InitAsDefaultInstance();
  GuildWarAddBuffRequest::default_instance_->InitAsDefaultInstance();
  GuildWarAddBuffResponse::default_instance_->InitAsDefaultInstance();
  GuildWarContributionRank::default_instance_->InitAsDefaultInstance();
  GuildWarContributionRankRequest::default_instance_->InitAsDefaultInstance();
  GuildWarContributionRankResponse::default_instance_->InitAsDefaultInstance();
  GuildWarContributionRankNotify::default_instance_->InitAsDefaultInstance();
  UpdateTreasureBoxNotify::default_instance_->InitAsDefaultInstance();
  TakeTreasureBoxBonusRequest::default_instance_->InitAsDefaultInstance();
  TakeTreasureBoxBonusResponse::default_instance_->InitAsDefaultInstance();
  GuildWarGetCompetitionInfoRequest::default_instance_->InitAsDefaultInstance();
  GuildWarGetCompetitionInfoResponse::default_instance_->InitAsDefaultInstance();
  GetAutoInstanceStatusRequest::default_instance_->InitAsDefaultInstance();
  GetAutoInstanceStatusResponse::default_instance_->InitAsDefaultInstance();
  StartAutoFightInstanceRequest::default_instance_->InitAsDefaultInstance();
  StartAutoFightInstanceResponse::default_instance_->InitAsDefaultInstance();
  StopAutoFightInstanceRequest::default_instance_->InitAsDefaultInstance();
  StopAutoFightInstanceResponse::default_instance_->InitAsDefaultInstance();
  FinishAutoFightInstanceRequest::default_instance_->InitAsDefaultInstance();
  FinishAutoFightInstanceResponse::default_instance_->InitAsDefaultInstance();
  AutoFightInstanceNotifyRequest::default_instance_->InitAsDefaultInstance();
  AutoFightInstanceNotifyResponse::default_instance_->InitAsDefaultInstance();
  AutoFightInstanceNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5ffight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5ffight_2eproto {
  StaticDescriptorInitializer_game_5ffight_2eproto() {
    protobuf_AddDesc_game_5ffight_2eproto();
  }
} static_descriptor_initializer_game_5ffight_2eproto_;

const ::google::protobuf::EnumDescriptor* AlienBossActNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienBossActNotifyType_descriptor_;
}
bool AlienBossActNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AlienBossRewardsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienBossRewardsType_descriptor_;
}
bool AlienBossRewardsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PvPActNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPActNotifyType_descriptor_;
}
bool PvPActNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PvPBonusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPBonusType_descriptor_;
}
bool PvPBonusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContestType_descriptor_;
}
bool ContestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContestProgressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContestProgressType_descriptor_;
}
bool ContestProgressType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildWarEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarEventType_descriptor_;
}
bool GuildWarEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildWarNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarNotifyType_descriptor_;
}
bool GuildWarNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildWarBossBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarBossBuffType_descriptor_;
}
bool GuildWarBossBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Bonus::kGuidFieldNumber;
const int Bonus::kExpBonusFieldNumber;
const int Bonus::kVipLevelFieldNumber;
const int Bonus::kVipExpFactorFieldNumber;
const int Bonus::kTeamExpFactorFieldNumber;
const int Bonus::kOtherExpFactorFieldNumber;
const int Bonus::kSkillBonusFieldNumber;
const int Bonus::kGoldCoinBonusFieldNumber;
const int Bonus::kBagHasEnoughSlotsFieldNumber;
const int Bonus::kBaseExpBonusFieldNumber;
const int Bonus::kBaseGoldCoinBonusFieldNumber;
const int Bonus::kContWinExpBonusFieldNumber;
const int Bonus::kContWinGoldBonusFieldNumber;
const int Bonus::kDeContWinExpBonusFieldNumber;
const int Bonus::kDeContWinGoldBonusFieldNumber;
const int Bonus::kDropItemFieldNumber;
const int Bonus::kQuestDropItemFieldNumber;
const int Bonus::kEquipmentFieldNumber;
#endif  // !_MSC_VER

Bonus::Bonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bonus::InitAsDefaultInstance() {
}

Bonus::Bonus(const Bonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bonus::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  exp_bonus_ = 0;
  vip_level_ = 0;
  vip_exp_factor_ = 0;
  team_exp_factor_ = 0;
  other_exp_factor_ = 0;
  gold_coin_bonus_ = 0;
  bag_has_enough_slots_ = 0;
  base_exp_bonus_ = 0;
  base_gold_coin_bonus_ = 0;
  cont_win_exp_bonus_ = 0;
  cont_win_gold_bonus_ = 0;
  de_cont_win_exp_bonus_ = 0;
  de_cont_win_gold_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bonus::~Bonus() {
  SharedDtor();
}

void Bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bonus_descriptor_;
}

const Bonus& Bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

Bonus* Bonus::default_instance_ = NULL;

Bonus* Bonus::New() const {
  return new Bonus;
}

void Bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    exp_bonus_ = 0;
    vip_level_ = 0;
    vip_exp_factor_ = 0;
    team_exp_factor_ = 0;
    other_exp_factor_ = 0;
    gold_coin_bonus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bag_has_enough_slots_ = 0;
    base_exp_bonus_ = 0;
    base_gold_coin_bonus_ = 0;
    cont_win_exp_bonus_ = 0;
    cont_win_gold_bonus_ = 0;
    de_cont_win_exp_bonus_ = 0;
    de_cont_win_gold_bonus_ = 0;
  }
  skill_bonus_.Clear();
  drop_item_.Clear();
  quest_drop_item_.Clear();
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_bonus;
        break;
      }
      
      // optional int32 exp_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_bonus;
        break;
      }
      
      // repeated .protocols.common.SkillBonus skill_bonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_bonus;
        if (input->ExpectTag(32)) goto parse_bag_has_enough_slots;
        break;
      }
      
      // optional int32 bag_has_enough_slots = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_has_enough_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_has_enough_slots_)));
          set_has_bag_has_enough_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drop_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo drop_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drop_item;
        if (input->ExpectTag(50)) goto parse_equipment;
        break;
      }
      
      // repeated .protocols.common.EquipDetail equipment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equipment;
        if (input->ExpectTag(58)) goto parse_quest_drop_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo quest_drop_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_drop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_drop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quest_drop_item;
        if (input->ExpectTag(64)) goto parse_gold_coin_bonus;
        break;
      }
      
      // optional int32 gold_coin_bonus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_coin_bonus_)));
          set_has_gold_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_base_exp_bonus;
        break;
      }
      
      // optional int32 base_exp_bonus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_exp_bonus_)));
          set_has_base_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_exp_factor;
        break;
      }
      
      // optional int32 vip_exp_factor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_factor_)));
          set_has_vip_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_team_exp_factor;
        break;
      }
      
      // optional int32 team_exp_factor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_exp_factor_)));
          set_has_team_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_other_exp_factor;
        break;
      }
      
      // optional int32 other_exp_factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_exp_factor_)));
          set_has_other_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_base_gold_coin_bonus;
        break;
      }
      
      // optional int32 base_gold_coin_bonus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_gold_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_gold_coin_bonus_)));
          set_has_base_gold_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cont_win_exp_bonus;
        break;
      }
      
      // optional int32 cont_win_exp_bonus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_exp_bonus_)));
          set_has_cont_win_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_cont_win_gold_bonus;
        break;
      }
      
      // optional int32 cont_win_gold_bonus = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_gold_bonus_)));
          set_has_cont_win_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_de_cont_win_exp_bonus;
        break;
      }
      
      // optional int32 de_cont_win_exp_bonus = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_de_cont_win_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &de_cont_win_exp_bonus_)));
          set_has_de_cont_win_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_de_cont_win_gold_bonus;
        break;
      }
      
      // optional int32 de_cont_win_gold_bonus = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_de_cont_win_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &de_cont_win_gold_bonus_)));
          set_has_de_cont_win_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_bonus(), output);
  }
  
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_bonus(i), output);
  }
  
  // optional int32 bag_has_enough_slots = 4;
  if (has_bag_has_enough_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bag_has_enough_slots(), output);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  for (int i = 0; i < this->drop_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->drop_item(i), output);
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equipment(i), output);
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quest_drop_item(i), output);
  }
  
  // optional int32 gold_coin_bonus = 8;
  if (has_gold_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold_coin_bonus(), output);
  }
  
  // optional int32 base_exp_bonus = 9;
  if (has_base_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->base_exp_bonus(), output);
  }
  
  // optional int32 vip_exp_factor = 10;
  if (has_vip_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip_exp_factor(), output);
  }
  
  // optional int32 team_exp_factor = 11;
  if (has_team_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->team_exp_factor(), output);
  }
  
  // optional int32 other_exp_factor = 12;
  if (has_other_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->other_exp_factor(), output);
  }
  
  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_level(), output);
  }
  
  // optional int32 base_gold_coin_bonus = 14;
  if (has_base_gold_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->base_gold_coin_bonus(), output);
  }
  
  // optional int32 cont_win_exp_bonus = 15;
  if (has_cont_win_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cont_win_exp_bonus(), output);
  }
  
  // optional int32 cont_win_gold_bonus = 16;
  if (has_cont_win_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cont_win_gold_bonus(), output);
  }
  
  // optional int32 de_cont_win_exp_bonus = 17;
  if (has_de_cont_win_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->de_cont_win_exp_bonus(), output);
  }
  
  // optional int32 de_cont_win_gold_bonus = 18;
  if (has_de_cont_win_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->de_cont_win_gold_bonus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_bonus(), target);
  }
  
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_bonus(i), target);
  }
  
  // optional int32 bag_has_enough_slots = 4;
  if (has_bag_has_enough_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bag_has_enough_slots(), target);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  for (int i = 0; i < this->drop_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->drop_item(i), target);
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equipment(i), target);
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quest_drop_item(i), target);
  }
  
  // optional int32 gold_coin_bonus = 8;
  if (has_gold_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold_coin_bonus(), target);
  }
  
  // optional int32 base_exp_bonus = 9;
  if (has_base_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->base_exp_bonus(), target);
  }
  
  // optional int32 vip_exp_factor = 10;
  if (has_vip_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip_exp_factor(), target);
  }
  
  // optional int32 team_exp_factor = 11;
  if (has_team_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->team_exp_factor(), target);
  }
  
  // optional int32 other_exp_factor = 12;
  if (has_other_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->other_exp_factor(), target);
  }
  
  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_level(), target);
  }
  
  // optional int32 base_gold_coin_bonus = 14;
  if (has_base_gold_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->base_gold_coin_bonus(), target);
  }
  
  // optional int32 cont_win_exp_bonus = 15;
  if (has_cont_win_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cont_win_exp_bonus(), target);
  }
  
  // optional int32 cont_win_gold_bonus = 16;
  if (has_cont_win_gold_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cont_win_gold_bonus(), target);
  }
  
  // optional int32 de_cont_win_exp_bonus = 17;
  if (has_de_cont_win_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->de_cont_win_exp_bonus(), target);
  }
  
  // optional int32 de_cont_win_gold_bonus = 18;
  if (has_de_cont_win_gold_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->de_cont_win_gold_bonus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 exp_bonus = 2;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
    // optional int32 vip_level = 13;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional int32 vip_exp_factor = 10;
    if (has_vip_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp_factor());
    }
    
    // optional int32 team_exp_factor = 11;
    if (has_team_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_exp_factor());
    }
    
    // optional int32 other_exp_factor = 12;
    if (has_other_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_exp_factor());
    }
    
    // optional int32 gold_coin_bonus = 8;
    if (has_gold_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_coin_bonus());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bag_has_enough_slots = 4;
    if (has_bag_has_enough_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_has_enough_slots());
    }
    
    // optional int32 base_exp_bonus = 9;
    if (has_base_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_exp_bonus());
    }
    
    // optional int32 base_gold_coin_bonus = 14;
    if (has_base_gold_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_gold_coin_bonus());
    }
    
    // optional int32 cont_win_exp_bonus = 15;
    if (has_cont_win_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win_exp_bonus());
    }
    
    // optional int32 cont_win_gold_bonus = 16;
    if (has_cont_win_gold_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win_gold_bonus());
    }
    
    // optional int32 de_cont_win_exp_bonus = 17;
    if (has_de_cont_win_exp_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->de_cont_win_exp_bonus());
    }
    
    // optional int32 de_cont_win_gold_bonus = 18;
    if (has_de_cont_win_gold_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->de_cont_win_gold_bonus());
    }
    
  }
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  total_size += 1 * this->skill_bonus_size();
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_bonus(i));
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  total_size += 1 * this->drop_item_size();
  for (int i = 0; i < this->drop_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_item(i));
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  total_size += 1 * this->quest_drop_item_size();
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_drop_item(i));
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bonus::MergeFrom(const Bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_bonus_.MergeFrom(from.skill_bonus_);
  drop_item_.MergeFrom(from.drop_item_);
  quest_drop_item_.MergeFrom(from.quest_drop_item_);
  equipment_.MergeFrom(from.equipment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_exp_factor()) {
      set_vip_exp_factor(from.vip_exp_factor());
    }
    if (from.has_team_exp_factor()) {
      set_team_exp_factor(from.team_exp_factor());
    }
    if (from.has_other_exp_factor()) {
      set_other_exp_factor(from.other_exp_factor());
    }
    if (from.has_gold_coin_bonus()) {
      set_gold_coin_bonus(from.gold_coin_bonus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bag_has_enough_slots()) {
      set_bag_has_enough_slots(from.bag_has_enough_slots());
    }
    if (from.has_base_exp_bonus()) {
      set_base_exp_bonus(from.base_exp_bonus());
    }
    if (from.has_base_gold_coin_bonus()) {
      set_base_gold_coin_bonus(from.base_gold_coin_bonus());
    }
    if (from.has_cont_win_exp_bonus()) {
      set_cont_win_exp_bonus(from.cont_win_exp_bonus());
    }
    if (from.has_cont_win_gold_bonus()) {
      set_cont_win_gold_bonus(from.cont_win_gold_bonus());
    }
    if (from.has_de_cont_win_exp_bonus()) {
      set_de_cont_win_exp_bonus(from.de_cont_win_exp_bonus());
    }
    if (from.has_de_cont_win_gold_bonus()) {
      set_de_cont_win_gold_bonus(from.de_cont_win_gold_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bonus::CopyFrom(const Bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bonus::IsInitialized() const {
  
  for (int i = 0; i < skill_bonus_size(); i++) {
    if (!this->skill_bonus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drop_item_size(); i++) {
    if (!this->drop_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < quest_drop_item_size(); i++) {
    if (!this->quest_drop_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equipment_size(); i++) {
    if (!this->equipment(i).IsInitialized()) return false;
  }
  return true;
}

void Bonus::Swap(Bonus* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_factor_, other->vip_exp_factor_);
    std::swap(team_exp_factor_, other->team_exp_factor_);
    std::swap(other_exp_factor_, other->other_exp_factor_);
    skill_bonus_.Swap(&other->skill_bonus_);
    std::swap(gold_coin_bonus_, other->gold_coin_bonus_);
    std::swap(bag_has_enough_slots_, other->bag_has_enough_slots_);
    std::swap(base_exp_bonus_, other->base_exp_bonus_);
    std::swap(base_gold_coin_bonus_, other->base_gold_coin_bonus_);
    std::swap(cont_win_exp_bonus_, other->cont_win_exp_bonus_);
    std::swap(cont_win_gold_bonus_, other->cont_win_gold_bonus_);
    std::swap(de_cont_win_exp_bonus_, other->de_cont_win_exp_bonus_);
    std::swap(de_cont_win_gold_bonus_, other->de_cont_win_gold_bonus_);
    drop_item_.Swap(&other->drop_item_);
    quest_drop_item_.Swap(&other->quest_drop_item_);
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bonus_descriptor_;
  metadata.reflection = Bonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightResult::kBattleIdFieldNumber;
const int FightResult::kFighterFieldNumber;
const int FightResult::kWinnerFieldNumber;
const int FightResult::kBonusFieldNumber;
const int FightResult::kCampABattleSkillsFieldNumber;
const int FightResult::kCampBBattleSkillsFieldNumber;
const int FightResult::kRoundDataFieldNumber;
const int FightResult::kNpcNameFieldNumber;
const int FightResult::kNpcLevelFieldNumber;
const int FightResult::kLeftFreeSkipTimesFieldNumber;
const int FightResult::kAutoSkipTimeLimitFieldNumber;
const int FightResult::kCampADeadPersonsFieldNumber;
const int FightResult::kCampBDeadPersonsFieldNumber;
const int FightResult::kBattleGroupIdFieldNumber;
const int FightResult::kCampADeadPlayersFieldNumber;
const int FightResult::kCampBDeadPlayersFieldNumber;
#endif  // !_MSC_VER

FightResult::FightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightResult::InitAsDefaultInstance() {
}

FightResult::FightResult(const FightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightResult::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0;
  winner_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npc_level_ = 0;
  left_free_skip_times_ = 0;
  auto_skip_time_limit_ = 0;
  camp_a_dead_persons_ = 0;
  camp_b_dead_persons_ = 0;
  battle_group_id_ = 0;
  camp_a_dead_players_ = 0;
  camp_b_dead_players_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightResult::~FightResult() {
  SharedDtor();
}

void FightResult::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

void FightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightResult_descriptor_;
}

const FightResult& FightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

FightResult* FightResult::default_instance_ = NULL;

FightResult* FightResult::New() const {
  return new FightResult;
}

void FightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0;
    winner_ = 0;
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
        npc_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    npc_level_ = 0;
    left_free_skip_times_ = 0;
    auto_skip_time_limit_ = 0;
    camp_a_dead_persons_ = 0;
    camp_b_dead_persons_ = 0;
    battle_group_id_ = 0;
    camp_a_dead_players_ = 0;
    camp_b_dead_players_ = 0;
  }
  fighter_.Clear();
  bonus_.Clear();
  camp_a_battle_skills_.Clear();
  camp_b_battle_skills_.Clear();
  round_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Fighter fighter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fighter;
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }
      
      // optional int32 winner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bonus;
        break;
      }
      
      // repeated .protocols.common.Bonus bonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bonus;
        if (input->ExpectTag(34)) goto parse_round_data;
        break;
      }
      
      // repeated bytes round_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_round_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_round_data;
        if (input->ExpectTag(40)) goto parse_battle_id;
        break;
      }
      
      // required int32 battle_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camp_a_battle_skills;
        break;
      }
      
      // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_a_battle_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_a_battle_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camp_a_battle_skills;
        if (input->ExpectTag(58)) goto parse_camp_b_battle_skills;
        break;
      }
      
      // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_b_battle_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_b_battle_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_camp_b_battle_skills;
        if (input->ExpectTag(66)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_left_free_skip_times;
        break;
      }
      
      // optional int32 left_free_skip_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_free_skip_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_free_skip_times_)));
          set_has_left_free_skip_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_auto_skip_time_limit;
        break;
      }
      
      // optional int32 auto_skip_time_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_skip_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_skip_time_limit_)));
          set_has_auto_skip_time_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_npc_level;
        break;
      }
      
      // optional int32 npc_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_level_)));
          set_has_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_camp_a_dead_persons;
        break;
      }
      
      // optional int32 camp_a_dead_persons = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_a_dead_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_a_dead_persons_)));
          set_has_camp_a_dead_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_camp_b_dead_persons;
        break;
      }
      
      // optional int32 camp_b_dead_persons = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_b_dead_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_b_dead_persons_)));
          set_has_camp_b_dead_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_battle_group_id;
        break;
      }
      
      // optional int32 battle_group_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_camp_a_dead_players;
        break;
      }
      
      // optional int32 camp_a_dead_players = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_a_dead_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_a_dead_players_)));
          set_has_camp_a_dead_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_camp_b_dead_players;
        break;
      }
      
      // optional int32 camp_b_dead_players = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_b_dead_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_b_dead_players_)));
          set_has_camp_b_dead_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fighter(i), output);
  }
  
  // optional int32 winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winner(), output);
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bonus(i), output);
  }
  
  // repeated bytes round_data = 4;
  for (int i = 0; i < this->round_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->round_data(i), output);
  }
  
  // required int32 battle_id = 5;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battle_id(), output);
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->camp_a_battle_skills(i), output);
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->camp_b_battle_skills(i), output);
  }
  
  // optional string npc_name = 8;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->npc_name(), output);
  }
  
  // optional int32 left_free_skip_times = 9;
  if (has_left_free_skip_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->left_free_skip_times(), output);
  }
  
  // optional int32 auto_skip_time_limit = 10;
  if (has_auto_skip_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->auto_skip_time_limit(), output);
  }
  
  // optional int32 npc_level = 11;
  if (has_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->npc_level(), output);
  }
  
  // optional int32 camp_a_dead_persons = 12;
  if (has_camp_a_dead_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->camp_a_dead_persons(), output);
  }
  
  // optional int32 camp_b_dead_persons = 13;
  if (has_camp_b_dead_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->camp_b_dead_persons(), output);
  }
  
  // optional int32 battle_group_id = 14;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->battle_group_id(), output);
  }
  
  // optional int32 camp_a_dead_players = 15;
  if (has_camp_a_dead_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->camp_a_dead_players(), output);
  }
  
  // optional int32 camp_b_dead_players = 16;
  if (has_camp_b_dead_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->camp_b_dead_players(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fighter(i), target);
  }
  
  // optional int32 winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winner(), target);
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bonus(i), target);
  }
  
  // repeated bytes round_data = 4;
  for (int i = 0; i < this->round_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->round_data(i), target);
  }
  
  // required int32 battle_id = 5;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battle_id(), target);
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->camp_a_battle_skills(i), target);
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->camp_b_battle_skills(i), target);
  }
  
  // optional string npc_name = 8;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->npc_name(), target);
  }
  
  // optional int32 left_free_skip_times = 9;
  if (has_left_free_skip_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->left_free_skip_times(), target);
  }
  
  // optional int32 auto_skip_time_limit = 10;
  if (has_auto_skip_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->auto_skip_time_limit(), target);
  }
  
  // optional int32 npc_level = 11;
  if (has_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->npc_level(), target);
  }
  
  // optional int32 camp_a_dead_persons = 12;
  if (has_camp_a_dead_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->camp_a_dead_persons(), target);
  }
  
  // optional int32 camp_b_dead_persons = 13;
  if (has_camp_b_dead_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->camp_b_dead_persons(), target);
  }
  
  // optional int32 battle_group_id = 14;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->battle_group_id(), target);
  }
  
  // optional int32 camp_a_dead_players = 15;
  if (has_camp_a_dead_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->camp_a_dead_players(), target);
  }
  
  // optional int32 camp_b_dead_players = 16;
  if (has_camp_b_dead_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->camp_b_dead_players(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battle_id = 5;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }
    
    // optional int32 winner = 2;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }
    
    // optional string npc_name = 8;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 npc_level = 11;
    if (has_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_level());
    }
    
    // optional int32 left_free_skip_times = 9;
    if (has_left_free_skip_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_free_skip_times());
    }
    
    // optional int32 auto_skip_time_limit = 10;
    if (has_auto_skip_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_skip_time_limit());
    }
    
    // optional int32 camp_a_dead_persons = 12;
    if (has_camp_a_dead_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_a_dead_persons());
    }
    
    // optional int32 camp_b_dead_persons = 13;
    if (has_camp_b_dead_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_b_dead_persons());
    }
    
    // optional int32 battle_group_id = 14;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }
    
    // optional int32 camp_a_dead_players = 15;
    if (has_camp_a_dead_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_a_dead_players());
    }
    
    // optional int32 camp_b_dead_players = 16;
    if (has_camp_b_dead_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_b_dead_players());
    }
    
  }
  // repeated .protocols.common.Fighter fighter = 1;
  total_size += 1 * this->fighter_size();
  for (int i = 0; i < this->fighter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter(i));
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  total_size += 1 * this->camp_a_battle_skills_size();
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_a_battle_skills(i));
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  total_size += 1 * this->camp_b_battle_skills_size();
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_b_battle_skills(i));
  }
  
  // repeated bytes round_data = 4;
  total_size += 1 * this->round_data_size();
  for (int i = 0; i < this->round_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->round_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightResult::MergeFrom(const FightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighter_.MergeFrom(from.fighter_);
  bonus_.MergeFrom(from.bonus_);
  camp_a_battle_skills_.MergeFrom(from.camp_a_battle_skills_);
  camp_b_battle_skills_.MergeFrom(from.camp_b_battle_skills_);
  round_data_.MergeFrom(from.round_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_npc_level()) {
      set_npc_level(from.npc_level());
    }
    if (from.has_left_free_skip_times()) {
      set_left_free_skip_times(from.left_free_skip_times());
    }
    if (from.has_auto_skip_time_limit()) {
      set_auto_skip_time_limit(from.auto_skip_time_limit());
    }
    if (from.has_camp_a_dead_persons()) {
      set_camp_a_dead_persons(from.camp_a_dead_persons());
    }
    if (from.has_camp_b_dead_persons()) {
      set_camp_b_dead_persons(from.camp_b_dead_persons());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
    if (from.has_camp_a_dead_players()) {
      set_camp_a_dead_players(from.camp_a_dead_players());
    }
    if (from.has_camp_b_dead_players()) {
      set_camp_b_dead_players(from.camp_b_dead_players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightResult::CopyFrom(const FightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < bonus_size(); i++) {
    if (!this->bonus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camp_a_battle_skills_size(); i++) {
    if (!this->camp_a_battle_skills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camp_b_battle_skills_size(); i++) {
    if (!this->camp_b_battle_skills(i).IsInitialized()) return false;
  }
  return true;
}

void FightResult::Swap(FightResult* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    fighter_.Swap(&other->fighter_);
    std::swap(winner_, other->winner_);
    bonus_.Swap(&other->bonus_);
    camp_a_battle_skills_.Swap(&other->camp_a_battle_skills_);
    camp_b_battle_skills_.Swap(&other->camp_b_battle_skills_);
    round_data_.Swap(&other->round_data_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_level_, other->npc_level_);
    std::swap(left_free_skip_times_, other->left_free_skip_times_);
    std::swap(auto_skip_time_limit_, other->auto_skip_time_limit_);
    std::swap(camp_a_dead_persons_, other->camp_a_dead_persons_);
    std::swap(camp_b_dead_persons_, other->camp_b_dead_persons_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(camp_a_dead_players_, other->camp_a_dead_players_);
    std::swap(camp_b_dead_players_, other->camp_b_dead_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightResult_descriptor_;
  metadata.reflection = FightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightMonsterRequest::kNpcIdFieldNumber;
const int FightMonsterRequest::kBattleNpcIdFieldNumber;
const int FightMonsterRequest::kFightTypeFieldNumber;
const int FightMonsterRequest::kNpcMapXFieldNumber;
const int FightMonsterRequest::kNpcMapYFieldNumber;
#endif  // !_MSC_VER

FightMonsterRequest::FightMonsterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightMonsterRequest::InitAsDefaultInstance() {
}

FightMonsterRequest::FightMonsterRequest(const FightMonsterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightMonsterRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  battle_npc_id_ = 0;
  fight_type_ = 1;
  npc_map_x_ = 0;
  npc_map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightMonsterRequest::~FightMonsterRequest() {
  SharedDtor();
}

void FightMonsterRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightMonsterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightMonsterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightMonsterRequest_descriptor_;
}

const FightMonsterRequest& FightMonsterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

FightMonsterRequest* FightMonsterRequest::default_instance_ = NULL;

FightMonsterRequest* FightMonsterRequest::New() const {
  return new FightMonsterRequest;
}

void FightMonsterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    battle_npc_id_ = 0;
    fight_type_ = 1;
    npc_map_x_ = 0;
    npc_map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightMonsterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_npc_id;
        break;
      }
      
      // optional int32 battle_npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_npc_id_)));
          set_has_battle_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight_type;
        break;
      }
      
      // optional .protocols.common.FIGHT_TYPE fight_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::FIGHT_TYPE_IsValid(value)) {
            set_fight_type(static_cast< protocols::common::FIGHT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_map_x;
        break;
      }
      
      // optional int32 npc_map_x = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_map_x_)));
          set_has_npc_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_npc_map_y;
        break;
      }
      
      // optional int32 npc_map_y = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_map_y_)));
          set_has_npc_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightMonsterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_npc_id(), output);
  }
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 3;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fight_type(), output);
  }
  
  // optional int32 npc_map_x = 4 [default = 0];
  if (has_npc_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_map_x(), output);
  }
  
  // optional int32 npc_map_y = 5 [default = 0];
  if (has_npc_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->npc_map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightMonsterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 battle_npc_id = 2;
  if (has_battle_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_npc_id(), target);
  }
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 3;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fight_type(), target);
  }
  
  // optional int32 npc_map_x = 4 [default = 0];
  if (has_npc_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_map_x(), target);
  }
  
  // optional int32 npc_map_y = 5 [default = 0];
  if (has_npc_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->npc_map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightMonsterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 battle_npc_id = 2;
    if (has_battle_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_npc_id());
    }
    
    // optional .protocols.common.FIGHT_TYPE fight_type = 3;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fight_type());
    }
    
    // optional int32 npc_map_x = 4 [default = 0];
    if (has_npc_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_map_x());
    }
    
    // optional int32 npc_map_y = 5 [default = 0];
    if (has_npc_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightMonsterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightMonsterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightMonsterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightMonsterRequest::MergeFrom(const FightMonsterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_battle_npc_id()) {
      set_battle_npc_id(from.battle_npc_id());
    }
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_npc_map_x()) {
      set_npc_map_x(from.npc_map_x());
    }
    if (from.has_npc_map_y()) {
      set_npc_map_y(from.npc_map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightMonsterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightMonsterRequest::CopyFrom(const FightMonsterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightMonsterRequest::IsInitialized() const {
  
  return true;
}

void FightMonsterRequest::Swap(FightMonsterRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(battle_npc_id_, other->battle_npc_id_);
    std::swap(fight_type_, other->fight_type_);
    std::swap(npc_map_x_, other->npc_map_x_);
    std::swap(npc_map_y_, other->npc_map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightMonsterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightMonsterRequest_descriptor_;
  metadata.reflection = FightMonsterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightMonsterResponse::kErrorCodeFieldNumber;
const int FightMonsterResponse::kFightTypeFieldNumber;
const int FightMonsterResponse::kNpcIdFieldNumber;
const int FightMonsterResponse::kResultFieldNumber;
const int FightMonsterResponse::kAttackerGuidFieldNumber;
const int FightMonsterResponse::kDefenderGuidFieldNumber;
const int FightMonsterResponse::kAttackerFightKeyFieldNumber;
#endif  // !_MSC_VER

FightMonsterResponse::FightMonsterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightMonsterResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::protocols::common::FightResult*>(&::protocols::common::FightResult::default_instance());
}

FightMonsterResponse::FightMonsterResponse(const FightMonsterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightMonsterResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  fight_type_ = 1;
  npc_id_ = 0;
  result_ = NULL;
  attacker_guid_ = GOOGLE_LONGLONG(0);
  defender_guid_ = GOOGLE_LONGLONG(0);
  attacker_fight_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightMonsterResponse::~FightMonsterResponse() {
  SharedDtor();
}

void FightMonsterResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void FightMonsterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightMonsterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightMonsterResponse_descriptor_;
}

const FightMonsterResponse& FightMonsterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

FightMonsterResponse* FightMonsterResponse::default_instance_ = NULL;

FightMonsterResponse* FightMonsterResponse::New() const {
  return new FightMonsterResponse;
}

void FightMonsterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    fight_type_ = 1;
    npc_id_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::protocols::common::FightResult::Clear();
    }
    attacker_guid_ = GOOGLE_LONGLONG(0);
    defender_guid_ = GOOGLE_LONGLONG(0);
    attacker_fight_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightMonsterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_type;
        break;
      }
      
      // optional .protocols.common.FIGHT_TYPE fight_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::FIGHT_TYPE_IsValid(value)) {
            set_fight_type(static_cast< protocols::common::FIGHT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_id;
        break;
      }
      
      // optional int32 npc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }
      
      // optional .protocols.common.FightResult result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attacker_guid;
        break;
      }
      
      // optional int64 attacker_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attacker_guid_)));
          set_has_attacker_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defender_guid;
        break;
      }
      
      // optional int64 defender_guid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defender_guid_)));
          set_has_defender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attacker_fight_key;
        break;
      }
      
      // optional int64 attacker_fight_key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attacker_fight_key_)));
          set_has_attacker_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightMonsterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 2;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fight_type(), output);
  }
  
  // optional int32 npc_id = 3;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npc_id(), output);
  }
  
  // optional .protocols.common.FightResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }
  
  // optional int64 attacker_guid = 5;
  if (has_attacker_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->attacker_guid(), output);
  }
  
  // optional int64 defender_guid = 7;
  if (has_defender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->defender_guid(), output);
  }
  
  // optional int64 attacker_fight_key = 8;
  if (has_attacker_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->attacker_fight_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightMonsterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.FIGHT_TYPE fight_type = 2;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fight_type(), target);
  }
  
  // optional int32 npc_id = 3;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npc_id(), target);
  }
  
  // optional .protocols.common.FightResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }
  
  // optional int64 attacker_guid = 5;
  if (has_attacker_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->attacker_guid(), target);
  }
  
  // optional int64 defender_guid = 7;
  if (has_defender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->defender_guid(), target);
  }
  
  // optional int64 attacker_fight_key = 8;
  if (has_attacker_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->attacker_fight_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightMonsterResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.FIGHT_TYPE fight_type = 2;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fight_type());
    }
    
    // optional int32 npc_id = 3;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional .protocols.common.FightResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional int64 attacker_guid = 5;
    if (has_attacker_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attacker_guid());
    }
    
    // optional int64 defender_guid = 7;
    if (has_defender_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defender_guid());
    }
    
    // optional int64 attacker_fight_key = 8;
    if (has_attacker_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attacker_fight_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightMonsterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightMonsterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightMonsterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightMonsterResponse::MergeFrom(const FightMonsterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_result()) {
      mutable_result()->::protocols::common::FightResult::MergeFrom(from.result());
    }
    if (from.has_attacker_guid()) {
      set_attacker_guid(from.attacker_guid());
    }
    if (from.has_defender_guid()) {
      set_defender_guid(from.defender_guid());
    }
    if (from.has_attacker_fight_key()) {
      set_attacker_fight_key(from.attacker_fight_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightMonsterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightMonsterResponse::CopyFrom(const FightMonsterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightMonsterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void FightMonsterResponse::Swap(FightMonsterResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(fight_type_, other->fight_type_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(result_, other->result_);
    std::swap(attacker_guid_, other->attacker_guid_);
    std::swap(defender_guid_, other->defender_guid_);
    std::swap(attacker_fight_key_, other->attacker_fight_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightMonsterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightMonsterResponse_descriptor_;
  metadata.reflection = FightMonsterResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkipFightRequest::kSkipFightTypeFieldNumber;
#endif  // !_MSC_VER

SkipFightRequest::SkipFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkipFightRequest::InitAsDefaultInstance() {
}

SkipFightRequest::SkipFightRequest(const SkipFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkipFightRequest::SharedCtor() {
  _cached_size_ = 0;
  skip_fight_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkipFightRequest::~SkipFightRequest() {
  SharedDtor();
}

void SkipFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipFightRequest_descriptor_;
}

const SkipFightRequest& SkipFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

SkipFightRequest* SkipFightRequest::default_instance_ = NULL;

SkipFightRequest* SkipFightRequest::New() const {
  return new SkipFightRequest;
}

void SkipFightRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skip_fight_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkipFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::SKIP_FIGHT_TYPE_IsValid(value)) {
            set_skip_fight_type(static_cast< protocols::common::SKIP_FIGHT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkipFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
  if (has_skip_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->skip_fight_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkipFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
  if (has_skip_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->skip_fight_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkipFightRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.SKIP_FIGHT_TYPE skip_fight_type = 1;
    if (has_skip_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skip_fight_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkipFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkipFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipFightRequest::MergeFrom(const SkipFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skip_fight_type()) {
      set_skip_fight_type(from.skip_fight_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkipFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipFightRequest::CopyFrom(const SkipFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipFightRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SkipFightRequest::Swap(SkipFightRequest* other) {
  if (other != this) {
    std::swap(skip_fight_type_, other->skip_fight_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkipFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipFightRequest_descriptor_;
  metadata.reflection = SkipFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkipFightResponse::kErrorCodeFieldNumber;
const int SkipFightResponse::kLeftFreeSkipFightTimesFieldNumber;
#endif  // !_MSC_VER

SkipFightResponse::SkipFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkipFightResponse::InitAsDefaultInstance() {
}

SkipFightResponse::SkipFightResponse(const SkipFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkipFightResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_free_skip_fight_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkipFightResponse::~SkipFightResponse() {
  SharedDtor();
}

void SkipFightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipFightResponse_descriptor_;
}

const SkipFightResponse& SkipFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

SkipFightResponse* SkipFightResponse::default_instance_ = NULL;

SkipFightResponse* SkipFightResponse::New() const {
  return new SkipFightResponse;
}

void SkipFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_free_skip_fight_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkipFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_free_skip_fight_times;
        break;
      }
      
      // optional int32 left_free_skip_fight_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_free_skip_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_free_skip_fight_times_)));
          set_has_left_free_skip_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkipFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 left_free_skip_fight_times = 2;
  if (has_left_free_skip_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_free_skip_fight_times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkipFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 left_free_skip_fight_times = 2;
  if (has_left_free_skip_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_free_skip_fight_times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkipFightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 left_free_skip_fight_times = 2;
    if (has_left_free_skip_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_free_skip_fight_times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkipFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkipFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipFightResponse::MergeFrom(const SkipFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_free_skip_fight_times()) {
      set_left_free_skip_fight_times(from.left_free_skip_fight_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkipFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipFightResponse::CopyFrom(const SkipFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SkipFightResponse::Swap(SkipFightResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_free_skip_fight_times_, other->left_free_skip_fight_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkipFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipFightResponse_descriptor_;
  metadata.reflection = SkipFightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveFightRequest::LeaveFightRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveFightRequest::InitAsDefaultInstance() {
}

LeaveFightRequest::LeaveFightRequest(const LeaveFightRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveFightRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveFightRequest::~LeaveFightRequest() {
  SharedDtor();
}

void LeaveFightRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveFightRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveFightRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveFightRequest_descriptor_;
}

const LeaveFightRequest& LeaveFightRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveFightRequest* LeaveFightRequest::default_instance_ = NULL;

LeaveFightRequest* LeaveFightRequest::New() const {
  return new LeaveFightRequest;
}

void LeaveFightRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveFightRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveFightRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveFightRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveFightRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveFightRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveFightRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveFightRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveFightRequest::MergeFrom(const LeaveFightRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveFightRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveFightRequest::CopyFrom(const LeaveFightRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveFightRequest::IsInitialized() const {
  
  return true;
}

void LeaveFightRequest::Swap(LeaveFightRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveFightRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveFightRequest_descriptor_;
  metadata.reflection = LeaveFightRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveFightResponse::kErrorCodeFieldNumber;
const int LeaveFightResponse::kMapIdFieldNumber;
const int LeaveFightResponse::kMapXFieldNumber;
const int LeaveFightResponse::kMapYFieldNumber;
#endif  // !_MSC_VER

LeaveFightResponse::LeaveFightResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveFightResponse::InitAsDefaultInstance() {
}

LeaveFightResponse::LeaveFightResponse(const LeaveFightResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveFightResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveFightResponse::~LeaveFightResponse() {
  SharedDtor();
}

void LeaveFightResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveFightResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveFightResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveFightResponse_descriptor_;
}

const LeaveFightResponse& LeaveFightResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveFightResponse* LeaveFightResponse::default_instance_ = NULL;

LeaveFightResponse* LeaveFightResponse::New() const {
  return new LeaveFightResponse;
}

void LeaveFightResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveFightResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveFightResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_id(), output);
  }
  
  // optional int32 map_x = 3;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_x(), output);
  }
  
  // optional int32 map_y = 4;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveFightResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_id(), target);
  }
  
  // optional int32 map_x = 3;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_x(), target);
  }
  
  // optional int32 map_y = 4;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveFightResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 3;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 4;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveFightResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveFightResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveFightResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveFightResponse::MergeFrom(const LeaveFightResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveFightResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveFightResponse::CopyFrom(const LeaveFightResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveFightResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveFightResponse::Swap(LeaveFightResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveFightResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveFightResponse_descriptor_;
  metadata.reflection = LeaveFightResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFightToWorldRequest::kFightKeyFieldNumber;
const int SendFightToWorldRequest::kIsNeedBroadcastFieldNumber;
#endif  // !_MSC_VER

SendFightToWorldRequest::SendFightToWorldRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendFightToWorldRequest::InitAsDefaultInstance() {
}

SendFightToWorldRequest::SendFightToWorldRequest(const SendFightToWorldRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendFightToWorldRequest::SharedCtor() {
  _cached_size_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  is_need_broadcast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFightToWorldRequest::~SendFightToWorldRequest() {
  SharedDtor();
}

void SendFightToWorldRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendFightToWorldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFightToWorldRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFightToWorldRequest_descriptor_;
}

const SendFightToWorldRequest& SendFightToWorldRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

SendFightToWorldRequest* SendFightToWorldRequest::default_instance_ = NULL;

SendFightToWorldRequest* SendFightToWorldRequest::New() const {
  return new SendFightToWorldRequest;
}

void SendFightToWorldRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_key_ = GOOGLE_LONGLONG(0);
    is_need_broadcast_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFightToWorldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 fight_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_need_broadcast;
        break;
      }
      
      // optional int32 is_need_broadcast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_need_broadcast_)));
          set_has_is_need_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendFightToWorldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fight_key(), output);
  }
  
  // optional int32 is_need_broadcast = 2;
  if (has_is_need_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_need_broadcast(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendFightToWorldRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fight_key(), target);
  }
  
  // optional int32 is_need_broadcast = 2;
  if (has_is_need_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_need_broadcast(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendFightToWorldRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 fight_key = 1;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
    // optional int32 is_need_broadcast = 2;
    if (has_is_need_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_need_broadcast());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFightToWorldRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFightToWorldRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFightToWorldRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFightToWorldRequest::MergeFrom(const SendFightToWorldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
    if (from.has_is_need_broadcast()) {
      set_is_need_broadcast(from.is_need_broadcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFightToWorldRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFightToWorldRequest::CopyFrom(const SendFightToWorldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFightToWorldRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SendFightToWorldRequest::Swap(SendFightToWorldRequest* other) {
  if (other != this) {
    std::swap(fight_key_, other->fight_key_);
    std::swap(is_need_broadcast_, other->is_need_broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFightToWorldRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFightToWorldRequest_descriptor_;
  metadata.reflection = SendFightToWorldRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFightToWorldResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

SendFightToWorldResponse::SendFightToWorldResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendFightToWorldResponse::InitAsDefaultInstance() {
}

SendFightToWorldResponse::SendFightToWorldResponse(const SendFightToWorldResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendFightToWorldResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFightToWorldResponse::~SendFightToWorldResponse() {
  SharedDtor();
}

void SendFightToWorldResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendFightToWorldResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFightToWorldResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFightToWorldResponse_descriptor_;
}

const SendFightToWorldResponse& SendFightToWorldResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

SendFightToWorldResponse* SendFightToWorldResponse::default_instance_ = NULL;

SendFightToWorldResponse* SendFightToWorldResponse::New() const {
  return new SendFightToWorldResponse;
}

void SendFightToWorldResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFightToWorldResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendFightToWorldResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendFightToWorldResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendFightToWorldResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFightToWorldResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFightToWorldResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFightToWorldResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFightToWorldResponse::MergeFrom(const SendFightToWorldResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFightToWorldResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFightToWorldResponse::CopyFrom(const SendFightToWorldResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFightToWorldResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SendFightToWorldResponse::Swap(SendFightToWorldResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFightToWorldResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFightToWorldResponse_descriptor_;
  metadata.reflection = SendFightToWorldResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFightDataRequest::kFightKeyFieldNumber;
#endif  // !_MSC_VER

GetFightDataRequest::GetFightDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFightDataRequest::InitAsDefaultInstance() {
}

GetFightDataRequest::GetFightDataRequest(const GetFightDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFightDataRequest::SharedCtor() {
  _cached_size_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFightDataRequest::~GetFightDataRequest() {
  SharedDtor();
}

void GetFightDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFightDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFightDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFightDataRequest_descriptor_;
}

const GetFightDataRequest& GetFightDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetFightDataRequest* GetFightDataRequest::default_instance_ = NULL;

GetFightDataRequest* GetFightDataRequest::New() const {
  return new GetFightDataRequest;
}

void GetFightDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFightDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 fight_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFightDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fight_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFightDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fight_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFightDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 fight_key = 1;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFightDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFightDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFightDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFightDataRequest::MergeFrom(const GetFightDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFightDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFightDataRequest::CopyFrom(const GetFightDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFightDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFightDataRequest::Swap(GetFightDataRequest* other) {
  if (other != this) {
    std::swap(fight_key_, other->fight_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFightDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFightDataRequest_descriptor_;
  metadata.reflection = GetFightDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFightDataResponse::kErrorCodeFieldNumber;
const int GetFightDataResponse::kFightKeyFieldNumber;
const int GetFightDataResponse::kFightDataFieldNumber;
#endif  // !_MSC_VER

GetFightDataResponse::GetFightDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFightDataResponse::InitAsDefaultInstance() {
  fight_data_ = const_cast< ::protocols::common::FightMonsterResponse*>(&::protocols::common::FightMonsterResponse::default_instance());
}

GetFightDataResponse::GetFightDataResponse(const GetFightDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFightDataResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  fight_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFightDataResponse::~GetFightDataResponse() {
  SharedDtor();
}

void GetFightDataResponse::SharedDtor() {
  if (this != default_instance_) {
    delete fight_data_;
  }
}

void GetFightDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFightDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFightDataResponse_descriptor_;
}

const GetFightDataResponse& GetFightDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetFightDataResponse* GetFightDataResponse::default_instance_ = NULL;

GetFightDataResponse* GetFightDataResponse::New() const {
  return new GetFightDataResponse;
}

void GetFightDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    fight_key_ = GOOGLE_LONGLONG(0);
    if (has_fight_data()) {
      if (fight_data_ != NULL) fight_data_->::protocols::common::FightMonsterResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFightDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_key;
        break;
      }
      
      // optional int64 fight_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight_data;
        break;
      }
      
      // optional .protocols.common.FightMonsterResponse fight_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFightDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int64 fight_key = 2;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fight_key(), output);
  }
  
  // optional .protocols.common.FightMonsterResponse fight_data = 3;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFightDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int64 fight_key = 2;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fight_key(), target);
  }
  
  // optional .protocols.common.FightMonsterResponse fight_data = 3;
  if (has_fight_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFightDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int64 fight_key = 2;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
    // optional .protocols.common.FightMonsterResponse fight_data = 3;
    if (has_fight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFightDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFightDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFightDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFightDataResponse::MergeFrom(const GetFightDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
    if (from.has_fight_data()) {
      mutable_fight_data()->::protocols::common::FightMonsterResponse::MergeFrom(from.fight_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFightDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFightDataResponse::CopyFrom(const GetFightDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFightDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_fight_data()) {
    if (!this->fight_data().IsInitialized()) return false;
  }
  return true;
}

void GetFightDataResponse::Swap(GetFightDataResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(fight_key_, other->fight_key_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFightDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFightDataResponse_descriptor_;
  metadata.reflection = GetFightDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlienBossActNotify::kNotifyTypeFieldNumber;
const int AlienBossActNotify::kTimeLeftFieldNumber;
const int AlienBossActNotify::kPlayerCountFieldNumber;
const int AlienBossActNotify::kStatusFieldNumber;
const int AlienBossActNotify::kDamageIncreasePercentFieldNumber;
const int AlienBossActNotify::kMaxHpFieldNumber;
const int AlienBossActNotify::kHpFieldNumber;
const int AlienBossActNotify::kBossNameFieldNumber;
const int AlienBossActNotify::kBossLevelFieldNumber;
#endif  // !_MSC_VER

AlienBossActNotify::AlienBossActNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlienBossActNotify::InitAsDefaultInstance() {
}

AlienBossActNotify::AlienBossActNotify(const AlienBossActNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlienBossActNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_type_ = 0;
  time_left_ = 0;
  player_count_ = 0;
  status_ = 0;
  damage_increase_percent_ = 0;
  max_hp_ = 0;
  hp_ = 0;
  boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boss_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlienBossActNotify::~AlienBossActNotify() {
  SharedDtor();
}

void AlienBossActNotify::SharedDtor() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_name_;
  }
  if (this != default_instance_) {
  }
}

void AlienBossActNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlienBossActNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienBossActNotify_descriptor_;
}

const AlienBossActNotify& AlienBossActNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AlienBossActNotify* AlienBossActNotify::default_instance_ = NULL;

AlienBossActNotify* AlienBossActNotify::New() const {
  return new AlienBossActNotify;
}

void AlienBossActNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notify_type_ = 0;
    time_left_ = 0;
    player_count_ = 0;
    status_ = 0;
    damage_increase_percent_ = 0;
    max_hp_ = 0;
    hp_ = 0;
    if (has_boss_name()) {
      if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
        boss_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boss_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlienBossActNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 notify_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_left;
        break;
      }
      
      // optional int32 time_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_)));
          set_has_time_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }
      
      // optional int32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage_increase_percent;
        break;
      }
      
      // optional int32 damage_increase_percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_increase_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_increase_percent_)));
          set_has_damage_increase_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_hp;
        break;
      }
      
      // optional int32 max_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boss_name;
        break;
      }
      
      // optional string boss_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boss_name().data(), this->boss_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boss_level;
        break;
      }
      
      // optional int32 boss_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_level_)));
          set_has_boss_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlienBossActNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->notify_type(), output);
  }
  
  // optional int32 time_left = 2;
  if (has_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_left(), output);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_count(), output);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }
  
  // optional int32 damage_increase_percent = 5;
  if (has_damage_increase_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage_increase_percent(), output);
  }
  
  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_hp(), output);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->boss_name(), output);
  }
  
  // optional int32 boss_level = 9;
  if (has_boss_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->boss_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlienBossActNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 notify_type = 1;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->notify_type(), target);
  }
  
  // optional int32 time_left = 2;
  if (has_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_left(), target);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_count(), target);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }
  
  // optional int32 damage_increase_percent = 5;
  if (has_damage_increase_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage_increase_percent(), target);
  }
  
  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_hp(), target);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->boss_name(), target);
  }
  
  // optional int32 boss_level = 9;
  if (has_boss_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->boss_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlienBossActNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_type());
    }
    
    // optional int32 time_left = 2;
    if (has_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left());
    }
    
    // optional int32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }
    
    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 damage_increase_percent = 5;
    if (has_damage_increase_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_increase_percent());
    }
    
    // optional int32 max_hp = 6;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }
    
    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional string boss_name = 8;
    if (has_boss_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 boss_level = 9;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlienBossActNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlienBossActNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlienBossActNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlienBossActNotify::MergeFrom(const AlienBossActNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_time_left()) {
      set_time_left(from.time_left());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_damage_increase_percent()) {
      set_damage_increase_percent(from.damage_increase_percent());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boss_level()) {
      set_boss_level(from.boss_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlienBossActNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlienBossActNotify::CopyFrom(const AlienBossActNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlienBossActNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AlienBossActNotify::Swap(AlienBossActNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(time_left_, other->time_left_);
    std::swap(player_count_, other->player_count_);
    std::swap(status_, other->status_);
    std::swap(damage_increase_percent_, other->damage_increase_percent_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(hp_, other->hp_);
    std::swap(boss_name_, other->boss_name_);
    std::swap(boss_level_, other->boss_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlienBossActNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlienBossActNotify_descriptor_;
  metadata.reflection = AlienBossActNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterAlienBossMapRequest::EnterAlienBossMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterAlienBossMapRequest::InitAsDefaultInstance() {
}

EnterAlienBossMapRequest::EnterAlienBossMapRequest(const EnterAlienBossMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterAlienBossMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterAlienBossMapRequest::~EnterAlienBossMapRequest() {
  SharedDtor();
}

void EnterAlienBossMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterAlienBossMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterAlienBossMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterAlienBossMapRequest_descriptor_;
}

const EnterAlienBossMapRequest& EnterAlienBossMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterAlienBossMapRequest* EnterAlienBossMapRequest::default_instance_ = NULL;

EnterAlienBossMapRequest* EnterAlienBossMapRequest::New() const {
  return new EnterAlienBossMapRequest;
}

void EnterAlienBossMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterAlienBossMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EnterAlienBossMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterAlienBossMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterAlienBossMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterAlienBossMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterAlienBossMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterAlienBossMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterAlienBossMapRequest::MergeFrom(const EnterAlienBossMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterAlienBossMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterAlienBossMapRequest::CopyFrom(const EnterAlienBossMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterAlienBossMapRequest::IsInitialized() const {
  
  return true;
}

void EnterAlienBossMapRequest::Swap(EnterAlienBossMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterAlienBossMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterAlienBossMapRequest_descriptor_;
  metadata.reflection = EnterAlienBossMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterAlienBossMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EnterAlienBossMapResponse::EnterAlienBossMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterAlienBossMapResponse::InitAsDefaultInstance() {
}

EnterAlienBossMapResponse::EnterAlienBossMapResponse(const EnterAlienBossMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterAlienBossMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterAlienBossMapResponse::~EnterAlienBossMapResponse() {
  SharedDtor();
}

void EnterAlienBossMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterAlienBossMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterAlienBossMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterAlienBossMapResponse_descriptor_;
}

const EnterAlienBossMapResponse& EnterAlienBossMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterAlienBossMapResponse* EnterAlienBossMapResponse::default_instance_ = NULL;

EnterAlienBossMapResponse* EnterAlienBossMapResponse::New() const {
  return new EnterAlienBossMapResponse;
}

void EnterAlienBossMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterAlienBossMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterAlienBossMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterAlienBossMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterAlienBossMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterAlienBossMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterAlienBossMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterAlienBossMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterAlienBossMapResponse::MergeFrom(const EnterAlienBossMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterAlienBossMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterAlienBossMapResponse::CopyFrom(const EnterAlienBossMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterAlienBossMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterAlienBossMapResponse::Swap(EnterAlienBossMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterAlienBossMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterAlienBossMapResponse_descriptor_;
  metadata.reflection = EnterAlienBossMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveAlienBossMapRequest::LeaveAlienBossMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveAlienBossMapRequest::InitAsDefaultInstance() {
}

LeaveAlienBossMapRequest::LeaveAlienBossMapRequest(const LeaveAlienBossMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveAlienBossMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveAlienBossMapRequest::~LeaveAlienBossMapRequest() {
  SharedDtor();
}

void LeaveAlienBossMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveAlienBossMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveAlienBossMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveAlienBossMapRequest_descriptor_;
}

const LeaveAlienBossMapRequest& LeaveAlienBossMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveAlienBossMapRequest* LeaveAlienBossMapRequest::default_instance_ = NULL;

LeaveAlienBossMapRequest* LeaveAlienBossMapRequest::New() const {
  return new LeaveAlienBossMapRequest;
}

void LeaveAlienBossMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveAlienBossMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveAlienBossMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveAlienBossMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveAlienBossMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveAlienBossMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveAlienBossMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveAlienBossMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveAlienBossMapRequest::MergeFrom(const LeaveAlienBossMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveAlienBossMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveAlienBossMapRequest::CopyFrom(const LeaveAlienBossMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveAlienBossMapRequest::IsInitialized() const {
  
  return true;
}

void LeaveAlienBossMapRequest::Swap(LeaveAlienBossMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveAlienBossMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveAlienBossMapRequest_descriptor_;
  metadata.reflection = LeaveAlienBossMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveAlienBossMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LeaveAlienBossMapResponse::LeaveAlienBossMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveAlienBossMapResponse::InitAsDefaultInstance() {
}

LeaveAlienBossMapResponse::LeaveAlienBossMapResponse(const LeaveAlienBossMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveAlienBossMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveAlienBossMapResponse::~LeaveAlienBossMapResponse() {
  SharedDtor();
}

void LeaveAlienBossMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveAlienBossMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveAlienBossMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveAlienBossMapResponse_descriptor_;
}

const LeaveAlienBossMapResponse& LeaveAlienBossMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveAlienBossMapResponse* LeaveAlienBossMapResponse::default_instance_ = NULL;

LeaveAlienBossMapResponse* LeaveAlienBossMapResponse::New() const {
  return new LeaveAlienBossMapResponse;
}

void LeaveAlienBossMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveAlienBossMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveAlienBossMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveAlienBossMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveAlienBossMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveAlienBossMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveAlienBossMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveAlienBossMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveAlienBossMapResponse::MergeFrom(const LeaveAlienBossMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveAlienBossMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveAlienBossMapResponse::CopyFrom(const LeaveAlienBossMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveAlienBossMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveAlienBossMapResponse::Swap(LeaveAlienBossMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveAlienBossMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveAlienBossMapResponse_descriptor_;
  metadata.reflection = LeaveAlienBossMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBossHurt::kRoleIdFieldNumber;
const int PlayerBossHurt::kRankFieldNumber;
const int PlayerBossHurt::kNameFieldNumber;
const int PlayerBossHurt::kDamageFieldNumber;
const int PlayerBossHurt::kDamagePercentFieldNumber;
const int PlayerBossHurt::kCoinBonusFieldNumber;
const int PlayerBossHurt::kExpBonusFieldNumber;
const int PlayerBossHurt::kTreasureBoxIdFieldNumber;
const int PlayerBossHurt::kTreasureBoxCountFieldNumber;
#endif  // !_MSC_VER

PlayerBossHurt::PlayerBossHurt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBossHurt::InitAsDefaultInstance() {
}

PlayerBossHurt::PlayerBossHurt(const PlayerBossHurt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBossHurt::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damage_ = 0;
  damage_percent_ = 0;
  coin_bonus_ = 0;
  exp_bonus_ = 0;
  treasure_box_id_ = 0;
  treasure_box_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBossHurt::~PlayerBossHurt() {
  SharedDtor();
}

void PlayerBossHurt::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerBossHurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBossHurt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBossHurt_descriptor_;
}

const PlayerBossHurt& PlayerBossHurt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PlayerBossHurt* PlayerBossHurt::default_instance_ = NULL;

PlayerBossHurt* PlayerBossHurt::New() const {
  return new PlayerBossHurt;
}

void PlayerBossHurt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    damage_ = 0;
    damage_percent_ = 0;
    coin_bonus_ = 0;
    exp_bonus_ = 0;
    treasure_box_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    treasure_box_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerBossHurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage_percent;
        break;
      }
      
      // optional int32 damage_percent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_percent_)));
          set_has_damage_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coin_bonus;
        break;
      }
      
      // optional int32 coin_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_bonus_)));
          set_has_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp_bonus;
        break;
      }
      
      // optional int32 exp_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_treasure_box_count;
        break;
      }
      
      // optional int32 treasure_box_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_box_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_box_count_)));
          set_has_treasure_box_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_treasure_box_id;
        break;
      }
      
      // optional int32 treasure_box_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_box_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_box_id_)));
          set_has_treasure_box_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerBossHurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }
  
  // optional int32 damage_percent = 4;
  if (has_damage_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage_percent(), output);
  }
  
  // optional int32 coin_bonus = 5;
  if (has_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->coin_bonus(), output);
  }
  
  // optional int32 exp_bonus = 6;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp_bonus(), output);
  }
  
  // optional int32 treasure_box_count = 7;
  if (has_treasure_box_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->treasure_box_count(), output);
  }
  
  // optional int32 treasure_box_id = 8;
  if (has_treasure_box_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->treasure_box_id(), output);
  }
  
  // optional int32 role_id = 9;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBossHurt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }
  
  // optional int32 damage_percent = 4;
  if (has_damage_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage_percent(), target);
  }
  
  // optional int32 coin_bonus = 5;
  if (has_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->coin_bonus(), target);
  }
  
  // optional int32 exp_bonus = 6;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp_bonus(), target);
  }
  
  // optional int32 treasure_box_count = 7;
  if (has_treasure_box_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->treasure_box_count(), target);
  }
  
  // optional int32 treasure_box_id = 8;
  if (has_treasure_box_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->treasure_box_id(), target);
  }
  
  // optional int32 role_id = 9;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBossHurt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 9;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 damage_percent = 4;
    if (has_damage_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_percent());
    }
    
    // optional int32 coin_bonus = 5;
    if (has_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin_bonus());
    }
    
    // optional int32 exp_bonus = 6;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
    // optional int32 treasure_box_id = 8;
    if (has_treasure_box_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_box_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 treasure_box_count = 7;
    if (has_treasure_box_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_box_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBossHurt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBossHurt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBossHurt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerBossHurt::MergeFrom(const PlayerBossHurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_damage_percent()) {
      set_damage_percent(from.damage_percent());
    }
    if (from.has_coin_bonus()) {
      set_coin_bonus(from.coin_bonus());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
    if (from.has_treasure_box_id()) {
      set_treasure_box_id(from.treasure_box_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_treasure_box_count()) {
      set_treasure_box_count(from.treasure_box_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerBossHurt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerBossHurt::CopyFrom(const PlayerBossHurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerBossHurt::IsInitialized() const {
  
  return true;
}

void PlayerBossHurt::Swap(PlayerBossHurt* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(damage_, other->damage_);
    std::swap(damage_percent_, other->damage_percent_);
    std::swap(coin_bonus_, other->coin_bonus_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(treasure_box_id_, other->treasure_box_id_);
    std::swap(treasure_box_count_, other->treasure_box_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerBossHurt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBossHurt_descriptor_;
  metadata.reflection = PlayerBossHurt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlienBossHurtRank::kOwnHurtFieldNumber;
const int AlienBossHurtRank::kHurtRankFieldNumber;
#endif  // !_MSC_VER

AlienBossHurtRank::AlienBossHurtRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlienBossHurtRank::InitAsDefaultInstance() {
  own_hurt_ = const_cast< ::protocols::common::PlayerBossHurt*>(&::protocols::common::PlayerBossHurt::default_instance());
}

AlienBossHurtRank::AlienBossHurtRank(const AlienBossHurtRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlienBossHurtRank::SharedCtor() {
  _cached_size_ = 0;
  own_hurt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlienBossHurtRank::~AlienBossHurtRank() {
  SharedDtor();
}

void AlienBossHurtRank::SharedDtor() {
  if (this != default_instance_) {
    delete own_hurt_;
  }
}

void AlienBossHurtRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlienBossHurtRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienBossHurtRank_descriptor_;
}

const AlienBossHurtRank& AlienBossHurtRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AlienBossHurtRank* AlienBossHurtRank::default_instance_ = NULL;

AlienBossHurtRank* AlienBossHurtRank::New() const {
  return new AlienBossHurtRank;
}

void AlienBossHurtRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_own_hurt()) {
      if (own_hurt_ != NULL) own_hurt_->::protocols::common::PlayerBossHurt::Clear();
    }
  }
  hurt_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlienBossHurtRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.PlayerBossHurt own_hurt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_own_hurt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hurt_rank;
        break;
      }
      
      // repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurt_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurt_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hurt_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlienBossHurtRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.PlayerBossHurt own_hurt = 1;
  if (has_own_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->own_hurt(), output);
  }
  
  // repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
  for (int i = 0; i < this->hurt_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hurt_rank(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlienBossHurtRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.PlayerBossHurt own_hurt = 1;
  if (has_own_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->own_hurt(), target);
  }
  
  // repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
  for (int i = 0; i < this->hurt_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hurt_rank(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlienBossHurtRank::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.PlayerBossHurt own_hurt = 1;
    if (has_own_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->own_hurt());
    }
    
  }
  // repeated .protocols.common.PlayerBossHurt hurt_rank = 2;
  total_size += 1 * this->hurt_rank_size();
  for (int i = 0; i < this->hurt_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurt_rank(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlienBossHurtRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlienBossHurtRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlienBossHurtRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlienBossHurtRank::MergeFrom(const AlienBossHurtRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  hurt_rank_.MergeFrom(from.hurt_rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_own_hurt()) {
      mutable_own_hurt()->::protocols::common::PlayerBossHurt::MergeFrom(from.own_hurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlienBossHurtRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlienBossHurtRank::CopyFrom(const AlienBossHurtRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlienBossHurtRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AlienBossHurtRank::Swap(AlienBossHurtRank* other) {
  if (other != this) {
    std::swap(own_hurt_, other->own_hurt_);
    hurt_rank_.Swap(&other->hurt_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlienBossHurtRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlienBossHurtRank_descriptor_;
  metadata.reflection = AlienBossHurtRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlienBossRewardsNotify::kIsBossDeadFieldNumber;
const int AlienBossRewardsNotify::kRewardsTypeFieldNumber;
const int AlienBossRewardsNotify::kRewardFieldNumber;
#endif  // !_MSC_VER

AlienBossRewardsNotify::AlienBossRewardsNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlienBossRewardsNotify::InitAsDefaultInstance() {
}

AlienBossRewardsNotify::AlienBossRewardsNotify(const AlienBossRewardsNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlienBossRewardsNotify::SharedCtor() {
  _cached_size_ = 0;
  is_boss_dead_ = 0;
  rewards_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlienBossRewardsNotify::~AlienBossRewardsNotify() {
  SharedDtor();
}

void AlienBossRewardsNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlienBossRewardsNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlienBossRewardsNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlienBossRewardsNotify_descriptor_;
}

const AlienBossRewardsNotify& AlienBossRewardsNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AlienBossRewardsNotify* AlienBossRewardsNotify::default_instance_ = NULL;

AlienBossRewardsNotify* AlienBossRewardsNotify::New() const {
  return new AlienBossRewardsNotify;
}

void AlienBossRewardsNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_boss_dead_ = 0;
    rewards_type_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlienBossRewardsNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rewards_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewards_type_)));
          set_has_rewards_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // repeated .protocols.common.PlayerBossHurt reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_is_boss_dead;
        break;
      }
      
      // optional int32 is_boss_dead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_boss_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_boss_dead_)));
          set_has_is_boss_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlienBossRewardsNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rewards_type = 1;
  if (has_rewards_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewards_type(), output);
  }
  
  // repeated .protocols.common.PlayerBossHurt reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }
  
  // optional int32 is_boss_dead = 3;
  if (has_is_boss_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_boss_dead(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlienBossRewardsNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rewards_type = 1;
  if (has_rewards_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewards_type(), target);
  }
  
  // repeated .protocols.common.PlayerBossHurt reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }
  
  // optional int32 is_boss_dead = 3;
  if (has_is_boss_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_boss_dead(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlienBossRewardsNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_boss_dead = 3;
    if (has_is_boss_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_boss_dead());
    }
    
    // required int32 rewards_type = 1;
    if (has_rewards_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewards_type());
    }
    
  }
  // repeated .protocols.common.PlayerBossHurt reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlienBossRewardsNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlienBossRewardsNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlienBossRewardsNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlienBossRewardsNotify::MergeFrom(const AlienBossRewardsNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_boss_dead()) {
      set_is_boss_dead(from.is_boss_dead());
    }
    if (from.has_rewards_type()) {
      set_rewards_type(from.rewards_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlienBossRewardsNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlienBossRewardsNotify::CopyFrom(const AlienBossRewardsNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlienBossRewardsNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void AlienBossRewardsNotify::Swap(AlienBossRewardsNotify* other) {
  if (other != this) {
    std::swap(is_boss_dead_, other->is_boss_dead_);
    std::swap(rewards_type_, other->rewards_type_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlienBossRewardsNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlienBossRewardsNotify_descriptor_;
  metadata.reflection = AlienBossRewardsNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncourageBuffRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

EncourageBuffRequest::EncourageBuffRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncourageBuffRequest::InitAsDefaultInstance() {
}

EncourageBuffRequest::EncourageBuffRequest(const EncourageBuffRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncourageBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncourageBuffRequest::~EncourageBuffRequest() {
  SharedDtor();
}

void EncourageBuffRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncourageBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncourageBuffRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncourageBuffRequest_descriptor_;
}

const EncourageBuffRequest& EncourageBuffRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EncourageBuffRequest* EncourageBuffRequest::default_instance_ = NULL;

EncourageBuffRequest* EncourageBuffRequest::New() const {
  return new EncourageBuffRequest;
}

void EncourageBuffRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncourageBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncourageBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncourageBuffRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncourageBuffRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncourageBuffRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncourageBuffRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncourageBuffRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncourageBuffRequest::MergeFrom(const EncourageBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncourageBuffRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncourageBuffRequest::CopyFrom(const EncourageBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncourageBuffRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EncourageBuffRequest::Swap(EncourageBuffRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncourageBuffRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncourageBuffRequest_descriptor_;
  metadata.reflection = EncourageBuffRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncourageBuffResponse::kErrorCodeFieldNumber;
const int EncourageBuffResponse::kBuffValueFieldNumber;
#endif  // !_MSC_VER

EncourageBuffResponse::EncourageBuffResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncourageBuffResponse::InitAsDefaultInstance() {
}

EncourageBuffResponse::EncourageBuffResponse(const EncourageBuffResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncourageBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  buff_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncourageBuffResponse::~EncourageBuffResponse() {
  SharedDtor();
}

void EncourageBuffResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncourageBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncourageBuffResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncourageBuffResponse_descriptor_;
}

const EncourageBuffResponse& EncourageBuffResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EncourageBuffResponse* EncourageBuffResponse::default_instance_ = NULL;

EncourageBuffResponse* EncourageBuffResponse::New() const {
  return new EncourageBuffResponse;
}

void EncourageBuffResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    buff_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncourageBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_value;
        break;
      }
      
      // optional int32 buff_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_value_)));
          set_has_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncourageBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncourageBuffResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncourageBuffResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 buff_value = 2;
    if (has_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncourageBuffResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncourageBuffResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncourageBuffResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncourageBuffResponse::MergeFrom(const EncourageBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_buff_value()) {
      set_buff_value(from.buff_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncourageBuffResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncourageBuffResponse::CopyFrom(const EncourageBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncourageBuffResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EncourageBuffResponse::Swap(EncourageBuffResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(buff_value_, other->buff_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncourageBuffResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncourageBuffResponse_descriptor_;
  metadata.reflection = EncourageBuffResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuickRespawnRequest::QuickRespawnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickRespawnRequest::InitAsDefaultInstance() {
}

QuickRespawnRequest::QuickRespawnRequest(const QuickRespawnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickRespawnRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickRespawnRequest::~QuickRespawnRequest() {
  SharedDtor();
}

void QuickRespawnRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickRespawnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickRespawnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickRespawnRequest_descriptor_;
}

const QuickRespawnRequest& QuickRespawnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

QuickRespawnRequest* QuickRespawnRequest::default_instance_ = NULL;

QuickRespawnRequest* QuickRespawnRequest::New() const {
  return new QuickRespawnRequest;
}

void QuickRespawnRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickRespawnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuickRespawnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickRespawnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickRespawnRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickRespawnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickRespawnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickRespawnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickRespawnRequest::MergeFrom(const QuickRespawnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickRespawnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickRespawnRequest::CopyFrom(const QuickRespawnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickRespawnRequest::IsInitialized() const {
  
  return true;
}

void QuickRespawnRequest::Swap(QuickRespawnRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickRespawnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickRespawnRequest_descriptor_;
  metadata.reflection = QuickRespawnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickRespawnResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

QuickRespawnResponse::QuickRespawnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickRespawnResponse::InitAsDefaultInstance() {
}

QuickRespawnResponse::QuickRespawnResponse(const QuickRespawnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickRespawnResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickRespawnResponse::~QuickRespawnResponse() {
  SharedDtor();
}

void QuickRespawnResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickRespawnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickRespawnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickRespawnResponse_descriptor_;
}

const QuickRespawnResponse& QuickRespawnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

QuickRespawnResponse* QuickRespawnResponse::default_instance_ = NULL;

QuickRespawnResponse* QuickRespawnResponse::New() const {
  return new QuickRespawnResponse;
}

void QuickRespawnResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickRespawnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickRespawnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickRespawnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickRespawnResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickRespawnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickRespawnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickRespawnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickRespawnResponse::MergeFrom(const QuickRespawnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickRespawnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickRespawnResponse::CopyFrom(const QuickRespawnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickRespawnResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QuickRespawnResponse::Swap(QuickRespawnResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickRespawnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickRespawnResponse_descriptor_;
  metadata.reflection = QuickRespawnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAlienBossBuffNotify::kBuffValueFieldNumber;
#endif  // !_MSC_VER

UpdateAlienBossBuffNotify::UpdateAlienBossBuffNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAlienBossBuffNotify::InitAsDefaultInstance() {
}

UpdateAlienBossBuffNotify::UpdateAlienBossBuffNotify(const UpdateAlienBossBuffNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAlienBossBuffNotify::SharedCtor() {
  _cached_size_ = 0;
  buff_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAlienBossBuffNotify::~UpdateAlienBossBuffNotify() {
  SharedDtor();
}

void UpdateAlienBossBuffNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateAlienBossBuffNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAlienBossBuffNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAlienBossBuffNotify_descriptor_;
}

const UpdateAlienBossBuffNotify& UpdateAlienBossBuffNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

UpdateAlienBossBuffNotify* UpdateAlienBossBuffNotify::default_instance_ = NULL;

UpdateAlienBossBuffNotify* UpdateAlienBossBuffNotify::New() const {
  return new UpdateAlienBossBuffNotify;
}

void UpdateAlienBossBuffNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAlienBossBuffNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 buff_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_value_)));
          set_has_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAlienBossBuffNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 buff_value = 1;
  if (has_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAlienBossBuffNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 buff_value = 1;
  if (has_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAlienBossBuffNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 buff_value = 1;
    if (has_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAlienBossBuffNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAlienBossBuffNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAlienBossBuffNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAlienBossBuffNotify::MergeFrom(const UpdateAlienBossBuffNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_value()) {
      set_buff_value(from.buff_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAlienBossBuffNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAlienBossBuffNotify::CopyFrom(const UpdateAlienBossBuffNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAlienBossBuffNotify::IsInitialized() const {
  
  return true;
}

void UpdateAlienBossBuffNotify::Swap(UpdateAlienBossBuffNotify* other) {
  if (other != this) {
    std::swap(buff_value_, other->buff_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAlienBossBuffNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAlienBossBuffNotify_descriptor_;
  metadata.reflection = UpdateAlienBossBuffNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetBossMapInfoRequest::GetBossMapInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBossMapInfoRequest::InitAsDefaultInstance() {
}

GetBossMapInfoRequest::GetBossMapInfoRequest(const GetBossMapInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBossMapInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBossMapInfoRequest::~GetBossMapInfoRequest() {
  SharedDtor();
}

void GetBossMapInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBossMapInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBossMapInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBossMapInfoRequest_descriptor_;
}

const GetBossMapInfoRequest& GetBossMapInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetBossMapInfoRequest* GetBossMapInfoRequest::default_instance_ = NULL;

GetBossMapInfoRequest* GetBossMapInfoRequest::New() const {
  return new GetBossMapInfoRequest;
}

void GetBossMapInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBossMapInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetBossMapInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBossMapInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBossMapInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBossMapInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBossMapInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBossMapInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBossMapInfoRequest::MergeFrom(const GetBossMapInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBossMapInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBossMapInfoRequest::CopyFrom(const GetBossMapInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBossMapInfoRequest::IsInitialized() const {
  
  return true;
}

void GetBossMapInfoRequest::Swap(GetBossMapInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBossMapInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBossMapInfoRequest_descriptor_;
  metadata.reflection = GetBossMapInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBossMapInfoResponse::kErrorCodeFieldNumber;
const int GetBossMapInfoResponse::kTimeLeftFieldNumber;
const int GetBossMapInfoResponse::kPlayerCountFieldNumber;
const int GetBossMapInfoResponse::kStatusFieldNumber;
const int GetBossMapInfoResponse::kDamageIncreasePercentFieldNumber;
const int GetBossMapInfoResponse::kMaxHpFieldNumber;
const int GetBossMapInfoResponse::kHpFieldNumber;
const int GetBossMapInfoResponse::kBossNameFieldNumber;
const int GetBossMapInfoResponse::kPlayerIsDeadFieldNumber;
const int GetBossMapInfoResponse::kTimeLeftToRespawnFieldNumber;
const int GetBossMapInfoResponse::kBossLevelFieldNumber;
#endif  // !_MSC_VER

GetBossMapInfoResponse::GetBossMapInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBossMapInfoResponse::InitAsDefaultInstance() {
}

GetBossMapInfoResponse::GetBossMapInfoResponse(const GetBossMapInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBossMapInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  time_left_ = 0;
  player_count_ = 0;
  status_ = 0;
  damage_increase_percent_ = 0;
  max_hp_ = 0;
  hp_ = 0;
  boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_is_dead_ = 0;
  time_left_to_respawn_ = 0;
  boss_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBossMapInfoResponse::~GetBossMapInfoResponse() {
  SharedDtor();
}

void GetBossMapInfoResponse::SharedDtor() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_name_;
  }
  if (this != default_instance_) {
  }
}

void GetBossMapInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBossMapInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBossMapInfoResponse_descriptor_;
}

const GetBossMapInfoResponse& GetBossMapInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetBossMapInfoResponse* GetBossMapInfoResponse::default_instance_ = NULL;

GetBossMapInfoResponse* GetBossMapInfoResponse::New() const {
  return new GetBossMapInfoResponse;
}

void GetBossMapInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    time_left_ = 0;
    player_count_ = 0;
    status_ = 0;
    damage_increase_percent_ = 0;
    max_hp_ = 0;
    hp_ = 0;
    if (has_boss_name()) {
      if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
        boss_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    player_is_dead_ = 0;
    time_left_to_respawn_ = 0;
    boss_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBossMapInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time_left;
        break;
      }
      
      // optional int32 time_left = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_)));
          set_has_time_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }
      
      // optional int32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_count_)));
          set_has_player_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage_increase_percent;
        break;
      }
      
      // optional int32 damage_increase_percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_increase_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_increase_percent_)));
          set_has_damage_increase_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_hp;
        break;
      }
      
      // optional int32 max_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boss_name;
        break;
      }
      
      // optional string boss_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boss_name().data(), this->boss_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_player_is_dead;
        break;
      }
      
      // optional int32 player_is_dead = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_is_dead_)));
          set_has_player_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_left_to_respawn;
        break;
      }
      
      // optional int32 time_left_to_respawn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left_to_respawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_to_respawn_)));
          set_has_time_left_to_respawn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boss_level;
        break;
      }
      
      // optional int32 boss_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_level_)));
          set_has_boss_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBossMapInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 time_left = 2;
  if (has_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_left(), output);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_count(), output);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }
  
  // optional int32 damage_increase_percent = 5;
  if (has_damage_increase_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage_increase_percent(), output);
  }
  
  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_hp(), output);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp(), output);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->boss_name(), output);
  }
  
  // optional int32 player_is_dead = 9;
  if (has_player_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->player_is_dead(), output);
  }
  
  // optional int32 time_left_to_respawn = 10;
  if (has_time_left_to_respawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_left_to_respawn(), output);
  }
  
  // optional int32 boss_level = 11;
  if (has_boss_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->boss_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBossMapInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 time_left = 2;
  if (has_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_left(), target);
  }
  
  // optional int32 player_count = 3;
  if (has_player_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_count(), target);
  }
  
  // optional int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }
  
  // optional int32 damage_increase_percent = 5;
  if (has_damage_increase_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage_increase_percent(), target);
  }
  
  // optional int32 max_hp = 6;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_hp(), target);
  }
  
  // optional int32 hp = 7;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp(), target);
  }
  
  // optional string boss_name = 8;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->boss_name(), target);
  }
  
  // optional int32 player_is_dead = 9;
  if (has_player_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->player_is_dead(), target);
  }
  
  // optional int32 time_left_to_respawn = 10;
  if (has_time_left_to_respawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time_left_to_respawn(), target);
  }
  
  // optional int32 boss_level = 11;
  if (has_boss_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->boss_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBossMapInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 time_left = 2;
    if (has_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left());
    }
    
    // optional int32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_count());
    }
    
    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 damage_increase_percent = 5;
    if (has_damage_increase_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_increase_percent());
    }
    
    // optional int32 max_hp = 6;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }
    
    // optional int32 hp = 7;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional string boss_name = 8;
    if (has_boss_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 player_is_dead = 9;
    if (has_player_is_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_is_dead());
    }
    
    // optional int32 time_left_to_respawn = 10;
    if (has_time_left_to_respawn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left_to_respawn());
    }
    
    // optional int32 boss_level = 11;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBossMapInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBossMapInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBossMapInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBossMapInfoResponse::MergeFrom(const GetBossMapInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_time_left()) {
      set_time_left(from.time_left());
    }
    if (from.has_player_count()) {
      set_player_count(from.player_count());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_damage_increase_percent()) {
      set_damage_increase_percent(from.damage_increase_percent());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player_is_dead()) {
      set_player_is_dead(from.player_is_dead());
    }
    if (from.has_time_left_to_respawn()) {
      set_time_left_to_respawn(from.time_left_to_respawn());
    }
    if (from.has_boss_level()) {
      set_boss_level(from.boss_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBossMapInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBossMapInfoResponse::CopyFrom(const GetBossMapInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBossMapInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBossMapInfoResponse::Swap(GetBossMapInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(time_left_, other->time_left_);
    std::swap(player_count_, other->player_count_);
    std::swap(status_, other->status_);
    std::swap(damage_increase_percent_, other->damage_increase_percent_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(hp_, other->hp_);
    std::swap(boss_name_, other->boss_name_);
    std::swap(player_is_dead_, other->player_is_dead_);
    std::swap(time_left_to_respawn_, other->time_left_to_respawn_);
    std::swap(boss_level_, other->boss_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBossMapInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBossMapInfoResponse_descriptor_;
  metadata.reflection = GetBossMapInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterPvPMapRequest::EnterPvPMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterPvPMapRequest::InitAsDefaultInstance() {
}

EnterPvPMapRequest::EnterPvPMapRequest(const EnterPvPMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterPvPMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPvPMapRequest::~EnterPvPMapRequest() {
  SharedDtor();
}

void EnterPvPMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPvPMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPvPMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPvPMapRequest_descriptor_;
}

const EnterPvPMapRequest& EnterPvPMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterPvPMapRequest* EnterPvPMapRequest::default_instance_ = NULL;

EnterPvPMapRequest* EnterPvPMapRequest::New() const {
  return new EnterPvPMapRequest;
}

void EnterPvPMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPvPMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EnterPvPMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterPvPMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterPvPMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPvPMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPvPMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPvPMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPvPMapRequest::MergeFrom(const EnterPvPMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPvPMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPvPMapRequest::CopyFrom(const EnterPvPMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPvPMapRequest::IsInitialized() const {
  
  return true;
}

void EnterPvPMapRequest::Swap(EnterPvPMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPvPMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPvPMapRequest_descriptor_;
  metadata.reflection = EnterPvPMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPvPMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EnterPvPMapResponse::EnterPvPMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterPvPMapResponse::InitAsDefaultInstance() {
}

EnterPvPMapResponse::EnterPvPMapResponse(const EnterPvPMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterPvPMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPvPMapResponse::~EnterPvPMapResponse() {
  SharedDtor();
}

void EnterPvPMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPvPMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPvPMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPvPMapResponse_descriptor_;
}

const EnterPvPMapResponse& EnterPvPMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterPvPMapResponse* EnterPvPMapResponse::default_instance_ = NULL;

EnterPvPMapResponse* EnterPvPMapResponse::New() const {
  return new EnterPvPMapResponse;
}

void EnterPvPMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPvPMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterPvPMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterPvPMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterPvPMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPvPMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPvPMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPvPMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPvPMapResponse::MergeFrom(const EnterPvPMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPvPMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPvPMapResponse::CopyFrom(const EnterPvPMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPvPMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterPvPMapResponse::Swap(EnterPvPMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPvPMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPvPMapResponse_descriptor_;
  metadata.reflection = EnterPvPMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeavePvPMapRequest::LeavePvPMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeavePvPMapRequest::InitAsDefaultInstance() {
}

LeavePvPMapRequest::LeavePvPMapRequest(const LeavePvPMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeavePvPMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeavePvPMapRequest::~LeavePvPMapRequest() {
  SharedDtor();
}

void LeavePvPMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeavePvPMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavePvPMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeavePvPMapRequest_descriptor_;
}

const LeavePvPMapRequest& LeavePvPMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeavePvPMapRequest* LeavePvPMapRequest::default_instance_ = NULL;

LeavePvPMapRequest* LeavePvPMapRequest::New() const {
  return new LeavePvPMapRequest;
}

void LeavePvPMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeavePvPMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeavePvPMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeavePvPMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeavePvPMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavePvPMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeavePvPMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeavePvPMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeavePvPMapRequest::MergeFrom(const LeavePvPMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeavePvPMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavePvPMapRequest::CopyFrom(const LeavePvPMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavePvPMapRequest::IsInitialized() const {
  
  return true;
}

void LeavePvPMapRequest::Swap(LeavePvPMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeavePvPMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeavePvPMapRequest_descriptor_;
  metadata.reflection = LeavePvPMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeavePvPMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LeavePvPMapResponse::LeavePvPMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeavePvPMapResponse::InitAsDefaultInstance() {
}

LeavePvPMapResponse::LeavePvPMapResponse(const LeavePvPMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeavePvPMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeavePvPMapResponse::~LeavePvPMapResponse() {
  SharedDtor();
}

void LeavePvPMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeavePvPMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeavePvPMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeavePvPMapResponse_descriptor_;
}

const LeavePvPMapResponse& LeavePvPMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeavePvPMapResponse* LeavePvPMapResponse::default_instance_ = NULL;

LeavePvPMapResponse* LeavePvPMapResponse::New() const {
  return new LeavePvPMapResponse;
}

void LeavePvPMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeavePvPMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeavePvPMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeavePvPMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeavePvPMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeavePvPMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeavePvPMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeavePvPMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeavePvPMapResponse::MergeFrom(const LeavePvPMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeavePvPMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeavePvPMapResponse::CopyFrom(const LeavePvPMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeavePvPMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeavePvPMapResponse::Swap(LeavePvPMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeavePvPMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeavePvPMapResponse_descriptor_;
  metadata.reflection = LeavePvPMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPvPMapInfoRequest::GetPvPMapInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPvPMapInfoRequest::InitAsDefaultInstance() {
}

GetPvPMapInfoRequest::GetPvPMapInfoRequest(const GetPvPMapInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPvPMapInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPvPMapInfoRequest::~GetPvPMapInfoRequest() {
  SharedDtor();
}

void GetPvPMapInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPvPMapInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPvPMapInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPvPMapInfoRequest_descriptor_;
}

const GetPvPMapInfoRequest& GetPvPMapInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetPvPMapInfoRequest* GetPvPMapInfoRequest::default_instance_ = NULL;

GetPvPMapInfoRequest* GetPvPMapInfoRequest::New() const {
  return new GetPvPMapInfoRequest;
}

void GetPvPMapInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPvPMapInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetPvPMapInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPvPMapInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPvPMapInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPvPMapInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPvPMapInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPvPMapInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPvPMapInfoRequest::MergeFrom(const GetPvPMapInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPvPMapInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPvPMapInfoRequest::CopyFrom(const GetPvPMapInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPvPMapInfoRequest::IsInitialized() const {
  
  return true;
}

void GetPvPMapInfoRequest::Swap(GetPvPMapInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPvPMapInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPvPMapInfoRequest_descriptor_;
  metadata.reflection = GetPvPMapInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPvPRankInfo::kGuidFieldNumber;
const int PlayerPvPRankInfo::kRankFieldNumber;
const int PlayerPvPRankInfo::kNameFieldNumber;
const int PlayerPvPRankInfo::kContWinFieldNumber;
const int PlayerPvPRankInfo::kRoleLevelFieldNumber;
const int PlayerPvPRankInfo::kGenderFieldNumber;
#endif  // !_MSC_VER

PlayerPvPRankInfo::PlayerPvPRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPvPRankInfo::InitAsDefaultInstance() {
}

PlayerPvPRankInfo::PlayerPvPRankInfo(const PlayerPvPRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPvPRankInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cont_win_ = 0;
  role_level_ = 0;
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPvPRankInfo::~PlayerPvPRankInfo() {
  SharedDtor();
}

void PlayerPvPRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerPvPRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPvPRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPvPRankInfo_descriptor_;
}

const PlayerPvPRankInfo& PlayerPvPRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PlayerPvPRankInfo* PlayerPvPRankInfo::default_instance_ = NULL;

PlayerPvPRankInfo* PlayerPvPRankInfo::New() const {
  return new PlayerPvPRankInfo;
}

void PlayerPvPRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    cont_win_ = 0;
    role_level_ = 0;
    gender_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPvPRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cont_win;
        break;
      }
      
      // optional int32 cont_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_)));
          set_has_cont_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_level;
        break;
      }
      
      // optional int32 role_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_level_)));
          set_has_role_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }
      
      // optional int32 gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPvPRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 cont_win = 3;
  if (has_cont_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cont_win(), output);
  }
  
  // optional int64 guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->guid(), output);
  }
  
  // optional int32 role_level = 5;
  if (has_role_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->role_level(), output);
  }
  
  // optional int32 gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPvPRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 cont_win = 3;
  if (has_cont_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cont_win(), target);
  }
  
  // optional int64 guid = 4;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->guid(), target);
  }
  
  // optional int32 role_level = 5;
  if (has_role_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->role_level(), target);
  }
  
  // optional int32 gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPvPRankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 cont_win = 3;
    if (has_cont_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win());
    }
    
    // optional int32 role_level = 5;
    if (has_role_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_level());
    }
    
    // optional int32 gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPvPRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPvPRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPvPRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPvPRankInfo::MergeFrom(const PlayerPvPRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cont_win()) {
      set_cont_win(from.cont_win());
    }
    if (from.has_role_level()) {
      set_role_level(from.role_level());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPvPRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPvPRankInfo::CopyFrom(const PlayerPvPRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPvPRankInfo::IsInitialized() const {
  
  return true;
}

void PlayerPvPRankInfo::Swap(PlayerPvPRankInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(cont_win_, other->cont_win_);
    std::swap(role_level_, other->role_level_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPvPRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPvPRankInfo_descriptor_;
  metadata.reflection = PlayerPvPRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPvPMapInfoResponse::kErrorCodeFieldNumber;
const int GetPvPMapInfoResponse::kRankInfoFieldNumber;
const int GetPvPMapInfoResponse::kCdLeftFieldNumber;
const int GetPvPMapInfoResponse::kLevelFieldNumber;
const int GetPvPMapInfoResponse::kCurWinFieldNumber;
const int GetPvPMapInfoResponse::kWinnerBonusTakenFieldNumber;
#endif  // !_MSC_VER

GetPvPMapInfoResponse::GetPvPMapInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPvPMapInfoResponse::InitAsDefaultInstance() {
}

GetPvPMapInfoResponse::GetPvPMapInfoResponse(const GetPvPMapInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPvPMapInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  cd_left_ = 0;
  level_ = 0;
  cur_win_ = 0;
  winner_bonus_taken_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPvPMapInfoResponse::~GetPvPMapInfoResponse() {
  SharedDtor();
}

void GetPvPMapInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPvPMapInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPvPMapInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPvPMapInfoResponse_descriptor_;
}

const GetPvPMapInfoResponse& GetPvPMapInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetPvPMapInfoResponse* GetPvPMapInfoResponse::default_instance_ = NULL;

GetPvPMapInfoResponse* GetPvPMapInfoResponse::New() const {
  return new GetPvPMapInfoResponse;
}

void GetPvPMapInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    cd_left_ = 0;
    level_ = 0;
    cur_win_ = 0;
    winner_bonus_taken_ = 0;
  }
  rank_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPvPMapInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_info;
        break;
      }
      
      // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_info;
        if (input->ExpectTag(24)) goto parse_cd_left;
        break;
      }
      
      // optional int32 cd_left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_left_)));
          set_has_cd_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_win;
        break;
      }
      
      // optional int32 cur_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_win_)));
          set_has_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_winner_bonus_taken;
        break;
      }
      
      // optional int32 winner_bonus_taken = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_bonus_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_bonus_taken_)));
          set_has_winner_bonus_taken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPvPMapInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  for (int i = 0; i < this->rank_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_info(i), output);
  }
  
  // optional int32 cd_left = 3;
  if (has_cd_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd_left(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 cur_win = 5;
  if (has_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_win(), output);
  }
  
  // optional int32 winner_bonus_taken = 6;
  if (has_winner_bonus_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->winner_bonus_taken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPvPMapInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  for (int i = 0; i < this->rank_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_info(i), target);
  }
  
  // optional int32 cd_left = 3;
  if (has_cd_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd_left(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 cur_win = 5;
  if (has_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_win(), target);
  }
  
  // optional int32 winner_bonus_taken = 6;
  if (has_winner_bonus_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->winner_bonus_taken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPvPMapInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 cd_left = 3;
    if (has_cd_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_left());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 cur_win = 5;
    if (has_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_win());
    }
    
    // optional int32 winner_bonus_taken = 6;
    if (has_winner_bonus_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_bonus_taken());
    }
    
  }
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  total_size += 1 * this->rank_info_size();
  for (int i = 0; i < this->rank_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPvPMapInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPvPMapInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPvPMapInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPvPMapInfoResponse::MergeFrom(const GetPvPMapInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_info_.MergeFrom(from.rank_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_cd_left()) {
      set_cd_left(from.cd_left());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_win()) {
      set_cur_win(from.cur_win());
    }
    if (from.has_winner_bonus_taken()) {
      set_winner_bonus_taken(from.winner_bonus_taken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPvPMapInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPvPMapInfoResponse::CopyFrom(const GetPvPMapInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPvPMapInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetPvPMapInfoResponse::Swap(GetPvPMapInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    rank_info_.Swap(&other->rank_info_);
    std::swap(cd_left_, other->cd_left_);
    std::swap(level_, other->level_);
    std::swap(cur_win_, other->cur_win_);
    std::swap(winner_bonus_taken_, other->winner_bonus_taken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPvPMapInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPvPMapInfoResponse_descriptor_;
  metadata.reflection = GetPvPMapInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearPvPCDRequest::ClearPvPCDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearPvPCDRequest::InitAsDefaultInstance() {
}

ClearPvPCDRequest::ClearPvPCDRequest(const ClearPvPCDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearPvPCDRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearPvPCDRequest::~ClearPvPCDRequest() {
  SharedDtor();
}

void ClearPvPCDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearPvPCDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearPvPCDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearPvPCDRequest_descriptor_;
}

const ClearPvPCDRequest& ClearPvPCDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

ClearPvPCDRequest* ClearPvPCDRequest::default_instance_ = NULL;

ClearPvPCDRequest* ClearPvPCDRequest::New() const {
  return new ClearPvPCDRequest;
}

void ClearPvPCDRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearPvPCDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearPvPCDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearPvPCDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearPvPCDRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearPvPCDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearPvPCDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearPvPCDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearPvPCDRequest::MergeFrom(const ClearPvPCDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearPvPCDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearPvPCDRequest::CopyFrom(const ClearPvPCDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearPvPCDRequest::IsInitialized() const {
  
  return true;
}

void ClearPvPCDRequest::Swap(ClearPvPCDRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearPvPCDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearPvPCDRequest_descriptor_;
  metadata.reflection = ClearPvPCDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClearPvPCDResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ClearPvPCDResponse::ClearPvPCDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearPvPCDResponse::InitAsDefaultInstance() {
}

ClearPvPCDResponse::ClearPvPCDResponse(const ClearPvPCDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearPvPCDResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearPvPCDResponse::~ClearPvPCDResponse() {
  SharedDtor();
}

void ClearPvPCDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearPvPCDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearPvPCDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearPvPCDResponse_descriptor_;
}

const ClearPvPCDResponse& ClearPvPCDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

ClearPvPCDResponse* ClearPvPCDResponse::default_instance_ = NULL;

ClearPvPCDResponse* ClearPvPCDResponse::New() const {
  return new ClearPvPCDResponse;
}

void ClearPvPCDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearPvPCDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClearPvPCDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearPvPCDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearPvPCDResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearPvPCDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearPvPCDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearPvPCDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearPvPCDResponse::MergeFrom(const ClearPvPCDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearPvPCDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearPvPCDResponse::CopyFrom(const ClearPvPCDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearPvPCDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ClearPvPCDResponse::Swap(ClearPvPCDResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearPvPCDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearPvPCDResponse_descriptor_;
  metadata.reflection = ClearPvPCDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPUpdateCD::kCdLeftFieldNumber;
const int PvPUpdateCD::kBlackGuidFieldNumber;
#endif  // !_MSC_VER

PvPUpdateCD::PvPUpdateCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPUpdateCD::InitAsDefaultInstance() {
}

PvPUpdateCD::PvPUpdateCD(const PvPUpdateCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPUpdateCD::SharedCtor() {
  _cached_size_ = 0;
  cd_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPUpdateCD::~PvPUpdateCD() {
  SharedDtor();
}

void PvPUpdateCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPUpdateCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPUpdateCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPUpdateCD_descriptor_;
}

const PvPUpdateCD& PvPUpdateCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PvPUpdateCD* PvPUpdateCD::default_instance_ = NULL;

PvPUpdateCD* PvPUpdateCD::New() const {
  return new PvPUpdateCD;
}

void PvPUpdateCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cd_left_ = 0;
  }
  black_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPUpdateCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cd_left = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_left_)));
          set_has_cd_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_black_guid;
        break;
      }
      
      // repeated int64 black_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_black_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_black_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_black_guid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPUpdateCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cd_left = 1;
  if (has_cd_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cd_left(), output);
  }
  
  // repeated int64 black_guid = 3;
  for (int i = 0; i < this->black_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->black_guid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPUpdateCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cd_left = 1;
  if (has_cd_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cd_left(), target);
  }
  
  // repeated int64 black_guid = 3;
  for (int i = 0; i < this->black_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->black_guid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPUpdateCD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cd_left = 1;
    if (has_cd_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_left());
    }
    
  }
  // repeated int64 black_guid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->black_guid(i));
    }
    total_size += 1 * this->black_guid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPUpdateCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPUpdateCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPUpdateCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPUpdateCD::MergeFrom(const PvPUpdateCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  black_guid_.MergeFrom(from.black_guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cd_left()) {
      set_cd_left(from.cd_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPUpdateCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPUpdateCD::CopyFrom(const PvPUpdateCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPUpdateCD::IsInitialized() const {
  
  return true;
}

void PvPUpdateCD::Swap(PvPUpdateCD* other) {
  if (other != this) {
    std::swap(cd_left_, other->cd_left_);
    black_guid_.Swap(&other->black_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPUpdateCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPUpdateCD_descriptor_;
  metadata.reflection = PvPUpdateCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPActNotify::kUpdateTypeFieldNumber;
const int PvPActNotify::kRankInfoFieldNumber;
const int PvPActNotify::kDefenderInfoFieldNumber;
const int PvPActNotify::kAttackerInfoFieldNumber;
const int PvPActNotify::kPlayerCurLevelFieldNumber;
const int PvPActNotify::kPlayerCurWinFieldNumber;
const int PvPActNotify::kPlayerContWinFieldNumber;
const int PvPActNotify::kTimeLeftFieldNumber;
const int PvPActNotify::kBonusItemFieldNumber;
#endif  // !_MSC_VER

PvPActNotify::PvPActNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPActNotify::InitAsDefaultInstance() {
  defender_info_ = const_cast< ::protocols::common::PlayerPvPRankInfo*>(&::protocols::common::PlayerPvPRankInfo::default_instance());
  attacker_info_ = const_cast< ::protocols::common::PlayerPvPRankInfo*>(&::protocols::common::PlayerPvPRankInfo::default_instance());
}

PvPActNotify::PvPActNotify(const PvPActNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPActNotify::SharedCtor() {
  _cached_size_ = 0;
  update_type_ = 0;
  defender_info_ = NULL;
  attacker_info_ = NULL;
  player_cur_level_ = 0;
  player_cur_win_ = 0;
  player_cont_win_ = 0;
  time_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPActNotify::~PvPActNotify() {
  SharedDtor();
}

void PvPActNotify::SharedDtor() {
  if (this != default_instance_) {
    delete defender_info_;
    delete attacker_info_;
  }
}

void PvPActNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPActNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPActNotify_descriptor_;
}

const PvPActNotify& PvPActNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PvPActNotify* PvPActNotify::default_instance_ = NULL;

PvPActNotify* PvPActNotify::New() const {
  return new PvPActNotify;
}

void PvPActNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_type_ = 0;
    if (has_defender_info()) {
      if (defender_info_ != NULL) defender_info_->::protocols::common::PlayerPvPRankInfo::Clear();
    }
    if (has_attacker_info()) {
      if (attacker_info_ != NULL) attacker_info_->::protocols::common::PlayerPvPRankInfo::Clear();
    }
    player_cur_level_ = 0;
    player_cur_win_ = 0;
    player_cont_win_ = 0;
    time_left_ = 0;
  }
  rank_info_.Clear();
  bonus_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPActNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 update_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_type_)));
          set_has_update_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_info;
        break;
      }
      
      // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_info;
        if (input->ExpectTag(26)) goto parse_defender_info;
        break;
      }
      
      // optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attacker_info;
        break;
      }
      
      // optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_player_cur_level;
        break;
      }
      
      // optional int32 player_cur_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_cur_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_cur_level_)));
          set_has_player_cur_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_cur_win;
        break;
      }
      
      // optional int32 player_cur_win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_cur_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_cur_win_)));
          set_has_player_cur_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time_left;
        break;
      }
      
      // optional int32 time_left = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_)));
          set_has_time_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bonus_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo bonus_item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_bonus_item;
        if (input->ExpectTag(72)) goto parse_player_cont_win;
        break;
      }
      
      // optional int32 player_cont_win = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_cont_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_cont_win_)));
          set_has_player_cont_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPActNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 update_type = 1;
  if (has_update_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->update_type(), output);
  }
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  for (int i = 0; i < this->rank_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_info(i), output);
  }
  
  // optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
  if (has_defender_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defender_info(), output);
  }
  
  // optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
  if (has_attacker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attacker_info(), output);
  }
  
  // optional int32 player_cur_level = 5;
  if (has_player_cur_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_cur_level(), output);
  }
  
  // optional int32 player_cur_win = 6;
  if (has_player_cur_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_cur_win(), output);
  }
  
  // optional int32 time_left = 7;
  if (has_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time_left(), output);
  }
  
  // repeated .protocols.common.ItemInfo bonus_item = 8;
  for (int i = 0; i < this->bonus_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bonus_item(i), output);
  }
  
  // optional int32 player_cont_win = 9;
  if (has_player_cont_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->player_cont_win(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPActNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 update_type = 1;
  if (has_update_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->update_type(), target);
  }
  
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  for (int i = 0; i < this->rank_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_info(i), target);
  }
  
  // optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
  if (has_defender_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defender_info(), target);
  }
  
  // optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
  if (has_attacker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attacker_info(), target);
  }
  
  // optional int32 player_cur_level = 5;
  if (has_player_cur_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_cur_level(), target);
  }
  
  // optional int32 player_cur_win = 6;
  if (has_player_cur_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_cur_win(), target);
  }
  
  // optional int32 time_left = 7;
  if (has_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time_left(), target);
  }
  
  // repeated .protocols.common.ItemInfo bonus_item = 8;
  for (int i = 0; i < this->bonus_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bonus_item(i), target);
  }
  
  // optional int32 player_cont_win = 9;
  if (has_player_cont_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->player_cont_win(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPActNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 update_type = 1;
    if (has_update_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_type());
    }
    
    // optional .protocols.common.PlayerPvPRankInfo defender_info = 3;
    if (has_defender_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender_info());
    }
    
    // optional .protocols.common.PlayerPvPRankInfo attacker_info = 4;
    if (has_attacker_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker_info());
    }
    
    // optional int32 player_cur_level = 5;
    if (has_player_cur_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_cur_level());
    }
    
    // optional int32 player_cur_win = 6;
    if (has_player_cur_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_cur_win());
    }
    
    // optional int32 player_cont_win = 9;
    if (has_player_cont_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_cont_win());
    }
    
    // optional int32 time_left = 7;
    if (has_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left());
    }
    
  }
  // repeated .protocols.common.PlayerPvPRankInfo rank_info = 2;
  total_size += 1 * this->rank_info_size();
  for (int i = 0; i < this->rank_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_info(i));
  }
  
  // repeated .protocols.common.ItemInfo bonus_item = 8;
  total_size += 1 * this->bonus_item_size();
  for (int i = 0; i < this->bonus_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPActNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPActNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPActNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPActNotify::MergeFrom(const PvPActNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_info_.MergeFrom(from.rank_info_);
  bonus_item_.MergeFrom(from.bonus_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_type()) {
      set_update_type(from.update_type());
    }
    if (from.has_defender_info()) {
      mutable_defender_info()->::protocols::common::PlayerPvPRankInfo::MergeFrom(from.defender_info());
    }
    if (from.has_attacker_info()) {
      mutable_attacker_info()->::protocols::common::PlayerPvPRankInfo::MergeFrom(from.attacker_info());
    }
    if (from.has_player_cur_level()) {
      set_player_cur_level(from.player_cur_level());
    }
    if (from.has_player_cur_win()) {
      set_player_cur_win(from.player_cur_win());
    }
    if (from.has_player_cont_win()) {
      set_player_cont_win(from.player_cont_win());
    }
    if (from.has_time_left()) {
      set_time_left(from.time_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPActNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPActNotify::CopyFrom(const PvPActNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPActNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < bonus_item_size(); i++) {
    if (!this->bonus_item(i).IsInitialized()) return false;
  }
  return true;
}

void PvPActNotify::Swap(PvPActNotify* other) {
  if (other != this) {
    std::swap(update_type_, other->update_type_);
    rank_info_.Swap(&other->rank_info_);
    std::swap(defender_info_, other->defender_info_);
    std::swap(attacker_info_, other->attacker_info_);
    std::swap(player_cur_level_, other->player_cur_level_);
    std::swap(player_cur_win_, other->player_cur_win_);
    std::swap(player_cont_win_, other->player_cont_win_);
    std::swap(time_left_, other->time_left_);
    bonus_item_.Swap(&other->bonus_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPActNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPActNotify_descriptor_;
  metadata.reflection = PvPActNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPRobotNotify::kRobotTypeFieldNumber;
const int PvPRobotNotify::kRobotIdFieldNumber;
const int PvPRobotNotify::kRobotLevelFieldNumber;
const int PvPRobotNotify::kRobotMapXFieldNumber;
const int PvPRobotNotify::kRobotMapYFieldNumber;
#endif  // !_MSC_VER

PvPRobotNotify::PvPRobotNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPRobotNotify::InitAsDefaultInstance() {
}

PvPRobotNotify::PvPRobotNotify(const PvPRobotNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPRobotNotify::SharedCtor() {
  _cached_size_ = 0;
  robot_type_ = 0;
  robot_id_ = 0;
  robot_level_ = 0;
  robot_map_x_ = 0;
  robot_map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPRobotNotify::~PvPRobotNotify() {
  SharedDtor();
}

void PvPRobotNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPRobotNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPRobotNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPRobotNotify_descriptor_;
}

const PvPRobotNotify& PvPRobotNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PvPRobotNotify* PvPRobotNotify::default_instance_ = NULL;

PvPRobotNotify* PvPRobotNotify::New() const {
  return new PvPRobotNotify;
}

void PvPRobotNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    robot_type_ = 0;
    robot_id_ = 0;
    robot_level_ = 0;
    robot_map_x_ = 0;
    robot_map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPRobotNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 robot_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_type_)));
          set_has_robot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robot_id;
        break;
      }
      
      // optional int32 robot_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robot_level;
        break;
      }
      
      // optional int32 robot_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_level_)));
          set_has_robot_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_robot_map_x;
        break;
      }
      
      // optional int32 robot_map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_map_x_)));
          set_has_robot_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_robot_map_y;
        break;
      }
      
      // optional int32 robot_map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_map_y_)));
          set_has_robot_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPRobotNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 robot_type = 1;
  if (has_robot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_type(), output);
  }
  
  // optional int32 robot_id = 2;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->robot_id(), output);
  }
  
  // optional int32 robot_level = 3;
  if (has_robot_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robot_level(), output);
  }
  
  // optional int32 robot_map_x = 4;
  if (has_robot_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->robot_map_x(), output);
  }
  
  // optional int32 robot_map_y = 5;
  if (has_robot_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->robot_map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPRobotNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 robot_type = 1;
  if (has_robot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_type(), target);
  }
  
  // optional int32 robot_id = 2;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->robot_id(), target);
  }
  
  // optional int32 robot_level = 3;
  if (has_robot_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robot_level(), target);
  }
  
  // optional int32 robot_map_x = 4;
  if (has_robot_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->robot_map_x(), target);
  }
  
  // optional int32 robot_map_y = 5;
  if (has_robot_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->robot_map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPRobotNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 robot_type = 1;
    if (has_robot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_type());
    }
    
    // optional int32 robot_id = 2;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_id());
    }
    
    // optional int32 robot_level = 3;
    if (has_robot_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_level());
    }
    
    // optional int32 robot_map_x = 4;
    if (has_robot_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_map_x());
    }
    
    // optional int32 robot_map_y = 5;
    if (has_robot_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPRobotNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPRobotNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPRobotNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPRobotNotify::MergeFrom(const PvPRobotNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot_type()) {
      set_robot_type(from.robot_type());
    }
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_robot_level()) {
      set_robot_level(from.robot_level());
    }
    if (from.has_robot_map_x()) {
      set_robot_map_x(from.robot_map_x());
    }
    if (from.has_robot_map_y()) {
      set_robot_map_y(from.robot_map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPRobotNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPRobotNotify::CopyFrom(const PvPRobotNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPRobotNotify::IsInitialized() const {
  
  return true;
}

void PvPRobotNotify::Swap(PvPRobotNotify* other) {
  if (other != this) {
    std::swap(robot_type_, other->robot_type_);
    std::swap(robot_id_, other->robot_id_);
    std::swap(robot_level_, other->robot_level_);
    std::swap(robot_map_x_, other->robot_map_x_);
    std::swap(robot_map_y_, other->robot_map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPRobotNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPRobotNotify_descriptor_;
  metadata.reflection = PvPRobotNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPBonusNotify::kBonusTypeFieldNumber;
const int PvPBonusNotify::kCurLevelFieldNumber;
const int PvPBonusNotify::kRankFieldNumber;
const int PvPBonusNotify::kItemInfoFieldNumber;
#endif  // !_MSC_VER

PvPBonusNotify::PvPBonusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPBonusNotify::InitAsDefaultInstance() {
}

PvPBonusNotify::PvPBonusNotify(const PvPBonusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPBonusNotify::SharedCtor() {
  _cached_size_ = 0;
  bonus_type_ = 0;
  cur_level_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPBonusNotify::~PvPBonusNotify() {
  SharedDtor();
}

void PvPBonusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPBonusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPBonusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPBonusNotify_descriptor_;
}

const PvPBonusNotify& PvPBonusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

PvPBonusNotify* PvPBonusNotify::default_instance_ = NULL;

PvPBonusNotify* PvPBonusNotify::New() const {
  return new PvPBonusNotify;
}

void PvPBonusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bonus_type_ = 0;
    cur_level_ = 0;
    rank_ = 0;
  }
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPBonusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bonus_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_type_)));
          set_has_bonus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectTag(24)) goto parse_cur_level;
        break;
      }
      
      // optional int32 cur_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_level_)));
          set_has_cur_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPBonusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bonus_type = 1;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonus_type(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }
  
  // optional int32 cur_level = 3;
  if (has_cur_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_level(), output);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPBonusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bonus_type = 1;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonus_type(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }
  
  // optional int32 cur_level = 3;
  if (has_cur_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_level(), target);
  }
  
  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPBonusNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bonus_type = 1;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_type());
    }
    
    // optional int32 cur_level = 3;
    if (has_cur_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_level());
    }
    
    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPBonusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPBonusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPBonusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPBonusNotify::MergeFrom(const PvPBonusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
    if (from.has_cur_level()) {
      set_cur_level(from.cur_level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPBonusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPBonusNotify::CopyFrom(const PvPBonusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPBonusNotify::IsInitialized() const {
  
  for (int i = 0; i < item_info_size(); i++) {
    if (!this->item_info(i).IsInitialized()) return false;
  }
  return true;
}

void PvPBonusNotify::Swap(PvPBonusNotify* other) {
  if (other != this) {
    std::swap(bonus_type_, other->bonus_type_);
    std::swap(cur_level_, other->cur_level_);
    std::swap(rank_, other->rank_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPBonusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPBonusNotify_descriptor_;
  metadata.reflection = PvPBonusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakePvPGiftRequest::kBonusTypeFieldNumber;
const int TakePvPGiftRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

TakePvPGiftRequest::TakePvPGiftRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakePvPGiftRequest::InitAsDefaultInstance() {
}

TakePvPGiftRequest::TakePvPGiftRequest(const TakePvPGiftRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakePvPGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  bonus_type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakePvPGiftRequest::~TakePvPGiftRequest() {
  SharedDtor();
}

void TakePvPGiftRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakePvPGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakePvPGiftRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakePvPGiftRequest_descriptor_;
}

const TakePvPGiftRequest& TakePvPGiftRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

TakePvPGiftRequest* TakePvPGiftRequest::default_instance_ = NULL;

TakePvPGiftRequest* TakePvPGiftRequest::New() const {
  return new TakePvPGiftRequest;
}

void TakePvPGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bonus_type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakePvPGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bonus_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_type_)));
          set_has_bonus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakePvPGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bonus_type = 1;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonus_type(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakePvPGiftRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bonus_type = 1;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonus_type(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakePvPGiftRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bonus_type = 1;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_type());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakePvPGiftRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakePvPGiftRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakePvPGiftRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakePvPGiftRequest::MergeFrom(const TakePvPGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakePvPGiftRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakePvPGiftRequest::CopyFrom(const TakePvPGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePvPGiftRequest::IsInitialized() const {
  
  return true;
}

void TakePvPGiftRequest::Swap(TakePvPGiftRequest* other) {
  if (other != this) {
    std::swap(bonus_type_, other->bonus_type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakePvPGiftRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakePvPGiftRequest_descriptor_;
  metadata.reflection = TakePvPGiftRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakePvPGiftResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

TakePvPGiftResponse::TakePvPGiftResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakePvPGiftResponse::InitAsDefaultInstance() {
}

TakePvPGiftResponse::TakePvPGiftResponse(const TakePvPGiftResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakePvPGiftResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakePvPGiftResponse::~TakePvPGiftResponse() {
  SharedDtor();
}

void TakePvPGiftResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakePvPGiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakePvPGiftResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakePvPGiftResponse_descriptor_;
}

const TakePvPGiftResponse& TakePvPGiftResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

TakePvPGiftResponse* TakePvPGiftResponse::default_instance_ = NULL;

TakePvPGiftResponse* TakePvPGiftResponse::New() const {
  return new TakePvPGiftResponse;
}

void TakePvPGiftResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakePvPGiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakePvPGiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakePvPGiftResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakePvPGiftResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakePvPGiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakePvPGiftResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakePvPGiftResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakePvPGiftResponse::MergeFrom(const TakePvPGiftResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakePvPGiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakePvPGiftResponse::CopyFrom(const TakePvPGiftResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePvPGiftResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakePvPGiftResponse::Swap(TakePvPGiftResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakePvPGiftResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakePvPGiftResponse_descriptor_;
  metadata.reflection = TakePvPGiftResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossInfo::kBossNameFieldNumber;
const int BossInfo::kBossLevelFieldNumber;
const int BossInfo::kMaxHpFieldNumber;
const int BossInfo::kHpFieldNumber;
const int BossInfo::kShowStatusFieldNumber;
#endif  // !_MSC_VER

BossInfo::BossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossInfo::InitAsDefaultInstance() {
}

BossInfo::BossInfo(const BossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossInfo::SharedCtor() {
  _cached_size_ = 0;
  boss_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boss_level_ = 0;
  max_hp_ = 0;
  hp_ = 0;
  show_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossInfo::~BossInfo() {
  SharedDtor();
}

void BossInfo::SharedDtor() {
  if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_name_;
  }
  if (this != default_instance_) {
  }
}

void BossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossInfo_descriptor_;
}

const BossInfo& BossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

BossInfo* BossInfo::default_instance_ = NULL;

BossInfo* BossInfo::New() const {
  return new BossInfo;
}

void BossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boss_name()) {
      if (boss_name_ != &::google::protobuf::internal::kEmptyString) {
        boss_name_->clear();
      }
    }
    boss_level_ = 0;
    max_hp_ = 0;
    hp_ = 0;
    show_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string boss_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boss_name().data(), this->boss_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_level;
        break;
      }
      
      // optional int32 boss_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_level_)));
          set_has_boss_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_hp;
        break;
      }
      
      // optional int32 max_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_status;
        break;
      }
      
      // optional int32 show_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_status_)));
          set_has_show_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string boss_name = 1;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->boss_name(), output);
  }
  
  // optional int32 boss_level = 2;
  if (has_boss_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boss_level(), output);
  }
  
  // optional int32 max_hp = 3;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_hp(), output);
  }
  
  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }
  
  // optional int32 show_status = 5;
  if (has_show_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->show_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string boss_name = 1;
  if (has_boss_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_name().data(), this->boss_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->boss_name(), target);
  }
  
  // optional int32 boss_level = 2;
  if (has_boss_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boss_level(), target);
  }
  
  // optional int32 max_hp = 3;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_hp(), target);
  }
  
  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }
  
  // optional int32 show_status = 5;
  if (has_show_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->show_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string boss_name = 1;
    if (has_boss_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_name());
    }
    
    // optional int32 boss_level = 2;
    if (has_boss_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_level());
    }
    
    // optional int32 max_hp = 3;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }
    
    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 show_status = 5;
    if (has_show_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossInfo::MergeFrom(const BossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_name()) {
      set_boss_name(from.boss_name());
    }
    if (from.has_boss_level()) {
      set_boss_level(from.boss_level());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_show_status()) {
      set_show_status(from.show_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossInfo::CopyFrom(const BossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossInfo::IsInitialized() const {
  
  return true;
}

void BossInfo::Swap(BossInfo* other) {
  if (other != this) {
    std::swap(boss_name_, other->boss_name_);
    std::swap(boss_level_, other->boss_level_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(hp_, other->hp_);
    std::swap(show_status_, other->show_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossInfo_descriptor_;
  metadata.reflection = BossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarContributionPlayer::kRankFieldNumber;
const int GuildWarContributionPlayer::kGuidFieldNumber;
const int GuildWarContributionPlayer::kNameFieldNumber;
const int GuildWarContributionPlayer::kDamageFieldNumber;
const int GuildWarContributionPlayer::kEncourageTimeFieldNumber;
const int GuildWarContributionPlayer::kContributionFieldNumber;
#endif  // !_MSC_VER

GuildWarContributionPlayer::GuildWarContributionPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarContributionPlayer::InitAsDefaultInstance() {
}

GuildWarContributionPlayer::GuildWarContributionPlayer(const GuildWarContributionPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarContributionPlayer::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damage_ = 0;
  encourage_time_ = 0;
  contribution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarContributionPlayer::~GuildWarContributionPlayer() {
  SharedDtor();
}

void GuildWarContributionPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarContributionPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarContributionPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarContributionPlayer_descriptor_;
}

const GuildWarContributionPlayer& GuildWarContributionPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarContributionPlayer* GuildWarContributionPlayer::default_instance_ = NULL;

GuildWarContributionPlayer* GuildWarContributionPlayer::New() const {
  return new GuildWarContributionPlayer;
}

void GuildWarContributionPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    damage_ = 0;
    encourage_time_ = 0;
    contribution_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarContributionPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_encourage_time;
        break;
      }
      
      // optional int32 encourage_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encourage_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encourage_time_)));
          set_has_encourage_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contribution;
        break;
      }
      
      // optional int32 contribution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarContributionPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }
  
  // optional int32 encourage_time = 5;
  if (has_encourage_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->encourage_time(), output);
  }
  
  // optional int32 contribution = 6;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contribution(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarContributionPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }
  
  // optional int32 encourage_time = 5;
  if (has_encourage_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->encourage_time(), target);
  }
  
  // optional int32 contribution = 6;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contribution(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarContributionPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
    // optional int32 encourage_time = 5;
    if (has_encourage_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encourage_time());
    }
    
    // optional int32 contribution = 6;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribution());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarContributionPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarContributionPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarContributionPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarContributionPlayer::MergeFrom(const GuildWarContributionPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_encourage_time()) {
      set_encourage_time(from.encourage_time());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarContributionPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarContributionPlayer::CopyFrom(const GuildWarContributionPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarContributionPlayer::IsInitialized() const {
  
  return true;
}

void GuildWarContributionPlayer::Swap(GuildWarContributionPlayer* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(damage_, other->damage_);
    std::swap(encourage_time_, other->encourage_time_);
    std::swap(contribution_, other->contribution_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarContributionPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarContributionPlayer_descriptor_;
  metadata.reflection = GuildWarContributionPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EnterGuildWarMapRequest::EnterGuildWarMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGuildWarMapRequest::InitAsDefaultInstance() {
}

EnterGuildWarMapRequest::EnterGuildWarMapRequest(const EnterGuildWarMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGuildWarMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildWarMapRequest::~EnterGuildWarMapRequest() {
  SharedDtor();
}

void EnterGuildWarMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGuildWarMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildWarMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildWarMapRequest_descriptor_;
}

const EnterGuildWarMapRequest& EnterGuildWarMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterGuildWarMapRequest* EnterGuildWarMapRequest::default_instance_ = NULL;

EnterGuildWarMapRequest* EnterGuildWarMapRequest::New() const {
  return new EnterGuildWarMapRequest;
}

void EnterGuildWarMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildWarMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EnterGuildWarMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGuildWarMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGuildWarMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildWarMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildWarMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildWarMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildWarMapRequest::MergeFrom(const EnterGuildWarMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildWarMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildWarMapRequest::CopyFrom(const EnterGuildWarMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildWarMapRequest::IsInitialized() const {
  
  return true;
}

void EnterGuildWarMapRequest::Swap(EnterGuildWarMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildWarMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildWarMapRequest_descriptor_;
  metadata.reflection = EnterGuildWarMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildWarMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EnterGuildWarMapResponse::EnterGuildWarMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterGuildWarMapResponse::InitAsDefaultInstance() {
}

EnterGuildWarMapResponse::EnterGuildWarMapResponse(const EnterGuildWarMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterGuildWarMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildWarMapResponse::~EnterGuildWarMapResponse() {
  SharedDtor();
}

void EnterGuildWarMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterGuildWarMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildWarMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildWarMapResponse_descriptor_;
}

const EnterGuildWarMapResponse& EnterGuildWarMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

EnterGuildWarMapResponse* EnterGuildWarMapResponse::default_instance_ = NULL;

EnterGuildWarMapResponse* EnterGuildWarMapResponse::New() const {
  return new EnterGuildWarMapResponse;
}

void EnterGuildWarMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildWarMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterGuildWarMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterGuildWarMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterGuildWarMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildWarMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildWarMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildWarMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildWarMapResponse::MergeFrom(const EnterGuildWarMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildWarMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildWarMapResponse::CopyFrom(const EnterGuildWarMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildWarMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EnterGuildWarMapResponse::Swap(EnterGuildWarMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildWarMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildWarMapResponse_descriptor_;
  metadata.reflection = EnterGuildWarMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveGuildWarMapRequest::LeaveGuildWarMapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGuildWarMapRequest::InitAsDefaultInstance() {
}

LeaveGuildWarMapRequest::LeaveGuildWarMapRequest(const LeaveGuildWarMapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGuildWarMapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGuildWarMapRequest::~LeaveGuildWarMapRequest() {
  SharedDtor();
}

void LeaveGuildWarMapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGuildWarMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGuildWarMapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGuildWarMapRequest_descriptor_;
}

const LeaveGuildWarMapRequest& LeaveGuildWarMapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveGuildWarMapRequest* LeaveGuildWarMapRequest::default_instance_ = NULL;

LeaveGuildWarMapRequest* LeaveGuildWarMapRequest::New() const {
  return new LeaveGuildWarMapRequest;
}

void LeaveGuildWarMapRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGuildWarMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LeaveGuildWarMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGuildWarMapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGuildWarMapRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGuildWarMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGuildWarMapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGuildWarMapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGuildWarMapRequest::MergeFrom(const LeaveGuildWarMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGuildWarMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGuildWarMapRequest::CopyFrom(const LeaveGuildWarMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGuildWarMapRequest::IsInitialized() const {
  
  return true;
}

void LeaveGuildWarMapRequest::Swap(LeaveGuildWarMapRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGuildWarMapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGuildWarMapRequest_descriptor_;
  metadata.reflection = LeaveGuildWarMapRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGuildWarMapResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

LeaveGuildWarMapResponse::LeaveGuildWarMapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGuildWarMapResponse::InitAsDefaultInstance() {
}

LeaveGuildWarMapResponse::LeaveGuildWarMapResponse(const LeaveGuildWarMapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGuildWarMapResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGuildWarMapResponse::~LeaveGuildWarMapResponse() {
  SharedDtor();
}

void LeaveGuildWarMapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGuildWarMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGuildWarMapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGuildWarMapResponse_descriptor_;
}

const LeaveGuildWarMapResponse& LeaveGuildWarMapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

LeaveGuildWarMapResponse* LeaveGuildWarMapResponse::default_instance_ = NULL;

LeaveGuildWarMapResponse* LeaveGuildWarMapResponse::New() const {
  return new LeaveGuildWarMapResponse;
}

void LeaveGuildWarMapResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGuildWarMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveGuildWarMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGuildWarMapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGuildWarMapResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGuildWarMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGuildWarMapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGuildWarMapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGuildWarMapResponse::MergeFrom(const LeaveGuildWarMapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGuildWarMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGuildWarMapResponse::CopyFrom(const LeaveGuildWarMapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGuildWarMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveGuildWarMapResponse::Swap(LeaveGuildWarMapResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGuildWarMapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGuildWarMapResponse_descriptor_;
  metadata.reflection = LeaveGuildWarMapResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarSchedule::kEventTypeFieldNumber;
const int GuildWarSchedule::kContestTypeFieldNumber;
const int GuildWarSchedule::kContestProgressTypeFieldNumber;
const int GuildWarSchedule::kStartTimeFieldNumber;
const int GuildWarSchedule::kEndTimeFieldNumber;
const int GuildWarSchedule::kTimeLeftFieldNumber;
const int GuildWarSchedule::kCompetitorInfoFieldNumber;
const int GuildWarSchedule::kStrStartTimeFieldNumber;
#endif  // !_MSC_VER

GuildWarSchedule::GuildWarSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarSchedule::InitAsDefaultInstance() {
}

GuildWarSchedule::GuildWarSchedule(const GuildWarSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarSchedule::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  contest_type_ = 0;
  contestprogresstype_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  time_left_ = 0;
  str_start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarSchedule::~GuildWarSchedule() {
  SharedDtor();
}

void GuildWarSchedule::SharedDtor() {
  if (str_start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete str_start_time_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarSchedule_descriptor_;
}

const GuildWarSchedule& GuildWarSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarSchedule* GuildWarSchedule::default_instance_ = NULL;

GuildWarSchedule* GuildWarSchedule::New() const {
  return new GuildWarSchedule;
}

void GuildWarSchedule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    contest_type_ = 0;
    contestprogresstype_ = 0;
    start_time_ = 0;
    end_time_ = 0;
    time_left_ = 0;
    if (has_str_start_time()) {
      if (str_start_time_ != &::google::protobuf::internal::kEmptyString) {
        str_start_time_->clear();
      }
    }
  }
  competitor_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contest_type;
        break;
      }
      
      // required int32 contest_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contest_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contest_type_)));
          set_has_contest_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ContestProgressType;
        break;
      }
      
      // required int32 ContestProgressType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ContestProgressType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contestprogresstype_)));
          set_has_contestprogresstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }
      
      // optional int32 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }
      
      // optional int32 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_competitor_info;
        break;
      }
      
      // repeated .protocols.common.CompetitorGuild competitor_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_competitor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_competitor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_competitor_info;
        if (input->ExpectTag(56)) goto parse_time_left;
        break;
      }
      
      // optional int32 time_left = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_)));
          set_has_time_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_str_start_time;
        break;
      }
      
      // optional string str_start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_start_time().data(), this->str_start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }
  
  // required int32 contest_type = 2;
  if (has_contest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contest_type(), output);
  }
  
  // required int32 ContestProgressType = 3;
  if (has_contestprogresstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contestprogresstype(), output);
  }
  
  // optional int32 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_time(), output);
  }
  
  // optional int32 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_time(), output);
  }
  
  // repeated .protocols.common.CompetitorGuild competitor_info = 6;
  for (int i = 0; i < this->competitor_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->competitor_info(i), output);
  }
  
  // optional int32 time_left = 7;
  if (has_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time_left(), output);
  }
  
  // optional string str_start_time = 8;
  if (has_str_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_start_time().data(), this->str_start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->str_start_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }
  
  // required int32 contest_type = 2;
  if (has_contest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contest_type(), target);
  }
  
  // required int32 ContestProgressType = 3;
  if (has_contestprogresstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contestprogresstype(), target);
  }
  
  // optional int32 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_time(), target);
  }
  
  // optional int32 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_time(), target);
  }
  
  // repeated .protocols.common.CompetitorGuild competitor_info = 6;
  for (int i = 0; i < this->competitor_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->competitor_info(i), target);
  }
  
  // optional int32 time_left = 7;
  if (has_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time_left(), target);
  }
  
  // optional string str_start_time = 8;
  if (has_str_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_start_time().data(), this->str_start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->str_start_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarSchedule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }
    
    // required int32 contest_type = 2;
    if (has_contest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contest_type());
    }
    
    // required int32 ContestProgressType = 3;
    if (has_contestprogresstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contestprogresstype());
    }
    
    // optional int32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }
    
    // optional int32 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }
    
    // optional int32 time_left = 7;
    if (has_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left());
    }
    
    // optional string str_start_time = 8;
    if (has_str_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_start_time());
    }
    
  }
  // repeated .protocols.common.CompetitorGuild competitor_info = 6;
  total_size += 1 * this->competitor_info_size();
  for (int i = 0; i < this->competitor_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->competitor_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarSchedule::MergeFrom(const GuildWarSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  competitor_info_.MergeFrom(from.competitor_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_contest_type()) {
      set_contest_type(from.contest_type());
    }
    if (from.has_contestprogresstype()) {
      set_contestprogresstype(from.contestprogresstype());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_time_left()) {
      set_time_left(from.time_left());
    }
    if (from.has_str_start_time()) {
      set_str_start_time(from.str_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarSchedule::CopyFrom(const GuildWarSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GuildWarSchedule::Swap(GuildWarSchedule* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(contest_type_, other->contest_type_);
    std::swap(contestprogresstype_, other->contestprogresstype_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(time_left_, other->time_left_);
    competitor_info_.Swap(&other->competitor_info_);
    std::swap(str_start_time_, other->str_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarSchedule_descriptor_;
  metadata.reflection = GuildWarSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildWarMapInfoRequest::GetGuildWarMapInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildWarMapInfoRequest::InitAsDefaultInstance() {
}

GetGuildWarMapInfoRequest::GetGuildWarMapInfoRequest(const GetGuildWarMapInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildWarMapInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildWarMapInfoRequest::~GetGuildWarMapInfoRequest() {
  SharedDtor();
}

void GetGuildWarMapInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildWarMapInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildWarMapInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildWarMapInfoRequest_descriptor_;
}

const GetGuildWarMapInfoRequest& GetGuildWarMapInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetGuildWarMapInfoRequest* GetGuildWarMapInfoRequest::default_instance_ = NULL;

GetGuildWarMapInfoRequest* GetGuildWarMapInfoRequest::New() const {
  return new GetGuildWarMapInfoRequest;
}

void GetGuildWarMapInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildWarMapInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetGuildWarMapInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildWarMapInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildWarMapInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildWarMapInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildWarMapInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildWarMapInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildWarMapInfoRequest::MergeFrom(const GetGuildWarMapInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildWarMapInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildWarMapInfoRequest::CopyFrom(const GetGuildWarMapInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildWarMapInfoRequest::IsInitialized() const {
  
  return true;
}

void GetGuildWarMapInfoRequest::Swap(GetGuildWarMapInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildWarMapInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildWarMapInfoRequest_descriptor_;
  metadata.reflection = GetGuildWarMapInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarMapInfo::kScheduleFieldNumber;
const int GuildWarMapInfo::kDamageBuffValueFieldNumber;
const int GuildWarMapInfo::kDefenceBuffValueFieldNumber;
const int GuildWarMapInfo::kBossInfoFieldNumber;
const int GuildWarMapInfo::kCdLeftFieldNumber;
#endif  // !_MSC_VER

GuildWarMapInfo::GuildWarMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarMapInfo::InitAsDefaultInstance() {
  schedule_ = const_cast< ::protocols::common::GuildWarSchedule*>(&::protocols::common::GuildWarSchedule::default_instance());
  boss_info_ = const_cast< ::protocols::common::BossInfo*>(&::protocols::common::BossInfo::default_instance());
}

GuildWarMapInfo::GuildWarMapInfo(const GuildWarMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarMapInfo::SharedCtor() {
  _cached_size_ = 0;
  schedule_ = NULL;
  damage_buff_value_ = 0;
  defence_buff_value_ = 0;
  boss_info_ = NULL;
  cd_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarMapInfo::~GuildWarMapInfo() {
  SharedDtor();
}

void GuildWarMapInfo::SharedDtor() {
  if (this != default_instance_) {
    delete schedule_;
    delete boss_info_;
  }
}

void GuildWarMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarMapInfo_descriptor_;
}

const GuildWarMapInfo& GuildWarMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarMapInfo* GuildWarMapInfo::default_instance_ = NULL;

GuildWarMapInfo* GuildWarMapInfo::New() const {
  return new GuildWarMapInfo;
}

void GuildWarMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_schedule()) {
      if (schedule_ != NULL) schedule_->::protocols::common::GuildWarSchedule::Clear();
    }
    damage_buff_value_ = 0;
    defence_buff_value_ = 0;
    if (has_boss_info()) {
      if (boss_info_ != NULL) boss_info_->::protocols::common::BossInfo::Clear();
    }
    cd_left_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildWarSchedule schedule = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_buff_value;
        break;
      }
      
      // optional int32 damage_buff_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_buff_value_)));
          set_has_damage_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence_buff_value;
        break;
      }
      
      // optional int32 defence_buff_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_buff_value_)));
          set_has_defence_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_boss_info;
        break;
      }
      
      // optional .protocols.common.BossInfo boss_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cd_left;
        break;
      }
      
      // optional int32 cd_left = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_left_)));
          set_has_cd_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildWarSchedule schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedule(), output);
  }
  
  // optional int32 damage_buff_value = 2;
  if (has_damage_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_buff_value(), output);
  }
  
  // optional int32 defence_buff_value = 3;
  if (has_defence_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence_buff_value(), output);
  }
  
  // optional .protocols.common.BossInfo boss_info = 4;
  if (has_boss_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boss_info(), output);
  }
  
  // optional int32 cd_left = 5;
  if (has_cd_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cd_left(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildWarSchedule schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedule(), target);
  }
  
  // optional int32 damage_buff_value = 2;
  if (has_damage_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_buff_value(), target);
  }
  
  // optional int32 defence_buff_value = 3;
  if (has_defence_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence_buff_value(), target);
  }
  
  // optional .protocols.common.BossInfo boss_info = 4;
  if (has_boss_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boss_info(), target);
  }
  
  // optional int32 cd_left = 5;
  if (has_cd_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cd_left(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarMapInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildWarSchedule schedule = 1;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule());
    }
    
    // optional int32 damage_buff_value = 2;
    if (has_damage_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_buff_value());
    }
    
    // optional int32 defence_buff_value = 3;
    if (has_defence_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_buff_value());
    }
    
    // optional .protocols.common.BossInfo boss_info = 4;
    if (has_boss_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_info());
    }
    
    // optional int32 cd_left = 5;
    if (has_cd_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_left());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarMapInfo::MergeFrom(const GuildWarMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedule()) {
      mutable_schedule()->::protocols::common::GuildWarSchedule::MergeFrom(from.schedule());
    }
    if (from.has_damage_buff_value()) {
      set_damage_buff_value(from.damage_buff_value());
    }
    if (from.has_defence_buff_value()) {
      set_defence_buff_value(from.defence_buff_value());
    }
    if (from.has_boss_info()) {
      mutable_boss_info()->::protocols::common::BossInfo::MergeFrom(from.boss_info());
    }
    if (from.has_cd_left()) {
      set_cd_left(from.cd_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarMapInfo::CopyFrom(const GuildWarMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarMapInfo::IsInitialized() const {
  
  if (has_schedule()) {
    if (!this->schedule().IsInitialized()) return false;
  }
  return true;
}

void GuildWarMapInfo::Swap(GuildWarMapInfo* other) {
  if (other != this) {
    std::swap(schedule_, other->schedule_);
    std::swap(damage_buff_value_, other->damage_buff_value_);
    std::swap(defence_buff_value_, other->defence_buff_value_);
    std::swap(boss_info_, other->boss_info_);
    std::swap(cd_left_, other->cd_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarMapInfo_descriptor_;
  metadata.reflection = GuildWarMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildWarMapInfoResponse::kErrorCodeFieldNumber;
const int GetGuildWarMapInfoResponse::kMapInfoFieldNumber;
const int GetGuildWarMapInfoResponse::kBattleInfoAFieldNumber;
const int GetGuildWarMapInfoResponse::kBattleInfoBFieldNumber;
#endif  // !_MSC_VER

GetGuildWarMapInfoResponse::GetGuildWarMapInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildWarMapInfoResponse::InitAsDefaultInstance() {
  map_info_ = const_cast< ::protocols::common::GuildWarMapInfo*>(&::protocols::common::GuildWarMapInfo::default_instance());
  battle_info_a_ = const_cast< ::protocols::common::GuildWarGuildBattleInfo*>(&::protocols::common::GuildWarGuildBattleInfo::default_instance());
  battle_info_b_ = const_cast< ::protocols::common::GuildWarGuildBattleInfo*>(&::protocols::common::GuildWarGuildBattleInfo::default_instance());
}

GetGuildWarMapInfoResponse::GetGuildWarMapInfoResponse(const GetGuildWarMapInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildWarMapInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  map_info_ = NULL;
  battle_info_a_ = NULL;
  battle_info_b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildWarMapInfoResponse::~GetGuildWarMapInfoResponse() {
  SharedDtor();
}

void GetGuildWarMapInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete map_info_;
    delete battle_info_a_;
    delete battle_info_b_;
  }
}

void GetGuildWarMapInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildWarMapInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildWarMapInfoResponse_descriptor_;
}

const GetGuildWarMapInfoResponse& GetGuildWarMapInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetGuildWarMapInfoResponse* GetGuildWarMapInfoResponse::default_instance_ = NULL;

GetGuildWarMapInfoResponse* GetGuildWarMapInfoResponse::New() const {
  return new GetGuildWarMapInfoResponse;
}

void GetGuildWarMapInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_map_info()) {
      if (map_info_ != NULL) map_info_->::protocols::common::GuildWarMapInfo::Clear();
    }
    if (has_battle_info_a()) {
      if (battle_info_a_ != NULL) battle_info_a_->::protocols::common::GuildWarGuildBattleInfo::Clear();
    }
    if (has_battle_info_b()) {
      if (battle_info_b_ != NULL) battle_info_b_->::protocols::common::GuildWarGuildBattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGuildWarMapInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_info;
        break;
      }
      
      // optional .protocols.common.GuildWarMapInfo map_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_info_a;
        break;
      }
      
      // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle_info_b;
        break;
      }
      
      // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGuildWarMapInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  if (has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map_info(), output);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
  if (has_battle_info_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_info_a(), output);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
  if (has_battle_info_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_info_b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildWarMapInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  if (has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map_info(), target);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
  if (has_battle_info_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_info_a(), target);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
  if (has_battle_info_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_info_b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildWarMapInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.GuildWarMapInfo map_info = 2;
    if (has_map_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_info());
    }
    
    // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 3;
    if (has_battle_info_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_a());
    }
    
    // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 4;
    if (has_battle_info_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_b());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildWarMapInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildWarMapInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildWarMapInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGuildWarMapInfoResponse::MergeFrom(const GetGuildWarMapInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_map_info()) {
      mutable_map_info()->::protocols::common::GuildWarMapInfo::MergeFrom(from.map_info());
    }
    if (from.has_battle_info_a()) {
      mutable_battle_info_a()->::protocols::common::GuildWarGuildBattleInfo::MergeFrom(from.battle_info_a());
    }
    if (from.has_battle_info_b()) {
      mutable_battle_info_b()->::protocols::common::GuildWarGuildBattleInfo::MergeFrom(from.battle_info_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGuildWarMapInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGuildWarMapInfoResponse::CopyFrom(const GetGuildWarMapInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGuildWarMapInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_map_info()) {
    if (!this->map_info().IsInitialized()) return false;
  }
  return true;
}

void GetGuildWarMapInfoResponse::Swap(GetGuildWarMapInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(map_info_, other->map_info_);
    std::swap(battle_info_a_, other->battle_info_a_);
    std::swap(battle_info_b_, other->battle_info_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGuildWarMapInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildWarMapInfoResponse_descriptor_;
  metadata.reflection = GetGuildWarMapInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarNotify::kNotifyTypeFieldNumber;
const int GuildWarNotify::kGuildIdFieldNumber;
const int GuildWarNotify::kGuildNameFieldNumber;
const int GuildWarNotify::kMapInfoFieldNumber;
const int GuildWarNotify::kAddBuffTypeFieldNumber;
const int GuildWarNotify::kPlayerInfoFieldNumber;
const int GuildWarNotify::kDeltaContributionFieldNumber;
const int GuildWarNotify::kCdLeftFieldNumber;
const int GuildWarNotify::kBattleResultFieldNumber;
const int GuildWarNotify::kGuildRanksFieldNumber;
const int GuildWarNotify::kAwardFieldNumber;
const int GuildWarNotify::kBattleInfoAFieldNumber;
const int GuildWarNotify::kBattleInfoBFieldNumber;
#endif  // !_MSC_VER

GuildWarNotify::GuildWarNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarNotify::InitAsDefaultInstance() {
  map_info_ = const_cast< ::protocols::common::GuildWarMapInfo*>(&::protocols::common::GuildWarMapInfo::default_instance());
  player_info_ = const_cast< ::protocols::common::GuildWarContributionPlayer*>(&::protocols::common::GuildWarContributionPlayer::default_instance());
  award_ = const_cast< ::protocols::common::GuildWarAward*>(&::protocols::common::GuildWarAward::default_instance());
  battle_info_a_ = const_cast< ::protocols::common::GuildWarGuildBattleInfo*>(&::protocols::common::GuildWarGuildBattleInfo::default_instance());
  battle_info_b_ = const_cast< ::protocols::common::GuildWarGuildBattleInfo*>(&::protocols::common::GuildWarGuildBattleInfo::default_instance());
}

GuildWarNotify::GuildWarNotify(const GuildWarNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_type_ = 0;
  guild_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_info_ = NULL;
  add_buff_type_ = 0;
  player_info_ = NULL;
  delta_contribution_ = 0;
  cd_left_ = 0;
  award_ = NULL;
  battle_info_a_ = NULL;
  battle_info_b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarNotify::~GuildWarNotify() {
  SharedDtor();
}

void GuildWarNotify::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete map_info_;
    delete player_info_;
    delete award_;
    delete battle_info_a_;
    delete battle_info_b_;
  }
}

void GuildWarNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarNotify_descriptor_;
}

const GuildWarNotify& GuildWarNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarNotify* GuildWarNotify::default_instance_ = NULL;

GuildWarNotify* GuildWarNotify::New() const {
  return new GuildWarNotify;
}

void GuildWarNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notify_type_ = 0;
    guild_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_map_info()) {
      if (map_info_ != NULL) map_info_->::protocols::common::GuildWarMapInfo::Clear();
    }
    add_buff_type_ = 0;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::GuildWarContributionPlayer::Clear();
    }
    delta_contribution_ = 0;
    cd_left_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_award()) {
      if (award_ != NULL) award_->::protocols::common::GuildWarAward::Clear();
    }
    if (has_battle_info_a()) {
      if (battle_info_a_ != NULL) battle_info_a_->::protocols::common::GuildWarGuildBattleInfo::Clear();
    }
    if (has_battle_info_b()) {
      if (battle_info_b_ != NULL) battle_info_b_->::protocols::common::GuildWarGuildBattleInfo::Clear();
    }
  }
  battle_result_.Clear();
  guild_ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 notify_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_type_)));
          set_has_notify_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map_info;
        break;
      }
      
      // optional .protocols.common.GuildWarMapInfo map_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_buff_type;
        break;
      }
      
      // optional int32 add_buff_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_buff_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_buff_type_)));
          set_has_add_buff_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_info;
        break;
      }
      
      // optional .protocols.common.GuildWarContributionPlayer player_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delta_contribution;
        break;
      }
      
      // optional int32 delta_contribution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_contribution_)));
          set_has_delta_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cd_left;
        break;
      }
      
      // optional int32 cd_left = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_left_)));
          set_has_cd_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_battle_result;
        break;
      }
      
      // repeated .protocols.common.GuildWarBattleResult battle_result = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_battle_result;
        if (input->ExpectTag(74)) goto parse_guild_ranks;
        break;
      }
      
      // repeated .protocols.common.GuildInfo guild_ranks = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guild_ranks;
        if (input->ExpectTag(82)) goto parse_award;
        break;
      }
      
      // optional .protocols.common.GuildWarAward award = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_battle_info_a;
        break;
      }
      
      // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_battle_info_b;
        break;
      }
      
      // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 notify_type = 1;
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->notify_type(), output);
  }
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  if (has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map_info(), output);
  }
  
  // optional int32 add_buff_type = 3;
  if (has_add_buff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_buff_type(), output);
  }
  
  // optional .protocols.common.GuildWarContributionPlayer player_info = 4;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_info(), output);
  }
  
  // optional int32 delta_contribution = 5;
  if (has_delta_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delta_contribution(), output);
  }
  
  // optional int32 cd_left = 7;
  if (has_cd_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cd_left(), output);
  }
  
  // repeated .protocols.common.GuildWarBattleResult battle_result = 8;
  for (int i = 0; i < this->battle_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->battle_result(i), output);
  }
  
  // repeated .protocols.common.GuildInfo guild_ranks = 9;
  for (int i = 0; i < this->guild_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->guild_ranks(i), output);
  }
  
  // optional .protocols.common.GuildWarAward award = 10;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->award(), output);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
  if (has_battle_info_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->battle_info_a(), output);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
  if (has_battle_info_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->battle_info_b(), output);
  }
  
  // optional int32 guild_id = 13;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->guild_id(), output);
  }
  
  // optional string guild_name = 14;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->guild_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 notify_type = 1;
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->notify_type(), target);
  }
  
  // optional .protocols.common.GuildWarMapInfo map_info = 2;
  if (has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map_info(), target);
  }
  
  // optional int32 add_buff_type = 3;
  if (has_add_buff_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_buff_type(), target);
  }
  
  // optional .protocols.common.GuildWarContributionPlayer player_info = 4;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_info(), target);
  }
  
  // optional int32 delta_contribution = 5;
  if (has_delta_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delta_contribution(), target);
  }
  
  // optional int32 cd_left = 7;
  if (has_cd_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cd_left(), target);
  }
  
  // repeated .protocols.common.GuildWarBattleResult battle_result = 8;
  for (int i = 0; i < this->battle_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->battle_result(i), target);
  }
  
  // repeated .protocols.common.GuildInfo guild_ranks = 9;
  for (int i = 0; i < this->guild_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->guild_ranks(i), target);
  }
  
  // optional .protocols.common.GuildWarAward award = 10;
  if (has_award()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->award(), target);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
  if (has_battle_info_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->battle_info_a(), target);
  }
  
  // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
  if (has_battle_info_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->battle_info_b(), target);
  }
  
  // optional int32 guild_id = 13;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->guild_id(), target);
  }
  
  // optional string guild_name = 14;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->guild_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 notify_type = 1;
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_type());
    }
    
    // optional int32 guild_id = 13;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional string guild_name = 14;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional .protocols.common.GuildWarMapInfo map_info = 2;
    if (has_map_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_info());
    }
    
    // optional int32 add_buff_type = 3;
    if (has_add_buff_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_buff_type());
    }
    
    // optional .protocols.common.GuildWarContributionPlayer player_info = 4;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional int32 delta_contribution = 5;
    if (has_delta_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_contribution());
    }
    
    // optional int32 cd_left = 7;
    if (has_cd_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_left());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .protocols.common.GuildWarAward award = 10;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }
    
    // optional .protocols.common.GuildWarGuildBattleInfo battle_info_a = 11;
    if (has_battle_info_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_a());
    }
    
    // optional .protocols.common.GuildWarGuildBattleInfo battle_info_b = 12;
    if (has_battle_info_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_b());
    }
    
  }
  // repeated .protocols.common.GuildWarBattleResult battle_result = 8;
  total_size += 1 * this->battle_result_size();
  for (int i = 0; i < this->battle_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_result(i));
  }
  
  // repeated .protocols.common.GuildInfo guild_ranks = 9;
  total_size += 1 * this->guild_ranks_size();
  for (int i = 0; i < this->guild_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_ranks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarNotify::MergeFrom(const GuildWarNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_result_.MergeFrom(from.battle_result_);
  guild_ranks_.MergeFrom(from.guild_ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_map_info()) {
      mutable_map_info()->::protocols::common::GuildWarMapInfo::MergeFrom(from.map_info());
    }
    if (from.has_add_buff_type()) {
      set_add_buff_type(from.add_buff_type());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::GuildWarContributionPlayer::MergeFrom(from.player_info());
    }
    if (from.has_delta_contribution()) {
      set_delta_contribution(from.delta_contribution());
    }
    if (from.has_cd_left()) {
      set_cd_left(from.cd_left());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_award()) {
      mutable_award()->::protocols::common::GuildWarAward::MergeFrom(from.award());
    }
    if (from.has_battle_info_a()) {
      mutable_battle_info_a()->::protocols::common::GuildWarGuildBattleInfo::MergeFrom(from.battle_info_a());
    }
    if (from.has_battle_info_b()) {
      mutable_battle_info_b()->::protocols::common::GuildWarGuildBattleInfo::MergeFrom(from.battle_info_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarNotify::CopyFrom(const GuildWarNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_map_info()) {
    if (!this->map_info().IsInitialized()) return false;
  }
  return true;
}

void GuildWarNotify::Swap(GuildWarNotify* other) {
  if (other != this) {
    std::swap(notify_type_, other->notify_type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(map_info_, other->map_info_);
    std::swap(add_buff_type_, other->add_buff_type_);
    std::swap(player_info_, other->player_info_);
    std::swap(delta_contribution_, other->delta_contribution_);
    std::swap(cd_left_, other->cd_left_);
    battle_result_.Swap(&other->battle_result_);
    guild_ranks_.Swap(&other->guild_ranks_);
    std::swap(award_, other->award_);
    std::swap(battle_info_a_, other->battle_info_a_);
    std::swap(battle_info_b_, other->battle_info_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarNotify_descriptor_;
  metadata.reflection = GuildWarNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarGuildBattleInfo::kGuildIdFieldNumber;
const int GuildWarGuildBattleInfo::kGuildNameFieldNumber;
const int GuildWarGuildBattleInfo::kPlayerLeftFieldNumber;
const int GuildWarGuildBattleInfo::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

GuildWarGuildBattleInfo::GuildWarGuildBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarGuildBattleInfo::InitAsDefaultInstance() {
}

GuildWarGuildBattleInfo::GuildWarGuildBattleInfo(const GuildWarGuildBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarGuildBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarGuildBattleInfo::~GuildWarGuildBattleInfo() {
  SharedDtor();
}

void GuildWarGuildBattleInfo::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarGuildBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarGuildBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarGuildBattleInfo_descriptor_;
}

const GuildWarGuildBattleInfo& GuildWarGuildBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarGuildBattleInfo* GuildWarGuildBattleInfo::default_instance_ = NULL;

GuildWarGuildBattleInfo* GuildWarGuildBattleInfo::New() const {
  return new GuildWarGuildBattleInfo;
}

void GuildWarGuildBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    player_left_ = 0;
  }
  player_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarGuildBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_left;
        break;
      }
      
      // optional int32 player_left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_left_)));
          set_has_player_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_infos;
        break;
      }
      
      // repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarGuildBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }
  
  // optional int32 player_left = 3;
  if (has_player_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_left(), output);
  }
  
  // repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
  for (int i = 0; i < this->player_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarGuildBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }
  
  // optional int32 player_left = 3;
  if (has_player_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_left(), target);
  }
  
  // repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
  for (int i = 0; i < this->player_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarGuildBattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional int32 player_left = 3;
    if (has_player_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_left());
    }
    
  }
  // repeated .protocols.common.GuildWarPlayerInfo player_infos = 4;
  total_size += 1 * this->player_infos_size();
  for (int i = 0; i < this->player_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarGuildBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarGuildBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarGuildBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarGuildBattleInfo::MergeFrom(const GuildWarGuildBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_infos_.MergeFrom(from.player_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_player_left()) {
      set_player_left(from.player_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarGuildBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarGuildBattleInfo::CopyFrom(const GuildWarGuildBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarGuildBattleInfo::IsInitialized() const {
  
  return true;
}

void GuildWarGuildBattleInfo::Swap(GuildWarGuildBattleInfo* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(player_left_, other->player_left_);
    player_infos_.Swap(&other->player_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarGuildBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarGuildBattleInfo_descriptor_;
  metadata.reflection = GuildWarGuildBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarPlayerInfo::kNameFieldNumber;
const int GuildWarPlayerInfo::kGuidFieldNumber;
const int GuildWarPlayerInfo::kTeamIdFieldNumber;
const int GuildWarPlayerInfo::kTeamLeaderIdFieldNumber;
const int GuildWarPlayerInfo::kIsDeadFieldNumber;
const int GuildWarPlayerInfo::kDeathNumFieldNumber;
const int GuildWarPlayerInfo::kWinNumFieldNumber;
const int GuildWarPlayerInfo::kDevoteNumFieldNumber;
const int GuildWarPlayerInfo::kCdLeftFieldNumber;
#endif  // !_MSC_VER

GuildWarPlayerInfo::GuildWarPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarPlayerInfo::InitAsDefaultInstance() {
}

GuildWarPlayerInfo::GuildWarPlayerInfo(const GuildWarPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = GOOGLE_LONGLONG(0);
  team_id_ = 0;
  team_leader_id_ = GOOGLE_LONGLONG(0);
  is_dead_ = false;
  death_num_ = 0;
  win_num_ = 0;
  devote_num_ = 0;
  cd_left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarPlayerInfo::~GuildWarPlayerInfo() {
  SharedDtor();
}

void GuildWarPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarPlayerInfo_descriptor_;
}

const GuildWarPlayerInfo& GuildWarPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarPlayerInfo* GuildWarPlayerInfo::default_instance_ = NULL;

GuildWarPlayerInfo* GuildWarPlayerInfo::New() const {
  return new GuildWarPlayerInfo;
}

void GuildWarPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guid_ = GOOGLE_LONGLONG(0);
    team_id_ = 0;
    team_leader_id_ = GOOGLE_LONGLONG(0);
    is_dead_ = false;
    death_num_ = 0;
    win_num_ = 0;
    devote_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cd_left_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_leader_id;
        break;
      }
      
      // optional int64 team_leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &team_leader_id_)));
          set_has_team_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_dead;
        break;
      }
      
      // optional bool is_dead = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_death_num;
        break;
      }
      
      // optional int32 death_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_death_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_num_)));
          set_has_death_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_num;
        break;
      }
      
      // optional int32 win_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_devote_num;
        break;
      }
      
      // optional int32 devote_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devote_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devote_num_)));
          set_has_devote_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team_id;
        break;
      }
      
      // optional int32 team_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cd_left;
        break;
      }
      
      // optional int32 cd_left = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_left_)));
          set_has_cd_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional int64 team_leader_id = 3;
  if (has_team_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->team_leader_id(), output);
  }
  
  // optional bool is_dead = 4;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dead(), output);
  }
  
  // optional int32 death_num = 5;
  if (has_death_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->death_num(), output);
  }
  
  // optional int32 win_num = 6;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win_num(), output);
  }
  
  // optional int32 devote_num = 7;
  if (has_devote_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->devote_num(), output);
  }
  
  // optional int32 team_id = 8;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->team_id(), output);
  }
  
  // optional int32 cd_left = 9;
  if (has_cd_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cd_left(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional int64 team_leader_id = 3;
  if (has_team_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->team_leader_id(), target);
  }
  
  // optional bool is_dead = 4;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dead(), target);
  }
  
  // optional int32 death_num = 5;
  if (has_death_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->death_num(), target);
  }
  
  // optional int32 win_num = 6;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win_num(), target);
  }
  
  // optional int32 devote_num = 7;
  if (has_devote_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->devote_num(), target);
  }
  
  // optional int32 team_id = 8;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->team_id(), target);
  }
  
  // optional int32 cd_left = 9;
  if (has_cd_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cd_left(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 team_id = 8;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // optional int64 team_leader_id = 3;
    if (has_team_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->team_leader_id());
    }
    
    // optional bool is_dead = 4;
    if (has_is_dead()) {
      total_size += 1 + 1;
    }
    
    // optional int32 death_num = 5;
    if (has_death_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_num());
    }
    
    // optional int32 win_num = 6;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }
    
    // optional int32 devote_num = 7;
    if (has_devote_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devote_num());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cd_left = 9;
    if (has_cd_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_left());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarPlayerInfo::MergeFrom(const GuildWarPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_leader_id()) {
      set_team_leader_id(from.team_leader_id());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
    if (from.has_death_num()) {
      set_death_num(from.death_num());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_devote_num()) {
      set_devote_num(from.devote_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cd_left()) {
      set_cd_left(from.cd_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarPlayerInfo::CopyFrom(const GuildWarPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarPlayerInfo::IsInitialized() const {
  
  return true;
}

void GuildWarPlayerInfo::Swap(GuildWarPlayerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_leader_id_, other->team_leader_id_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(death_num_, other->death_num_);
    std::swap(win_num_, other->win_num_);
    std::swap(devote_num_, other->devote_num_);
    std::swap(cd_left_, other->cd_left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarPlayerInfo_descriptor_;
  metadata.reflection = GuildWarPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarAward::kIsWinerFieldNumber;
const int GuildWarAward::kExpFieldNumber;
const int GuildWarAward::kGoldFieldNumber;
const int GuildWarAward::kOpponentGuildIdFieldNumber;
const int GuildWarAward::kOpponentGuildNameFieldNumber;
const int GuildWarAward::kRankFieldNumber;
#endif  // !_MSC_VER

GuildWarAward::GuildWarAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarAward::InitAsDefaultInstance() {
}

GuildWarAward::GuildWarAward(const GuildWarAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarAward::SharedCtor() {
  _cached_size_ = 0;
  is_winer_ = false;
  exp_ = 0;
  gold_ = 0;
  opponent_guild_id_ = 0;
  opponent_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarAward::~GuildWarAward() {
  SharedDtor();
}

void GuildWarAward::SharedDtor() {
  if (opponent_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete opponent_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarAward_descriptor_;
}

const GuildWarAward& GuildWarAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarAward* GuildWarAward::default_instance_ = NULL;

GuildWarAward* GuildWarAward::New() const {
  return new GuildWarAward;
}

void GuildWarAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_winer_ = false;
    exp_ = 0;
    gold_ = 0;
    opponent_guild_id_ = 0;
    if (has_opponent_guild_name()) {
      if (opponent_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        opponent_guild_name_->clear();
      }
    }
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_winer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_winer_)));
          set_has_is_winer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }
      
      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opponent_guild_id;
        break;
      }
      
      // optional int32 opponent_guild_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opponent_guild_id_)));
          set_has_opponent_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_opponent_guild_name;
        break;
      }
      
      // optional string opponent_guild_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponent_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opponent_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opponent_guild_name().data(), this->opponent_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_winer = 1;
  if (has_is_winer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_winer(), output);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }
  
  // optional int32 opponent_guild_id = 4;
  if (has_opponent_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opponent_guild_id(), output);
  }
  
  // optional string opponent_guild_name = 5;
  if (has_opponent_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opponent_guild_name().data(), this->opponent_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->opponent_guild_name(), output);
  }
  
  // optional int32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_winer = 1;
  if (has_is_winer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_winer(), target);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }
  
  // optional int32 opponent_guild_id = 4;
  if (has_opponent_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opponent_guild_id(), target);
  }
  
  // optional string opponent_guild_name = 5;
  if (has_opponent_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opponent_guild_name().data(), this->opponent_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->opponent_guild_name(), target);
  }
  
  // optional int32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarAward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_winer = 1;
    if (has_is_winer()) {
      total_size += 1 + 1;
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
    // optional int32 opponent_guild_id = 4;
    if (has_opponent_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opponent_guild_id());
    }
    
    // optional string opponent_guild_name = 5;
    if (has_opponent_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opponent_guild_name());
    }
    
    // optional int32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarAward::MergeFrom(const GuildWarAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_winer()) {
      set_is_winer(from.is_winer());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_opponent_guild_id()) {
      set_opponent_guild_id(from.opponent_guild_id());
    }
    if (from.has_opponent_guild_name()) {
      set_opponent_guild_name(from.opponent_guild_name());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarAward::CopyFrom(const GuildWarAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarAward::IsInitialized() const {
  
  return true;
}

void GuildWarAward::Swap(GuildWarAward* other) {
  if (other != this) {
    std::swap(is_winer_, other->is_winer_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(opponent_guild_id_, other->opponent_guild_id_);
    std::swap(opponent_guild_name_, other->opponent_guild_name_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarAward_descriptor_;
  metadata.reflection = GuildWarAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarBattleResult::kCampAGuildFieldNumber;
const int GuildWarBattleResult::kCampBGuildFieldNumber;
const int GuildWarBattleResult::kWinNumOfAFieldNumber;
const int GuildWarBattleResult::kPlayerANameFieldNumber;
const int GuildWarBattleResult::kPlayerBNameFieldNumber;
const int GuildWarBattleResult::kPlayerAGuidFieldNumber;
const int GuildWarBattleResult::kPlayerBGuidFieldNumber;
#endif  // !_MSC_VER

GuildWarBattleResult::GuildWarBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarBattleResult::InitAsDefaultInstance() {
  camp_a_guild_ = const_cast< ::protocols::common::GuildInfo*>(&::protocols::common::GuildInfo::default_instance());
  camp_b_guild_ = const_cast< ::protocols::common::GuildInfo*>(&::protocols::common::GuildInfo::default_instance());
}

GuildWarBattleResult::GuildWarBattleResult(const GuildWarBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarBattleResult::SharedCtor() {
  _cached_size_ = 0;
  camp_a_guild_ = NULL;
  camp_b_guild_ = NULL;
  win_num_of_a_ = 0;
  player_a_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_b_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_a_guid_ = GOOGLE_LONGLONG(0);
  player_b_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarBattleResult::~GuildWarBattleResult() {
  SharedDtor();
}

void GuildWarBattleResult::SharedDtor() {
  if (player_a_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_a_name_;
  }
  if (player_b_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_b_name_;
  }
  if (this != default_instance_) {
    delete camp_a_guild_;
    delete camp_b_guild_;
  }
}

void GuildWarBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarBattleResult_descriptor_;
}

const GuildWarBattleResult& GuildWarBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarBattleResult* GuildWarBattleResult::default_instance_ = NULL;

GuildWarBattleResult* GuildWarBattleResult::New() const {
  return new GuildWarBattleResult;
}

void GuildWarBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_camp_a_guild()) {
      if (camp_a_guild_ != NULL) camp_a_guild_->::protocols::common::GuildInfo::Clear();
    }
    if (has_camp_b_guild()) {
      if (camp_b_guild_ != NULL) camp_b_guild_->::protocols::common::GuildInfo::Clear();
    }
    win_num_of_a_ = 0;
    if (has_player_a_name()) {
      if (player_a_name_ != &::google::protobuf::internal::kEmptyString) {
        player_a_name_->clear();
      }
    }
    if (has_player_b_name()) {
      if (player_b_name_ != &::google::protobuf::internal::kEmptyString) {
        player_b_name_->clear();
      }
    }
    player_a_guid_ = GOOGLE_LONGLONG(0);
    player_b_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildInfo camp_a_guild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp_a_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camp_b_guild;
        break;
      }
      
      // optional .protocols.common.GuildInfo camp_b_guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_b_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp_b_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num_of_a;
        break;
      }
      
      // optional int32 win_num_of_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num_of_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_of_a_)));
          set_has_win_num_of_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_a_name;
        break;
      }
      
      // optional string player_a_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_a_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_a_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_a_name().data(), this->player_a_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_player_b_name;
        break;
      }
      
      // optional string player_b_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_b_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_b_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_b_name().data(), this->player_b_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_a_guid;
        break;
      }
      
      // optional int64 player_a_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_a_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_a_guid_)));
          set_has_player_a_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_player_b_guid;
        break;
      }
      
      // optional int64 player_b_guid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_b_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_b_guid_)));
          set_has_player_b_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildInfo camp_a_guild = 1;
  if (has_camp_a_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camp_a_guild(), output);
  }
  
  // optional .protocols.common.GuildInfo camp_b_guild = 2;
  if (has_camp_b_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camp_b_guild(), output);
  }
  
  // optional int32 win_num_of_a = 3;
  if (has_win_num_of_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num_of_a(), output);
  }
  
  // optional string player_a_name = 4;
  if (has_player_a_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_a_name().data(), this->player_a_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->player_a_name(), output);
  }
  
  // optional string player_b_name = 5;
  if (has_player_b_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_b_name().data(), this->player_b_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->player_b_name(), output);
  }
  
  // optional int64 player_a_guid = 6;
  if (has_player_a_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->player_a_guid(), output);
  }
  
  // optional int64 player_b_guid = 7;
  if (has_player_b_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->player_b_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildInfo camp_a_guild = 1;
  if (has_camp_a_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camp_a_guild(), target);
  }
  
  // optional .protocols.common.GuildInfo camp_b_guild = 2;
  if (has_camp_b_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camp_b_guild(), target);
  }
  
  // optional int32 win_num_of_a = 3;
  if (has_win_num_of_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num_of_a(), target);
  }
  
  // optional string player_a_name = 4;
  if (has_player_a_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_a_name().data(), this->player_a_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_a_name(), target);
  }
  
  // optional string player_b_name = 5;
  if (has_player_b_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_b_name().data(), this->player_b_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->player_b_name(), target);
  }
  
  // optional int64 player_a_guid = 6;
  if (has_player_a_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->player_a_guid(), target);
  }
  
  // optional int64 player_b_guid = 7;
  if (has_player_b_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->player_b_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarBattleResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildInfo camp_a_guild = 1;
    if (has_camp_a_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp_a_guild());
    }
    
    // optional .protocols.common.GuildInfo camp_b_guild = 2;
    if (has_camp_b_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp_b_guild());
    }
    
    // optional int32 win_num_of_a = 3;
    if (has_win_num_of_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num_of_a());
    }
    
    // optional string player_a_name = 4;
    if (has_player_a_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_a_name());
    }
    
    // optional string player_b_name = 5;
    if (has_player_b_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_b_name());
    }
    
    // optional int64 player_a_guid = 6;
    if (has_player_a_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_a_guid());
    }
    
    // optional int64 player_b_guid = 7;
    if (has_player_b_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_b_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarBattleResult::MergeFrom(const GuildWarBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp_a_guild()) {
      mutable_camp_a_guild()->::protocols::common::GuildInfo::MergeFrom(from.camp_a_guild());
    }
    if (from.has_camp_b_guild()) {
      mutable_camp_b_guild()->::protocols::common::GuildInfo::MergeFrom(from.camp_b_guild());
    }
    if (from.has_win_num_of_a()) {
      set_win_num_of_a(from.win_num_of_a());
    }
    if (from.has_player_a_name()) {
      set_player_a_name(from.player_a_name());
    }
    if (from.has_player_b_name()) {
      set_player_b_name(from.player_b_name());
    }
    if (from.has_player_a_guid()) {
      set_player_a_guid(from.player_a_guid());
    }
    if (from.has_player_b_guid()) {
      set_player_b_guid(from.player_b_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarBattleResult::CopyFrom(const GuildWarBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarBattleResult::IsInitialized() const {
  
  return true;
}

void GuildWarBattleResult::Swap(GuildWarBattleResult* other) {
  if (other != this) {
    std::swap(camp_a_guild_, other->camp_a_guild_);
    std::swap(camp_b_guild_, other->camp_b_guild_);
    std::swap(win_num_of_a_, other->win_num_of_a_);
    std::swap(player_a_name_, other->player_a_name_);
    std::swap(player_b_name_, other->player_b_name_);
    std::swap(player_a_guid_, other->player_a_guid_);
    std::swap(player_b_guid_, other->player_b_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarBattleResult_descriptor_;
  metadata.reflection = GuildWarBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompetitorGuild::kSectionFieldNumber;
const int CompetitorGuild::kCampAGuildFieldNumber;
const int CompetitorGuild::kCampBGuildFieldNumber;
const int CompetitorGuild::kWinnerGuildIdFieldNumber;
#endif  // !_MSC_VER

CompetitorGuild::CompetitorGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompetitorGuild::InitAsDefaultInstance() {
  camp_a_guild_ = const_cast< ::protocols::common::GuildInfo*>(&::protocols::common::GuildInfo::default_instance());
  camp_b_guild_ = const_cast< ::protocols::common::GuildInfo*>(&::protocols::common::GuildInfo::default_instance());
}

CompetitorGuild::CompetitorGuild(const CompetitorGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompetitorGuild::SharedCtor() {
  _cached_size_ = 0;
  section_ = 0;
  camp_a_guild_ = NULL;
  camp_b_guild_ = NULL;
  winner_guild_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompetitorGuild::~CompetitorGuild() {
  SharedDtor();
}

void CompetitorGuild::SharedDtor() {
  if (this != default_instance_) {
    delete camp_a_guild_;
    delete camp_b_guild_;
  }
}

void CompetitorGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompetitorGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompetitorGuild_descriptor_;
}

const CompetitorGuild& CompetitorGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

CompetitorGuild* CompetitorGuild::default_instance_ = NULL;

CompetitorGuild* CompetitorGuild::New() const {
  return new CompetitorGuild;
}

void CompetitorGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    section_ = 0;
    if (has_camp_a_guild()) {
      if (camp_a_guild_ != NULL) camp_a_guild_->::protocols::common::GuildInfo::Clear();
    }
    if (has_camp_b_guild()) {
      if (camp_b_guild_ != NULL) camp_b_guild_->::protocols::common::GuildInfo::Clear();
    }
    winner_guild_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompetitorGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 section = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &section_)));
          set_has_section();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camp_a_guild;
        break;
      }
      
      // optional .protocols.common.GuildInfo camp_a_guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_a_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp_a_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camp_b_guild;
        break;
      }
      
      // optional .protocols.common.GuildInfo camp_b_guild = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_b_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camp_b_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner_guild_id;
        break;
      }
      
      // optional int32 winner_guild_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_guild_id_)));
          set_has_winner_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompetitorGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 section = 1;
  if (has_section()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->section(), output);
  }
  
  // optional .protocols.common.GuildInfo camp_a_guild = 2;
  if (has_camp_a_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camp_a_guild(), output);
  }
  
  // optional .protocols.common.GuildInfo camp_b_guild = 3;
  if (has_camp_b_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camp_b_guild(), output);
  }
  
  // optional int32 winner_guild_id = 4;
  if (has_winner_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winner_guild_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompetitorGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 section = 1;
  if (has_section()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->section(), target);
  }
  
  // optional .protocols.common.GuildInfo camp_a_guild = 2;
  if (has_camp_a_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camp_a_guild(), target);
  }
  
  // optional .protocols.common.GuildInfo camp_b_guild = 3;
  if (has_camp_b_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camp_b_guild(), target);
  }
  
  // optional int32 winner_guild_id = 4;
  if (has_winner_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winner_guild_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompetitorGuild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 section = 1;
    if (has_section()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->section());
    }
    
    // optional .protocols.common.GuildInfo camp_a_guild = 2;
    if (has_camp_a_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp_a_guild());
    }
    
    // optional .protocols.common.GuildInfo camp_b_guild = 3;
    if (has_camp_b_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camp_b_guild());
    }
    
    // optional int32 winner_guild_id = 4;
    if (has_winner_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_guild_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompetitorGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompetitorGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompetitorGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompetitorGuild::MergeFrom(const CompetitorGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section()) {
      set_section(from.section());
    }
    if (from.has_camp_a_guild()) {
      mutable_camp_a_guild()->::protocols::common::GuildInfo::MergeFrom(from.camp_a_guild());
    }
    if (from.has_camp_b_guild()) {
      mutable_camp_b_guild()->::protocols::common::GuildInfo::MergeFrom(from.camp_b_guild());
    }
    if (from.has_winner_guild_id()) {
      set_winner_guild_id(from.winner_guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompetitorGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompetitorGuild::CopyFrom(const CompetitorGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompetitorGuild::IsInitialized() const {
  
  return true;
}

void CompetitorGuild::Swap(CompetitorGuild* other) {
  if (other != this) {
    std::swap(section_, other->section_);
    std::swap(camp_a_guild_, other->camp_a_guild_);
    std::swap(camp_b_guild_, other->camp_b_guild_);
    std::swap(winner_guild_id_, other->winner_guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompetitorGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompetitorGuild_descriptor_;
  metadata.reflection = CompetitorGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarAddBuffRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildWarAddBuffRequest::GuildWarAddBuffRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarAddBuffRequest::InitAsDefaultInstance() {
}

GuildWarAddBuffRequest::GuildWarAddBuffRequest(const GuildWarAddBuffRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarAddBuffRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarAddBuffRequest::~GuildWarAddBuffRequest() {
  SharedDtor();
}

void GuildWarAddBuffRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarAddBuffRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarAddBuffRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarAddBuffRequest_descriptor_;
}

const GuildWarAddBuffRequest& GuildWarAddBuffRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarAddBuffRequest* GuildWarAddBuffRequest::default_instance_ = NULL;

GuildWarAddBuffRequest* GuildWarAddBuffRequest::New() const {
  return new GuildWarAddBuffRequest;
}

void GuildWarAddBuffRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarAddBuffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarAddBuffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarAddBuffRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarAddBuffRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarAddBuffRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarAddBuffRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarAddBuffRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarAddBuffRequest::MergeFrom(const GuildWarAddBuffRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarAddBuffRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarAddBuffRequest::CopyFrom(const GuildWarAddBuffRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarAddBuffRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildWarAddBuffRequest::Swap(GuildWarAddBuffRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarAddBuffRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarAddBuffRequest_descriptor_;
  metadata.reflection = GuildWarAddBuffRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarAddBuffResponse::kErrorCodeFieldNumber;
const int GuildWarAddBuffResponse::kDamageBuffValueFieldNumber;
const int GuildWarAddBuffResponse::kDefenceBuffValueFieldNumber;
#endif  // !_MSC_VER

GuildWarAddBuffResponse::GuildWarAddBuffResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarAddBuffResponse::InitAsDefaultInstance() {
}

GuildWarAddBuffResponse::GuildWarAddBuffResponse(const GuildWarAddBuffResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarAddBuffResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  damage_buff_value_ = 0;
  defence_buff_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarAddBuffResponse::~GuildWarAddBuffResponse() {
  SharedDtor();
}

void GuildWarAddBuffResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarAddBuffResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarAddBuffResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarAddBuffResponse_descriptor_;
}

const GuildWarAddBuffResponse& GuildWarAddBuffResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarAddBuffResponse* GuildWarAddBuffResponse::default_instance_ = NULL;

GuildWarAddBuffResponse* GuildWarAddBuffResponse::New() const {
  return new GuildWarAddBuffResponse;
}

void GuildWarAddBuffResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    damage_buff_value_ = 0;
    defence_buff_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarAddBuffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage_buff_value;
        break;
      }
      
      // optional int32 damage_buff_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_buff_value_)));
          set_has_damage_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence_buff_value;
        break;
      }
      
      // optional int32 defence_buff_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_buff_value_)));
          set_has_defence_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarAddBuffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 damage_buff_value = 2;
  if (has_damage_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage_buff_value(), output);
  }
  
  // optional int32 defence_buff_value = 3;
  if (has_defence_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence_buff_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarAddBuffResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 damage_buff_value = 2;
  if (has_damage_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage_buff_value(), target);
  }
  
  // optional int32 defence_buff_value = 3;
  if (has_defence_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence_buff_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarAddBuffResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 damage_buff_value = 2;
    if (has_damage_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_buff_value());
    }
    
    // optional int32 defence_buff_value = 3;
    if (has_defence_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_buff_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarAddBuffResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarAddBuffResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarAddBuffResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarAddBuffResponse::MergeFrom(const GuildWarAddBuffResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_damage_buff_value()) {
      set_damage_buff_value(from.damage_buff_value());
    }
    if (from.has_defence_buff_value()) {
      set_defence_buff_value(from.defence_buff_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarAddBuffResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarAddBuffResponse::CopyFrom(const GuildWarAddBuffResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarAddBuffResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildWarAddBuffResponse::Swap(GuildWarAddBuffResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(damage_buff_value_, other->damage_buff_value_);
    std::swap(defence_buff_value_, other->defence_buff_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarAddBuffResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarAddBuffResponse_descriptor_;
  metadata.reflection = GuildWarAddBuffResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarContributionRank::kRankPlayerFieldNumber;
#endif  // !_MSC_VER

GuildWarContributionRank::GuildWarContributionRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarContributionRank::InitAsDefaultInstance() {
}

GuildWarContributionRank::GuildWarContributionRank(const GuildWarContributionRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarContributionRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarContributionRank::~GuildWarContributionRank() {
  SharedDtor();
}

void GuildWarContributionRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarContributionRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarContributionRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarContributionRank_descriptor_;
}

const GuildWarContributionRank& GuildWarContributionRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarContributionRank* GuildWarContributionRank::default_instance_ = NULL;

GuildWarContributionRank* GuildWarContributionRank::New() const {
  return new GuildWarContributionRank;
}

void GuildWarContributionRank::Clear() {
  rank_player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarContributionRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_player;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarContributionRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
  for (int i = 0; i < this->rank_player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_player(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarContributionRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
  for (int i = 0; i < this->rank_player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_player(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarContributionRank::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.GuildWarContributionPlayer rank_player = 1;
  total_size += 1 * this->rank_player_size();
  for (int i = 0; i < this->rank_player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_player(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarContributionRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarContributionRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarContributionRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarContributionRank::MergeFrom(const GuildWarContributionRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_player_.MergeFrom(from.rank_player_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarContributionRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarContributionRank::CopyFrom(const GuildWarContributionRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarContributionRank::IsInitialized() const {
  
  return true;
}

void GuildWarContributionRank::Swap(GuildWarContributionRank* other) {
  if (other != this) {
    rank_player_.Swap(&other->rank_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarContributionRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarContributionRank_descriptor_;
  metadata.reflection = GuildWarContributionRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildWarContributionRankRequest::GuildWarContributionRankRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarContributionRankRequest::InitAsDefaultInstance() {
}

GuildWarContributionRankRequest::GuildWarContributionRankRequest(const GuildWarContributionRankRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarContributionRankRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarContributionRankRequest::~GuildWarContributionRankRequest() {
  SharedDtor();
}

void GuildWarContributionRankRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarContributionRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarContributionRankRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarContributionRankRequest_descriptor_;
}

const GuildWarContributionRankRequest& GuildWarContributionRankRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarContributionRankRequest* GuildWarContributionRankRequest::default_instance_ = NULL;

GuildWarContributionRankRequest* GuildWarContributionRankRequest::New() const {
  return new GuildWarContributionRankRequest;
}

void GuildWarContributionRankRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarContributionRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildWarContributionRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarContributionRankRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarContributionRankRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarContributionRankRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarContributionRankRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarContributionRankRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarContributionRankRequest::MergeFrom(const GuildWarContributionRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarContributionRankRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarContributionRankRequest::CopyFrom(const GuildWarContributionRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarContributionRankRequest::IsInitialized() const {
  
  return true;
}

void GuildWarContributionRankRequest::Swap(GuildWarContributionRankRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarContributionRankRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarContributionRankRequest_descriptor_;
  metadata.reflection = GuildWarContributionRankRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarContributionRankResponse::kErrorCodeFieldNumber;
const int GuildWarContributionRankResponse::kRankInfoFieldNumber;
#endif  // !_MSC_VER

GuildWarContributionRankResponse::GuildWarContributionRankResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarContributionRankResponse::InitAsDefaultInstance() {
  rank_info_ = const_cast< ::protocols::common::GuildWarContributionRank*>(&::protocols::common::GuildWarContributionRank::default_instance());
}

GuildWarContributionRankResponse::GuildWarContributionRankResponse(const GuildWarContributionRankResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarContributionRankResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  rank_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarContributionRankResponse::~GuildWarContributionRankResponse() {
  SharedDtor();
}

void GuildWarContributionRankResponse::SharedDtor() {
  if (this != default_instance_) {
    delete rank_info_;
  }
}

void GuildWarContributionRankResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarContributionRankResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarContributionRankResponse_descriptor_;
}

const GuildWarContributionRankResponse& GuildWarContributionRankResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarContributionRankResponse* GuildWarContributionRankResponse::default_instance_ = NULL;

GuildWarContributionRankResponse* GuildWarContributionRankResponse::New() const {
  return new GuildWarContributionRankResponse;
}

void GuildWarContributionRankResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_rank_info()) {
      if (rank_info_ != NULL) rank_info_->::protocols::common::GuildWarContributionRank::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarContributionRankResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_info;
        break;
      }
      
      // optional .protocols.common.GuildWarContributionRank rank_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarContributionRankResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.GuildWarContributionRank rank_info = 2;
  if (has_rank_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarContributionRankResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.GuildWarContributionRank rank_info = 2;
  if (has_rank_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarContributionRankResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.GuildWarContributionRank rank_info = 2;
    if (has_rank_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarContributionRankResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarContributionRankResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarContributionRankResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarContributionRankResponse::MergeFrom(const GuildWarContributionRankResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_rank_info()) {
      mutable_rank_info()->::protocols::common::GuildWarContributionRank::MergeFrom(from.rank_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarContributionRankResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarContributionRankResponse::CopyFrom(const GuildWarContributionRankResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarContributionRankResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GuildWarContributionRankResponse::Swap(GuildWarContributionRankResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(rank_info_, other->rank_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarContributionRankResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarContributionRankResponse_descriptor_;
  metadata.reflection = GuildWarContributionRankResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarContributionRankNotify::kRankInfoFieldNumber;
#endif  // !_MSC_VER

GuildWarContributionRankNotify::GuildWarContributionRankNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarContributionRankNotify::InitAsDefaultInstance() {
  rank_info_ = const_cast< ::protocols::common::GuildWarContributionRank*>(&::protocols::common::GuildWarContributionRank::default_instance());
}

GuildWarContributionRankNotify::GuildWarContributionRankNotify(const GuildWarContributionRankNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarContributionRankNotify::SharedCtor() {
  _cached_size_ = 0;
  rank_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarContributionRankNotify::~GuildWarContributionRankNotify() {
  SharedDtor();
}

void GuildWarContributionRankNotify::SharedDtor() {
  if (this != default_instance_) {
    delete rank_info_;
  }
}

void GuildWarContributionRankNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarContributionRankNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarContributionRankNotify_descriptor_;
}

const GuildWarContributionRankNotify& GuildWarContributionRankNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarContributionRankNotify* GuildWarContributionRankNotify::default_instance_ = NULL;

GuildWarContributionRankNotify* GuildWarContributionRankNotify::New() const {
  return new GuildWarContributionRankNotify;
}

void GuildWarContributionRankNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank_info()) {
      if (rank_info_ != NULL) rank_info_->::protocols::common::GuildWarContributionRank::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarContributionRankNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.GuildWarContributionRank rank_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rank_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarContributionRankNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.GuildWarContributionRank rank_info = 1;
  if (has_rank_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarContributionRankNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.GuildWarContributionRank rank_info = 1;
  if (has_rank_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarContributionRankNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.GuildWarContributionRank rank_info = 1;
    if (has_rank_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rank_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarContributionRankNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarContributionRankNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarContributionRankNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarContributionRankNotify::MergeFrom(const GuildWarContributionRankNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_info()) {
      mutable_rank_info()->::protocols::common::GuildWarContributionRank::MergeFrom(from.rank_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarContributionRankNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarContributionRankNotify::CopyFrom(const GuildWarContributionRankNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarContributionRankNotify::IsInitialized() const {
  
  return true;
}

void GuildWarContributionRankNotify::Swap(GuildWarContributionRankNotify* other) {
  if (other != this) {
    std::swap(rank_info_, other->rank_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarContributionRankNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarContributionRankNotify_descriptor_;
  metadata.reflection = GuildWarContributionRankNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTreasureBoxNotify::kBonusTypeFieldNumber;
const int UpdateTreasureBoxNotify::kBoxInfoFieldNumber;
#endif  // !_MSC_VER

UpdateTreasureBoxNotify::UpdateTreasureBoxNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTreasureBoxNotify::InitAsDefaultInstance() {
}

UpdateTreasureBoxNotify::UpdateTreasureBoxNotify(const UpdateTreasureBoxNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTreasureBoxNotify::SharedCtor() {
  _cached_size_ = 0;
  bonus_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTreasureBoxNotify::~UpdateTreasureBoxNotify() {
  SharedDtor();
}

void UpdateTreasureBoxNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTreasureBoxNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTreasureBoxNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTreasureBoxNotify_descriptor_;
}

const UpdateTreasureBoxNotify& UpdateTreasureBoxNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

UpdateTreasureBoxNotify* UpdateTreasureBoxNotify::default_instance_ = NULL;

UpdateTreasureBoxNotify* UpdateTreasureBoxNotify::New() const {
  return new UpdateTreasureBoxNotify;
}

void UpdateTreasureBoxNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bonus_type_ = 0;
  }
  box_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTreasureBoxNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bonus_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_type_)));
          set_has_bonus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_box_info;
        break;
      }
      
      // repeated .protocols.common.TreasureBoxReward box_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_box_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_box_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_box_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTreasureBoxNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bonus_type = 1;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonus_type(), output);
  }
  
  // repeated .protocols.common.TreasureBoxReward box_info = 2;
  for (int i = 0; i < this->box_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->box_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTreasureBoxNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bonus_type = 1;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonus_type(), target);
  }
  
  // repeated .protocols.common.TreasureBoxReward box_info = 2;
  for (int i = 0; i < this->box_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->box_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTreasureBoxNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bonus_type = 1;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_type());
    }
    
  }
  // repeated .protocols.common.TreasureBoxReward box_info = 2;
  total_size += 1 * this->box_info_size();
  for (int i = 0; i < this->box_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->box_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTreasureBoxNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTreasureBoxNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTreasureBoxNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTreasureBoxNotify::MergeFrom(const UpdateTreasureBoxNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  box_info_.MergeFrom(from.box_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTreasureBoxNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTreasureBoxNotify::CopyFrom(const UpdateTreasureBoxNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTreasureBoxNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateTreasureBoxNotify::Swap(UpdateTreasureBoxNotify* other) {
  if (other != this) {
    std::swap(bonus_type_, other->bonus_type_);
    box_info_.Swap(&other->box_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTreasureBoxNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTreasureBoxNotify_descriptor_;
  metadata.reflection = UpdateTreasureBoxNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeTreasureBoxBonusRequest::kBonusTypeFieldNumber;
const int TakeTreasureBoxBonusRequest::kBoxIndexFieldNumber;
#endif  // !_MSC_VER

TakeTreasureBoxBonusRequest::TakeTreasureBoxBonusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTreasureBoxBonusRequest::InitAsDefaultInstance() {
}

TakeTreasureBoxBonusRequest::TakeTreasureBoxBonusRequest(const TakeTreasureBoxBonusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTreasureBoxBonusRequest::SharedCtor() {
  _cached_size_ = 0;
  bonus_type_ = 0;
  box_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTreasureBoxBonusRequest::~TakeTreasureBoxBonusRequest() {
  SharedDtor();
}

void TakeTreasureBoxBonusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTreasureBoxBonusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTreasureBoxBonusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTreasureBoxBonusRequest_descriptor_;
}

const TakeTreasureBoxBonusRequest& TakeTreasureBoxBonusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

TakeTreasureBoxBonusRequest* TakeTreasureBoxBonusRequest::default_instance_ = NULL;

TakeTreasureBoxBonusRequest* TakeTreasureBoxBonusRequest::New() const {
  return new TakeTreasureBoxBonusRequest;
}

void TakeTreasureBoxBonusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bonus_type_ = 0;
    box_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTreasureBoxBonusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bonus_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_type_)));
          set_has_bonus_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_box_index;
        break;
      }
      
      // optional int32 box_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_index_)));
          set_has_box_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeTreasureBoxBonusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bonus_type = 1;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonus_type(), output);
  }
  
  // optional int32 box_index = 2;
  if (has_box_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->box_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTreasureBoxBonusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bonus_type = 1;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonus_type(), target);
  }
  
  // optional int32 box_index = 2;
  if (has_box_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->box_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTreasureBoxBonusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bonus_type = 1;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_type());
    }
    
    // optional int32 box_index = 2;
    if (has_box_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTreasureBoxBonusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTreasureBoxBonusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTreasureBoxBonusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTreasureBoxBonusRequest::MergeFrom(const TakeTreasureBoxBonusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
    if (from.has_box_index()) {
      set_box_index(from.box_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTreasureBoxBonusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTreasureBoxBonusRequest::CopyFrom(const TakeTreasureBoxBonusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTreasureBoxBonusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TakeTreasureBoxBonusRequest::Swap(TakeTreasureBoxBonusRequest* other) {
  if (other != this) {
    std::swap(bonus_type_, other->bonus_type_);
    std::swap(box_index_, other->box_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTreasureBoxBonusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTreasureBoxBonusRequest_descriptor_;
  metadata.reflection = TakeTreasureBoxBonusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeTreasureBoxBonusResponse::kErrorCodeFieldNumber;
const int TakeTreasureBoxBonusResponse::kItemFieldNumber;
#endif  // !_MSC_VER

TakeTreasureBoxBonusResponse::TakeTreasureBoxBonusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeTreasureBoxBonusResponse::InitAsDefaultInstance() {
}

TakeTreasureBoxBonusResponse::TakeTreasureBoxBonusResponse(const TakeTreasureBoxBonusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeTreasureBoxBonusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeTreasureBoxBonusResponse::~TakeTreasureBoxBonusResponse() {
  SharedDtor();
}

void TakeTreasureBoxBonusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeTreasureBoxBonusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeTreasureBoxBonusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeTreasureBoxBonusResponse_descriptor_;
}

const TakeTreasureBoxBonusResponse& TakeTreasureBoxBonusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

TakeTreasureBoxBonusResponse* TakeTreasureBoxBonusResponse::default_instance_ = NULL;

TakeTreasureBoxBonusResponse* TakeTreasureBoxBonusResponse::New() const {
  return new TakeTreasureBoxBonusResponse;
}

void TakeTreasureBoxBonusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TakeTreasureBoxBonusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TakeTreasureBoxBonusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeTreasureBoxBonusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeTreasureBoxBonusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ItemInfo item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeTreasureBoxBonusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeTreasureBoxBonusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeTreasureBoxBonusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TakeTreasureBoxBonusResponse::MergeFrom(const TakeTreasureBoxBonusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TakeTreasureBoxBonusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeTreasureBoxBonusResponse::CopyFrom(const TakeTreasureBoxBonusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeTreasureBoxBonusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void TakeTreasureBoxBonusResponse::Swap(TakeTreasureBoxBonusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TakeTreasureBoxBonusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeTreasureBoxBonusResponse_descriptor_;
  metadata.reflection = TakeTreasureBoxBonusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildWarGetCompetitionInfoRequest::GuildWarGetCompetitionInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarGetCompetitionInfoRequest::InitAsDefaultInstance() {
}

GuildWarGetCompetitionInfoRequest::GuildWarGetCompetitionInfoRequest(const GuildWarGetCompetitionInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarGetCompetitionInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarGetCompetitionInfoRequest::~GuildWarGetCompetitionInfoRequest() {
  SharedDtor();
}

void GuildWarGetCompetitionInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarGetCompetitionInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarGetCompetitionInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarGetCompetitionInfoRequest_descriptor_;
}

const GuildWarGetCompetitionInfoRequest& GuildWarGetCompetitionInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarGetCompetitionInfoRequest* GuildWarGetCompetitionInfoRequest::default_instance_ = NULL;

GuildWarGetCompetitionInfoRequest* GuildWarGetCompetitionInfoRequest::New() const {
  return new GuildWarGetCompetitionInfoRequest;
}

void GuildWarGetCompetitionInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarGetCompetitionInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GuildWarGetCompetitionInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarGetCompetitionInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarGetCompetitionInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarGetCompetitionInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarGetCompetitionInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarGetCompetitionInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarGetCompetitionInfoRequest::MergeFrom(const GuildWarGetCompetitionInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarGetCompetitionInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarGetCompetitionInfoRequest::CopyFrom(const GuildWarGetCompetitionInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarGetCompetitionInfoRequest::IsInitialized() const {
  
  return true;
}

void GuildWarGetCompetitionInfoRequest::Swap(GuildWarGetCompetitionInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarGetCompetitionInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarGetCompetitionInfoRequest_descriptor_;
  metadata.reflection = GuildWarGetCompetitionInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarGetCompetitionInfoResponse::kErrorCodeFieldNumber;
const int GuildWarGetCompetitionInfoResponse::kScheduleFieldNumber;
#endif  // !_MSC_VER

GuildWarGetCompetitionInfoResponse::GuildWarGetCompetitionInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarGetCompetitionInfoResponse::InitAsDefaultInstance() {
  schedule_ = const_cast< ::protocols::common::GuildWarSchedule*>(&::protocols::common::GuildWarSchedule::default_instance());
}

GuildWarGetCompetitionInfoResponse::GuildWarGetCompetitionInfoResponse(const GuildWarGetCompetitionInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarGetCompetitionInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  schedule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarGetCompetitionInfoResponse::~GuildWarGetCompetitionInfoResponse() {
  SharedDtor();
}

void GuildWarGetCompetitionInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete schedule_;
  }
}

void GuildWarGetCompetitionInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarGetCompetitionInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarGetCompetitionInfoResponse_descriptor_;
}

const GuildWarGetCompetitionInfoResponse& GuildWarGetCompetitionInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GuildWarGetCompetitionInfoResponse* GuildWarGetCompetitionInfoResponse::default_instance_ = NULL;

GuildWarGetCompetitionInfoResponse* GuildWarGetCompetitionInfoResponse::New() const {
  return new GuildWarGetCompetitionInfoResponse;
}

void GuildWarGetCompetitionInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_schedule()) {
      if (schedule_ != NULL) schedule_->::protocols::common::GuildWarSchedule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarGetCompetitionInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schedule;
        break;
      }
      
      // optional .protocols.common.GuildWarSchedule schedule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarGetCompetitionInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.GuildWarSchedule schedule = 2;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schedule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarGetCompetitionInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.GuildWarSchedule schedule = 2;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schedule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarGetCompetitionInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.GuildWarSchedule schedule = 2;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarGetCompetitionInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarGetCompetitionInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarGetCompetitionInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarGetCompetitionInfoResponse::MergeFrom(const GuildWarGetCompetitionInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_schedule()) {
      mutable_schedule()->::protocols::common::GuildWarSchedule::MergeFrom(from.schedule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarGetCompetitionInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarGetCompetitionInfoResponse::CopyFrom(const GuildWarGetCompetitionInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarGetCompetitionInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_schedule()) {
    if (!this->schedule().IsInitialized()) return false;
  }
  return true;
}

void GuildWarGetCompetitionInfoResponse::Swap(GuildWarGetCompetitionInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(schedule_, other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarGetCompetitionInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarGetCompetitionInfoResponse_descriptor_;
  metadata.reflection = GuildWarGetCompetitionInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAutoInstanceStatusRequest::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

GetAutoInstanceStatusRequest::GetAutoInstanceStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAutoInstanceStatusRequest::InitAsDefaultInstance() {
}

GetAutoInstanceStatusRequest::GetAutoInstanceStatusRequest(const GetAutoInstanceStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAutoInstanceStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAutoInstanceStatusRequest::~GetAutoInstanceStatusRequest() {
  SharedDtor();
}

void GetAutoInstanceStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAutoInstanceStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoInstanceStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAutoInstanceStatusRequest_descriptor_;
}

const GetAutoInstanceStatusRequest& GetAutoInstanceStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetAutoInstanceStatusRequest* GetAutoInstanceStatusRequest::default_instance_ = NULL;

GetAutoInstanceStatusRequest* GetAutoInstanceStatusRequest::New() const {
  return new GetAutoInstanceStatusRequest;
}

void GetAutoInstanceStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAutoInstanceStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAutoInstanceStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAutoInstanceStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAutoInstanceStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoInstanceStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAutoInstanceStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAutoInstanceStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAutoInstanceStatusRequest::MergeFrom(const GetAutoInstanceStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAutoInstanceStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoInstanceStatusRequest::CopyFrom(const GetAutoInstanceStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoInstanceStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAutoInstanceStatusRequest::Swap(GetAutoInstanceStatusRequest* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAutoInstanceStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAutoInstanceStatusRequest_descriptor_;
  metadata.reflection = GetAutoInstanceStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAutoInstanceStatusResponse::kErrorCodeFieldNumber;
const int GetAutoInstanceStatusResponse::kInstInfoFieldNumber;
#endif  // !_MSC_VER

GetAutoInstanceStatusResponse::GetAutoInstanceStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAutoInstanceStatusResponse::InitAsDefaultInstance() {
  inst_info_ = const_cast< ::protocols::common::InstanceInfo*>(&::protocols::common::InstanceInfo::default_instance());
}

GetAutoInstanceStatusResponse::GetAutoInstanceStatusResponse(const GetAutoInstanceStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAutoInstanceStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  inst_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAutoInstanceStatusResponse::~GetAutoInstanceStatusResponse() {
  SharedDtor();
}

void GetAutoInstanceStatusResponse::SharedDtor() {
  if (this != default_instance_) {
    delete inst_info_;
  }
}

void GetAutoInstanceStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAutoInstanceStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAutoInstanceStatusResponse_descriptor_;
}

const GetAutoInstanceStatusResponse& GetAutoInstanceStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

GetAutoInstanceStatusResponse* GetAutoInstanceStatusResponse::default_instance_ = NULL;

GetAutoInstanceStatusResponse* GetAutoInstanceStatusResponse::New() const {
  return new GetAutoInstanceStatusResponse;
}

void GetAutoInstanceStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_inst_info()) {
      if (inst_info_ != NULL) inst_info_->::protocols::common::InstanceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAutoInstanceStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inst_info;
        break;
      }
      
      // optional .protocols.common.InstanceInfo inst_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inst_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAutoInstanceStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.InstanceInfo inst_info = 2;
  if (has_inst_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inst_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAutoInstanceStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.InstanceInfo inst_info = 2;
  if (has_inst_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inst_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAutoInstanceStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.InstanceInfo inst_info = 2;
    if (has_inst_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inst_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAutoInstanceStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAutoInstanceStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAutoInstanceStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAutoInstanceStatusResponse::MergeFrom(const GetAutoInstanceStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_inst_info()) {
      mutable_inst_info()->::protocols::common::InstanceInfo::MergeFrom(from.inst_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAutoInstanceStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoInstanceStatusResponse::CopyFrom(const GetAutoInstanceStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoInstanceStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAutoInstanceStatusResponse::Swap(GetAutoInstanceStatusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(inst_info_, other->inst_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAutoInstanceStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAutoInstanceStatusResponse_descriptor_;
  metadata.reflection = GetAutoInstanceStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartAutoFightInstanceRequest::kAutoFightTimesFieldNumber;
const int StartAutoFightInstanceRequest::kInstInfoFieldNumber;
const int StartAutoFightInstanceRequest::kStopOnBagFullFieldNumber;
#endif  // !_MSC_VER

StartAutoFightInstanceRequest::StartAutoFightInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartAutoFightInstanceRequest::InitAsDefaultInstance() {
  inst_info_ = const_cast< ::protocols::common::InstanceInfo*>(&::protocols::common::InstanceInfo::default_instance());
}

StartAutoFightInstanceRequest::StartAutoFightInstanceRequest(const StartAutoFightInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartAutoFightInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  auto_fight_times_ = 0;
  inst_info_ = NULL;
  stop_on_bag_full_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartAutoFightInstanceRequest::~StartAutoFightInstanceRequest() {
  SharedDtor();
}

void StartAutoFightInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete inst_info_;
  }
}

void StartAutoFightInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartAutoFightInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartAutoFightInstanceRequest_descriptor_;
}

const StartAutoFightInstanceRequest& StartAutoFightInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

StartAutoFightInstanceRequest* StartAutoFightInstanceRequest::default_instance_ = NULL;

StartAutoFightInstanceRequest* StartAutoFightInstanceRequest::New() const {
  return new StartAutoFightInstanceRequest;
}

void StartAutoFightInstanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_fight_times_ = 0;
    if (has_inst_info()) {
      if (inst_info_ != NULL) inst_info_->::protocols::common::InstanceInfo::Clear();
    }
    stop_on_bag_full_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartAutoFightInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 auto_fight_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_fight_times_)));
          set_has_auto_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inst_info;
        break;
      }
      
      // required .protocols.common.InstanceInfo inst_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inst_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop_on_bag_full;
        break;
      }
      
      // required int32 stop_on_bag_full = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_on_bag_full:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_on_bag_full_)));
          set_has_stop_on_bag_full();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartAutoFightInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 auto_fight_times = 1;
  if (has_auto_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auto_fight_times(), output);
  }
  
  // required .protocols.common.InstanceInfo inst_info = 2;
  if (has_inst_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inst_info(), output);
  }
  
  // required int32 stop_on_bag_full = 3;
  if (has_stop_on_bag_full()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop_on_bag_full(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartAutoFightInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 auto_fight_times = 1;
  if (has_auto_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auto_fight_times(), target);
  }
  
  // required .protocols.common.InstanceInfo inst_info = 2;
  if (has_inst_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inst_info(), target);
  }
  
  // required int32 stop_on_bag_full = 3;
  if (has_stop_on_bag_full()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop_on_bag_full(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartAutoFightInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 auto_fight_times = 1;
    if (has_auto_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_fight_times());
    }
    
    // required .protocols.common.InstanceInfo inst_info = 2;
    if (has_inst_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inst_info());
    }
    
    // required int32 stop_on_bag_full = 3;
    if (has_stop_on_bag_full()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stop_on_bag_full());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartAutoFightInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartAutoFightInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartAutoFightInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartAutoFightInstanceRequest::MergeFrom(const StartAutoFightInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_fight_times()) {
      set_auto_fight_times(from.auto_fight_times());
    }
    if (from.has_inst_info()) {
      mutable_inst_info()->::protocols::common::InstanceInfo::MergeFrom(from.inst_info());
    }
    if (from.has_stop_on_bag_full()) {
      set_stop_on_bag_full(from.stop_on_bag_full());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartAutoFightInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAutoFightInstanceRequest::CopyFrom(const StartAutoFightInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAutoFightInstanceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void StartAutoFightInstanceRequest::Swap(StartAutoFightInstanceRequest* other) {
  if (other != this) {
    std::swap(auto_fight_times_, other->auto_fight_times_);
    std::swap(inst_info_, other->inst_info_);
    std::swap(stop_on_bag_full_, other->stop_on_bag_full_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartAutoFightInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartAutoFightInstanceRequest_descriptor_;
  metadata.reflection = StartAutoFightInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartAutoFightInstanceResponse::kErrorCodeFieldNumber;
const int StartAutoFightInstanceResponse::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

StartAutoFightInstanceResponse::StartAutoFightInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartAutoFightInstanceResponse::InitAsDefaultInstance() {
}

StartAutoFightInstanceResponse::StartAutoFightInstanceResponse(const StartAutoFightInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartAutoFightInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartAutoFightInstanceResponse::~StartAutoFightInstanceResponse() {
  SharedDtor();
}

void StartAutoFightInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartAutoFightInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartAutoFightInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartAutoFightInstanceResponse_descriptor_;
}

const StartAutoFightInstanceResponse& StartAutoFightInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

StartAutoFightInstanceResponse* StartAutoFightInstanceResponse::default_instance_ = NULL;

StartAutoFightInstanceResponse* StartAutoFightInstanceResponse::New() const {
  return new StartAutoFightInstanceResponse;
}

void StartAutoFightInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartAutoFightInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartAutoFightInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartAutoFightInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartAutoFightInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 left_time = 2;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartAutoFightInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartAutoFightInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartAutoFightInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartAutoFightInstanceResponse::MergeFrom(const StartAutoFightInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartAutoFightInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartAutoFightInstanceResponse::CopyFrom(const StartAutoFightInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartAutoFightInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StartAutoFightInstanceResponse::Swap(StartAutoFightInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartAutoFightInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartAutoFightInstanceResponse_descriptor_;
  metadata.reflection = StartAutoFightInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopAutoFightInstanceRequest::StopAutoFightInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAutoFightInstanceRequest::InitAsDefaultInstance() {
}

StopAutoFightInstanceRequest::StopAutoFightInstanceRequest(const StopAutoFightInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAutoFightInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAutoFightInstanceRequest::~StopAutoFightInstanceRequest() {
  SharedDtor();
}

void StopAutoFightInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopAutoFightInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAutoFightInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAutoFightInstanceRequest_descriptor_;
}

const StopAutoFightInstanceRequest& StopAutoFightInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

StopAutoFightInstanceRequest* StopAutoFightInstanceRequest::default_instance_ = NULL;

StopAutoFightInstanceRequest* StopAutoFightInstanceRequest::New() const {
  return new StopAutoFightInstanceRequest;
}

void StopAutoFightInstanceRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAutoFightInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopAutoFightInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAutoFightInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAutoFightInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAutoFightInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAutoFightInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAutoFightInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAutoFightInstanceRequest::MergeFrom(const StopAutoFightInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAutoFightInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutoFightInstanceRequest::CopyFrom(const StopAutoFightInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutoFightInstanceRequest::IsInitialized() const {
  
  return true;
}

void StopAutoFightInstanceRequest::Swap(StopAutoFightInstanceRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAutoFightInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAutoFightInstanceRequest_descriptor_;
  metadata.reflection = StopAutoFightInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopAutoFightInstanceResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

StopAutoFightInstanceResponse::StopAutoFightInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopAutoFightInstanceResponse::InitAsDefaultInstance() {
}

StopAutoFightInstanceResponse::StopAutoFightInstanceResponse(const StopAutoFightInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopAutoFightInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopAutoFightInstanceResponse::~StopAutoFightInstanceResponse() {
  SharedDtor();
}

void StopAutoFightInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopAutoFightInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopAutoFightInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopAutoFightInstanceResponse_descriptor_;
}

const StopAutoFightInstanceResponse& StopAutoFightInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

StopAutoFightInstanceResponse* StopAutoFightInstanceResponse::default_instance_ = NULL;

StopAutoFightInstanceResponse* StopAutoFightInstanceResponse::New() const {
  return new StopAutoFightInstanceResponse;
}

void StopAutoFightInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopAutoFightInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopAutoFightInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopAutoFightInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopAutoFightInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopAutoFightInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopAutoFightInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopAutoFightInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopAutoFightInstanceResponse::MergeFrom(const StopAutoFightInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopAutoFightInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopAutoFightInstanceResponse::CopyFrom(const StopAutoFightInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopAutoFightInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopAutoFightInstanceResponse::Swap(StopAutoFightInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopAutoFightInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopAutoFightInstanceResponse_descriptor_;
  metadata.reflection = StopAutoFightInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishAutoFightInstanceRequest::kGetMoneyFlagFieldNumber;
#endif  // !_MSC_VER

FinishAutoFightInstanceRequest::FinishAutoFightInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishAutoFightInstanceRequest::InitAsDefaultInstance() {
}

FinishAutoFightInstanceRequest::FinishAutoFightInstanceRequest(const FinishAutoFightInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishAutoFightInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  get_money_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishAutoFightInstanceRequest::~FinishAutoFightInstanceRequest() {
  SharedDtor();
}

void FinishAutoFightInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishAutoFightInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishAutoFightInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishAutoFightInstanceRequest_descriptor_;
}

const FinishAutoFightInstanceRequest& FinishAutoFightInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

FinishAutoFightInstanceRequest* FinishAutoFightInstanceRequest::default_instance_ = NULL;

FinishAutoFightInstanceRequest* FinishAutoFightInstanceRequest::New() const {
  return new FinishAutoFightInstanceRequest;
}

void FinishAutoFightInstanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_money_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishAutoFightInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 get_money_flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_money_flag_)));
          set_has_get_money_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishAutoFightInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 get_money_flag = 1;
  if (has_get_money_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->get_money_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishAutoFightInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 get_money_flag = 1;
  if (has_get_money_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->get_money_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishAutoFightInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 get_money_flag = 1;
    if (has_get_money_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_money_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishAutoFightInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishAutoFightInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishAutoFightInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishAutoFightInstanceRequest::MergeFrom(const FinishAutoFightInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_money_flag()) {
      set_get_money_flag(from.get_money_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishAutoFightInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishAutoFightInstanceRequest::CopyFrom(const FinishAutoFightInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishAutoFightInstanceRequest::IsInitialized() const {
  
  return true;
}

void FinishAutoFightInstanceRequest::Swap(FinishAutoFightInstanceRequest* other) {
  if (other != this) {
    std::swap(get_money_flag_, other->get_money_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishAutoFightInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishAutoFightInstanceRequest_descriptor_;
  metadata.reflection = FinishAutoFightInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishAutoFightInstanceResponse::kErrorCodeFieldNumber;
const int FinishAutoFightInstanceResponse::kNeedMoneyFieldNumber;
#endif  // !_MSC_VER

FinishAutoFightInstanceResponse::FinishAutoFightInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishAutoFightInstanceResponse::InitAsDefaultInstance() {
}

FinishAutoFightInstanceResponse::FinishAutoFightInstanceResponse(const FinishAutoFightInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishAutoFightInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  need_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishAutoFightInstanceResponse::~FinishAutoFightInstanceResponse() {
  SharedDtor();
}

void FinishAutoFightInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishAutoFightInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishAutoFightInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishAutoFightInstanceResponse_descriptor_;
}

const FinishAutoFightInstanceResponse& FinishAutoFightInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

FinishAutoFightInstanceResponse* FinishAutoFightInstanceResponse::default_instance_ = NULL;

FinishAutoFightInstanceResponse* FinishAutoFightInstanceResponse::New() const {
  return new FinishAutoFightInstanceResponse;
}

void FinishAutoFightInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    need_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishAutoFightInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_money;
        break;
      }
      
      // optional int32 need_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_money_)));
          set_has_need_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishAutoFightInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 need_money = 2;
  if (has_need_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishAutoFightInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 need_money = 2;
  if (has_need_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishAutoFightInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 need_money = 2;
    if (has_need_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishAutoFightInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishAutoFightInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishAutoFightInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishAutoFightInstanceResponse::MergeFrom(const FinishAutoFightInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_need_money()) {
      set_need_money(from.need_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishAutoFightInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishAutoFightInstanceResponse::CopyFrom(const FinishAutoFightInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishAutoFightInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FinishAutoFightInstanceResponse::Swap(FinishAutoFightInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(need_money_, other->need_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishAutoFightInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishAutoFightInstanceResponse_descriptor_;
  metadata.reflection = FinishAutoFightInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AutoFightInstanceNotifyRequest::AutoFightInstanceNotifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightInstanceNotifyRequest::InitAsDefaultInstance() {
}

AutoFightInstanceNotifyRequest::AutoFightInstanceNotifyRequest(const AutoFightInstanceNotifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightInstanceNotifyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightInstanceNotifyRequest::~AutoFightInstanceNotifyRequest() {
  SharedDtor();
}

void AutoFightInstanceNotifyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightInstanceNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightInstanceNotifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightInstanceNotifyRequest_descriptor_;
}

const AutoFightInstanceNotifyRequest& AutoFightInstanceNotifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AutoFightInstanceNotifyRequest* AutoFightInstanceNotifyRequest::default_instance_ = NULL;

AutoFightInstanceNotifyRequest* AutoFightInstanceNotifyRequest::New() const {
  return new AutoFightInstanceNotifyRequest;
}

void AutoFightInstanceNotifyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightInstanceNotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AutoFightInstanceNotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightInstanceNotifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightInstanceNotifyRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightInstanceNotifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightInstanceNotifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightInstanceNotifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightInstanceNotifyRequest::MergeFrom(const AutoFightInstanceNotifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightInstanceNotifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightInstanceNotifyRequest::CopyFrom(const AutoFightInstanceNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightInstanceNotifyRequest::IsInitialized() const {
  
  return true;
}

void AutoFightInstanceNotifyRequest::Swap(AutoFightInstanceNotifyRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightInstanceNotifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightInstanceNotifyRequest_descriptor_;
  metadata.reflection = AutoFightInstanceNotifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoFightInstanceNotifyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

AutoFightInstanceNotifyResponse::AutoFightInstanceNotifyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightInstanceNotifyResponse::InitAsDefaultInstance() {
}

AutoFightInstanceNotifyResponse::AutoFightInstanceNotifyResponse(const AutoFightInstanceNotifyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightInstanceNotifyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightInstanceNotifyResponse::~AutoFightInstanceNotifyResponse() {
  SharedDtor();
}

void AutoFightInstanceNotifyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightInstanceNotifyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightInstanceNotifyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightInstanceNotifyResponse_descriptor_;
}

const AutoFightInstanceNotifyResponse& AutoFightInstanceNotifyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AutoFightInstanceNotifyResponse* AutoFightInstanceNotifyResponse::default_instance_ = NULL;

AutoFightInstanceNotifyResponse* AutoFightInstanceNotifyResponse::New() const {
  return new AutoFightInstanceNotifyResponse;
}

void AutoFightInstanceNotifyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightInstanceNotifyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoFightInstanceNotifyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightInstanceNotifyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightInstanceNotifyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightInstanceNotifyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightInstanceNotifyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightInstanceNotifyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightInstanceNotifyResponse::MergeFrom(const AutoFightInstanceNotifyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightInstanceNotifyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightInstanceNotifyResponse::CopyFrom(const AutoFightInstanceNotifyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightInstanceNotifyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AutoFightInstanceNotifyResponse::Swap(AutoFightInstanceNotifyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightInstanceNotifyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightInstanceNotifyResponse_descriptor_;
  metadata.reflection = AutoFightInstanceNotifyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoFightInstanceNotify::kIsFightFinishFieldNumber;
const int AutoFightInstanceNotify::kFinishErrorCodeFieldNumber;
const int AutoFightInstanceNotify::kCurFightTimeFieldNumber;
const int AutoFightInstanceNotify::kLeftAutoFightTimesFieldNumber;
const int AutoFightInstanceNotify::kExpBonusFieldNumber;
const int AutoFightInstanceNotify::kCoinBonusFieldNumber;
const int AutoFightInstanceNotify::kItemBonusFieldNumber;
const int AutoFightInstanceNotify::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

AutoFightInstanceNotify::AutoFightInstanceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoFightInstanceNotify::InitAsDefaultInstance() {
}

AutoFightInstanceNotify::AutoFightInstanceNotify(const AutoFightInstanceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoFightInstanceNotify::SharedCtor() {
  _cached_size_ = 0;
  is_fight_finish_ = 0;
  finish_error_code_ = 0;
  cur_fight_time_ = 0;
  left_auto_fight_times_ = 0;
  exp_bonus_ = 0;
  coin_bonus_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoFightInstanceNotify::~AutoFightInstanceNotify() {
  SharedDtor();
}

void AutoFightInstanceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoFightInstanceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoFightInstanceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoFightInstanceNotify_descriptor_;
}

const AutoFightInstanceNotify& AutoFightInstanceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5ffight_2eproto();  return *default_instance_;
}

AutoFightInstanceNotify* AutoFightInstanceNotify::default_instance_ = NULL;

AutoFightInstanceNotify* AutoFightInstanceNotify::New() const {
  return new AutoFightInstanceNotify;
}

void AutoFightInstanceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_fight_finish_ = 0;
    finish_error_code_ = 0;
    cur_fight_time_ = 0;
    left_auto_fight_times_ = 0;
    exp_bonus_ = 0;
    coin_bonus_ = 0;
    left_time_ = 0;
  }
  item_bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoFightInstanceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_fight_finish = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_fight_finish_)));
          set_has_is_fight_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish_error_code;
        break;
      }
      
      // optional int32 finish_error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_error_code_)));
          set_has_finish_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_fight_time;
        break;
      }
      
      // optional int32 cur_fight_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fight_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_fight_time_)));
          set_has_cur_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_auto_fight_times;
        break;
      }
      
      // optional int32 left_auto_fight_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_auto_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_auto_fight_times_)));
          set_has_left_auto_fight_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp_bonus;
        break;
      }
      
      // optional int32 exp_bonus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin_bonus;
        break;
      }
      
      // optional int32 coin_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_bonus_)));
          set_has_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_bonus;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_bonus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item_bonus;
        if (input->ExpectTag(64)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoFightInstanceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_fight_finish = 1;
  if (has_is_fight_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_fight_finish(), output);
  }
  
  // optional int32 finish_error_code = 2;
  if (has_finish_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish_error_code(), output);
  }
  
  // optional int32 cur_fight_time = 3;
  if (has_cur_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_fight_time(), output);
  }
  
  // optional int32 left_auto_fight_times = 4;
  if (has_left_auto_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_auto_fight_times(), output);
  }
  
  // optional int32 exp_bonus = 5;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp_bonus(), output);
  }
  
  // optional int32 coin_bonus = 6;
  if (has_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->coin_bonus(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_bonus = 7;
  for (int i = 0; i < this->item_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_bonus(i), output);
  }
  
  // optional int32 left_time = 8;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoFightInstanceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_fight_finish = 1;
  if (has_is_fight_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_fight_finish(), target);
  }
  
  // optional int32 finish_error_code = 2;
  if (has_finish_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish_error_code(), target);
  }
  
  // optional int32 cur_fight_time = 3;
  if (has_cur_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_fight_time(), target);
  }
  
  // optional int32 left_auto_fight_times = 4;
  if (has_left_auto_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_auto_fight_times(), target);
  }
  
  // optional int32 exp_bonus = 5;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp_bonus(), target);
  }
  
  // optional int32 coin_bonus = 6;
  if (has_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->coin_bonus(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_bonus = 7;
  for (int i = 0; i < this->item_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item_bonus(i), target);
  }
  
  // optional int32 left_time = 8;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoFightInstanceNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_fight_finish = 1;
    if (has_is_fight_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_fight_finish());
    }
    
    // optional int32 finish_error_code = 2;
    if (has_finish_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_error_code());
    }
    
    // optional int32 cur_fight_time = 3;
    if (has_cur_fight_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_fight_time());
    }
    
    // optional int32 left_auto_fight_times = 4;
    if (has_left_auto_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_auto_fight_times());
    }
    
    // optional int32 exp_bonus = 5;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
    // optional int32 coin_bonus = 6;
    if (has_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin_bonus());
    }
    
    // optional int32 left_time = 8;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_bonus = 7;
  total_size += 1 * this->item_bonus_size();
  for (int i = 0; i < this->item_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_bonus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoFightInstanceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoFightInstanceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoFightInstanceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoFightInstanceNotify::MergeFrom(const AutoFightInstanceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_bonus_.MergeFrom(from.item_bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_fight_finish()) {
      set_is_fight_finish(from.is_fight_finish());
    }
    if (from.has_finish_error_code()) {
      set_finish_error_code(from.finish_error_code());
    }
    if (from.has_cur_fight_time()) {
      set_cur_fight_time(from.cur_fight_time());
    }
    if (from.has_left_auto_fight_times()) {
      set_left_auto_fight_times(from.left_auto_fight_times());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
    if (from.has_coin_bonus()) {
      set_coin_bonus(from.coin_bonus());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoFightInstanceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoFightInstanceNotify::CopyFrom(const AutoFightInstanceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoFightInstanceNotify::IsInitialized() const {
  
  for (int i = 0; i < item_bonus_size(); i++) {
    if (!this->item_bonus(i).IsInitialized()) return false;
  }
  return true;
}

void AutoFightInstanceNotify::Swap(AutoFightInstanceNotify* other) {
  if (other != this) {
    std::swap(is_fight_finish_, other->is_fight_finish_);
    std::swap(finish_error_code_, other->finish_error_code_);
    std::swap(cur_fight_time_, other->cur_fight_time_);
    std::swap(left_auto_fight_times_, other->left_auto_fight_times_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(coin_bonus_, other->coin_bonus_);
    item_bonus_.Swap(&other->item_bonus_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoFightInstanceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoFightInstanceNotify_descriptor_;
  metadata.reflection = AutoFightInstanceNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
