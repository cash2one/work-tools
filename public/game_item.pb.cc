// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* BuyItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SellItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SellItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuybackItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuybackItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuybackItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuybackItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuybackListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuybackListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuybackListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuybackListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReorderItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReorderItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReorderItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReorderItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDepotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDepotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenDepotResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenDepotResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandStorageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandStorageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandStorageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandStorageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyVipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyVipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyVipResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyVipResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSpiritSystemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSpiritSystemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSpiritSystemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSpiritSystemResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WingSpiritRequestType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fitem_2eproto() {
  protobuf_AddDesc_game_5fitem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_item.proto");
  GOOGLE_CHECK(file != NULL);
  BuyItemRequest_descriptor_ = file->message_type(0);
  static const int BuyItemRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, shop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, pos_),
  };
  BuyItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyItemRequest_descriptor_,
      BuyItemRequest::default_instance_,
      BuyItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyItemRequest));
  BuyItemResponse_descriptor_ = file->message_type(1);
  static const int BuyItemResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, price_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, item_),
  };
  BuyItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyItemResponse_descriptor_,
      BuyItemResponse::default_instance_,
      BuyItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyItemResponse));
  SellItemRequest_descriptor_ = file->message_type(2);
  static const int SellItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemRequest, count_),
  };
  SellItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellItemRequest_descriptor_,
      SellItemRequest::default_instance_,
      SellItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellItemRequest));
  SellItemResponse_descriptor_ = file->message_type(3);
  static const int SellItemResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, price_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, buyback_expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, item_),
  };
  SellItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SellItemResponse_descriptor_,
      SellItemResponse::default_instance_,
      SellItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SellItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SellItemResponse));
  DestroyItemRequest_descriptor_ = file->message_type(4);
  static const int DestroyItemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemRequest, item_id_),
  };
  DestroyItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyItemRequest_descriptor_,
      DestroyItemRequest::default_instance_,
      DestroyItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyItemRequest));
  DestroyItemResponse_descriptor_ = file->message_type(5);
  static const int DestroyItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemResponse, error_code_),
  };
  DestroyItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyItemResponse_descriptor_,
      DestroyItemResponse::default_instance_,
      DestroyItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyItemResponse));
  BuybackItemRequest_descriptor_ = file->message_type(6);
  static const int BuybackItemRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, expired_),
  };
  BuybackItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuybackItemRequest_descriptor_,
      BuybackItemRequest::default_instance_,
      BuybackItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuybackItemRequest));
  BuybackItemResponse_descriptor_ = file->message_type(7);
  static const int BuybackItemResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, price_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, item_),
  };
  BuybackItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuybackItemResponse_descriptor_,
      BuybackItemResponse::default_instance_,
      BuybackItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuybackItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuybackItemResponse));
  GetBuybackListRequest_descriptor_ = file->message_type(8);
  static const int GetBuybackListRequest_offsets_[1] = {
  };
  GetBuybackListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuybackListRequest_descriptor_,
      GetBuybackListRequest::default_instance_,
      GetBuybackListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuybackListRequest));
  GetBuybackListResponse_descriptor_ = file->message_type(9);
  static const int GetBuybackListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListResponse, item_list_),
  };
  GetBuybackListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuybackListResponse_descriptor_,
      GetBuybackListResponse::default_instance_,
      GetBuybackListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuybackListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuybackListResponse));
  PlaceItemRequest_descriptor_ = file->message_type(10);
  static const int PlaceItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemRequest, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemRequest, pos_type_),
  };
  PlaceItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceItemRequest_descriptor_,
      PlaceItemRequest::default_instance_,
      PlaceItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceItemRequest));
  PlaceItemResponse_descriptor_ = file->message_type(11);
  static const int PlaceItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemResponse, error_code_),
  };
  PlaceItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceItemResponse_descriptor_,
      PlaceItemResponse::default_instance_,
      PlaceItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceItemResponse));
  SwapItemRequest_descriptor_ = file->message_type(12);
  static const int SwapItemRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, src_pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, src_pos_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, dst_pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, dst_pos_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, npc_id_),
  };
  SwapItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapItemRequest_descriptor_,
      SwapItemRequest::default_instance_,
      SwapItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapItemRequest));
  SwapItemResponse_descriptor_ = file->message_type(13);
  static const int SwapItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemResponse, item_list_),
  };
  SwapItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwapItemResponse_descriptor_,
      SwapItemResponse::default_instance_,
      SwapItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwapItemResponse));
  UseItemRequest_descriptor_ = file->message_type(14);
  static const int UseItemRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, force_flag_),
  };
  UseItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemRequest_descriptor_,
      UseItemRequest::default_instance_,
      UseItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemRequest));
  UseItemResponse_descriptor_ = file->message_type(15);
  static const int UseItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemResponse, error_code_),
  };
  UseItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemResponse_descriptor_,
      UseItemResponse::default_instance_,
      UseItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemResponse));
  ExchangeItemRequest_descriptor_ = file->message_type(16);
  static const int ExchangeItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemRequest, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemRequest, treasure_id_),
  };
  ExchangeItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeItemRequest_descriptor_,
      ExchangeItemRequest::default_instance_,
      ExchangeItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeItemRequest));
  ExchangeItemResponse_descriptor_ = file->message_type(17);
  static const int ExchangeItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemResponse, item_list_),
  };
  ExchangeItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeItemResponse_descriptor_,
      ExchangeItemResponse::default_instance_,
      ExchangeItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeItemResponse));
  EquipItemRequest_descriptor_ = file->message_type(18);
  static const int EquipItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemRequest, bag_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemRequest, equip_pos_),
  };
  EquipItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipItemRequest_descriptor_,
      EquipItemRequest::default_instance_,
      EquipItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipItemRequest));
  EquipItemResponse_descriptor_ = file->message_type(19);
  static const int EquipItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemResponse, error_code_),
  };
  EquipItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipItemResponse_descriptor_,
      EquipItemResponse::default_instance_,
      EquipItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipItemResponse));
  ReorderItemRequest_descriptor_ = file->message_type(20);
  static const int ReorderItemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemRequest, pos_type_),
  };
  ReorderItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReorderItemRequest_descriptor_,
      ReorderItemRequest::default_instance_,
      ReorderItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReorderItemRequest));
  ReorderItemResponse_descriptor_ = file->message_type(21);
  static const int ReorderItemResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemResponse, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemResponse, max_size_),
  };
  ReorderItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReorderItemResponse_descriptor_,
      ReorderItemResponse::default_instance_,
      ReorderItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReorderItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReorderItemResponse));
  GetItemListRequest_descriptor_ = file->message_type(22);
  static const int GetItemListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListRequest, pos_type_),
  };
  GetItemListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemListRequest_descriptor_,
      GetItemListRequest::default_instance_,
      GetItemListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemListRequest));
  GetItemListResponse_descriptor_ = file->message_type(23);
  static const int GetItemListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListResponse, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListResponse, max_size_),
  };
  GetItemListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemListResponse_descriptor_,
      GetItemListResponse::default_instance_,
      GetItemListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemListResponse));
  OpenDepotRequest_descriptor_ = file->message_type(24);
  static const int OpenDepotRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotRequest, npc_id_),
  };
  OpenDepotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenDepotRequest_descriptor_,
      OpenDepotRequest::default_instance_,
      OpenDepotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenDepotRequest));
  OpenDepotResponse_descriptor_ = file->message_type(25);
  static const int OpenDepotResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotResponse, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotResponse, max_size_),
  };
  OpenDepotResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenDepotResponse_descriptor_,
      OpenDepotResponse::default_instance_,
      OpenDepotResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenDepotResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenDepotResponse));
  ExpandStorageRequest_descriptor_ = file->message_type(26);
  static const int ExpandStorageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageRequest, pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageRequest, count_),
  };
  ExpandStorageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandStorageRequest_descriptor_,
      ExpandStorageRequest::default_instance_,
      ExpandStorageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandStorageRequest));
  ExpandStorageResponse_descriptor_ = file->message_type(27);
  static const int ExpandStorageResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageResponse, max_size_),
  };
  ExpandStorageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandStorageResponse_descriptor_,
      ExpandStorageResponse::default_instance_,
      ExpandStorageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandStorageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandStorageResponse));
  BuyVipRequest_descriptor_ = file->message_type(28);
  static const int BuyVipRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipRequest, vip_level_),
  };
  BuyVipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyVipRequest_descriptor_,
      BuyVipRequest::default_instance_,
      BuyVipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyVipRequest));
  BuyVipResponse_descriptor_ = file->message_type(29);
  static const int BuyVipResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipResponse, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipResponse, price_value_),
  };
  BuyVipResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyVipResponse_descriptor_,
      BuyVipResponse::default_instance_,
      BuyVipResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyVipResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyVipResponse));
  WingSpiritSystemRequest_descriptor_ = file->message_type(30);
  static const int WingSpiritSystemRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, generator_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, spirit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, source_spirit_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, wing_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, exchange_spirit_id_),
  };
  WingSpiritSystemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSpiritSystemRequest_descriptor_,
      WingSpiritSystemRequest::default_instance_,
      WingSpiritSystemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSpiritSystemRequest));
  WingSpiritSystemResponse_descriptor_ = file->message_type(31);
  static const int WingSpiritSystemResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, wings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, spirits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, generators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, fragement_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, magic_leaf_num_),
  };
  WingSpiritSystemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSpiritSystemResponse_descriptor_,
      WingSpiritSystemResponse::default_instance_,
      WingSpiritSystemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritSystemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSpiritSystemResponse));
  WingSpiritRequestType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fitem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyItemRequest_descriptor_, &BuyItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyItemResponse_descriptor_, &BuyItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellItemRequest_descriptor_, &SellItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SellItemResponse_descriptor_, &SellItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyItemRequest_descriptor_, &DestroyItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyItemResponse_descriptor_, &DestroyItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuybackItemRequest_descriptor_, &BuybackItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuybackItemResponse_descriptor_, &BuybackItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuybackListRequest_descriptor_, &GetBuybackListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuybackListResponse_descriptor_, &GetBuybackListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceItemRequest_descriptor_, &PlaceItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceItemResponse_descriptor_, &PlaceItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapItemRequest_descriptor_, &SwapItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwapItemResponse_descriptor_, &SwapItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemRequest_descriptor_, &UseItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemResponse_descriptor_, &UseItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeItemRequest_descriptor_, &ExchangeItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeItemResponse_descriptor_, &ExchangeItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipItemRequest_descriptor_, &EquipItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipItemResponse_descriptor_, &EquipItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReorderItemRequest_descriptor_, &ReorderItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReorderItemResponse_descriptor_, &ReorderItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemListRequest_descriptor_, &GetItemListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemListResponse_descriptor_, &GetItemListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenDepotRequest_descriptor_, &OpenDepotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenDepotResponse_descriptor_, &OpenDepotResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandStorageRequest_descriptor_, &ExpandStorageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandStorageResponse_descriptor_, &ExpandStorageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyVipRequest_descriptor_, &BuyVipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyVipResponse_descriptor_, &BuyVipResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSpiritSystemRequest_descriptor_, &WingSpiritSystemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSpiritSystemResponse_descriptor_, &WingSpiritSystemResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fitem_2eproto() {
  delete BuyItemRequest::default_instance_;
  delete BuyItemRequest_reflection_;
  delete BuyItemResponse::default_instance_;
  delete BuyItemResponse_reflection_;
  delete SellItemRequest::default_instance_;
  delete SellItemRequest_reflection_;
  delete SellItemResponse::default_instance_;
  delete SellItemResponse_reflection_;
  delete DestroyItemRequest::default_instance_;
  delete DestroyItemRequest_reflection_;
  delete DestroyItemResponse::default_instance_;
  delete DestroyItemResponse_reflection_;
  delete BuybackItemRequest::default_instance_;
  delete BuybackItemRequest_reflection_;
  delete BuybackItemResponse::default_instance_;
  delete BuybackItemResponse_reflection_;
  delete GetBuybackListRequest::default_instance_;
  delete GetBuybackListRequest_reflection_;
  delete GetBuybackListResponse::default_instance_;
  delete GetBuybackListResponse_reflection_;
  delete PlaceItemRequest::default_instance_;
  delete PlaceItemRequest_reflection_;
  delete PlaceItemResponse::default_instance_;
  delete PlaceItemResponse_reflection_;
  delete SwapItemRequest::default_instance_;
  delete SwapItemRequest_reflection_;
  delete SwapItemResponse::default_instance_;
  delete SwapItemResponse_reflection_;
  delete UseItemRequest::default_instance_;
  delete UseItemRequest_reflection_;
  delete UseItemResponse::default_instance_;
  delete UseItemResponse_reflection_;
  delete ExchangeItemRequest::default_instance_;
  delete ExchangeItemRequest_reflection_;
  delete ExchangeItemResponse::default_instance_;
  delete ExchangeItemResponse_reflection_;
  delete EquipItemRequest::default_instance_;
  delete EquipItemRequest_reflection_;
  delete EquipItemResponse::default_instance_;
  delete EquipItemResponse_reflection_;
  delete ReorderItemRequest::default_instance_;
  delete ReorderItemRequest_reflection_;
  delete ReorderItemResponse::default_instance_;
  delete ReorderItemResponse_reflection_;
  delete GetItemListRequest::default_instance_;
  delete GetItemListRequest_reflection_;
  delete GetItemListResponse::default_instance_;
  delete GetItemListResponse_reflection_;
  delete OpenDepotRequest::default_instance_;
  delete OpenDepotRequest_reflection_;
  delete OpenDepotResponse::default_instance_;
  delete OpenDepotResponse_reflection_;
  delete ExpandStorageRequest::default_instance_;
  delete ExpandStorageRequest_reflection_;
  delete ExpandStorageResponse::default_instance_;
  delete ExpandStorageResponse_reflection_;
  delete BuyVipRequest::default_instance_;
  delete BuyVipRequest_reflection_;
  delete BuyVipResponse::default_instance_;
  delete BuyVipResponse_reflection_;
  delete WingSpiritSystemRequest::default_instance_;
  delete WingSpiritSystemRequest_reflection_;
  delete WingSpiritSystemResponse::default_instance_;
  delete WingSpiritSystemResponse_reflection_;
}

void protobuf_AddDesc_game_5fitem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017game_item.proto\022\020protocols.common\032\021gam"
    "e_common.proto\"J\n\016BuyItemRequest\022\013\n\003tid\030"
    "\001 \002(\005\022\r\n\005count\030\002 \002(\005\022\017\n\007shop_id\030\003 \001(\005\022\013\n"
    "\003pos\030\004 \001(\005\"x\n\017BuyItemResponse\022\022\n\nerror_c"
    "ode\030\001 \002(\005\022\022\n\nprice_type\030\002 \001(\005\022\023\n\013price_v"
    "alue\030\003 \001(\005\022(\n\004item\030\004 \001(\0132\032.protocols.com"
    "mon.ItemInfo\"1\n\017SellItemRequest\022\017\n\007item_"
    "id\030\001 \002(\003\022\r\n\005count\030\002 \002(\005\"\222\001\n\020SellItemResp"
    "onse\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nprice_type\030\002"
    " \001(\005\022\023\n\013price_value\030\003 \001(\005\022\027\n\017buyback_exp"
    "ired\030\005 \001(\005\022(\n\004item\030\004 \001(\0132\032.protocols.com"
    "mon.ItemInfo\"%\n\022DestroyItemRequest\022\017\n\007it"
    "em_id\030\001 \002(\003\")\n\023DestroyItemResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\"R\n\022BuybackItemRequest\022\017\n\007"
    "item_id\030\001 \002(\003\022\r\n\005count\030\002 \001(\005\022\013\n\003pos\030\003 \001("
    "\005\022\017\n\007expired\030\004 \001(\005\"|\n\023BuybackItemRespons"
    "e\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nprice_type\030\002 \001("
    "\005\022\023\n\013price_value\030\003 \001(\005\022(\n\004item\030\004 \001(\0132\032.p"
    "rotocols.common.ItemInfo\"\027\n\025GetBuybackLi"
    "stRequest\"[\n\026GetBuybackListResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\022-\n\titem_list\030\002 \003(\0132\032.pro"
    "tocols.common.ItemInfo\"E\n\020PlaceItemReque"
    "st\022\017\n\007item_id\030\001 \002(\003\022\013\n\003pos\030\002 \001(\005\022\023\n\010pos_"
    "type\030\003 \001(\005:\0010\"\'\n\021PlaceItemResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\"{\n\017SwapItemRequest\022\024\n\014src"
    "_pos_type\030\001 \001(\005\022\025\n\rsrc_pos_value\030\002 \001(\005\022\024"
    "\n\014dst_pos_type\030\003 \001(\005\022\025\n\rdst_pos_value\030\004 "
    "\001(\005\022\016\n\006npc_id\030\005 \001(\005\"U\n\020SwapItemResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\022-\n\titem_list\030\002 \003(\0132\032"
    ".protocols.common.ItemInfo\"R\n\016UseItemReq"
    "uest\022\017\n\007item_id\030\001 \002(\003\022\014\n\004guid\030\003 \002(\003\022\r\n\005c"
    "ount\030\002 \002(\005\022\022\n\nforce_flag\030\004 \001(\005\"%\n\017UseIte"
    "mResponse\022\022\n\nerror_code\030\001 \002(\005\":\n\023Exchang"
    "eItemRequest\022\016\n\006npc_id\030\001 \002(\005\022\023\n\013treasure"
    "_id\030\002 \002(\005\"Y\n\024ExchangeItemResponse\022\022\n\nerr"
    "or_code\030\001 \002(\005\022-\n\titem_list\030\002 \003(\0132\032.proto"
    "cols.common.ItemInfo\"D\n\020EquipItemRequest"
    "\022\014\n\004guid\030\001 \002(\003\022\017\n\007bag_pos\030\002 \002(\005\022\021\n\tequip"
    "_pos\030\003 \002(\005\"\'\n\021EquipItemResponse\022\022\n\nerror"
    "_code\030\001 \002(\005\"&\n\022ReorderItemRequest\022\020\n\010pos"
    "_type\030\001 \001(\005\"j\n\023ReorderItemResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\022-\n\titem_list\030\002 \003(\0132\032.prot"
    "ocols.common.ItemInfo\022\020\n\010max_size\030\003 \001(\005\""
    "&\n\022GetItemListRequest\022\020\n\010pos_type\030\001 \001(\005\""
    "j\n\023GetItemListResponse\022\022\n\nerror_code\030\001 \002"
    "(\005\022-\n\titem_list\030\002 \003(\0132\032.protocols.common"
    ".ItemInfo\022\020\n\010max_size\030\003 \001(\005\"\"\n\020OpenDepot"
    "Request\022\016\n\006npc_id\030\001 \001(\005\"h\n\021OpenDepotResp"
    "onse\022\022\n\nerror_code\030\001 \002(\005\022-\n\titem_list\030\002 "
    "\003(\0132\032.protocols.common.ItemInfo\022\020\n\010max_s"
    "ize\030\003 \001(\005\":\n\024ExpandStorageRequest\022\020\n\010pos"
    "_type\030\001 \001(\005\022\020\n\005count\030\002 \001(\005:\0011\"=\n\025ExpandS"
    "torageResponse\022\022\n\nerror_code\030\001 \002(\005\022\020\n\010ma"
    "x_size\030\002 \001(\005\"2\n\rBuyVipRequest\022\013\n\003tid\030\001 \002"
    "(\005\022\024\n\tvip_level\030\002 \001(\005:\0010\"M\n\016BuyVipRespon"
    "se\022\022\n\nerror_code\030\001 \002(\005\022\022\n\nprice_type\030\002 \001"
    "(\005\022\023\n\013price_value\030\003 \001(\005\"\340\001\n\027WingSpiritSy"
    "stemRequest\0225\n\004type\030\001 \002(\0162\'.protocols.co"
    "mmon.WingSpiritRequestType\022\027\n\017generator_"
    "level\030\002 \001(\005\022\024\n\014spirit_index\030\003 \001(\005\022\033\n\023sou"
    "rce_spirit_index\030\004 \001(\005\022\020\n\010slot_num\030\005 \001(\005"
    "\022\024\n\014wing_item_id\030\006 \001(\003\022\032\n\022exchange_spiri"
    "t_id\030\007 \001(\005\"\267\002\n\030WingSpiritSystemResponse\022"
    "\022\n\nerror_code\030\001 \002(\005\022-\n\005wings\030\002 \003(\0132\036.pro"
    "tocols.common.WingItemInfo\0221\n\007spirits\030\003 "
    "\003(\0132 .protocols.common.WingSpiritInfo\0229\n"
    "\ngenerators\030\004 \003(\0132%.protocols.common.Spi"
    "ritGeneratorInfo\022,\n\003bag\030\005 \001(\0132\037.protocol"
    "s.common.WingSpiritBag\022\025\n\rfragement_num\030"
    "\006 \001(\003\022\r\n\005point\030\007 \001(\003\022\026\n\016magic_leaf_num\030\010"
    " \001(\003*\257\004\n\025WingSpiritRequestType\022\035\n\031wing_s"
    "pirit_get_wing_list\020\000\022\037\n\033wing_spirit_get"
    "_spirit_pool\020\004\022\"\n\036wing_spirit_get_genera"
    "tor_list\020\005\022\036\n\032wing_spirit_get_spirit_bag"
    "\020\010\022$\n wing_spirit_get_spirit_fragments\020\014"
    "\022#\n\037wing_spirit_enable_generator_l4\020\006\022\037\n"
    "\033wing_spirit_gen_wing_spirit\020\001\022\037\n\033wing_s"
    "pirit_get_wing_spirit\020\002\022 \n\034wing_spirit_s"
    "ell_wing_spirit\020\003\022\034\n\030wing_spirit_merge_s"
    "pirit\020\007\022\037\n\033wing_spirit_enable_bag_slot\020\t"
    "\022\034\n\030wing_spirit_equip_spirit\020\n\022\036\n\032wing_s"
    "pirit_unequip_spirit\020\013\022\"\n\036wing_spirit_ex"
    "change_fragments\020\r\022\036\n\032wing_spirit_magic_"
    "leaf_num\020\016\022\"\n\036wing_spirit_move_spirit_in"
    "_bag\020\017", 3366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_item.proto", &protobuf_RegisterTypes);
  BuyItemRequest::default_instance_ = new BuyItemRequest();
  BuyItemResponse::default_instance_ = new BuyItemResponse();
  SellItemRequest::default_instance_ = new SellItemRequest();
  SellItemResponse::default_instance_ = new SellItemResponse();
  DestroyItemRequest::default_instance_ = new DestroyItemRequest();
  DestroyItemResponse::default_instance_ = new DestroyItemResponse();
  BuybackItemRequest::default_instance_ = new BuybackItemRequest();
  BuybackItemResponse::default_instance_ = new BuybackItemResponse();
  GetBuybackListRequest::default_instance_ = new GetBuybackListRequest();
  GetBuybackListResponse::default_instance_ = new GetBuybackListResponse();
  PlaceItemRequest::default_instance_ = new PlaceItemRequest();
  PlaceItemResponse::default_instance_ = new PlaceItemResponse();
  SwapItemRequest::default_instance_ = new SwapItemRequest();
  SwapItemResponse::default_instance_ = new SwapItemResponse();
  UseItemRequest::default_instance_ = new UseItemRequest();
  UseItemResponse::default_instance_ = new UseItemResponse();
  ExchangeItemRequest::default_instance_ = new ExchangeItemRequest();
  ExchangeItemResponse::default_instance_ = new ExchangeItemResponse();
  EquipItemRequest::default_instance_ = new EquipItemRequest();
  EquipItemResponse::default_instance_ = new EquipItemResponse();
  ReorderItemRequest::default_instance_ = new ReorderItemRequest();
  ReorderItemResponse::default_instance_ = new ReorderItemResponse();
  GetItemListRequest::default_instance_ = new GetItemListRequest();
  GetItemListResponse::default_instance_ = new GetItemListResponse();
  OpenDepotRequest::default_instance_ = new OpenDepotRequest();
  OpenDepotResponse::default_instance_ = new OpenDepotResponse();
  ExpandStorageRequest::default_instance_ = new ExpandStorageRequest();
  ExpandStorageResponse::default_instance_ = new ExpandStorageResponse();
  BuyVipRequest::default_instance_ = new BuyVipRequest();
  BuyVipResponse::default_instance_ = new BuyVipResponse();
  WingSpiritSystemRequest::default_instance_ = new WingSpiritSystemRequest();
  WingSpiritSystemResponse::default_instance_ = new WingSpiritSystemResponse();
  BuyItemRequest::default_instance_->InitAsDefaultInstance();
  BuyItemResponse::default_instance_->InitAsDefaultInstance();
  SellItemRequest::default_instance_->InitAsDefaultInstance();
  SellItemResponse::default_instance_->InitAsDefaultInstance();
  DestroyItemRequest::default_instance_->InitAsDefaultInstance();
  DestroyItemResponse::default_instance_->InitAsDefaultInstance();
  BuybackItemRequest::default_instance_->InitAsDefaultInstance();
  BuybackItemResponse::default_instance_->InitAsDefaultInstance();
  GetBuybackListRequest::default_instance_->InitAsDefaultInstance();
  GetBuybackListResponse::default_instance_->InitAsDefaultInstance();
  PlaceItemRequest::default_instance_->InitAsDefaultInstance();
  PlaceItemResponse::default_instance_->InitAsDefaultInstance();
  SwapItemRequest::default_instance_->InitAsDefaultInstance();
  SwapItemResponse::default_instance_->InitAsDefaultInstance();
  UseItemRequest::default_instance_->InitAsDefaultInstance();
  UseItemResponse::default_instance_->InitAsDefaultInstance();
  ExchangeItemRequest::default_instance_->InitAsDefaultInstance();
  ExchangeItemResponse::default_instance_->InitAsDefaultInstance();
  EquipItemRequest::default_instance_->InitAsDefaultInstance();
  EquipItemResponse::default_instance_->InitAsDefaultInstance();
  ReorderItemRequest::default_instance_->InitAsDefaultInstance();
  ReorderItemResponse::default_instance_->InitAsDefaultInstance();
  GetItemListRequest::default_instance_->InitAsDefaultInstance();
  GetItemListResponse::default_instance_->InitAsDefaultInstance();
  OpenDepotRequest::default_instance_->InitAsDefaultInstance();
  OpenDepotResponse::default_instance_->InitAsDefaultInstance();
  ExpandStorageRequest::default_instance_->InitAsDefaultInstance();
  ExpandStorageResponse::default_instance_->InitAsDefaultInstance();
  BuyVipRequest::default_instance_->InitAsDefaultInstance();
  BuyVipResponse::default_instance_->InitAsDefaultInstance();
  WingSpiritSystemRequest::default_instance_->InitAsDefaultInstance();
  WingSpiritSystemResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fitem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fitem_2eproto {
  StaticDescriptorInitializer_game_5fitem_2eproto() {
    protobuf_AddDesc_game_5fitem_2eproto();
  }
} static_descriptor_initializer_game_5fitem_2eproto_;

const ::google::protobuf::EnumDescriptor* WingSpiritRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSpiritRequestType_descriptor_;
}
bool WingSpiritRequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BuyItemRequest::kTidFieldNumber;
const int BuyItemRequest::kCountFieldNumber;
const int BuyItemRequest::kShopIdFieldNumber;
const int BuyItemRequest::kPosFieldNumber;
#endif  // !_MSC_VER

BuyItemRequest::BuyItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyItemRequest::InitAsDefaultInstance() {
}

BuyItemRequest::BuyItemRequest(const BuyItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyItemRequest::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  count_ = 0;
  shop_id_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyItemRequest::~BuyItemRequest() {
  SharedDtor();
}

void BuyItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyItemRequest_descriptor_;
}

const BuyItemRequest& BuyItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuyItemRequest* BuyItemRequest::default_instance_ = NULL;

BuyItemRequest* BuyItemRequest::New() const {
  return new BuyItemRequest;
}

void BuyItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    count_ = 0;
    shop_id_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_id;
        break;
      }
      
      // optional int32 shop_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_id_)));
          set_has_shop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 shop_id = 3;
  if (has_shop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shop_id(), output);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 shop_id = 3;
  if (has_shop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shop_id(), target);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 shop_id = 3;
    if (has_shop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_id());
    }
    
    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyItemRequest::MergeFrom(const BuyItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_shop_id()) {
      set_shop_id(from.shop_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyItemRequest::CopyFrom(const BuyItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuyItemRequest::Swap(BuyItemRequest* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(count_, other->count_);
    std::swap(shop_id_, other->shop_id_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyItemRequest_descriptor_;
  metadata.reflection = BuyItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyItemResponse::kErrorCodeFieldNumber;
const int BuyItemResponse::kPriceTypeFieldNumber;
const int BuyItemResponse::kPriceValueFieldNumber;
const int BuyItemResponse::kItemFieldNumber;
#endif  // !_MSC_VER

BuyItemResponse::BuyItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyItemResponse::InitAsDefaultInstance() {
  item_ = const_cast< ::protocols::common::ItemInfo*>(&::protocols::common::ItemInfo::default_instance());
}

BuyItemResponse::BuyItemResponse(const BuyItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  price_type_ = 0;
  price_value_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyItemResponse::~BuyItemResponse() {
  SharedDtor();
}

void BuyItemResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BuyItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyItemResponse_descriptor_;
}

const BuyItemResponse& BuyItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuyItemResponse* BuyItemResponse::default_instance_ = NULL;

BuyItemResponse* BuyItemResponse::New() const {
  return new BuyItemResponse;
}

void BuyItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    price_type_ = 0;
    price_value_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::protocols::common::ItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_type;
        break;
      }
      
      // optional int32 price_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_value;
        break;
      }
      
      // optional int32 price_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_value_)));
          set_has_price_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }
      
      // optional .protocols.common.ItemInfo item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_type(), output);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_value(), output);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_type(), target);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_value(), target);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 price_type = 2;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }
    
    // optional int32 price_value = 3;
    if (has_price_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_value());
    }
    
    // optional .protocols.common.ItemInfo item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyItemResponse::MergeFrom(const BuyItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price_value()) {
      set_price_value(from.price_value());
    }
    if (from.has_item()) {
      mutable_item()->::protocols::common::ItemInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyItemResponse::CopyFrom(const BuyItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void BuyItemResponse::Swap(BuyItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_value_, other->price_value_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyItemResponse_descriptor_;
  metadata.reflection = BuyItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellItemRequest::kItemIdFieldNumber;
const int SellItemRequest::kCountFieldNumber;
#endif  // !_MSC_VER

SellItemRequest::SellItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellItemRequest::InitAsDefaultInstance() {
}

SellItemRequest::SellItemRequest(const SellItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellItemRequest::~SellItemRequest() {
  SharedDtor();
}

void SellItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SellItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellItemRequest_descriptor_;
}

const SellItemRequest& SellItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

SellItemRequest* SellItemRequest::default_instance_ = NULL;

SellItemRequest* SellItemRequest::New() const {
  return new SellItemRequest;
}

void SellItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellItemRequest::MergeFrom(const SellItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellItemRequest::CopyFrom(const SellItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SellItemRequest::Swap(SellItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellItemRequest_descriptor_;
  metadata.reflection = SellItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SellItemResponse::kErrorCodeFieldNumber;
const int SellItemResponse::kPriceTypeFieldNumber;
const int SellItemResponse::kPriceValueFieldNumber;
const int SellItemResponse::kBuybackExpiredFieldNumber;
const int SellItemResponse::kItemFieldNumber;
#endif  // !_MSC_VER

SellItemResponse::SellItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SellItemResponse::InitAsDefaultInstance() {
  item_ = const_cast< ::protocols::common::ItemInfo*>(&::protocols::common::ItemInfo::default_instance());
}

SellItemResponse::SellItemResponse(const SellItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SellItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  price_type_ = 0;
  price_value_ = 0;
  buyback_expired_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SellItemResponse::~SellItemResponse() {
  SharedDtor();
}

void SellItemResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void SellItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SellItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SellItemResponse_descriptor_;
}

const SellItemResponse& SellItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

SellItemResponse* SellItemResponse::default_instance_ = NULL;

SellItemResponse* SellItemResponse::New() const {
  return new SellItemResponse;
}

void SellItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    price_type_ = 0;
    price_value_ = 0;
    buyback_expired_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::protocols::common::ItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SellItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_type;
        break;
      }
      
      // optional int32 price_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_value;
        break;
      }
      
      // optional int32 price_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_value_)));
          set_has_price_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }
      
      // optional .protocols.common.ItemInfo item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyback_expired;
        break;
      }
      
      // optional int32 buyback_expired = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyback_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyback_expired_)));
          set_has_buyback_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SellItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_type(), output);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_value(), output);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }
  
  // optional int32 buyback_expired = 5;
  if (has_buyback_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buyback_expired(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SellItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_type(), target);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_value(), target);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }
  
  // optional int32 buyback_expired = 5;
  if (has_buyback_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buyback_expired(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SellItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 price_type = 2;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }
    
    // optional int32 price_value = 3;
    if (has_price_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_value());
    }
    
    // optional int32 buyback_expired = 5;
    if (has_buyback_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyback_expired());
    }
    
    // optional .protocols.common.ItemInfo item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SellItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SellItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SellItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SellItemResponse::MergeFrom(const SellItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price_value()) {
      set_price_value(from.price_value());
    }
    if (from.has_buyback_expired()) {
      set_buyback_expired(from.buyback_expired());
    }
    if (from.has_item()) {
      mutable_item()->::protocols::common::ItemInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SellItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SellItemResponse::CopyFrom(const SellItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void SellItemResponse::Swap(SellItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_value_, other->price_value_);
    std::swap(buyback_expired_, other->buyback_expired_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SellItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SellItemResponse_descriptor_;
  metadata.reflection = SellItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestroyItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

DestroyItemRequest::DestroyItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestroyItemRequest::InitAsDefaultInstance() {
}

DestroyItemRequest::DestroyItemRequest(const DestroyItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestroyItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyItemRequest::~DestroyItemRequest() {
  SharedDtor();
}

void DestroyItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyItemRequest_descriptor_;
}

const DestroyItemRequest& DestroyItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

DestroyItemRequest* DestroyItemRequest::default_instance_ = NULL;

DestroyItemRequest* DestroyItemRequest::New() const {
  return new DestroyItemRequest;
}

void DestroyItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestroyItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestroyItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestroyItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyItemRequest::MergeFrom(const DestroyItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyItemRequest::CopyFrom(const DestroyItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DestroyItemRequest::Swap(DestroyItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyItemRequest_descriptor_;
  metadata.reflection = DestroyItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestroyItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DestroyItemResponse::DestroyItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestroyItemResponse::InitAsDefaultInstance() {
}

DestroyItemResponse::DestroyItemResponse(const DestroyItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestroyItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyItemResponse::~DestroyItemResponse() {
  SharedDtor();
}

void DestroyItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyItemResponse_descriptor_;
}

const DestroyItemResponse& DestroyItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

DestroyItemResponse* DestroyItemResponse::default_instance_ = NULL;

DestroyItemResponse* DestroyItemResponse::New() const {
  return new DestroyItemResponse;
}

void DestroyItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestroyItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestroyItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestroyItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestroyItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestroyItemResponse::MergeFrom(const DestroyItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestroyItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyItemResponse::CopyFrom(const DestroyItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DestroyItemResponse::Swap(DestroyItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestroyItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyItemResponse_descriptor_;
  metadata.reflection = DestroyItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuybackItemRequest::kItemIdFieldNumber;
const int BuybackItemRequest::kCountFieldNumber;
const int BuybackItemRequest::kPosFieldNumber;
const int BuybackItemRequest::kExpiredFieldNumber;
#endif  // !_MSC_VER

BuybackItemRequest::BuybackItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuybackItemRequest::InitAsDefaultInstance() {
}

BuybackItemRequest::BuybackItemRequest(const BuybackItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuybackItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  pos_ = 0;
  expired_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuybackItemRequest::~BuybackItemRequest() {
  SharedDtor();
}

void BuybackItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuybackItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuybackItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuybackItemRequest_descriptor_;
}

const BuybackItemRequest& BuybackItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuybackItemRequest* BuybackItemRequest::default_instance_ = NULL;

BuybackItemRequest* BuybackItemRequest::New() const {
  return new BuybackItemRequest;
}

void BuybackItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    pos_ = 0;
    expired_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuybackItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuybackItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }
  
  // optional int32 expired = 4;
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expired(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuybackItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }
  
  // optional int32 expired = 4;
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expired(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuybackItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 expired = 4;
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuybackItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuybackItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuybackItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuybackItemRequest::MergeFrom(const BuybackItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuybackItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuybackItemRequest::CopyFrom(const BuybackItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuybackItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuybackItemRequest::Swap(BuybackItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(pos_, other->pos_);
    std::swap(expired_, other->expired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuybackItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuybackItemRequest_descriptor_;
  metadata.reflection = BuybackItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuybackItemResponse::kErrorCodeFieldNumber;
const int BuybackItemResponse::kPriceTypeFieldNumber;
const int BuybackItemResponse::kPriceValueFieldNumber;
const int BuybackItemResponse::kItemFieldNumber;
#endif  // !_MSC_VER

BuybackItemResponse::BuybackItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuybackItemResponse::InitAsDefaultInstance() {
  item_ = const_cast< ::protocols::common::ItemInfo*>(&::protocols::common::ItemInfo::default_instance());
}

BuybackItemResponse::BuybackItemResponse(const BuybackItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuybackItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  price_type_ = 0;
  price_value_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuybackItemResponse::~BuybackItemResponse() {
  SharedDtor();
}

void BuybackItemResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BuybackItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuybackItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuybackItemResponse_descriptor_;
}

const BuybackItemResponse& BuybackItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuybackItemResponse* BuybackItemResponse::default_instance_ = NULL;

BuybackItemResponse* BuybackItemResponse::New() const {
  return new BuybackItemResponse;
}

void BuybackItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    price_type_ = 0;
    price_value_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::protocols::common::ItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuybackItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_type;
        break;
      }
      
      // optional int32 price_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_value;
        break;
      }
      
      // optional int32 price_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_value_)));
          set_has_price_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }
      
      // optional .protocols.common.ItemInfo item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuybackItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_type(), output);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_value(), output);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuybackItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_type(), target);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_value(), target);
  }
  
  // optional .protocols.common.ItemInfo item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuybackItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 price_type = 2;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }
    
    // optional int32 price_value = 3;
    if (has_price_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_value());
    }
    
    // optional .protocols.common.ItemInfo item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuybackItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuybackItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuybackItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuybackItemResponse::MergeFrom(const BuybackItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price_value()) {
      set_price_value(from.price_value());
    }
    if (from.has_item()) {
      mutable_item()->::protocols::common::ItemInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuybackItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuybackItemResponse::CopyFrom(const BuybackItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuybackItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void BuybackItemResponse::Swap(BuybackItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_value_, other->price_value_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuybackItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuybackItemResponse_descriptor_;
  metadata.reflection = BuybackItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetBuybackListRequest::GetBuybackListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuybackListRequest::InitAsDefaultInstance() {
}

GetBuybackListRequest::GetBuybackListRequest(const GetBuybackListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuybackListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuybackListRequest::~GetBuybackListRequest() {
  SharedDtor();
}

void GetBuybackListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuybackListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuybackListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuybackListRequest_descriptor_;
}

const GetBuybackListRequest& GetBuybackListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

GetBuybackListRequest* GetBuybackListRequest::default_instance_ = NULL;

GetBuybackListRequest* GetBuybackListRequest::New() const {
  return new GetBuybackListRequest;
}

void GetBuybackListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuybackListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetBuybackListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuybackListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuybackListRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuybackListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuybackListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuybackListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuybackListRequest::MergeFrom(const GetBuybackListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuybackListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuybackListRequest::CopyFrom(const GetBuybackListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuybackListRequest::IsInitialized() const {
  
  return true;
}

void GetBuybackListRequest::Swap(GetBuybackListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuybackListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuybackListRequest_descriptor_;
  metadata.reflection = GetBuybackListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBuybackListResponse::kErrorCodeFieldNumber;
const int GetBuybackListResponse::kItemListFieldNumber;
#endif  // !_MSC_VER

GetBuybackListResponse::GetBuybackListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuybackListResponse::InitAsDefaultInstance() {
}

GetBuybackListResponse::GetBuybackListResponse(const GetBuybackListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuybackListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuybackListResponse::~GetBuybackListResponse() {
  SharedDtor();
}

void GetBuybackListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuybackListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuybackListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuybackListResponse_descriptor_;
}

const GetBuybackListResponse& GetBuybackListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

GetBuybackListResponse* GetBuybackListResponse::default_instance_ = NULL;

GetBuybackListResponse* GetBuybackListResponse::New() const {
  return new GetBuybackListResponse;
}

void GetBuybackListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuybackListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBuybackListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuybackListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuybackListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuybackListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuybackListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuybackListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuybackListResponse::MergeFrom(const GetBuybackListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuybackListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuybackListResponse::CopyFrom(const GetBuybackListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuybackListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetBuybackListResponse::Swap(GetBuybackListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuybackListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuybackListResponse_descriptor_;
  metadata.reflection = GetBuybackListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceItemRequest::kItemIdFieldNumber;
const int PlaceItemRequest::kPosFieldNumber;
const int PlaceItemRequest::kPosTypeFieldNumber;
#endif  // !_MSC_VER

PlaceItemRequest::PlaceItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceItemRequest::InitAsDefaultInstance() {
}

PlaceItemRequest::PlaceItemRequest(const PlaceItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  pos_ = 0;
  pos_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceItemRequest::~PlaceItemRequest() {
  SharedDtor();
}

void PlaceItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceItemRequest_descriptor_;
}

const PlaceItemRequest& PlaceItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

PlaceItemRequest* PlaceItemRequest::default_instance_ = NULL;

PlaceItemRequest* PlaceItemRequest::New() const {
  return new PlaceItemRequest;
}

void PlaceItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    pos_ = 0;
    pos_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_type;
        break;
      }
      
      // optional int32 pos_type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }
  
  // optional int32 pos_type = 3 [default = 0];
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }
  
  // optional int32 pos_type = 3 [default = 0];
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 pos_type = 3 [default = 0];
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceItemRequest::MergeFrom(const PlaceItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceItemRequest::CopyFrom(const PlaceItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlaceItemRequest::Swap(PlaceItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(pos_, other->pos_);
    std::swap(pos_type_, other->pos_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceItemRequest_descriptor_;
  metadata.reflection = PlaceItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

PlaceItemResponse::PlaceItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceItemResponse::InitAsDefaultInstance() {
}

PlaceItemResponse::PlaceItemResponse(const PlaceItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceItemResponse::~PlaceItemResponse() {
  SharedDtor();
}

void PlaceItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceItemResponse_descriptor_;
}

const PlaceItemResponse& PlaceItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

PlaceItemResponse* PlaceItemResponse::default_instance_ = NULL;

PlaceItemResponse* PlaceItemResponse::New() const {
  return new PlaceItemResponse;
}

void PlaceItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceItemResponse::MergeFrom(const PlaceItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceItemResponse::CopyFrom(const PlaceItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlaceItemResponse::Swap(PlaceItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceItemResponse_descriptor_;
  metadata.reflection = PlaceItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapItemRequest::kSrcPosTypeFieldNumber;
const int SwapItemRequest::kSrcPosValueFieldNumber;
const int SwapItemRequest::kDstPosTypeFieldNumber;
const int SwapItemRequest::kDstPosValueFieldNumber;
const int SwapItemRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

SwapItemRequest::SwapItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapItemRequest::InitAsDefaultInstance() {
}

SwapItemRequest::SwapItemRequest(const SwapItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapItemRequest::SharedCtor() {
  _cached_size_ = 0;
  src_pos_type_ = 0;
  src_pos_value_ = 0;
  dst_pos_type_ = 0;
  dst_pos_value_ = 0;
  npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapItemRequest::~SwapItemRequest() {
  SharedDtor();
}

void SwapItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapItemRequest_descriptor_;
}

const SwapItemRequest& SwapItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

SwapItemRequest* SwapItemRequest::default_instance_ = NULL;

SwapItemRequest* SwapItemRequest::New() const {
  return new SwapItemRequest;
}

void SwapItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_pos_type_ = 0;
    src_pos_value_ = 0;
    dst_pos_type_ = 0;
    dst_pos_value_ = 0;
    npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 src_pos_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_pos_type_)));
          set_has_src_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_pos_value;
        break;
      }
      
      // optional int32 src_pos_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_pos_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_pos_value_)));
          set_has_src_pos_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_pos_type;
        break;
      }
      
      // optional int32 dst_pos_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_pos_type_)));
          set_has_dst_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_pos_value;
        break;
      }
      
      // optional int32 dst_pos_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_pos_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_pos_value_)));
          set_has_dst_pos_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_npc_id;
        break;
      }
      
      // optional int32 npc_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 src_pos_type = 1;
  if (has_src_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src_pos_type(), output);
  }
  
  // optional int32 src_pos_value = 2;
  if (has_src_pos_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->src_pos_value(), output);
  }
  
  // optional int32 dst_pos_type = 3;
  if (has_dst_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dst_pos_type(), output);
  }
  
  // optional int32 dst_pos_value = 4;
  if (has_dst_pos_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_pos_value(), output);
  }
  
  // optional int32 npc_id = 5;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 src_pos_type = 1;
  if (has_src_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src_pos_type(), target);
  }
  
  // optional int32 src_pos_value = 2;
  if (has_src_pos_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->src_pos_value(), target);
  }
  
  // optional int32 dst_pos_type = 3;
  if (has_dst_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dst_pos_type(), target);
  }
  
  // optional int32 dst_pos_value = 4;
  if (has_dst_pos_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_pos_value(), target);
  }
  
  // optional int32 npc_id = 5;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 src_pos_type = 1;
    if (has_src_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_pos_type());
    }
    
    // optional int32 src_pos_value = 2;
    if (has_src_pos_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_pos_value());
    }
    
    // optional int32 dst_pos_type = 3;
    if (has_dst_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_pos_type());
    }
    
    // optional int32 dst_pos_value = 4;
    if (has_dst_pos_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_pos_value());
    }
    
    // optional int32 npc_id = 5;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapItemRequest::MergeFrom(const SwapItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_pos_type()) {
      set_src_pos_type(from.src_pos_type());
    }
    if (from.has_src_pos_value()) {
      set_src_pos_value(from.src_pos_value());
    }
    if (from.has_dst_pos_type()) {
      set_dst_pos_type(from.dst_pos_type());
    }
    if (from.has_dst_pos_value()) {
      set_dst_pos_value(from.dst_pos_value());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapItemRequest::CopyFrom(const SwapItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapItemRequest::IsInitialized() const {
  
  return true;
}

void SwapItemRequest::Swap(SwapItemRequest* other) {
  if (other != this) {
    std::swap(src_pos_type_, other->src_pos_type_);
    std::swap(src_pos_value_, other->src_pos_value_);
    std::swap(dst_pos_type_, other->dst_pos_type_);
    std::swap(dst_pos_value_, other->dst_pos_value_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapItemRequest_descriptor_;
  metadata.reflection = SwapItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwapItemResponse::kErrorCodeFieldNumber;
const int SwapItemResponse::kItemListFieldNumber;
#endif  // !_MSC_VER

SwapItemResponse::SwapItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwapItemResponse::InitAsDefaultInstance() {
}

SwapItemResponse::SwapItemResponse(const SwapItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwapItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapItemResponse::~SwapItemResponse() {
  SharedDtor();
}

void SwapItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapItemResponse_descriptor_;
}

const SwapItemResponse& SwapItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

SwapItemResponse* SwapItemResponse::default_instance_ = NULL;

SwapItemResponse* SwapItemResponse::New() const {
  return new SwapItemResponse;
}

void SwapItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwapItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwapItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwapItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwapItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwapItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwapItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwapItemResponse::MergeFrom(const SwapItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwapItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapItemResponse::CopyFrom(const SwapItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void SwapItemResponse::Swap(SwapItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwapItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapItemResponse_descriptor_;
  metadata.reflection = SwapItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemRequest::kItemIdFieldNumber;
const int UseItemRequest::kGuidFieldNumber;
const int UseItemRequest::kCountFieldNumber;
const int UseItemRequest::kForceFlagFieldNumber;
#endif  // !_MSC_VER

UseItemRequest::UseItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemRequest::InitAsDefaultInstance() {
}

UseItemRequest::UseItemRequest(const UseItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  guid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  force_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemRequest::~UseItemRequest() {
  SharedDtor();
}

void UseItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemRequest_descriptor_;
}

const UseItemRequest& UseItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

UseItemRequest* UseItemRequest::default_instance_ = NULL;

UseItemRequest* UseItemRequest::New() const {
  return new UseItemRequest;
}

void UseItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    guid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    force_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_force_flag;
        break;
      }
      
      // optional int32 force_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_flag_)));
          set_has_force_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // required int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }
  
  // optional int32 force_flag = 4;
  if (has_force_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->force_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // required int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }
  
  // optional int32 force_flag = 4;
  if (has_force_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->force_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // required int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 force_flag = 4;
    if (has_force_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemRequest::MergeFrom(const UseItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_force_flag()) {
      set_force_flag(from.force_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemRequest::CopyFrom(const UseItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UseItemRequest::Swap(UseItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(guid_, other->guid_);
    std::swap(count_, other->count_);
    std::swap(force_flag_, other->force_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemRequest_descriptor_;
  metadata.reflection = UseItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

UseItemResponse::UseItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemResponse::InitAsDefaultInstance() {
}

UseItemResponse::UseItemResponse(const UseItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemResponse::~UseItemResponse() {
  SharedDtor();
}

void UseItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemResponse_descriptor_;
}

const UseItemResponse& UseItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

UseItemResponse* UseItemResponse::default_instance_ = NULL;

UseItemResponse* UseItemResponse::New() const {
  return new UseItemResponse;
}

void UseItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemResponse::MergeFrom(const UseItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemResponse::CopyFrom(const UseItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UseItemResponse::Swap(UseItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemResponse_descriptor_;
  metadata.reflection = UseItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeItemRequest::kNpcIdFieldNumber;
const int ExchangeItemRequest::kTreasureIdFieldNumber;
#endif  // !_MSC_VER

ExchangeItemRequest::ExchangeItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeItemRequest::InitAsDefaultInstance() {
}

ExchangeItemRequest::ExchangeItemRequest(const ExchangeItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeItemRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  treasure_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeItemRequest::~ExchangeItemRequest() {
  SharedDtor();
}

void ExchangeItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeItemRequest_descriptor_;
}

const ExchangeItemRequest& ExchangeItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ExchangeItemRequest* ExchangeItemRequest::default_instance_ = NULL;

ExchangeItemRequest* ExchangeItemRequest::New() const {
  return new ExchangeItemRequest;
}

void ExchangeItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    treasure_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_treasure_id;
        break;
      }
      
      // required int32 treasure_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_id_)));
          set_has_treasure_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // required int32 treasure_id = 2;
  if (has_treasure_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->treasure_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // required int32 treasure_id = 2;
  if (has_treasure_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->treasure_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // required int32 treasure_id = 2;
    if (has_treasure_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeItemRequest::MergeFrom(const ExchangeItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_treasure_id()) {
      set_treasure_id(from.treasure_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeItemRequest::CopyFrom(const ExchangeItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ExchangeItemRequest::Swap(ExchangeItemRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(treasure_id_, other->treasure_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeItemRequest_descriptor_;
  metadata.reflection = ExchangeItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeItemResponse::kErrorCodeFieldNumber;
const int ExchangeItemResponse::kItemListFieldNumber;
#endif  // !_MSC_VER

ExchangeItemResponse::ExchangeItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeItemResponse::InitAsDefaultInstance() {
}

ExchangeItemResponse::ExchangeItemResponse(const ExchangeItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeItemResponse::~ExchangeItemResponse() {
  SharedDtor();
}

void ExchangeItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeItemResponse_descriptor_;
}

const ExchangeItemResponse& ExchangeItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ExchangeItemResponse* ExchangeItemResponse::default_instance_ = NULL;

ExchangeItemResponse* ExchangeItemResponse::New() const {
  return new ExchangeItemResponse;
}

void ExchangeItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeItemResponse::MergeFrom(const ExchangeItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeItemResponse::CopyFrom(const ExchangeItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ExchangeItemResponse::Swap(ExchangeItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeItemResponse_descriptor_;
  metadata.reflection = ExchangeItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipItemRequest::kGuidFieldNumber;
const int EquipItemRequest::kBagPosFieldNumber;
const int EquipItemRequest::kEquipPosFieldNumber;
#endif  // !_MSC_VER

EquipItemRequest::EquipItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipItemRequest::InitAsDefaultInstance() {
}

EquipItemRequest::EquipItemRequest(const EquipItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipItemRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  bag_pos_ = 0;
  equip_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipItemRequest::~EquipItemRequest() {
  SharedDtor();
}

void EquipItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipItemRequest_descriptor_;
}

const EquipItemRequest& EquipItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

EquipItemRequest* EquipItemRequest::default_instance_ = NULL;

EquipItemRequest* EquipItemRequest::New() const {
  return new EquipItemRequest;
}

void EquipItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    bag_pos_ = 0;
    equip_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_pos;
        break;
      }
      
      // required int32 bag_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_pos;
        break;
      }
      
      // required int32 equip_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 bag_pos = 2;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bag_pos(), output);
  }
  
  // required int32 equip_pos = 3;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 bag_pos = 2;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bag_pos(), target);
  }
  
  // required int32 equip_pos = 3;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 bag_pos = 2;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }
    
    // required int32 equip_pos = 3;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipItemRequest::MergeFrom(const EquipItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipItemRequest::CopyFrom(const EquipItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EquipItemRequest::Swap(EquipItemRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipItemRequest_descriptor_;
  metadata.reflection = EquipItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EquipItemResponse::EquipItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipItemResponse::InitAsDefaultInstance() {
}

EquipItemResponse::EquipItemResponse(const EquipItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipItemResponse::~EquipItemResponse() {
  SharedDtor();
}

void EquipItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipItemResponse_descriptor_;
}

const EquipItemResponse& EquipItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

EquipItemResponse* EquipItemResponse::default_instance_ = NULL;

EquipItemResponse* EquipItemResponse::New() const {
  return new EquipItemResponse;
}

void EquipItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipItemResponse::MergeFrom(const EquipItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipItemResponse::CopyFrom(const EquipItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipItemResponse::Swap(EquipItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipItemResponse_descriptor_;
  metadata.reflection = EquipItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReorderItemRequest::kPosTypeFieldNumber;
#endif  // !_MSC_VER

ReorderItemRequest::ReorderItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReorderItemRequest::InitAsDefaultInstance() {
}

ReorderItemRequest::ReorderItemRequest(const ReorderItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReorderItemRequest::SharedCtor() {
  _cached_size_ = 0;
  pos_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReorderItemRequest::~ReorderItemRequest() {
  SharedDtor();
}

void ReorderItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReorderItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReorderItemRequest_descriptor_;
}

const ReorderItemRequest& ReorderItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ReorderItemRequest* ReorderItemRequest::default_instance_ = NULL;

ReorderItemRequest* ReorderItemRequest::New() const {
  return new ReorderItemRequest;
}

void ReorderItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReorderItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReorderItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReorderItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReorderItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos_type = 1;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReorderItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReorderItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReorderItemRequest::MergeFrom(const ReorderItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReorderItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderItemRequest::CopyFrom(const ReorderItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderItemRequest::IsInitialized() const {
  
  return true;
}

void ReorderItemRequest::Swap(ReorderItemRequest* other) {
  if (other != this) {
    std::swap(pos_type_, other->pos_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReorderItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReorderItemRequest_descriptor_;
  metadata.reflection = ReorderItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReorderItemResponse::kErrorCodeFieldNumber;
const int ReorderItemResponse::kItemListFieldNumber;
const int ReorderItemResponse::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

ReorderItemResponse::ReorderItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReorderItemResponse::InitAsDefaultInstance() {
}

ReorderItemResponse::ReorderItemResponse(const ReorderItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReorderItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  max_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReorderItemResponse::~ReorderItemResponse() {
  SharedDtor();
}

void ReorderItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReorderItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReorderItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReorderItemResponse_descriptor_;
}

const ReorderItemResponse& ReorderItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ReorderItemResponse* ReorderItemResponse::default_instance_ = NULL;

ReorderItemResponse* ReorderItemResponse::New() const {
  return new ReorderItemResponse;
}

void ReorderItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    max_size_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReorderItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(24)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReorderItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReorderItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReorderItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 max_size = 3;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReorderItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReorderItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReorderItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReorderItemResponse::MergeFrom(const ReorderItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReorderItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReorderItemResponse::CopyFrom(const ReorderItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReorderItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ReorderItemResponse::Swap(ReorderItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReorderItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReorderItemResponse_descriptor_;
  metadata.reflection = ReorderItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListRequest::kPosTypeFieldNumber;
#endif  // !_MSC_VER

GetItemListRequest::GetItemListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemListRequest::InitAsDefaultInstance() {
}

GetItemListRequest::GetItemListRequest(const GetItemListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemListRequest::SharedCtor() {
  _cached_size_ = 0;
  pos_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListRequest::~GetItemListRequest() {
  SharedDtor();
}

void GetItemListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemListRequest_descriptor_;
}

const GetItemListRequest& GetItemListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

GetItemListRequest* GetItemListRequest::default_instance_ = NULL;

GetItemListRequest* GetItemListRequest::New() const {
  return new GetItemListRequest;
}

void GetItemListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos_type = 1;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemListRequest::MergeFrom(const GetItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemListRequest::CopyFrom(const GetItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListRequest::IsInitialized() const {
  
  return true;
}

void GetItemListRequest::Swap(GetItemListRequest* other) {
  if (other != this) {
    std::swap(pos_type_, other->pos_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemListRequest_descriptor_;
  metadata.reflection = GetItemListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemListResponse::kErrorCodeFieldNumber;
const int GetItemListResponse::kItemListFieldNumber;
const int GetItemListResponse::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

GetItemListResponse::GetItemListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemListResponse::InitAsDefaultInstance() {
}

GetItemListResponse::GetItemListResponse(const GetItemListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  max_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemListResponse::~GetItemListResponse() {
  SharedDtor();
}

void GetItemListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemListResponse_descriptor_;
}

const GetItemListResponse& GetItemListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

GetItemListResponse* GetItemListResponse::default_instance_ = NULL;

GetItemListResponse* GetItemListResponse::New() const {
  return new GetItemListResponse;
}

void GetItemListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    max_size_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(24)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 max_size = 3;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemListResponse::MergeFrom(const GetItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemListResponse::CopyFrom(const GetItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetItemListResponse::Swap(GetItemListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemListResponse_descriptor_;
  metadata.reflection = GetItemListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenDepotRequest::kNpcIdFieldNumber;
#endif  // !_MSC_VER

OpenDepotRequest::OpenDepotRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenDepotRequest::InitAsDefaultInstance() {
}

OpenDepotRequest::OpenDepotRequest(const OpenDepotRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenDepotRequest::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenDepotRequest::~OpenDepotRequest() {
  SharedDtor();
}

void OpenDepotRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenDepotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDepotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDepotRequest_descriptor_;
}

const OpenDepotRequest& OpenDepotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

OpenDepotRequest* OpenDepotRequest::default_instance_ = NULL;

OpenDepotRequest* OpenDepotRequest::New() const {
  return new OpenDepotRequest;
}

void OpenDepotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenDepotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenDepotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenDepotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenDepotRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDepotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenDepotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenDepotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenDepotRequest::MergeFrom(const OpenDepotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenDepotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDepotRequest::CopyFrom(const OpenDepotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDepotRequest::IsInitialized() const {
  
  return true;
}

void OpenDepotRequest::Swap(OpenDepotRequest* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenDepotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDepotRequest_descriptor_;
  metadata.reflection = OpenDepotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenDepotResponse::kErrorCodeFieldNumber;
const int OpenDepotResponse::kItemListFieldNumber;
const int OpenDepotResponse::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

OpenDepotResponse::OpenDepotResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenDepotResponse::InitAsDefaultInstance() {
}

OpenDepotResponse::OpenDepotResponse(const OpenDepotResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenDepotResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  max_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenDepotResponse::~OpenDepotResponse() {
  SharedDtor();
}

void OpenDepotResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenDepotResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenDepotResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenDepotResponse_descriptor_;
}

const OpenDepotResponse& OpenDepotResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

OpenDepotResponse* OpenDepotResponse::default_instance_ = NULL;

OpenDepotResponse* OpenDepotResponse::New() const {
  return new OpenDepotResponse;
}

void OpenDepotResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    max_size_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenDepotResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(24)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenDepotResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenDepotResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenDepotResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 max_size = 3;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenDepotResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenDepotResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenDepotResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenDepotResponse::MergeFrom(const OpenDepotResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenDepotResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenDepotResponse::CopyFrom(const OpenDepotResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenDepotResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void OpenDepotResponse::Swap(OpenDepotResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenDepotResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenDepotResponse_descriptor_;
  metadata.reflection = OpenDepotResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandStorageRequest::kPosTypeFieldNumber;
const int ExpandStorageRequest::kCountFieldNumber;
#endif  // !_MSC_VER

ExpandStorageRequest::ExpandStorageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpandStorageRequest::InitAsDefaultInstance() {
}

ExpandStorageRequest::ExpandStorageRequest(const ExpandStorageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpandStorageRequest::SharedCtor() {
  _cached_size_ = 0;
  pos_type_ = 0;
  count_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandStorageRequest::~ExpandStorageRequest() {
  SharedDtor();
}

void ExpandStorageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpandStorageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandStorageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandStorageRequest_descriptor_;
}

const ExpandStorageRequest& ExpandStorageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ExpandStorageRequest* ExpandStorageRequest::default_instance_ = NULL;

ExpandStorageRequest* ExpandStorageRequest::New() const {
  return new ExpandStorageRequest;
}

void ExpandStorageRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_type_ = 0;
    count_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandStorageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpandStorageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos_type(), output);
  }
  
  // optional int32 count = 2 [default = 1];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpandStorageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos_type = 1;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos_type(), target);
  }
  
  // optional int32 count = 2 [default = 1];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpandStorageRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos_type = 1;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
    // optional int32 count = 2 [default = 1];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandStorageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandStorageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandStorageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandStorageRequest::MergeFrom(const ExpandStorageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandStorageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandStorageRequest::CopyFrom(const ExpandStorageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandStorageRequest::IsInitialized() const {
  
  return true;
}

void ExpandStorageRequest::Swap(ExpandStorageRequest* other) {
  if (other != this) {
    std::swap(pos_type_, other->pos_type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandStorageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandStorageRequest_descriptor_;
  metadata.reflection = ExpandStorageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandStorageResponse::kErrorCodeFieldNumber;
const int ExpandStorageResponse::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

ExpandStorageResponse::ExpandStorageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpandStorageResponse::InitAsDefaultInstance() {
}

ExpandStorageResponse::ExpandStorageResponse(const ExpandStorageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpandStorageResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  max_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandStorageResponse::~ExpandStorageResponse() {
  SharedDtor();
}

void ExpandStorageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpandStorageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandStorageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandStorageResponse_descriptor_;
}

const ExpandStorageResponse& ExpandStorageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

ExpandStorageResponse* ExpandStorageResponse::default_instance_ = NULL;

ExpandStorageResponse* ExpandStorageResponse::New() const {
  return new ExpandStorageResponse;
}

void ExpandStorageResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    max_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandStorageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpandStorageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 max_size = 2;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpandStorageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 max_size = 2;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpandStorageResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 max_size = 2;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandStorageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandStorageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandStorageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandStorageResponse::MergeFrom(const ExpandStorageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandStorageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandStorageResponse::CopyFrom(const ExpandStorageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandStorageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ExpandStorageResponse::Swap(ExpandStorageResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandStorageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandStorageResponse_descriptor_;
  metadata.reflection = ExpandStorageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyVipRequest::kTidFieldNumber;
const int BuyVipRequest::kVipLevelFieldNumber;
#endif  // !_MSC_VER

BuyVipRequest::BuyVipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyVipRequest::InitAsDefaultInstance() {
}

BuyVipRequest::BuyVipRequest(const BuyVipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyVipRequest::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyVipRequest::~BuyVipRequest() {
  SharedDtor();
}

void BuyVipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyVipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyVipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyVipRequest_descriptor_;
}

const BuyVipRequest& BuyVipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuyVipRequest* BuyVipRequest::default_instance_ = NULL;

BuyVipRequest* BuyVipRequest::New() const {
  return new BuyVipRequest;
}

void BuyVipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    vip_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyVipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyVipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // optional int32 vip_level = 2 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyVipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // optional int32 vip_level = 2 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyVipRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 vip_level = 2 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyVipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyVipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyVipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyVipRequest::MergeFrom(const BuyVipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyVipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyVipRequest::CopyFrom(const BuyVipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyVipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuyVipRequest::Swap(BuyVipRequest* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyVipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyVipRequest_descriptor_;
  metadata.reflection = BuyVipRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyVipResponse::kErrorCodeFieldNumber;
const int BuyVipResponse::kPriceTypeFieldNumber;
const int BuyVipResponse::kPriceValueFieldNumber;
#endif  // !_MSC_VER

BuyVipResponse::BuyVipResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyVipResponse::InitAsDefaultInstance() {
}

BuyVipResponse::BuyVipResponse(const BuyVipResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyVipResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  price_type_ = 0;
  price_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyVipResponse::~BuyVipResponse() {
  SharedDtor();
}

void BuyVipResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyVipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyVipResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyVipResponse_descriptor_;
}

const BuyVipResponse& BuyVipResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

BuyVipResponse* BuyVipResponse::default_instance_ = NULL;

BuyVipResponse* BuyVipResponse::New() const {
  return new BuyVipResponse;
}

void BuyVipResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    price_type_ = 0;
    price_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyVipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price_type;
        break;
      }
      
      // optional int32 price_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_value;
        break;
      }
      
      // optional int32 price_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_value_)));
          set_has_price_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyVipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price_type(), output);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyVipResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 price_type = 2;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price_type(), target);
  }
  
  // optional int32 price_value = 3;
  if (has_price_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyVipResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 price_type = 2;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }
    
    // optional int32 price_value = 3;
    if (has_price_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyVipResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyVipResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyVipResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyVipResponse::MergeFrom(const BuyVipResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price_value()) {
      set_price_value(from.price_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyVipResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyVipResponse::CopyFrom(const BuyVipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyVipResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuyVipResponse::Swap(BuyVipResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_value_, other->price_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyVipResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyVipResponse_descriptor_;
  metadata.reflection = BuyVipResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSpiritSystemRequest::kTypeFieldNumber;
const int WingSpiritSystemRequest::kGeneratorLevelFieldNumber;
const int WingSpiritSystemRequest::kSpiritIndexFieldNumber;
const int WingSpiritSystemRequest::kSourceSpiritIndexFieldNumber;
const int WingSpiritSystemRequest::kSlotNumFieldNumber;
const int WingSpiritSystemRequest::kWingItemIdFieldNumber;
const int WingSpiritSystemRequest::kExchangeSpiritIdFieldNumber;
#endif  // !_MSC_VER

WingSpiritSystemRequest::WingSpiritSystemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingSpiritSystemRequest::InitAsDefaultInstance() {
}

WingSpiritSystemRequest::WingSpiritSystemRequest(const WingSpiritSystemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingSpiritSystemRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  generator_level_ = 0;
  spirit_index_ = 0;
  source_spirit_index_ = 0;
  slot_num_ = 0;
  wing_item_id_ = GOOGLE_LONGLONG(0);
  exchange_spirit_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSpiritSystemRequest::~WingSpiritSystemRequest() {
  SharedDtor();
}

void WingSpiritSystemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingSpiritSystemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSpiritSystemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSpiritSystemRequest_descriptor_;
}

const WingSpiritSystemRequest& WingSpiritSystemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

WingSpiritSystemRequest* WingSpiritSystemRequest::default_instance_ = NULL;

WingSpiritSystemRequest* WingSpiritSystemRequest::New() const {
  return new WingSpiritSystemRequest;
}

void WingSpiritSystemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    generator_level_ = 0;
    spirit_index_ = 0;
    source_spirit_index_ = 0;
    slot_num_ = 0;
    wing_item_id_ = GOOGLE_LONGLONG(0);
    exchange_spirit_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSpiritSystemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.WingSpiritRequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::WingSpiritRequestType_IsValid(value)) {
            set_type(static_cast< protocols::common::WingSpiritRequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_generator_level;
        break;
      }
      
      // optional int32 generator_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generator_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &generator_level_)));
          set_has_generator_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_spirit_index;
        break;
      }
      
      // optional int32 spirit_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spirit_index_)));
          set_has_spirit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_spirit_index;
        break;
      }
      
      // optional int32 source_spirit_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_spirit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_spirit_index_)));
          set_has_source_spirit_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slot_num;
        break;
      }
      
      // optional int32 slot_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wing_item_id;
        break;
      }
      
      // optional int64 wing_item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wing_item_id_)));
          set_has_wing_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exchange_spirit_id;
        break;
      }
      
      // optional int32 exchange_spirit_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchange_spirit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_spirit_id_)));
          set_has_exchange_spirit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingSpiritSystemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.WingSpiritRequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional int32 generator_level = 2;
  if (has_generator_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->generator_level(), output);
  }
  
  // optional int32 spirit_index = 3;
  if (has_spirit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->spirit_index(), output);
  }
  
  // optional int32 source_spirit_index = 4;
  if (has_source_spirit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source_spirit_index(), output);
  }
  
  // optional int32 slot_num = 5;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slot_num(), output);
  }
  
  // optional int64 wing_item_id = 6;
  if (has_wing_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->wing_item_id(), output);
  }
  
  // optional int32 exchange_spirit_id = 7;
  if (has_exchange_spirit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exchange_spirit_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingSpiritSystemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.WingSpiritRequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional int32 generator_level = 2;
  if (has_generator_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->generator_level(), target);
  }
  
  // optional int32 spirit_index = 3;
  if (has_spirit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->spirit_index(), target);
  }
  
  // optional int32 source_spirit_index = 4;
  if (has_source_spirit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source_spirit_index(), target);
  }
  
  // optional int32 slot_num = 5;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slot_num(), target);
  }
  
  // optional int64 wing_item_id = 6;
  if (has_wing_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->wing_item_id(), target);
  }
  
  // optional int32 exchange_spirit_id = 7;
  if (has_exchange_spirit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exchange_spirit_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingSpiritSystemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.WingSpiritRequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 generator_level = 2;
    if (has_generator_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->generator_level());
    }
    
    // optional int32 spirit_index = 3;
    if (has_spirit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spirit_index());
    }
    
    // optional int32 source_spirit_index = 4;
    if (has_source_spirit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_spirit_index());
    }
    
    // optional int32 slot_num = 5;
    if (has_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_num());
    }
    
    // optional int64 wing_item_id = 6;
    if (has_wing_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wing_item_id());
    }
    
    // optional int32 exchange_spirit_id = 7;
    if (has_exchange_spirit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_spirit_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSpiritSystemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSpiritSystemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSpiritSystemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSpiritSystemRequest::MergeFrom(const WingSpiritSystemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_generator_level()) {
      set_generator_level(from.generator_level());
    }
    if (from.has_spirit_index()) {
      set_spirit_index(from.spirit_index());
    }
    if (from.has_source_spirit_index()) {
      set_source_spirit_index(from.source_spirit_index());
    }
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
    if (from.has_wing_item_id()) {
      set_wing_item_id(from.wing_item_id());
    }
    if (from.has_exchange_spirit_id()) {
      set_exchange_spirit_id(from.exchange_spirit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSpiritSystemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSpiritSystemRequest::CopyFrom(const WingSpiritSystemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSpiritSystemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WingSpiritSystemRequest::Swap(WingSpiritSystemRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(generator_level_, other->generator_level_);
    std::swap(spirit_index_, other->spirit_index_);
    std::swap(source_spirit_index_, other->source_spirit_index_);
    std::swap(slot_num_, other->slot_num_);
    std::swap(wing_item_id_, other->wing_item_id_);
    std::swap(exchange_spirit_id_, other->exchange_spirit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSpiritSystemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSpiritSystemRequest_descriptor_;
  metadata.reflection = WingSpiritSystemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSpiritSystemResponse::kErrorCodeFieldNumber;
const int WingSpiritSystemResponse::kWingsFieldNumber;
const int WingSpiritSystemResponse::kSpiritsFieldNumber;
const int WingSpiritSystemResponse::kGeneratorsFieldNumber;
const int WingSpiritSystemResponse::kBagFieldNumber;
const int WingSpiritSystemResponse::kFragementNumFieldNumber;
const int WingSpiritSystemResponse::kPointFieldNumber;
const int WingSpiritSystemResponse::kMagicLeafNumFieldNumber;
#endif  // !_MSC_VER

WingSpiritSystemResponse::WingSpiritSystemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingSpiritSystemResponse::InitAsDefaultInstance() {
  bag_ = const_cast< ::protocols::common::WingSpiritBag*>(&::protocols::common::WingSpiritBag::default_instance());
}

WingSpiritSystemResponse::WingSpiritSystemResponse(const WingSpiritSystemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingSpiritSystemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  bag_ = NULL;
  fragement_num_ = GOOGLE_LONGLONG(0);
  point_ = GOOGLE_LONGLONG(0);
  magic_leaf_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSpiritSystemResponse::~WingSpiritSystemResponse() {
  SharedDtor();
}

void WingSpiritSystemResponse::SharedDtor() {
  if (this != default_instance_) {
    delete bag_;
  }
}

void WingSpiritSystemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSpiritSystemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSpiritSystemResponse_descriptor_;
}

const WingSpiritSystemResponse& WingSpiritSystemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fitem_2eproto();  return *default_instance_;
}

WingSpiritSystemResponse* WingSpiritSystemResponse::default_instance_ = NULL;

WingSpiritSystemResponse* WingSpiritSystemResponse::New() const {
  return new WingSpiritSystemResponse;
}

void WingSpiritSystemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_bag()) {
      if (bag_ != NULL) bag_->::protocols::common::WingSpiritBag::Clear();
    }
    fragement_num_ = GOOGLE_LONGLONG(0);
    point_ = GOOGLE_LONGLONG(0);
    magic_leaf_num_ = GOOGLE_LONGLONG(0);
  }
  wings_.Clear();
  spirits_.Clear();
  generators_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSpiritSystemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wings;
        break;
      }
      
      // repeated .protocols.common.WingItemInfo wings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wings;
        if (input->ExpectTag(26)) goto parse_spirits;
        break;
      }
      
      // repeated .protocols.common.WingSpiritInfo spirits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        if (input->ExpectTag(34)) goto parse_generators;
        break;
      }
      
      // repeated .protocols.common.SpiritGeneratorInfo generators = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generators:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generators()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_generators;
        if (input->ExpectTag(42)) goto parse_bag;
        break;
      }
      
      // optional .protocols.common.WingSpiritBag bag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fragement_num;
        break;
      }
      
      // optional int64 fragement_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragement_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragement_num_)));
          set_has_fragement_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_point;
        break;
      }
      
      // optional int64 point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_magic_leaf_num;
        break;
      }
      
      // optional int64 magic_leaf_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_leaf_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_leaf_num_)));
          set_has_magic_leaf_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingSpiritSystemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.WingItemInfo wings = 2;
  for (int i = 0; i < this->wings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wings(i), output);
  }
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spirits(i), output);
  }
  
  // repeated .protocols.common.SpiritGeneratorInfo generators = 4;
  for (int i = 0; i < this->generators_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->generators(i), output);
  }
  
  // optional .protocols.common.WingSpiritBag bag = 5;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bag(), output);
  }
  
  // optional int64 fragement_num = 6;
  if (has_fragement_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fragement_num(), output);
  }
  
  // optional int64 point = 7;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->point(), output);
  }
  
  // optional int64 magic_leaf_num = 8;
  if (has_magic_leaf_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->magic_leaf_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingSpiritSystemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.WingItemInfo wings = 2;
  for (int i = 0; i < this->wings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wings(i), target);
  }
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spirits(i), target);
  }
  
  // repeated .protocols.common.SpiritGeneratorInfo generators = 4;
  for (int i = 0; i < this->generators_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->generators(i), target);
  }
  
  // optional .protocols.common.WingSpiritBag bag = 5;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bag(), target);
  }
  
  // optional int64 fragement_num = 6;
  if (has_fragement_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fragement_num(), target);
  }
  
  // optional int64 point = 7;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->point(), target);
  }
  
  // optional int64 magic_leaf_num = 8;
  if (has_magic_leaf_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->magic_leaf_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingSpiritSystemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.WingSpiritBag bag = 5;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }
    
    // optional int64 fragement_num = 6;
    if (has_fragement_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragement_num());
    }
    
    // optional int64 point = 7;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->point());
    }
    
    // optional int64 magic_leaf_num = 8;
    if (has_magic_leaf_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic_leaf_num());
    }
    
  }
  // repeated .protocols.common.WingItemInfo wings = 2;
  total_size += 1 * this->wings_size();
  for (int i = 0; i < this->wings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wings(i));
  }
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }
  
  // repeated .protocols.common.SpiritGeneratorInfo generators = 4;
  total_size += 1 * this->generators_size();
  for (int i = 0; i < this->generators_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generators(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSpiritSystemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSpiritSystemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSpiritSystemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSpiritSystemResponse::MergeFrom(const WingSpiritSystemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  wings_.MergeFrom(from.wings_);
  spirits_.MergeFrom(from.spirits_);
  generators_.MergeFrom(from.generators_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_bag()) {
      mutable_bag()->::protocols::common::WingSpiritBag::MergeFrom(from.bag());
    }
    if (from.has_fragement_num()) {
      set_fragement_num(from.fragement_num());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_magic_leaf_num()) {
      set_magic_leaf_num(from.magic_leaf_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSpiritSystemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSpiritSystemResponse::CopyFrom(const WingSpiritSystemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSpiritSystemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WingSpiritSystemResponse::Swap(WingSpiritSystemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    wings_.Swap(&other->wings_);
    spirits_.Swap(&other->spirits_);
    generators_.Swap(&other->generators_);
    std::swap(bag_, other->bag_);
    std::swap(fragement_num_, other->fragement_num_);
    std::swap(point_, other->point_);
    std::swap(magic_leaf_num_, other->magic_leaf_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSpiritSystemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSpiritSystemResponse_descriptor_;
  metadata.reflection = WingSpiritSystemResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
