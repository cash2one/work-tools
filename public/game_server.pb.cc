// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* WebGetOnlineMemberRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetOnlineMemberRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetOnlineMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetOnlineMemberResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetFightDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetFightDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebGetFightDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebGetFightDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightStatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightStatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPositionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPositionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetDaySecondsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetDaySecondsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetDaySecondsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetDaySecondsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetPvPLevelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetPvPLevelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetPvPLevelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetPvPLevelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddPhyStrengthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddPhyStrengthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddPhyStrengthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddPhyStrengthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdatePositionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdatePositionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdatePositionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdatePositionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdateAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdateAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdateAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdateAttributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddSkillExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddSkillExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddSkillExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddSkillExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSendMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSendMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSendMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSendMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryRoleQuestsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryRoleQuestsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryRoleQuestsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryRoleQuestsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryRoleQuestsResponse_RoleQuestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetQuestStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetQuestStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetQuestStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetQuestStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddYinglingLingliRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddYinglingLingliRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddYinglingLingliResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddYinglingLingliResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetCooldownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetCooldownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetCooldownResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetCooldownResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendLogNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendLogNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogOptionalParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogOptionalParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindPlayerNameGuidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindPlayerNameGuidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficStatsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficStatsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficStatsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficStatsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTalkSystemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTalkSystemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMTalkSystemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMTalkSystemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetPlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetPlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetPlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetPlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetPlayerVipLevelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetPlayerVipLevelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetPlayerVipLevelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetPlayerVipLevelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetFlagRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetFlagRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetFlagResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetFlagResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* USRIdPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  USRIdPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryIdsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryIdsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryIdsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryIdsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBanPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBanPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMBanPlayerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBanPlayerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryRoleByNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryRoleByNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMQueryRoleByNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMQueryRoleByNameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdatePassInstanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdatePassInstanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMUpdatePassInstanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMUpdatePassInstanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetLimitCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetLimitCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetLimitCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetLimitCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmQueryPlayerFlagsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmQueryPlayerFlagsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GmQueryPlayerFlagsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GmQueryPlayerFlagsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetFightExpFactorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetFightExpFactorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetFightExpFactorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetFightExpFactorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetGuildDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetGuildDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetGuildDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetGuildDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetItemListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetItemListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMStartGuildCrystalTowerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMStartGuildCrystalTowerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMStartGuildCrystalTowerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMStartGuildCrystalTowerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetItemListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetItemListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetSkillListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetSkillListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetSkillListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetSkillListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetTitleListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetTitleListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetTitleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetTitleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetRoleTitleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetRoleTitleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSetRoleTitleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSetRoleTitleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetTitleInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetTitleInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetTitleInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetTitleInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMessageAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOG_SRC_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TRANSACTION_CHANNEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOG_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PAY_MAIN_CATALOG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ADD_PROPS_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SUB_PROPS_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ADD_MONEY_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fserver_2eproto() {
  protobuf_AddDesc_game_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_server.proto");
  GOOGLE_CHECK(file != NULL);
  WebGetOnlineMemberRequest_descriptor_ = file->message_type(0);
  static const int WebGetOnlineMemberRequest_offsets_[1] = {
  };
  WebGetOnlineMemberRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetOnlineMemberRequest_descriptor_,
      WebGetOnlineMemberRequest::default_instance_,
      WebGetOnlineMemberRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetOnlineMemberRequest));
  WebGetOnlineMemberResponse_descriptor_ = file->message_type(1);
  static const int WebGetOnlineMemberResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberResponse, online_member_),
  };
  WebGetOnlineMemberResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetOnlineMemberResponse_descriptor_,
      WebGetOnlineMemberResponse::default_instance_,
      WebGetOnlineMemberResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetOnlineMemberResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetOnlineMemberResponse));
  WebGetFightDataRequest_descriptor_ = file->message_type(2);
  static const int WebGetFightDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataRequest, fight_key_),
  };
  WebGetFightDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetFightDataRequest_descriptor_,
      WebGetFightDataRequest::default_instance_,
      WebGetFightDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetFightDataRequest));
  WebGetFightDataResponse_descriptor_ = file->message_type(3);
  static const int WebGetFightDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataResponse, fight_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataResponse, fight_data_),
  };
  WebGetFightDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebGetFightDataResponse_descriptor_,
      WebGetFightDataResponse::default_instance_,
      WebGetFightDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebGetFightDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebGetFightDataResponse));
  FightStatData_descriptor_ = file->message_type(4);
  static const int FightStatData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, equip_strength_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, is_in_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, instance_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, battle_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, fight_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, dead_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, equiped_skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, battle_skill_info_),
  };
  FightStatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightStatData_descriptor_,
      FightStatData::default_instance_,
      FightStatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightStatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightStatData));
  BroadcastData_descriptor_ = file->message_type(5);
  static const int BroadcastData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastData, uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastData, all_flag_),
  };
  BroadcastData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastData_descriptor_,
      BroadcastData::default_instance_,
      BroadcastData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastData));
  SyncPositionNotify_descriptor_ = file->message_type(6);
  static const int SyncPositionNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPositionNotify, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPositionNotify, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPositionNotify, map_y_),
  };
  SyncPositionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPositionNotify_descriptor_,
      SyncPositionNotify::default_instance_,
      SyncPositionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPositionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPositionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPositionNotify));
  GMSetDaySecondsRequest_descriptor_ = file->message_type(7);
  static const int GMSetDaySecondsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsRequest, seconds_),
  };
  GMSetDaySecondsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetDaySecondsRequest_descriptor_,
      GMSetDaySecondsRequest::default_instance_,
      GMSetDaySecondsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetDaySecondsRequest));
  GMSetDaySecondsResponse_descriptor_ = file->message_type(8);
  static const int GMSetDaySecondsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsResponse, error_code_),
  };
  GMSetDaySecondsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetDaySecondsResponse_descriptor_,
      GMSetDaySecondsResponse::default_instance_,
      GMSetDaySecondsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetDaySecondsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetDaySecondsResponse));
  GMSetPvPLevelRequest_descriptor_ = file->message_type(9);
  static const int GMSetPvPLevelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelRequest, level_),
  };
  GMSetPvPLevelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetPvPLevelRequest_descriptor_,
      GMSetPvPLevelRequest::default_instance_,
      GMSetPvPLevelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetPvPLevelRequest));
  GMSetPvPLevelResponse_descriptor_ = file->message_type(10);
  static const int GMSetPvPLevelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelResponse, error_code_),
  };
  GMSetPvPLevelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetPvPLevelResponse_descriptor_,
      GMSetPvPLevelResponse::default_instance_,
      GMSetPvPLevelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPvPLevelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetPvPLevelResponse));
  GMAddItemRequest_descriptor_ = file->message_type(11);
  static const int GMAddItemRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemRequest, count_),
  };
  GMAddItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddItemRequest_descriptor_,
      GMAddItemRequest::default_instance_,
      GMAddItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddItemRequest));
  GMAddItemResponse_descriptor_ = file->message_type(12);
  static const int GMAddItemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResponse, error_code_),
  };
  GMAddItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddItemResponse_descriptor_,
      GMAddItemResponse::default_instance_,
      GMAddItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddItemResponse));
  GMAddPhyStrengthRequest_descriptor_ = file->message_type(13);
  static const int GMAddPhyStrengthRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthRequest, phy_str_),
  };
  GMAddPhyStrengthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddPhyStrengthRequest_descriptor_,
      GMAddPhyStrengthRequest::default_instance_,
      GMAddPhyStrengthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddPhyStrengthRequest));
  GMAddPhyStrengthResponse_descriptor_ = file->message_type(14);
  static const int GMAddPhyStrengthResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthResponse, error_code_),
  };
  GMAddPhyStrengthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddPhyStrengthResponse_descriptor_,
      GMAddPhyStrengthResponse::default_instance_,
      GMAddPhyStrengthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddPhyStrengthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddPhyStrengthResponse));
  GMUpdatePositionRequest_descriptor_ = file->message_type(15);
  static const int GMUpdatePositionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionRequest, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionRequest, map_y_),
  };
  GMUpdatePositionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdatePositionRequest_descriptor_,
      GMUpdatePositionRequest::default_instance_,
      GMUpdatePositionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdatePositionRequest));
  GMUpdatePositionResponse_descriptor_ = file->message_type(16);
  static const int GMUpdatePositionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionResponse, error_code_),
  };
  GMUpdatePositionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdatePositionResponse_descriptor_,
      GMUpdatePositionResponse::default_instance_,
      GMUpdatePositionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePositionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdatePositionResponse));
  GMUpdateAttributeRequest_descriptor_ = file->message_type(17);
  static const int GMUpdateAttributeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeRequest, attr_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeRequest, attr_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeRequest, guid_),
  };
  GMUpdateAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdateAttributeRequest_descriptor_,
      GMUpdateAttributeRequest::default_instance_,
      GMUpdateAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdateAttributeRequest));
  GMUpdateAttributeResponse_descriptor_ = file->message_type(18);
  static const int GMUpdateAttributeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeResponse, error_code_),
  };
  GMUpdateAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdateAttributeResponse_descriptor_,
      GMUpdateAttributeResponse::default_instance_,
      GMUpdateAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdateAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdateAttributeResponse));
  GMAddMoneyRequest_descriptor_ = file->message_type(19);
  static const int GMAddMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyRequest, value_),
  };
  GMAddMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddMoneyRequest_descriptor_,
      GMAddMoneyRequest::default_instance_,
      GMAddMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddMoneyRequest));
  GMAddMoneyResponse_descriptor_ = file->message_type(20);
  static const int GMAddMoneyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyResponse, error_code_),
  };
  GMAddMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddMoneyResponse_descriptor_,
      GMAddMoneyResponse::default_instance_,
      GMAddMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddMoneyResponse));
  ChargeMoneyRequest_descriptor_ = file->message_type(21);
  static const int ChargeMoneyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyRequest, value_),
  };
  ChargeMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeMoneyRequest_descriptor_,
      ChargeMoneyRequest::default_instance_,
      ChargeMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeMoneyRequest));
  ChargeMoneyResponse_descriptor_ = file->message_type(22);
  static const int ChargeMoneyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyResponse, error_code_),
  };
  ChargeMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeMoneyResponse_descriptor_,
      ChargeMoneyResponse::default_instance_,
      ChargeMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeMoneyResponse));
  GMAddExpRequest_descriptor_ = file->message_type(23);
  static const int GMAddExpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpRequest, exp_),
  };
  GMAddExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddExpRequest_descriptor_,
      GMAddExpRequest::default_instance_,
      GMAddExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddExpRequest));
  GMAddExpResponse_descriptor_ = file->message_type(24);
  static const int GMAddExpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpResponse, error_code_),
  };
  GMAddExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddExpResponse_descriptor_,
      GMAddExpResponse::default_instance_,
      GMAddExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddExpResponse));
  GMAddSkillExpRequest_descriptor_ = file->message_type(25);
  static const int GMAddSkillExpRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpRequest, buddy_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpRequest, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpRequest, exp_),
  };
  GMAddSkillExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddSkillExpRequest_descriptor_,
      GMAddSkillExpRequest::default_instance_,
      GMAddSkillExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddSkillExpRequest));
  GMAddSkillExpResponse_descriptor_ = file->message_type(26);
  static const int GMAddSkillExpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpResponse, error_code_),
  };
  GMAddSkillExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddSkillExpResponse_descriptor_,
      GMAddSkillExpResponse::default_instance_,
      GMAddSkillExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddSkillExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddSkillExpResponse));
  GMSendMailRequest_descriptor_ = file->message_type(27);
  static const int GMSendMailRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, dst_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, content_),
  };
  GMSendMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSendMailRequest_descriptor_,
      GMSendMailRequest::default_instance_,
      GMSendMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSendMailRequest));
  GMSendMailResponse_descriptor_ = file->message_type(28);
  static const int GMSendMailResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailResponse, error_code_),
  };
  GMSendMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSendMailResponse_descriptor_,
      GMSendMailResponse::default_instance_,
      GMSendMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSendMailResponse));
  GMQueryRoleQuestsRequest_descriptor_ = file->message_type(29);
  static const int GMQueryRoleQuestsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsRequest, role_id_),
  };
  GMQueryRoleQuestsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryRoleQuestsRequest_descriptor_,
      GMQueryRoleQuestsRequest::default_instance_,
      GMQueryRoleQuestsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryRoleQuestsRequest));
  GMQueryRoleQuestsResponse_descriptor_ = file->message_type(30);
  static const int GMQueryRoleQuestsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse, role_quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse, error_code_),
  };
  GMQueryRoleQuestsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryRoleQuestsResponse_descriptor_,
      GMQueryRoleQuestsResponse::default_instance_,
      GMQueryRoleQuestsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryRoleQuestsResponse));
  GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_ = GMQueryRoleQuestsResponse_descriptor_->nested_type(0);
  static const int GMQueryRoleQuestsResponse_RoleQuestStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse_RoleQuestStatus, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse_RoleQuestStatus, status_),
  };
  GMQueryRoleQuestsResponse_RoleQuestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_,
      GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance_,
      GMQueryRoleQuestsResponse_RoleQuestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse_RoleQuestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleQuestsResponse_RoleQuestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryRoleQuestsResponse_RoleQuestStatus));
  GMSetQuestStatusRequest_descriptor_ = file->message_type(31);
  static const int GMSetQuestStatusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusRequest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusRequest, quest_status_),
  };
  GMSetQuestStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetQuestStatusRequest_descriptor_,
      GMSetQuestStatusRequest::default_instance_,
      GMSetQuestStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetQuestStatusRequest));
  GMSetQuestStatusResponse_descriptor_ = file->message_type(32);
  static const int GMSetQuestStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusResponse, error_code_),
  };
  GMSetQuestStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetQuestStatusResponse_descriptor_,
      GMSetQuestStatusResponse::default_instance_,
      GMSetQuestStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetQuestStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetQuestStatusResponse));
  GMAddYinglingLingliRequest_descriptor_ = file->message_type(33);
  static const int GMAddYinglingLingliRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliRequest, add_lingli_),
  };
  GMAddYinglingLingliRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddYinglingLingliRequest_descriptor_,
      GMAddYinglingLingliRequest::default_instance_,
      GMAddYinglingLingliRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddYinglingLingliRequest));
  GMAddYinglingLingliResponse_descriptor_ = file->message_type(34);
  static const int GMAddYinglingLingliResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliResponse, error_code_),
  };
  GMAddYinglingLingliResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddYinglingLingliResponse_descriptor_,
      GMAddYinglingLingliResponse::default_instance_,
      GMAddYinglingLingliResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddYinglingLingliResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddYinglingLingliResponse));
  GMSetCooldownRequest_descriptor_ = file->message_type(35);
  static const int GMSetCooldownRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownRequest, cool_down_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownRequest, cool_down_value_),
  };
  GMSetCooldownRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetCooldownRequest_descriptor_,
      GMSetCooldownRequest::default_instance_,
      GMSetCooldownRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetCooldownRequest));
  GMSetCooldownResponse_descriptor_ = file->message_type(36);
  static const int GMSetCooldownResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownResponse, error_code_),
  };
  GMSetCooldownResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetCooldownResponse_descriptor_,
      GMSetCooldownResponse::default_instance_,
      GMSetCooldownResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetCooldownResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetCooldownResponse));
  SendLogNotify_descriptor_ = file->message_type(37);
  static const int SendLogNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, log_src_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, optional_paras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, log_data_),
  };
  SendLogNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendLogNotify_descriptor_,
      SendLogNotify::default_instance_,
      SendLogNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendLogNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendLogNotify));
  LogPlayerData_descriptor_ = file->message_type(38);
  static const int LogPlayerData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, ouid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, iuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, game_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, platform_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, user_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, gold_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, first_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, user_email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, bag_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, depot_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, online_time_),
  };
  LogPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogPlayerData_descriptor_,
      LogPlayerData::default_instance_,
      LogPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogPlayerData));
  LogOptionalParams_descriptor_ = file->message_type(39);
  static const int LogOptionalParams_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, para12_),
  };
  LogOptionalParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogOptionalParams_descriptor_,
      LogOptionalParams::default_instance_,
      LogOptionalParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogOptionalParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogOptionalParams));
  BindPlayerNameGuidRequest_descriptor_ = file->message_type(40);
  static const int BindPlayerNameGuidRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindPlayerNameGuidRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindPlayerNameGuidRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindPlayerNameGuidRequest, server_id_),
  };
  BindPlayerNameGuidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindPlayerNameGuidRequest_descriptor_,
      BindPlayerNameGuidRequest::default_instance_,
      BindPlayerNameGuidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindPlayerNameGuidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindPlayerNameGuidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindPlayerNameGuidRequest));
  TrafficStatsRequest_descriptor_ = file->message_type(41);
  static const int TrafficStatsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsRequest, count_),
  };
  TrafficStatsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficStatsRequest_descriptor_,
      TrafficStatsRequest::default_instance_,
      TrafficStatsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficStatsRequest));
  TrafficStats_descriptor_ = file->message_type(42);
  static const int TrafficStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStats, tick_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStats, in_traffic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStats, out_traffic_),
  };
  TrafficStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficStats_descriptor_,
      TrafficStats::default_instance_,
      TrafficStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficStats));
  TrafficStatsResponse_descriptor_ = file->message_type(43);
  static const int TrafficStatsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsResponse, data_),
  };
  TrafficStatsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficStatsResponse_descriptor_,
      TrafficStatsResponse::default_instance_,
      TrafficStatsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficStatsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficStatsResponse));
  GMTalkSystemRequest_descriptor_ = file->message_type(44);
  static const int GMTalkSystemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemRequest, content_),
  };
  GMTalkSystemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTalkSystemRequest_descriptor_,
      GMTalkSystemRequest::default_instance_,
      GMTalkSystemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTalkSystemRequest));
  GMTalkSystemResponse_descriptor_ = file->message_type(45);
  static const int GMTalkSystemResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemResponse, error_code_),
  };
  GMTalkSystemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMTalkSystemResponse_descriptor_,
      GMTalkSystemResponse::default_instance_,
      GMTalkSystemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMTalkSystemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMTalkSystemResponse));
  GMGetPlayerInfoRequest_descriptor_ = file->message_type(46);
  static const int GMGetPlayerInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoRequest, role_id_),
  };
  GMGetPlayerInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetPlayerInfoRequest_descriptor_,
      GMGetPlayerInfoRequest::default_instance_,
      GMGetPlayerInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetPlayerInfoRequest));
  GMGetPlayerInfoResponse_descriptor_ = file->message_type(47);
  static const int GMGetPlayerInfoResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, yingling_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, uid_),
  };
  GMGetPlayerInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetPlayerInfoResponse_descriptor_,
      GMGetPlayerInfoResponse::default_instance_,
      GMGetPlayerInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetPlayerInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetPlayerInfoResponse));
  GMSetPlayerVipLevelRequest_descriptor_ = file->message_type(48);
  static const int GMSetPlayerVipLevelRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelRequest, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelRequest, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelRequest, vip_duration_sec_),
  };
  GMSetPlayerVipLevelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetPlayerVipLevelRequest_descriptor_,
      GMSetPlayerVipLevelRequest::default_instance_,
      GMSetPlayerVipLevelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetPlayerVipLevelRequest));
  GMSetPlayerVipLevelResponse_descriptor_ = file->message_type(49);
  static const int GMSetPlayerVipLevelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelResponse, error_code_),
  };
  GMSetPlayerVipLevelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetPlayerVipLevelResponse_descriptor_,
      GMSetPlayerVipLevelResponse::default_instance_,
      GMSetPlayerVipLevelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetPlayerVipLevelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetPlayerVipLevelResponse));
  GMSetFlagRequest_descriptor_ = file->message_type(50);
  static const int GMSetFlagRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagRequest, flag_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagRequest, value_),
  };
  GMSetFlagRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetFlagRequest_descriptor_,
      GMSetFlagRequest::default_instance_,
      GMSetFlagRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetFlagRequest));
  GMSetFlagResponse_descriptor_ = file->message_type(51);
  static const int GMSetFlagResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagResponse, error_code_),
  };
  GMSetFlagResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetFlagResponse_descriptor_,
      GMSetFlagResponse::default_instance_,
      GMSetFlagResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFlagResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetFlagResponse));
  USRIdPair_descriptor_ = file->message_type(52);
  static const int USRIdPair_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, name_),
  };
  USRIdPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      USRIdPair_descriptor_,
      USRIdPair::default_instance_,
      USRIdPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(USRIdPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(USRIdPair));
  GMQueryIdsRequest_descriptor_ = file->message_type(53);
  static const int GMQueryIdsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsRequest, ids_),
  };
  GMQueryIdsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryIdsRequest_descriptor_,
      GMQueryIdsRequest::default_instance_,
      GMQueryIdsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryIdsRequest));
  GMQueryIdsResponse_descriptor_ = file->message_type(54);
  static const int GMQueryIdsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsResponse, ids_),
  };
  GMQueryIdsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryIdsResponse_descriptor_,
      GMQueryIdsResponse::default_instance_,
      GMQueryIdsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryIdsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryIdsResponse));
  GMBanPlayerRequest_descriptor_ = file->message_type(55);
  static const int GMBanPlayerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerRequest, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerRequest, set_ban_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerRequest, reason_),
  };
  GMBanPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBanPlayerRequest_descriptor_,
      GMBanPlayerRequest::default_instance_,
      GMBanPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBanPlayerRequest));
  GMBanPlayerResponse_descriptor_ = file->message_type(56);
  static const int GMBanPlayerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerResponse, error_code_),
  };
  GMBanPlayerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBanPlayerResponse_descriptor_,
      GMBanPlayerResponse::default_instance_,
      GMBanPlayerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBanPlayerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBanPlayerResponse));
  GMQueryRoleByNameRequest_descriptor_ = file->message_type(57);
  static const int GMQueryRoleByNameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameRequest, server_id_),
  };
  GMQueryRoleByNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryRoleByNameRequest_descriptor_,
      GMQueryRoleByNameRequest::default_instance_,
      GMQueryRoleByNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryRoleByNameRequest));
  GMQueryRoleByNameResponse_descriptor_ = file->message_type(58);
  static const int GMQueryRoleByNameResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameResponse, ids_),
  };
  GMQueryRoleByNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMQueryRoleByNameResponse_descriptor_,
      GMQueryRoleByNameResponse::default_instance_,
      GMQueryRoleByNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMQueryRoleByNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMQueryRoleByNameResponse));
  GMUpdatePassInstanceRequest_descriptor_ = file->message_type(59);
  static const int GMUpdatePassInstanceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceRequest, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceRequest, instance_grade_),
  };
  GMUpdatePassInstanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdatePassInstanceRequest_descriptor_,
      GMUpdatePassInstanceRequest::default_instance_,
      GMUpdatePassInstanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdatePassInstanceRequest));
  GMUpdatePassInstanceResponse_descriptor_ = file->message_type(60);
  static const int GMUpdatePassInstanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceResponse, error_code_),
  };
  GMUpdatePassInstanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMUpdatePassInstanceResponse_descriptor_,
      GMUpdatePassInstanceResponse::default_instance_,
      GMUpdatePassInstanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMUpdatePassInstanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMUpdatePassInstanceResponse));
  GMSetLimitCountRequest_descriptor_ = file->message_type(61);
  static const int GMSetLimitCountRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountRequest, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountRequest, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountRequest, count_value_),
  };
  GMSetLimitCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetLimitCountRequest_descriptor_,
      GMSetLimitCountRequest::default_instance_,
      GMSetLimitCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetLimitCountRequest));
  GMSetLimitCountResponse_descriptor_ = file->message_type(62);
  static const int GMSetLimitCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountResponse, error_code_),
  };
  GMSetLimitCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetLimitCountResponse_descriptor_,
      GMSetLimitCountResponse::default_instance_,
      GMSetLimitCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetLimitCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetLimitCountResponse));
  GmQueryPlayerFlagsRequest_descriptor_ = file->message_type(63);
  static const int GmQueryPlayerFlagsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsRequest, player_id_),
  };
  GmQueryPlayerFlagsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmQueryPlayerFlagsRequest_descriptor_,
      GmQueryPlayerFlagsRequest::default_instance_,
      GmQueryPlayerFlagsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmQueryPlayerFlagsRequest));
  GmQueryPlayerFlagsResponse_descriptor_ = file->message_type(64);
  static const int GmQueryPlayerFlagsResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsResponse, flag_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsResponse, limit_data_),
  };
  GmQueryPlayerFlagsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GmQueryPlayerFlagsResponse_descriptor_,
      GmQueryPlayerFlagsResponse::default_instance_,
      GmQueryPlayerFlagsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GmQueryPlayerFlagsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GmQueryPlayerFlagsResponse));
  GMSetFightExpFactorRequest_descriptor_ = file->message_type(65);
  static const int GMSetFightExpFactorRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, begin_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, end_message_),
  };
  GMSetFightExpFactorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetFightExpFactorRequest_descriptor_,
      GMSetFightExpFactorRequest::default_instance_,
      GMSetFightExpFactorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetFightExpFactorRequest));
  GMSetFightExpFactorResponse_descriptor_ = file->message_type(66);
  static const int GMSetFightExpFactorResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorResponse, error_code_),
  };
  GMSetFightExpFactorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetFightExpFactorResponse_descriptor_,
      GMSetFightExpFactorResponse::default_instance_,
      GMSetFightExpFactorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetFightExpFactorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetFightExpFactorResponse));
  GMSetGuildDataRequest_descriptor_ = file->message_type(67);
  static const int GMSetGuildDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataRequest, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataRequest, money_),
  };
  GMSetGuildDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetGuildDataRequest_descriptor_,
      GMSetGuildDataRequest::default_instance_,
      GMSetGuildDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetGuildDataRequest));
  GMSetGuildDataResponse_descriptor_ = file->message_type(68);
  static const int GMSetGuildDataResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataResponse, error_code_),
  };
  GMSetGuildDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetGuildDataResponse_descriptor_,
      GMSetGuildDataResponse::default_instance_,
      GMSetGuildDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetGuildDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetGuildDataResponse));
  GMGetItemListRequest_descriptor_ = file->message_type(69);
  static const int GMGetItemListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListRequest, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListRequest, type_),
  };
  GMGetItemListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetItemListRequest_descriptor_,
      GMGetItemListRequest::default_instance_,
      GMGetItemListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetItemListRequest));
  GMStartGuildCrystalTowerRequest_descriptor_ = file->message_type(70);
  static const int GMStartGuildCrystalTowerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerRequest, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerRequest, category_),
  };
  GMStartGuildCrystalTowerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMStartGuildCrystalTowerRequest_descriptor_,
      GMStartGuildCrystalTowerRequest::default_instance_,
      GMStartGuildCrystalTowerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMStartGuildCrystalTowerRequest));
  GMStartGuildCrystalTowerResponse_descriptor_ = file->message_type(71);
  static const int GMStartGuildCrystalTowerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerResponse, error_code_),
  };
  GMStartGuildCrystalTowerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMStartGuildCrystalTowerResponse_descriptor_,
      GMStartGuildCrystalTowerResponse::default_instance_,
      GMStartGuildCrystalTowerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMStartGuildCrystalTowerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMStartGuildCrystalTowerResponse));
  GMGetItemListResponse_descriptor_ = file->message_type(72);
  static const int GMGetItemListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListResponse, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListResponse, max_size_),
  };
  GMGetItemListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetItemListResponse_descriptor_,
      GMGetItemListResponse::default_instance_,
      GMGetItemListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetItemListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetItemListResponse));
  GMGetSkillListRequest_descriptor_ = file->message_type(73);
  static const int GMGetSkillListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListRequest, guid_),
  };
  GMGetSkillListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetSkillListRequest_descriptor_,
      GMGetSkillListRequest::default_instance_,
      GMGetSkillListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetSkillListRequest));
  GMGetSkillListResponse_descriptor_ = file->message_type(74);
  static const int GMGetSkillListResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, open_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, skill_exp_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, practice_skill_limit_),
  };
  GMGetSkillListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetSkillListResponse_descriptor_,
      GMGetSkillListResponse::default_instance_,
      GMGetSkillListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetSkillListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetSkillListResponse));
  GMGetTitleListRequest_descriptor_ = file->message_type(75);
  static const int GMGetTitleListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListRequest, role_id_),
  };
  GMGetTitleListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetTitleListRequest_descriptor_,
      GMGetTitleListRequest::default_instance_,
      GMGetTitleListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetTitleListRequest));
  GMGetTitleListResponse_descriptor_ = file->message_type(76);
  static const int GMGetTitleListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListResponse, titles_),
  };
  GMGetTitleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetTitleListResponse_descriptor_,
      GMGetTitleListResponse::default_instance_,
      GMGetTitleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetTitleListResponse));
  GMSetRoleTitleRequest_descriptor_ = file->message_type(77);
  static const int GMSetRoleTitleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleRequest, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleRequest, title_id_),
  };
  GMSetRoleTitleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetRoleTitleRequest_descriptor_,
      GMSetRoleTitleRequest::default_instance_,
      GMSetRoleTitleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetRoleTitleRequest));
  GMSetRoleTitleResponse_descriptor_ = file->message_type(78);
  static const int GMSetRoleTitleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleResponse, error_code_),
  };
  GMSetRoleTitleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSetRoleTitleResponse_descriptor_,
      GMSetRoleTitleResponse::default_instance_,
      GMSetRoleTitleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSetRoleTitleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSetRoleTitleResponse));
  GMGetTitleInfoRequest_descriptor_ = file->message_type(79);
  static const int GMGetTitleInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoRequest, title_id_),
  };
  GMGetTitleInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetTitleInfoRequest_descriptor_,
      GMGetTitleInfoRequest::default_instance_,
      GMGetTitleInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetTitleInfoRequest));
  TitleInfo_descriptor_ = file->message_type(80);
  static const int TitleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, role_id_),
  };
  TitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfo_descriptor_,
      TitleInfo::default_instance_,
      TitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfo));
  GMGetTitleInfoResponse_descriptor_ = file->message_type(81);
  static const int GMGetTitleInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoResponse, title_info_),
  };
  GMGetTitleInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetTitleInfoResponse_descriptor_,
      GMGetTitleInfoResponse::default_instance_,
      GMGetTitleInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetTitleInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetTitleInfoResponse));
  ServerMessageAction_descriptor_ = file->enum_type(0);
  LOG_SRC_TYPE_descriptor_ = file->enum_type(1);
  TRANSACTION_CHANNEL_descriptor_ = file->enum_type(2);
  LOG_ACTION_TYPE_descriptor_ = file->enum_type(3);
  PAY_MAIN_CATALOG_descriptor_ = file->enum_type(4);
  BUY_TYPE_descriptor_ = file->enum_type(5);
  ADD_PROPS_TYPE_descriptor_ = file->enum_type(6);
  SUB_PROPS_TYPE_descriptor_ = file->enum_type(7);
  ADD_MONEY_TYPE_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetOnlineMemberRequest_descriptor_, &WebGetOnlineMemberRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetOnlineMemberResponse_descriptor_, &WebGetOnlineMemberResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetFightDataRequest_descriptor_, &WebGetFightDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebGetFightDataResponse_descriptor_, &WebGetFightDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightStatData_descriptor_, &FightStatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastData_descriptor_, &BroadcastData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPositionNotify_descriptor_, &SyncPositionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetDaySecondsRequest_descriptor_, &GMSetDaySecondsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetDaySecondsResponse_descriptor_, &GMSetDaySecondsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetPvPLevelRequest_descriptor_, &GMSetPvPLevelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetPvPLevelResponse_descriptor_, &GMSetPvPLevelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddItemRequest_descriptor_, &GMAddItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddItemResponse_descriptor_, &GMAddItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddPhyStrengthRequest_descriptor_, &GMAddPhyStrengthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddPhyStrengthResponse_descriptor_, &GMAddPhyStrengthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdatePositionRequest_descriptor_, &GMUpdatePositionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdatePositionResponse_descriptor_, &GMUpdatePositionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdateAttributeRequest_descriptor_, &GMUpdateAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdateAttributeResponse_descriptor_, &GMUpdateAttributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddMoneyRequest_descriptor_, &GMAddMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddMoneyResponse_descriptor_, &GMAddMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeMoneyRequest_descriptor_, &ChargeMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeMoneyResponse_descriptor_, &ChargeMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddExpRequest_descriptor_, &GMAddExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddExpResponse_descriptor_, &GMAddExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddSkillExpRequest_descriptor_, &GMAddSkillExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddSkillExpResponse_descriptor_, &GMAddSkillExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSendMailRequest_descriptor_, &GMSendMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSendMailResponse_descriptor_, &GMSendMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryRoleQuestsRequest_descriptor_, &GMQueryRoleQuestsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryRoleQuestsResponse_descriptor_, &GMQueryRoleQuestsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_, &GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetQuestStatusRequest_descriptor_, &GMSetQuestStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetQuestStatusResponse_descriptor_, &GMSetQuestStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddYinglingLingliRequest_descriptor_, &GMAddYinglingLingliRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddYinglingLingliResponse_descriptor_, &GMAddYinglingLingliResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetCooldownRequest_descriptor_, &GMSetCooldownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetCooldownResponse_descriptor_, &GMSetCooldownResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendLogNotify_descriptor_, &SendLogNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogPlayerData_descriptor_, &LogPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogOptionalParams_descriptor_, &LogOptionalParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindPlayerNameGuidRequest_descriptor_, &BindPlayerNameGuidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficStatsRequest_descriptor_, &TrafficStatsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficStats_descriptor_, &TrafficStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficStatsResponse_descriptor_, &TrafficStatsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTalkSystemRequest_descriptor_, &GMTalkSystemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMTalkSystemResponse_descriptor_, &GMTalkSystemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetPlayerInfoRequest_descriptor_, &GMGetPlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetPlayerInfoResponse_descriptor_, &GMGetPlayerInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetPlayerVipLevelRequest_descriptor_, &GMSetPlayerVipLevelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetPlayerVipLevelResponse_descriptor_, &GMSetPlayerVipLevelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetFlagRequest_descriptor_, &GMSetFlagRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetFlagResponse_descriptor_, &GMSetFlagResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    USRIdPair_descriptor_, &USRIdPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryIdsRequest_descriptor_, &GMQueryIdsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryIdsResponse_descriptor_, &GMQueryIdsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBanPlayerRequest_descriptor_, &GMBanPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBanPlayerResponse_descriptor_, &GMBanPlayerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryRoleByNameRequest_descriptor_, &GMQueryRoleByNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMQueryRoleByNameResponse_descriptor_, &GMQueryRoleByNameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdatePassInstanceRequest_descriptor_, &GMUpdatePassInstanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMUpdatePassInstanceResponse_descriptor_, &GMUpdatePassInstanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetLimitCountRequest_descriptor_, &GMSetLimitCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetLimitCountResponse_descriptor_, &GMSetLimitCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmQueryPlayerFlagsRequest_descriptor_, &GmQueryPlayerFlagsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GmQueryPlayerFlagsResponse_descriptor_, &GmQueryPlayerFlagsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetFightExpFactorRequest_descriptor_, &GMSetFightExpFactorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetFightExpFactorResponse_descriptor_, &GMSetFightExpFactorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetGuildDataRequest_descriptor_, &GMSetGuildDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetGuildDataResponse_descriptor_, &GMSetGuildDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetItemListRequest_descriptor_, &GMGetItemListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMStartGuildCrystalTowerRequest_descriptor_, &GMStartGuildCrystalTowerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMStartGuildCrystalTowerResponse_descriptor_, &GMStartGuildCrystalTowerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetItemListResponse_descriptor_, &GMGetItemListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetSkillListRequest_descriptor_, &GMGetSkillListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetSkillListResponse_descriptor_, &GMGetSkillListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetTitleListRequest_descriptor_, &GMGetTitleListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetTitleListResponse_descriptor_, &GMGetTitleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetRoleTitleRequest_descriptor_, &GMSetRoleTitleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSetRoleTitleResponse_descriptor_, &GMSetRoleTitleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetTitleInfoRequest_descriptor_, &GMGetTitleInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfo_descriptor_, &TitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetTitleInfoResponse_descriptor_, &GMGetTitleInfoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fserver_2eproto() {
  delete WebGetOnlineMemberRequest::default_instance_;
  delete WebGetOnlineMemberRequest_reflection_;
  delete WebGetOnlineMemberResponse::default_instance_;
  delete WebGetOnlineMemberResponse_reflection_;
  delete WebGetFightDataRequest::default_instance_;
  delete WebGetFightDataRequest_reflection_;
  delete WebGetFightDataResponse::default_instance_;
  delete WebGetFightDataResponse_reflection_;
  delete FightStatData::default_instance_;
  delete FightStatData_reflection_;
  delete BroadcastData::default_instance_;
  delete BroadcastData_reflection_;
  delete SyncPositionNotify::default_instance_;
  delete SyncPositionNotify_reflection_;
  delete GMSetDaySecondsRequest::default_instance_;
  delete GMSetDaySecondsRequest_reflection_;
  delete GMSetDaySecondsResponse::default_instance_;
  delete GMSetDaySecondsResponse_reflection_;
  delete GMSetPvPLevelRequest::default_instance_;
  delete GMSetPvPLevelRequest_reflection_;
  delete GMSetPvPLevelResponse::default_instance_;
  delete GMSetPvPLevelResponse_reflection_;
  delete GMAddItemRequest::default_instance_;
  delete GMAddItemRequest_reflection_;
  delete GMAddItemResponse::default_instance_;
  delete GMAddItemResponse_reflection_;
  delete GMAddPhyStrengthRequest::default_instance_;
  delete GMAddPhyStrengthRequest_reflection_;
  delete GMAddPhyStrengthResponse::default_instance_;
  delete GMAddPhyStrengthResponse_reflection_;
  delete GMUpdatePositionRequest::default_instance_;
  delete GMUpdatePositionRequest_reflection_;
  delete GMUpdatePositionResponse::default_instance_;
  delete GMUpdatePositionResponse_reflection_;
  delete GMUpdateAttributeRequest::default_instance_;
  delete GMUpdateAttributeRequest_reflection_;
  delete GMUpdateAttributeResponse::default_instance_;
  delete GMUpdateAttributeResponse_reflection_;
  delete GMAddMoneyRequest::default_instance_;
  delete GMAddMoneyRequest_reflection_;
  delete GMAddMoneyResponse::default_instance_;
  delete GMAddMoneyResponse_reflection_;
  delete ChargeMoneyRequest::default_instance_;
  delete ChargeMoneyRequest_reflection_;
  delete ChargeMoneyResponse::default_instance_;
  delete ChargeMoneyResponse_reflection_;
  delete GMAddExpRequest::default_instance_;
  delete GMAddExpRequest_reflection_;
  delete GMAddExpResponse::default_instance_;
  delete GMAddExpResponse_reflection_;
  delete GMAddSkillExpRequest::default_instance_;
  delete GMAddSkillExpRequest_reflection_;
  delete GMAddSkillExpResponse::default_instance_;
  delete GMAddSkillExpResponse_reflection_;
  delete GMSendMailRequest::default_instance_;
  delete GMSendMailRequest_reflection_;
  delete GMSendMailResponse::default_instance_;
  delete GMSendMailResponse_reflection_;
  delete GMQueryRoleQuestsRequest::default_instance_;
  delete GMQueryRoleQuestsRequest_reflection_;
  delete GMQueryRoleQuestsResponse::default_instance_;
  delete GMQueryRoleQuestsResponse_reflection_;
  delete GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance_;
  delete GMQueryRoleQuestsResponse_RoleQuestStatus_reflection_;
  delete GMSetQuestStatusRequest::default_instance_;
  delete GMSetQuestStatusRequest_reflection_;
  delete GMSetQuestStatusResponse::default_instance_;
  delete GMSetQuestStatusResponse_reflection_;
  delete GMAddYinglingLingliRequest::default_instance_;
  delete GMAddYinglingLingliRequest_reflection_;
  delete GMAddYinglingLingliResponse::default_instance_;
  delete GMAddYinglingLingliResponse_reflection_;
  delete GMSetCooldownRequest::default_instance_;
  delete GMSetCooldownRequest_reflection_;
  delete GMSetCooldownResponse::default_instance_;
  delete GMSetCooldownResponse_reflection_;
  delete SendLogNotify::default_instance_;
  delete SendLogNotify_reflection_;
  delete LogPlayerData::default_instance_;
  delete LogPlayerData_reflection_;
  delete LogOptionalParams::default_instance_;
  delete LogOptionalParams_reflection_;
  delete BindPlayerNameGuidRequest::default_instance_;
  delete BindPlayerNameGuidRequest_reflection_;
  delete TrafficStatsRequest::default_instance_;
  delete TrafficStatsRequest_reflection_;
  delete TrafficStats::default_instance_;
  delete TrafficStats_reflection_;
  delete TrafficStatsResponse::default_instance_;
  delete TrafficStatsResponse_reflection_;
  delete GMTalkSystemRequest::default_instance_;
  delete GMTalkSystemRequest_reflection_;
  delete GMTalkSystemResponse::default_instance_;
  delete GMTalkSystemResponse_reflection_;
  delete GMGetPlayerInfoRequest::default_instance_;
  delete GMGetPlayerInfoRequest_reflection_;
  delete GMGetPlayerInfoResponse::default_instance_;
  delete GMGetPlayerInfoResponse_reflection_;
  delete GMSetPlayerVipLevelRequest::default_instance_;
  delete GMSetPlayerVipLevelRequest_reflection_;
  delete GMSetPlayerVipLevelResponse::default_instance_;
  delete GMSetPlayerVipLevelResponse_reflection_;
  delete GMSetFlagRequest::default_instance_;
  delete GMSetFlagRequest_reflection_;
  delete GMSetFlagResponse::default_instance_;
  delete GMSetFlagResponse_reflection_;
  delete USRIdPair::default_instance_;
  delete USRIdPair_reflection_;
  delete GMQueryIdsRequest::default_instance_;
  delete GMQueryIdsRequest_reflection_;
  delete GMQueryIdsResponse::default_instance_;
  delete GMQueryIdsResponse_reflection_;
  delete GMBanPlayerRequest::default_instance_;
  delete GMBanPlayerRequest_reflection_;
  delete GMBanPlayerResponse::default_instance_;
  delete GMBanPlayerResponse_reflection_;
  delete GMQueryRoleByNameRequest::default_instance_;
  delete GMQueryRoleByNameRequest_reflection_;
  delete GMQueryRoleByNameResponse::default_instance_;
  delete GMQueryRoleByNameResponse_reflection_;
  delete GMUpdatePassInstanceRequest::default_instance_;
  delete GMUpdatePassInstanceRequest_reflection_;
  delete GMUpdatePassInstanceResponse::default_instance_;
  delete GMUpdatePassInstanceResponse_reflection_;
  delete GMSetLimitCountRequest::default_instance_;
  delete GMSetLimitCountRequest_reflection_;
  delete GMSetLimitCountResponse::default_instance_;
  delete GMSetLimitCountResponse_reflection_;
  delete GmQueryPlayerFlagsRequest::default_instance_;
  delete GmQueryPlayerFlagsRequest_reflection_;
  delete GmQueryPlayerFlagsResponse::default_instance_;
  delete GmQueryPlayerFlagsResponse_reflection_;
  delete GMSetFightExpFactorRequest::default_instance_;
  delete GMSetFightExpFactorRequest_reflection_;
  delete GMSetFightExpFactorResponse::default_instance_;
  delete GMSetFightExpFactorResponse_reflection_;
  delete GMSetGuildDataRequest::default_instance_;
  delete GMSetGuildDataRequest_reflection_;
  delete GMSetGuildDataResponse::default_instance_;
  delete GMSetGuildDataResponse_reflection_;
  delete GMGetItemListRequest::default_instance_;
  delete GMGetItemListRequest_reflection_;
  delete GMStartGuildCrystalTowerRequest::default_instance_;
  delete GMStartGuildCrystalTowerRequest_reflection_;
  delete GMStartGuildCrystalTowerResponse::default_instance_;
  delete GMStartGuildCrystalTowerResponse_reflection_;
  delete GMGetItemListResponse::default_instance_;
  delete GMGetItemListResponse_reflection_;
  delete GMGetSkillListRequest::default_instance_;
  delete GMGetSkillListRequest_reflection_;
  delete GMGetSkillListResponse::default_instance_;
  delete GMGetSkillListResponse_reflection_;
  delete GMGetTitleListRequest::default_instance_;
  delete GMGetTitleListRequest_reflection_;
  delete GMGetTitleListResponse::default_instance_;
  delete GMGetTitleListResponse_reflection_;
  delete GMSetRoleTitleRequest::default_instance_;
  delete GMSetRoleTitleRequest_reflection_;
  delete GMSetRoleTitleResponse::default_instance_;
  delete GMSetRoleTitleResponse_reflection_;
  delete GMGetTitleInfoRequest::default_instance_;
  delete GMGetTitleInfoRequest_reflection_;
  delete TitleInfo::default_instance_;
  delete TitleInfo_reflection_;
  delete GMGetTitleInfoResponse::default_instance_;
  delete GMGetTitleInfoResponse_reflection_;
}

void protobuf_AddDesc_game_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_game_5fcommon_2eproto();
  ::protocols::statistics::protobuf_AddDesc_stat_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021game_server.proto\022\020protocols.common\032\021g"
    "ame_common.proto\032\017stat_data.proto\"\033\n\031Web"
    "GetOnlineMemberRequest\"G\n\032WebGetOnlineMe"
    "mberResponse\022\022\n\nerror_code\030\001 \002(\005\022\025\n\ronli"
    "ne_member\030\002 \002(\005\"+\n\026WebGetFightDataReques"
    "t\022\021\n\tfight_key\030\001 \002(\003\"T\n\027WebGetFightDataR"
    "esponse\022\022\n\nerror_code\030\001 \002(\005\022\021\n\tfight_key"
    "\030\002 \001(\003\022\022\n\nfight_data\030\003 \001(\t\"\263\003\n\rFightStat"
    "Data\022\016\n\006seq_no\030\001 \002(\005\022=\n\013player_info\030\002 \002("
    "\0132(.protocols.statistics.PlayerStatBaseI"
    "nfo\022D\n\023equip_strength_info\030\003 \001(\0132\'.proto"
    "cols.statistics.EquipStrengthInfo\022\025\n\nis_"
    "in_team\030\004 \001(\005:\0010\022\026\n\013instance_id\030\005 \001(\005:\0010"
    "\022\031\n\016instance_grade\030\006 \001(\005:\0010\022\032\n\017battle_gr"
    "oup_id\030\007 \001(\005:\0010\022\027\n\014fight_result\030\010 \001(\005:\0010"
    "\022\027\n\014dead_persons\030\t \001(\005:\0010\0227\n\022equiped_ski"
    "ll_info\030\n \003(\0132\033.protocols.common.SkillIn"
    "fo\022<\n\021battle_skill_info\030\013 \003(\0132!.protocol"
    "s.common.BattleSkillInfo\"D\n\rBroadcastDat"
    "a\022\014\n\004uids\030\001 \003(\005\022\014\n\004data\030\002 \002(\014\022\027\n\010all_fla"
    "g\030\003 \001(\010:\005false\"B\n\022SyncPositionNotify\022\016\n\006"
    "map_id\030\001 \002(\005\022\r\n\005map_x\030\002 \002(\005\022\r\n\005map_y\030\003 \002"
    "(\005\")\n\026GMSetDaySecondsRequest\022\017\n\007seconds\030"
    "\001 \002(\005\"-\n\027GMSetDaySecondsResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"%\n\024GMSetPvPLevelRequest\022\r\n\005"
    "level\030\001 \002(\005\"+\n\025GMSetPvPLevelResponse\022\022\n\n"
    "error_code\030\001 \002(\005\".\n\020GMAddItemRequest\022\013\n\003"
    "tid\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"\'\n\021GMAddItemRes"
    "ponse\022\022\n\nerror_code\030\001 \002(\005\"8\n\027GMAddPhyStr"
    "engthRequest\022\014\n\004type\030\002 \002(\005\022\017\n\007phy_str\030\001 "
    "\002(\005\".\n\030GMAddPhyStrengthResponse\022\022\n\nerror"
    "_code\030\001 \002(\005\"G\n\027GMUpdatePositionRequest\022\016"
    "\n\006map_id\030\001 \001(\005\022\r\n\005map_x\030\002 \001(\005\022\r\n\005map_y\030\003"
    " \001(\005\".\n\030GMUpdatePositionResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\"O\n\030GMUpdateAttributeRequest"
    "\022\021\n\tattr_type\030\001 \001(\005\022\022\n\nattr_value\030\002 \001(\005\022"
    "\014\n\004guid\030\003 \001(\003\"/\n\031GMUpdateAttributeRespon"
    "se\022\022\n\nerror_code\030\001 \002(\005\"0\n\021GMAddMoneyRequ"
    "est\022\014\n\004type\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"(\n\022GMAd"
    "dMoneyResponse\022\022\n\nerror_code\030\001 \002(\005\"1\n\022Ch"
    "argeMoneyRequest\022\014\n\004type\030\001 \002(\005\022\r\n\005value\030"
    "\002 \002(\005\")\n\023ChargeMoneyResponse\022\022\n\nerror_co"
    "de\030\001 \002(\005\"\036\n\017GMAddExpRequest\022\013\n\003exp\030\001 \002(\005"
    "\"&\n\020GMAddExpResponse\022\022\n\nerror_code\030\001 \002(\005"
    "\"H\n\024GMAddSkillExpRequest\022\021\n\tbuddy_tid\030\003 "
    "\002(\005\022\020\n\010skill_id\030\001 \002(\005\022\013\n\003exp\030\002 \002(\005\"+\n\025GM"
    "AddSkillExpResponse\022\022\n\nerror_code\030\001 \002(\005\""
    "n\n\021GMSendMailRequest\022\023\n\013dst_role_id\030\001 \001("
    "\005\022\020\n\010item_tid\030\002 \001(\005\022\022\n\nitem_count\030\003 \001(\005\022"
    "\r\n\005title\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\"(\n\022GMSen"
    "dMailResponse\022\022\n\nerror_code\030\001 \002(\005\"+\n\030GMQ"
    "ueryRoleQuestsRequest\022\017\n\007role_id\030\001 \002(\005\"\266"
    "\001\n\031GMQueryRoleQuestsResponse\022P\n\013role_que"
    "sts\030\001 \003(\0132;.protocols.common.GMQueryRole"
    "QuestsResponse.RoleQuestStatus\022\022\n\nerror_"
    "code\030\002 \001(\005\0323\n\017RoleQuestStatus\022\020\n\010quest_i"
    "d\030\001 \002(\005\022\016\n\006status\030\002 \002(\005\"T\n\027GMSetQuestSta"
    "tusRequest\022\021\n\tplayer_id\030\001 \002(\005\022\020\n\010quest_i"
    "d\030\002 \002(\005\022\024\n\014quest_status\030\003 \002(\005\".\n\030GMSetQu"
    "estStatusResponse\022\022\n\nerror_code\030\001 \002(\005\"C\n"
    "\032GMAddYinglingLingliRequest\022\021\n\tplayer_id"
    "\030\001 \002(\005\022\022\n\nadd_lingli\030\002 \002(\005\"1\n\033GMAddYingl"
    "ingLingliResponse\022\022\n\nerror_code\030\001 \002(\005\"Z\n"
    "\024GMSetCooldownRequest\022\021\n\tplayer_id\030\001 \002(\005"
    "\022\026\n\016cool_down_type\030\002 \002(\005\022\027\n\017cool_down_va"
    "lue\030\003 \002(\005\"+\n\025GMSetCooldownResponse\022\022\n\ner"
    "ror_code\030\001 \002(\005\"\340\001\n\rSendLogNotify\022\013\n\003seq\030"
    "\007 \002(\005\022\024\n\014log_src_type\030\001 \002(\005\022\023\n\013action_ty"
    "pe\030\002 \002(\005\022\022\n\ntime_stamp\030\003 \002(\003\0224\n\013player_i"
    "nfo\030\004 \002(\0132\037.protocols.common.LogPlayerDa"
    "ta\022;\n\016optional_paras\030\005 \001(\0132#.protocols.c"
    "ommon.LogOptionalParams\022\020\n\010log_data\030\006 \001("
    "\t\"\326\003\n\rLogPlayerData\022\021\n\tclient_ip\030\001 \001(\t\022\014"
    "\n\004ouid\030\002 \001(\t\022\014\n\004iuid\030\003 \002(\005\022\017\n\007role_id\030\022 "
    "\001(\005\022\014\n\004name\030\020 \001(\t\022\016\n\006gender\030\004 \001(\005\022\013\n\003job"
    "\030\021 \001(\005\022\023\n\013game_friend\030\005 \001(\005\022\027\n\017platform_"
    "friend\030\006 \001(\005\022\022\n\nuser_level\030\007 \001(\005\022\020\n\010user"
    "_exp\030\010 \001(\005\022\017\n\007diamond\030\t \001(\005\022\016\n\006coupon\030\n "
    "\001(\005\022\021\n\tgold_coin\030\013 \001(\005\022\021\n\tvip_level\030\014 \001("
    "\005\022\025\n\rfirst_in_time\030\r \001(\005\022\017\n\007version\030\016 \001("
    "\t\022\022\n\nuser_email\030\017 \001(\t\022\020\n\010platform\030\025 \001(\t\022"
    ",\n\010bag_item\030\023 \003(\0132\032.protocols.common.Ite"
    "mInfo\022.\n\ndepot_item\030\024 \003(\0132\032.protocols.co"
    "mmon.ItemInfo\022\023\n\013online_time\030\026 \001(\005\"\312\001\n\021L"
    "ogOptionalParams\022\r\n\005para1\030\001 \001(\005\022\r\n\005para2"
    "\030\002 \001(\005\022\r\n\005para3\030\003 \001(\005\022\r\n\005para4\030\004 \001(\005\022\r\n\005"
    "para5\030\005 \001(\005\022\r\n\005para6\030\006 \001(\t\022\r\n\005para7\030\007 \001("
    "\t\022\r\n\005para8\030\010 \001(\t\022\r\n\005para9\030\t \001(\t\022\016\n\006para1"
    "0\030\n \001(\t\022\016\n\006para11\030\013 \001(\003\022\016\n\006para12\030\014 \001(\003\""
    "J\n\031BindPlayerNameGuidRequest\022\014\n\004guid\030\001 \001"
    "(\003\022\014\n\004name\030\002 \001(\t\022\021\n\tserver_id\030\003 \001(\005\"$\n\023T"
    "rafficStatsRequest\022\r\n\005count\030\001 \001(\005\"G\n\014Tra"
    "fficStats\022\016\n\006tick_s\030\001 \002(\005\022\022\n\nin_traffic\030"
    "\002 \002(\001\022\023\n\013out_traffic\030\003 \002(\001\"D\n\024TrafficSta"
    "tsResponse\022,\n\004data\030\001 \003(\0132\036.protocols.com"
    "mon.TrafficStats\"&\n\023GMTalkSystemRequest\022"
    "\017\n\007content\030\001 \001(\t\"*\n\024GMTalkSystemResponse"
    "\022\022\n\nerror_code\030\001 \002(\005\")\n\026GMGetPlayerInfoR"
    "equest\022\017\n\007role_id\030\001 \001(\005\"\316\001\n\027GMGetPlayerI"
    "nfoResponse\022\022\n\nerror_code\030\001 \002(\005\0221\n\013playe"
    "r_info\030\002 \001(\0132\034.protocols.common.PlayerIn"
    "fo\022(\n\004bank\030\003 \001(\0132\032.protocols.common.Bank"
    "Info\0225\n\ryingling_list\030\004 \003(\0132\036.protocols."
    "common.YinglingInfo\022\013\n\003uid\030\005 \001(\005\"Z\n\032GMSe"
    "tPlayerVipLevelRequest\022\017\n\007role_id\030\001 \002(\005\022"
    "\021\n\tvip_level\030\002 \002(\005\022\030\n\020vip_duration_sec\030\003"
    " \002(\005\"1\n\033GMSetPlayerVipLevelResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\"7\n\020GMSetFlagRequest\022\021\n\tf"
    "lag_type\030\001 \002(\005\022\020\n\005value\030\002 \001(\005:\0010\"\'\n\021GMSe"
    "tFlagResponse\022\022\n\nerror_code\030\001 \002(\005\"J\n\tUSR"
    "IdPair\022\013\n\003uid\030\001 \001(\005\022\021\n\tserver_id\030\002 \001(\005\022\017"
    "\n\007role_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"=\n\021GMQuery"
    "IdsRequest\022(\n\003ids\030\001 \003(\0132\033.protocols.comm"
    "on.USRIdPair\">\n\022GMQueryIdsResponse\022(\n\003id"
    "s\030\001 \003(\0132\033.protocols.common.USRIdPair\"J\n\022"
    "GMBanPlayerRequest\022\017\n\007role_id\030\001 \001(\005\022\023\n\013s"
    "et_ban_sec\030\002 \001(\005\022\016\n\006reason\030\003 \001(\014\")\n\023GMBa"
    "nPlayerResponse\022\022\n\nerror_code\030\001 \002(\005\";\n\030G"
    "MQueryRoleByNameRequest\022\014\n\004name\030\001 \002(\014\022\021\n"
    "\tserver_id\030\002 \001(\005\"E\n\031GMQueryRoleByNameRes"
    "ponse\022(\n\003ids\030\001 \003(\0132\033.protocols.common.US"
    "RIdPair\"J\n\033GMUpdatePassInstanceRequest\022\023"
    "\n\013instance_id\030\001 \002(\005\022\026\n\016instance_grade\030\002 "
    "\002(\005\"2\n\034GMUpdatePassInstanceResponse\022\022\n\ne"
    "rror_code\030\001 \002(\005\"T\n\026GMSetLimitCountReques"
    "t\022\021\n\tplayer_id\030\001 \002(\005\022\022\n\nlimit_type\030\002 \002(\005"
    "\022\023\n\013count_value\030\003 \002(\005\"-\n\027GMSetLimitCount"
    "Response\022\022\n\nerror_code\030\001 \002(\005\".\n\031GmQueryP"
    "layerFlagsRequest\022\021\n\tplayer_id\030\001 \002(\005\"\237\001\n"
    "\032GmQueryPlayerFlagsResponse\022\022\n\nerror_cod"
    "e\030\001 \001(\005\0225\n\tflag_data\030\002 \001(\0132\".protocols.c"
    "ommon.PlayerFlagDataPb\0226\n\nlimit_data\030\003 \001"
    "(\0132\".protocols.common.RoleDailyLimitPb\"\210"
    "\001\n\032GMSetFightExpFactorRequest\022\022\n\nexp_fac"
    "tor\030\001 \002(\005\022\025\n\nbegin_time\030\002 \001(\005:\0010\022\023\n\010end_"
    "time\030\003 \001(\005:\0010\022\025\n\rbegin_message\030\004 \001(\t\022\023\n\013"
    "end_message\030\005 \001(\t\"1\n\033GMSetFightExpFactor"
    "Response\022\022\n\nerror_code\030\001 \002(\005\"E\n\025GMSetGui"
    "ldDataRequest\022\020\n\010guild_id\030\001 \002(\005\022\013\n\003exp\030\002"
    " \001(\005\022\r\n\005money\030\003 \001(\005\",\n\026GMSetGuildDataRes"
    "ponse\022\022\n\nerror_code\030\001 \002(\005\"5\n\024GMGetItemLi"
    "stRequest\022\017\n\007role_id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005"
    "\"E\n\037GMStartGuildCrystalTowerRequest\022\020\n\010g"
    "uild_id\030\001 \002(\005\022\020\n\010category\030\002 \002(\005\"6\n GMSta"
    "rtGuildCrystalTowerResponse\022\022\n\nerror_cod"
    "e\030\001 \002(\005\"l\n\025GMGetItemListResponse\022\022\n\nerro"
    "r_code\030\001 \002(\005\022-\n\titem_list\030\002 \003(\0132\032.protoc"
    "ols.common.ItemInfo\022\020\n\010max_size\030\003 \001(\005\"%\n"
    "\025GMGetSkillListRequest\022\014\n\004guid\030\001 \002(\003\"\264\001\n"
    "\026GMGetSkillListResponse\022\022\n\nerror_code\030\001 "
    "\002(\005\022\014\n\004guid\030\002 \002(\003\022\021\n\topen_slot\030\003 \002(\005\022/\n\n"
    "skill_list\030\004 \003(\0132\033.protocols.common.Skil"
    "lInfo\022\026\n\016skill_exp_pool\030\005 \001(\005\022\034\n\024practic"
    "e_skill_limit\030\006 \001(\005\"(\n\025GMGetTitleListReq"
    "uest\022\017\n\007role_id\030\001 \002(\005\"<\n\026GMGetTitleListR"
    "esponse\022\022\n\nerror_code\030\001 \002(\005\022\016\n\006titles\030\002 "
    "\003(\005\":\n\025GMSetRoleTitleRequest\022\017\n\007role_id\030"
    "\001 \002(\005\022\020\n\010title_id\030\002 \002(\005\",\n\026GMSetRoleTitl"
    "eResponse\022\022\n\nerror_code\030\001 \002(\005\")\n\025GMGetTi"
    "tleInfoRequest\022\020\n\010title_id\030\001 \002(\005\".\n\tTitl"
    "eInfo\022\020\n\010title_id\030\001 \002(\005\022\017\n\007role_id\030\002 \002(\005"
    "\"]\n\026GMGetTitleInfoResponse\022\022\n\nerror_code"
    "\030\001 \002(\005\022/\n\ntitle_info\030\002 \001(\0132\033.protocols.c"
    "ommon.TitleInfo*\306\013\n\023ServerMessageAction\022"
    "\030\n\024MSG_ACTION_BROADCAST\020\001\022\034\n\030MSG_ACTION_"
    "SYNC_POSITION\020\002\022\032\n\026MSG_ACTION_GM_ADD_ITE"
    "M\020\004\022\033\n\027MSG_ACTION_GM_ADD_MONEY\020\005\022\031\n\025MSG_"
    "ACTION_GM_ADD_EXP\020\006\022\027\n\023MSG_ACTION_SEND_L"
    "OG\020\007\022\031\n\025MSG_ACTION_UNUSE_NAME\020\010\022\035\n\031MSG_A"
    "CTION_BIND_NAME_GUID\020\t\022\033\n\027MSG_ACTION_GM_"
    "SEND_MAIL\020\n\022#\n\037MSG_ACTION_SERVER_TRAFFIC"
    "_STATS\020\013\022\"\n\036MSG_ACTION_GM_UPDATE_ATTRIBU"
    "TE\020\014\022!\n\035MSG_ACTION_GM_UPDATE_POSITION\020\r\022"
    "\037\n\033MSG_ACTION_GM_UPDATE_STATUS\020\016\022\"\n\036MSG_"
    "ACTION_GM_SET_QUEST_STATUS\020\017\022\037\n\033MSG_ACTI"
    "ON_GM_ADD_SKILL_EXP\020\020\022!\n\035MSG_ACTION_GM_S"
    "ET_DAY_SECONDS\020\021\022%\n!MSG_ACTION_GM_ADD_YI"
    "NGLING_LINGLI\020\022\022\036\n\032MSG_ACTION_GM_SET_COO"
    "LDOWN\020\023\022\035\n\031MSG_ACTION_GM_TALK_SYSTEM\020\024\022!"
    "\n\035MSG_ACTION_GM_GET_PLAYER_INFO\020\025\022\037\n\033MSG"
    "_ACTION_GM_SET_VIP_LEVEL\020\026\022#\n\037MSG_ACTION"
    "_SEND_FIGHT_STAT_DATA\020\027\022\032\n\026MSG_ACTION_GM"
    "_SET_FLAG\020\030\022\033\n\027MSG_ACTION_GM_QUERY_IDS\020\031"
    "\022\031\n\025MSG_ACTION_BAN_PLAYER\020\032\022\035\n\031MSG_ACTIO"
    "N_GM_QUERY_QUEST\020\033\022\037\n\033MSG_ACTION_GM_QUER"
    "Y_BY_NAME\020\034\022&\n\"MSG_ACTION_GM_UPDATE_PASS"
    "_INSTANCE\020\035\022!\n\035MSG_ACTION_GM_SET_LIMIT_C"
    "OUNT\020\036\022!\n\035MSG_ACTION_WEB_GET_FIGHT_DATA\020"
    "\037\022&\n\"MSG_ACTION_GM_SET_FIGHT_EXP_FACTOR\020"
    " \022\"\n\036MSG_ACTION_GM_ADD_PHY_STRENGTH\020!\022$\n"
    " MSG_ACTION_WEB_GET_ONLINE_MEMBER\020\"\022 \n\034M"
    "SG_ACTION_GM_SET_GUILD_DATA\020#\022\033\n\027MSG_ACT"
    "ION_CHARGE_MONEY\020$\022\"\n\036MSG_ACTION_GM_GET_"
    "GUILD_DETAIL\020%\022!\n\035MSG_ACTION_QUERY_PLAYE"
    "R_FLAGS\020&\022\037\n\033MSG_ACTION_GM_GET_ITEM_LIST"
    "\020\'\022 \n\034MSG_ACTION_GM_GET_SKILL_LIST\020(\022 \n\034"
    "MSG_ACTION_GM_GET_TITLE_LIST\020)\022 \n\034MSG_AC"
    "TION_GM_SET_ROLE_TITLE\020*\022 \n\034MSG_ACTION_G"
    "M_GET_TITLE_INFO\020+\022\037\n\033MSG_ACTION_GM_SET_"
    "PVP_LEVEL\020,\022+\n\'MSG_ACTION_GM_START_GUILD"
    "_CRYSTAL_TOWER\020-*p\n\014LOG_SRC_TYPE\022\023\n\017SRC_"
    "GATE_SERVER\020\000\022\023\n\017SRC_ZONE_SERVER\020\001\022\024\n\020SR"
    "C_LOGIC_SERVER\020\002\022\021\n\rSRC_GM_SERVER\020\003\022\r\n\tS"
    "RC_OTHER\020\004*\242\001\n\023TRANSACTION_CHANNEL\022\024\n\020TR"
    "ANS_CHANNEL_GM\020\001\022\026\n\022TRANS_CHANNEL_MART\020\002"
    "\022\026\n\022TRANS_CHANNEL_SHOP\020\003\022\025\n\021TRANS_CHANNE"
    "L_BUY\020\004\022\025\n\021TRANS_CHANNEL_PAY\020\005\022\027\n\023TRANS_"
    "CHANNEL_OTHER\020\006*\245\004\n\017LOG_ACTION_TYPE\022\024\n\020L"
    "OG_ACTION_LOGON\020\001\022\025\n\021LOG_ACTION_LOGOFF\020\002"
    "\022\022\n\016LOG_ACTION_BUY\020\003\022\023\n\017LOG_ACTION_SELL\020"
    "\004\022\030\n\024LOG_ACTION_ADD_PROPS\020\005\022\030\n\024LOG_ACTIO"
    "N_SUB_PROPS\020\006\022\030\n\024LOG_ACTION_ADD_MONEY\020\007\022"
    "\030\n\024LOG_ACTION_SUB_MONEY\020\010\022\032\n\026LOG_ACTION_"
    "CREATE_ROLE\020\t\022\035\n\031LOG_ACTION_INVENTORY_IN"
    "FO\020\n\022\032\n\026LOG_ACTION_SERVER_DATA\020\013\022\023\n\017LOG_"
    "ACTION_ATTR\020\014\022\024\n\020LOG_ACTION_GUIDE\020\r\022\032\n\026L"
    "OG_ACTION_FRIEND_FEED\020\016\022\030\n\024LOG_ACTION_GI"
    "FT_FEED\020\017\022\031\n\025LOG_ACTION_FEED_EVENT\020\020\022\032\n\026"
    "LOG_ACTION_TRANSACTION\020\021\022\031\n\025LOG_ACTION_E"
    "QUIP_STAT\020\022\022\024\n\020LOG_ACTION_QUEST\020\023\022\030\n\024LOG"
    "_ACTION_LUCKY_ACT\020\024\022\032\n\026LOG_ACTION_WING_S"
    "PIRIT\020\025*\205\003\n\020PAY_MAIN_CATALOG\022\023\n\017PAY_NOT_"
    "DEFINED\020\000\022\014\n\010PAY_ROLE\020\001\022\014\n\010PAY_SOUL\020\002\022\r\n"
    "\tPAY_SKILL\020\003\022\r\n\tPAY_EQUIP\020\004\022\r\n\tPAY_STONE"
    "\020\005\022\025\n\021PAY_HIRE_YINGLING\020\006\022\031\n\025PAY_INSTANC"
    "E_WANTED_1\020\007\022\031\n\025PAY_INSTANCE_WANTED_2\020\010\022"
    "\r\n\tPAY_ARENA\020\t\022\022\n\016PAY_AUTO_FIGHT\020\n\022\024\n\020PA"
    "Y_WANTED_QUEST\020\013\022\r\n\tPAY_YOULI\020\014\022\r\n\tPAY_F"
    "IGHT\020\r\022\r\n\tPAY_GUILD\020\016\022\027\n\023PAY_INSTANCE_WA"
    "NTED\020\017\022\r\n\tPAY_QUEST\020\020\022\022\n\016PAY_ROLE_LIMIT\020"
    "\021\022\017\n\013PAY_ACT_PAY\020\022\022\023\n\017PAY_WING_SPIRIT\020\023*"
    "\226 \n\010BUY_TYPE\022\032\n\026BUY_OPEN_YINGLING_SLOT\020e"
    "\022\025\n\021BUY_OPEN_BAG_SLOT\020f\022\026\n\022BUY_PHY_STREN"
    "GTH_1\020g\022\026\n\022BUY_PHY_STRENGTH_2\020h\022\026\n\022BUY_P"
    "HY_STRENGTH_3\020i\022\026\n\022BUY_PHY_STRENGTH_4\020j\022"
    "\026\n\022BUY_PHY_STRENGTH_5\020k\022\r\n\tBUY_PROPS\020l\022\r"
    "\n\tBUY_VIP_1\020m\022\r\n\tBUY_VIP_2\020n\022\r\n\tBUY_VIP_"
    "3\020o\022\r\n\tBUY_VIP_4\020p\022\r\n\tBUY_VIP_5\020q\022\r\n\tBUY"
    "_VIP_6\020r\022\030\n\023BUY_ROLE_SOUL_STONE\020\311\001\022\032\n\025BU"
    "Y_ROLE_SOUL_FEATHER\020\312\001\022\034\n\027BUY_YINGLING_S"
    "OUL_STONE\020\313\001\022\036\n\031BUY_YINGLING_SOUL_FEATHE"
    "R\020\314\001\022\031\n\024BUY_INJECT_ROLE_SOUL\020\315\001\022\035\n\030BUY_I"
    "NJECT_YINGLING_SOUL\020\316\001\022\033\n\026BUY_SPACE_CHAL"
    "LENGE_CD\020\317\001\022\027\n\022BUY_SKILL_PRACTICE\020\255\002\022 \n\033"
    "BUY_SKILL_PRACTICE_SPEED_UP\020\256\002\022\027\n\022BUY_EQ"
    "UIP_STRENGTH\020\221\003\022\025\n\020BUY_EQUIP_XILIAN\020\222\003\022\032"
    "\n\025BUY_EQUIP_XILIAN_LOCK\020\223\003\022\026\n\021BUY_EQUIP_"
    "INHERIT\020\224\003\022\025\n\020BUY_EQUIP_SOCKET\020\225\003\022\033\n\026BUY"
    "_EQUIP_STONE_INSERT\020\226\003\022\033\n\026BUY_EQUIP_STON"
    "E_REMOVE\020\227\003\022\030\n\023BUY_EQUIP_STONE_GEM\020\365\003\022\030\n"
    "\023BUY_OPEN_HIRE_PLACE\020\331\004\022%\n BUY_REFRESH_Y"
    "INGLING_HIRING_LIST\020\332\004\022\026\n\021BUY_HIRE_YINGL"
    "ING\020\333\004\022\027\n\022BUY_TRAIN_YINGLING\020\334\004\022$\n\037BUY_I"
    "NSTANCE_WANTED_ALL_RESET_1\020\275\005\022$\n\037BUY_INS"
    "TANCE_WANTED_ALL_RESET_2\020\276\005\022$\n\037BUY_INSTA"
    "NCE_WANTED_ALL_RESET_3\020\277\005\022$\n\037BUY_INSTANC"
    "E_WANTED_ALL_RESET_4\020\300\005\022$\n\037BUY_INSTANCE_"
    "WANTED_ALL_RESET_5\020\301\005\022$\n\037BUY_INSTANCE_WA"
    "NTED_ALL_RESET_6\020\302\005\022$\n\037BUY_INSTANCE_WANT"
    "ED_ALL_RESET_7\020\303\005\022$\n\037BUY_INSTANCE_WANTED"
    "_ALL_RESET_8\020\304\005\022$\n\037BUY_INSTANCE_WANTED_A"
    "LL_RESET_9\020\305\005\022%\n BUY_INSTANCE_WANTED_ALL"
    "_RESET_10\020\306\005\022%\n BUY_INSTANCE_WANTED_ALL_"
    "RESET_11\020\307\005\022%\n BUY_INSTANCE_WANTED_ALL_R"
    "ESET_12\020\310\005\022%\n BUY_INSTANCE_WANTED_ALL_RE"
    "SET_13\020\311\005\022%\n BUY_INSTANCE_WANTED_ALL_RES"
    "ET_14\020\312\005\022%\n BUY_INSTANCE_WANTED_ALL_RESE"
    "T_15\020\313\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET"
    "_16\020\314\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET_"
    "17\020\315\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET_1"
    "8\020\316\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET_19"
    "\020\317\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET_20\020"
    "\320\005\022%\n BUY_INSTANCE_WANTED_ALL_RESET_21\020\241"
    "\006\022%\n BUY_INSTANCE_WANTED_ALL_RESET_22\020\242\006"
    "\022%\n BUY_INSTANCE_WANTED_ALL_RESET_23\020\243\006\022"
    "%\n BUY_INSTANCE_WANTED_ALL_RESET_24\020\244\006\022%"
    "\n BUY_INSTANCE_WANTED_ALL_RESET_25\020\245\006\022%\n"
    " BUY_INSTANCE_WANTED_ALL_RESET_26\020\246\006\022%\n "
    "BUY_INSTANCE_WANTED_ALL_RESET_27\020\247\006\022%\n B"
    "UY_INSTANCE_WANTED_ALL_RESET_28\020\250\006\022%\n BU"
    "Y_INSTANCE_WANTED_ALL_RESET_29\020\251\006\022%\n BUY"
    "_INSTANCE_WANTED_ALL_RESET_30\020\252\006\022%\n BUY_"
    "INSTANCE_WANTED_ALL_RESET_31\020\253\006\022%\n BUY_I"
    "NSTANCE_WANTED_ALL_RESET_32\020\254\006\022%\n BUY_IN"
    "STANCE_WANTED_ALL_RESET_33\020\255\006\022%\n BUY_INS"
    "TANCE_WANTED_ALL_RESET_34\020\256\006\022%\n BUY_INST"
    "ANCE_WANTED_ALL_RESET_35\020\257\006\022%\n BUY_INSTA"
    "NCE_WANTED_ALL_RESET_36\020\260\006\022%\n BUY_INSTAN"
    "CE_WANTED_ALL_RESET_37\020\261\006\022%\n BUY_INSTANC"
    "E_WANTED_ALL_RESET_38\020\262\006\022%\n BUY_INSTANCE"
    "_WANTED_ALL_RESET_39\020\263\006\022%\n BUY_INSTANCE_"
    "WANTED_ALL_RESET_40\020\264\006\022 \n\033BUY_ARENA_CHAL"
    "LENGE_TIMES_1\020\205\007\022 \n\033BUY_ARENA_CHALLENGE_"
    "TIMES_2\020\206\007\022 \n\033BUY_ARENA_CHALLENGE_TIMES_"
    "3\020\207\007\022 \n\033BUY_ARENA_CHALLENGE_TIMES_4\020\210\007\022 "
    "\n\033BUY_ARENA_CHALLENGE_TIMES_5\020\211\007\022 \n\033BUY_"
    "ARENA_CHALLENGE_TIMES_6\020\212\007\022 \n\033BUY_ARENA_"
    "CHALLENGE_TIMES_7\020\213\007\022 \n\033BUY_ARENA_CHALLE"
    "NGE_TIMES_8\020\214\007\022 \n\033BUY_ARENA_CHALLENGE_TI"
    "MES_9\020\215\007\022!\n\034BUY_ARENA_CHALLENGE_TIMES_10"
    "\020\216\007\022!\n\034BUY_ARENA_CHALLENGE_TIMES_11\020\217\007\022!"
    "\n\034BUY_ARENA_CHALLENGE_TIMES_12\020\220\007\022!\n\034BUY"
    "_ARENA_CHALLENGE_TIMES_13\020\221\007\022!\n\034BUY_AREN"
    "A_CHALLENGE_TIMES_14\020\222\007\022!\n\034BUY_ARENA_CHA"
    "LLENGE_TIMES_15\020\223\007\022\031\n\024BUY_ARENA_REFRESH_"
    "CD\020\224\007\022\023\n\016BUY_REFRESH_CD\020\225\007\022\030\n\023BUY_FAST_A"
    "UTO_FIGHT\020\351\007\022\034\n\027BUY_REFRESH_REWARD_TASK\020"
    "\315\010\022\031\n\024BUY_FAST_REWRAD_TASK\020\316\010\022\026\n\021BUY_REW"
    "ARD_TASK_1\020\317\010\022\026\n\021BUY_REWARD_TASK_2\020\320\010\022\026\n"
    "\021BUY_REWARD_TASK_3\020\321\010\022\026\n\021BUY_REWARD_TASK"
    "_4\020\322\010\022\026\n\021BUY_REWARD_TASK_5\020\323\010\022\026\n\021BUY_REW"
    "ARD_TASK_6\020\324\010\022\026\n\021BUY_REWARD_TASK_7\020\325\010\022\026\n"
    "\021BUY_REWARD_TASK_8\020\326\010\022\026\n\021BUY_REWARD_TASK"
    "_9\020\327\010\022\027\n\022BUY_REWARD_TASK_10\020\330\010\022\027\n\022BUY_RE"
    "WARD_TASK_11\020\331\010\022\027\n\022BUY_REWARD_TASK_12\020\332\010"
    "\022\027\n\022BUY_REWARD_TASK_13\020\333\010\022\027\n\022BUY_REWARD_"
    "TASK_14\020\334\010\022\027\n\022BUY_REWARD_TASK_15\020\335\010\022\030\n\023B"
    "UY_YOULI_RESET_MAP\020\261\t\022\023\n\016BUY_YOULI_DICE\020"
    "\262\t\022\020\n\013BUY_YOULI_1\020\263\t\022\020\n\013BUY_YOULI_2\020\264\t\022\020"
    "\n\013BUY_YOULI_3\020\265\t\022\020\n\013BUY_YOULI_4\020\266\t\022\020\n\013BU"
    "Y_YOULI_5\020\267\t\022\020\n\013BUY_YOULI_6\020\270\t\022\020\n\013BUY_YO"
    "ULI_7\020\271\t\022\020\n\013BUY_YOULI_8\020\272\t\022\020\n\013BUY_YOULI_"
    "9\020\273\t\022\021\n\014BUY_YOULI_10\020\274\t\022\023\n\016BUY_SKIP_FIGH"
    "T\020\225\n\022\026\n\021BUY_QUICK_RESPAWN\020\226\n\022\027\n\022BUY_ENCO"
    "URAGE_BUFF\020\227\n\022$\n\037BUY_DIRECT_FINISH_AUTO_"
    "INSTANCE\020\230\n\022\025\n\020BUY_GUILD_DONATE\020\371\n\022\025\n\020BU"
    "Y_CREATE_GUILD\020\372\n\022\032\n\025BUY_GUILD_LEARN_SKI"
    "LL\020\373\n\022\034\n\027BUY_DIRECT_FINISH_QUEST\020\301\014\022\030\n\023B"
    "UY_GEN_DAILY_QUEST\020\302\014\022\024\n\017BUY_LIMIT_COUNT"
    "\020\245\r\022\025\n\020BUY_CLEAR_PVP_CD\020\211\016\022\037\n\032BUY_GUILD_"
    "Boss_Damage_Buff\020\212\016\022 \n\033BUY_GUILD_Boss_De"
    "fence_Weak\020\213\016\022#\n\036BUY_WING_SPIRIT_ENABLE_"
    "LEVEL_4\020\355\016\022$\n\037BUY_WING_SPIRIT_ENABLE_BAG"
    "_SLOT\020\356\016\022\036\n\031BUY_WING_SPIRIT_GENERATOR\020\357\016"
    "*\302\001\n\016ADD_PROPS_TYPE\022\n\n\006BY_BUY\020\001\022\023\n\017BY_TR"
    "EASURE_BOX\020\002\022\021\n\rBY_TASK_BONUS\020\003\022\022\n\016BY_FI"
    "GHT_BONUS\020\004\022\017\n\013BY_USE_GIFT\020\007\022\t\n\005BY_GM\020\010\022"
    "\022\n\016BY_OTHER_BONUS\020\005\022\023\n\017BY_ACT_EXCHANGE\020\n"
    "\022\020\n\014BY_ACT_LUCKY\020\013\022\021\n\rBY_DAILY_GIFT\020\t*B\n"
    "\016SUB_PROPS_TYPE\022\r\n\tUSE_PROPS\020\013\022\016\n\nSELL_P"
    "ROPS\020\014\022\021\n\rDESTROY_PROPS\020\r*\311\001\n\016ADD_MONEY_"
    "TYPE\022\024\n\020ADD_MONEY_BY_PAY\020\001\022\025\n\021ADD_MONEY_"
    "BY_TASK\020\002\022\023\n\017ADD_MONEY_BY_CC\020\003\022\030\n\024ADD_MO"
    "NEY_BY_INSTALL\020\004\022\023\n\017ADD_MONEY_BY_GM\020\005\022\025\n"
    "\021ADD_MONEY_BY_SELL\020\006\022\026\n\022ADD_MONEY_BY_BON"
    "US\020\007\022\027\n\023ADD_MONEY_BY_OTHERS\020\010", 13829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_server.proto", &protobuf_RegisterTypes);
  WebGetOnlineMemberRequest::default_instance_ = new WebGetOnlineMemberRequest();
  WebGetOnlineMemberResponse::default_instance_ = new WebGetOnlineMemberResponse();
  WebGetFightDataRequest::default_instance_ = new WebGetFightDataRequest();
  WebGetFightDataResponse::default_instance_ = new WebGetFightDataResponse();
  FightStatData::default_instance_ = new FightStatData();
  BroadcastData::default_instance_ = new BroadcastData();
  SyncPositionNotify::default_instance_ = new SyncPositionNotify();
  GMSetDaySecondsRequest::default_instance_ = new GMSetDaySecondsRequest();
  GMSetDaySecondsResponse::default_instance_ = new GMSetDaySecondsResponse();
  GMSetPvPLevelRequest::default_instance_ = new GMSetPvPLevelRequest();
  GMSetPvPLevelResponse::default_instance_ = new GMSetPvPLevelResponse();
  GMAddItemRequest::default_instance_ = new GMAddItemRequest();
  GMAddItemResponse::default_instance_ = new GMAddItemResponse();
  GMAddPhyStrengthRequest::default_instance_ = new GMAddPhyStrengthRequest();
  GMAddPhyStrengthResponse::default_instance_ = new GMAddPhyStrengthResponse();
  GMUpdatePositionRequest::default_instance_ = new GMUpdatePositionRequest();
  GMUpdatePositionResponse::default_instance_ = new GMUpdatePositionResponse();
  GMUpdateAttributeRequest::default_instance_ = new GMUpdateAttributeRequest();
  GMUpdateAttributeResponse::default_instance_ = new GMUpdateAttributeResponse();
  GMAddMoneyRequest::default_instance_ = new GMAddMoneyRequest();
  GMAddMoneyResponse::default_instance_ = new GMAddMoneyResponse();
  ChargeMoneyRequest::default_instance_ = new ChargeMoneyRequest();
  ChargeMoneyResponse::default_instance_ = new ChargeMoneyResponse();
  GMAddExpRequest::default_instance_ = new GMAddExpRequest();
  GMAddExpResponse::default_instance_ = new GMAddExpResponse();
  GMAddSkillExpRequest::default_instance_ = new GMAddSkillExpRequest();
  GMAddSkillExpResponse::default_instance_ = new GMAddSkillExpResponse();
  GMSendMailRequest::default_instance_ = new GMSendMailRequest();
  GMSendMailResponse::default_instance_ = new GMSendMailResponse();
  GMQueryRoleQuestsRequest::default_instance_ = new GMQueryRoleQuestsRequest();
  GMQueryRoleQuestsResponse::default_instance_ = new GMQueryRoleQuestsResponse();
  GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance_ = new GMQueryRoleQuestsResponse_RoleQuestStatus();
  GMSetQuestStatusRequest::default_instance_ = new GMSetQuestStatusRequest();
  GMSetQuestStatusResponse::default_instance_ = new GMSetQuestStatusResponse();
  GMAddYinglingLingliRequest::default_instance_ = new GMAddYinglingLingliRequest();
  GMAddYinglingLingliResponse::default_instance_ = new GMAddYinglingLingliResponse();
  GMSetCooldownRequest::default_instance_ = new GMSetCooldownRequest();
  GMSetCooldownResponse::default_instance_ = new GMSetCooldownResponse();
  SendLogNotify::default_instance_ = new SendLogNotify();
  LogPlayerData::default_instance_ = new LogPlayerData();
  LogOptionalParams::default_instance_ = new LogOptionalParams();
  BindPlayerNameGuidRequest::default_instance_ = new BindPlayerNameGuidRequest();
  TrafficStatsRequest::default_instance_ = new TrafficStatsRequest();
  TrafficStats::default_instance_ = new TrafficStats();
  TrafficStatsResponse::default_instance_ = new TrafficStatsResponse();
  GMTalkSystemRequest::default_instance_ = new GMTalkSystemRequest();
  GMTalkSystemResponse::default_instance_ = new GMTalkSystemResponse();
  GMGetPlayerInfoRequest::default_instance_ = new GMGetPlayerInfoRequest();
  GMGetPlayerInfoResponse::default_instance_ = new GMGetPlayerInfoResponse();
  GMSetPlayerVipLevelRequest::default_instance_ = new GMSetPlayerVipLevelRequest();
  GMSetPlayerVipLevelResponse::default_instance_ = new GMSetPlayerVipLevelResponse();
  GMSetFlagRequest::default_instance_ = new GMSetFlagRequest();
  GMSetFlagResponse::default_instance_ = new GMSetFlagResponse();
  USRIdPair::default_instance_ = new USRIdPair();
  GMQueryIdsRequest::default_instance_ = new GMQueryIdsRequest();
  GMQueryIdsResponse::default_instance_ = new GMQueryIdsResponse();
  GMBanPlayerRequest::default_instance_ = new GMBanPlayerRequest();
  GMBanPlayerResponse::default_instance_ = new GMBanPlayerResponse();
  GMQueryRoleByNameRequest::default_instance_ = new GMQueryRoleByNameRequest();
  GMQueryRoleByNameResponse::default_instance_ = new GMQueryRoleByNameResponse();
  GMUpdatePassInstanceRequest::default_instance_ = new GMUpdatePassInstanceRequest();
  GMUpdatePassInstanceResponse::default_instance_ = new GMUpdatePassInstanceResponse();
  GMSetLimitCountRequest::default_instance_ = new GMSetLimitCountRequest();
  GMSetLimitCountResponse::default_instance_ = new GMSetLimitCountResponse();
  GmQueryPlayerFlagsRequest::default_instance_ = new GmQueryPlayerFlagsRequest();
  GmQueryPlayerFlagsResponse::default_instance_ = new GmQueryPlayerFlagsResponse();
  GMSetFightExpFactorRequest::default_instance_ = new GMSetFightExpFactorRequest();
  GMSetFightExpFactorResponse::default_instance_ = new GMSetFightExpFactorResponse();
  GMSetGuildDataRequest::default_instance_ = new GMSetGuildDataRequest();
  GMSetGuildDataResponse::default_instance_ = new GMSetGuildDataResponse();
  GMGetItemListRequest::default_instance_ = new GMGetItemListRequest();
  GMStartGuildCrystalTowerRequest::default_instance_ = new GMStartGuildCrystalTowerRequest();
  GMStartGuildCrystalTowerResponse::default_instance_ = new GMStartGuildCrystalTowerResponse();
  GMGetItemListResponse::default_instance_ = new GMGetItemListResponse();
  GMGetSkillListRequest::default_instance_ = new GMGetSkillListRequest();
  GMGetSkillListResponse::default_instance_ = new GMGetSkillListResponse();
  GMGetTitleListRequest::default_instance_ = new GMGetTitleListRequest();
  GMGetTitleListResponse::default_instance_ = new GMGetTitleListResponse();
  GMSetRoleTitleRequest::default_instance_ = new GMSetRoleTitleRequest();
  GMSetRoleTitleResponse::default_instance_ = new GMSetRoleTitleResponse();
  GMGetTitleInfoRequest::default_instance_ = new GMGetTitleInfoRequest();
  TitleInfo::default_instance_ = new TitleInfo();
  GMGetTitleInfoResponse::default_instance_ = new GMGetTitleInfoResponse();
  WebGetOnlineMemberRequest::default_instance_->InitAsDefaultInstance();
  WebGetOnlineMemberResponse::default_instance_->InitAsDefaultInstance();
  WebGetFightDataRequest::default_instance_->InitAsDefaultInstance();
  WebGetFightDataResponse::default_instance_->InitAsDefaultInstance();
  FightStatData::default_instance_->InitAsDefaultInstance();
  BroadcastData::default_instance_->InitAsDefaultInstance();
  SyncPositionNotify::default_instance_->InitAsDefaultInstance();
  GMSetDaySecondsRequest::default_instance_->InitAsDefaultInstance();
  GMSetDaySecondsResponse::default_instance_->InitAsDefaultInstance();
  GMSetPvPLevelRequest::default_instance_->InitAsDefaultInstance();
  GMSetPvPLevelResponse::default_instance_->InitAsDefaultInstance();
  GMAddItemRequest::default_instance_->InitAsDefaultInstance();
  GMAddItemResponse::default_instance_->InitAsDefaultInstance();
  GMAddPhyStrengthRequest::default_instance_->InitAsDefaultInstance();
  GMAddPhyStrengthResponse::default_instance_->InitAsDefaultInstance();
  GMUpdatePositionRequest::default_instance_->InitAsDefaultInstance();
  GMUpdatePositionResponse::default_instance_->InitAsDefaultInstance();
  GMUpdateAttributeRequest::default_instance_->InitAsDefaultInstance();
  GMUpdateAttributeResponse::default_instance_->InitAsDefaultInstance();
  GMAddMoneyRequest::default_instance_->InitAsDefaultInstance();
  GMAddMoneyResponse::default_instance_->InitAsDefaultInstance();
  ChargeMoneyRequest::default_instance_->InitAsDefaultInstance();
  ChargeMoneyResponse::default_instance_->InitAsDefaultInstance();
  GMAddExpRequest::default_instance_->InitAsDefaultInstance();
  GMAddExpResponse::default_instance_->InitAsDefaultInstance();
  GMAddSkillExpRequest::default_instance_->InitAsDefaultInstance();
  GMAddSkillExpResponse::default_instance_->InitAsDefaultInstance();
  GMSendMailRequest::default_instance_->InitAsDefaultInstance();
  GMSendMailResponse::default_instance_->InitAsDefaultInstance();
  GMQueryRoleQuestsRequest::default_instance_->InitAsDefaultInstance();
  GMQueryRoleQuestsResponse::default_instance_->InitAsDefaultInstance();
  GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance_->InitAsDefaultInstance();
  GMSetQuestStatusRequest::default_instance_->InitAsDefaultInstance();
  GMSetQuestStatusResponse::default_instance_->InitAsDefaultInstance();
  GMAddYinglingLingliRequest::default_instance_->InitAsDefaultInstance();
  GMAddYinglingLingliResponse::default_instance_->InitAsDefaultInstance();
  GMSetCooldownRequest::default_instance_->InitAsDefaultInstance();
  GMSetCooldownResponse::default_instance_->InitAsDefaultInstance();
  SendLogNotify::default_instance_->InitAsDefaultInstance();
  LogPlayerData::default_instance_->InitAsDefaultInstance();
  LogOptionalParams::default_instance_->InitAsDefaultInstance();
  BindPlayerNameGuidRequest::default_instance_->InitAsDefaultInstance();
  TrafficStatsRequest::default_instance_->InitAsDefaultInstance();
  TrafficStats::default_instance_->InitAsDefaultInstance();
  TrafficStatsResponse::default_instance_->InitAsDefaultInstance();
  GMTalkSystemRequest::default_instance_->InitAsDefaultInstance();
  GMTalkSystemResponse::default_instance_->InitAsDefaultInstance();
  GMGetPlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  GMGetPlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  GMSetPlayerVipLevelRequest::default_instance_->InitAsDefaultInstance();
  GMSetPlayerVipLevelResponse::default_instance_->InitAsDefaultInstance();
  GMSetFlagRequest::default_instance_->InitAsDefaultInstance();
  GMSetFlagResponse::default_instance_->InitAsDefaultInstance();
  USRIdPair::default_instance_->InitAsDefaultInstance();
  GMQueryIdsRequest::default_instance_->InitAsDefaultInstance();
  GMQueryIdsResponse::default_instance_->InitAsDefaultInstance();
  GMBanPlayerRequest::default_instance_->InitAsDefaultInstance();
  GMBanPlayerResponse::default_instance_->InitAsDefaultInstance();
  GMQueryRoleByNameRequest::default_instance_->InitAsDefaultInstance();
  GMQueryRoleByNameResponse::default_instance_->InitAsDefaultInstance();
  GMUpdatePassInstanceRequest::default_instance_->InitAsDefaultInstance();
  GMUpdatePassInstanceResponse::default_instance_->InitAsDefaultInstance();
  GMSetLimitCountRequest::default_instance_->InitAsDefaultInstance();
  GMSetLimitCountResponse::default_instance_->InitAsDefaultInstance();
  GmQueryPlayerFlagsRequest::default_instance_->InitAsDefaultInstance();
  GmQueryPlayerFlagsResponse::default_instance_->InitAsDefaultInstance();
  GMSetFightExpFactorRequest::default_instance_->InitAsDefaultInstance();
  GMSetFightExpFactorResponse::default_instance_->InitAsDefaultInstance();
  GMSetGuildDataRequest::default_instance_->InitAsDefaultInstance();
  GMSetGuildDataResponse::default_instance_->InitAsDefaultInstance();
  GMGetItemListRequest::default_instance_->InitAsDefaultInstance();
  GMStartGuildCrystalTowerRequest::default_instance_->InitAsDefaultInstance();
  GMStartGuildCrystalTowerResponse::default_instance_->InitAsDefaultInstance();
  GMGetItemListResponse::default_instance_->InitAsDefaultInstance();
  GMGetSkillListRequest::default_instance_->InitAsDefaultInstance();
  GMGetSkillListResponse::default_instance_->InitAsDefaultInstance();
  GMGetTitleListRequest::default_instance_->InitAsDefaultInstance();
  GMGetTitleListResponse::default_instance_->InitAsDefaultInstance();
  GMSetRoleTitleRequest::default_instance_->InitAsDefaultInstance();
  GMSetRoleTitleResponse::default_instance_->InitAsDefaultInstance();
  GMGetTitleInfoRequest::default_instance_->InitAsDefaultInstance();
  TitleInfo::default_instance_->InitAsDefaultInstance();
  GMGetTitleInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fserver_2eproto {
  StaticDescriptorInitializer_game_5fserver_2eproto() {
    protobuf_AddDesc_game_5fserver_2eproto();
  }
} static_descriptor_initializer_game_5fserver_2eproto_;

const ::google::protobuf::EnumDescriptor* ServerMessageAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessageAction_descriptor_;
}
bool ServerMessageAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOG_SRC_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOG_SRC_TYPE_descriptor_;
}
bool LOG_SRC_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRANSACTION_CHANNEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRANSACTION_CHANNEL_descriptor_;
}
bool TRANSACTION_CHANNEL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LOG_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOG_ACTION_TYPE_descriptor_;
}
bool LOG_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PAY_MAIN_CATALOG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAY_MAIN_CATALOG_descriptor_;
}
bool PAY_MAIN_CATALOG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUY_TYPE_descriptor_;
}
bool BUY_TYPE_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 301:
    case 302:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 501:
    case 601:
    case 602:
    case 603:
    case 604:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 914:
    case 915:
    case 916:
    case 917:
    case 1001:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1401:
    case 1402:
    case 1403:
    case 1601:
    case 1602:
    case 1701:
    case 1801:
    case 1802:
    case 1803:
    case 1901:
    case 1902:
    case 1903:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ADD_PROPS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADD_PROPS_TYPE_descriptor_;
}
bool ADD_PROPS_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SUB_PROPS_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUB_PROPS_TYPE_descriptor_;
}
bool SUB_PROPS_TYPE_IsValid(int value) {
  switch(value) {
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ADD_MONEY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADD_MONEY_TYPE_descriptor_;
}
bool ADD_MONEY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WebGetOnlineMemberRequest::WebGetOnlineMemberRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetOnlineMemberRequest::InitAsDefaultInstance() {
}

WebGetOnlineMemberRequest::WebGetOnlineMemberRequest(const WebGetOnlineMemberRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetOnlineMemberRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetOnlineMemberRequest::~WebGetOnlineMemberRequest() {
  SharedDtor();
}

void WebGetOnlineMemberRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebGetOnlineMemberRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetOnlineMemberRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetOnlineMemberRequest_descriptor_;
}

const WebGetOnlineMemberRequest& WebGetOnlineMemberRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

WebGetOnlineMemberRequest* WebGetOnlineMemberRequest::default_instance_ = NULL;

WebGetOnlineMemberRequest* WebGetOnlineMemberRequest::New() const {
  return new WebGetOnlineMemberRequest;
}

void WebGetOnlineMemberRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetOnlineMemberRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WebGetOnlineMemberRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetOnlineMemberRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetOnlineMemberRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetOnlineMemberRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetOnlineMemberRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetOnlineMemberRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetOnlineMemberRequest::MergeFrom(const WebGetOnlineMemberRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetOnlineMemberRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetOnlineMemberRequest::CopyFrom(const WebGetOnlineMemberRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetOnlineMemberRequest::IsInitialized() const {
  
  return true;
}

void WebGetOnlineMemberRequest::Swap(WebGetOnlineMemberRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetOnlineMemberRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetOnlineMemberRequest_descriptor_;
  metadata.reflection = WebGetOnlineMemberRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebGetOnlineMemberResponse::kErrorCodeFieldNumber;
const int WebGetOnlineMemberResponse::kOnlineMemberFieldNumber;
#endif  // !_MSC_VER

WebGetOnlineMemberResponse::WebGetOnlineMemberResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetOnlineMemberResponse::InitAsDefaultInstance() {
}

WebGetOnlineMemberResponse::WebGetOnlineMemberResponse(const WebGetOnlineMemberResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetOnlineMemberResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  online_member_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetOnlineMemberResponse::~WebGetOnlineMemberResponse() {
  SharedDtor();
}

void WebGetOnlineMemberResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebGetOnlineMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetOnlineMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetOnlineMemberResponse_descriptor_;
}

const WebGetOnlineMemberResponse& WebGetOnlineMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

WebGetOnlineMemberResponse* WebGetOnlineMemberResponse::default_instance_ = NULL;

WebGetOnlineMemberResponse* WebGetOnlineMemberResponse::New() const {
  return new WebGetOnlineMemberResponse;
}

void WebGetOnlineMemberResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    online_member_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetOnlineMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online_member;
        break;
      }
      
      // required int32 online_member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_member_)));
          set_has_online_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetOnlineMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int32 online_member = 2;
  if (has_online_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online_member(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetOnlineMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int32 online_member = 2;
  if (has_online_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online_member(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetOnlineMemberResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int32 online_member = 2;
    if (has_online_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_member());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetOnlineMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetOnlineMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetOnlineMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetOnlineMemberResponse::MergeFrom(const WebGetOnlineMemberResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_online_member()) {
      set_online_member(from.online_member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetOnlineMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetOnlineMemberResponse::CopyFrom(const WebGetOnlineMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetOnlineMemberResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WebGetOnlineMemberResponse::Swap(WebGetOnlineMemberResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(online_member_, other->online_member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetOnlineMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetOnlineMemberResponse_descriptor_;
  metadata.reflection = WebGetOnlineMemberResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebGetFightDataRequest::kFightKeyFieldNumber;
#endif  // !_MSC_VER

WebGetFightDataRequest::WebGetFightDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetFightDataRequest::InitAsDefaultInstance() {
}

WebGetFightDataRequest::WebGetFightDataRequest(const WebGetFightDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetFightDataRequest::SharedCtor() {
  _cached_size_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetFightDataRequest::~WebGetFightDataRequest() {
  SharedDtor();
}

void WebGetFightDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebGetFightDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetFightDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetFightDataRequest_descriptor_;
}

const WebGetFightDataRequest& WebGetFightDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

WebGetFightDataRequest* WebGetFightDataRequest::default_instance_ = NULL;

WebGetFightDataRequest* WebGetFightDataRequest::New() const {
  return new WebGetFightDataRequest;
}

void WebGetFightDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_key_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetFightDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 fight_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetFightDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fight_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetFightDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 fight_key = 1;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fight_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetFightDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 fight_key = 1;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetFightDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetFightDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetFightDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetFightDataRequest::MergeFrom(const WebGetFightDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetFightDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetFightDataRequest::CopyFrom(const WebGetFightDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetFightDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WebGetFightDataRequest::Swap(WebGetFightDataRequest* other) {
  if (other != this) {
    std::swap(fight_key_, other->fight_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetFightDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetFightDataRequest_descriptor_;
  metadata.reflection = WebGetFightDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebGetFightDataResponse::kErrorCodeFieldNumber;
const int WebGetFightDataResponse::kFightKeyFieldNumber;
const int WebGetFightDataResponse::kFightDataFieldNumber;
#endif  // !_MSC_VER

WebGetFightDataResponse::WebGetFightDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebGetFightDataResponse::InitAsDefaultInstance() {
}

WebGetFightDataResponse::WebGetFightDataResponse(const WebGetFightDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebGetFightDataResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  fight_key_ = GOOGLE_LONGLONG(0);
  fight_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebGetFightDataResponse::~WebGetFightDataResponse() {
  SharedDtor();
}

void WebGetFightDataResponse::SharedDtor() {
  if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
    delete fight_data_;
  }
  if (this != default_instance_) {
  }
}

void WebGetFightDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebGetFightDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebGetFightDataResponse_descriptor_;
}

const WebGetFightDataResponse& WebGetFightDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

WebGetFightDataResponse* WebGetFightDataResponse::default_instance_ = NULL;

WebGetFightDataResponse* WebGetFightDataResponse::New() const {
  return new WebGetFightDataResponse;
}

void WebGetFightDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    fight_key_ = GOOGLE_LONGLONG(0);
    if (has_fight_data()) {
      if (fight_data_ != &::google::protobuf::internal::kEmptyString) {
        fight_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebGetFightDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_key;
        break;
      }
      
      // optional int64 fight_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_key_)));
          set_has_fight_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight_data;
        break;
      }
      
      // optional string fight_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fight_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fight_data().data(), this->fight_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebGetFightDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int64 fight_key = 2;
  if (has_fight_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fight_key(), output);
  }
  
  // optional string fight_data = 3;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fight_data().data(), this->fight_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fight_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebGetFightDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int64 fight_key = 2;
  if (has_fight_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fight_key(), target);
  }
  
  // optional string fight_data = 3;
  if (has_fight_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fight_data().data(), this->fight_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fight_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebGetFightDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int64 fight_key = 2;
    if (has_fight_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_key());
    }
    
    // optional string fight_data = 3;
    if (has_fight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fight_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebGetFightDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebGetFightDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebGetFightDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebGetFightDataResponse::MergeFrom(const WebGetFightDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_fight_key()) {
      set_fight_key(from.fight_key());
    }
    if (from.has_fight_data()) {
      set_fight_data(from.fight_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebGetFightDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebGetFightDataResponse::CopyFrom(const WebGetFightDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebGetFightDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WebGetFightDataResponse::Swap(WebGetFightDataResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(fight_key_, other->fight_key_);
    std::swap(fight_data_, other->fight_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebGetFightDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebGetFightDataResponse_descriptor_;
  metadata.reflection = WebGetFightDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightStatData::kSeqNoFieldNumber;
const int FightStatData::kPlayerInfoFieldNumber;
const int FightStatData::kEquipStrengthInfoFieldNumber;
const int FightStatData::kIsInTeamFieldNumber;
const int FightStatData::kInstanceIdFieldNumber;
const int FightStatData::kInstanceGradeFieldNumber;
const int FightStatData::kBattleGroupIdFieldNumber;
const int FightStatData::kFightResultFieldNumber;
const int FightStatData::kDeadPersonsFieldNumber;
const int FightStatData::kEquipedSkillInfoFieldNumber;
const int FightStatData::kBattleSkillInfoFieldNumber;
#endif  // !_MSC_VER

FightStatData::FightStatData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightStatData::InitAsDefaultInstance() {
  player_info_ = const_cast< ::protocols::statistics::PlayerStatBaseInfo*>(&::protocols::statistics::PlayerStatBaseInfo::default_instance());
  equip_strength_info_ = const_cast< ::protocols::statistics::EquipStrengthInfo*>(&::protocols::statistics::EquipStrengthInfo::default_instance());
}

FightStatData::FightStatData(const FightStatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightStatData::SharedCtor() {
  _cached_size_ = 0;
  seq_no_ = 0;
  player_info_ = NULL;
  equip_strength_info_ = NULL;
  is_in_team_ = 0;
  instance_id_ = 0;
  instance_grade_ = 0;
  battle_group_id_ = 0;
  fight_result_ = 0;
  dead_persons_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightStatData::~FightStatData() {
  SharedDtor();
}

void FightStatData::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
    delete equip_strength_info_;
  }
}

void FightStatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightStatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightStatData_descriptor_;
}

const FightStatData& FightStatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

FightStatData* FightStatData::default_instance_ = NULL;

FightStatData* FightStatData::New() const {
  return new FightStatData;
}

void FightStatData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_no_ = 0;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::statistics::PlayerStatBaseInfo::Clear();
    }
    if (has_equip_strength_info()) {
      if (equip_strength_info_ != NULL) equip_strength_info_->::protocols::statistics::EquipStrengthInfo::Clear();
    }
    is_in_team_ = 0;
    instance_id_ = 0;
    instance_grade_ = 0;
    battle_group_id_ = 0;
    fight_result_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dead_persons_ = 0;
  }
  equiped_skill_info_.Clear();
  battle_skill_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightStatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }
      
      // required .protocols.statistics.PlayerStatBaseInfo player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_strength_info;
        break;
      }
      
      // optional .protocols.statistics.EquipStrengthInfo equip_strength_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_strength_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_strength_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_in_team;
        break;
      }
      
      // optional int32 is_in_team = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_in_team_)));
          set_has_is_in_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_instance_id;
        break;
      }
      
      // optional int32 instance_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_instance_grade;
        break;
      }
      
      // optional int32 instance_grade = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_grade_)));
          set_has_instance_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battle_group_id;
        break;
      }
      
      // optional int32 battle_group_id = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight_result;
        break;
      }
      
      // optional int32 fight_result = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_result_)));
          set_has_fight_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dead_persons;
        break;
      }
      
      // optional int32 dead_persons = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_persons_)));
          set_has_dead_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equiped_skill_info;
        break;
      }
      
      // repeated .protocols.common.SkillInfo equiped_skill_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equiped_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiped_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_equiped_skill_info;
        if (input->ExpectTag(90)) goto parse_battle_skill_info;
        break;
      }
      
      // repeated .protocols.common.BattleSkillInfo battle_skill_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_battle_skill_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightStatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq_no(), output);
  }
  
  // required .protocols.statistics.PlayerStatBaseInfo player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }
  
  // optional .protocols.statistics.EquipStrengthInfo equip_strength_info = 3;
  if (has_equip_strength_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_strength_info(), output);
  }
  
  // optional int32 is_in_team = 4 [default = 0];
  if (has_is_in_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_in_team(), output);
  }
  
  // optional int32 instance_id = 5 [default = 0];
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->instance_id(), output);
  }
  
  // optional int32 instance_grade = 6 [default = 0];
  if (has_instance_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->instance_grade(), output);
  }
  
  // optional int32 battle_group_id = 7 [default = 0];
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battle_group_id(), output);
  }
  
  // optional int32 fight_result = 8 [default = 0];
  if (has_fight_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fight_result(), output);
  }
  
  // optional int32 dead_persons = 9 [default = 0];
  if (has_dead_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dead_persons(), output);
  }
  
  // repeated .protocols.common.SkillInfo equiped_skill_info = 10;
  for (int i = 0; i < this->equiped_skill_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equiped_skill_info(i), output);
  }
  
  // repeated .protocols.common.BattleSkillInfo battle_skill_info = 11;
  for (int i = 0; i < this->battle_skill_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->battle_skill_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightStatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq_no(), target);
  }
  
  // required .protocols.statistics.PlayerStatBaseInfo player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }
  
  // optional .protocols.statistics.EquipStrengthInfo equip_strength_info = 3;
  if (has_equip_strength_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_strength_info(), target);
  }
  
  // optional int32 is_in_team = 4 [default = 0];
  if (has_is_in_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_in_team(), target);
  }
  
  // optional int32 instance_id = 5 [default = 0];
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->instance_id(), target);
  }
  
  // optional int32 instance_grade = 6 [default = 0];
  if (has_instance_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->instance_grade(), target);
  }
  
  // optional int32 battle_group_id = 7 [default = 0];
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battle_group_id(), target);
  }
  
  // optional int32 fight_result = 8 [default = 0];
  if (has_fight_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fight_result(), target);
  }
  
  // optional int32 dead_persons = 9 [default = 0];
  if (has_dead_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dead_persons(), target);
  }
  
  // repeated .protocols.common.SkillInfo equiped_skill_info = 10;
  for (int i = 0; i < this->equiped_skill_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equiped_skill_info(i), target);
  }
  
  // repeated .protocols.common.BattleSkillInfo battle_skill_info = 11;
  for (int i = 0; i < this->battle_skill_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->battle_skill_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightStatData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq_no = 1;
    if (has_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_no());
    }
    
    // required .protocols.statistics.PlayerStatBaseInfo player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional .protocols.statistics.EquipStrengthInfo equip_strength_info = 3;
    if (has_equip_strength_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_strength_info());
    }
    
    // optional int32 is_in_team = 4 [default = 0];
    if (has_is_in_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_in_team());
    }
    
    // optional int32 instance_id = 5 [default = 0];
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 instance_grade = 6 [default = 0];
    if (has_instance_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_grade());
    }
    
    // optional int32 battle_group_id = 7 [default = 0];
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }
    
    // optional int32 fight_result = 8 [default = 0];
    if (has_fight_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_result());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 dead_persons = 9 [default = 0];
    if (has_dead_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_persons());
    }
    
  }
  // repeated .protocols.common.SkillInfo equiped_skill_info = 10;
  total_size += 1 * this->equiped_skill_info_size();
  for (int i = 0; i < this->equiped_skill_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiped_skill_info(i));
  }
  
  // repeated .protocols.common.BattleSkillInfo battle_skill_info = 11;
  total_size += 1 * this->battle_skill_info_size();
  for (int i = 0; i < this->battle_skill_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_skill_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightStatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightStatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightStatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightStatData::MergeFrom(const FightStatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiped_skill_info_.MergeFrom(from.equiped_skill_info_);
  battle_skill_info_.MergeFrom(from.battle_skill_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::statistics::PlayerStatBaseInfo::MergeFrom(from.player_info());
    }
    if (from.has_equip_strength_info()) {
      mutable_equip_strength_info()->::protocols::statistics::EquipStrengthInfo::MergeFrom(from.equip_strength_info());
    }
    if (from.has_is_in_team()) {
      set_is_in_team(from.is_in_team());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_instance_grade()) {
      set_instance_grade(from.instance_grade());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
    if (from.has_fight_result()) {
      set_fight_result(from.fight_result());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dead_persons()) {
      set_dead_persons(from.dead_persons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightStatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightStatData::CopyFrom(const FightStatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightStatData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < equiped_skill_info_size(); i++) {
    if (!this->equiped_skill_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < battle_skill_info_size(); i++) {
    if (!this->battle_skill_info(i).IsInitialized()) return false;
  }
  return true;
}

void FightStatData::Swap(FightStatData* other) {
  if (other != this) {
    std::swap(seq_no_, other->seq_no_);
    std::swap(player_info_, other->player_info_);
    std::swap(equip_strength_info_, other->equip_strength_info_);
    std::swap(is_in_team_, other->is_in_team_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(instance_grade_, other->instance_grade_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(fight_result_, other->fight_result_);
    std::swap(dead_persons_, other->dead_persons_);
    equiped_skill_info_.Swap(&other->equiped_skill_info_);
    battle_skill_info_.Swap(&other->battle_skill_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightStatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightStatData_descriptor_;
  metadata.reflection = FightStatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastData::kUidsFieldNumber;
const int BroadcastData::kDataFieldNumber;
const int BroadcastData::kAllFlagFieldNumber;
#endif  // !_MSC_VER

BroadcastData::BroadcastData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastData::InitAsDefaultInstance() {
}

BroadcastData::BroadcastData(const BroadcastData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastData::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  all_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastData::~BroadcastData() {
  SharedDtor();
}

void BroadcastData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastData_descriptor_;
}

const BroadcastData& BroadcastData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

BroadcastData* BroadcastData::default_instance_ = NULL;

BroadcastData* BroadcastData::New() const {
  return new BroadcastData;
}

void BroadcastData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    all_flag_ = false;
  }
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 uids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uids;
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_all_flag;
        break;
      }
      
      // optional bool all_flag = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_flag_)));
          set_has_all_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->uids(i), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // optional bool all_flag = 3 [default = false];
  if (has_all_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->all_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 uids = 1;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->uids(i), target);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // optional bool all_flag = 3 [default = false];
  if (has_all_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->all_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional bool all_flag = 3 [default = false];
    if (has_all_flag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 uids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastData::MergeFrom(const BroadcastData& from) {
  GOOGLE_CHECK_NE(&from, this);
  uids_.MergeFrom(from.uids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_all_flag()) {
      set_all_flag(from.all_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastData::CopyFrom(const BroadcastData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void BroadcastData::Swap(BroadcastData* other) {
  if (other != this) {
    uids_.Swap(&other->uids_);
    std::swap(data_, other->data_);
    std::swap(all_flag_, other->all_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastData_descriptor_;
  metadata.reflection = BroadcastData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPositionNotify::kMapIdFieldNumber;
const int SyncPositionNotify::kMapXFieldNumber;
const int SyncPositionNotify::kMapYFieldNumber;
#endif  // !_MSC_VER

SyncPositionNotify::SyncPositionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPositionNotify::InitAsDefaultInstance() {
}

SyncPositionNotify::SyncPositionNotify(const SyncPositionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPositionNotify::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPositionNotify::~SyncPositionNotify() {
  SharedDtor();
}

void SyncPositionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncPositionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPositionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPositionNotify_descriptor_;
}

const SyncPositionNotify& SyncPositionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

SyncPositionNotify* SyncPositionNotify::default_instance_ = NULL;

SyncPositionNotify* SyncPositionNotify::New() const {
  return new SyncPositionNotify;
}

void SyncPositionNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncPositionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_x;
        break;
      }
      
      // required int32 map_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_y;
        break;
      }
      
      // required int32 map_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncPositionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // required int32 map_x = 2;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_x(), output);
  }
  
  // required int32 map_y = 3;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPositionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // required int32 map_x = 2;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_x(), target);
  }
  
  // required int32 map_y = 3;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPositionNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // required int32 map_x = 2;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // required int32 map_y = 3;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPositionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPositionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPositionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncPositionNotify::MergeFrom(const SyncPositionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncPositionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPositionNotify::CopyFrom(const SyncPositionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPositionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SyncPositionNotify::Swap(SyncPositionNotify* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncPositionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPositionNotify_descriptor_;
  metadata.reflection = SyncPositionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetDaySecondsRequest::kSecondsFieldNumber;
#endif  // !_MSC_VER

GMSetDaySecondsRequest::GMSetDaySecondsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetDaySecondsRequest::InitAsDefaultInstance() {
}

GMSetDaySecondsRequest::GMSetDaySecondsRequest(const GMSetDaySecondsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetDaySecondsRequest::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetDaySecondsRequest::~GMSetDaySecondsRequest() {
  SharedDtor();
}

void GMSetDaySecondsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetDaySecondsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetDaySecondsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetDaySecondsRequest_descriptor_;
}

const GMSetDaySecondsRequest& GMSetDaySecondsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetDaySecondsRequest* GMSetDaySecondsRequest::default_instance_ = NULL;

GMSetDaySecondsRequest* GMSetDaySecondsRequest::New() const {
  return new GMSetDaySecondsRequest;
}

void GMSetDaySecondsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetDaySecondsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetDaySecondsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetDaySecondsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetDaySecondsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetDaySecondsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetDaySecondsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetDaySecondsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetDaySecondsRequest::MergeFrom(const GMSetDaySecondsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetDaySecondsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetDaySecondsRequest::CopyFrom(const GMSetDaySecondsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetDaySecondsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetDaySecondsRequest::Swap(GMSetDaySecondsRequest* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetDaySecondsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetDaySecondsRequest_descriptor_;
  metadata.reflection = GMSetDaySecondsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetDaySecondsResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetDaySecondsResponse::GMSetDaySecondsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetDaySecondsResponse::InitAsDefaultInstance() {
}

GMSetDaySecondsResponse::GMSetDaySecondsResponse(const GMSetDaySecondsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetDaySecondsResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetDaySecondsResponse::~GMSetDaySecondsResponse() {
  SharedDtor();
}

void GMSetDaySecondsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetDaySecondsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetDaySecondsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetDaySecondsResponse_descriptor_;
}

const GMSetDaySecondsResponse& GMSetDaySecondsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetDaySecondsResponse* GMSetDaySecondsResponse::default_instance_ = NULL;

GMSetDaySecondsResponse* GMSetDaySecondsResponse::New() const {
  return new GMSetDaySecondsResponse;
}

void GMSetDaySecondsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetDaySecondsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetDaySecondsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetDaySecondsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetDaySecondsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetDaySecondsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetDaySecondsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetDaySecondsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetDaySecondsResponse::MergeFrom(const GMSetDaySecondsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetDaySecondsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetDaySecondsResponse::CopyFrom(const GMSetDaySecondsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetDaySecondsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetDaySecondsResponse::Swap(GMSetDaySecondsResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetDaySecondsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetDaySecondsResponse_descriptor_;
  metadata.reflection = GMSetDaySecondsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetPvPLevelRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

GMSetPvPLevelRequest::GMSetPvPLevelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetPvPLevelRequest::InitAsDefaultInstance() {
}

GMSetPvPLevelRequest::GMSetPvPLevelRequest(const GMSetPvPLevelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetPvPLevelRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetPvPLevelRequest::~GMSetPvPLevelRequest() {
  SharedDtor();
}

void GMSetPvPLevelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetPvPLevelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetPvPLevelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetPvPLevelRequest_descriptor_;
}

const GMSetPvPLevelRequest& GMSetPvPLevelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetPvPLevelRequest* GMSetPvPLevelRequest::default_instance_ = NULL;

GMSetPvPLevelRequest* GMSetPvPLevelRequest::New() const {
  return new GMSetPvPLevelRequest;
}

void GMSetPvPLevelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetPvPLevelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetPvPLevelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetPvPLevelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetPvPLevelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetPvPLevelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetPvPLevelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetPvPLevelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetPvPLevelRequest::MergeFrom(const GMSetPvPLevelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetPvPLevelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetPvPLevelRequest::CopyFrom(const GMSetPvPLevelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetPvPLevelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetPvPLevelRequest::Swap(GMSetPvPLevelRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetPvPLevelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetPvPLevelRequest_descriptor_;
  metadata.reflection = GMSetPvPLevelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetPvPLevelResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetPvPLevelResponse::GMSetPvPLevelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetPvPLevelResponse::InitAsDefaultInstance() {
}

GMSetPvPLevelResponse::GMSetPvPLevelResponse(const GMSetPvPLevelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetPvPLevelResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetPvPLevelResponse::~GMSetPvPLevelResponse() {
  SharedDtor();
}

void GMSetPvPLevelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetPvPLevelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetPvPLevelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetPvPLevelResponse_descriptor_;
}

const GMSetPvPLevelResponse& GMSetPvPLevelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetPvPLevelResponse* GMSetPvPLevelResponse::default_instance_ = NULL;

GMSetPvPLevelResponse* GMSetPvPLevelResponse::New() const {
  return new GMSetPvPLevelResponse;
}

void GMSetPvPLevelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetPvPLevelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetPvPLevelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetPvPLevelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetPvPLevelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetPvPLevelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetPvPLevelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetPvPLevelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetPvPLevelResponse::MergeFrom(const GMSetPvPLevelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetPvPLevelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetPvPLevelResponse::CopyFrom(const GMSetPvPLevelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetPvPLevelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetPvPLevelResponse::Swap(GMSetPvPLevelResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetPvPLevelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetPvPLevelResponse_descriptor_;
  metadata.reflection = GMSetPvPLevelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddItemRequest::kTidFieldNumber;
const int GMAddItemRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GMAddItemRequest::GMAddItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddItemRequest::InitAsDefaultInstance() {
}

GMAddItemRequest::GMAddItemRequest(const GMAddItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddItemRequest::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddItemRequest::~GMAddItemRequest() {
  SharedDtor();
}

void GMAddItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddItemRequest_descriptor_;
}

const GMAddItemRequest& GMAddItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddItemRequest* GMAddItemRequest::default_instance_ = NULL;

GMAddItemRequest* GMAddItemRequest::New() const {
  return new GMAddItemRequest;
}

void GMAddItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddItemRequest::MergeFrom(const GMAddItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddItemRequest::CopyFrom(const GMAddItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMAddItemRequest::Swap(GMAddItemRequest* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddItemRequest_descriptor_;
  metadata.reflection = GMAddItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddItemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddItemResponse::GMAddItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddItemResponse::InitAsDefaultInstance() {
}

GMAddItemResponse::GMAddItemResponse(const GMAddItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddItemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddItemResponse::~GMAddItemResponse() {
  SharedDtor();
}

void GMAddItemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddItemResponse_descriptor_;
}

const GMAddItemResponse& GMAddItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddItemResponse* GMAddItemResponse::default_instance_ = NULL;

GMAddItemResponse* GMAddItemResponse::New() const {
  return new GMAddItemResponse;
}

void GMAddItemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddItemResponse::MergeFrom(const GMAddItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddItemResponse::CopyFrom(const GMAddItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddItemResponse::Swap(GMAddItemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddItemResponse_descriptor_;
  metadata.reflection = GMAddItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddPhyStrengthRequest::kTypeFieldNumber;
const int GMAddPhyStrengthRequest::kPhyStrFieldNumber;
#endif  // !_MSC_VER

GMAddPhyStrengthRequest::GMAddPhyStrengthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddPhyStrengthRequest::InitAsDefaultInstance() {
}

GMAddPhyStrengthRequest::GMAddPhyStrengthRequest(const GMAddPhyStrengthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddPhyStrengthRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  phy_str_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddPhyStrengthRequest::~GMAddPhyStrengthRequest() {
  SharedDtor();
}

void GMAddPhyStrengthRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddPhyStrengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddPhyStrengthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddPhyStrengthRequest_descriptor_;
}

const GMAddPhyStrengthRequest& GMAddPhyStrengthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddPhyStrengthRequest* GMAddPhyStrengthRequest::default_instance_ = NULL;

GMAddPhyStrengthRequest* GMAddPhyStrengthRequest::New() const {
  return new GMAddPhyStrengthRequest;
}

void GMAddPhyStrengthRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    phy_str_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddPhyStrengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phy_str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_str_)));
          set_has_phy_str();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddPhyStrengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phy_str = 1;
  if (has_phy_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phy_str(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddPhyStrengthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phy_str = 1;
  if (has_phy_str()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phy_str(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddPhyStrengthRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 phy_str = 1;
    if (has_phy_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_str());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddPhyStrengthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddPhyStrengthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddPhyStrengthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddPhyStrengthRequest::MergeFrom(const GMAddPhyStrengthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_phy_str()) {
      set_phy_str(from.phy_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddPhyStrengthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddPhyStrengthRequest::CopyFrom(const GMAddPhyStrengthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddPhyStrengthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMAddPhyStrengthRequest::Swap(GMAddPhyStrengthRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(phy_str_, other->phy_str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddPhyStrengthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddPhyStrengthRequest_descriptor_;
  metadata.reflection = GMAddPhyStrengthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddPhyStrengthResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddPhyStrengthResponse::GMAddPhyStrengthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddPhyStrengthResponse::InitAsDefaultInstance() {
}

GMAddPhyStrengthResponse::GMAddPhyStrengthResponse(const GMAddPhyStrengthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddPhyStrengthResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddPhyStrengthResponse::~GMAddPhyStrengthResponse() {
  SharedDtor();
}

void GMAddPhyStrengthResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddPhyStrengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddPhyStrengthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddPhyStrengthResponse_descriptor_;
}

const GMAddPhyStrengthResponse& GMAddPhyStrengthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddPhyStrengthResponse* GMAddPhyStrengthResponse::default_instance_ = NULL;

GMAddPhyStrengthResponse* GMAddPhyStrengthResponse::New() const {
  return new GMAddPhyStrengthResponse;
}

void GMAddPhyStrengthResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddPhyStrengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddPhyStrengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddPhyStrengthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddPhyStrengthResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddPhyStrengthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddPhyStrengthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddPhyStrengthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddPhyStrengthResponse::MergeFrom(const GMAddPhyStrengthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddPhyStrengthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddPhyStrengthResponse::CopyFrom(const GMAddPhyStrengthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddPhyStrengthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddPhyStrengthResponse::Swap(GMAddPhyStrengthResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddPhyStrengthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddPhyStrengthResponse_descriptor_;
  metadata.reflection = GMAddPhyStrengthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdatePositionRequest::kMapIdFieldNumber;
const int GMUpdatePositionRequest::kMapXFieldNumber;
const int GMUpdatePositionRequest::kMapYFieldNumber;
#endif  // !_MSC_VER

GMUpdatePositionRequest::GMUpdatePositionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdatePositionRequest::InitAsDefaultInstance() {
}

GMUpdatePositionRequest::GMUpdatePositionRequest(const GMUpdatePositionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdatePositionRequest::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdatePositionRequest::~GMUpdatePositionRequest() {
  SharedDtor();
}

void GMUpdatePositionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdatePositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdatePositionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdatePositionRequest_descriptor_;
}

const GMUpdatePositionRequest& GMUpdatePositionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdatePositionRequest* GMUpdatePositionRequest::default_instance_ = NULL;

GMUpdatePositionRequest* GMUpdatePositionRequest::New() const {
  return new GMUpdatePositionRequest;
}

void GMUpdatePositionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdatePositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdatePositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // optional int32 map_x = 2;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_x(), output);
  }
  
  // optional int32 map_y = 3;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdatePositionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // optional int32 map_x = 2;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_x(), target);
  }
  
  // optional int32 map_y = 3;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdatePositionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 2;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 3;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdatePositionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdatePositionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdatePositionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdatePositionRequest::MergeFrom(const GMUpdatePositionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdatePositionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdatePositionRequest::CopyFrom(const GMUpdatePositionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdatePositionRequest::IsInitialized() const {
  
  return true;
}

void GMUpdatePositionRequest::Swap(GMUpdatePositionRequest* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdatePositionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdatePositionRequest_descriptor_;
  metadata.reflection = GMUpdatePositionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdatePositionResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMUpdatePositionResponse::GMUpdatePositionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdatePositionResponse::InitAsDefaultInstance() {
}

GMUpdatePositionResponse::GMUpdatePositionResponse(const GMUpdatePositionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdatePositionResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdatePositionResponse::~GMUpdatePositionResponse() {
  SharedDtor();
}

void GMUpdatePositionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdatePositionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdatePositionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdatePositionResponse_descriptor_;
}

const GMUpdatePositionResponse& GMUpdatePositionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdatePositionResponse* GMUpdatePositionResponse::default_instance_ = NULL;

GMUpdatePositionResponse* GMUpdatePositionResponse::New() const {
  return new GMUpdatePositionResponse;
}

void GMUpdatePositionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdatePositionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdatePositionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdatePositionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdatePositionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdatePositionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdatePositionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdatePositionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdatePositionResponse::MergeFrom(const GMUpdatePositionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdatePositionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdatePositionResponse::CopyFrom(const GMUpdatePositionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdatePositionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMUpdatePositionResponse::Swap(GMUpdatePositionResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdatePositionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdatePositionResponse_descriptor_;
  metadata.reflection = GMUpdatePositionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdateAttributeRequest::kAttrTypeFieldNumber;
const int GMUpdateAttributeRequest::kAttrValueFieldNumber;
const int GMUpdateAttributeRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

GMUpdateAttributeRequest::GMUpdateAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdateAttributeRequest::InitAsDefaultInstance() {
}

GMUpdateAttributeRequest::GMUpdateAttributeRequest(const GMUpdateAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdateAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  attr_type_ = 0;
  attr_value_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdateAttributeRequest::~GMUpdateAttributeRequest() {
  SharedDtor();
}

void GMUpdateAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdateAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdateAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdateAttributeRequest_descriptor_;
}

const GMUpdateAttributeRequest& GMUpdateAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdateAttributeRequest* GMUpdateAttributeRequest::default_instance_ = NULL;

GMUpdateAttributeRequest* GMUpdateAttributeRequest::New() const {
  return new GMUpdateAttributeRequest;
}

void GMUpdateAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attr_type_ = 0;
    attr_value_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdateAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attr_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_type_)));
          set_has_attr_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attr_value;
        break;
      }
      
      // optional int32 attr_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attr_value_)));
          set_has_attr_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdateAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attr_type(), output);
  }
  
  // optional int32 attr_value = 2;
  if (has_attr_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attr_value(), output);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdateAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 attr_type = 1;
  if (has_attr_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attr_type(), target);
  }
  
  // optional int32 attr_value = 2;
  if (has_attr_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attr_value(), target);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdateAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attr_type = 1;
    if (has_attr_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_type());
    }
    
    // optional int32 attr_value = 2;
    if (has_attr_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attr_value());
    }
    
    // optional int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdateAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdateAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdateAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdateAttributeRequest::MergeFrom(const GMUpdateAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attr_type()) {
      set_attr_type(from.attr_type());
    }
    if (from.has_attr_value()) {
      set_attr_value(from.attr_value());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdateAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdateAttributeRequest::CopyFrom(const GMUpdateAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdateAttributeRequest::IsInitialized() const {
  
  return true;
}

void GMUpdateAttributeRequest::Swap(GMUpdateAttributeRequest* other) {
  if (other != this) {
    std::swap(attr_type_, other->attr_type_);
    std::swap(attr_value_, other->attr_value_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdateAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdateAttributeRequest_descriptor_;
  metadata.reflection = GMUpdateAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdateAttributeResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMUpdateAttributeResponse::GMUpdateAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdateAttributeResponse::InitAsDefaultInstance() {
}

GMUpdateAttributeResponse::GMUpdateAttributeResponse(const GMUpdateAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdateAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdateAttributeResponse::~GMUpdateAttributeResponse() {
  SharedDtor();
}

void GMUpdateAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdateAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdateAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdateAttributeResponse_descriptor_;
}

const GMUpdateAttributeResponse& GMUpdateAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdateAttributeResponse* GMUpdateAttributeResponse::default_instance_ = NULL;

GMUpdateAttributeResponse* GMUpdateAttributeResponse::New() const {
  return new GMUpdateAttributeResponse;
}

void GMUpdateAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdateAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdateAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdateAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdateAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdateAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdateAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdateAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdateAttributeResponse::MergeFrom(const GMUpdateAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdateAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdateAttributeResponse::CopyFrom(const GMUpdateAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdateAttributeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMUpdateAttributeResponse::Swap(GMUpdateAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdateAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdateAttributeResponse_descriptor_;
  metadata.reflection = GMUpdateAttributeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddMoneyRequest::kTypeFieldNumber;
const int GMAddMoneyRequest::kValueFieldNumber;
#endif  // !_MSC_VER

GMAddMoneyRequest::GMAddMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddMoneyRequest::InitAsDefaultInstance() {
}

GMAddMoneyRequest::GMAddMoneyRequest(const GMAddMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddMoneyRequest::~GMAddMoneyRequest() {
  SharedDtor();
}

void GMAddMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddMoneyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddMoneyRequest_descriptor_;
}

const GMAddMoneyRequest& GMAddMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddMoneyRequest* GMAddMoneyRequest::default_instance_ = NULL;

GMAddMoneyRequest* GMAddMoneyRequest::New() const {
  return new GMAddMoneyRequest;
}

void GMAddMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddMoneyRequest::MergeFrom(const GMAddMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddMoneyRequest::CopyFrom(const GMAddMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddMoneyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMAddMoneyRequest::Swap(GMAddMoneyRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddMoneyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddMoneyRequest_descriptor_;
  metadata.reflection = GMAddMoneyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddMoneyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddMoneyResponse::GMAddMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddMoneyResponse::InitAsDefaultInstance() {
}

GMAddMoneyResponse::GMAddMoneyResponse(const GMAddMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddMoneyResponse::~GMAddMoneyResponse() {
  SharedDtor();
}

void GMAddMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddMoneyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddMoneyResponse_descriptor_;
}

const GMAddMoneyResponse& GMAddMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddMoneyResponse* GMAddMoneyResponse::default_instance_ = NULL;

GMAddMoneyResponse* GMAddMoneyResponse::New() const {
  return new GMAddMoneyResponse;
}

void GMAddMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddMoneyResponse::MergeFrom(const GMAddMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddMoneyResponse::CopyFrom(const GMAddMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddMoneyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddMoneyResponse::Swap(GMAddMoneyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddMoneyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddMoneyResponse_descriptor_;
  metadata.reflection = GMAddMoneyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeMoneyRequest::kTypeFieldNumber;
const int ChargeMoneyRequest::kValueFieldNumber;
#endif  // !_MSC_VER

ChargeMoneyRequest::ChargeMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeMoneyRequest::InitAsDefaultInstance() {
}

ChargeMoneyRequest::ChargeMoneyRequest(const ChargeMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeMoneyRequest::~ChargeMoneyRequest() {
  SharedDtor();
}

void ChargeMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeMoneyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeMoneyRequest_descriptor_;
}

const ChargeMoneyRequest& ChargeMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

ChargeMoneyRequest* ChargeMoneyRequest::default_instance_ = NULL;

ChargeMoneyRequest* ChargeMoneyRequest::New() const {
  return new ChargeMoneyRequest;
}

void ChargeMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeMoneyRequest::MergeFrom(const ChargeMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeMoneyRequest::CopyFrom(const ChargeMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeMoneyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChargeMoneyRequest::Swap(ChargeMoneyRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeMoneyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeMoneyRequest_descriptor_;
  metadata.reflection = ChargeMoneyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeMoneyResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

ChargeMoneyResponse::ChargeMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeMoneyResponse::InitAsDefaultInstance() {
}

ChargeMoneyResponse::ChargeMoneyResponse(const ChargeMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeMoneyResponse::~ChargeMoneyResponse() {
  SharedDtor();
}

void ChargeMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeMoneyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeMoneyResponse_descriptor_;
}

const ChargeMoneyResponse& ChargeMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

ChargeMoneyResponse* ChargeMoneyResponse::default_instance_ = NULL;

ChargeMoneyResponse* ChargeMoneyResponse::New() const {
  return new ChargeMoneyResponse;
}

void ChargeMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeMoneyResponse::MergeFrom(const ChargeMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeMoneyResponse::CopyFrom(const ChargeMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeMoneyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChargeMoneyResponse::Swap(ChargeMoneyResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeMoneyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeMoneyResponse_descriptor_;
  metadata.reflection = ChargeMoneyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddExpRequest::kExpFieldNumber;
#endif  // !_MSC_VER

GMAddExpRequest::GMAddExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddExpRequest::InitAsDefaultInstance() {
}

GMAddExpRequest::GMAddExpRequest(const GMAddExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddExpRequest::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddExpRequest::~GMAddExpRequest() {
  SharedDtor();
}

void GMAddExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddExpRequest_descriptor_;
}

const GMAddExpRequest& GMAddExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddExpRequest* GMAddExpRequest::default_instance_ = NULL;

GMAddExpRequest* GMAddExpRequest::New() const {
  return new GMAddExpRequest;
}

void GMAddExpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddExpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddExpRequest::MergeFrom(const GMAddExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddExpRequest::CopyFrom(const GMAddExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddExpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddExpRequest::Swap(GMAddExpRequest* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddExpRequest_descriptor_;
  metadata.reflection = GMAddExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddExpResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddExpResponse::GMAddExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddExpResponse::InitAsDefaultInstance() {
}

GMAddExpResponse::GMAddExpResponse(const GMAddExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddExpResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddExpResponse::~GMAddExpResponse() {
  SharedDtor();
}

void GMAddExpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddExpResponse_descriptor_;
}

const GMAddExpResponse& GMAddExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddExpResponse* GMAddExpResponse::default_instance_ = NULL;

GMAddExpResponse* GMAddExpResponse::New() const {
  return new GMAddExpResponse;
}

void GMAddExpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddExpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddExpResponse::MergeFrom(const GMAddExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddExpResponse::CopyFrom(const GMAddExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddExpResponse::Swap(GMAddExpResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddExpResponse_descriptor_;
  metadata.reflection = GMAddExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddSkillExpRequest::kBuddyTidFieldNumber;
const int GMAddSkillExpRequest::kSkillIdFieldNumber;
const int GMAddSkillExpRequest::kExpFieldNumber;
#endif  // !_MSC_VER

GMAddSkillExpRequest::GMAddSkillExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddSkillExpRequest::InitAsDefaultInstance() {
}

GMAddSkillExpRequest::GMAddSkillExpRequest(const GMAddSkillExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddSkillExpRequest::SharedCtor() {
  _cached_size_ = 0;
  buddy_tid_ = 0;
  skill_id_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddSkillExpRequest::~GMAddSkillExpRequest() {
  SharedDtor();
}

void GMAddSkillExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddSkillExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddSkillExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddSkillExpRequest_descriptor_;
}

const GMAddSkillExpRequest& GMAddSkillExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddSkillExpRequest* GMAddSkillExpRequest::default_instance_ = NULL;

GMAddSkillExpRequest* GMAddSkillExpRequest::New() const {
  return new GMAddSkillExpRequest;
}

void GMAddSkillExpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buddy_tid_ = 0;
    skill_id_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddSkillExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buddy_tid;
        break;
      }
      
      // required int32 buddy_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buddy_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buddy_tid_)));
          set_has_buddy_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddSkillExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // required int32 buddy_tid = 3;
  if (has_buddy_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buddy_tid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddSkillExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // required int32 buddy_tid = 3;
  if (has_buddy_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buddy_tid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddSkillExpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buddy_tid = 3;
    if (has_buddy_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buddy_tid());
    }
    
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddSkillExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddSkillExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddSkillExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddSkillExpRequest::MergeFrom(const GMAddSkillExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buddy_tid()) {
      set_buddy_tid(from.buddy_tid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddSkillExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddSkillExpRequest::CopyFrom(const GMAddSkillExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddSkillExpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GMAddSkillExpRequest::Swap(GMAddSkillExpRequest* other) {
  if (other != this) {
    std::swap(buddy_tid_, other->buddy_tid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddSkillExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddSkillExpRequest_descriptor_;
  metadata.reflection = GMAddSkillExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddSkillExpResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddSkillExpResponse::GMAddSkillExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddSkillExpResponse::InitAsDefaultInstance() {
}

GMAddSkillExpResponse::GMAddSkillExpResponse(const GMAddSkillExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddSkillExpResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddSkillExpResponse::~GMAddSkillExpResponse() {
  SharedDtor();
}

void GMAddSkillExpResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddSkillExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddSkillExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddSkillExpResponse_descriptor_;
}

const GMAddSkillExpResponse& GMAddSkillExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddSkillExpResponse* GMAddSkillExpResponse::default_instance_ = NULL;

GMAddSkillExpResponse* GMAddSkillExpResponse::New() const {
  return new GMAddSkillExpResponse;
}

void GMAddSkillExpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddSkillExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddSkillExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddSkillExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddSkillExpResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddSkillExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddSkillExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddSkillExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddSkillExpResponse::MergeFrom(const GMAddSkillExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddSkillExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddSkillExpResponse::CopyFrom(const GMAddSkillExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddSkillExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddSkillExpResponse::Swap(GMAddSkillExpResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddSkillExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddSkillExpResponse_descriptor_;
  metadata.reflection = GMAddSkillExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSendMailRequest::kDstRoleIdFieldNumber;
const int GMSendMailRequest::kItemTidFieldNumber;
const int GMSendMailRequest::kItemCountFieldNumber;
const int GMSendMailRequest::kTitleFieldNumber;
const int GMSendMailRequest::kContentFieldNumber;
#endif  // !_MSC_VER

GMSendMailRequest::GMSendMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSendMailRequest::InitAsDefaultInstance() {
}

GMSendMailRequest::GMSendMailRequest(const GMSendMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSendMailRequest::SharedCtor() {
  _cached_size_ = 0;
  dst_role_id_ = 0;
  item_tid_ = 0;
  item_count_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSendMailRequest::~GMSendMailRequest() {
  SharedDtor();
}

void GMSendMailRequest::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GMSendMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSendMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSendMailRequest_descriptor_;
}

const GMSendMailRequest& GMSendMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSendMailRequest* GMSendMailRequest::default_instance_ = NULL;

GMSendMailRequest* GMSendMailRequest::New() const {
  return new GMSendMailRequest;
}

void GMSendMailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_role_id_ = 0;
    item_tid_ = 0;
    item_count_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSendMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dst_role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_role_id_)));
          set_has_dst_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_tid;
        break;
      }
      
      // optional int32 item_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional int32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }
      
      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSendMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dst_role_id = 1;
  if (has_dst_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dst_role_id(), output);
  }
  
  // optional int32 item_tid = 2;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_tid(), output);
  }
  
  // optional int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSendMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dst_role_id = 1;
  if (has_dst_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dst_role_id(), target);
  }
  
  // optional int32 item_tid = 2;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_tid(), target);
  }
  
  // optional int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }
  
  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }
  
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSendMailRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dst_role_id = 1;
    if (has_dst_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_role_id());
    }
    
    // optional int32 item_tid = 2;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_tid());
    }
    
    // optional int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSendMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSendMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSendMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSendMailRequest::MergeFrom(const GMSendMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_role_id()) {
      set_dst_role_id(from.dst_role_id());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSendMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSendMailRequest::CopyFrom(const GMSendMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSendMailRequest::IsInitialized() const {
  
  return true;
}

void GMSendMailRequest::Swap(GMSendMailRequest* other) {
  if (other != this) {
    std::swap(dst_role_id_, other->dst_role_id_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(item_count_, other->item_count_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSendMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSendMailRequest_descriptor_;
  metadata.reflection = GMSendMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSendMailResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSendMailResponse::GMSendMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSendMailResponse::InitAsDefaultInstance() {
}

GMSendMailResponse::GMSendMailResponse(const GMSendMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSendMailResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSendMailResponse::~GMSendMailResponse() {
  SharedDtor();
}

void GMSendMailResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSendMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSendMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSendMailResponse_descriptor_;
}

const GMSendMailResponse& GMSendMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSendMailResponse* GMSendMailResponse::default_instance_ = NULL;

GMSendMailResponse* GMSendMailResponse::New() const {
  return new GMSendMailResponse;
}

void GMSendMailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSendMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSendMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSendMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSendMailResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSendMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSendMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSendMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSendMailResponse::MergeFrom(const GMSendMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSendMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSendMailResponse::CopyFrom(const GMSendMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSendMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSendMailResponse::Swap(GMSendMailResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSendMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSendMailResponse_descriptor_;
  metadata.reflection = GMSendMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryRoleQuestsRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

GMQueryRoleQuestsRequest::GMQueryRoleQuestsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryRoleQuestsRequest::InitAsDefaultInstance() {
}

GMQueryRoleQuestsRequest::GMQueryRoleQuestsRequest(const GMQueryRoleQuestsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryRoleQuestsRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryRoleQuestsRequest::~GMQueryRoleQuestsRequest() {
  SharedDtor();
}

void GMQueryRoleQuestsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryRoleQuestsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryRoleQuestsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryRoleQuestsRequest_descriptor_;
}

const GMQueryRoleQuestsRequest& GMQueryRoleQuestsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryRoleQuestsRequest* GMQueryRoleQuestsRequest::default_instance_ = NULL;

GMQueryRoleQuestsRequest* GMQueryRoleQuestsRequest::New() const {
  return new GMQueryRoleQuestsRequest;
}

void GMQueryRoleQuestsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryRoleQuestsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryRoleQuestsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryRoleQuestsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryRoleQuestsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryRoleQuestsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryRoleQuestsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryRoleQuestsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryRoleQuestsRequest::MergeFrom(const GMQueryRoleQuestsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryRoleQuestsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryRoleQuestsRequest::CopyFrom(const GMQueryRoleQuestsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryRoleQuestsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMQueryRoleQuestsRequest::Swap(GMQueryRoleQuestsRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryRoleQuestsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryRoleQuestsRequest_descriptor_;
  metadata.reflection = GMQueryRoleQuestsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryRoleQuestsResponse_RoleQuestStatus::kQuestIdFieldNumber;
const int GMQueryRoleQuestsResponse_RoleQuestStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

GMQueryRoleQuestsResponse_RoleQuestStatus::GMQueryRoleQuestsResponse_RoleQuestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::InitAsDefaultInstance() {
}

GMQueryRoleQuestsResponse_RoleQuestStatus::GMQueryRoleQuestsResponse_RoleQuestStatus(const GMQueryRoleQuestsResponse_RoleQuestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryRoleQuestsResponse_RoleQuestStatus::~GMQueryRoleQuestsResponse_RoleQuestStatus() {
  SharedDtor();
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryRoleQuestsResponse_RoleQuestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_;
}

const GMQueryRoleQuestsResponse_RoleQuestStatus& GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryRoleQuestsResponse_RoleQuestStatus* GMQueryRoleQuestsResponse_RoleQuestStatus::default_instance_ = NULL;

GMQueryRoleQuestsResponse_RoleQuestStatus* GMQueryRoleQuestsResponse_RoleQuestStatus::New() const {
  return new GMQueryRoleQuestsResponse_RoleQuestStatus;
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryRoleQuestsResponse_RoleQuestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryRoleQuestsResponse_RoleQuestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryRoleQuestsResponse_RoleQuestStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryRoleQuestsResponse_RoleQuestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryRoleQuestsResponse_RoleQuestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::MergeFrom(const GMQueryRoleQuestsResponse_RoleQuestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::CopyFrom(const GMQueryRoleQuestsResponse_RoleQuestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryRoleQuestsResponse_RoleQuestStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMQueryRoleQuestsResponse_RoleQuestStatus::Swap(GMQueryRoleQuestsResponse_RoleQuestStatus* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryRoleQuestsResponse_RoleQuestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryRoleQuestsResponse_RoleQuestStatus_descriptor_;
  metadata.reflection = GMQueryRoleQuestsResponse_RoleQuestStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GMQueryRoleQuestsResponse::kRoleQuestsFieldNumber;
const int GMQueryRoleQuestsResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMQueryRoleQuestsResponse::GMQueryRoleQuestsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryRoleQuestsResponse::InitAsDefaultInstance() {
}

GMQueryRoleQuestsResponse::GMQueryRoleQuestsResponse(const GMQueryRoleQuestsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryRoleQuestsResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryRoleQuestsResponse::~GMQueryRoleQuestsResponse() {
  SharedDtor();
}

void GMQueryRoleQuestsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryRoleQuestsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryRoleQuestsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryRoleQuestsResponse_descriptor_;
}

const GMQueryRoleQuestsResponse& GMQueryRoleQuestsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryRoleQuestsResponse* GMQueryRoleQuestsResponse::default_instance_ = NULL;

GMQueryRoleQuestsResponse* GMQueryRoleQuestsResponse::New() const {
  return new GMQueryRoleQuestsResponse;
}

void GMQueryRoleQuestsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    error_code_ = 0;
  }
  role_quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryRoleQuestsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.GMQueryRoleQuestsResponse.RoleQuestStatus role_quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role_quests;
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // optional int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryRoleQuestsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.GMQueryRoleQuestsResponse.RoleQuestStatus role_quests = 1;
  for (int i = 0; i < this->role_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_quests(i), output);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryRoleQuestsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.GMQueryRoleQuestsResponse.RoleQuestStatus role_quests = 1;
  for (int i = 0; i < this->role_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_quests(i), target);
  }
  
  // optional int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryRoleQuestsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.GMQueryRoleQuestsResponse.RoleQuestStatus role_quests = 1;
  total_size += 1 * this->role_quests_size();
  for (int i = 0; i < this->role_quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_quests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryRoleQuestsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryRoleQuestsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryRoleQuestsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryRoleQuestsResponse::MergeFrom(const GMQueryRoleQuestsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_quests_.MergeFrom(from.role_quests_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryRoleQuestsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryRoleQuestsResponse::CopyFrom(const GMQueryRoleQuestsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryRoleQuestsResponse::IsInitialized() const {
  
  for (int i = 0; i < role_quests_size(); i++) {
    if (!this->role_quests(i).IsInitialized()) return false;
  }
  return true;
}

void GMQueryRoleQuestsResponse::Swap(GMQueryRoleQuestsResponse* other) {
  if (other != this) {
    role_quests_.Swap(&other->role_quests_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryRoleQuestsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryRoleQuestsResponse_descriptor_;
  metadata.reflection = GMQueryRoleQuestsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetQuestStatusRequest::kPlayerIdFieldNumber;
const int GMSetQuestStatusRequest::kQuestIdFieldNumber;
const int GMSetQuestStatusRequest::kQuestStatusFieldNumber;
#endif  // !_MSC_VER

GMSetQuestStatusRequest::GMSetQuestStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetQuestStatusRequest::InitAsDefaultInstance() {
}

GMSetQuestStatusRequest::GMSetQuestStatusRequest(const GMSetQuestStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetQuestStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  quest_id_ = 0;
  quest_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetQuestStatusRequest::~GMSetQuestStatusRequest() {
  SharedDtor();
}

void GMSetQuestStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetQuestStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetQuestStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetQuestStatusRequest_descriptor_;
}

const GMSetQuestStatusRequest& GMSetQuestStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetQuestStatusRequest* GMSetQuestStatusRequest::default_instance_ = NULL;

GMSetQuestStatusRequest* GMSetQuestStatusRequest::New() const {
  return new GMSetQuestStatusRequest;
}

void GMSetQuestStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    quest_id_ = 0;
    quest_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetQuestStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }
      
      // required int32 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quest_status;
        break;
      }
      
      // required int32 quest_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_status_)));
          set_has_quest_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetQuestStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  // required int32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_id(), output);
  }
  
  // required int32 quest_status = 3;
  if (has_quest_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quest_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetQuestStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  // required int32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_id(), target);
  }
  
  // required int32 quest_status = 3;
  if (has_quest_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quest_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetQuestStatusRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
    // required int32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // required int32 quest_status = 3;
    if (has_quest_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetQuestStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetQuestStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetQuestStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetQuestStatusRequest::MergeFrom(const GMSetQuestStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_status()) {
      set_quest_status(from.quest_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetQuestStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetQuestStatusRequest::CopyFrom(const GMSetQuestStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetQuestStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GMSetQuestStatusRequest::Swap(GMSetQuestStatusRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_status_, other->quest_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetQuestStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetQuestStatusRequest_descriptor_;
  metadata.reflection = GMSetQuestStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetQuestStatusResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetQuestStatusResponse::GMSetQuestStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetQuestStatusResponse::InitAsDefaultInstance() {
}

GMSetQuestStatusResponse::GMSetQuestStatusResponse(const GMSetQuestStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetQuestStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetQuestStatusResponse::~GMSetQuestStatusResponse() {
  SharedDtor();
}

void GMSetQuestStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetQuestStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetQuestStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetQuestStatusResponse_descriptor_;
}

const GMSetQuestStatusResponse& GMSetQuestStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetQuestStatusResponse* GMSetQuestStatusResponse::default_instance_ = NULL;

GMSetQuestStatusResponse* GMSetQuestStatusResponse::New() const {
  return new GMSetQuestStatusResponse;
}

void GMSetQuestStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetQuestStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetQuestStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetQuestStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetQuestStatusResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetQuestStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetQuestStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetQuestStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetQuestStatusResponse::MergeFrom(const GMSetQuestStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetQuestStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetQuestStatusResponse::CopyFrom(const GMSetQuestStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetQuestStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetQuestStatusResponse::Swap(GMSetQuestStatusResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetQuestStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetQuestStatusResponse_descriptor_;
  metadata.reflection = GMSetQuestStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddYinglingLingliRequest::kPlayerIdFieldNumber;
const int GMAddYinglingLingliRequest::kAddLingliFieldNumber;
#endif  // !_MSC_VER

GMAddYinglingLingliRequest::GMAddYinglingLingliRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddYinglingLingliRequest::InitAsDefaultInstance() {
}

GMAddYinglingLingliRequest::GMAddYinglingLingliRequest(const GMAddYinglingLingliRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddYinglingLingliRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  add_lingli_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddYinglingLingliRequest::~GMAddYinglingLingliRequest() {
  SharedDtor();
}

void GMAddYinglingLingliRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddYinglingLingliRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddYinglingLingliRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddYinglingLingliRequest_descriptor_;
}

const GMAddYinglingLingliRequest& GMAddYinglingLingliRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddYinglingLingliRequest* GMAddYinglingLingliRequest::default_instance_ = NULL;

GMAddYinglingLingliRequest* GMAddYinglingLingliRequest::New() const {
  return new GMAddYinglingLingliRequest;
}

void GMAddYinglingLingliRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    add_lingli_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddYinglingLingliRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_lingli;
        break;
      }
      
      // required int32 add_lingli = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_lingli:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_lingli_)));
          set_has_add_lingli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddYinglingLingliRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  // required int32 add_lingli = 2;
  if (has_add_lingli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_lingli(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddYinglingLingliRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  // required int32 add_lingli = 2;
  if (has_add_lingli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_lingli(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddYinglingLingliRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
    // required int32 add_lingli = 2;
    if (has_add_lingli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_lingli());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddYinglingLingliRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddYinglingLingliRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddYinglingLingliRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddYinglingLingliRequest::MergeFrom(const GMAddYinglingLingliRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_add_lingli()) {
      set_add_lingli(from.add_lingli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddYinglingLingliRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddYinglingLingliRequest::CopyFrom(const GMAddYinglingLingliRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddYinglingLingliRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMAddYinglingLingliRequest::Swap(GMAddYinglingLingliRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(add_lingli_, other->add_lingli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddYinglingLingliRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddYinglingLingliRequest_descriptor_;
  metadata.reflection = GMAddYinglingLingliRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddYinglingLingliResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMAddYinglingLingliResponse::GMAddYinglingLingliResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddYinglingLingliResponse::InitAsDefaultInstance() {
}

GMAddYinglingLingliResponse::GMAddYinglingLingliResponse(const GMAddYinglingLingliResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddYinglingLingliResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddYinglingLingliResponse::~GMAddYinglingLingliResponse() {
  SharedDtor();
}

void GMAddYinglingLingliResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddYinglingLingliResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddYinglingLingliResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddYinglingLingliResponse_descriptor_;
}

const GMAddYinglingLingliResponse& GMAddYinglingLingliResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMAddYinglingLingliResponse* GMAddYinglingLingliResponse::default_instance_ = NULL;

GMAddYinglingLingliResponse* GMAddYinglingLingliResponse::New() const {
  return new GMAddYinglingLingliResponse;
}

void GMAddYinglingLingliResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddYinglingLingliResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddYinglingLingliResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddYinglingLingliResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddYinglingLingliResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddYinglingLingliResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddYinglingLingliResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddYinglingLingliResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddYinglingLingliResponse::MergeFrom(const GMAddYinglingLingliResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddYinglingLingliResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddYinglingLingliResponse::CopyFrom(const GMAddYinglingLingliResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddYinglingLingliResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMAddYinglingLingliResponse::Swap(GMAddYinglingLingliResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddYinglingLingliResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddYinglingLingliResponse_descriptor_;
  metadata.reflection = GMAddYinglingLingliResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetCooldownRequest::kPlayerIdFieldNumber;
const int GMSetCooldownRequest::kCoolDownTypeFieldNumber;
const int GMSetCooldownRequest::kCoolDownValueFieldNumber;
#endif  // !_MSC_VER

GMSetCooldownRequest::GMSetCooldownRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetCooldownRequest::InitAsDefaultInstance() {
}

GMSetCooldownRequest::GMSetCooldownRequest(const GMSetCooldownRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetCooldownRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  cool_down_type_ = 0;
  cool_down_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetCooldownRequest::~GMSetCooldownRequest() {
  SharedDtor();
}

void GMSetCooldownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetCooldownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetCooldownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetCooldownRequest_descriptor_;
}

const GMSetCooldownRequest& GMSetCooldownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetCooldownRequest* GMSetCooldownRequest::default_instance_ = NULL;

GMSetCooldownRequest* GMSetCooldownRequest::New() const {
  return new GMSetCooldownRequest;
}

void GMSetCooldownRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    cool_down_type_ = 0;
    cool_down_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetCooldownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cool_down_type;
        break;
      }
      
      // required int32 cool_down_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_down_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_type_)));
          set_has_cool_down_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cool_down_value;
        break;
      }
      
      // required int32 cool_down_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_down_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_value_)));
          set_has_cool_down_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetCooldownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  // required int32 cool_down_type = 2;
  if (has_cool_down_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cool_down_type(), output);
  }
  
  // required int32 cool_down_value = 3;
  if (has_cool_down_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cool_down_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetCooldownRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  // required int32 cool_down_type = 2;
  if (has_cool_down_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cool_down_type(), target);
  }
  
  // required int32 cool_down_value = 3;
  if (has_cool_down_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cool_down_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetCooldownRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
    // required int32 cool_down_type = 2;
    if (has_cool_down_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down_type());
    }
    
    // required int32 cool_down_value = 3;
    if (has_cool_down_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetCooldownRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetCooldownRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetCooldownRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetCooldownRequest::MergeFrom(const GMSetCooldownRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_cool_down_type()) {
      set_cool_down_type(from.cool_down_type());
    }
    if (from.has_cool_down_value()) {
      set_cool_down_value(from.cool_down_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetCooldownRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetCooldownRequest::CopyFrom(const GMSetCooldownRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetCooldownRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GMSetCooldownRequest::Swap(GMSetCooldownRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(cool_down_type_, other->cool_down_type_);
    std::swap(cool_down_value_, other->cool_down_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetCooldownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetCooldownRequest_descriptor_;
  metadata.reflection = GMSetCooldownRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetCooldownResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetCooldownResponse::GMSetCooldownResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetCooldownResponse::InitAsDefaultInstance() {
}

GMSetCooldownResponse::GMSetCooldownResponse(const GMSetCooldownResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetCooldownResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetCooldownResponse::~GMSetCooldownResponse() {
  SharedDtor();
}

void GMSetCooldownResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetCooldownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetCooldownResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetCooldownResponse_descriptor_;
}

const GMSetCooldownResponse& GMSetCooldownResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetCooldownResponse* GMSetCooldownResponse::default_instance_ = NULL;

GMSetCooldownResponse* GMSetCooldownResponse::New() const {
  return new GMSetCooldownResponse;
}

void GMSetCooldownResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetCooldownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetCooldownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetCooldownResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetCooldownResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetCooldownResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetCooldownResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetCooldownResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetCooldownResponse::MergeFrom(const GMSetCooldownResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetCooldownResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetCooldownResponse::CopyFrom(const GMSetCooldownResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetCooldownResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetCooldownResponse::Swap(GMSetCooldownResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetCooldownResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetCooldownResponse_descriptor_;
  metadata.reflection = GMSetCooldownResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendLogNotify::kSeqFieldNumber;
const int SendLogNotify::kLogSrcTypeFieldNumber;
const int SendLogNotify::kActionTypeFieldNumber;
const int SendLogNotify::kTimeStampFieldNumber;
const int SendLogNotify::kPlayerInfoFieldNumber;
const int SendLogNotify::kOptionalParasFieldNumber;
const int SendLogNotify::kLogDataFieldNumber;
#endif  // !_MSC_VER

SendLogNotify::SendLogNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendLogNotify::InitAsDefaultInstance() {
  player_info_ = const_cast< ::protocols::common::LogPlayerData*>(&::protocols::common::LogPlayerData::default_instance());
  optional_paras_ = const_cast< ::protocols::common::LogOptionalParams*>(&::protocols::common::LogOptionalParams::default_instance());
}

SendLogNotify::SendLogNotify(const SendLogNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendLogNotify::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0;
  log_src_type_ = 0;
  action_type_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  player_info_ = NULL;
  optional_paras_ = NULL;
  log_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendLogNotify::~SendLogNotify() {
  SharedDtor();
}

void SendLogNotify::SharedDtor() {
  if (log_data_ != &::google::protobuf::internal::kEmptyString) {
    delete log_data_;
  }
  if (this != default_instance_) {
    delete player_info_;
    delete optional_paras_;
  }
}

void SendLogNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendLogNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendLogNotify_descriptor_;
}

const SendLogNotify& SendLogNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

SendLogNotify* SendLogNotify::default_instance_ = NULL;

SendLogNotify* SendLogNotify::New() const {
  return new SendLogNotify;
}

void SendLogNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0;
    log_src_type_ = 0;
    action_type_ = 0;
    time_stamp_ = GOOGLE_LONGLONG(0);
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::LogPlayerData::Clear();
    }
    if (has_optional_paras()) {
      if (optional_paras_ != NULL) optional_paras_->::protocols::common::LogOptionalParams::Clear();
    }
    if (has_log_data()) {
      if (log_data_ != &::google::protobuf::internal::kEmptyString) {
        log_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendLogNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 log_src_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_src_type_)));
          set_has_log_src_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_type;
        break;
      }
      
      // required int32 action_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }
      
      // required int64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_info;
        break;
      }
      
      // required .protocols.common.LogPlayerData player_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_optional_paras;
        break;
      }
      
      // optional .protocols.common.LogOptionalParams optional_paras = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_paras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optional_paras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_log_data;
        break;
      }
      
      // optional string log_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_data().data(), this->log_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seq;
        break;
      }
      
      // required int32 seq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendLogNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 log_src_type = 1;
  if (has_log_src_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_src_type(), output);
  }
  
  // required int32 action_type = 2;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_type(), output);
  }
  
  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_stamp(), output);
  }
  
  // required .protocols.common.LogPlayerData player_info = 4;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_info(), output);
  }
  
  // optional .protocols.common.LogOptionalParams optional_paras = 5;
  if (has_optional_paras()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->optional_paras(), output);
  }
  
  // optional string log_data = 6;
  if (has_log_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_data().data(), this->log_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->log_data(), output);
  }
  
  // required int32 seq = 7;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendLogNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 log_src_type = 1;
  if (has_log_src_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_src_type(), target);
  }
  
  // required int32 action_type = 2;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_type(), target);
  }
  
  // required int64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_stamp(), target);
  }
  
  // required .protocols.common.LogPlayerData player_info = 4;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_info(), target);
  }
  
  // optional .protocols.common.LogOptionalParams optional_paras = 5;
  if (has_optional_paras()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->optional_paras(), target);
  }
  
  // optional string log_data = 6;
  if (has_log_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_data().data(), this->log_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->log_data(), target);
  }
  
  // required int32 seq = 7;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendLogNotify::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq = 7;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }
    
    // required int32 log_src_type = 1;
    if (has_log_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_src_type());
    }
    
    // required int32 action_type = 2;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_type());
    }
    
    // required int64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_stamp());
    }
    
    // required .protocols.common.LogPlayerData player_info = 4;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional .protocols.common.LogOptionalParams optional_paras = 5;
    if (has_optional_paras()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optional_paras());
    }
    
    // optional string log_data = 6;
    if (has_log_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendLogNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendLogNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendLogNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendLogNotify::MergeFrom(const SendLogNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_log_src_type()) {
      set_log_src_type(from.log_src_type());
    }
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::LogPlayerData::MergeFrom(from.player_info());
    }
    if (from.has_optional_paras()) {
      mutable_optional_paras()->::protocols::common::LogOptionalParams::MergeFrom(from.optional_paras());
    }
    if (from.has_log_data()) {
      set_log_data(from.log_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendLogNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendLogNotify::CopyFrom(const SendLogNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendLogNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  return true;
}

void SendLogNotify::Swap(SendLogNotify* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(log_src_type_, other->log_src_type_);
    std::swap(action_type_, other->action_type_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(player_info_, other->player_info_);
    std::swap(optional_paras_, other->optional_paras_);
    std::swap(log_data_, other->log_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendLogNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendLogNotify_descriptor_;
  metadata.reflection = SendLogNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogPlayerData::kClientIpFieldNumber;
const int LogPlayerData::kOuidFieldNumber;
const int LogPlayerData::kIuidFieldNumber;
const int LogPlayerData::kRoleIdFieldNumber;
const int LogPlayerData::kNameFieldNumber;
const int LogPlayerData::kGenderFieldNumber;
const int LogPlayerData::kJobFieldNumber;
const int LogPlayerData::kGameFriendFieldNumber;
const int LogPlayerData::kPlatformFriendFieldNumber;
const int LogPlayerData::kUserLevelFieldNumber;
const int LogPlayerData::kUserExpFieldNumber;
const int LogPlayerData::kDiamondFieldNumber;
const int LogPlayerData::kCouponFieldNumber;
const int LogPlayerData::kGoldCoinFieldNumber;
const int LogPlayerData::kVipLevelFieldNumber;
const int LogPlayerData::kFirstInTimeFieldNumber;
const int LogPlayerData::kVersionFieldNumber;
const int LogPlayerData::kUserEmailFieldNumber;
const int LogPlayerData::kPlatformFieldNumber;
const int LogPlayerData::kBagItemFieldNumber;
const int LogPlayerData::kDepotItemFieldNumber;
const int LogPlayerData::kOnlineTimeFieldNumber;
#endif  // !_MSC_VER

LogPlayerData::LogPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogPlayerData::InitAsDefaultInstance() {
}

LogPlayerData::LogPlayerData(const LogPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogPlayerData::SharedCtor() {
  _cached_size_ = 0;
  client_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ouid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iuid_ = 0;
  role_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  job_ = 0;
  game_friend_ = 0;
  platform_friend_ = 0;
  user_level_ = 0;
  user_exp_ = 0;
  diamond_ = 0;
  coupon_ = 0;
  gold_coin_ = 0;
  vip_level_ = 0;
  first_in_time_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogPlayerData::~LogPlayerData() {
  SharedDtor();
}

void LogPlayerData::SharedDtor() {
  if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete client_ip_;
  }
  if (ouid_ != &::google::protobuf::internal::kEmptyString) {
    delete ouid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (user_email_ != &::google::protobuf::internal::kEmptyString) {
    delete user_email_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void LogPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogPlayerData_descriptor_;
}

const LogPlayerData& LogPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

LogPlayerData* LogPlayerData::default_instance_ = NULL;

LogPlayerData* LogPlayerData::New() const {
  return new LogPlayerData;
}

void LogPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_client_ip()) {
      if (client_ip_ != &::google::protobuf::internal::kEmptyString) {
        client_ip_->clear();
      }
    }
    if (has_ouid()) {
      if (ouid_ != &::google::protobuf::internal::kEmptyString) {
        ouid_->clear();
      }
    }
    iuid_ = 0;
    role_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gender_ = 0;
    job_ = 0;
    game_friend_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    platform_friend_ = 0;
    user_level_ = 0;
    user_exp_ = 0;
    diamond_ = 0;
    coupon_ = 0;
    gold_coin_ = 0;
    vip_level_ = 0;
    first_in_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_user_email()) {
      if (user_email_ != &::google::protobuf::internal::kEmptyString) {
        user_email_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    online_time_ = 0;
  }
  bag_item_.Clear();
  depot_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ouid;
        break;
      }
      
      // optional string ouid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ouid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ouid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ouid().data(), this->ouid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iuid;
        break;
      }
      
      // required int32 iuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iuid_)));
          set_has_iuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // optional int32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_friend;
        break;
      }
      
      // optional int32 game_friend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_friend_)));
          set_has_game_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_platform_friend;
        break;
      }
      
      // optional int32 platform_friend = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_friend_)));
          set_has_platform_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_level;
        break;
      }
      
      // optional int32 user_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_level_)));
          set_has_user_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_user_exp;
        break;
      }
      
      // optional int32 user_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_exp_)));
          set_has_user_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_diamond;
        break;
      }
      
      // optional int32 diamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coupon;
        break;
      }
      
      // optional int32 coupon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gold_coin;
        break;
      }
      
      // optional int32 gold_coin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_coin_)));
          set_has_gold_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_first_in_time;
        break;
      }
      
      // optional int32 first_in_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_in_time_)));
          set_has_first_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_version;
        break;
      }
      
      // optional string version = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_user_email;
        break;
      }
      
      // optional string user_email = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_email().data(), this->user_email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_name;
        break;
      }
      
      // optional string name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_job;
        break;
      }
      
      // optional int32 job = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bag_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo bag_item = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bag_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bag_item;
        if (input->ExpectTag(162)) goto parse_depot_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo depot_item = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depot_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_depot_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_depot_item;
        if (input->ExpectTag(170)) goto parse_platform;
        break;
      }
      
      // optional string platform = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_online_time;
        break;
      }
      
      // optional int32 online_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string client_ip = 1;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->client_ip(), output);
  }
  
  // optional string ouid = 2;
  if (has_ouid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ouid().data(), this->ouid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ouid(), output);
  }
  
  // required int32 iuid = 3;
  if (has_iuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iuid(), output);
  }
  
  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }
  
  // optional int32 game_friend = 5;
  if (has_game_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game_friend(), output);
  }
  
  // optional int32 platform_friend = 6;
  if (has_platform_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->platform_friend(), output);
  }
  
  // optional int32 user_level = 7;
  if (has_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_level(), output);
  }
  
  // optional int32 user_exp = 8;
  if (has_user_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->user_exp(), output);
  }
  
  // optional int32 diamond = 9;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diamond(), output);
  }
  
  // optional int32 coupon = 10;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coupon(), output);
  }
  
  // optional int32 gold_coin = 11;
  if (has_gold_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gold_coin(), output);
  }
  
  // optional int32 vip_level = 12;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vip_level(), output);
  }
  
  // optional int32 first_in_time = 13;
  if (has_first_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->first_in_time(), output);
  }
  
  // optional string version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->version(), output);
  }
  
  // optional string user_email = 15;
  if (has_user_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_email().data(), this->user_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->user_email(), output);
  }
  
  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->name(), output);
  }
  
  // optional int32 job = 17;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->job(), output);
  }
  
  // optional int32 role_id = 18;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->role_id(), output);
  }
  
  // repeated .protocols.common.ItemInfo bag_item = 19;
  for (int i = 0; i < this->bag_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bag_item(i), output);
  }
  
  // repeated .protocols.common.ItemInfo depot_item = 20;
  for (int i = 0; i < this->depot_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->depot_item(i), output);
  }
  
  // optional string platform = 21;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->platform(), output);
  }
  
  // optional int32 online_time = 22;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->online_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string client_ip = 1;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ip(), target);
  }
  
  // optional string ouid = 2;
  if (has_ouid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ouid().data(), this->ouid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ouid(), target);
  }
  
  // required int32 iuid = 3;
  if (has_iuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iuid(), target);
  }
  
  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }
  
  // optional int32 game_friend = 5;
  if (has_game_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game_friend(), target);
  }
  
  // optional int32 platform_friend = 6;
  if (has_platform_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->platform_friend(), target);
  }
  
  // optional int32 user_level = 7;
  if (has_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->user_level(), target);
  }
  
  // optional int32 user_exp = 8;
  if (has_user_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->user_exp(), target);
  }
  
  // optional int32 diamond = 9;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diamond(), target);
  }
  
  // optional int32 coupon = 10;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coupon(), target);
  }
  
  // optional int32 gold_coin = 11;
  if (has_gold_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gold_coin(), target);
  }
  
  // optional int32 vip_level = 12;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vip_level(), target);
  }
  
  // optional int32 first_in_time = 13;
  if (has_first_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->first_in_time(), target);
  }
  
  // optional string version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->version(), target);
  }
  
  // optional string user_email = 15;
  if (has_user_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_email().data(), this->user_email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->user_email(), target);
  }
  
  // optional string name = 16;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->name(), target);
  }
  
  // optional int32 job = 17;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->job(), target);
  }
  
  // optional int32 role_id = 18;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->role_id(), target);
  }
  
  // repeated .protocols.common.ItemInfo bag_item = 19;
  for (int i = 0; i < this->bag_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bag_item(i), target);
  }
  
  // repeated .protocols.common.ItemInfo depot_item = 20;
  for (int i = 0; i < this->depot_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->depot_item(i), target);
  }
  
  // optional string platform = 21;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->platform(), target);
  }
  
  // optional int32 online_time = 22;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->online_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogPlayerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string client_ip = 1;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }
    
    // optional string ouid = 2;
    if (has_ouid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ouid());
    }
    
    // required int32 iuid = 3;
    if (has_iuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iuid());
    }
    
    // optional int32 role_id = 18;
    if (has_role_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional string name = 16;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // optional int32 job = 17;
    if (has_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }
    
    // optional int32 game_friend = 5;
    if (has_game_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_friend());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 platform_friend = 6;
    if (has_platform_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_friend());
    }
    
    // optional int32 user_level = 7;
    if (has_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_level());
    }
    
    // optional int32 user_exp = 8;
    if (has_user_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_exp());
    }
    
    // optional int32 diamond = 9;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }
    
    // optional int32 coupon = 10;
    if (has_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coupon());
    }
    
    // optional int32 gold_coin = 11;
    if (has_gold_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_coin());
    }
    
    // optional int32 vip_level = 12;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional int32 first_in_time = 13;
    if (has_first_in_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_in_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string version = 14;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string user_email = 15;
    if (has_user_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_email());
    }
    
    // optional string platform = 21;
    if (has_platform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }
    
    // optional int32 online_time = 22;
    if (has_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_time());
    }
    
  }
  // repeated .protocols.common.ItemInfo bag_item = 19;
  total_size += 2 * this->bag_item_size();
  for (int i = 0; i < this->bag_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bag_item(i));
  }
  
  // repeated .protocols.common.ItemInfo depot_item = 20;
  total_size += 2 * this->depot_item_size();
  for (int i = 0; i < this->depot_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->depot_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogPlayerData::MergeFrom(const LogPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_item_.MergeFrom(from.bag_item_);
  depot_item_.MergeFrom(from.depot_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_ip()) {
      set_client_ip(from.client_ip());
    }
    if (from.has_ouid()) {
      set_ouid(from.ouid());
    }
    if (from.has_iuid()) {
      set_iuid(from.iuid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_game_friend()) {
      set_game_friend(from.game_friend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_platform_friend()) {
      set_platform_friend(from.platform_friend());
    }
    if (from.has_user_level()) {
      set_user_level(from.user_level());
    }
    if (from.has_user_exp()) {
      set_user_exp(from.user_exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_gold_coin()) {
      set_gold_coin(from.gold_coin());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_first_in_time()) {
      set_first_in_time(from.first_in_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user_email()) {
      set_user_email(from.user_email());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogPlayerData::CopyFrom(const LogPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < bag_item_size(); i++) {
    if (!this->bag_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < depot_item_size(); i++) {
    if (!this->depot_item(i).IsInitialized()) return false;
  }
  return true;
}

void LogPlayerData::Swap(LogPlayerData* other) {
  if (other != this) {
    std::swap(client_ip_, other->client_ip_);
    std::swap(ouid_, other->ouid_);
    std::swap(iuid_, other->iuid_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(gender_, other->gender_);
    std::swap(job_, other->job_);
    std::swap(game_friend_, other->game_friend_);
    std::swap(platform_friend_, other->platform_friend_);
    std::swap(user_level_, other->user_level_);
    std::swap(user_exp_, other->user_exp_);
    std::swap(diamond_, other->diamond_);
    std::swap(coupon_, other->coupon_);
    std::swap(gold_coin_, other->gold_coin_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(first_in_time_, other->first_in_time_);
    std::swap(version_, other->version_);
    std::swap(user_email_, other->user_email_);
    std::swap(platform_, other->platform_);
    bag_item_.Swap(&other->bag_item_);
    depot_item_.Swap(&other->depot_item_);
    std::swap(online_time_, other->online_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogPlayerData_descriptor_;
  metadata.reflection = LogPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogOptionalParams::kPara1FieldNumber;
const int LogOptionalParams::kPara2FieldNumber;
const int LogOptionalParams::kPara3FieldNumber;
const int LogOptionalParams::kPara4FieldNumber;
const int LogOptionalParams::kPara5FieldNumber;
const int LogOptionalParams::kPara6FieldNumber;
const int LogOptionalParams::kPara7FieldNumber;
const int LogOptionalParams::kPara8FieldNumber;
const int LogOptionalParams::kPara9FieldNumber;
const int LogOptionalParams::kPara10FieldNumber;
const int LogOptionalParams::kPara11FieldNumber;
const int LogOptionalParams::kPara12FieldNumber;
#endif  // !_MSC_VER

LogOptionalParams::LogOptionalParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogOptionalParams::InitAsDefaultInstance() {
}

LogOptionalParams::LogOptionalParams(const LogOptionalParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogOptionalParams::SharedCtor() {
  _cached_size_ = 0;
  para1_ = 0;
  para2_ = 0;
  para3_ = 0;
  para4_ = 0;
  para5_ = 0;
  para6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  para7_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  para8_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  para9_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  para10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  para11_ = GOOGLE_LONGLONG(0);
  para12_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogOptionalParams::~LogOptionalParams() {
  SharedDtor();
}

void LogOptionalParams::SharedDtor() {
  if (para6_ != &::google::protobuf::internal::kEmptyString) {
    delete para6_;
  }
  if (para7_ != &::google::protobuf::internal::kEmptyString) {
    delete para7_;
  }
  if (para8_ != &::google::protobuf::internal::kEmptyString) {
    delete para8_;
  }
  if (para9_ != &::google::protobuf::internal::kEmptyString) {
    delete para9_;
  }
  if (para10_ != &::google::protobuf::internal::kEmptyString) {
    delete para10_;
  }
  if (this != default_instance_) {
  }
}

void LogOptionalParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogOptionalParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogOptionalParams_descriptor_;
}

const LogOptionalParams& LogOptionalParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

LogOptionalParams* LogOptionalParams::default_instance_ = NULL;

LogOptionalParams* LogOptionalParams::New() const {
  return new LogOptionalParams;
}

void LogOptionalParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    para1_ = 0;
    para2_ = 0;
    para3_ = 0;
    para4_ = 0;
    para5_ = 0;
    if (has_para6()) {
      if (para6_ != &::google::protobuf::internal::kEmptyString) {
        para6_->clear();
      }
    }
    if (has_para7()) {
      if (para7_ != &::google::protobuf::internal::kEmptyString) {
        para7_->clear();
      }
    }
    if (has_para8()) {
      if (para8_ != &::google::protobuf::internal::kEmptyString) {
        para8_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_para9()) {
      if (para9_ != &::google::protobuf::internal::kEmptyString) {
        para9_->clear();
      }
    }
    if (has_para10()) {
      if (para10_ != &::google::protobuf::internal::kEmptyString) {
        para10_->clear();
      }
    }
    para11_ = GOOGLE_LONGLONG(0);
    para12_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogOptionalParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 para1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &para1_)));
          set_has_para1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_para2;
        break;
      }
      
      // optional int32 para2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &para2_)));
          set_has_para2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_para3;
        break;
      }
      
      // optional int32 para3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &para3_)));
          set_has_para3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_para4;
        break;
      }
      
      // optional int32 para4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &para4_)));
          set_has_para4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_para5;
        break;
      }
      
      // optional int32 para5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &para5_)));
          set_has_para5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_para6;
        break;
      }
      
      // optional string para6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para6().data(), this->para6().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_para7;
        break;
      }
      
      // optional string para7 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para7()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para7().data(), this->para7().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_para8;
        break;
      }
      
      // optional string para8 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para8()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para8().data(), this->para8().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_para9;
        break;
      }
      
      // optional string para9 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para9()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para9().data(), this->para9().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_para10;
        break;
      }
      
      // optional string para10 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para10()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para10().data(), this->para10().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_para11;
        break;
      }
      
      // optional int64 para11 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &para11_)));
          set_has_para11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_para12;
        break;
      }
      
      // optional int64 para12 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_para12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &para12_)));
          set_has_para12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogOptionalParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 para1 = 1;
  if (has_para1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->para1(), output);
  }
  
  // optional int32 para2 = 2;
  if (has_para2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->para2(), output);
  }
  
  // optional int32 para3 = 3;
  if (has_para3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->para3(), output);
  }
  
  // optional int32 para4 = 4;
  if (has_para4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->para4(), output);
  }
  
  // optional int32 para5 = 5;
  if (has_para5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->para5(), output);
  }
  
  // optional string para6 = 6;
  if (has_para6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para6().data(), this->para6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->para6(), output);
  }
  
  // optional string para7 = 7;
  if (has_para7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para7().data(), this->para7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->para7(), output);
  }
  
  // optional string para8 = 8;
  if (has_para8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para8().data(), this->para8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->para8(), output);
  }
  
  // optional string para9 = 9;
  if (has_para9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para9().data(), this->para9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->para9(), output);
  }
  
  // optional string para10 = 10;
  if (has_para10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para10().data(), this->para10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->para10(), output);
  }
  
  // optional int64 para11 = 11;
  if (has_para11()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->para11(), output);
  }
  
  // optional int64 para12 = 12;
  if (has_para12()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->para12(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogOptionalParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 para1 = 1;
  if (has_para1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->para1(), target);
  }
  
  // optional int32 para2 = 2;
  if (has_para2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->para2(), target);
  }
  
  // optional int32 para3 = 3;
  if (has_para3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->para3(), target);
  }
  
  // optional int32 para4 = 4;
  if (has_para4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->para4(), target);
  }
  
  // optional int32 para5 = 5;
  if (has_para5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->para5(), target);
  }
  
  // optional string para6 = 6;
  if (has_para6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para6().data(), this->para6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->para6(), target);
  }
  
  // optional string para7 = 7;
  if (has_para7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para7().data(), this->para7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->para7(), target);
  }
  
  // optional string para8 = 8;
  if (has_para8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para8().data(), this->para8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->para8(), target);
  }
  
  // optional string para9 = 9;
  if (has_para9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para9().data(), this->para9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->para9(), target);
  }
  
  // optional string para10 = 10;
  if (has_para10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para10().data(), this->para10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->para10(), target);
  }
  
  // optional int64 para11 = 11;
  if (has_para11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->para11(), target);
  }
  
  // optional int64 para12 = 12;
  if (has_para12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->para12(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogOptionalParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 para1 = 1;
    if (has_para1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->para1());
    }
    
    // optional int32 para2 = 2;
    if (has_para2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->para2());
    }
    
    // optional int32 para3 = 3;
    if (has_para3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->para3());
    }
    
    // optional int32 para4 = 4;
    if (has_para4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->para4());
    }
    
    // optional int32 para5 = 5;
    if (has_para5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->para5());
    }
    
    // optional string para6 = 6;
    if (has_para6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para6());
    }
    
    // optional string para7 = 7;
    if (has_para7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para7());
    }
    
    // optional string para8 = 8;
    if (has_para8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para8());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string para9 = 9;
    if (has_para9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para9());
    }
    
    // optional string para10 = 10;
    if (has_para10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para10());
    }
    
    // optional int64 para11 = 11;
    if (has_para11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->para11());
    }
    
    // optional int64 para12 = 12;
    if (has_para12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->para12());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogOptionalParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogOptionalParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogOptionalParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogOptionalParams::MergeFrom(const LogOptionalParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_para1()) {
      set_para1(from.para1());
    }
    if (from.has_para2()) {
      set_para2(from.para2());
    }
    if (from.has_para3()) {
      set_para3(from.para3());
    }
    if (from.has_para4()) {
      set_para4(from.para4());
    }
    if (from.has_para5()) {
      set_para5(from.para5());
    }
    if (from.has_para6()) {
      set_para6(from.para6());
    }
    if (from.has_para7()) {
      set_para7(from.para7());
    }
    if (from.has_para8()) {
      set_para8(from.para8());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_para9()) {
      set_para9(from.para9());
    }
    if (from.has_para10()) {
      set_para10(from.para10());
    }
    if (from.has_para11()) {
      set_para11(from.para11());
    }
    if (from.has_para12()) {
      set_para12(from.para12());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogOptionalParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogOptionalParams::CopyFrom(const LogOptionalParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogOptionalParams::IsInitialized() const {
  
  return true;
}

void LogOptionalParams::Swap(LogOptionalParams* other) {
  if (other != this) {
    std::swap(para1_, other->para1_);
    std::swap(para2_, other->para2_);
    std::swap(para3_, other->para3_);
    std::swap(para4_, other->para4_);
    std::swap(para5_, other->para5_);
    std::swap(para6_, other->para6_);
    std::swap(para7_, other->para7_);
    std::swap(para8_, other->para8_);
    std::swap(para9_, other->para9_);
    std::swap(para10_, other->para10_);
    std::swap(para11_, other->para11_);
    std::swap(para12_, other->para12_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogOptionalParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogOptionalParams_descriptor_;
  metadata.reflection = LogOptionalParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindPlayerNameGuidRequest::kGuidFieldNumber;
const int BindPlayerNameGuidRequest::kNameFieldNumber;
const int BindPlayerNameGuidRequest::kServerIdFieldNumber;
#endif  // !_MSC_VER

BindPlayerNameGuidRequest::BindPlayerNameGuidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindPlayerNameGuidRequest::InitAsDefaultInstance() {
}

BindPlayerNameGuidRequest::BindPlayerNameGuidRequest(const BindPlayerNameGuidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindPlayerNameGuidRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindPlayerNameGuidRequest::~BindPlayerNameGuidRequest() {
  SharedDtor();
}

void BindPlayerNameGuidRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BindPlayerNameGuidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindPlayerNameGuidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindPlayerNameGuidRequest_descriptor_;
}

const BindPlayerNameGuidRequest& BindPlayerNameGuidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

BindPlayerNameGuidRequest* BindPlayerNameGuidRequest::default_instance_ = NULL;

BindPlayerNameGuidRequest* BindPlayerNameGuidRequest::New() const {
  return new BindPlayerNameGuidRequest;
}

void BindPlayerNameGuidRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindPlayerNameGuidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindPlayerNameGuidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindPlayerNameGuidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindPlayerNameGuidRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindPlayerNameGuidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindPlayerNameGuidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindPlayerNameGuidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindPlayerNameGuidRequest::MergeFrom(const BindPlayerNameGuidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindPlayerNameGuidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindPlayerNameGuidRequest::CopyFrom(const BindPlayerNameGuidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindPlayerNameGuidRequest::IsInitialized() const {
  
  return true;
}

void BindPlayerNameGuidRequest::Swap(BindPlayerNameGuidRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindPlayerNameGuidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindPlayerNameGuidRequest_descriptor_;
  metadata.reflection = BindPlayerNameGuidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficStatsRequest::kCountFieldNumber;
#endif  // !_MSC_VER

TrafficStatsRequest::TrafficStatsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficStatsRequest::InitAsDefaultInstance() {
}

TrafficStatsRequest::TrafficStatsRequest(const TrafficStatsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficStatsRequest::~TrafficStatsRequest() {
  SharedDtor();
}

void TrafficStatsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficStatsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficStatsRequest_descriptor_;
}

const TrafficStatsRequest& TrafficStatsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

TrafficStatsRequest* TrafficStatsRequest::default_instance_ = NULL;

TrafficStatsRequest* TrafficStatsRequest::New() const {
  return new TrafficStatsRequest;
}

void TrafficStatsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficStatsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficStatsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficStatsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficStatsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficStatsRequest::MergeFrom(const TrafficStatsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficStatsRequest::CopyFrom(const TrafficStatsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficStatsRequest::IsInitialized() const {
  
  return true;
}

void TrafficStatsRequest::Swap(TrafficStatsRequest* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficStatsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficStatsRequest_descriptor_;
  metadata.reflection = TrafficStatsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficStats::kTickSFieldNumber;
const int TrafficStats::kInTrafficFieldNumber;
const int TrafficStats::kOutTrafficFieldNumber;
#endif  // !_MSC_VER

TrafficStats::TrafficStats()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficStats::InitAsDefaultInstance() {
}

TrafficStats::TrafficStats(const TrafficStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficStats::SharedCtor() {
  _cached_size_ = 0;
  tick_s_ = 0;
  in_traffic_ = 0;
  out_traffic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficStats::~TrafficStats() {
  SharedDtor();
}

void TrafficStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficStats_descriptor_;
}

const TrafficStats& TrafficStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

TrafficStats* TrafficStats::default_instance_ = NULL;

TrafficStats* TrafficStats::New() const {
  return new TrafficStats;
}

void TrafficStats::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_s_ = 0;
    in_traffic_ = 0;
    out_traffic_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tick_s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_s_)));
          set_has_tick_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_in_traffic;
        break;
      }
      
      // required double in_traffic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_in_traffic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &in_traffic_)));
          set_has_in_traffic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_out_traffic;
        break;
      }
      
      // required double out_traffic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_out_traffic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &out_traffic_)));
          set_has_out_traffic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tick_s = 1;
  if (has_tick_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick_s(), output);
  }
  
  // required double in_traffic = 2;
  if (has_in_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->in_traffic(), output);
  }
  
  // required double out_traffic = 3;
  if (has_out_traffic()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->out_traffic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tick_s = 1;
  if (has_tick_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick_s(), target);
  }
  
  // required double in_traffic = 2;
  if (has_in_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->in_traffic(), target);
  }
  
  // required double out_traffic = 3;
  if (has_out_traffic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->out_traffic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficStats::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tick_s = 1;
    if (has_tick_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_s());
    }
    
    // required double in_traffic = 2;
    if (has_in_traffic()) {
      total_size += 1 + 8;
    }
    
    // required double out_traffic = 3;
    if (has_out_traffic()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficStats::MergeFrom(const TrafficStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick_s()) {
      set_tick_s(from.tick_s());
    }
    if (from.has_in_traffic()) {
      set_in_traffic(from.in_traffic());
    }
    if (from.has_out_traffic()) {
      set_out_traffic(from.out_traffic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficStats::CopyFrom(const TrafficStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TrafficStats::Swap(TrafficStats* other) {
  if (other != this) {
    std::swap(tick_s_, other->tick_s_);
    std::swap(in_traffic_, other->in_traffic_);
    std::swap(out_traffic_, other->out_traffic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficStats_descriptor_;
  metadata.reflection = TrafficStats_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficStatsResponse::kDataFieldNumber;
#endif  // !_MSC_VER

TrafficStatsResponse::TrafficStatsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficStatsResponse::InitAsDefaultInstance() {
}

TrafficStatsResponse::TrafficStatsResponse(const TrafficStatsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficStatsResponse::~TrafficStatsResponse() {
  SharedDtor();
}

void TrafficStatsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficStatsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficStatsResponse_descriptor_;
}

const TrafficStatsResponse& TrafficStatsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

TrafficStatsResponse* TrafficStatsResponse::default_instance_ = NULL;

TrafficStatsResponse* TrafficStatsResponse::New() const {
  return new TrafficStatsResponse;
}

void TrafficStatsResponse::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.TrafficStats data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.TrafficStats data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficStatsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.TrafficStats data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficStatsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.TrafficStats data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficStatsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficStatsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficStatsResponse::MergeFrom(const TrafficStatsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficStatsResponse::CopyFrom(const TrafficStatsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficStatsResponse::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void TrafficStatsResponse::Swap(TrafficStatsResponse* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficStatsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficStatsResponse_descriptor_;
  metadata.reflection = TrafficStatsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTalkSystemRequest::kContentFieldNumber;
#endif  // !_MSC_VER

GMTalkSystemRequest::GMTalkSystemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTalkSystemRequest::InitAsDefaultInstance() {
}

GMTalkSystemRequest::GMTalkSystemRequest(const GMTalkSystemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTalkSystemRequest::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTalkSystemRequest::~GMTalkSystemRequest() {
  SharedDtor();
}

void GMTalkSystemRequest::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GMTalkSystemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTalkSystemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTalkSystemRequest_descriptor_;
}

const GMTalkSystemRequest& GMTalkSystemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMTalkSystemRequest* GMTalkSystemRequest::default_instance_ = NULL;

GMTalkSystemRequest* GMTalkSystemRequest::New() const {
  return new GMTalkSystemRequest;
}

void GMTalkSystemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTalkSystemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTalkSystemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTalkSystemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTalkSystemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTalkSystemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTalkSystemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTalkSystemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTalkSystemRequest::MergeFrom(const GMTalkSystemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTalkSystemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTalkSystemRequest::CopyFrom(const GMTalkSystemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTalkSystemRequest::IsInitialized() const {
  
  return true;
}

void GMTalkSystemRequest::Swap(GMTalkSystemRequest* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTalkSystemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTalkSystemRequest_descriptor_;
  metadata.reflection = GMTalkSystemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMTalkSystemResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMTalkSystemResponse::GMTalkSystemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMTalkSystemResponse::InitAsDefaultInstance() {
}

GMTalkSystemResponse::GMTalkSystemResponse(const GMTalkSystemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMTalkSystemResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMTalkSystemResponse::~GMTalkSystemResponse() {
  SharedDtor();
}

void GMTalkSystemResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMTalkSystemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMTalkSystemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMTalkSystemResponse_descriptor_;
}

const GMTalkSystemResponse& GMTalkSystemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMTalkSystemResponse* GMTalkSystemResponse::default_instance_ = NULL;

GMTalkSystemResponse* GMTalkSystemResponse::New() const {
  return new GMTalkSystemResponse;
}

void GMTalkSystemResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMTalkSystemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMTalkSystemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMTalkSystemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMTalkSystemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMTalkSystemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMTalkSystemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMTalkSystemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMTalkSystemResponse::MergeFrom(const GMTalkSystemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMTalkSystemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMTalkSystemResponse::CopyFrom(const GMTalkSystemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMTalkSystemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMTalkSystemResponse::Swap(GMTalkSystemResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMTalkSystemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMTalkSystemResponse_descriptor_;
  metadata.reflection = GMTalkSystemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetPlayerInfoRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

GMGetPlayerInfoRequest::GMGetPlayerInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetPlayerInfoRequest::InitAsDefaultInstance() {
}

GMGetPlayerInfoRequest::GMGetPlayerInfoRequest(const GMGetPlayerInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetPlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetPlayerInfoRequest::~GMGetPlayerInfoRequest() {
  SharedDtor();
}

void GMGetPlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetPlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetPlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetPlayerInfoRequest_descriptor_;
}

const GMGetPlayerInfoRequest& GMGetPlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetPlayerInfoRequest* GMGetPlayerInfoRequest::default_instance_ = NULL;

GMGetPlayerInfoRequest* GMGetPlayerInfoRequest::New() const {
  return new GMGetPlayerInfoRequest;
}

void GMGetPlayerInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetPlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetPlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetPlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetPlayerInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetPlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetPlayerInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetPlayerInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetPlayerInfoRequest::MergeFrom(const GMGetPlayerInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetPlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetPlayerInfoRequest::CopyFrom(const GMGetPlayerInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetPlayerInfoRequest::IsInitialized() const {
  
  return true;
}

void GMGetPlayerInfoRequest::Swap(GMGetPlayerInfoRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetPlayerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetPlayerInfoRequest_descriptor_;
  metadata.reflection = GMGetPlayerInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetPlayerInfoResponse::kErrorCodeFieldNumber;
const int GMGetPlayerInfoResponse::kPlayerInfoFieldNumber;
const int GMGetPlayerInfoResponse::kBankFieldNumber;
const int GMGetPlayerInfoResponse::kYinglingListFieldNumber;
const int GMGetPlayerInfoResponse::kUidFieldNumber;
#endif  // !_MSC_VER

GMGetPlayerInfoResponse::GMGetPlayerInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetPlayerInfoResponse::InitAsDefaultInstance() {
  player_info_ = const_cast< ::protocols::common::PlayerInfo*>(&::protocols::common::PlayerInfo::default_instance());
  bank_ = const_cast< ::protocols::common::BankInfo*>(&::protocols::common::BankInfo::default_instance());
}

GMGetPlayerInfoResponse::GMGetPlayerInfoResponse(const GMGetPlayerInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetPlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  player_info_ = NULL;
  bank_ = NULL;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetPlayerInfoResponse::~GMGetPlayerInfoResponse() {
  SharedDtor();
}

void GMGetPlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
    delete bank_;
  }
}

void GMGetPlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetPlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetPlayerInfoResponse_descriptor_;
}

const GMGetPlayerInfoResponse& GMGetPlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetPlayerInfoResponse* GMGetPlayerInfoResponse::default_instance_ = NULL;

GMGetPlayerInfoResponse* GMGetPlayerInfoResponse::New() const {
  return new GMGetPlayerInfoResponse;
}

void GMGetPlayerInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::protocols::common::PlayerInfo::Clear();
    }
    if (has_bank()) {
      if (bank_ != NULL) bank_->::protocols::common::BankInfo::Clear();
    }
    uid_ = 0;
  }
  yingling_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetPlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_info;
        break;
      }
      
      // optional .protocols.common.PlayerInfo player_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bank;
        break;
      }
      
      // optional .protocols.common.BankInfo bank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yingling_list;
        break;
      }
      
      // repeated .protocols.common.YinglingInfo yingling_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yingling_list;
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }
      
      // optional int32 uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetPlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 2;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_info(), output);
  }
  
  // optional .protocols.common.BankInfo bank = 3;
  if (has_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bank(), output);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_list = 4;
  for (int i = 0; i < this->yingling_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->yingling_list(i), output);
  }
  
  // optional int32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetPlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.PlayerInfo player_info = 2;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_info(), target);
  }
  
  // optional .protocols.common.BankInfo bank = 3;
  if (has_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bank(), target);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_list = 4;
  for (int i = 0; i < this->yingling_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->yingling_list(i), target);
  }
  
  // optional int32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetPlayerInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.PlayerInfo player_info = 2;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }
    
    // optional .protocols.common.BankInfo bank = 3;
    if (has_bank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bank());
    }
    
    // optional int32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
  }
  // repeated .protocols.common.YinglingInfo yingling_list = 4;
  total_size += 1 * this->yingling_list_size();
  for (int i = 0; i < this->yingling_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetPlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetPlayerInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetPlayerInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetPlayerInfoResponse::MergeFrom(const GMGetPlayerInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_list_.MergeFrom(from.yingling_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::protocols::common::PlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_bank()) {
      mutable_bank()->::protocols::common::BankInfo::MergeFrom(from.bank());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetPlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetPlayerInfoResponse::CopyFrom(const GMGetPlayerInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetPlayerInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < yingling_list_size(); i++) {
    if (!this->yingling_list(i).IsInitialized()) return false;
  }
  return true;
}

void GMGetPlayerInfoResponse::Swap(GMGetPlayerInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(player_info_, other->player_info_);
    std::swap(bank_, other->bank_);
    yingling_list_.Swap(&other->yingling_list_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetPlayerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetPlayerInfoResponse_descriptor_;
  metadata.reflection = GMGetPlayerInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetPlayerVipLevelRequest::kRoleIdFieldNumber;
const int GMSetPlayerVipLevelRequest::kVipLevelFieldNumber;
const int GMSetPlayerVipLevelRequest::kVipDurationSecFieldNumber;
#endif  // !_MSC_VER

GMSetPlayerVipLevelRequest::GMSetPlayerVipLevelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetPlayerVipLevelRequest::InitAsDefaultInstance() {
}

GMSetPlayerVipLevelRequest::GMSetPlayerVipLevelRequest(const GMSetPlayerVipLevelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetPlayerVipLevelRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  vip_level_ = 0;
  vip_duration_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetPlayerVipLevelRequest::~GMSetPlayerVipLevelRequest() {
  SharedDtor();
}

void GMSetPlayerVipLevelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetPlayerVipLevelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetPlayerVipLevelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetPlayerVipLevelRequest_descriptor_;
}

const GMSetPlayerVipLevelRequest& GMSetPlayerVipLevelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetPlayerVipLevelRequest* GMSetPlayerVipLevelRequest::default_instance_ = NULL;

GMSetPlayerVipLevelRequest* GMSetPlayerVipLevelRequest::New() const {
  return new GMSetPlayerVipLevelRequest;
}

void GMSetPlayerVipLevelRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    vip_level_ = 0;
    vip_duration_sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetPlayerVipLevelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level;
        break;
      }
      
      // required int32 vip_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_duration_sec;
        break;
      }
      
      // required int32 vip_duration_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_duration_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_duration_sec_)));
          set_has_vip_duration_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetPlayerVipLevelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // required int32 vip_level = 2;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_level(), output);
  }
  
  // required int32 vip_duration_sec = 3;
  if (has_vip_duration_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip_duration_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetPlayerVipLevelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // required int32 vip_level = 2;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_level(), target);
  }
  
  // required int32 vip_duration_sec = 3;
  if (has_vip_duration_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip_duration_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetPlayerVipLevelRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // required int32 vip_level = 2;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // required int32 vip_duration_sec = 3;
    if (has_vip_duration_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_duration_sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetPlayerVipLevelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetPlayerVipLevelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetPlayerVipLevelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetPlayerVipLevelRequest::MergeFrom(const GMSetPlayerVipLevelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_duration_sec()) {
      set_vip_duration_sec(from.vip_duration_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetPlayerVipLevelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetPlayerVipLevelRequest::CopyFrom(const GMSetPlayerVipLevelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetPlayerVipLevelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GMSetPlayerVipLevelRequest::Swap(GMSetPlayerVipLevelRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_duration_sec_, other->vip_duration_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetPlayerVipLevelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetPlayerVipLevelRequest_descriptor_;
  metadata.reflection = GMSetPlayerVipLevelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetPlayerVipLevelResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetPlayerVipLevelResponse::GMSetPlayerVipLevelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetPlayerVipLevelResponse::InitAsDefaultInstance() {
}

GMSetPlayerVipLevelResponse::GMSetPlayerVipLevelResponse(const GMSetPlayerVipLevelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetPlayerVipLevelResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetPlayerVipLevelResponse::~GMSetPlayerVipLevelResponse() {
  SharedDtor();
}

void GMSetPlayerVipLevelResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetPlayerVipLevelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetPlayerVipLevelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetPlayerVipLevelResponse_descriptor_;
}

const GMSetPlayerVipLevelResponse& GMSetPlayerVipLevelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetPlayerVipLevelResponse* GMSetPlayerVipLevelResponse::default_instance_ = NULL;

GMSetPlayerVipLevelResponse* GMSetPlayerVipLevelResponse::New() const {
  return new GMSetPlayerVipLevelResponse;
}

void GMSetPlayerVipLevelResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetPlayerVipLevelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetPlayerVipLevelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetPlayerVipLevelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetPlayerVipLevelResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetPlayerVipLevelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetPlayerVipLevelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetPlayerVipLevelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetPlayerVipLevelResponse::MergeFrom(const GMSetPlayerVipLevelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetPlayerVipLevelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetPlayerVipLevelResponse::CopyFrom(const GMSetPlayerVipLevelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetPlayerVipLevelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetPlayerVipLevelResponse::Swap(GMSetPlayerVipLevelResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetPlayerVipLevelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetPlayerVipLevelResponse_descriptor_;
  metadata.reflection = GMSetPlayerVipLevelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetFlagRequest::kFlagTypeFieldNumber;
const int GMSetFlagRequest::kValueFieldNumber;
#endif  // !_MSC_VER

GMSetFlagRequest::GMSetFlagRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetFlagRequest::InitAsDefaultInstance() {
}

GMSetFlagRequest::GMSetFlagRequest(const GMSetFlagRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetFlagRequest::SharedCtor() {
  _cached_size_ = 0;
  flag_type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetFlagRequest::~GMSetFlagRequest() {
  SharedDtor();
}

void GMSetFlagRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetFlagRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetFlagRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetFlagRequest_descriptor_;
}

const GMSetFlagRequest& GMSetFlagRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetFlagRequest* GMSetFlagRequest::default_instance_ = NULL;

GMSetFlagRequest* GMSetFlagRequest::New() const {
  return new GMSetFlagRequest;
}

void GMSetFlagRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetFlagRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_type_)));
          set_has_flag_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetFlagRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag_type = 1;
  if (has_flag_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag_type(), output);
  }
  
  // optional int32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetFlagRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag_type = 1;
  if (has_flag_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag_type(), target);
  }
  
  // optional int32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetFlagRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag_type = 1;
    if (has_flag_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag_type());
    }
    
    // optional int32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetFlagRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetFlagRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetFlagRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetFlagRequest::MergeFrom(const GMSetFlagRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag_type()) {
      set_flag_type(from.flag_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetFlagRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetFlagRequest::CopyFrom(const GMSetFlagRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetFlagRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetFlagRequest::Swap(GMSetFlagRequest* other) {
  if (other != this) {
    std::swap(flag_type_, other->flag_type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetFlagRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetFlagRequest_descriptor_;
  metadata.reflection = GMSetFlagRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetFlagResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetFlagResponse::GMSetFlagResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetFlagResponse::InitAsDefaultInstance() {
}

GMSetFlagResponse::GMSetFlagResponse(const GMSetFlagResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetFlagResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetFlagResponse::~GMSetFlagResponse() {
  SharedDtor();
}

void GMSetFlagResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetFlagResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetFlagResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetFlagResponse_descriptor_;
}

const GMSetFlagResponse& GMSetFlagResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetFlagResponse* GMSetFlagResponse::default_instance_ = NULL;

GMSetFlagResponse* GMSetFlagResponse::New() const {
  return new GMSetFlagResponse;
}

void GMSetFlagResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetFlagResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetFlagResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetFlagResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetFlagResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetFlagResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetFlagResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetFlagResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetFlagResponse::MergeFrom(const GMSetFlagResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetFlagResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetFlagResponse::CopyFrom(const GMSetFlagResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetFlagResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetFlagResponse::Swap(GMSetFlagResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetFlagResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetFlagResponse_descriptor_;
  metadata.reflection = GMSetFlagResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int USRIdPair::kUidFieldNumber;
const int USRIdPair::kServerIdFieldNumber;
const int USRIdPair::kRoleIdFieldNumber;
const int USRIdPair::kNameFieldNumber;
#endif  // !_MSC_VER

USRIdPair::USRIdPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void USRIdPair::InitAsDefaultInstance() {
}

USRIdPair::USRIdPair(const USRIdPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void USRIdPair::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  server_id_ = 0;
  role_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

USRIdPair::~USRIdPair() {
  SharedDtor();
}

void USRIdPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void USRIdPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* USRIdPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return USRIdPair_descriptor_;
}

const USRIdPair& USRIdPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

USRIdPair* USRIdPair::default_instance_ = NULL;

USRIdPair* USRIdPair::New() const {
  return new USRIdPair;
}

void USRIdPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    server_id_ = 0;
    role_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool USRIdPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }
      
      // optional int32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void USRIdPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }
  
  // optional int32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_id(), output);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* USRIdPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }
  
  // optional int32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_id(), target);
  }
  
  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int USRIdPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void USRIdPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const USRIdPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const USRIdPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void USRIdPair::MergeFrom(const USRIdPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void USRIdPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USRIdPair::CopyFrom(const USRIdPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USRIdPair::IsInitialized() const {
  
  return true;
}

void USRIdPair::Swap(USRIdPair* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(server_id_, other->server_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata USRIdPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = USRIdPair_descriptor_;
  metadata.reflection = USRIdPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryIdsRequest::kIdsFieldNumber;
#endif  // !_MSC_VER

GMQueryIdsRequest::GMQueryIdsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryIdsRequest::InitAsDefaultInstance() {
}

GMQueryIdsRequest::GMQueryIdsRequest(const GMQueryIdsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryIdsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryIdsRequest::~GMQueryIdsRequest() {
  SharedDtor();
}

void GMQueryIdsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryIdsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryIdsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryIdsRequest_descriptor_;
}

const GMQueryIdsRequest& GMQueryIdsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryIdsRequest* GMQueryIdsRequest::default_instance_ = NULL;

GMQueryIdsRequest* GMQueryIdsRequest::New() const {
  return new GMQueryIdsRequest;
}

void GMQueryIdsRequest::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryIdsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.USRIdPair ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryIdsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryIdsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryIdsRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.USRIdPair ids = 1;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryIdsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryIdsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryIdsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryIdsRequest::MergeFrom(const GMQueryIdsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryIdsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryIdsRequest::CopyFrom(const GMQueryIdsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryIdsRequest::IsInitialized() const {
  
  return true;
}

void GMQueryIdsRequest::Swap(GMQueryIdsRequest* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryIdsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryIdsRequest_descriptor_;
  metadata.reflection = GMQueryIdsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryIdsResponse::kIdsFieldNumber;
#endif  // !_MSC_VER

GMQueryIdsResponse::GMQueryIdsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryIdsResponse::InitAsDefaultInstance() {
}

GMQueryIdsResponse::GMQueryIdsResponse(const GMQueryIdsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryIdsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryIdsResponse::~GMQueryIdsResponse() {
  SharedDtor();
}

void GMQueryIdsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryIdsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryIdsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryIdsResponse_descriptor_;
}

const GMQueryIdsResponse& GMQueryIdsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryIdsResponse* GMQueryIdsResponse::default_instance_ = NULL;

GMQueryIdsResponse* GMQueryIdsResponse::New() const {
  return new GMQueryIdsResponse;
}

void GMQueryIdsResponse::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryIdsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.USRIdPair ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryIdsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryIdsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryIdsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.USRIdPair ids = 1;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryIdsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryIdsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryIdsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryIdsResponse::MergeFrom(const GMQueryIdsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryIdsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryIdsResponse::CopyFrom(const GMQueryIdsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryIdsResponse::IsInitialized() const {
  
  return true;
}

void GMQueryIdsResponse::Swap(GMQueryIdsResponse* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryIdsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryIdsResponse_descriptor_;
  metadata.reflection = GMQueryIdsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBanPlayerRequest::kRoleIdFieldNumber;
const int GMBanPlayerRequest::kSetBanSecFieldNumber;
const int GMBanPlayerRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

GMBanPlayerRequest::GMBanPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBanPlayerRequest::InitAsDefaultInstance() {
}

GMBanPlayerRequest::GMBanPlayerRequest(const GMBanPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBanPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  set_ban_sec_ = 0;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBanPlayerRequest::~GMBanPlayerRequest() {
  SharedDtor();
}

void GMBanPlayerRequest::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void GMBanPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBanPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBanPlayerRequest_descriptor_;
}

const GMBanPlayerRequest& GMBanPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMBanPlayerRequest* GMBanPlayerRequest::default_instance_ = NULL;

GMBanPlayerRequest* GMBanPlayerRequest::New() const {
  return new GMBanPlayerRequest;
}

void GMBanPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    set_ban_sec_ = 0;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBanPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_set_ban_sec;
        break;
      }
      
      // optional int32 set_ban_sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_ban_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_ban_sec_)));
          set_has_set_ban_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }
      
      // optional bytes reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBanPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // optional int32 set_ban_sec = 2;
  if (has_set_ban_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_ban_sec(), output);
  }
  
  // optional bytes reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBanPlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // optional int32 set_ban_sec = 2;
  if (has_set_ban_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->set_ban_sec(), target);
  }
  
  // optional bytes reason = 3;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBanPlayerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // optional int32 set_ban_sec = 2;
    if (has_set_ban_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_ban_sec());
    }
    
    // optional bytes reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBanPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBanPlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBanPlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBanPlayerRequest::MergeFrom(const GMBanPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_set_ban_sec()) {
      set_set_ban_sec(from.set_ban_sec());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBanPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBanPlayerRequest::CopyFrom(const GMBanPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBanPlayerRequest::IsInitialized() const {
  
  return true;
}

void GMBanPlayerRequest::Swap(GMBanPlayerRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(set_ban_sec_, other->set_ban_sec_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBanPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBanPlayerRequest_descriptor_;
  metadata.reflection = GMBanPlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBanPlayerResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMBanPlayerResponse::GMBanPlayerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBanPlayerResponse::InitAsDefaultInstance() {
}

GMBanPlayerResponse::GMBanPlayerResponse(const GMBanPlayerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBanPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBanPlayerResponse::~GMBanPlayerResponse() {
  SharedDtor();
}

void GMBanPlayerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMBanPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBanPlayerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBanPlayerResponse_descriptor_;
}

const GMBanPlayerResponse& GMBanPlayerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMBanPlayerResponse* GMBanPlayerResponse::default_instance_ = NULL;

GMBanPlayerResponse* GMBanPlayerResponse::New() const {
  return new GMBanPlayerResponse;
}

void GMBanPlayerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBanPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBanPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBanPlayerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBanPlayerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBanPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBanPlayerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBanPlayerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBanPlayerResponse::MergeFrom(const GMBanPlayerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBanPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBanPlayerResponse::CopyFrom(const GMBanPlayerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBanPlayerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMBanPlayerResponse::Swap(GMBanPlayerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBanPlayerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBanPlayerResponse_descriptor_;
  metadata.reflection = GMBanPlayerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryRoleByNameRequest::kNameFieldNumber;
const int GMQueryRoleByNameRequest::kServerIdFieldNumber;
#endif  // !_MSC_VER

GMQueryRoleByNameRequest::GMQueryRoleByNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryRoleByNameRequest::InitAsDefaultInstance() {
}

GMQueryRoleByNameRequest::GMQueryRoleByNameRequest(const GMQueryRoleByNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryRoleByNameRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryRoleByNameRequest::~GMQueryRoleByNameRequest() {
  SharedDtor();
}

void GMQueryRoleByNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMQueryRoleByNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryRoleByNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryRoleByNameRequest_descriptor_;
}

const GMQueryRoleByNameRequest& GMQueryRoleByNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryRoleByNameRequest* GMQueryRoleByNameRequest::default_instance_ = NULL;

GMQueryRoleByNameRequest* GMQueryRoleByNameRequest::New() const {
  return new GMQueryRoleByNameRequest;
}

void GMQueryRoleByNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryRoleByNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryRoleByNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryRoleByNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }
  
  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryRoleByNameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryRoleByNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryRoleByNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryRoleByNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryRoleByNameRequest::MergeFrom(const GMQueryRoleByNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryRoleByNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryRoleByNameRequest::CopyFrom(const GMQueryRoleByNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryRoleByNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMQueryRoleByNameRequest::Swap(GMQueryRoleByNameRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryRoleByNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryRoleByNameRequest_descriptor_;
  metadata.reflection = GMQueryRoleByNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMQueryRoleByNameResponse::kIdsFieldNumber;
#endif  // !_MSC_VER

GMQueryRoleByNameResponse::GMQueryRoleByNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMQueryRoleByNameResponse::InitAsDefaultInstance() {
}

GMQueryRoleByNameResponse::GMQueryRoleByNameResponse(const GMQueryRoleByNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMQueryRoleByNameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMQueryRoleByNameResponse::~GMQueryRoleByNameResponse() {
  SharedDtor();
}

void GMQueryRoleByNameResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMQueryRoleByNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMQueryRoleByNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMQueryRoleByNameResponse_descriptor_;
}

const GMQueryRoleByNameResponse& GMQueryRoleByNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMQueryRoleByNameResponse* GMQueryRoleByNameResponse::default_instance_ = NULL;

GMQueryRoleByNameResponse* GMQueryRoleByNameResponse::New() const {
  return new GMQueryRoleByNameResponse;
}

void GMQueryRoleByNameResponse::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMQueryRoleByNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.USRIdPair ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMQueryRoleByNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMQueryRoleByNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.USRIdPair ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMQueryRoleByNameResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.USRIdPair ids = 1;
  total_size += 1 * this->ids_size();
  for (int i = 0; i < this->ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMQueryRoleByNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMQueryRoleByNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMQueryRoleByNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMQueryRoleByNameResponse::MergeFrom(const GMQueryRoleByNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMQueryRoleByNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMQueryRoleByNameResponse::CopyFrom(const GMQueryRoleByNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMQueryRoleByNameResponse::IsInitialized() const {
  
  return true;
}

void GMQueryRoleByNameResponse::Swap(GMQueryRoleByNameResponse* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMQueryRoleByNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMQueryRoleByNameResponse_descriptor_;
  metadata.reflection = GMQueryRoleByNameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdatePassInstanceRequest::kInstanceIdFieldNumber;
const int GMUpdatePassInstanceRequest::kInstanceGradeFieldNumber;
#endif  // !_MSC_VER

GMUpdatePassInstanceRequest::GMUpdatePassInstanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdatePassInstanceRequest::InitAsDefaultInstance() {
}

GMUpdatePassInstanceRequest::GMUpdatePassInstanceRequest(const GMUpdatePassInstanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdatePassInstanceRequest::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  instance_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdatePassInstanceRequest::~GMUpdatePassInstanceRequest() {
  SharedDtor();
}

void GMUpdatePassInstanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdatePassInstanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdatePassInstanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdatePassInstanceRequest_descriptor_;
}

const GMUpdatePassInstanceRequest& GMUpdatePassInstanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdatePassInstanceRequest* GMUpdatePassInstanceRequest::default_instance_ = NULL;

GMUpdatePassInstanceRequest* GMUpdatePassInstanceRequest::New() const {
  return new GMUpdatePassInstanceRequest;
}

void GMUpdatePassInstanceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    instance_grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdatePassInstanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance_grade;
        break;
      }
      
      // required int32 instance_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_grade_)));
          set_has_instance_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdatePassInstanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // required int32 instance_grade = 2;
  if (has_instance_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instance_grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdatePassInstanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // required int32 instance_grade = 2;
  if (has_instance_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instance_grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdatePassInstanceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // required int32 instance_grade = 2;
    if (has_instance_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdatePassInstanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdatePassInstanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdatePassInstanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdatePassInstanceRequest::MergeFrom(const GMUpdatePassInstanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_instance_grade()) {
      set_instance_grade(from.instance_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdatePassInstanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdatePassInstanceRequest::CopyFrom(const GMUpdatePassInstanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdatePassInstanceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMUpdatePassInstanceRequest::Swap(GMUpdatePassInstanceRequest* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(instance_grade_, other->instance_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdatePassInstanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdatePassInstanceRequest_descriptor_;
  metadata.reflection = GMUpdatePassInstanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMUpdatePassInstanceResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMUpdatePassInstanceResponse::GMUpdatePassInstanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMUpdatePassInstanceResponse::InitAsDefaultInstance() {
}

GMUpdatePassInstanceResponse::GMUpdatePassInstanceResponse(const GMUpdatePassInstanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMUpdatePassInstanceResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMUpdatePassInstanceResponse::~GMUpdatePassInstanceResponse() {
  SharedDtor();
}

void GMUpdatePassInstanceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMUpdatePassInstanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMUpdatePassInstanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMUpdatePassInstanceResponse_descriptor_;
}

const GMUpdatePassInstanceResponse& GMUpdatePassInstanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMUpdatePassInstanceResponse* GMUpdatePassInstanceResponse::default_instance_ = NULL;

GMUpdatePassInstanceResponse* GMUpdatePassInstanceResponse::New() const {
  return new GMUpdatePassInstanceResponse;
}

void GMUpdatePassInstanceResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMUpdatePassInstanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMUpdatePassInstanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMUpdatePassInstanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMUpdatePassInstanceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMUpdatePassInstanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMUpdatePassInstanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMUpdatePassInstanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMUpdatePassInstanceResponse::MergeFrom(const GMUpdatePassInstanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMUpdatePassInstanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMUpdatePassInstanceResponse::CopyFrom(const GMUpdatePassInstanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMUpdatePassInstanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMUpdatePassInstanceResponse::Swap(GMUpdatePassInstanceResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMUpdatePassInstanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMUpdatePassInstanceResponse_descriptor_;
  metadata.reflection = GMUpdatePassInstanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetLimitCountRequest::kPlayerIdFieldNumber;
const int GMSetLimitCountRequest::kLimitTypeFieldNumber;
const int GMSetLimitCountRequest::kCountValueFieldNumber;
#endif  // !_MSC_VER

GMSetLimitCountRequest::GMSetLimitCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetLimitCountRequest::InitAsDefaultInstance() {
}

GMSetLimitCountRequest::GMSetLimitCountRequest(const GMSetLimitCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetLimitCountRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  limit_type_ = 0;
  count_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetLimitCountRequest::~GMSetLimitCountRequest() {
  SharedDtor();
}

void GMSetLimitCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetLimitCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetLimitCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetLimitCountRequest_descriptor_;
}

const GMSetLimitCountRequest& GMSetLimitCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetLimitCountRequest* GMSetLimitCountRequest::default_instance_ = NULL;

GMSetLimitCountRequest* GMSetLimitCountRequest::New() const {
  return new GMSetLimitCountRequest;
}

void GMSetLimitCountRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    limit_type_ = 0;
    count_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetLimitCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit_type;
        break;
      }
      
      // required int32 limit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_value;
        break;
      }
      
      // required int32 count_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_value_)));
          set_has_count_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetLimitCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  // required int32 limit_type = 2;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_type(), output);
  }
  
  // required int32 count_value = 3;
  if (has_count_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetLimitCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  // required int32 limit_type = 2;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_type(), target);
  }
  
  // required int32 count_value = 3;
  if (has_count_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetLimitCountRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
    // required int32 limit_type = 2;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_type());
    }
    
    // required int32 count_value = 3;
    if (has_count_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetLimitCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetLimitCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetLimitCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetLimitCountRequest::MergeFrom(const GMSetLimitCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_count_value()) {
      set_count_value(from.count_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetLimitCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetLimitCountRequest::CopyFrom(const GMSetLimitCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetLimitCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GMSetLimitCountRequest::Swap(GMSetLimitCountRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(count_value_, other->count_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetLimitCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetLimitCountRequest_descriptor_;
  metadata.reflection = GMSetLimitCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetLimitCountResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetLimitCountResponse::GMSetLimitCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetLimitCountResponse::InitAsDefaultInstance() {
}

GMSetLimitCountResponse::GMSetLimitCountResponse(const GMSetLimitCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetLimitCountResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetLimitCountResponse::~GMSetLimitCountResponse() {
  SharedDtor();
}

void GMSetLimitCountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetLimitCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetLimitCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetLimitCountResponse_descriptor_;
}

const GMSetLimitCountResponse& GMSetLimitCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetLimitCountResponse* GMSetLimitCountResponse::default_instance_ = NULL;

GMSetLimitCountResponse* GMSetLimitCountResponse::New() const {
  return new GMSetLimitCountResponse;
}

void GMSetLimitCountResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetLimitCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetLimitCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetLimitCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetLimitCountResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetLimitCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetLimitCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetLimitCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetLimitCountResponse::MergeFrom(const GMSetLimitCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetLimitCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetLimitCountResponse::CopyFrom(const GMSetLimitCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetLimitCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetLimitCountResponse::Swap(GMSetLimitCountResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetLimitCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetLimitCountResponse_descriptor_;
  metadata.reflection = GMSetLimitCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmQueryPlayerFlagsRequest::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GmQueryPlayerFlagsRequest::GmQueryPlayerFlagsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GmQueryPlayerFlagsRequest::InitAsDefaultInstance() {
}

GmQueryPlayerFlagsRequest::GmQueryPlayerFlagsRequest(const GmQueryPlayerFlagsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GmQueryPlayerFlagsRequest::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmQueryPlayerFlagsRequest::~GmQueryPlayerFlagsRequest() {
  SharedDtor();
}

void GmQueryPlayerFlagsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GmQueryPlayerFlagsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmQueryPlayerFlagsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmQueryPlayerFlagsRequest_descriptor_;
}

const GmQueryPlayerFlagsRequest& GmQueryPlayerFlagsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GmQueryPlayerFlagsRequest* GmQueryPlayerFlagsRequest::default_instance_ = NULL;

GmQueryPlayerFlagsRequest* GmQueryPlayerFlagsRequest::New() const {
  return new GmQueryPlayerFlagsRequest;
}

void GmQueryPlayerFlagsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmQueryPlayerFlagsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GmQueryPlayerFlagsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GmQueryPlayerFlagsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GmQueryPlayerFlagsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmQueryPlayerFlagsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmQueryPlayerFlagsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmQueryPlayerFlagsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmQueryPlayerFlagsRequest::MergeFrom(const GmQueryPlayerFlagsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmQueryPlayerFlagsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmQueryPlayerFlagsRequest::CopyFrom(const GmQueryPlayerFlagsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmQueryPlayerFlagsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GmQueryPlayerFlagsRequest::Swap(GmQueryPlayerFlagsRequest* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmQueryPlayerFlagsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmQueryPlayerFlagsRequest_descriptor_;
  metadata.reflection = GmQueryPlayerFlagsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GmQueryPlayerFlagsResponse::kErrorCodeFieldNumber;
const int GmQueryPlayerFlagsResponse::kFlagDataFieldNumber;
const int GmQueryPlayerFlagsResponse::kLimitDataFieldNumber;
#endif  // !_MSC_VER

GmQueryPlayerFlagsResponse::GmQueryPlayerFlagsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GmQueryPlayerFlagsResponse::InitAsDefaultInstance() {
  flag_data_ = const_cast< ::protocols::common::PlayerFlagDataPb*>(&::protocols::common::PlayerFlagDataPb::default_instance());
  limit_data_ = const_cast< ::protocols::common::RoleDailyLimitPb*>(&::protocols::common::RoleDailyLimitPb::default_instance());
}

GmQueryPlayerFlagsResponse::GmQueryPlayerFlagsResponse(const GmQueryPlayerFlagsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GmQueryPlayerFlagsResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  flag_data_ = NULL;
  limit_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GmQueryPlayerFlagsResponse::~GmQueryPlayerFlagsResponse() {
  SharedDtor();
}

void GmQueryPlayerFlagsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete flag_data_;
    delete limit_data_;
  }
}

void GmQueryPlayerFlagsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GmQueryPlayerFlagsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GmQueryPlayerFlagsResponse_descriptor_;
}

const GmQueryPlayerFlagsResponse& GmQueryPlayerFlagsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GmQueryPlayerFlagsResponse* GmQueryPlayerFlagsResponse::default_instance_ = NULL;

GmQueryPlayerFlagsResponse* GmQueryPlayerFlagsResponse::New() const {
  return new GmQueryPlayerFlagsResponse;
}

void GmQueryPlayerFlagsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_flag_data()) {
      if (flag_data_ != NULL) flag_data_->::protocols::common::PlayerFlagDataPb::Clear();
    }
    if (has_limit_data()) {
      if (limit_data_ != NULL) limit_data_->::protocols::common::RoleDailyLimitPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GmQueryPlayerFlagsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flag_data;
        break;
      }
      
      // optional .protocols.common.PlayerFlagDataPb flag_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flag_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_limit_data;
        break;
      }
      
      // optional .protocols.common.RoleDailyLimitPb limit_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GmQueryPlayerFlagsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.PlayerFlagDataPb flag_data = 2;
  if (has_flag_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flag_data(), output);
  }
  
  // optional .protocols.common.RoleDailyLimitPb limit_data = 3;
  if (has_limit_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limit_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GmQueryPlayerFlagsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.PlayerFlagDataPb flag_data = 2;
  if (has_flag_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flag_data(), target);
  }
  
  // optional .protocols.common.RoleDailyLimitPb limit_data = 3;
  if (has_limit_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limit_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GmQueryPlayerFlagsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.PlayerFlagDataPb flag_data = 2;
    if (has_flag_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flag_data());
    }
    
    // optional .protocols.common.RoleDailyLimitPb limit_data = 3;
    if (has_limit_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GmQueryPlayerFlagsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GmQueryPlayerFlagsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GmQueryPlayerFlagsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GmQueryPlayerFlagsResponse::MergeFrom(const GmQueryPlayerFlagsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_flag_data()) {
      mutable_flag_data()->::protocols::common::PlayerFlagDataPb::MergeFrom(from.flag_data());
    }
    if (from.has_limit_data()) {
      mutable_limit_data()->::protocols::common::RoleDailyLimitPb::MergeFrom(from.limit_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GmQueryPlayerFlagsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GmQueryPlayerFlagsResponse::CopyFrom(const GmQueryPlayerFlagsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmQueryPlayerFlagsResponse::IsInitialized() const {
  
  if (has_flag_data()) {
    if (!this->flag_data().IsInitialized()) return false;
  }
  if (has_limit_data()) {
    if (!this->limit_data().IsInitialized()) return false;
  }
  return true;
}

void GmQueryPlayerFlagsResponse::Swap(GmQueryPlayerFlagsResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(flag_data_, other->flag_data_);
    std::swap(limit_data_, other->limit_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GmQueryPlayerFlagsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GmQueryPlayerFlagsResponse_descriptor_;
  metadata.reflection = GmQueryPlayerFlagsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetFightExpFactorRequest::kExpFactorFieldNumber;
const int GMSetFightExpFactorRequest::kBeginTimeFieldNumber;
const int GMSetFightExpFactorRequest::kEndTimeFieldNumber;
const int GMSetFightExpFactorRequest::kBeginMessageFieldNumber;
const int GMSetFightExpFactorRequest::kEndMessageFieldNumber;
#endif  // !_MSC_VER

GMSetFightExpFactorRequest::GMSetFightExpFactorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetFightExpFactorRequest::InitAsDefaultInstance() {
}

GMSetFightExpFactorRequest::GMSetFightExpFactorRequest(const GMSetFightExpFactorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetFightExpFactorRequest::SharedCtor() {
  _cached_size_ = 0;
  exp_factor_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  begin_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetFightExpFactorRequest::~GMSetFightExpFactorRequest() {
  SharedDtor();
}

void GMSetFightExpFactorRequest::SharedDtor() {
  if (begin_message_ != &::google::protobuf::internal::kEmptyString) {
    delete begin_message_;
  }
  if (end_message_ != &::google::protobuf::internal::kEmptyString) {
    delete end_message_;
  }
  if (this != default_instance_) {
  }
}

void GMSetFightExpFactorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetFightExpFactorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetFightExpFactorRequest_descriptor_;
}

const GMSetFightExpFactorRequest& GMSetFightExpFactorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetFightExpFactorRequest* GMSetFightExpFactorRequest::default_instance_ = NULL;

GMSetFightExpFactorRequest* GMSetFightExpFactorRequest::New() const {
  return new GMSetFightExpFactorRequest;
}

void GMSetFightExpFactorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_factor_ = 0;
    begin_time_ = 0;
    end_time_ = 0;
    if (has_begin_message()) {
      if (begin_message_ != &::google::protobuf::internal::kEmptyString) {
        begin_message_->clear();
      }
    }
    if (has_end_message()) {
      if (end_message_ != &::google::protobuf::internal::kEmptyString) {
        end_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetFightExpFactorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp_factor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_factor_)));
          set_has_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }
      
      // optional int32 begin_time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }
      
      // optional int32 end_time = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_begin_message;
        break;
      }
      
      // optional string begin_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_begin_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_begin_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->begin_message().data(), this->begin_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_message;
        break;
      }
      
      // optional string end_message = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_message().data(), this->end_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetFightExpFactorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp_factor = 1;
  if (has_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp_factor(), output);
  }
  
  // optional int32 begin_time = 2 [default = 0];
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_time(), output);
  }
  
  // optional int32 end_time = 3 [default = 0];
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }
  
  // optional string begin_message = 4;
  if (has_begin_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->begin_message().data(), this->begin_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->begin_message(), output);
  }
  
  // optional string end_message = 5;
  if (has_end_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_message().data(), this->end_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->end_message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetFightExpFactorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp_factor = 1;
  if (has_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp_factor(), target);
  }
  
  // optional int32 begin_time = 2 [default = 0];
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_time(), target);
  }
  
  // optional int32 end_time = 3 [default = 0];
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_time(), target);
  }
  
  // optional string begin_message = 4;
  if (has_begin_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->begin_message().data(), this->begin_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->begin_message(), target);
  }
  
  // optional string end_message = 5;
  if (has_end_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_message().data(), this->end_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->end_message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetFightExpFactorRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp_factor = 1;
    if (has_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_factor());
    }
    
    // optional int32 begin_time = 2 [default = 0];
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_time());
    }
    
    // optional int32 end_time = 3 [default = 0];
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }
    
    // optional string begin_message = 4;
    if (has_begin_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->begin_message());
    }
    
    // optional string end_message = 5;
    if (has_end_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetFightExpFactorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetFightExpFactorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetFightExpFactorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetFightExpFactorRequest::MergeFrom(const GMSetFightExpFactorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp_factor()) {
      set_exp_factor(from.exp_factor());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_begin_message()) {
      set_begin_message(from.begin_message());
    }
    if (from.has_end_message()) {
      set_end_message(from.end_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetFightExpFactorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetFightExpFactorRequest::CopyFrom(const GMSetFightExpFactorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetFightExpFactorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetFightExpFactorRequest::Swap(GMSetFightExpFactorRequest* other) {
  if (other != this) {
    std::swap(exp_factor_, other->exp_factor_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(begin_message_, other->begin_message_);
    std::swap(end_message_, other->end_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetFightExpFactorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetFightExpFactorRequest_descriptor_;
  metadata.reflection = GMSetFightExpFactorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetFightExpFactorResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetFightExpFactorResponse::GMSetFightExpFactorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetFightExpFactorResponse::InitAsDefaultInstance() {
}

GMSetFightExpFactorResponse::GMSetFightExpFactorResponse(const GMSetFightExpFactorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetFightExpFactorResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetFightExpFactorResponse::~GMSetFightExpFactorResponse() {
  SharedDtor();
}

void GMSetFightExpFactorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetFightExpFactorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetFightExpFactorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetFightExpFactorResponse_descriptor_;
}

const GMSetFightExpFactorResponse& GMSetFightExpFactorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetFightExpFactorResponse* GMSetFightExpFactorResponse::default_instance_ = NULL;

GMSetFightExpFactorResponse* GMSetFightExpFactorResponse::New() const {
  return new GMSetFightExpFactorResponse;
}

void GMSetFightExpFactorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetFightExpFactorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetFightExpFactorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetFightExpFactorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetFightExpFactorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetFightExpFactorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetFightExpFactorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetFightExpFactorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetFightExpFactorResponse::MergeFrom(const GMSetFightExpFactorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetFightExpFactorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetFightExpFactorResponse::CopyFrom(const GMSetFightExpFactorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetFightExpFactorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetFightExpFactorResponse::Swap(GMSetFightExpFactorResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetFightExpFactorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetFightExpFactorResponse_descriptor_;
  metadata.reflection = GMSetFightExpFactorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetGuildDataRequest::kGuildIdFieldNumber;
const int GMSetGuildDataRequest::kExpFieldNumber;
const int GMSetGuildDataRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

GMSetGuildDataRequest::GMSetGuildDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetGuildDataRequest::InitAsDefaultInstance() {
}

GMSetGuildDataRequest::GMSetGuildDataRequest(const GMSetGuildDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetGuildDataRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  exp_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetGuildDataRequest::~GMSetGuildDataRequest() {
  SharedDtor();
}

void GMSetGuildDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetGuildDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetGuildDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetGuildDataRequest_descriptor_;
}

const GMSetGuildDataRequest& GMSetGuildDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetGuildDataRequest* GMSetGuildDataRequest::default_instance_ = NULL;

GMSetGuildDataRequest* GMSetGuildDataRequest::New() const {
  return new GMSetGuildDataRequest;
}

void GMSetGuildDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    exp_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetGuildDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }
      
      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetGuildDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }
  
  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetGuildDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }
  
  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetGuildDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetGuildDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetGuildDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetGuildDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetGuildDataRequest::MergeFrom(const GMSetGuildDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetGuildDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetGuildDataRequest::CopyFrom(const GMSetGuildDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetGuildDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetGuildDataRequest::Swap(GMSetGuildDataRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetGuildDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetGuildDataRequest_descriptor_;
  metadata.reflection = GMSetGuildDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetGuildDataResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetGuildDataResponse::GMSetGuildDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetGuildDataResponse::InitAsDefaultInstance() {
}

GMSetGuildDataResponse::GMSetGuildDataResponse(const GMSetGuildDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetGuildDataResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetGuildDataResponse::~GMSetGuildDataResponse() {
  SharedDtor();
}

void GMSetGuildDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetGuildDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetGuildDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetGuildDataResponse_descriptor_;
}

const GMSetGuildDataResponse& GMSetGuildDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetGuildDataResponse* GMSetGuildDataResponse::default_instance_ = NULL;

GMSetGuildDataResponse* GMSetGuildDataResponse::New() const {
  return new GMSetGuildDataResponse;
}

void GMSetGuildDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetGuildDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetGuildDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetGuildDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetGuildDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetGuildDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetGuildDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetGuildDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetGuildDataResponse::MergeFrom(const GMSetGuildDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetGuildDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetGuildDataResponse::CopyFrom(const GMSetGuildDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetGuildDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetGuildDataResponse::Swap(GMSetGuildDataResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetGuildDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetGuildDataResponse_descriptor_;
  metadata.reflection = GMSetGuildDataResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetItemListRequest::kRoleIdFieldNumber;
const int GMGetItemListRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GMGetItemListRequest::GMGetItemListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetItemListRequest::InitAsDefaultInstance() {
}

GMGetItemListRequest::GMGetItemListRequest(const GMGetItemListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetItemListRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetItemListRequest::~GMGetItemListRequest() {
  SharedDtor();
}

void GMGetItemListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetItemListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetItemListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetItemListRequest_descriptor_;
}

const GMGetItemListRequest& GMGetItemListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetItemListRequest* GMGetItemListRequest::default_instance_ = NULL;

GMGetItemListRequest* GMGetItemListRequest::New() const {
  return new GMGetItemListRequest;
}

void GMGetItemListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetItemListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetItemListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetItemListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetItemListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetItemListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetItemListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetItemListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetItemListRequest::MergeFrom(const GMGetItemListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetItemListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetItemListRequest::CopyFrom(const GMGetItemListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetItemListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMGetItemListRequest::Swap(GMGetItemListRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetItemListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetItemListRequest_descriptor_;
  metadata.reflection = GMGetItemListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMStartGuildCrystalTowerRequest::kGuildIdFieldNumber;
const int GMStartGuildCrystalTowerRequest::kCategoryFieldNumber;
#endif  // !_MSC_VER

GMStartGuildCrystalTowerRequest::GMStartGuildCrystalTowerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMStartGuildCrystalTowerRequest::InitAsDefaultInstance() {
}

GMStartGuildCrystalTowerRequest::GMStartGuildCrystalTowerRequest(const GMStartGuildCrystalTowerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMStartGuildCrystalTowerRequest::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0;
  category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMStartGuildCrystalTowerRequest::~GMStartGuildCrystalTowerRequest() {
  SharedDtor();
}

void GMStartGuildCrystalTowerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMStartGuildCrystalTowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMStartGuildCrystalTowerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMStartGuildCrystalTowerRequest_descriptor_;
}

const GMStartGuildCrystalTowerRequest& GMStartGuildCrystalTowerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMStartGuildCrystalTowerRequest* GMStartGuildCrystalTowerRequest::default_instance_ = NULL;

GMStartGuildCrystalTowerRequest* GMStartGuildCrystalTowerRequest::New() const {
  return new GMStartGuildCrystalTowerRequest;
}

void GMStartGuildCrystalTowerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0;
    category_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMStartGuildCrystalTowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }
      
      // required int32 category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMStartGuildCrystalTowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guild_id(), output);
  }
  
  // required int32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMStartGuildCrystalTowerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guild_id(), target);
  }
  
  // required int32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMStartGuildCrystalTowerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // required int32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMStartGuildCrystalTowerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMStartGuildCrystalTowerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMStartGuildCrystalTowerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMStartGuildCrystalTowerRequest::MergeFrom(const GMStartGuildCrystalTowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMStartGuildCrystalTowerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMStartGuildCrystalTowerRequest::CopyFrom(const GMStartGuildCrystalTowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMStartGuildCrystalTowerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMStartGuildCrystalTowerRequest::Swap(GMStartGuildCrystalTowerRequest* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(category_, other->category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMStartGuildCrystalTowerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMStartGuildCrystalTowerRequest_descriptor_;
  metadata.reflection = GMStartGuildCrystalTowerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMStartGuildCrystalTowerResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMStartGuildCrystalTowerResponse::GMStartGuildCrystalTowerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMStartGuildCrystalTowerResponse::InitAsDefaultInstance() {
}

GMStartGuildCrystalTowerResponse::GMStartGuildCrystalTowerResponse(const GMStartGuildCrystalTowerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMStartGuildCrystalTowerResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMStartGuildCrystalTowerResponse::~GMStartGuildCrystalTowerResponse() {
  SharedDtor();
}

void GMStartGuildCrystalTowerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMStartGuildCrystalTowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMStartGuildCrystalTowerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMStartGuildCrystalTowerResponse_descriptor_;
}

const GMStartGuildCrystalTowerResponse& GMStartGuildCrystalTowerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMStartGuildCrystalTowerResponse* GMStartGuildCrystalTowerResponse::default_instance_ = NULL;

GMStartGuildCrystalTowerResponse* GMStartGuildCrystalTowerResponse::New() const {
  return new GMStartGuildCrystalTowerResponse;
}

void GMStartGuildCrystalTowerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMStartGuildCrystalTowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMStartGuildCrystalTowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMStartGuildCrystalTowerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMStartGuildCrystalTowerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMStartGuildCrystalTowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMStartGuildCrystalTowerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMStartGuildCrystalTowerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMStartGuildCrystalTowerResponse::MergeFrom(const GMStartGuildCrystalTowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMStartGuildCrystalTowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMStartGuildCrystalTowerResponse::CopyFrom(const GMStartGuildCrystalTowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMStartGuildCrystalTowerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMStartGuildCrystalTowerResponse::Swap(GMStartGuildCrystalTowerResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMStartGuildCrystalTowerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMStartGuildCrystalTowerResponse_descriptor_;
  metadata.reflection = GMStartGuildCrystalTowerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetItemListResponse::kErrorCodeFieldNumber;
const int GMGetItemListResponse::kItemListFieldNumber;
const int GMGetItemListResponse::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

GMGetItemListResponse::GMGetItemListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetItemListResponse::InitAsDefaultInstance() {
}

GMGetItemListResponse::GMGetItemListResponse(const GMGetItemListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetItemListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  max_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetItemListResponse::~GMGetItemListResponse() {
  SharedDtor();
}

void GMGetItemListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetItemListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetItemListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetItemListResponse_descriptor_;
}

const GMGetItemListResponse& GMGetItemListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetItemListResponse* GMGetItemListResponse::default_instance_ = NULL;

GMGetItemListResponse* GMGetItemListResponse::New() const {
  return new GMGetItemListResponse;
}

void GMGetItemListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    max_size_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetItemListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectTag(24)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetItemListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetItemListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }
  
  // optional int32 max_size = 3;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetItemListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 max_size = 3;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetItemListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetItemListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetItemListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetItemListResponse::MergeFrom(const GMGetItemListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetItemListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetItemListResponse::CopyFrom(const GMGetItemListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetItemListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void GMGetItemListResponse::Swap(GMGetItemListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    item_list_.Swap(&other->item_list_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetItemListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetItemListResponse_descriptor_;
  metadata.reflection = GMGetItemListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetSkillListRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

GMGetSkillListRequest::GMGetSkillListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetSkillListRequest::InitAsDefaultInstance() {
}

GMGetSkillListRequest::GMGetSkillListRequest(const GMGetSkillListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetSkillListRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetSkillListRequest::~GMGetSkillListRequest() {
  SharedDtor();
}

void GMGetSkillListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetSkillListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetSkillListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetSkillListRequest_descriptor_;
}

const GMGetSkillListRequest& GMGetSkillListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetSkillListRequest* GMGetSkillListRequest::default_instance_ = NULL;

GMGetSkillListRequest* GMGetSkillListRequest::New() const {
  return new GMGetSkillListRequest;
}

void GMGetSkillListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetSkillListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetSkillListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetSkillListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetSkillListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetSkillListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetSkillListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetSkillListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetSkillListRequest::MergeFrom(const GMGetSkillListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetSkillListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetSkillListRequest::CopyFrom(const GMGetSkillListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetSkillListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMGetSkillListRequest::Swap(GMGetSkillListRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetSkillListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetSkillListRequest_descriptor_;
  metadata.reflection = GMGetSkillListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetSkillListResponse::kErrorCodeFieldNumber;
const int GMGetSkillListResponse::kGuidFieldNumber;
const int GMGetSkillListResponse::kOpenSlotFieldNumber;
const int GMGetSkillListResponse::kSkillListFieldNumber;
const int GMGetSkillListResponse::kSkillExpPoolFieldNumber;
const int GMGetSkillListResponse::kPracticeSkillLimitFieldNumber;
#endif  // !_MSC_VER

GMGetSkillListResponse::GMGetSkillListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetSkillListResponse::InitAsDefaultInstance() {
}

GMGetSkillListResponse::GMGetSkillListResponse(const GMGetSkillListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetSkillListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  open_slot_ = 0;
  skill_exp_pool_ = 0;
  practice_skill_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetSkillListResponse::~GMGetSkillListResponse() {
  SharedDtor();
}

void GMGetSkillListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetSkillListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetSkillListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetSkillListResponse_descriptor_;
}

const GMGetSkillListResponse& GMGetSkillListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetSkillListResponse* GMGetSkillListResponse::default_instance_ = NULL;

GMGetSkillListResponse* GMGetSkillListResponse::New() const {
  return new GMGetSkillListResponse;
}

void GMGetSkillListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    open_slot_ = 0;
    skill_exp_pool_ = 0;
    practice_skill_limit_ = 0;
  }
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetSkillListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_open_slot;
        break;
      }
      
      // required int32 open_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_slot_)));
          set_has_open_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_list;
        break;
      }
      
      // repeated .protocols.common.SkillInfo skill_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill_list;
        if (input->ExpectTag(40)) goto parse_skill_exp_pool;
        break;
      }
      
      // optional int32 skill_exp_pool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_exp_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_exp_pool_)));
          set_has_skill_exp_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_practice_skill_limit;
        break;
      }
      
      // optional int32 practice_skill_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_skill_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_skill_limit_)));
          set_has_practice_skill_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetSkillListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // required int32 open_slot = 3;
  if (has_open_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_slot(), output);
  }
  
  // repeated .protocols.common.SkillInfo skill_list = 4;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill_list(i), output);
  }
  
  // optional int32 skill_exp_pool = 5;
  if (has_skill_exp_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_exp_pool(), output);
  }
  
  // optional int32 practice_skill_limit = 6;
  if (has_practice_skill_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->practice_skill_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetSkillListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // required int32 open_slot = 3;
  if (has_open_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_slot(), target);
  }
  
  // repeated .protocols.common.SkillInfo skill_list = 4;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill_list(i), target);
  }
  
  // optional int32 skill_exp_pool = 5;
  if (has_skill_exp_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_exp_pool(), target);
  }
  
  // optional int32 practice_skill_limit = 6;
  if (has_practice_skill_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->practice_skill_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetSkillListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 open_slot = 3;
    if (has_open_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_slot());
    }
    
    // optional int32 skill_exp_pool = 5;
    if (has_skill_exp_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_exp_pool());
    }
    
    // optional int32 practice_skill_limit = 6;
    if (has_practice_skill_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_skill_limit());
    }
    
  }
  // repeated .protocols.common.SkillInfo skill_list = 4;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetSkillListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetSkillListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetSkillListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetSkillListResponse::MergeFrom(const GMGetSkillListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_open_slot()) {
      set_open_slot(from.open_slot());
    }
    if (from.has_skill_exp_pool()) {
      set_skill_exp_pool(from.skill_exp_pool());
    }
    if (from.has_practice_skill_limit()) {
      set_practice_skill_limit(from.practice_skill_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetSkillListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetSkillListResponse::CopyFrom(const GMGetSkillListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetSkillListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < skill_list_size(); i++) {
    if (!this->skill_list(i).IsInitialized()) return false;
  }
  return true;
}

void GMGetSkillListResponse::Swap(GMGetSkillListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guid_, other->guid_);
    std::swap(open_slot_, other->open_slot_);
    skill_list_.Swap(&other->skill_list_);
    std::swap(skill_exp_pool_, other->skill_exp_pool_);
    std::swap(practice_skill_limit_, other->practice_skill_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetSkillListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetSkillListResponse_descriptor_;
  metadata.reflection = GMGetSkillListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetTitleListRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

GMGetTitleListRequest::GMGetTitleListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetTitleListRequest::InitAsDefaultInstance() {
}

GMGetTitleListRequest::GMGetTitleListRequest(const GMGetTitleListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetTitleListRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetTitleListRequest::~GMGetTitleListRequest() {
  SharedDtor();
}

void GMGetTitleListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetTitleListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetTitleListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetTitleListRequest_descriptor_;
}

const GMGetTitleListRequest& GMGetTitleListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetTitleListRequest* GMGetTitleListRequest::default_instance_ = NULL;

GMGetTitleListRequest* GMGetTitleListRequest::New() const {
  return new GMGetTitleListRequest;
}

void GMGetTitleListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetTitleListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetTitleListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetTitleListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetTitleListRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetTitleListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetTitleListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetTitleListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetTitleListRequest::MergeFrom(const GMGetTitleListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetTitleListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetTitleListRequest::CopyFrom(const GMGetTitleListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetTitleListRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMGetTitleListRequest::Swap(GMGetTitleListRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetTitleListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetTitleListRequest_descriptor_;
  metadata.reflection = GMGetTitleListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetTitleListResponse::kErrorCodeFieldNumber;
const int GMGetTitleListResponse::kTitlesFieldNumber;
#endif  // !_MSC_VER

GMGetTitleListResponse::GMGetTitleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetTitleListResponse::InitAsDefaultInstance() {
}

GMGetTitleListResponse::GMGetTitleListResponse(const GMGetTitleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetTitleListResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetTitleListResponse::~GMGetTitleListResponse() {
  SharedDtor();
}

void GMGetTitleListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetTitleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetTitleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetTitleListResponse_descriptor_;
}

const GMGetTitleListResponse& GMGetTitleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetTitleListResponse* GMGetTitleListResponse::default_instance_ = NULL;

GMGetTitleListResponse* GMGetTitleListResponse::New() const {
  return new GMGetTitleListResponse;
}

void GMGetTitleListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  titles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetTitleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titles;
        break;
      }
      
      // repeated int32 titles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_titles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_titles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetTitleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated int32 titles = 2;
  for (int i = 0; i < this->titles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->titles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetTitleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated int32 titles = 2;
  for (int i = 0; i < this->titles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->titles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetTitleListResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated int32 titles = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->titles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->titles(i));
    }
    total_size += 1 * this->titles_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetTitleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetTitleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetTitleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetTitleListResponse::MergeFrom(const GMGetTitleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  titles_.MergeFrom(from.titles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetTitleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetTitleListResponse::CopyFrom(const GMGetTitleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetTitleListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMGetTitleListResponse::Swap(GMGetTitleListResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    titles_.Swap(&other->titles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetTitleListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetTitleListResponse_descriptor_;
  metadata.reflection = GMGetTitleListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetRoleTitleRequest::kRoleIdFieldNumber;
const int GMSetRoleTitleRequest::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GMSetRoleTitleRequest::GMSetRoleTitleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetRoleTitleRequest::InitAsDefaultInstance() {
}

GMSetRoleTitleRequest::GMSetRoleTitleRequest(const GMSetRoleTitleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetRoleTitleRequest::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0;
  title_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetRoleTitleRequest::~GMSetRoleTitleRequest() {
  SharedDtor();
}

void GMSetRoleTitleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetRoleTitleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetRoleTitleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetRoleTitleRequest_descriptor_;
}

const GMSetRoleTitleRequest& GMSetRoleTitleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetRoleTitleRequest* GMSetRoleTitleRequest::default_instance_ = NULL;

GMSetRoleTitleRequest* GMSetRoleTitleRequest::New() const {
  return new GMSetRoleTitleRequest;
}

void GMSetRoleTitleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0;
    title_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetRoleTitleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title_id;
        break;
      }
      
      // required int32 title_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetRoleTitleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role_id(), output);
  }
  
  // required int32 title_id = 2;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->title_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetRoleTitleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role_id(), target);
  }
  
  // required int32 title_id = 2;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->title_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetRoleTitleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
    // required int32 title_id = 2;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetRoleTitleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetRoleTitleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetRoleTitleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetRoleTitleRequest::MergeFrom(const GMSetRoleTitleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetRoleTitleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetRoleTitleRequest::CopyFrom(const GMSetRoleTitleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetRoleTitleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GMSetRoleTitleRequest::Swap(GMSetRoleTitleRequest* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(title_id_, other->title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetRoleTitleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetRoleTitleRequest_descriptor_;
  metadata.reflection = GMSetRoleTitleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSetRoleTitleResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GMSetRoleTitleResponse::GMSetRoleTitleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSetRoleTitleResponse::InitAsDefaultInstance() {
}

GMSetRoleTitleResponse::GMSetRoleTitleResponse(const GMSetRoleTitleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSetRoleTitleResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSetRoleTitleResponse::~GMSetRoleTitleResponse() {
  SharedDtor();
}

void GMSetRoleTitleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMSetRoleTitleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSetRoleTitleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSetRoleTitleResponse_descriptor_;
}

const GMSetRoleTitleResponse& GMSetRoleTitleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMSetRoleTitleResponse* GMSetRoleTitleResponse::default_instance_ = NULL;

GMSetRoleTitleResponse* GMSetRoleTitleResponse::New() const {
  return new GMSetRoleTitleResponse;
}

void GMSetRoleTitleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSetRoleTitleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSetRoleTitleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSetRoleTitleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSetRoleTitleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSetRoleTitleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSetRoleTitleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSetRoleTitleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSetRoleTitleResponse::MergeFrom(const GMSetRoleTitleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSetRoleTitleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSetRoleTitleResponse::CopyFrom(const GMSetRoleTitleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSetRoleTitleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMSetRoleTitleResponse::Swap(GMSetRoleTitleResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSetRoleTitleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSetRoleTitleResponse_descriptor_;
  metadata.reflection = GMSetRoleTitleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetTitleInfoRequest::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GMGetTitleInfoRequest::GMGetTitleInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetTitleInfoRequest::InitAsDefaultInstance() {
}

GMGetTitleInfoRequest::GMGetTitleInfoRequest(const GMGetTitleInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetTitleInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  title_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetTitleInfoRequest::~GMGetTitleInfoRequest() {
  SharedDtor();
}

void GMGetTitleInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGetTitleInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetTitleInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetTitleInfoRequest_descriptor_;
}

const GMGetTitleInfoRequest& GMGetTitleInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetTitleInfoRequest* GMGetTitleInfoRequest::default_instance_ = NULL;

GMGetTitleInfoRequest* GMGetTitleInfoRequest::New() const {
  return new GMGetTitleInfoRequest;
}

void GMGetTitleInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    title_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetTitleInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetTitleInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 title_id = 1;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->title_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetTitleInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 title_id = 1;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->title_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetTitleInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 title_id = 1;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetTitleInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetTitleInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetTitleInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetTitleInfoRequest::MergeFrom(const GMGetTitleInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetTitleInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetTitleInfoRequest::CopyFrom(const GMGetTitleInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetTitleInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMGetTitleInfoRequest::Swap(GMGetTitleInfoRequest* other) {
  if (other != this) {
    std::swap(title_id_, other->title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetTitleInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetTitleInfoRequest_descriptor_;
  metadata.reflection = GMGetTitleInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfo::kTitleIdFieldNumber;
const int TitleInfo::kRoleIdFieldNumber;
#endif  // !_MSC_VER

TitleInfo::TitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleInfo::InitAsDefaultInstance() {
}

TitleInfo::TitleInfo(const TitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleInfo::SharedCtor() {
  _cached_size_ = 0;
  title_id_ = 0;
  role_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfo::~TitleInfo() {
  SharedDtor();
}

void TitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfo_descriptor_;
}

const TitleInfo& TitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

TitleInfo* TitleInfo::default_instance_ = NULL;

TitleInfo* TitleInfo::New() const {
  return new TitleInfo;
}

void TitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    title_id_ = 0;
    role_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }
      
      // required int32 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 title_id = 1;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->title_id(), output);
  }
  
  // required int32 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 title_id = 1;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->title_id(), target);
  }
  
  // required int32 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 title_id = 1;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_id());
    }
    
    // required int32 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TitleInfo::Swap(TitleInfo* other) {
  if (other != this) {
    std::swap(title_id_, other->title_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfo_descriptor_;
  metadata.reflection = TitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetTitleInfoResponse::kErrorCodeFieldNumber;
const int GMGetTitleInfoResponse::kTitleInfoFieldNumber;
#endif  // !_MSC_VER

GMGetTitleInfoResponse::GMGetTitleInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetTitleInfoResponse::InitAsDefaultInstance() {
  title_info_ = const_cast< ::protocols::common::TitleInfo*>(&::protocols::common::TitleInfo::default_instance());
}

GMGetTitleInfoResponse::GMGetTitleInfoResponse(const GMGetTitleInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetTitleInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  title_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetTitleInfoResponse::~GMGetTitleInfoResponse() {
  SharedDtor();
}

void GMGetTitleInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete title_info_;
  }
}

void GMGetTitleInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetTitleInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetTitleInfoResponse_descriptor_;
}

const GMGetTitleInfoResponse& GMGetTitleInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fserver_2eproto();  return *default_instance_;
}

GMGetTitleInfoResponse* GMGetTitleInfoResponse::default_instance_ = NULL;

GMGetTitleInfoResponse* GMGetTitleInfoResponse::New() const {
  return new GMGetTitleInfoResponse;
}

void GMGetTitleInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_title_info()) {
      if (title_info_ != NULL) title_info_->::protocols::common::TitleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetTitleInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title_info;
        break;
      }
      
      // optional .protocols.common.TitleInfo title_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetTitleInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional .protocols.common.TitleInfo title_info = 2;
  if (has_title_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetTitleInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional .protocols.common.TitleInfo title_info = 2;
  if (has_title_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetTitleInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional .protocols.common.TitleInfo title_info = 2;
    if (has_title_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetTitleInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetTitleInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetTitleInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetTitleInfoResponse::MergeFrom(const GMGetTitleInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_title_info()) {
      mutable_title_info()->::protocols::common::TitleInfo::MergeFrom(from.title_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetTitleInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetTitleInfoResponse::CopyFrom(const GMGetTitleInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetTitleInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_title_info()) {
    if (!this->title_info().IsInitialized()) return false;
  }
  return true;
}

void GMGetTitleInfoResponse::Swap(GMGetTitleInfoResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(title_info_, other->title_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetTitleInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetTitleInfoResponse_descriptor_;
  metadata.reflection = GMGetTitleInfoResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
