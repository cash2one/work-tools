// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* InstanceCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fighter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPhyStrengthInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPhyStrengthInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaojuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaojuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRelationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRelationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttributeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttributeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoneData_StoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoneData_StoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBSlotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBSlotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FighterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FighterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Money1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestActionsPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestActionsPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPreCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPreCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRewards_QuestRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRewards_QuestRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestProtoype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestProtoype_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoolDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoolDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyCountLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyCountLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyLimitPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyLimitPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBRoleLimitDataPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBRoleLimitDataPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* XunluoQuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XunluoQuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagDataPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagDataPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsedName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsedName_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsedNameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsedNameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnuseNameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnuseNameMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HideNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HideNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HideNpcPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HideNpcPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenedFunctionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenedFunctionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuddyTemplateAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuddyTemplateAttributeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageModule_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemPositionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_SELF_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_PUBLIC_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PUBLIC_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Profession_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LEVEL_UP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PRACTICE_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PAY_FUNCTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_ATTR_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SKIP_FIGHT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FIGHT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YinglingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YinglingQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RefreshYinglingListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AnnounceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LINE_UP_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UPDATE_BATTLE_SKILL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestAction_ClientActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DIFFICULTY_LEVEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_OBJECTIVE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_ADD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_APPLY_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_LINEUP_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SERVER_SYNC_TEAM_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VipSettingsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerBitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientPlayerFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUY_MORE_TIMES_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUY_CLEAR_CD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UniqueNameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LivenessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerConfigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendConfigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateMonsterBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamChannelMemberNotifyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fcommon_2eproto() {
  protobuf_AddDesc_game_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_common.proto");
  GOOGLE_CHECK(file != NULL);
  InstanceCardInfo_descriptor_ = file->message_type(0);
  static const int InstanceCardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, icon_id_),
  };
  InstanceCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCardInfo_descriptor_,
      InstanceCardInfo::default_instance_,
      InstanceCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCardInfo));
  InstanceWantedInfo_descriptor_ = file->message_type(1);
  static const int InstanceWantedInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, card_info_),
  };
  InstanceWantedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedInfo_descriptor_,
      InstanceWantedInfo::default_instance_,
      InstanceWantedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedInfo));
  BuffInfo_descriptor_ = file->message_type(2);
  static const int BuffInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, left_time_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  Fighter_descriptor_ = file->message_type(3);
  static const int Fighter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, is_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, is_team_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, phy_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, phy_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, mag_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, mag_defence_),
  };
  Fighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fighter_descriptor_,
      Fighter::default_instance_,
      Fighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fighter));
  SkillBonus_descriptor_ = file->message_type(4);
  static const int SkillBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, exp_bonus_),
  };
  SkillBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBonus_descriptor_,
      SkillBonus::default_instance_,
      SkillBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBonus));
  Bonus_descriptor_ = file->message_type(5);
  static const int Bonus_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, vip_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, team_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, other_exp_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, skill_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, gold_coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, bag_has_enough_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, base_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, base_gold_coin_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, cont_win_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, cont_win_gold_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, de_cont_win_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, de_cont_win_gold_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, drop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, quest_drop_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, equipment_),
  };
  Bonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bonus_descriptor_,
      Bonus::default_instance_,
      Bonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bonus));
  FightResult_descriptor_ = file->message_type(6);
  static const int FightResult_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_a_battle_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_b_battle_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, round_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, npc_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, left_free_skip_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, auto_skip_time_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_a_dead_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, camp_b_dead_persons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, battle_group_id_),
  };
  FightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightResult_descriptor_,
      FightResult::default_instance_,
      FightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightResult));
  PlayerPhyStrengthInfo_descriptor_ = file->message_type(7);
  static const int PlayerPhyStrengthInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, phy_strength_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, extra_phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, extra_phy_strength_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, time_for_recover_phy_strength_),
  };
  PlayerPhyStrengthInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPhyStrengthInfo_descriptor_,
      PlayerPhyStrengthInfo::default_instance_,
      PlayerPhyStrengthInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPhyStrengthInfo));
  PlayerInfo_descriptor_ = file->message_type(8);
  static const int PlayerInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, job_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_end_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, lineup_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, player_phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, follow_guid_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  NPCInfo_descriptor_ = file->message_type(9);
  static const int NPCInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_level_),
  };
  NPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCInfo_descriptor_,
      NPCInfo::default_instance_,
      NPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCInfo));
  BaojuInfo_descriptor_ = file->message_type(10);
  static const int BaojuInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, guid_),
  };
  BaojuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaojuInfo_descriptor_,
      BaojuInfo::default_instance_,
      BaojuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaojuInfo));
  ItemInfo_descriptor_ = file->message_type(11);
  static const int ItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bind_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, mark_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  SkillInfo_descriptor_ = file->message_type(12);
  static const int SkillInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, equip_slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, is_practicing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, delta_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, delta_add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, practice_time_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  BattleSkillInfo_descriptor_ = file->message_type(13);
  static const int BattleSkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, battle_skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, exp_),
  };
  BattleSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSkillInfo_descriptor_,
      BattleSkillInfo::default_instance_,
      BattleSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSkillInfo));
  BankInfo_descriptor_ = file->message_type(14);
  static const int BankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, diamond_),
  };
  BankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankInfo_descriptor_,
      BankInfo::default_instance_,
      BankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankInfo));
  YinglingInfo_descriptor_ = file->message_type(15);
  static const int YinglingInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, job_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, fight_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, is_in_fight_lineup_),
  };
  YinglingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingInfo_descriptor_,
      YinglingInfo::default_instance_,
      YinglingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingInfo));
  BuddyDetailInfo_descriptor_ = file->message_type(16);
  static const int BuddyDetailInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, total_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, bare_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, cur_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, max_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, fight_capacity_),
  };
  BuddyDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyDetailInfo_descriptor_,
      BuddyDetailInfo::default_instance_,
      BuddyDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyDetailInfo));
  Relation_descriptor_ = file->message_type(17);
  static const int Relation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, relation_),
  };
  Relation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation));
  PlayerRelationData_descriptor_ = file->message_type(18);
  static const int PlayerRelationData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, friend__),
  };
  PlayerRelationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRelationData_descriptor_,
      PlayerRelationData::default_instance_,
      PlayerRelationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRelationData));
  InstanceInfo_descriptor_ = file->message_type(19);
  static const int InstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, grade_),
  };
  InstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfo_descriptor_,
      InstanceInfo::default_instance_,
      InstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfo));
  InstanceDetail_descriptor_ = file->message_type(20);
  static const int InstanceDetail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, monster_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, killed_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, last_transport_id_),
  };
  InstanceDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceDetail_descriptor_,
      InstanceDetail::default_instance_,
      InstanceDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceDetail));
  MonsterInfo_descriptor_ = file->message_type(21);
  static const int MonsterInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, icon_id_),
  };
  MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterInfo_descriptor_,
      MonsterInfo::default_instance_,
      MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterInfo));
  EquipInfo_descriptor_ = file->message_type(22);
  static const int EquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, mark_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  AttributeData_descriptor_ = file->message_type(23);
  static const int AttributeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, value_),
  };
  AttributeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttributeData_descriptor_,
      AttributeData::default_instance_,
      AttributeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttributeData));
  EquipDetail_descriptor_ = file->message_type(24);
  static const int EquipDetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, bind_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, extra_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, strength_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, stone_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, locked_attr_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, stone_data_),
  };
  EquipDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDetail_descriptor_,
      EquipDetail::default_instance_,
      EquipDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDetail));
  EquipStoneData_descriptor_ = file->message_type(25);
  static const int EquipStoneData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, stone_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, cur_socket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, max_socket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, strength_client_chance_),
  };
  EquipStoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoneData_descriptor_,
      EquipStoneData::default_instance_,
      EquipStoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoneData));
  EquipStoneData_StoneData_descriptor_ = EquipStoneData_descriptor_->nested_type(0);
  static const int EquipStoneData_StoneData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, stone_id_),
  };
  EquipStoneData_StoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoneData_StoneData_descriptor_,
      EquipStoneData_StoneData::default_instance_,
      EquipStoneData_StoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoneData_StoneData));
  DBSlotData_descriptor_ = file->message_type(26);
  static const int DBSlotData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, locked_attr_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, stone_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, socket_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_fail_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_client_chance_),
  };
  DBSlotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBSlotData_descriptor_,
      DBSlotData::default_instance_,
      DBSlotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBSlotData));
  FighterInfo_descriptor_ = file->message_type(27);
  static const int FighterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, battle_index_),
  };
  FighterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FighterInfo_descriptor_,
      FighterInfo::default_instance_,
      FighterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FighterInfo));
  LineupInfo_descriptor_ = file->message_type(28);
  static const int LineupInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_fight_capacity_),
  };
  LineupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineupInfo_descriptor_,
      LineupInfo::default_instance_,
      LineupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineupInfo));
  Money1_descriptor_ = file->message_type(29);
  static const int Money1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, num_),
  };
  Money1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money1_descriptor_,
      Money1::default_instance_,
      Money1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money1));
  Money_descriptor_ = file->message_type(30);
  static const int Money_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, money_),
  };
  Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money_descriptor_,
      Money::default_instance_,
      Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money));
  QuestAction_descriptor_ = file->message_type(31);
  static const int QuestAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, action_param_),
  };
  QuestAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestAction_descriptor_,
      QuestAction::default_instance_,
      QuestAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestAction));
  QuestActionsPb_descriptor_ = file->message_type(32);
  static const int QuestActionsPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, actions_),
  };
  QuestActionsPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestActionsPb_descriptor_,
      QuestActionsPb::default_instance_,
      QuestActionsPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestActionsPb));
  QuestPb_descriptor_ = file->message_type(33);
  static const int QuestPb_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, reward_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, circle_index_),
  };
  QuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPb_descriptor_,
      QuestPb::default_instance_,
      QuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPb));
  QuestPreCondition_descriptor_ = file->message_type(34);
  static const int QuestPreCondition_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pre_quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, player_level_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, player_level_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, auto_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pro_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pre_quest_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, post_quest_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, auto_commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, can_be_cancelled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, daily_reset_),
  };
  QuestPreCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPreCondition_descriptor_,
      QuestPreCondition::default_instance_,
      QuestPreCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPreCondition));
  QuestRewards_descriptor_ = file->message_type(35);
  static const int QuestRewards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, item_),
  };
  QuestRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRewards_descriptor_,
      QuestRewards::default_instance_,
      QuestRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRewards));
  QuestRewards_QuestRewardItem_descriptor_ = QuestRewards_descriptor_->nested_type(0);
  static const int QuestRewards_QuestRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, item_num_),
  };
  QuestRewards_QuestRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRewards_QuestRewardItem_descriptor_,
      QuestRewards_QuestRewardItem::default_instance_,
      QuestRewards_QuestRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRewards_QuestRewardItem));
  QuestProtoype_descriptor_ = file->message_type(36);
  static const int QuestProtoype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, pre_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_type_),
  };
  QuestProtoype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestProtoype_descriptor_,
      QuestProtoype::default_instance_,
      QuestProtoype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestProtoype));
  TeamMemberInfo_descriptor_ = file->message_type(37);
  static const int TeamMemberInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, fight_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, yingling_info_),
  };
  TeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberInfo_descriptor_,
      TeamMemberInfo::default_instance_,
      TeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberInfo));
  TeamInfo_descriptor_ = file->message_type(38);
  static const int TeamInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_member_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, cur_team_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, custom_pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, difficult_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, min_level_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, add_member_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, fighter_info_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  CoolDown_descriptor_ = file->message_type(39);
  static const int CoolDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, sec_),
  };
  CoolDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoolDown_descriptor_,
      CoolDown::default_instance_,
      CoolDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoolDown));
  RoleCoolDownPb_descriptor_ = file->message_type(40);
  static const int RoleCoolDownPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, cool_down_),
  };
  RoleCoolDownPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownPb_descriptor_,
      RoleCoolDownPb::default_instance_,
      RoleCoolDownPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownPb));
  DailyCountLimit_descriptor_ = file->message_type(41);
  static const int DailyCountLimit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_purchase_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, current_purchase_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, update_time_),
  };
  DailyCountLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyCountLimit_descriptor_,
      DailyCountLimit::default_instance_,
      DailyCountLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyCountLimit));
  RoleDailyLimitPb_descriptor_ = file->message_type(42);
  static const int RoleDailyLimitPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, daily_limit_),
  };
  RoleDailyLimitPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyLimitPb_descriptor_,
      RoleDailyLimitPb::default_instance_,
      RoleDailyLimitPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyLimitPb));
  DBRoleLimitDataPb_descriptor_ = file->message_type(43);
  static const int DBRoleLimitDataPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, cool_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, count_limit_),
  };
  DBRoleLimitDataPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBRoleLimitDataPb_descriptor_,
      DBRoleLimitDataPb::default_instance_,
      DBRoleLimitDataPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBRoleLimitDataPb));
  DailyQuest_descriptor_ = file->message_type(44);
  static const int DailyQuest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, reward_coin_),
  };
  DailyQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuest_descriptor_,
      DailyQuest::default_instance_,
      DailyQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuest));
  DailyQuestPb_descriptor_ = file->message_type(45);
  static const int DailyQuestPb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, daily_quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, accepted_daily_quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, xunluo_quest_),
  };
  DailyQuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuestPb_descriptor_,
      DailyQuestPb::default_instance_,
      DailyQuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuestPb));
  XunluoQuestPb_descriptor_ = file->message_type(46);
  static const int XunluoQuestPb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, cur_circle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_reward_coin_),
  };
  XunluoQuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XunluoQuestPb_descriptor_,
      XunluoQuestPb::default_instance_,
      XunluoQuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XunluoQuestPb));
  PlayerFlagPb_descriptor_ = file->message_type(47);
  static const int PlayerFlagPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, value_),
  };
  PlayerFlagPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagPb_descriptor_,
      PlayerFlagPb::default_instance_,
      PlayerFlagPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagPb));
  PlayerFlagDataPb_descriptor_ = file->message_type(48);
  static const int PlayerFlagDataPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, data_),
  };
  PlayerFlagDataPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagDataPb_descriptor_,
      PlayerFlagDataPb::default_instance_,
      PlayerFlagDataPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagDataPb));
  ArenaPlayerInfo_descriptor_ = file->message_type(49);
  static const int ArenaPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, titile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, max_cont_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, cur_cont_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, fight_capacity_),
  };
  ArenaPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayerInfo_descriptor_,
      ArenaPlayerInfo::default_instance_,
      ArenaPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayerInfo));
  TreasureBox_descriptor_ = file->message_type(50);
  static const int TreasureBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, item_info_),
  };
  TreasureBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureBox_descriptor_,
      TreasureBox::default_instance_,
      TreasureBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureBox));
  UsedName_descriptor_ = file->message_type(51);
  static const int UsedName_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, status_),
  };
  UsedName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsedName_descriptor_,
      UsedName::default_instance_,
      UsedName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsedName));
  UsedNameData_descriptor_ = file->message_type(52);
  static const int UsedNameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, used_name_),
  };
  UsedNameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsedNameData_descriptor_,
      UsedNameData::default_instance_,
      UsedNameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsedNameData));
  UnuseNameMsg_descriptor_ = file->message_type(53);
  static const int UnuseNameMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, name_),
  };
  UnuseNameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnuseNameMsg_descriptor_,
      UnuseNameMsg::default_instance_,
      UnuseNameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnuseNameMsg));
  HideNpcData_descriptor_ = file->message_type(54);
  static const int HideNpcData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, is_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, rotate_),
  };
  HideNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HideNpcData_descriptor_,
      HideNpcData::default_instance_,
      HideNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HideNpcData));
  HideNpcPb_descriptor_ = file->message_type(55);
  static const int HideNpcPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, npc_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, hide_datas_),
  };
  HideNpcPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HideNpcPb_descriptor_,
      HideNpcPb::default_instance_,
      HideNpcPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HideNpcPb));
  NpcPosition_descriptor_ = file->message_type(56);
  static const int NpcPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, rotate_),
  };
  NpcPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcPosition_descriptor_,
      NpcPosition::default_instance_,
      NpcPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcPosition));
  OpenedFunctionNotify_descriptor_ = file->message_type(57);
  static const int OpenedFunctionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, opened_function_),
  };
  OpenedFunctionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenedFunctionNotify_descriptor_,
      OpenedFunctionNotify::default_instance_,
      OpenedFunctionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenedFunctionNotify));
  GetBuddyTemplateAttributeRequest_descriptor_ = file->message_type(58);
  static const int GetBuddyTemplateAttributeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, level_),
  };
  GetBuddyTemplateAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuddyTemplateAttributeRequest_descriptor_,
      GetBuddyTemplateAttributeRequest::default_instance_,
      GetBuddyTemplateAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuddyTemplateAttributeRequest));
  GetBuddyTemplateAttributeResponse_descriptor_ = file->message_type(59);
  static const int GetBuddyTemplateAttributeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, bare_attr_list_),
  };
  GetBuddyTemplateAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuddyTemplateAttributeResponse_descriptor_,
      GetBuddyTemplateAttributeResponse::default_instance_,
      GetBuddyTemplateAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuddyTemplateAttributeResponse));
  MessageModule_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
  ItemPositionType_descriptor_ = file->enum_type(2);
  MessageAction_descriptor_ = file->enum_type(3);
  ARENA_SELF_NOTICE_TYPE_descriptor_ = file->enum_type(4);
  ARENA_PUBLIC_NOTICE_TYPE_descriptor_ = file->enum_type(5);
  PUBLIC_NOTICE_TYPE_descriptor_ = file->enum_type(6);
  Profession_descriptor_ = file->enum_type(7);
  Gender_descriptor_ = file->enum_type(8);
  GameStatus_descriptor_ = file->enum_type(9);
  AccountStatus_descriptor_ = file->enum_type(10);
  LEVEL_UP_TYPE_descriptor_ = file->enum_type(11);
  PRACTICE_MODE_descriptor_ = file->enum_type(12);
  PAY_FUNCTION_TYPE_descriptor_ = file->enum_type(13);
  ENUM_ATTR_descriptor_ = file->enum_type(14);
  SKIP_FIGHT_TYPE_descriptor_ = file->enum_type(15);
  FIGHT_TYPE_descriptor_ = file->enum_type(16);
  YinglingStatus_descriptor_ = file->enum_type(17);
  YinglingQuality_descriptor_ = file->enum_type(18);
  RefreshYinglingListType_descriptor_ = file->enum_type(19);
  AnnounceType_descriptor_ = file->enum_type(20);
  ItemType_descriptor_ = file->enum_type(21);
  EquipPosition_descriptor_ = file->enum_type(22);
  LINE_UP_OPERATION_descriptor_ = file->enum_type(23);
  UPDATE_BATTLE_SKILL_TYPE_descriptor_ = file->enum_type(24);
  MONEY_TYPE_descriptor_ = file->enum_type(25);
  QuestActionType_descriptor_ = file->enum_type(26);
  QuestAction_ClientActionType_descriptor_ = file->enum_type(27);
  QuestStatus_descriptor_ = file->enum_type(28);
  QuestType_descriptor_ = file->enum_type(29);
  DIFFICULTY_LEVEL_descriptor_ = file->enum_type(30);
  TEAM_OBJECTIVE_TYPE_descriptor_ = file->enum_type(31);
  TEAM_ADD_TYPE_descriptor_ = file->enum_type(32);
  TEAM_OPERATION_descriptor_ = file->enum_type(33);
  TEAM_APPLY_RESULT_descriptor_ = file->enum_type(34);
  TEAM_LINEUP_OPERATION_descriptor_ = file->enum_type(35);
  SERVER_SYNC_TEAM_TYPE_descriptor_ = file->enum_type(36);
  RoleLimitType_descriptor_ = file->enum_type(37);
  FunctionLimitType_descriptor_ = file->enum_type(38);
  VipSettingsType_descriptor_ = file->enum_type(39);
  PlayerBitType_descriptor_ = file->enum_type(40);
  PlayerFlagType_descriptor_ = file->enum_type(41);
  ClientPlayerFlagType_descriptor_ = file->enum_type(42);
  BUY_MORE_TIMES_TYPE_descriptor_ = file->enum_type(43);
  BUY_CLEAR_CD_TYPE_descriptor_ = file->enum_type(44);
  UniqueNameType_descriptor_ = file->enum_type(45);
  FunctionType_descriptor_ = file->enum_type(46);
  LivenessType_descriptor_ = file->enum_type(47);
  PlayerConfigType_descriptor_ = file->enum_type(48);
  FriendConfigType_descriptor_ = file->enum_type(49);
  UpdateMonsterBuffType_descriptor_ = file->enum_type(50);
  TeamChannelMemberNotifyType_descriptor_ = file->enum_type(51);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCardInfo_descriptor_, &InstanceCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedInfo_descriptor_, &InstanceWantedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fighter_descriptor_, &Fighter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBonus_descriptor_, &SkillBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bonus_descriptor_, &Bonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightResult_descriptor_, &FightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPhyStrengthInfo_descriptor_, &PlayerPhyStrengthInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCInfo_descriptor_, &NPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaojuInfo_descriptor_, &BaojuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSkillInfo_descriptor_, &BattleSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankInfo_descriptor_, &BankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingInfo_descriptor_, &YinglingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyDetailInfo_descriptor_, &BuddyDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRelationData_descriptor_, &PlayerRelationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfo_descriptor_, &InstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceDetail_descriptor_, &InstanceDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterInfo_descriptor_, &MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttributeData_descriptor_, &AttributeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDetail_descriptor_, &EquipDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoneData_descriptor_, &EquipStoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoneData_StoneData_descriptor_, &EquipStoneData_StoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBSlotData_descriptor_, &DBSlotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FighterInfo_descriptor_, &FighterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineupInfo_descriptor_, &LineupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money1_descriptor_, &Money1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money_descriptor_, &Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestAction_descriptor_, &QuestAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestActionsPb_descriptor_, &QuestActionsPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPb_descriptor_, &QuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPreCondition_descriptor_, &QuestPreCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRewards_descriptor_, &QuestRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRewards_QuestRewardItem_descriptor_, &QuestRewards_QuestRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestProtoype_descriptor_, &QuestProtoype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberInfo_descriptor_, &TeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoolDown_descriptor_, &CoolDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownPb_descriptor_, &RoleCoolDownPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyCountLimit_descriptor_, &DailyCountLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyLimitPb_descriptor_, &RoleDailyLimitPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBRoleLimitDataPb_descriptor_, &DBRoleLimitDataPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuest_descriptor_, &DailyQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuestPb_descriptor_, &DailyQuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XunluoQuestPb_descriptor_, &XunluoQuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagPb_descriptor_, &PlayerFlagPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagDataPb_descriptor_, &PlayerFlagDataPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayerInfo_descriptor_, &ArenaPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureBox_descriptor_, &TreasureBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsedName_descriptor_, &UsedName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsedNameData_descriptor_, &UsedNameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnuseNameMsg_descriptor_, &UnuseNameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HideNpcData_descriptor_, &HideNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HideNpcPb_descriptor_, &HideNpcPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcPosition_descriptor_, &NpcPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenedFunctionNotify_descriptor_, &OpenedFunctionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuddyTemplateAttributeRequest_descriptor_, &GetBuddyTemplateAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuddyTemplateAttributeResponse_descriptor_, &GetBuddyTemplateAttributeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fcommon_2eproto() {
  delete InstanceCardInfo::default_instance_;
  delete InstanceCardInfo_reflection_;
  delete InstanceWantedInfo::default_instance_;
  delete InstanceWantedInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete Fighter::default_instance_;
  delete Fighter_reflection_;
  delete SkillBonus::default_instance_;
  delete SkillBonus_reflection_;
  delete Bonus::default_instance_;
  delete Bonus_reflection_;
  delete FightResult::default_instance_;
  delete FightResult_reflection_;
  delete PlayerPhyStrengthInfo::default_instance_;
  delete PlayerPhyStrengthInfo_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete NPCInfo::default_instance_;
  delete NPCInfo_reflection_;
  delete BaojuInfo::default_instance_;
  delete BaojuInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete BattleSkillInfo::default_instance_;
  delete BattleSkillInfo_reflection_;
  delete BankInfo::default_instance_;
  delete BankInfo_reflection_;
  delete YinglingInfo::default_instance_;
  delete YinglingInfo_reflection_;
  delete BuddyDetailInfo::default_instance_;
  delete BuddyDetailInfo_reflection_;
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete PlayerRelationData::default_instance_;
  delete PlayerRelationData_reflection_;
  delete InstanceInfo::default_instance_;
  delete InstanceInfo_reflection_;
  delete InstanceDetail::default_instance_;
  delete InstanceDetail_reflection_;
  delete MonsterInfo::default_instance_;
  delete MonsterInfo_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete AttributeData::default_instance_;
  delete AttributeData_reflection_;
  delete EquipDetail::default_instance_;
  delete EquipDetail_reflection_;
  delete EquipStoneData::default_instance_;
  delete EquipStoneData_reflection_;
  delete EquipStoneData_StoneData::default_instance_;
  delete EquipStoneData_StoneData_reflection_;
  delete DBSlotData::default_instance_;
  delete DBSlotData_reflection_;
  delete FighterInfo::default_instance_;
  delete FighterInfo_reflection_;
  delete LineupInfo::default_instance_;
  delete LineupInfo_reflection_;
  delete Money1::default_instance_;
  delete Money1_reflection_;
  delete Money::default_instance_;
  delete Money_reflection_;
  delete QuestAction::default_instance_;
  delete QuestAction_reflection_;
  delete QuestActionsPb::default_instance_;
  delete QuestActionsPb_reflection_;
  delete QuestPb::default_instance_;
  delete QuestPb_reflection_;
  delete QuestPreCondition::default_instance_;
  delete QuestPreCondition_reflection_;
  delete QuestRewards::default_instance_;
  delete QuestRewards_reflection_;
  delete QuestRewards_QuestRewardItem::default_instance_;
  delete QuestRewards_QuestRewardItem_reflection_;
  delete QuestProtoype::default_instance_;
  delete QuestProtoype_reflection_;
  delete TeamMemberInfo::default_instance_;
  delete TeamMemberInfo_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete CoolDown::default_instance_;
  delete CoolDown_reflection_;
  delete RoleCoolDownPb::default_instance_;
  delete RoleCoolDownPb_reflection_;
  delete DailyCountLimit::default_instance_;
  delete DailyCountLimit_reflection_;
  delete RoleDailyLimitPb::default_instance_;
  delete RoleDailyLimitPb_reflection_;
  delete DBRoleLimitDataPb::default_instance_;
  delete DBRoleLimitDataPb_reflection_;
  delete DailyQuest::default_instance_;
  delete DailyQuest_reflection_;
  delete DailyQuestPb::default_instance_;
  delete DailyQuestPb_reflection_;
  delete XunluoQuestPb::default_instance_;
  delete XunluoQuestPb_reflection_;
  delete PlayerFlagPb::default_instance_;
  delete PlayerFlagPb_reflection_;
  delete PlayerFlagDataPb::default_instance_;
  delete PlayerFlagDataPb_reflection_;
  delete ArenaPlayerInfo::default_instance_;
  delete ArenaPlayerInfo_reflection_;
  delete TreasureBox::default_instance_;
  delete TreasureBox_reflection_;
  delete UsedName::default_instance_;
  delete UsedName_reflection_;
  delete UsedNameData::default_instance_;
  delete UsedNameData_reflection_;
  delete UnuseNameMsg::default_instance_;
  delete UnuseNameMsg_reflection_;
  delete HideNpcData::default_instance_;
  delete HideNpcData_reflection_;
  delete HideNpcPb::default_instance_;
  delete HideNpcPb_reflection_;
  delete NpcPosition::default_instance_;
  delete NpcPosition_reflection_;
  delete OpenedFunctionNotify::default_instance_;
  delete OpenedFunctionNotify_reflection_;
  delete GetBuddyTemplateAttributeRequest::default_instance_;
  delete GetBuddyTemplateAttributeRequest_reflection_;
  delete GetBuddyTemplateAttributeResponse::default_instance_;
  delete GetBuddyTemplateAttributeResponse_reflection_;
}

void protobuf_AddDesc_game_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021game_common.proto\022\020protocols.common\032\020e"
    "rror_code.proto\"V\n\020InstanceCardInfo\022\017\n\007i"
    "tem_id\030\001 \002(\005\022\022\n\nitem_count\030\002 \002(\005\022\014\n\004type"
    "\030\003 \002(\005\022\017\n\007icon_id\030\004 \002(\005\"s\n\022InstanceWante"
    "dInfo\022\023\n\013instance_id\030\001 \002(\005\022\021\n\tleft_time\030"
    "\002 \001(\005\0225\n\tcard_info\030\003 \003(\0132\".protocols.com"
    "mon.InstanceCardInfo\"B\n\010BuffInfo\022\017\n\007buff"
    "_id\030\001 \002(\005\022\022\n\nbuff_value\030\002 \001(\005\022\021\n\tleft_ti"
    "me\030\003 \001(\005\"\214\002\n\007Fighter\022\014\n\004camp\030\001 \001(\005\022\r\n\005in"
    "dex\030\002 \001(\005\022\014\n\004guid\030\003 \001(\003\022\013\n\003tid\030\004 \001(\005\022\n\n\002"
    "hp\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\021\n\tis_player\030\007 \001"
    "(\005\022\026\n\016is_team_leader\030\010 \001(\005\022\014\n\004name\030\t \001(\t"
    "\022\022\n\nowner_name\030\017 \001(\t\022\017\n\007quality\030\n \001(\005\022\022\n"
    "\nphy_attack\030\013 \001(\005\022\023\n\013phy_defence\030\014 \001(\005\022\022"
    "\n\nmag_attack\030\r \001(\005\022\023\n\013mag_defence\030\016 \001(\005\""
    "F\n\nSkillBonus\022\020\n\010skill_id\030\001 \002(\005\022\023\n\013skill"
    "_level\030\003 \002(\005\022\021\n\texp_bonus\030\002 \002(\005\"\264\004\n\005Bonu"
    "s\022\014\n\004guid\030\001 \001(\003\022\021\n\texp_bonus\030\002 \001(\005\022\021\n\tvi"
    "p_level\030\r \001(\005\022\026\n\016vip_exp_factor\030\n \001(\005\022\027\n"
    "\017team_exp_factor\030\013 \001(\005\022\030\n\020other_exp_fact"
    "or\030\014 \001(\005\0221\n\013skill_bonus\030\003 \003(\0132\034.protocol"
    "s.common.SkillBonus\022\027\n\017gold_coin_bonus\030\010"
    " \001(\005\022\034\n\024bag_has_enough_slots\030\004 \001(\005\022\026\n\016ba"
    "se_exp_bonus\030\t \001(\005\022\034\n\024base_gold_coin_bon"
    "us\030\016 \001(\005\022\032\n\022cont_win_exp_bonus\030\017 \001(\005\022\033\n\023"
    "cont_win_gold_bonus\030\020 \001(\005\022\035\n\025de_cont_win"
    "_exp_bonus\030\021 \001(\005\022\036\n\026de_cont_win_gold_bon"
    "us\030\022 \001(\005\022-\n\tdrop_item\030\005 \003(\0132\032.protocols."
    "common.ItemInfo\0223\n\017quest_drop_item\030\007 \003(\013"
    "2\032.protocols.common.ItemInfo\0220\n\tequipmen"
    "t\030\006 \003(\0132\035.protocols.common.EquipDetail\"\302"
    "\003\n\013FightResult\022\021\n\tbattle_id\030\005 \002(\005\022*\n\007fig"
    "hter\030\001 \003(\0132\031.protocols.common.Fighter\022\016\n"
    "\006winner\030\002 \001(\005\022&\n\005bonus\030\003 \003(\0132\027.protocols"
    ".common.Bonus\0229\n\024camp_a_battle_skills\030\006 "
    "\003(\0132\033.protocols.common.SkillInfo\0229\n\024camp"
    "_b_battle_skills\030\007 \003(\0132\033.protocols.commo"
    "n.SkillInfo\022\022\n\nround_data\030\004 \003(\014\022\020\n\010npc_n"
    "ame\030\010 \001(\t\022\021\n\tnpc_level\030\013 \001(\005\022\034\n\024left_fre"
    "e_skip_times\030\t \001(\005\022\034\n\024auto_skip_time_lim"
    "it\030\n \001(\005\022\033\n\023camp_a_dead_persons\030\014 \001(\005\022\033\n"
    "\023camp_b_dead_persons\030\r \001(\005\022\027\n\017battle_gro"
    "up_id\030\016 \001(\005\"\275\001\n\025PlayerPhyStrengthInfo\022\027\n"
    "\014phy_strength\030\001 \001(\005:\0010\022\035\n\022phy_strength_l"
    "imit\030\002 \001(\005:\0010\022\035\n\022extra_phy_strength\030\003 \001("
    "\005:\0010\022#\n\030extra_phy_strength_limit\030\004 \001(\005:\001"
    "0\022(\n\035time_for_recover_phy_strength\030\005 \001(\005"
    ":\0010\"\346\004\n\nPlayerInfo\022\014\n\004guid\030\001 \002(\003\022\013\n\003tid\030"
    "\020 \001(\005\022\021\n\006map_id\030\002 \001(\005:\0011\022\020\n\005map_x\030\003 \001(\005:"
    "\0011\022\020\n\005map_y\030\004 \001(\005:\0011\022\024\n\tvip_level\030\005 \001(\005:"
    "\0010\0221\n\003job\030\006 \001(\0162\034.protocols.common.Profe"
    "ssion:\006WIZARD\022\024\n\tjob_level\030\007 \001(\005:\0011\022\017\n\004f"
    "lag\030\010 \001(\005:\0010\022\014\n\004name\030\t \002(\t\022.\n\006gender\030\n \001"
    "(\0162\030.protocols.common.Gender:\004MALE\022\r\n\002hp"
    "\030\013 \001(\005:\0010\022\016\n\003exp\030\014 \001(\005:\0010\022\026\n\013vip_end_sec"
    "\030\r \001(\005:\0010\022\032\n\017lineup_capacity\030\025 \001(\005:\0010\0228\n"
    "\006status\030\017 \001(\0162\034.protocols.common.GameSta"
    "tus:\nGS_OFFLINE\022\023\n\013leader_guid\030\021 \001(\003\022\021\n\t"
    "server_id\030\024 \001(\005\022\023\n\010guild_id\030\022 \001(\005:\0010\022\024\n\n"
    "guild_name\030\023 \001(\t:\000\022D\n\023player_phy_strengt"
    "h\030\027 \001(\0132\'.protocols.common.PlayerPhyStre"
    "ngthInfo\022\032\n\017map_instance_id\030\026 \001(\005:\0010\022\026\n\013"
    "follow_guid\030\030 \001(\003:\0010\"O\n\007NPCInfo\022\016\n\006npc_i"
    "d\030\001 \002(\005\022\017\n\007npc_tid\030\002 \001(\005\022\020\n\010npc_name\030\003 \001"
    "(\t\022\021\n\tnpc_level\030\004 \001(\005\"\031\n\tBaojuInfo\022\014\n\004gu"
    "id\030\001 \002(\003\"\246\001\n\010ItemInfo\022\017\n\007item_id\030\001 \002(\003\022\020"
    "\n\005count\030\002 \001(\005:\0010\022\022\n\007expired\030\003 \001(\005:\0010\022\013\n\003"
    "pos\030\004 \001(\005\022\020\n\010pos_type\030\005 \001(\005\022\030\n\tbind_flag"
    "\030\006 \001(\010:\005false\022\031\n\016strength_level\030\007 \001(\005:\0010"
    "\022\017\n\004mark\030\010 \001(\005:\0010\"\263\001\n\tSkillInfo\022\020\n\010skill"
    "_id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\034\n\020equip_slot_i"
    "ndex\030\003 \001(\005:\002-1\022\013\n\003exp\030\004 \001(\005\022\030\n\ris_practi"
    "cing\030\005 \001(\005:\0010\022\022\n\ndelta_time\030\006 \001(\005\022\025\n\rdel"
    "ta_add_exp\030\007 \001(\005\022\025\n\rpractice_time\030\010 \001(\005\""
    "]\n\017BattleSkillInfo\022\020\n\010skill_id\030\001 \002(\005\022\r\n\005"
    "level\030\002 \002(\005\022\034\n\021battle_skill_type\030\003 \001(\005:\001"
    "2\022\013\n\003exp\030\004 \001(\005\"9\n\010BankInfo\022\014\n\004coin\030\001 \001(\005"
    "\022\016\n\006coupon\030\002 \001(\005\022\017\n\007diamond\030\003 \001(\005\"\376\001\n\014Yi"
    "nglingInfo\022\014\n\004guid\030\001 \002(\003\022\013\n\003tid\030\014 \002(\005\0221\n"
    "\003job\030\002 \001(\0162\034.protocols.common.Profession"
    ":\006WIZARD\022.\n\006gender\030\017 \001(\0162\030.protocols.com"
    "mon.Gender:\004MALE\022\024\n\tjob_level\030\003 \001(\005:\0010\022\014"
    "\n\004name\030\004 \002(\t\022\022\n\007quality\030\t \001(\005:\0010\022\031\n\016figh"
    "t_capacity\030\n \001(\005:\0010\022\035\n\022is_in_fight_lineu"
    "p\030\020 \001(\005:\0010\"\311\002\n\017BuddyDetailInfo\022\014\n\004guid\030\010"
    " \002(\003\022\014\n\004name\030\024 \002(\t\0228\n\017total_attr_list\030\005 "
    "\003(\0132\037.protocols.common.AttributeData\0227\n\016"
    "bare_attr_list\030\006 \003(\0132\037.protocols.common."
    "AttributeData\022/\n\nequip_list\030\007 \003(\0132\033.prot"
    "ocols.common.EquipInfo\022\016\n\003exp\030\017 \001(\005:\0010\022\r"
    "\n\002hp\030\020 \001(\005:\0010\022\023\n\010cur_soul\030\021 \001(\005:\0010\022\023\n\010ma"
    "x_soul\030\022 \001(\005:\0010\022\022\n\007quality\030\023 \001(\005:\0010\022\031\n\016f"
    "ight_capacity\030\025 \001(\005:\0010\"*\n\010Relation\022\014\n\004gu"
    "id\030\001 \002(\003\022\020\n\010relation\030\002 \002(\005\"@\n\022PlayerRela"
    "tionData\022*\n\006friend\030\001 \003(\0132\032.protocols.com"
    "mon.Relation\"2\n\014InstanceInfo\022\023\n\013instance"
    "_id\030\001 \001(\005\022\r\n\005grade\030\002 \001(\005\"\250\001\n\016InstanceDet"
    "ail\022\023\n\013instance_id\030\001 \001(\005\022\r\n\005grade\030\002 \001(\005\022"
    "\016\n\006map_id\030\003 \001(\005\022\r\n\005map_x\030\004 \001(\005\022\r\n\005map_y\030"
    "\005 \001(\005\022\024\n\014monster_list\030\006 \003(\005\022\023\n\013killed_li"
    "st\030\007 \003(\005\022\031\n\021last_transport_id\030\010 \001(\005\"\221\001\n\013"
    "MonsterInfo\022\014\n\004guid\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022"
    "\r\n\002hp\030\003 \002(\005:\0010\022\020\n\005level\030\004 \001(\005:\0010\022\022\n\007drop"
    "_id\030\005 \001(\005:\0010\022\016\n\003exp\030\006 \001(\005:\0010\022\020\n\010model_id"
    "\030\007 \001(\014\022\017\n\007icon_id\030\010 \001(\014\"x\n\tEquipInfo\022\017\n\007"
    "item_id\030\001 \002(\003\0221\n\010position\030\002 \001(\0162\037.protoc"
    "ols.common.EquipPosition\022\031\n\016strength_lev"
    "el\030\003 \001(\005:\0010\022\014\n\004mark\030\004 \001(\005\"+\n\rAttributeDa"
    "ta\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\275\003\n\013Equip"
    "Detail\022\017\n\007item_id\030\001 \002(\003\022\022\n\007expired\030\002 \001(\005"
    ":\0010\022\031\n\016strength_level\030\003 \001(\005:\0010\022\025\n\nslot_c"
    "ount\030\004 \001(\005:\0010\0222\n\tattr_list\030\005 \003(\0132\037.proto"
    "cols.common.AttributeData\022\024\n\tbind_flag\030\006"
    " \001(\005:\0010\0228\n\017extra_attr_list\030\007 \003(\0132\037.proto"
    "cols.common.AttributeData\022;\n\022strength_at"
    "tr_list\030\t \003(\0132\037.protocols.common.Attribu"
    "teData\022\014\n\004mark\030\n \001(\005\0228\n\017stone_attr_list\030"
    "\013 \003(\0132\037.protocols.common.AttributeData\022\030"
    "\n\020locked_attr_bits\030\014 \001(\005\0224\n\nstone_data\030\r"
    " \001(\0132 .protocols.common.EquipStoneData\"\327"
    "\001\n\016EquipStoneData\022>\n\nstone_data\030\002 \003(\0132*."
    "protocols.common.EquipStoneData.StoneDat"
    "a\022\030\n\020cur_socket_count\030\003 \001(\005\022\030\n\020max_socke"
    "t_count\030\004 \001(\005\022\036\n\026strength_client_chance\030"
    "\005 \001(\005\0321\n\tStoneData\022\022\n\nslot_index\030\001 \001(\005\022\020"
    "\n\010stone_id\030\002 \001(\005\"\304\001\n\nDBSlotData\022\030\n\020locke"
    "d_attr_bits\030\001 \001(\005\0224\n\nstone_data\030\002 \001(\0132 ."
    "protocols.common.EquipStoneData\022\022\n\nsocke"
    "t_num\030\003 \001(\005\022\031\n\021strength_fail_num\030\004 \001(\005\022\027"
    "\n\017strength_chance\030\005 \001(\005\022\036\n\026strength_clie"
    "nt_chance\030\006 \001(\005\"4\n\013FighterInfo\022\014\n\004guid\030\001"
    " \002(\003\022\027\n\014battle_index\030\002 \002(\005:\0010\"\234\001\n\nLineup"
    "Info\022\021\n\tlineup_id\030\001 \002(\005\022\023\n\013lineup_name\030\002"
    " \002(\t\022\027\n\017battle_skill_id\030\003 \003(\005\022.\n\007fighter"
    "\030\004 \003(\0132\035.protocols.common.FighterInfo\022\035\n"
    "\025lineup_fight_capacity\030\005 \001(\005\"G\n\006Money1\0220"
    "\n\nmoney_type\030\001 \002(\0162\034.protocols.common.MO"
    "NEY_TYPE\022\013\n\003num\030\002 \002(\003\"0\n\005Money\022\'\n\005money\030"
    "\001 \003(\0132\030.protocols.common.Money1\"[\n\013Quest"
    "Action\0226\n\013action_type\030\001 \001(\0162!.protocols."
    "common.QuestActionType\022\024\n\014action_param\030\002"
    " \003(\005\"@\n\016QuestActionsPb\022.\n\007actions\030\001 \003(\0132"
    "\035.protocols.common.QuestAction\"\206\002\n\007Quest"
    "Pb\022\020\n\010quest_id\030\001 \001(\005\0223\n\014quest_status\030\002 \001"
    "(\0162\035.protocols.common.QuestStatus\0221\n\007act"
    "ions\030\003 \001(\0132 .protocols.common.QuestActio"
    "nsPb\022B\n\nquest_type\030\004 \001(\0162\033.protocols.com"
    "mon.QuestType:\021QuestType_ZHUXIAN\022\022\n\nrewa"
    "rd_exp\030\005 \001(\005\022\023\n\013reward_coin\030\006 \001(\005\022\024\n\014cir"
    "cle_index\030\007 \001(\005\"\356\002\n\021QuestPreCondition\022\024\n"
    "\014pre_quest_id\030\001 \001(\005\022\033\n\020player_level_min\030"
    "\002 \001(\005:\0011\022\030\n\020player_level_max\030\003 \001(\005\022\022\n\nst"
    "art_time\030\004 \001(\003\022\020\n\010end_time\030\005 \001(\003\022\021\n\tregi"
    "on_id\030\006 \001(\003\022\032\n\013auto_accept\030\007 \001(\010:\005false\022"
    "/\n\tpro_limit\030\010 \001(\0162\034.protocols.common.Pr"
    "ofession\022\025\n\rpre_quest_ids\030\t \003(\005\022\026\n\016post_"
    "quest_ids\030\n \003(\005\022\032\n\013auto_commit\030\013 \001(\010:\005fa"
    "lse\022\037\n\020can_be_cancelled\030\014 \001(\010:\005false\022\032\n\013"
    "daily_reset\030\r \001(\010:\005false\"\235\001\n\014QuestReward"
    "s\022\013\n\003exp\030\001 \001(\005\022\014\n\004coin\030\002 \001(\005\022<\n\004item\030\003 \003"
    "(\0132..protocols.common.QuestRewards.Quest"
    "RewardItem\0324\n\017QuestRewardItem\022\017\n\007item_id"
    "\030\001 \002(\005\022\020\n\010item_num\030\002 \001(\005\"\226\002\n\rQuestProtoy"
    "pe\022\020\n\010quest_id\030\001 \002(\005\022\022\n\nquest_name\030\002 \001(\014"
    "\022:\n\rpre_condition\030\003 \001(\0132#.protocols.comm"
    "on.QuestPreCondition\022.\n\007actions\030\004 \003(\0132\035."
    "protocols.common.QuestAction\022/\n\007rewards\030"
    "\005 \001(\0132\036.protocols.common.QuestRewards\022B\n"
    "\nquest_type\030\006 \001(\0162\033.protocols.common.Que"
    "stType:\021QuestType_ZHUXIAN\"\330\001\n\016TeamMember"
    "Info\022\016\n\006seq_no\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022\014\n\004na"
    "me\030\003 \001(\t\022\021\n\tis_online\030\004 \002(\005\022)\n\003job\030\005 \001(\016"
    "2\034.protocols.common.Profession\022\r\n\005level\030"
    "\006 \001(\005\022\026\n\016fight_capacity\030\010 \001(\005\0225\n\ryinglin"
    "g_info\030\007 \003(\0132\036.protocols.common.Yingling"
    "Info\"\341\003\n\010TeamInfo\022\017\n\007team_id\030\001 \002(\005\022\014\n\004na"
    "me\030\002 \002(\t\022\023\n\013leader_guid\030\003 \002(\003\022\031\n\021team_me"
    "mber_limit\030\004 \002(\005\022\027\n\017cur_team_member\030\005 \001("
    "\005\0228\n\tobjective\030\006 \001(\0162%.protocols.common."
    "TEAM_OBJECTIVE_TYPE\022\026\n\016custom_pass_id\030\007 "
    "\001(\005\022;\n\017difficult_level\030\010 \001(\0162\".protocols"
    ".common.DIFFICULTY_LEVEL\022\032\n\022min_level_re"
    "quired\030\t \001(\005\0228\n\017add_member_type\030\n \001(\0162\037."
    "protocols.common.TEAM_ADD_TYPE\0225\n\013team_m"
    "ember\030\013 \003(\0132 .protocols.common.TeamMembe"
    "rInfo\022\034\n\024team_battle_skill_id\030\r \001(\005\0223\n\014f"
    "ighter_info\030\016 \003(\0132\035.protocols.common.Fig"
    "hterInfo\"%\n\010CoolDown\022\014\n\004type\030\001 \002(\005\022\013\n\003se"
    "c\030\002 \002(\005\"\?\n\016RoleCoolDownPb\022-\n\tcool_down\030\002"
    " \003(\0132\032.protocols.common.CoolDown\"\244\001\n\017Dai"
    "lyCountLimit\022\022\n\nlimit_type\030\001 \002(\005\022\023\n\013limi"
    "t_count\030\002 \002(\005\022\025\n\rcurrent_count\030\003 \002(\005\022\034\n\024"
    "limit_purchase_count\030\004 \002(\005\022\036\n\026current_pu"
    "rchase_count\030\005 \002(\005\022\023\n\013update_time\030\006 \001(\005\""
    "J\n\020RoleDailyLimitPb\0226\n\013daily_limit\030\001 \003(\013"
    "2!.protocols.common.DailyCountLimit\"\201\001\n\021"
    "DBRoleLimitDataPb\0223\n\tcool_down\030\001 \001(\0132 .p"
    "rotocols.common.RoleCoolDownPb\0227\n\013count_"
    "limit\030\002 \001(\0132\".protocols.common.RoleDaily"
    "LimitPb\"z\n\nDailyQuest\022\020\n\010quest_id\030\001 \002(\005\022"
    "\017\n\007quality\030\002 \002(\005\022\016\n\006status\030\003 \001(\005\022\020\n\010cate"
    "gory\030\004 \002(\005\022\022\n\nreward_exp\030\005 \001(\005\022\023\n\013reward"
    "_coin\030\006 \001(\005\"\266\001\n\014DailyQuestPb\0222\n\014daily_qu"
    "ests\030\001 \003(\0132\034.protocols.common.DailyQuest"
    "\022;\n\025accepted_daily_quests\030\002 \003(\0132\034.protoc"
    "ols.common.DailyQuest\0225\n\014xunluo_quest\030\003 "
    "\001(\0132\037.protocols.common.XunluoQuestPb\"y\n\r"
    "XunluoQuestPb\022\030\n\020cur_circle_index\030\003 \001(\005\022"
    "\027\n\017xunluo_quest_id\030\004 \001(\005\022\031\n\021xunluo_rewar"
    "d_exp\030\005 \001(\005\022\032\n\022xunluo_reward_coin\030\006 \001(\005\""
    "+\n\014PlayerFlagPb\022\014\n\004type\030\001 \002(\005\022\r\n\005value\030\002"
    " \002(\005\"@\n\020PlayerFlagDataPb\022,\n\004data\030\001 \003(\0132\036"
    ".protocols.common.PlayerFlagPb\"\272\001\n\017Arena"
    "PlayerInfo\022\014\n\004guid\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\r"
    "\n\005level\030\003 \002(\005\022\020\n\010cur_rank\030\004 \002(\005\022\024\n\014highe"
    "st_rank\030\007 \001(\005\022\016\n\006titile\030\005 \001(\005\022\025\n\rmax_con"
    "t_wins\030\006 \001(\005\022\025\n\rcur_cont_wins\030\010 \001(\005\022\026\n\016f"
    "ight_capacity\030\t \001(\005\"J\n\013TreasureBox\022\014\n\004ty"
    "pe\030\001 \002(\005\022-\n\titem_info\030\002 \003(\0132\032.protocols."
    "common.ItemInfo\"I\n\010UsedName\022\014\n\004name\030\001 \001("
    "\t\022\014\n\004type\030\002 \001(\005\022\021\n\tserver_id\030\003 \001(\005\022\016\n\006st"
    "atus\030\004 \001(\003\"=\n\014UsedNameData\022-\n\tused_name\030"
    "\001 \003(\0132\032.protocols.common.UsedName\"8\n\014Unu"
    "seNameMsg\022(\n\004name\030\001 \001(\0132\032.protocols.comm"
    "on.UsedName\"n\n\013HideNpcData\022\016\n\006npc_id\030\001 \002"
    "(\005\022\031\n\nis_display\030\002 \001(\010:\005false\022\016\n\006map_id\030"
    "\003 \001(\005\022\t\n\001x\030\004 \001(\005\022\t\n\001y\030\005 \001(\005\022\016\n\006rotate\030\006 "
    "\001(\005\"O\n\tHideNpcPb\022\017\n\007npc_ids\030\001 \003(\005\0221\n\nhid"
    "e_datas\030\002 \003(\0132\035.protocols.common.HideNpc"
    "Data\"C\n\013NpcPosition\022\016\n\006map_id\030\001 \001(\005\022\t\n\001x"
    "\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\016\n\006rotate\030\004 \001(\005\"/\n\024Ope"
    "nedFunctionNotify\022\027\n\017opened_function\030\001 \003"
    "(\005\">\n GetBuddyTemplateAttributeRequest\022\013"
    "\n\003tid\030\001 \002(\005\022\r\n\005level\030\002 \001(\005\"p\n!GetBuddyTe"
    "mplateAttributeResponse\022\022\n\nerror_code\030\001 "
    "\002(\005\0227\n\016bare_attr_list\030\002 \003(\0132\037.protocols."
    "common.AttributeData*;\n\rMessageModule\022\023\n"
    "\017MSG_MODULE_GAME\020\000\022\025\n\021MSG_MODULE_SERVER\020"
    "\017*O\n\013MessageType\022\024\n\020MSG_TYPE_REQUEST\020\000\022\025"
    "\n\021MSG_TYPE_RESPONSE\020\001\022\023\n\017MSG_TYPE_NOTIFY"
    "\020\002*N\n\020ItemPositionType\022\013\n\007IPT_BAG\020\000\022\r\n\tI"
    "PT_EQUIP\020\001\022\r\n\tIPT_DEPOT\020\002\022\017\n\013IPT_BUYBACK"
    "\020\003*\257:\n\rMessageAction\022\030\n\024MSG_ACTION_ACC_L"
    "OGIN\020\001\022\033\n\027MSG_ACTION_PLAYER_LOGIN\020\002\022\036\n\032M"
    "SG_ACTION_INIT_CONNECTION\020\003\022\034\n\030MSG_ACTIO"
    "N_PLAYER_LOGOUT\020\004\022\031\n\025MSG_ACTION_MOVE_STA"
    "RT\020\005\022\032\n\026MSG_ACTION_FIND_PLAYER\020\006\022\034\n\030MSG_"
    "ACTION_CREATE_PLAYER\020\007\022\032\n\026MSG_ACTION_PLA"
    "YER_INFO\020\010\022 \n\034MSG_ACTION_BUDDY_DETAIL_IN"
    "FO\020\t\022\030\n\024MSG_ACTION_HEARTBEAT\020\n\022\032\n\026MSG_AC"
    "TION_KICK_PLAYER\020\013\022\034\n\030MSG_ACTION_FIRE_YI"
    "NGLING\020\014\022 \n\034MSG_ACTION_GET_YINGLING_LIST"
    "\020\r\022\034\n\030MSG_ACTION_HIRE_YINGLING\020\016\022!\n\035MSG_"
    "ACTION_OPEN_YINGLING_SLOT\020\017\022%\n!MSG_ACTIO"
    "N_YINGLING_HIRING_STATUS\020\020\022&\n\"MSG_ACTION"
    "_REFRESH_HIRING_YINGLING\020\021\022*\n&MSG_ACTION"
    "_DEL_HIRABLE_YINGLING_NOTIFY\020\022\022\027\n\023MSG_AC"
    "TION_TELEPORT\020\023\022$\n MSG_ACTION_FIGHT_MONS"
    "TER_REQUEST\020\024\022\032\n\026MSG_ACTION_LEAVE_FIGHT\020"
    "\025\022\036\n\032MSG_ACTION_GET_PLAYER_VIEW\020\026\022\030\n\024MSG"
    "_ACTION_ENTER_MAP\020\027\022\030\n\024MSG_ACTION_TRANSP"
    "ORT\020\030\022\031\n\025MSG_ACTION_OPEN_DEPOT\020\031\022\035\n\031MSG_"
    "ACTION_ENTER_INSTANCE\020\032\022\035\n\031MSG_ACTION_LE"
    "AVE_INSTANCE\020\033\022!\n\035MSG_ACTION_LIST_PASS_I"
    "NSTANCE\020\034\022\"\n\036MSG_ACTION_GET_INSTANCE_DET"
    "AIL\020\035\022\035\n\031MSG_ACTION_GET_SKILL_LIST\020\036\022\034\n\030"
    "MSG_ACTION_GET_ITEM_LIST\020\037\022 \n\034MSG_ACTION"
    "_GET_LINEUP_DETAIL\020 \022\037\n\033MSG_ACTION_GET_E"
    "QUIP_DETAIL\020!\022\036\n\032MSG_ACTION_GET_LINEUP_L"
    "IST\020\"\022\031\n\025MSG_ACTION_SKIP_FIGHT\020#\022 \n\034MSG_"
    "ACTION_GET_INSTANCE_ITEM\020$\022\032\n\026MSG_ACTION"
    "_EQUIP_SKILL\020&\022\035\n\031MSG_ACTION_PRACTICE_SK"
    "ILL\020\'\022\"\n\036MSG_ACTION_STOP_PRACTICE_SKILL\020"
    "(\022\037\n\033MSG_ACTION_INJECT_SKILL_EXP\020)\022\033\n\027MS"
    "G_ACTION_UNLOAD_SKILL\020+\022 \n\034MSG_ACTION_LI"
    "NE_UP_OPERATION\020,\022$\n MSG_ACTION_GET_BATT"
    "LE_SKILL_LIST\020-\022\"\n\036MSG_ACTION_FIGHT_RESU"
    "LT_NOTIFY\020.\022\035\n\031MSG_ACTION_EXPAND_STORAGE"
    "\020/\022\033\n\027MSG_ACTION_REORDER_ITEM\0200\022\033\n\027MSG_A"
    "CTION_DESTROY_ITEM\0201\022\027\n\023MSG_ACTION_BUY_I"
    "TEM\0202\022\030\n\024MSG_ACTION_SELL_ITEM\0203\022\033\n\027MSG_A"
    "CTION_BUYBACK_ITEM\0204\022\037\n\033MSG_ACTION_GET_B"
    "UYBACK_LIST\0205\022\031\n\025MSG_ACTION_PLACE_ITEM\0206"
    "\022\027\n\023MSG_ACTION_USE_ITEM\0207\022\031\n\025MSG_ACTION_"
    "EQUIP_ITEM\0208\022\030\n\024MSG_ACTION_SWAP_ITEM\0209\022\034"
    "\n\030MSG_ACTION_EXCHANGE_ITEM\020;\022\031\n\025MSG_ACTI"
    "ON_QUEST_LIST\020<\022!\n\035MSG_ACTION_QUEST_ACCE"
    "PT_QUEST\020=\022!\n\035MSG_ACTION_QUEST_FINISH_QU"
    "EST\020>\022!\n\035MSG_ACTION_QUEST_CANCEL_QUEST\020\?"
    "\022\036\n\032MSG_ACTION_QUEST_DO_ACTION\020@\022&\n\"MSG_"
    "ACTION_GET_ONLINE_TIME_REQUEST\020A\022,\n(MSG_"
    "ACTION_GET_INSTANCE_WANTED_LIST_INFO\020B\022#"
    "\n\037MSG_ACTION_INSTANCE_WANTED_ONCE\020C\022#\n\037M"
    "SG_ACTION_FAST_INSTANCE_WANTED\020D\022\033\n\027MSG_"
    "ACTION_XUNLUO_QUEST\020E\022\032\n\026MSG_ACTION_CREA"
    "TE_TEAM\020F\022\032\n\026MSG_ACTION_SEARCH_TEAM\020G\022\036\n"
    "\032MSG_ACTION_TEAM_LINEUP_SET\020H\022\"\n\036MSG_ACT"
    "ION_TEAM_SETTING_MODIFY\020I\022\035\n\031MSG_ACTION_"
    "TEAM_OPERATION\020J\022\036\n\032MSG_ACTION_APPLY_JOI"
    "N_TEAM\020K\022$\n MSG_ACTION_APPLY_JOIN_TEAM_R"
    "EPLY\020L\022\037\n\033MSG_ACTION_INVITE_JOIN_TEAM\020M\022"
    "%\n!MSG_ACTION_INVITE_JOIN_TEAM_REPLY\020N\022#"
    "\n\037MSG_ACTION_GET_TEAM_DETAIL_INFO\020O\022\"\n\036M"
    "SG_ACTION_RECRUIT_TEAM_MEMBER\020P\022*\n&MSG_A"
    "CTION_APPLY_JOIN_TEAM_LIST_NOTIFY\020Q\022\037\n\033M"
    "SG_ACTION_TEAM_INFO_UPDATE\020R\022&\n\"MSG_ACTI"
    "ON_INVITE_JOIN_TEAM_NOTIFY\020S\022,\n(MSG_ACTI"
    "ON_INVITE_JOIN_TEAM_REPLY_NOTIFY\020T\022,\n(MS"
    "G_ACTION_TEAM_PLAYER_KICKED_OUT_NOTIFY\020U"
    "\022\031\n\025MSG_ACTION_AUTO_FIGHT\020V\022\"\n\036MSG_ACTIO"
    "N_SPEED_UP_AUTO_FIGHT\020W\022\036\n\032MSG_ACTION_ST"
    "OP_AUTO_FIGHT\020X\022$\n MSG_ACTION_CHOOSE_AUT"
    "O_FIGHT_NPC\020Y\022\"\n\036MSG_ACTION_MONEY_UPDATE"
    "_NOTIFY\020Z\022\"\n\036MSG_ACTION_EQUIP_UPDATE_NOT"
    "IFY\020\\\022 \n\034MSG_ACTION_EXP_UPDATE_NOTIFY\020]\022"
    ")\n%MSG_ACTION_GET_LINE_UP_FIGHT_CAPACITY"
    "\020^\022+\n\'MSG_ACTION_GET_BUDDY_TEMPLATE_ATTR"
    "IBUTE\020_\022(\n$MSG_ACTION_INSTANCE_WANTED_AL"
    "L_RESET\020`\022)\n%MSG_ACTION_INSTANCE_WANTED_"
    "RESET_COST\020a\022\032\n\026MSG_ACTION_PLAYER_CHAT\020d"
    "\022%\n!MSG_ACTION_BROADCAST_PLAYER_LOGIN\020e\022"
    "&\n\"MSG_ACTION_BROADCAST_PLAYER_LOGOUT\020f\022"
    "#\n\037MSG_ACTION_BROADCAST_MOVE_START\020g\022#\n\037"
    "MSG_ACTION_BROADCAST_ENTER_VIEW\020h\022#\n\037MSG"
    "_ACTION_BROADCAST_LEAVE_VIEW\020i\022$\n MSG_AC"
    "TION_BROADCAST_GAME_STATUS\020j\022%\n!MSG_ACTI"
    "ON_PRACTICE_SKILL_NOTIFIY\020k\022\027\n\023MSG_ACTIO"
    "N_LEVEL_UP\020l\022\"\n\036MSG_ACTION_UPDATE_BATTLE"
    "_SKILL\020m\022\031\n\025MSG_ACTION_CHANGE_MAP\020n\022\033\n\027M"
    "SG_ACTION_UPDATE_SKILL\020o\022#\n\037MSG_ACTION_P"
    "ASS_INSTANCE_NOTIFY\020p\022\034\n\030MSG_ACTION_SERV"
    "ER_STATUS\020q\022\032\n\026MSG_ACTION_INJECT_SOUL\020s\022"
    ")\n%MSG_ACTION_BUDDY_CHANLLENGE_SPACETIME"
    "\020t\022%\n!MSG_ACTION_BUDDY_SPACETIME_STATUS\020"
    "u\022 \n\034MSG_ACTION_BUDDY_SOUL_UPDATE\020v\022\033\n\027M"
    "SG_ACTION_FOLLOW_BUDDY\020w\022#\n\037MSG_ACTION_E"
    "QUIP_SHENGXING_OPEN\020x\022\036\n\032MSG_ACTION_EQUI"
    "P_SHENGXING\020y\022 \n\034MSG_ACTION_EQUIP_XILIAN"
    "_LOCK\020z\022\033\n\027MSG_ACTION_EQUIP_XILIAN\020{\022$\n "
    "MSG_ACTION_OPEN_MONSTER_EXP_BUFF\020|\022$\n MS"
    "G_ACTION_TAKE_MONSTER_EXP_BUFF\020}\0228\n3MSG_"
    "ACTION_TEAM_MEMBER_OPEN_MONSTER_EXP_BUFF"
    "_NOTIFY\020\364\003\022\"\n\036MSG_ACTION_SEND_FIGHT_TO_W"
    "ORLD\020~\022\035\n\031MSG_ACTION_GET_FIGHT_DATA\020\177\022&\n"
    "!MSG_ACTION_FIGHT_RESULT_BROADCAST\020\365\003\022!\n"
    "\034MSG_ACTION_BUDDY_LIST_NOTIFY\020\202\001\022 \n\033MSG_"
    "ACTION_BAG_ITEMS_NOTIFY\020\203\001\022\035\n\030MSG_ACTION"
    "_GET_MAIL_LIST\020\206\001\022\033\n\026MSG_ACTION_UPDATE_M"
    "AIL\020\207\001\022\037\n\032MSG_ACTION_NEW_MAIL_NOTIFY\020\210\001\022"
    "\035\n\030MSG_ACTION_ADD_BLACKLIST\020\211\001\022 \n\033MSG_AC"
    "TION_DELETE_BLACKLIST\020\212\001\022\035\n\030MSG_ACTION_G"
    "ET_BLACKLIST\020\213\001\022\034\n\027MSG_ACTION_TALK_CHANN"
    "EL\020\214\001\022\033\n\026MSG_ACTION_TALK_PLAYER\020\215\001\022&\n!MS"
    "G_ACTION_CHANNEL_MESSAGE_NOTIFY\020\216\001\022%\n MS"
    "G_ACTION_PLAYER_MESSAGE_NOTIFY\020\217\001\022\034\n\027MSG"
    "_ACTION_APPLY_FRIEND\020\220\001\022\035\n\030MSG_ACTION_AN"
    "SWER_FRIEND\020\221\001\022\035\n\030MSG_ACTION_DELETE_FRIE"
    "ND\020\222\001\022\037\n\032MSG_ACTION_GET_FRIEND_LIST\020\223\001\022 "
    "\n\033MSG_ACTION_GET_CONTACT_LIST\020\224\001\022$\n\037MSG_"
    "ACTION_FRIEND_STATUS_NOTIFY\020\225\001\022\036\n\031MSG_AC"
    "TION_GET_ARENA_INFO\020\226\001\022(\n#MSG_ACTION_UPD"
    "ATE_ARENA_INFO_NOTIFY\020\227\001\022 \n\033MSG_ACTION_C"
    "HALLENGE_PLAYER\020\230\001\022!\n\034MSG_ACTION_TAKE_TR"
    "EASURE_BOX\020\233\001\022#\n\036MSG_ACTION_GET_ARENA_RA"
    "NK_LIST\020\234\001\022\037\n\032MSG_ACTION_TAKE_TIME_BONUS"
    "\020\236\001\022#\n\036MSG_ACTION_HIRED_YINGLING_SLOT\020\240\001"
    "\022\032\n\025MSG_ACTION_GET_LINGLI\020\245\001\022\036\n\031MSG_ACTI"
    "ON_CONVERT_LINGLI\020\246\001\022\037\n\032MSG_ACTION_GET_D"
    "AILY_QUEST\020\252\001\022$\n\037MSG_ACTION_GENERATE_DAI"
    "LY_QUEST\020\253\001\022\035\n\030MSG_ACTION_GET_COOL_DOWN\020"
    "\257\001\022\037\n\032MSG_ACTION_CLEAR_COOL_DOWN\020\260\001\022 \n\033M"
    "SG_ACTION_UPDATE_COOL_DOWN\020\261\001\022\037\n\032MSG_ACT"
    "ION_GET_LIMIT_COUNT\020\264\001\022$\n\037MSG_ACTION_PUR"
    "CHASE_LIMIT_COUNT\020\265\001\022\"\n\035MSG_ACTION_UPDAT"
    "E_LIMIT_COUNT\020\266\001\022\035\n\030MSG_ACTION_EXCHANGE_"
    "CODE\020\271\001\022\034\n\027MSG_ACTION_PLAYER_FLAGS\020\276\001\022\037\n"
    "\032MSG_ACTION_SET_PLAYER_FLAG\020\277\001\022\033\n\026MSG_AC"
    "TION_RANDOM_NAME\020\300\001\022\037\n\032MSG_ACTION_PLAYER"
    "_HIDE_NPC\020\301\001\022\035\n\030MSG_ACTION_START_COLLECT"
    "\020\303\001\022\036\n\031MSG_ACTION_FINISH_COLLECT\020\304\001\022\"\n\035M"
    "SG_ACTION_ADD_PLAYER_REQUEST\020\310\001\022#\n\036MSG_A"
    "CTION_ADD_PLAYER_RESPONSE\020\311\001\022\034\n\027MSG_ACTI"
    "ON_ERROR_NOTIFY\020\312\001\022\036\n\031MSG_ACTION_SYNC_TE"
    "AM_INFO\020\314\001\022\027\n\022MSG_FUNCTION_LIMIT\020\315\001\022#\n\036M"
    "SG_ACTION_GET_DAILY_GIFT_INFO\020\316\001\022 \n\033MSG_"
    "ACTION_APPLY_DAILY_GIFT\020\317\001\022.\n)MSG_ACTION"
    "_GET_STACKABLE_ONLINE_GIFT_INFO\020\320\001\022+\n&MS"
    "G_ACTION_APPLY_STACKABLE_ONLINE_GIFT\020\321\001\022"
    "\034\n\027MSG_ACTION_CREATE_GUILD\020\323\001\022\034\n\027MSG_ACT"
    "ION_DELETE_GUILD\020\324\001\022\036\n\031MSG_ACTION_GET_GU"
    "ILD_LIST\020\325\001\022 \n\033MSG_ACTION_GET_GUILD_DETA"
    "IL\020\326\001\022 \n\033MSG_ACTION_APPLY_JOIN_GUILD\020\327\001\022"
    "!\n\034MSG_ACTION_ANSWER_JOIN_GUILD\020\330\001\022!\n\034MS"
    "G_ACTION_INVITE_JOIN_GUILD\020\331\001\022 \n\033MSG_ACT"
    "ION_REPLY_JOIN_GUILD\020\332\001\022#\n\036MSG_ACTION_DE"
    "LETE_GUILD_MEMBER\020\333\001\022%\n MSG_ACTION_GET_G"
    "UILD_MEMBER_LIST\020\334\001\022 \n\033MSG_ACTION_SET_ME"
    "MBER_TITLE\020\335\001\022#\n\036MSG_ACTION_GUILD_MEMBER"
    "_NOTIFY\020\336\001\022 \n\033MSG_ACTION_SET_GUILD_NOTIC"
    "E\020\337\001\022%\n MSG_ACTION_GET_GUILD_INVITE_LIST"
    "\020\340\001\022$\n\037MSG_ACTION_GET_GUILD_APPLY_LIST\020\341"
    "\001\022\037\n\032MSG_ACTION_ENTER_GUILD_MAP\020\342\001\022\037\n\032MS"
    "G_ACTION_LEAVE_GUILD_MAP\020\343\001\022\032\n\025MSG_ACTIO"
    "N_UPDATE_BIT\020\357\001\022!\n\034MSG_ACTION_GET_LIVENE"
    "SS_INFO\020\360\001\022#\n\036MSG_ACTION_TAKE_LIVENESS_A"
    "WARD\020\361\001\022%\n MSG_ACTION_LIVENESS_UPDAE_NOT"
    "IFY\020\362\001\022!\n\034MSG_ACTION_GET_PLAYER_CONFIG\020\363"
    "\001\022!\n\034MSG_ACTION_SET_PLAYER_CONFIG\020\364\001\022\035\n\030"
    "MSG_ACTION_EQUIP_INHERIT\020\373\001\022\033\n\026MSG_ACTIO"
    "N_GEM_UPGRADE\020\374\001\022\032\n\025MSG_ACTION_GEM_INSER"
    "T\020\375\001\022\032\n\025MSG_ACTION_GEM_REMOVE\020\376\001\022\033\n\026MSG_"
    "ACTION_MAKE_SOCKET\020\377\001\022#\n\036MSG_ACTION_DIRE"
    "CT_FINISH_QUEST\020\200\002\022\'\n\"MSG_ACTION_FIGHT_W"
    "ITH_OTHER_PLAYER\020\204\002\022%\n MSG_ACTION_SEND_F"
    "IGHT_INVITATION\020\366\003\022\"\n\035MSG_ACTION_FIGHT_I"
    "NVITE_REPLY\020\205\002\022 \n\033MSG_ACTION_PUBLISH_QUS"
    "ETION\020\370\003\022\036\n\031MSG_ACTION_SEND_QA_RESULT\020\371\003"
    "\022#\n\036MSG_ACTION_UPDATE_PHY_STRENGTH\020\372\003\022(\n"
    "#MSG_ACTION_ARENA_RECENT_MSGS_NOTIFY\020\373\003\022"
    ")\n$MSG_ACTION_FIGHT_INVITE_REPLY_NOTIFY\020"
    "\367\003\022!\n\034MSG_ACTION_TIME_BONUS_NOTIFY\020\254\002\022!\n"
    "\034MSG_ACTION_ARENA_SELF_NOTICE\020\255\002\022#\n\036MSG_"
    "ACTION_ARENA_PUBLIC_NOTICE\020\256\002\022\035\n\030MSG_ACT"
    "ION_SYSTEM_NOTICE\020\257\002\022\030\n\023MSG_ACTION_VIP_I"
    "NFO\020\266\002\022\030\n\023MSG_ACTION_ANNOUNCE\020\270\002\022(\n#MSG_"
    "ACTION_SKILL_POOL_CHANGE_NOTIFY\020\271\002\022\'\n\"MS"
    "G_ACTION_SERVER_SHUT_DOWN_NOTIFY\020\272\002\022#\n\036M"
    "SG_ACTION_UPDATE_MONSTER_BUFF\020\273\002\022*\n%MSG_"
    "ACTION_TEAM_CHANNEL_MEMBER_NOTIFY\020\274\002*\370\001\n"
    "\026ARENA_SELF_NOTICE_TYPE\022(\n$ARENA_CHALLEN"
    "GE_WIN_WITH_RANK_CHANGE\020\001\022+\n\'ARENA_CHALL"
    "ENGE_WIN_WITH_RANK_NO_CHANGE\020\002\022\030\n\024ARENA_"
    "CHALLENGE_LOSE\020\003\022\026\n\022ARENA_ATTACKED_WIN\020\004"
    "\022(\n$ARENA_ATTACKED_LOSE_WITH_RANK_CHANGE"
    "\020\005\022+\n\'ARENA_ATTACKED_LOST_WITH_RANK_NO_C"
    "HANGE\020\006*[\n\030ARENA_PUBLIC_NOTICE_TYPE\022\024\n\020A"
    "RENA_RANK_TOP_3\020\001\022\025\n\021ARENA_RANK_TOP_50\020\002"
    "\022\022\n\016ARENA_CONT_WIN\020\003*.\n\022PUBLIC_NOTICE_TY"
    "PE\022\030\n\024SYSTEM_PUBLIC_NOTICE\020\000*2\n\nProfessi"
    "on\022\n\n\006WIZARD\020\001\022\n\n\006ARCHER\020\002\022\014\n\010SWORDMAN\020\003"
    "*\036\n\006Gender\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002*<\n\nGame"
    "Status\022\016\n\nGS_OFFLINE\020\000\022\r\n\tGS_ONLINE\020\001\022\017\n"
    "\013GS_FIGHTING\020\002*\257\001\n\rAccountStatus\022!\n\024Acco"
    "untStatus_BANNED\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025AccountSt"
    "atus_DEFAULT\020\000\022\037\n\033AccountStatus_FIRST_LO"
    "GINED\020\001\022\037\n\033AccountStatus_CREATING_ROLE\020\002"
    "\022\036\n\032AccountStatus_CREATED_ROLE\020\003*\205\001\n\rLEV"
    "EL_UP_TYPE\022\021\n\rROLE_LEVEL_UP\020\001\022\034\n\030ROLE_PR"
    "OFESSION_LEVEL_UP\020\002\022\024\n\020SERVENT_LEVEL_UP\020"
    "\003\022\022\n\016SKILL_LEVEL_UP\020\004\022\031\n\025BATTLE_SKILL_LE"
    "VEL_UP\020\005*M\n\rPRACTICE_MODE\022\023\n\017NORMAL_PRAC"
    "TICE\020\001\022\023\n\017EXPERT_PRACTICE\020\002\022\022\n\016SHURA_PRA"
    "CTICE\020\003*0\n\021PAY_FUNCTION_TYPE\022\033\n\027PAY_FUNC"
    "TION_SKIP_FIGHT\020\001*\307\013\n\tENUM_ATTR\022\010\n\004NONE\020"
    "\000\022\006\n\002HP\020\001\022\n\n\006MAX_HP\020\002\022\007\n\003STA\020\003\022\014\n\010STRENG"
    "TH\020\004\022\r\n\tTECHNIQUE\020\005\022\020\n\014INTELLIGENCE\020\006\022\n\n"
    "\006SPIRIT\020\007\022\t\n\005AGILE\020\010\022\016\n\nPHY_ATTACK\020\t\022\017\n\013"
    "PHY_DEFENCE\020\n\022\016\n\nMAG_ATTACK\020\013\022\017\n\013MAG_DEF"
    "ENCE\020\014\022\016\n\nPHY_AT_HIT\020\r\022\016\n\nMAG_AT_HIT\020\016\022\020"
    "\n\014PHY_CRITICAL\020\017\022\030\n\024PHY_CRITICAL_DEFENCE"
    "\020\020\022\020\n\014MAG_CRITICAL\020\021\022\030\n\024MAG_CRITICAL_DEF"
    "ENCE\020\022\022\020\n\014PHY_AT_DODGE\020\023\022\020\n\014MAG_AT_DODGE"
    "\020\024\022\023\n\017PHY_AT_HIT_RATE\020\025\022\023\n\017MAG_AT_HIT_RA"
    "TE\020\026\022\025\n\021PHY_CRITICAL_RATE\020\027\022\035\n\031PHY_CRITI"
    "CAL_DEFENCE_RATE\020\030\022\025\n\021MAG_CRITICAL_RATE\020"
    "\031\022\035\n\031MAG_CRITICAL_DEFENCE_RATE\020\032\022\025\n\021PHY_"
    "AT_DODGE_RATE\020\033\022\025\n\021MAG_AT_DODGE_RATE\020\034\022\t"
    "\n\005SPEED\020\035\022\023\n\017FIRE_RESISTANCE\020\036\022\022\n\016ICE_RE"
    "SISTANCE\020\037\022\024\n\020SHOCK_RESISTANCE\020 \022\030\n\024FIRE"
    "_DAMAGE_INCREASE\020!\022\027\n\023ICE_DAMAGE_INCREAS"
    "E\020\"\022\031\n\025SHOCK_DAMAGE_INCREASE\020#\022\035\n\031PHY_DA"
    "MAGE_REDUCTION_RATE\020$\022\026\n\022PHY_CRI_MULTI_R"
    "ATE\020%\022\026\n\022MAG_CRI_MULTI_RATE\020&\022\022\n\016MAG_COM"
    "BO_RATE\020\'\022\027\n\023COUNTER_ATTACK_RATE\020(\022\027\n\023DA"
    "MAGE_REBOUND_RATE\020)\022\016\n\nBLOOD_SUCK\020*\022\022\n\016M"
    "AX_HP_PERCENT\020+\022\026\n\022PHY_ATTACK_PERCENT\020,\022"
    "\026\n\022MAG_ATTACK_PERCENT\020-\022\027\n\023PHY_DEFENCE_P"
    "ERCENT\020.\022\027\n\023MAG_DEFENCE_PERCENT\020/\022\021\n\rSPE"
    "ED_PERCENT\0200\022\024\n\020STRENGTH_PERCENT\0201\022\017\n\013ST"
    "A_PERCENT\0202\022\030\n\024INTELLIGENCE_PERCENT\0203\022\022\n"
    "\016SPIRIT_PERCENT\0204\022\025\n\021TECHNIQUE_PERCENT\0205"
    "\022\021\n\rAGILE_PERCENT\0206\022\030\n\024TOTAL_MAX_HP_PERC"
    "ENT\0208\022\034\n\030TOTAL_PHY_ATTACK_PERCENT\0209\022\034\n\030T"
    "OTAL_MAG_ATTACK_PERCENT\020:\022\035\n\031TOTAL_PHY_D"
    "EFENCE_PERCENT\020;\022\035\n\031TOTAL_MAG_DEFENCE_PE"
    "RCENT\020<\022\025\n\021EXTRA_CURE_EFFECT\020>\022\025\n\021EXTRA_"
    "FIRE_DAMAGE\020F\022\024\n\020EXTRA_ICE_DAMAGE\020G\022\026\n\022E"
    "XTRA_SHOCK_DAMAGE\020H\022\027\n\023EXTRA_PHYSIC_DAMA"
    "GE\020I\022\010\n\004STUN\020P\022\013\n\007SILENCE\020Q\022\t\n\005SLEEP\020R\022\n"
    "\n\006FROZEN\020S\022\031\n\025DAMAGE_APPEND_PERCENT\020[\022\024\n"
    "\020ENUM_ATTR_NUMBER\020\\*P\n\017SKIP_FIGHT_TYPE\022\024"
    "\n\020QUICK_SKIP_FIGHT\020\001\022\023\n\017FREE_SKIP_FIGHT\020"
    "\002\022\022\n\016PAY_SKIP_FIGHT\020\003*\310\001\n\nFIGHT_TYPE\022\030\n\024"
    "NORMAL_FIGHT_MONSTER\020\001\022\032\n\026INSTANCE_FIGHT"
    "_MONSTER\020\002\022\027\n\023INSTANCE_FIGHT_BOSS\020\005\022\033\n\027C"
    "HALLENGE_SOUL_YINGLING\020\003\022\024\n\020CHALLENGE_PL"
    "AYER\020\004\022\036\n\032FIGHT_OTHER_PLAYER_OR_TEAM\020\006\022\030"
    "\n\024FIGHT_RANDOM_MONSTER\020\007*]\n\016YinglingStat"
    "us\022\027\n\023YinglingStatus_HOME\020\000\022\030\n\024YinglingS"
    "tatus_HIRED\020\001\022\030\n\024YinglingStatus_FIRED\020\002*"
    "\270\001\n\017YinglingQuality\022\032\n\026YinglingQuality_M"
    "YSEFL\020\000\022\032\n\026YinglingQuality_NOBODY\020\001\022\035\n\031Y"
    "inglingQuality_CELEBRITY\020\002\022\030\n\024YinglingQu"
    "ality_HERO\020\003\022\032\n\026YinglingQuality_LEGEND\020\004"
    "\022\030\n\024YinglingQuality_EPIC\020\005*\252\002\n\027RefreshYi"
    "nglingListType\022\"\n\036RefreshYinglingListTyp"
    "e_NORMAL\020\000\022\"\n\036RefreshYinglingListType_JU"
    "NIOR\020\001\022(\n$RefreshYinglingListType_INTERM"
    "EDIATE\020\002\022\"\n\036RefreshYinglingListType_SENI"
    "OR\020\003\022%\n!RefreshYinglingListType_JUNIOR_Y"
    "B\020\004\022+\n\'RefreshYinglingListType_INTERMEDI"
    "ATE_YB\020\005\022%\n!RefreshYinglingListType_SENI"
    "OR_YB\020\006*\333\002\n\014AnnounceType\022*\n&AnnounceType"
    "_GET_ITEM_BY_CLEAR_MISSION\020\001\022&\n\"Announce"
    "Type_GET_ITEM_BY_OPEN_GIFT\020\002\022\037\n\033Announce"
    "Type_STRENGTH_EQUIP\020e\022\037\n\032AnnounceType_HI"
    "RE_YINGLING\020\311\001\022*\n%AnnounceType_CHALLENGE"
    "_SPACETIME_SELF\020\255\002\022%\n AnnounceType_CHALL"
    "ENGE_SPACETIME\020\221\003\022\"\n\035AnnounceType_INJECT"
    "_SOUL_SELF\020\365\003\022\035\n\030AnnounceType_INJECT_SOU"
    "L\020\331\004\022\037\n\032AnnounceType_CLEAR_MISSION\020\275\005*\253\001"
    "\n\010ItemType\022\020\n\014IT_EQUIPMENT\020\001\022\014\n\010IT_STONE"
    "\020\002\022\017\n\013IT_TRAESURE\020\003\022\021\n\rIT_SKILL_BOOK\020\004\022\017"
    "\n\013IT_EXP_BOOK\020\005\022\013\n\007IT_MISC\020\006\022\013\n\007IT_TASK\020"
    "\007\022\013\n\007IT_GIFT\020\010\022\017\n\013IT_YINGLING\020\t\022\022\n\016IT_CO"
    "NSUMPTION\020\n*\312\001\n\rEquipPosition\022\014\n\010ET_RING"
    "2\020\000\022\r\n\tET_HELMET\020\001\022\017\n\013ET_SHOULDER\020\002\022\r\n\tE"
    "T_ARMOUR\020\003\022\013\n\007ET_BELT\020\004\022\014\n\010ET_GLOVE\020\005\022\013\n"
    "\007ET_CUFF\020\006\022\014\n\010ET_SHOES\020\007\022\017\n\013ET_NECKLACE\020"
    "\010\022\013\n\007ET_RING\020\t\022\r\n\tET_WEAPON\020\n\022\r\n\tET_ASSI"
    "ST\020\013\022\n\n\006ET_END\020\014*7\n\021LINE_UP_OPERATION\022\n\n"
    "\006CREATE\020\001\022\n\n\006MODIFY\020\002\022\n\n\006DELETE\020\003*R\n\030UPD"
    "ATE_BATTLE_SKILL_TYPE\022\024\n\020NEW_BATTLE_SKIL"
    "L\020\001\022\016\n\nUPDATE_EXP\020\002\022\020\n\014UPDATE_LEVEL\020\003*8\n"
    "\nMONEY_TYPE\022\013\n\007MT_COIN\020\001\022\r\n\tMT_COUPON\020\002\022"
    "\016\n\nMT_DIAMOND\020\003*\237\003\n\017QuestActionType\022\030\n\024Q"
    "uestActionType_None\020\000\022\032\n\026QuestActionType"
    "_Dialog\020\001\022 \n\034QuestActionType_ClientActio"
    "n\020\002\022\033\n\027QuestActionType_KillNpc\020\003\022\030\n\024Ques"
    "tActionType_Loot\020\004\022\033\n\027QuestActionType_Co"
    "llect\020\005\022\036\n\032QuestActionType_FightCount\020\006\022"
    "!\n\035QuestActionType_FightWinCount\020\007\022\033\n\027Qu"
    "estActionType_GetItem\020\010\022\034\n\030QuestActionTy"
    "pe_Delivery\020\t\022\033\n\027QuestActionType_Explore"
    "\020\n\022#\n\037QuestActionType_UseItemInRegion\020\013\022"
    " \n\034QuestActionType_WinBattleNpc\020\014*\240\001\n\034Qu"
    "estAction_ClientActionType\022%\n!QuestActio"
    "n_ClientActionType_None\020\000\022.\n*QuestAction"
    "_ClientActionType_OpenInventory\020\001\022)\n%Que"
    "stAction_ClientActionType_OpenBank\020\002*\222\001\n"
    "\013QuestStatus\022\027\n\023QuestStatus_DEFAULT\020\000\022\032\n"
    "\026QuestStatus_ACCEPTABLE\020\001\022\030\n\024QuestStatus"
    "_ACCEPTED\020\002\022\032\n\026QuestStatus_FINISHABLE\020\003\022"
    "\030\n\024QuestStatus_FINISHED\020\004*\255\001\n\tQuestType\022"
    "\025\n\021QuestType_DEFAULT\020\000\022\025\n\021QuestType_ZHUX"
    "IAN\020\001\022\027\n\023QuestType_XUANSHANG\020\002\022\025\n\021QuestT"
    "ype_ZHIXIAN\020\003\022\025\n\021QuestType_RICHANG\020\004\022\024\n\020"
    "QuestType_XUNLUO\020\005\022\025\n\021QuestType_BANGHUI\020"
    "\006*Z\n\020DIFFICULTY_LEVEL\022\010\n\004EASY\020\001\022\n\n\006NORMA"
    "L\020\002\022\r\n\tDIFFICULT\020\003\022\n\n\006MASTER\020\004\022\010\n\004HERO\020\005"
    "\022\013\n\007LEGENDS\020\006*\?\n\023TEAM_OBJECTIVE_TYPE\022\017\n\013"
    "CUSTOM_PASS\020\001\022\t\n\005QUEST\020\002\022\014\n\010LEVEL_UP\020\003*0"
    "\n\rTEAM_ADD_TYPE\022\016\n\nNORMAL_ADD\020\001\022\017\n\013CONFI"
    "RM_ADD\020\002*_\n\016TEAM_OPERATION\022\026\n\022CHANGE_TEA"
    "M_LEADER\020\001\022\021\n\rKICK_OUT_TEAM\020\002\022\016\n\nLEAVE_T"
    "EAM\020\003\022\022\n\016CLEAR_APPLIERS\020\004*7\n\021TEAM_APPLY_"
    "RESULT\022\020\n\014APPLY_ACCEPT\020\001\022\020\n\014APPLY_REJECT"
    "\020\002*B\n\025TEAM_LINEUP_OPERATION\022\017\n\013SAVE_MODI"
    "FY\020\001\022\030\n\024RESET_DEFAULT_LINEUP\020\002*_\n\025SERVER"
    "_SYNC_TEAM_TYPE\022\017\n\013CREATE_TEAM\020\001\022\017\n\013DELE"
    "TE_TEAM\020\002\022\021\n\rMEMBER_CHANGE\020\003\022\021\n\rLEADER_C"
    "HANGE\020\004*\342\014\n\rRoleLimitType\022\035\n\031RoleLimitTy"
    "pe_DAILY_QUEST\020\002\022&\n\"RoleLimitType_DAILY_"
    "QUEST_GENERATE\020\003\022&\n\"RoleLimitType_HIRE_Y"
    "INGLING_NORMAL\020\004\022&\n\"RoleLimitType_HIRE_Y"
    "INGLING_JUNIOR\020\005\022,\n(RoleLimitType_HIRE_Y"
    "INGLING_INTERMEDIATE\020\006\022&\n\"RoleLimitType_"
    "HIRE_YINGLING_SENIOR\020\007\022 \n\034RoleLimitType_"
    "DAILY_INSTANCE\020\010\022.\n*RoleLimitType_CHALLE"
    "NGE_SPACE_TIME_LEVEL_1\020\t\022.\n*RoleLimitTyp"
    "e_CHALLENGE_SPACE_TIME_LEVEL_2\020\n\022.\n*Role"
    "LimitType_CHALLENGE_SPACE_TIME_LEVEL_3\020\013"
    "\022.\n*RoleLimitType_CHALLENGE_SPACE_TIME_L"
    "EVEL_4\020\014\022.\n*RoleLimitType_CHALLENGE_SPAC"
    "E_TIME_LEVEL_5\020\r\022.\n*RoleLimitType_CHALLE"
    "NGE_SPACE_TIME_LEVEL_6\020\016\022.\n*RoleLimitTyp"
    "e_CHALLENGE_SPACE_TIME_LEVEL_7\020\017\022.\n*Role"
    "LimitType_CHALLENGE_SPACE_TIME_LEVEL_8\020\020"
    "\022.\n*RoleLimitType_CHALLENGE_SPACE_TIME_L"
    "EVEL_9\020\021\022/\n+RoleLimitType_CHALLENGE_SPAC"
    "E_TIME_LEVEL_10\020\022\022,\n(RoleLimitType_VIP_S"
    "KIP_FIGHT_DAILY_LIMIT\020\023\022&\n\"RoleLimitType"
    "_VIP_AUTO_FIGHT_LIMIT\020\024\022\"\n\036RoleLimitType"
    "_DAILY_GIFT_VIP_0\020\025\022\"\n\036RoleLimitType_DAI"
    "LY_GIFT_VIP_1\020\026\022\"\n\036RoleLimitType_DAILY_G"
    "IFT_VIP_2\020\027\022\"\n\036RoleLimitType_DAILY_GIFT_"
    "VIP_3\020\030\022\"\n\036RoleLimitType_DAILY_GIFT_VIP_"
    "4\020\031\022\"\n\036RoleLimitType_DAILY_GIFT_VIP_5\020\032\022"
    "\"\n\036RoleLimitType_DAILY_GIFT_VIP_6\020\033\022\"\n\036R"
    "oleLimitType_DAILY_GIFT_VIP_7\020\034\022\"\n\036RoleL"
    "imitType_DAILY_GIFT_VIP_8\020\035\022\"\n\036RoleLimit"
    "Type_DAILY_GIFT_VIP_9\020\036\022#\n\037RoleLimitType"
    "_DAILY_GIFT_VIP_10\020\037\022#\n\037RoleLimitType_DA"
    "ILY_GIFT_VIP_11\020 \022#\n\037RoleLimitType_DAILY"
    "_GIFT_VIP_12\020!\022-\n)RoleLimitType_DAILY_AR"
    "ENA_CHALLENGE_TIMES\020#\022\'\n#RoleLimitType_D"
    "AILY_FLY_SHOES_LIMIT\020$\022*\n&RoleLimitType_"
    "ARENA_CHALLENGE_COOLDOWN\020%\022\036\n\032RoleLimitT"
    "ype_CARRYON_SHOP\020&\022\037\n\033RoleLimitType_CARR"
    "YON_DEPOT\020\'\022\034\n\030RoleLimitType_HUNT_LIMIT\020"
    "(\022\'\n#RoleLimitType_XUNLUO_QUEST_COOLDOWN"
    "\020)\022(\n$RoleLimitType_PHY_STRENGTH_BUY_LIM"
    "IT\020**\200\002\n\021FunctionLimitType\022*\n&FunctionLi"
    "mitType_HIRE_YINGLING_SENIOR\020\001\022)\n%Functi"
    "onLimitType_SPEED_UP_AUTO_FIGHT\020\002\022+\n\'Fun"
    "ctionLimitType_SENIOR_PRACTICE_SKILL\020\003\022\""
    "\n\036FunctionLimitType_CARRYON_SHOP\020\004\022#\n\037Fu"
    "nctionLimitType_CARRYON_DEPOT\020\005\022\036\n\032Funct"
    "ionLimitType_MAXVALUE\020d*|\n\017VipSettingsTy"
    "pe\022\035\n\031VipSettingsType_EXP_BONUS\020\001\022(\n$Vip"
    "SettingsType_SKILL_PRACTICE_LIMIT\020\002\022 \n\034V"
    "ipSettingsType_FRIEND_LIMIT\020\003*h\n\rPlayerB"
    "itType\022\016\n\nPBT_FREEZE\020\000\022\014\n\010PBT_MUTE\020\001\022\020\n\014"
    "PBT_OBSERVER\020\002\022\n\n\006PBT_GM\020\003\022\016\n\nPBT_HIDDEN"
    "\020\004\022\013\n\007PBT_MAX\020\016*\260\010\n\016PlayerFlagType\022*\n&Pl"
    "ayerFlagType_FIRST_GENERATE_YINGLING\020\001\0226"
    "\n2PlayerFlagType_APPLIED_STACKABLE_ONLIN"
    "E_GIFT_DAY_1\020\002\0226\n2PlayerFlagType_APPLIED"
    "_STACKABLE_ONLINE_GIFT_DAY_2\020\003\0226\n2Player"
    "FlagType_APPLIED_STACKABLE_ONLINE_GIFT_D"
    "AY_3\020\004\0226\n2PlayerFlagType_APPLIED_STACKAB"
    "LE_ONLINE_GIFT_DAY_4\020\005\0226\n2PlayerFlagType"
    "_APPLIED_STACKABLE_ONLINE_GIFT_DAY_5\020\006\0226"
    "\n2PlayerFlagType_APPLIED_STACKABLE_ONLIN"
    "E_GIFT_DAY_6\020\007\0226\n2PlayerFlagType_APPLIED"
    "_STACKABLE_ONLINE_GIFT_DAY_7\020\010\0226\n2Player"
    "FlagType_APPLIED_STACKABLE_ONLINE_GIFT_D"
    "AY_8\020\t\0226\n2PlayerFlagType_APPLIED_STACKAB"
    "LE_ONLINE_GIFT_DAY_9\020\n\0227\n3PlayerFlagType"
    "_APPLIED_STACKABLE_ONLINE_GIFT_DAY_10\020\013\022"
    "#\n\037PlayerFlagType_FIST_VIP_BONUS_1\020\014\022#\n\037"
    "PlayerFlagType_FIST_VIP_BONUS_2\020\r\022#\n\037Pla"
    "yerFlagType_FIST_VIP_BONUS_3\020\016\022#\n\037Player"
    "FlagType_FIST_VIP_BONUS_4\020\017\022#\n\037PlayerFla"
    "gType_FIST_VIP_BONUS_5\020\020\022#\n\037PlayerFlagTy"
    "pe_FIST_VIP_BONUS_6\020\021\022#\n\037PlayerFlagType_"
    "FIST_VIP_BONUS_7\020\022\022#\n\037PlayerFlagType_FIS"
    "T_VIP_BONUS_8\020\023\022#\n\037PlayerFlagType_FIST_V"
    "IP_BONUS_9\020\024\022$\n PlayerFlagType_FIST_VIP_"
    "BONUS_10\020\025\022\'\n#PlayerFlagType_FUNCTION_LI"
    "MIT_START\020\026\022%\n!PlayerFlagType_FUNCTION_L"
    "IMIT_END\020d*\226\002\n\024ClientPlayerFlagType\022)\n$P"
    "layerFlagType_CLIENT_SCENE_START_ID\020\220N\022\'"
    "\n\"PlayerFlagType_CLIENT_SCENE_END_ID\020\337]\022"
    ")\n$PlayerFlagType_CLIENT_GUIDE_START_ID\020"
    "\340]\022\'\n\"PlayerFlagType_CLIENT_GUIDE_END_ID"
    "\020\307e\022+\n%PlayerFlagType_CLIENT_SCENE_START"
    "_ID2\020\240\215\006\022)\n#PlayerFlagType_CLIENT_SCENE_"
    "END_ID2\020\300\232\014*3\n\023BUY_MORE_TIMES_TYPE\022\034\n\030BU"
    "Y_ARENA_CHALLENGE_TIME\020\001*/\n\021BUY_CLEAR_CD"
    "_TYPE\022\032\n\026BUY_CLEAR_CHALLENGE_CD\020\001*O\n\016Uni"
    "queNameType\022\036\n\032UniqueNameType_PLAYER_NAM"
    "E\020\001\022\035\n\031UniqueNameType_GUILD_NAME\020\002*F\n\014Fu"
    "nctionType\022\036\n\032FunctionType_HIRE_YINGLING"
    "\020\001\022\026\n\022FunctionType_ARENA\020\002*\367\001\n\014LivenessT"
    "ype\022\033\n\027LIVENESS_MARKET_CONSUME\020\000\022\033\n\027LIVE"
    "NESS_EQUIP_STRENGTH\020\001\022\034\n\030LIVENESS_SINGLE"
    "_INSTANCE\020\002\022\032\n\026LIVENESS_TEAM_INSTANCE\020\003\022"
    "\030\n\024LIVENESS_DAILY_QUEST\020\004\022\030\n\024LIVENESS_AR"
    "ENA_FIGHT\020\005\022\022\n\016LIVENESS_LOGIN\020\006\022\027\n\023LIVEN"
    "ESS_AUTO_FIGHT\020\007\022\022\n\016LIVENESS_TOTAL\020\n*\217\001\n"
    "\020PlayerConfigType\022\031\n\025PC_DENY_STRENGER_TE"
    "AM\020\000\022\032\n\026PC_DENY_STRENGER_GUILD\020\001\022\032\n\026PC_D"
    "ENY_STRENGER_FIGHT\020\002\022\031\n\025PC_DENY_STRENGER"
    "_TALK\020\003\022\r\n\tPC_FRIEND\020\004*=\n\020FriendConfigTy"
    "pe\022\r\n\tFC_VERIFY\020\000\022\013\n\007FC_DENY\020\001\022\r\n\tFC_ACC"
    "EPT\020\002*R\n\025UpdateMonsterBuffType\022\n\n\006MB_NEW"
    "\020\000\022\013\n\007MB_LOSE\020\001\022\021\n\rMB_SUBSTITUTE\020\002\022\r\n\tMB"
    "_UPDATE\020\003*d\n\033TeamChannelMemberNotifyType"
    "\022\035\n\031TCMT_TEAM_MEMBER_LEVEL_UP\020\001\022&\n\"TCMT_"
    "TEAM_MEMBER_HIGH_QUALITY_ITEM\020\002", 27231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_common.proto", &protobuf_RegisterTypes);
  InstanceCardInfo::default_instance_ = new InstanceCardInfo();
  InstanceWantedInfo::default_instance_ = new InstanceWantedInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  Fighter::default_instance_ = new Fighter();
  SkillBonus::default_instance_ = new SkillBonus();
  Bonus::default_instance_ = new Bonus();
  FightResult::default_instance_ = new FightResult();
  PlayerPhyStrengthInfo::default_instance_ = new PlayerPhyStrengthInfo();
  PlayerInfo::default_instance_ = new PlayerInfo();
  NPCInfo::default_instance_ = new NPCInfo();
  BaojuInfo::default_instance_ = new BaojuInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  SkillInfo::default_instance_ = new SkillInfo();
  BattleSkillInfo::default_instance_ = new BattleSkillInfo();
  BankInfo::default_instance_ = new BankInfo();
  YinglingInfo::default_instance_ = new YinglingInfo();
  BuddyDetailInfo::default_instance_ = new BuddyDetailInfo();
  Relation::default_instance_ = new Relation();
  PlayerRelationData::default_instance_ = new PlayerRelationData();
  InstanceInfo::default_instance_ = new InstanceInfo();
  InstanceDetail::default_instance_ = new InstanceDetail();
  MonsterInfo::default_instance_ = new MonsterInfo();
  EquipInfo::default_instance_ = new EquipInfo();
  AttributeData::default_instance_ = new AttributeData();
  EquipDetail::default_instance_ = new EquipDetail();
  EquipStoneData::default_instance_ = new EquipStoneData();
  EquipStoneData_StoneData::default_instance_ = new EquipStoneData_StoneData();
  DBSlotData::default_instance_ = new DBSlotData();
  FighterInfo::default_instance_ = new FighterInfo();
  LineupInfo::default_instance_ = new LineupInfo();
  Money1::default_instance_ = new Money1();
  Money::default_instance_ = new Money();
  QuestAction::default_instance_ = new QuestAction();
  QuestActionsPb::default_instance_ = new QuestActionsPb();
  QuestPb::default_instance_ = new QuestPb();
  QuestPreCondition::default_instance_ = new QuestPreCondition();
  QuestRewards::default_instance_ = new QuestRewards();
  QuestRewards_QuestRewardItem::default_instance_ = new QuestRewards_QuestRewardItem();
  QuestProtoype::default_instance_ = new QuestProtoype();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  TeamInfo::default_instance_ = new TeamInfo();
  CoolDown::default_instance_ = new CoolDown();
  RoleCoolDownPb::default_instance_ = new RoleCoolDownPb();
  DailyCountLimit::default_instance_ = new DailyCountLimit();
  RoleDailyLimitPb::default_instance_ = new RoleDailyLimitPb();
  DBRoleLimitDataPb::default_instance_ = new DBRoleLimitDataPb();
  DailyQuest::default_instance_ = new DailyQuest();
  DailyQuestPb::default_instance_ = new DailyQuestPb();
  XunluoQuestPb::default_instance_ = new XunluoQuestPb();
  PlayerFlagPb::default_instance_ = new PlayerFlagPb();
  PlayerFlagDataPb::default_instance_ = new PlayerFlagDataPb();
  ArenaPlayerInfo::default_instance_ = new ArenaPlayerInfo();
  TreasureBox::default_instance_ = new TreasureBox();
  UsedName::default_instance_ = new UsedName();
  UsedNameData::default_instance_ = new UsedNameData();
  UnuseNameMsg::default_instance_ = new UnuseNameMsg();
  HideNpcData::default_instance_ = new HideNpcData();
  HideNpcPb::default_instance_ = new HideNpcPb();
  NpcPosition::default_instance_ = new NpcPosition();
  OpenedFunctionNotify::default_instance_ = new OpenedFunctionNotify();
  GetBuddyTemplateAttributeRequest::default_instance_ = new GetBuddyTemplateAttributeRequest();
  GetBuddyTemplateAttributeResponse::default_instance_ = new GetBuddyTemplateAttributeResponse();
  InstanceCardInfo::default_instance_->InitAsDefaultInstance();
  InstanceWantedInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  Fighter::default_instance_->InitAsDefaultInstance();
  SkillBonus::default_instance_->InitAsDefaultInstance();
  Bonus::default_instance_->InitAsDefaultInstance();
  FightResult::default_instance_->InitAsDefaultInstance();
  PlayerPhyStrengthInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  NPCInfo::default_instance_->InitAsDefaultInstance();
  BaojuInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  BattleSkillInfo::default_instance_->InitAsDefaultInstance();
  BankInfo::default_instance_->InitAsDefaultInstance();
  YinglingInfo::default_instance_->InitAsDefaultInstance();
  BuddyDetailInfo::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  PlayerRelationData::default_instance_->InitAsDefaultInstance();
  InstanceInfo::default_instance_->InitAsDefaultInstance();
  InstanceDetail::default_instance_->InitAsDefaultInstance();
  MonsterInfo::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  AttributeData::default_instance_->InitAsDefaultInstance();
  EquipDetail::default_instance_->InitAsDefaultInstance();
  EquipStoneData::default_instance_->InitAsDefaultInstance();
  EquipStoneData_StoneData::default_instance_->InitAsDefaultInstance();
  DBSlotData::default_instance_->InitAsDefaultInstance();
  FighterInfo::default_instance_->InitAsDefaultInstance();
  LineupInfo::default_instance_->InitAsDefaultInstance();
  Money1::default_instance_->InitAsDefaultInstance();
  Money::default_instance_->InitAsDefaultInstance();
  QuestAction::default_instance_->InitAsDefaultInstance();
  QuestActionsPb::default_instance_->InitAsDefaultInstance();
  QuestPb::default_instance_->InitAsDefaultInstance();
  QuestPreCondition::default_instance_->InitAsDefaultInstance();
  QuestRewards::default_instance_->InitAsDefaultInstance();
  QuestRewards_QuestRewardItem::default_instance_->InitAsDefaultInstance();
  QuestProtoype::default_instance_->InitAsDefaultInstance();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  CoolDown::default_instance_->InitAsDefaultInstance();
  RoleCoolDownPb::default_instance_->InitAsDefaultInstance();
  DailyCountLimit::default_instance_->InitAsDefaultInstance();
  RoleDailyLimitPb::default_instance_->InitAsDefaultInstance();
  DBRoleLimitDataPb::default_instance_->InitAsDefaultInstance();
  DailyQuest::default_instance_->InitAsDefaultInstance();
  DailyQuestPb::default_instance_->InitAsDefaultInstance();
  XunluoQuestPb::default_instance_->InitAsDefaultInstance();
  PlayerFlagPb::default_instance_->InitAsDefaultInstance();
  PlayerFlagDataPb::default_instance_->InitAsDefaultInstance();
  ArenaPlayerInfo::default_instance_->InitAsDefaultInstance();
  TreasureBox::default_instance_->InitAsDefaultInstance();
  UsedName::default_instance_->InitAsDefaultInstance();
  UsedNameData::default_instance_->InitAsDefaultInstance();
  UnuseNameMsg::default_instance_->InitAsDefaultInstance();
  HideNpcData::default_instance_->InitAsDefaultInstance();
  HideNpcPb::default_instance_->InitAsDefaultInstance();
  NpcPosition::default_instance_->InitAsDefaultInstance();
  OpenedFunctionNotify::default_instance_->InitAsDefaultInstance();
  GetBuddyTemplateAttributeRequest::default_instance_->InitAsDefaultInstance();
  GetBuddyTemplateAttributeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fcommon_2eproto {
  StaticDescriptorInitializer_game_5fcommon_2eproto() {
    protobuf_AddDesc_game_5fcommon_2eproto();
  }
} static_descriptor_initializer_game_5fcommon_2eproto_;

const ::google::protobuf::EnumDescriptor* MessageModule_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageModule_descriptor_;
}
bool MessageModule_IsValid(int value) {
  switch(value) {
    case 0:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemPositionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemPositionType_descriptor_;
}
bool ItemPositionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageAction_descriptor_;
}
bool MessageAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 130:
    case 131:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 155:
    case 156:
    case 158:
    case 160:
    case 165:
    case 166:
    case 170:
    case 171:
    case 175:
    case 176:
    case 177:
    case 180:
    case 181:
    case 182:
    case 185:
    case 190:
    case 191:
    case 192:
    case 193:
    case 195:
    case 196:
    case 200:
    case 201:
    case 202:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 260:
    case 261:
    case 300:
    case 301:
    case 302:
    case 303:
    case 310:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_SELF_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_SELF_NOTICE_TYPE_descriptor_;
}
bool ARENA_SELF_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_PUBLIC_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_PUBLIC_NOTICE_TYPE_descriptor_;
}
bool ARENA_PUBLIC_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PUBLIC_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUBLIC_NOTICE_TYPE_descriptor_;
}
bool PUBLIC_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Profession_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profession_descriptor_;
}
bool Profession_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}
bool GameStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountStatus_descriptor_;
}
bool AccountStatus_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LEVEL_UP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LEVEL_UP_TYPE_descriptor_;
}
bool LEVEL_UP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PRACTICE_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRACTICE_MODE_descriptor_;
}
bool PRACTICE_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PAY_FUNCTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAY_FUNCTION_TYPE_descriptor_;
}
bool PAY_FUNCTION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_ATTR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_ATTR_descriptor_;
}
bool ENUM_ATTR_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 70:
    case 71:
    case 72:
    case 73:
    case 80:
    case 81:
    case 82:
    case 83:
    case 91:
    case 92:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SKIP_FIGHT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SKIP_FIGHT_TYPE_descriptor_;
}
bool SKIP_FIGHT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FIGHT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIGHT_TYPE_descriptor_;
}
bool FIGHT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YinglingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingStatus_descriptor_;
}
bool YinglingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YinglingQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingQuality_descriptor_;
}
bool YinglingQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RefreshYinglingListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshYinglingListType_descriptor_;
}
bool RefreshYinglingListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AnnounceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceType_descriptor_;
}
bool AnnounceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 101:
    case 201:
    case 301:
    case 401:
    case 501:
    case 601:
    case 701:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemType_descriptor_;
}
bool ItemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosition_descriptor_;
}
bool EquipPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LINE_UP_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LINE_UP_OPERATION_descriptor_;
}
bool LINE_UP_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UPDATE_BATTLE_SKILL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPDATE_BATTLE_SKILL_TYPE_descriptor_;
}
bool UPDATE_BATTLE_SKILL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MONEY_TYPE_descriptor_;
}
bool MONEY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestActionType_descriptor_;
}
bool QuestActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestAction_ClientActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestAction_ClientActionType_descriptor_;
}
bool QuestAction_ClientActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStatus_descriptor_;
}
bool QuestStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DIFFICULTY_LEVEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DIFFICULTY_LEVEL_descriptor_;
}
bool DIFFICULTY_LEVEL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_OBJECTIVE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_OBJECTIVE_TYPE_descriptor_;
}
bool TEAM_OBJECTIVE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_ADD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_ADD_TYPE_descriptor_;
}
bool TEAM_ADD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_OPERATION_descriptor_;
}
bool TEAM_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_APPLY_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_APPLY_RESULT_descriptor_;
}
bool TEAM_APPLY_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_LINEUP_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_LINEUP_OPERATION_descriptor_;
}
bool TEAM_LINEUP_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SERVER_SYNC_TEAM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SERVER_SYNC_TEAM_TYPE_descriptor_;
}
bool SERVER_SYNC_TEAM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleLimitType_descriptor_;
}
bool RoleLimitType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionLimitType_descriptor_;
}
bool FunctionLimitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VipSettingsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipSettingsType_descriptor_;
}
bool VipSettingsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerBitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBitType_descriptor_;
}
bool PlayerBitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagType_descriptor_;
}
bool PlayerFlagType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientPlayerFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPlayerFlagType_descriptor_;
}
bool ClientPlayerFlagType_IsValid(int value) {
  switch(value) {
    case 10000:
    case 11999:
    case 12000:
    case 12999:
    case 100000:
    case 200000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUY_MORE_TIMES_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUY_MORE_TIMES_TYPE_descriptor_;
}
bool BUY_MORE_TIMES_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUY_CLEAR_CD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUY_CLEAR_CD_TYPE_descriptor_;
}
bool BUY_CLEAR_CD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UniqueNameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueNameType_descriptor_;
}
bool UniqueNameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionType_descriptor_;
}
bool FunctionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LivenessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessType_descriptor_;
}
bool LivenessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerConfigType_descriptor_;
}
bool PlayerConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendConfigType_descriptor_;
}
bool FriendConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UpdateMonsterBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMonsterBuffType_descriptor_;
}
bool UpdateMonsterBuffType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TeamChannelMemberNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamChannelMemberNotifyType_descriptor_;
}
bool TeamChannelMemberNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCardInfo::kItemIdFieldNumber;
const int InstanceCardInfo::kItemCountFieldNumber;
const int InstanceCardInfo::kTypeFieldNumber;
const int InstanceCardInfo::kIconIdFieldNumber;
#endif  // !_MSC_VER

InstanceCardInfo::InstanceCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceCardInfo::InitAsDefaultInstance() {
}

InstanceCardInfo::InstanceCardInfo(const InstanceCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceCardInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  type_ = 0;
  icon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCardInfo::~InstanceCardInfo() {
  SharedDtor();
}

void InstanceCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCardInfo_descriptor_;
}

const InstanceCardInfo& InstanceCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceCardInfo* InstanceCardInfo::default_instance_ = NULL;

InstanceCardInfo* InstanceCardInfo::New() const {
  return new InstanceCardInfo;
}

void InstanceCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
    type_ = 0;
    icon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }
      
      // required int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }
      
      // required int32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // required int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // required int32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // required int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // required int32 icon_id = 4;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceCardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // required int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCardInfo::MergeFrom(const InstanceCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCardInfo::CopyFrom(const InstanceCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void InstanceCardInfo::Swap(InstanceCardInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(type_, other->type_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCardInfo_descriptor_;
  metadata.reflection = InstanceCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceWantedInfo::kInstanceIdFieldNumber;
const int InstanceWantedInfo::kLeftTimeFieldNumber;
const int InstanceWantedInfo::kCardInfoFieldNumber;
#endif  // !_MSC_VER

InstanceWantedInfo::InstanceWantedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedInfo::InitAsDefaultInstance() {
}

InstanceWantedInfo::InstanceWantedInfo(const InstanceWantedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedInfo::~InstanceWantedInfo() {
  SharedDtor();
}

void InstanceWantedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedInfo_descriptor_;
}

const InstanceWantedInfo& InstanceWantedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceWantedInfo* InstanceWantedInfo::default_instance_ = NULL;

InstanceWantedInfo* InstanceWantedInfo::New() const {
  return new InstanceWantedInfo;
}

void InstanceWantedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    left_time_ = 0;
  }
  card_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_info;
        break;
      }
      
      // repeated .protocols.common.InstanceCardInfo card_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceWantedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_time(), output);
  }
  
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  for (int i = 0; i < this->card_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_time(), target);
  }
  
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  for (int i = 0; i < this->card_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 left_time = 2;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  total_size += 1 * this->card_info_size();
  for (int i = 0; i < this->card_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedInfo::MergeFrom(const InstanceWantedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_info_.MergeFrom(from.card_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedInfo::CopyFrom(const InstanceWantedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < card_info_size(); i++) {
    if (!this->card_info(i).IsInitialized()) return false;
  }
  return true;
}

void InstanceWantedInfo::Swap(InstanceWantedInfo* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(left_time_, other->left_time_);
    card_info_.Swap(&other->card_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedInfo_descriptor_;
  metadata.reflection = InstanceWantedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kBuffIdFieldNumber;
const int BuffInfo::kBuffValueFieldNumber;
const int BuffInfo::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  buff_value_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_id_ = 0;
    buff_value_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_value;
        break;
      }
      
      // optional int32 buff_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_value_)));
          set_has_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_value(), output);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_value(), target);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }
    
    // optional int32 buff_value = 2;
    if (has_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_value());
    }
    
    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_buff_value()) {
      set_buff_value(from.buff_value());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(buff_value_, other->buff_value_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fighter::kCampFieldNumber;
const int Fighter::kIndexFieldNumber;
const int Fighter::kGuidFieldNumber;
const int Fighter::kTidFieldNumber;
const int Fighter::kHpFieldNumber;
const int Fighter::kLevelFieldNumber;
const int Fighter::kIsPlayerFieldNumber;
const int Fighter::kIsTeamLeaderFieldNumber;
const int Fighter::kNameFieldNumber;
const int Fighter::kOwnerNameFieldNumber;
const int Fighter::kQualityFieldNumber;
const int Fighter::kPhyAttackFieldNumber;
const int Fighter::kPhyDefenceFieldNumber;
const int Fighter::kMagAttackFieldNumber;
const int Fighter::kMagDefenceFieldNumber;
#endif  // !_MSC_VER

Fighter::Fighter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fighter::InitAsDefaultInstance() {
}

Fighter::Fighter(const Fighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fighter::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0;
  index_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  hp_ = 0;
  level_ = 0;
  is_player_ = 0;
  is_team_leader_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  phy_attack_ = 0;
  phy_defence_ = 0;
  mag_attack_ = 0;
  mag_defence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fighter::~Fighter() {
  SharedDtor();
}

void Fighter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_name_;
  }
  if (this != default_instance_) {
  }
}

void Fighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fighter_descriptor_;
}

const Fighter& Fighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Fighter* Fighter::default_instance_ = NULL;

Fighter* Fighter::New() const {
  return new Fighter;
}

void Fighter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0;
    index_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    hp_ = 0;
    level_ = 0;
    is_player_ = 0;
    is_team_leader_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
        owner_name_->clear();
      }
    }
    quality_ = 0;
    phy_attack_ = 0;
    phy_defence_ = 0;
    mag_attack_ = 0;
    mag_defence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tid;
        break;
      }
      
      // optional int32 tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_player;
        break;
      }
      
      // optional int32 is_player = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_player_)));
          set_has_is_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_team_leader;
        break;
      }
      
      // optional int32 is_team_leader = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_team_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_team_leader_)));
          set_has_is_team_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phy_attack;
        break;
      }
      
      // optional int32 phy_attack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_attack_)));
          set_has_phy_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_phy_defence;
        break;
      }
      
      // optional int32 phy_defence = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_defence_)));
          set_has_phy_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mag_attack;
        break;
      }
      
      // optional int32 mag_attack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mag_attack_)));
          set_has_mag_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mag_defence;
        break;
      }
      
      // optional int32 mag_defence = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mag_defence_)));
          set_has_mag_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_owner_name;
        break;
      }
      
      // optional string owner_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }
  
  // optional int32 tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tid(), output);
  }
  
  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // optional int32 is_player = 7;
  if (has_is_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_player(), output);
  }
  
  // optional int32 is_team_leader = 8;
  if (has_is_team_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_team_leader(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }
  
  // optional int32 phy_attack = 11;
  if (has_phy_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phy_attack(), output);
  }
  
  // optional int32 phy_defence = 12;
  if (has_phy_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->phy_defence(), output);
  }
  
  // optional int32 mag_attack = 13;
  if (has_mag_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mag_attack(), output);
  }
  
  // optional int32 mag_defence = 14;
  if (has_mag_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mag_defence(), output);
  }
  
  // optional string owner_name = 15;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->owner_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }
  
  // optional int32 tid = 4;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tid(), target);
  }
  
  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // optional int32 is_player = 7;
  if (has_is_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_player(), target);
  }
  
  // optional int32 is_team_leader = 8;
  if (has_is_team_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_team_leader(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }
  
  // optional int32 phy_attack = 11;
  if (has_phy_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->phy_attack(), target);
  }
  
  // optional int32 phy_defence = 12;
  if (has_phy_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->phy_defence(), target);
  }
  
  // optional int32 mag_attack = 13;
  if (has_mag_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mag_attack(), target);
  }
  
  // optional int32 mag_defence = 14;
  if (has_mag_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mag_defence(), target);
  }
  
  // optional string owner_name = 15;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->owner_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fighter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 tid = 4;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 is_player = 7;
    if (has_is_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_player());
    }
    
    // optional int32 is_team_leader = 8;
    if (has_is_team_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_team_leader());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string owner_name = 15;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }
    
    // optional int32 quality = 10;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 phy_attack = 11;
    if (has_phy_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_attack());
    }
    
    // optional int32 phy_defence = 12;
    if (has_phy_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_defence());
    }
    
    // optional int32 mag_attack = 13;
    if (has_mag_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mag_attack());
    }
    
    // optional int32 mag_defence = 14;
    if (has_mag_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mag_defence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fighter::MergeFrom(const Fighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_player()) {
      set_is_player(from.is_player());
    }
    if (from.has_is_team_leader()) {
      set_is_team_leader(from.is_team_leader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_phy_attack()) {
      set_phy_attack(from.phy_attack());
    }
    if (from.has_phy_defence()) {
      set_phy_defence(from.phy_defence());
    }
    if (from.has_mag_attack()) {
      set_mag_attack(from.mag_attack());
    }
    if (from.has_mag_defence()) {
      set_mag_defence(from.mag_defence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fighter::CopyFrom(const Fighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fighter::IsInitialized() const {
  
  return true;
}

void Fighter::Swap(Fighter* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(index_, other->index_);
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(is_player_, other->is_player_);
    std::swap(is_team_leader_, other->is_team_leader_);
    std::swap(name_, other->name_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(quality_, other->quality_);
    std::swap(phy_attack_, other->phy_attack_);
    std::swap(phy_defence_, other->phy_defence_);
    std::swap(mag_attack_, other->mag_attack_);
    std::swap(mag_defence_, other->mag_defence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fighter_descriptor_;
  metadata.reflection = Fighter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBonus::kSkillIdFieldNumber;
const int SkillBonus::kSkillLevelFieldNumber;
const int SkillBonus::kExpBonusFieldNumber;
#endif  // !_MSC_VER

SkillBonus::SkillBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBonus::InitAsDefaultInstance() {
}

SkillBonus::SkillBonus(const SkillBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBonus::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  exp_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBonus::~SkillBonus() {
  SharedDtor();
}

void SkillBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBonus_descriptor_;
}

const SkillBonus& SkillBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

SkillBonus* SkillBonus::default_instance_ = NULL;

SkillBonus* SkillBonus::New() const {
  return new SkillBonus;
}

void SkillBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    exp_bonus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_bonus;
        break;
      }
      
      // required int32 exp_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }
      
      // required int32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_bonus(), output);
  }
  
  // required int32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_bonus(), target);
  }
  
  // required int32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // required int32 exp_bonus = 2;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBonus::MergeFrom(const SkillBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBonus::CopyFrom(const SkillBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SkillBonus::Swap(SkillBonus* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBonus_descriptor_;
  metadata.reflection = SkillBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bonus::kGuidFieldNumber;
const int Bonus::kExpBonusFieldNumber;
const int Bonus::kVipLevelFieldNumber;
const int Bonus::kVipExpFactorFieldNumber;
const int Bonus::kTeamExpFactorFieldNumber;
const int Bonus::kOtherExpFactorFieldNumber;
const int Bonus::kSkillBonusFieldNumber;
const int Bonus::kGoldCoinBonusFieldNumber;
const int Bonus::kBagHasEnoughSlotsFieldNumber;
const int Bonus::kBaseExpBonusFieldNumber;
const int Bonus::kBaseGoldCoinBonusFieldNumber;
const int Bonus::kContWinExpBonusFieldNumber;
const int Bonus::kContWinGoldBonusFieldNumber;
const int Bonus::kDeContWinExpBonusFieldNumber;
const int Bonus::kDeContWinGoldBonusFieldNumber;
const int Bonus::kDropItemFieldNumber;
const int Bonus::kQuestDropItemFieldNumber;
const int Bonus::kEquipmentFieldNumber;
#endif  // !_MSC_VER

Bonus::Bonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bonus::InitAsDefaultInstance() {
}

Bonus::Bonus(const Bonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bonus::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  exp_bonus_ = 0;
  vip_level_ = 0;
  vip_exp_factor_ = 0;
  team_exp_factor_ = 0;
  other_exp_factor_ = 0;
  gold_coin_bonus_ = 0;
  bag_has_enough_slots_ = 0;
  base_exp_bonus_ = 0;
  base_gold_coin_bonus_ = 0;
  cont_win_exp_bonus_ = 0;
  cont_win_gold_bonus_ = 0;
  de_cont_win_exp_bonus_ = 0;
  de_cont_win_gold_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bonus::~Bonus() {
  SharedDtor();
}

void Bonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bonus_descriptor_;
}

const Bonus& Bonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Bonus* Bonus::default_instance_ = NULL;

Bonus* Bonus::New() const {
  return new Bonus;
}

void Bonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    exp_bonus_ = 0;
    vip_level_ = 0;
    vip_exp_factor_ = 0;
    team_exp_factor_ = 0;
    other_exp_factor_ = 0;
    gold_coin_bonus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bag_has_enough_slots_ = 0;
    base_exp_bonus_ = 0;
    base_gold_coin_bonus_ = 0;
    cont_win_exp_bonus_ = 0;
    cont_win_gold_bonus_ = 0;
    de_cont_win_exp_bonus_ = 0;
    de_cont_win_gold_bonus_ = 0;
  }
  skill_bonus_.Clear();
  drop_item_.Clear();
  quest_drop_item_.Clear();
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_bonus;
        break;
      }
      
      // optional int32 exp_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_bonus;
        break;
      }
      
      // repeated .protocols.common.SkillBonus skill_bonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_bonus;
        if (input->ExpectTag(32)) goto parse_bag_has_enough_slots;
        break;
      }
      
      // optional int32 bag_has_enough_slots = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_has_enough_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_has_enough_slots_)));
          set_has_bag_has_enough_slots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drop_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo drop_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_drop_item;
        if (input->ExpectTag(50)) goto parse_equipment;
        break;
      }
      
      // repeated .protocols.common.EquipDetail equipment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equipment;
        if (input->ExpectTag(58)) goto parse_quest_drop_item;
        break;
      }
      
      // repeated .protocols.common.ItemInfo quest_drop_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_drop_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quest_drop_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quest_drop_item;
        if (input->ExpectTag(64)) goto parse_gold_coin_bonus;
        break;
      }
      
      // optional int32 gold_coin_bonus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_coin_bonus_)));
          set_has_gold_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_base_exp_bonus;
        break;
      }
      
      // optional int32 base_exp_bonus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_exp_bonus_)));
          set_has_base_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_exp_factor;
        break;
      }
      
      // optional int32 vip_exp_factor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_exp_factor_)));
          set_has_vip_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_team_exp_factor;
        break;
      }
      
      // optional int32 team_exp_factor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_exp_factor_)));
          set_has_team_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_other_exp_factor;
        break;
      }
      
      // optional int32 other_exp_factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_exp_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_exp_factor_)));
          set_has_other_exp_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_base_gold_coin_bonus;
        break;
      }
      
      // optional int32 base_gold_coin_bonus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_gold_coin_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_gold_coin_bonus_)));
          set_has_base_gold_coin_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cont_win_exp_bonus;
        break;
      }
      
      // optional int32 cont_win_exp_bonus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_exp_bonus_)));
          set_has_cont_win_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_cont_win_gold_bonus;
        break;
      }
      
      // optional int32 cont_win_gold_bonus = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_win_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cont_win_gold_bonus_)));
          set_has_cont_win_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_de_cont_win_exp_bonus;
        break;
      }
      
      // optional int32 de_cont_win_exp_bonus = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_de_cont_win_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &de_cont_win_exp_bonus_)));
          set_has_de_cont_win_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_de_cont_win_gold_bonus;
        break;
      }
      
      // optional int32 de_cont_win_gold_bonus = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_de_cont_win_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &de_cont_win_gold_bonus_)));
          set_has_de_cont_win_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_bonus(), output);
  }
  
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_bonus(i), output);
  }
  
  // optional int32 bag_has_enough_slots = 4;
  if (has_bag_has_enough_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bag_has_enough_slots(), output);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  for (int i = 0; i < this->drop_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->drop_item(i), output);
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equipment(i), output);
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quest_drop_item(i), output);
  }
  
  // optional int32 gold_coin_bonus = 8;
  if (has_gold_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gold_coin_bonus(), output);
  }
  
  // optional int32 base_exp_bonus = 9;
  if (has_base_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->base_exp_bonus(), output);
  }
  
  // optional int32 vip_exp_factor = 10;
  if (has_vip_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip_exp_factor(), output);
  }
  
  // optional int32 team_exp_factor = 11;
  if (has_team_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->team_exp_factor(), output);
  }
  
  // optional int32 other_exp_factor = 12;
  if (has_other_exp_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->other_exp_factor(), output);
  }
  
  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_level(), output);
  }
  
  // optional int32 base_gold_coin_bonus = 14;
  if (has_base_gold_coin_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->base_gold_coin_bonus(), output);
  }
  
  // optional int32 cont_win_exp_bonus = 15;
  if (has_cont_win_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cont_win_exp_bonus(), output);
  }
  
  // optional int32 cont_win_gold_bonus = 16;
  if (has_cont_win_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cont_win_gold_bonus(), output);
  }
  
  // optional int32 de_cont_win_exp_bonus = 17;
  if (has_de_cont_win_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->de_cont_win_exp_bonus(), output);
  }
  
  // optional int32 de_cont_win_gold_bonus = 18;
  if (has_de_cont_win_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->de_cont_win_gold_bonus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_bonus(), target);
  }
  
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_bonus(i), target);
  }
  
  // optional int32 bag_has_enough_slots = 4;
  if (has_bag_has_enough_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bag_has_enough_slots(), target);
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  for (int i = 0; i < this->drop_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->drop_item(i), target);
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equipment(i), target);
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quest_drop_item(i), target);
  }
  
  // optional int32 gold_coin_bonus = 8;
  if (has_gold_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gold_coin_bonus(), target);
  }
  
  // optional int32 base_exp_bonus = 9;
  if (has_base_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->base_exp_bonus(), target);
  }
  
  // optional int32 vip_exp_factor = 10;
  if (has_vip_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip_exp_factor(), target);
  }
  
  // optional int32 team_exp_factor = 11;
  if (has_team_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->team_exp_factor(), target);
  }
  
  // optional int32 other_exp_factor = 12;
  if (has_other_exp_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->other_exp_factor(), target);
  }
  
  // optional int32 vip_level = 13;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_level(), target);
  }
  
  // optional int32 base_gold_coin_bonus = 14;
  if (has_base_gold_coin_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->base_gold_coin_bonus(), target);
  }
  
  // optional int32 cont_win_exp_bonus = 15;
  if (has_cont_win_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cont_win_exp_bonus(), target);
  }
  
  // optional int32 cont_win_gold_bonus = 16;
  if (has_cont_win_gold_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cont_win_gold_bonus(), target);
  }
  
  // optional int32 de_cont_win_exp_bonus = 17;
  if (has_de_cont_win_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->de_cont_win_exp_bonus(), target);
  }
  
  // optional int32 de_cont_win_gold_bonus = 18;
  if (has_de_cont_win_gold_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->de_cont_win_gold_bonus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 exp_bonus = 2;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
    // optional int32 vip_level = 13;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional int32 vip_exp_factor = 10;
    if (has_vip_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_exp_factor());
    }
    
    // optional int32 team_exp_factor = 11;
    if (has_team_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_exp_factor());
    }
    
    // optional int32 other_exp_factor = 12;
    if (has_other_exp_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_exp_factor());
    }
    
    // optional int32 gold_coin_bonus = 8;
    if (has_gold_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_coin_bonus());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bag_has_enough_slots = 4;
    if (has_bag_has_enough_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_has_enough_slots());
    }
    
    // optional int32 base_exp_bonus = 9;
    if (has_base_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_exp_bonus());
    }
    
    // optional int32 base_gold_coin_bonus = 14;
    if (has_base_gold_coin_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_gold_coin_bonus());
    }
    
    // optional int32 cont_win_exp_bonus = 15;
    if (has_cont_win_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win_exp_bonus());
    }
    
    // optional int32 cont_win_gold_bonus = 16;
    if (has_cont_win_gold_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cont_win_gold_bonus());
    }
    
    // optional int32 de_cont_win_exp_bonus = 17;
    if (has_de_cont_win_exp_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->de_cont_win_exp_bonus());
    }
    
    // optional int32 de_cont_win_gold_bonus = 18;
    if (has_de_cont_win_gold_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->de_cont_win_gold_bonus());
    }
    
  }
  // repeated .protocols.common.SkillBonus skill_bonus = 3;
  total_size += 1 * this->skill_bonus_size();
  for (int i = 0; i < this->skill_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_bonus(i));
  }
  
  // repeated .protocols.common.ItemInfo drop_item = 5;
  total_size += 1 * this->drop_item_size();
  for (int i = 0; i < this->drop_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drop_item(i));
  }
  
  // repeated .protocols.common.ItemInfo quest_drop_item = 7;
  total_size += 1 * this->quest_drop_item_size();
  for (int i = 0; i < this->quest_drop_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quest_drop_item(i));
  }
  
  // repeated .protocols.common.EquipDetail equipment = 6;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bonus::MergeFrom(const Bonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_bonus_.MergeFrom(from.skill_bonus_);
  drop_item_.MergeFrom(from.drop_item_);
  quest_drop_item_.MergeFrom(from.quest_drop_item_);
  equipment_.MergeFrom(from.equipment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_exp_factor()) {
      set_vip_exp_factor(from.vip_exp_factor());
    }
    if (from.has_team_exp_factor()) {
      set_team_exp_factor(from.team_exp_factor());
    }
    if (from.has_other_exp_factor()) {
      set_other_exp_factor(from.other_exp_factor());
    }
    if (from.has_gold_coin_bonus()) {
      set_gold_coin_bonus(from.gold_coin_bonus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bag_has_enough_slots()) {
      set_bag_has_enough_slots(from.bag_has_enough_slots());
    }
    if (from.has_base_exp_bonus()) {
      set_base_exp_bonus(from.base_exp_bonus());
    }
    if (from.has_base_gold_coin_bonus()) {
      set_base_gold_coin_bonus(from.base_gold_coin_bonus());
    }
    if (from.has_cont_win_exp_bonus()) {
      set_cont_win_exp_bonus(from.cont_win_exp_bonus());
    }
    if (from.has_cont_win_gold_bonus()) {
      set_cont_win_gold_bonus(from.cont_win_gold_bonus());
    }
    if (from.has_de_cont_win_exp_bonus()) {
      set_de_cont_win_exp_bonus(from.de_cont_win_exp_bonus());
    }
    if (from.has_de_cont_win_gold_bonus()) {
      set_de_cont_win_gold_bonus(from.de_cont_win_gold_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bonus::CopyFrom(const Bonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bonus::IsInitialized() const {
  
  for (int i = 0; i < skill_bonus_size(); i++) {
    if (!this->skill_bonus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drop_item_size(); i++) {
    if (!this->drop_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < quest_drop_item_size(); i++) {
    if (!this->quest_drop_item(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equipment_size(); i++) {
    if (!this->equipment(i).IsInitialized()) return false;
  }
  return true;
}

void Bonus::Swap(Bonus* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_factor_, other->vip_exp_factor_);
    std::swap(team_exp_factor_, other->team_exp_factor_);
    std::swap(other_exp_factor_, other->other_exp_factor_);
    skill_bonus_.Swap(&other->skill_bonus_);
    std::swap(gold_coin_bonus_, other->gold_coin_bonus_);
    std::swap(bag_has_enough_slots_, other->bag_has_enough_slots_);
    std::swap(base_exp_bonus_, other->base_exp_bonus_);
    std::swap(base_gold_coin_bonus_, other->base_gold_coin_bonus_);
    std::swap(cont_win_exp_bonus_, other->cont_win_exp_bonus_);
    std::swap(cont_win_gold_bonus_, other->cont_win_gold_bonus_);
    std::swap(de_cont_win_exp_bonus_, other->de_cont_win_exp_bonus_);
    std::swap(de_cont_win_gold_bonus_, other->de_cont_win_gold_bonus_);
    drop_item_.Swap(&other->drop_item_);
    quest_drop_item_.Swap(&other->quest_drop_item_);
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bonus_descriptor_;
  metadata.reflection = Bonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightResult::kBattleIdFieldNumber;
const int FightResult::kFighterFieldNumber;
const int FightResult::kWinnerFieldNumber;
const int FightResult::kBonusFieldNumber;
const int FightResult::kCampABattleSkillsFieldNumber;
const int FightResult::kCampBBattleSkillsFieldNumber;
const int FightResult::kRoundDataFieldNumber;
const int FightResult::kNpcNameFieldNumber;
const int FightResult::kNpcLevelFieldNumber;
const int FightResult::kLeftFreeSkipTimesFieldNumber;
const int FightResult::kAutoSkipTimeLimitFieldNumber;
const int FightResult::kCampADeadPersonsFieldNumber;
const int FightResult::kCampBDeadPersonsFieldNumber;
const int FightResult::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

FightResult::FightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightResult::InitAsDefaultInstance() {
}

FightResult::FightResult(const FightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightResult::SharedCtor() {
  _cached_size_ = 0;
  battle_id_ = 0;
  winner_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npc_level_ = 0;
  left_free_skip_times_ = 0;
  auto_skip_time_limit_ = 0;
  camp_a_dead_persons_ = 0;
  camp_b_dead_persons_ = 0;
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightResult::~FightResult() {
  SharedDtor();
}

void FightResult::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

void FightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightResult_descriptor_;
}

const FightResult& FightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

FightResult* FightResult::default_instance_ = NULL;

FightResult* FightResult::New() const {
  return new FightResult;
}

void FightResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_id_ = 0;
    winner_ = 0;
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
        npc_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    npc_level_ = 0;
    left_free_skip_times_ = 0;
    auto_skip_time_limit_ = 0;
    camp_a_dead_persons_ = 0;
    camp_b_dead_persons_ = 0;
    battle_group_id_ = 0;
  }
  fighter_.Clear();
  bonus_.Clear();
  camp_a_battle_skills_.Clear();
  camp_b_battle_skills_.Clear();
  round_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Fighter fighter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fighter;
        if (input->ExpectTag(16)) goto parse_winner;
        break;
      }
      
      // optional int32 winner = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bonus;
        break;
      }
      
      // repeated .protocols.common.Bonus bonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bonus;
        if (input->ExpectTag(34)) goto parse_round_data;
        break;
      }
      
      // repeated bytes round_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_round_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_round_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_round_data;
        if (input->ExpectTag(40)) goto parse_battle_id;
        break;
      }
      
      // required int32 battle_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camp_a_battle_skills;
        break;
      }
      
      // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_a_battle_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_a_battle_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camp_a_battle_skills;
        if (input->ExpectTag(58)) goto parse_camp_b_battle_skills;
        break;
      }
      
      // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_b_battle_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_b_battle_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_camp_b_battle_skills;
        if (input->ExpectTag(66)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_left_free_skip_times;
        break;
      }
      
      // optional int32 left_free_skip_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_free_skip_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_free_skip_times_)));
          set_has_left_free_skip_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_auto_skip_time_limit;
        break;
      }
      
      // optional int32 auto_skip_time_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_skip_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_skip_time_limit_)));
          set_has_auto_skip_time_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_npc_level;
        break;
      }
      
      // optional int32 npc_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_level_)));
          set_has_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_camp_a_dead_persons;
        break;
      }
      
      // optional int32 camp_a_dead_persons = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_a_dead_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_a_dead_persons_)));
          set_has_camp_a_dead_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_camp_b_dead_persons;
        break;
      }
      
      // optional int32 camp_b_dead_persons = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_b_dead_persons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_b_dead_persons_)));
          set_has_camp_b_dead_persons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_battle_group_id;
        break;
      }
      
      // optional int32 battle_group_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fighter(i), output);
  }
  
  // optional int32 winner = 2;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winner(), output);
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bonus(i), output);
  }
  
  // repeated bytes round_data = 4;
  for (int i = 0; i < this->round_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->round_data(i), output);
  }
  
  // required int32 battle_id = 5;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battle_id(), output);
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->camp_a_battle_skills(i), output);
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->camp_b_battle_skills(i), output);
  }
  
  // optional string npc_name = 8;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->npc_name(), output);
  }
  
  // optional int32 left_free_skip_times = 9;
  if (has_left_free_skip_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->left_free_skip_times(), output);
  }
  
  // optional int32 auto_skip_time_limit = 10;
  if (has_auto_skip_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->auto_skip_time_limit(), output);
  }
  
  // optional int32 npc_level = 11;
  if (has_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->npc_level(), output);
  }
  
  // optional int32 camp_a_dead_persons = 12;
  if (has_camp_a_dead_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->camp_a_dead_persons(), output);
  }
  
  // optional int32 camp_b_dead_persons = 13;
  if (has_camp_b_dead_persons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->camp_b_dead_persons(), output);
  }
  
  // optional int32 battle_group_id = 14;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->battle_group_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Fighter fighter = 1;
  for (int i = 0; i < this->fighter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fighter(i), target);
  }
  
  // optional int32 winner = 2;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winner(), target);
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  for (int i = 0; i < this->bonus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bonus(i), target);
  }
  
  // repeated bytes round_data = 4;
  for (int i = 0; i < this->round_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->round_data(i), target);
  }
  
  // required int32 battle_id = 5;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battle_id(), target);
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->camp_a_battle_skills(i), target);
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->camp_b_battle_skills(i), target);
  }
  
  // optional string npc_name = 8;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->npc_name(), target);
  }
  
  // optional int32 left_free_skip_times = 9;
  if (has_left_free_skip_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->left_free_skip_times(), target);
  }
  
  // optional int32 auto_skip_time_limit = 10;
  if (has_auto_skip_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->auto_skip_time_limit(), target);
  }
  
  // optional int32 npc_level = 11;
  if (has_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->npc_level(), target);
  }
  
  // optional int32 camp_a_dead_persons = 12;
  if (has_camp_a_dead_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->camp_a_dead_persons(), target);
  }
  
  // optional int32 camp_b_dead_persons = 13;
  if (has_camp_b_dead_persons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->camp_b_dead_persons(), target);
  }
  
  // optional int32 battle_group_id = 14;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->battle_group_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 battle_id = 5;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }
    
    // optional int32 winner = 2;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }
    
    // optional string npc_name = 8;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 npc_level = 11;
    if (has_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_level());
    }
    
    // optional int32 left_free_skip_times = 9;
    if (has_left_free_skip_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_free_skip_times());
    }
    
    // optional int32 auto_skip_time_limit = 10;
    if (has_auto_skip_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_skip_time_limit());
    }
    
    // optional int32 camp_a_dead_persons = 12;
    if (has_camp_a_dead_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_a_dead_persons());
    }
    
    // optional int32 camp_b_dead_persons = 13;
    if (has_camp_b_dead_persons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp_b_dead_persons());
    }
    
    // optional int32 battle_group_id = 14;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }
    
  }
  // repeated .protocols.common.Fighter fighter = 1;
  total_size += 1 * this->fighter_size();
  for (int i = 0; i < this->fighter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter(i));
  }
  
  // repeated .protocols.common.Bonus bonus = 3;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }
  
  // repeated .protocols.common.SkillInfo camp_a_battle_skills = 6;
  total_size += 1 * this->camp_a_battle_skills_size();
  for (int i = 0; i < this->camp_a_battle_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_a_battle_skills(i));
  }
  
  // repeated .protocols.common.SkillInfo camp_b_battle_skills = 7;
  total_size += 1 * this->camp_b_battle_skills_size();
  for (int i = 0; i < this->camp_b_battle_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_b_battle_skills(i));
  }
  
  // repeated bytes round_data = 4;
  total_size += 1 * this->round_data_size();
  for (int i = 0; i < this->round_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->round_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightResult::MergeFrom(const FightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighter_.MergeFrom(from.fighter_);
  bonus_.MergeFrom(from.bonus_);
  camp_a_battle_skills_.MergeFrom(from.camp_a_battle_skills_);
  camp_b_battle_skills_.MergeFrom(from.camp_b_battle_skills_);
  round_data_.MergeFrom(from.round_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_npc_level()) {
      set_npc_level(from.npc_level());
    }
    if (from.has_left_free_skip_times()) {
      set_left_free_skip_times(from.left_free_skip_times());
    }
    if (from.has_auto_skip_time_limit()) {
      set_auto_skip_time_limit(from.auto_skip_time_limit());
    }
    if (from.has_camp_a_dead_persons()) {
      set_camp_a_dead_persons(from.camp_a_dead_persons());
    }
    if (from.has_camp_b_dead_persons()) {
      set_camp_b_dead_persons(from.camp_b_dead_persons());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightResult::CopyFrom(const FightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < bonus_size(); i++) {
    if (!this->bonus(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camp_a_battle_skills_size(); i++) {
    if (!this->camp_a_battle_skills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camp_b_battle_skills_size(); i++) {
    if (!this->camp_b_battle_skills(i).IsInitialized()) return false;
  }
  return true;
}

void FightResult::Swap(FightResult* other) {
  if (other != this) {
    std::swap(battle_id_, other->battle_id_);
    fighter_.Swap(&other->fighter_);
    std::swap(winner_, other->winner_);
    bonus_.Swap(&other->bonus_);
    camp_a_battle_skills_.Swap(&other->camp_a_battle_skills_);
    camp_b_battle_skills_.Swap(&other->camp_b_battle_skills_);
    round_data_.Swap(&other->round_data_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_level_, other->npc_level_);
    std::swap(left_free_skip_times_, other->left_free_skip_times_);
    std::swap(auto_skip_time_limit_, other->auto_skip_time_limit_);
    std::swap(camp_a_dead_persons_, other->camp_a_dead_persons_);
    std::swap(camp_b_dead_persons_, other->camp_b_dead_persons_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightResult_descriptor_;
  metadata.reflection = FightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPhyStrengthInfo::kPhyStrengthFieldNumber;
const int PlayerPhyStrengthInfo::kPhyStrengthLimitFieldNumber;
const int PlayerPhyStrengthInfo::kExtraPhyStrengthFieldNumber;
const int PlayerPhyStrengthInfo::kExtraPhyStrengthLimitFieldNumber;
const int PlayerPhyStrengthInfo::kTimeForRecoverPhyStrengthFieldNumber;
#endif  // !_MSC_VER

PlayerPhyStrengthInfo::PlayerPhyStrengthInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPhyStrengthInfo::InitAsDefaultInstance() {
}

PlayerPhyStrengthInfo::PlayerPhyStrengthInfo(const PlayerPhyStrengthInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPhyStrengthInfo::SharedCtor() {
  _cached_size_ = 0;
  phy_strength_ = 0;
  phy_strength_limit_ = 0;
  extra_phy_strength_ = 0;
  extra_phy_strength_limit_ = 0;
  time_for_recover_phy_strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPhyStrengthInfo::~PlayerPhyStrengthInfo() {
  SharedDtor();
}

void PlayerPhyStrengthInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPhyStrengthInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPhyStrengthInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPhyStrengthInfo_descriptor_;
}

const PlayerPhyStrengthInfo& PlayerPhyStrengthInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerPhyStrengthInfo* PlayerPhyStrengthInfo::default_instance_ = NULL;

PlayerPhyStrengthInfo* PlayerPhyStrengthInfo::New() const {
  return new PlayerPhyStrengthInfo;
}

void PlayerPhyStrengthInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phy_strength_ = 0;
    phy_strength_limit_ = 0;
    extra_phy_strength_ = 0;
    extra_phy_strength_limit_ = 0;
    time_for_recover_phy_strength_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPhyStrengthInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 phy_strength = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_strength_)));
          set_has_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phy_strength_limit;
        break;
      }
      
      // optional int32 phy_strength_limit = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_strength_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_strength_limit_)));
          set_has_phy_strength_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extra_phy_strength;
        break;
      }
      
      // optional int32 extra_phy_strength = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_phy_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_phy_strength_)));
          set_has_extra_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extra_phy_strength_limit;
        break;
      }
      
      // optional int32 extra_phy_strength_limit = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_phy_strength_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_phy_strength_limit_)));
          set_has_extra_phy_strength_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_for_recover_phy_strength;
        break;
      }
      
      // optional int32 time_for_recover_phy_strength = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_for_recover_phy_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_for_recover_phy_strength_)));
          set_has_time_for_recover_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPhyStrengthInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 phy_strength = 1 [default = 0];
  if (has_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phy_strength(), output);
  }
  
  // optional int32 phy_strength_limit = 2 [default = 0];
  if (has_phy_strength_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phy_strength_limit(), output);
  }
  
  // optional int32 extra_phy_strength = 3 [default = 0];
  if (has_extra_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extra_phy_strength(), output);
  }
  
  // optional int32 extra_phy_strength_limit = 4 [default = 0];
  if (has_extra_phy_strength_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extra_phy_strength_limit(), output);
  }
  
  // optional int32 time_for_recover_phy_strength = 5 [default = 0];
  if (has_time_for_recover_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_for_recover_phy_strength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPhyStrengthInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 phy_strength = 1 [default = 0];
  if (has_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phy_strength(), target);
  }
  
  // optional int32 phy_strength_limit = 2 [default = 0];
  if (has_phy_strength_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phy_strength_limit(), target);
  }
  
  // optional int32 extra_phy_strength = 3 [default = 0];
  if (has_extra_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extra_phy_strength(), target);
  }
  
  // optional int32 extra_phy_strength_limit = 4 [default = 0];
  if (has_extra_phy_strength_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extra_phy_strength_limit(), target);
  }
  
  // optional int32 time_for_recover_phy_strength = 5 [default = 0];
  if (has_time_for_recover_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_for_recover_phy_strength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPhyStrengthInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 phy_strength = 1 [default = 0];
    if (has_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_strength());
    }
    
    // optional int32 phy_strength_limit = 2 [default = 0];
    if (has_phy_strength_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_strength_limit());
    }
    
    // optional int32 extra_phy_strength = 3 [default = 0];
    if (has_extra_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_phy_strength());
    }
    
    // optional int32 extra_phy_strength_limit = 4 [default = 0];
    if (has_extra_phy_strength_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_phy_strength_limit());
    }
    
    // optional int32 time_for_recover_phy_strength = 5 [default = 0];
    if (has_time_for_recover_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_for_recover_phy_strength());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPhyStrengthInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPhyStrengthInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPhyStrengthInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPhyStrengthInfo::MergeFrom(const PlayerPhyStrengthInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phy_strength()) {
      set_phy_strength(from.phy_strength());
    }
    if (from.has_phy_strength_limit()) {
      set_phy_strength_limit(from.phy_strength_limit());
    }
    if (from.has_extra_phy_strength()) {
      set_extra_phy_strength(from.extra_phy_strength());
    }
    if (from.has_extra_phy_strength_limit()) {
      set_extra_phy_strength_limit(from.extra_phy_strength_limit());
    }
    if (from.has_time_for_recover_phy_strength()) {
      set_time_for_recover_phy_strength(from.time_for_recover_phy_strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPhyStrengthInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPhyStrengthInfo::CopyFrom(const PlayerPhyStrengthInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPhyStrengthInfo::IsInitialized() const {
  
  return true;
}

void PlayerPhyStrengthInfo::Swap(PlayerPhyStrengthInfo* other) {
  if (other != this) {
    std::swap(phy_strength_, other->phy_strength_);
    std::swap(phy_strength_limit_, other->phy_strength_limit_);
    std::swap(extra_phy_strength_, other->extra_phy_strength_);
    std::swap(extra_phy_strength_limit_, other->extra_phy_strength_limit_);
    std::swap(time_for_recover_phy_strength_, other->time_for_recover_phy_strength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPhyStrengthInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPhyStrengthInfo_descriptor_;
  metadata.reflection = PlayerPhyStrengthInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kGuidFieldNumber;
const int PlayerInfo::kTidFieldNumber;
const int PlayerInfo::kMapIdFieldNumber;
const int PlayerInfo::kMapXFieldNumber;
const int PlayerInfo::kMapYFieldNumber;
const int PlayerInfo::kVipLevelFieldNumber;
const int PlayerInfo::kJobFieldNumber;
const int PlayerInfo::kJobLevelFieldNumber;
const int PlayerInfo::kFlagFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kGenderFieldNumber;
const int PlayerInfo::kHpFieldNumber;
const int PlayerInfo::kExpFieldNumber;
const int PlayerInfo::kVipEndSecFieldNumber;
const int PlayerInfo::kLineupCapacityFieldNumber;
const int PlayerInfo::kStatusFieldNumber;
const int PlayerInfo::kLeaderGuidFieldNumber;
const int PlayerInfo::kServerIdFieldNumber;
const int PlayerInfo::kGuildIdFieldNumber;
const int PlayerInfo::kGuildNameFieldNumber;
const int PlayerInfo::kPlayerPhyStrengthFieldNumber;
const int PlayerInfo::kMapInstanceIdFieldNumber;
const int PlayerInfo::kFollowGuidFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  player_phy_strength_ = const_cast< ::protocols::common::PlayerPhyStrengthInfo*>(&::protocols::common::PlayerPhyStrengthInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  map_id_ = 1;
  map_x_ = 1;
  map_y_ = 1;
  vip_level_ = 0;
  job_ = 1;
  job_level_ = 1;
  flag_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 1;
  hp_ = 0;
  exp_ = 0;
  vip_end_sec_ = 0;
  lineup_capacity_ = 0;
  status_ = 0;
  leader_guid_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  guild_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_phy_strength_ = NULL;
  map_instance_id_ = 0;
  follow_guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete player_phy_strength_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    map_id_ = 1;
    map_x_ = 1;
    map_y_ = 1;
    vip_level_ = 0;
    job_ = 1;
    job_level_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flag_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gender_ = 1;
    hp_ = 0;
    exp_ = 0;
    vip_end_sec_ = 0;
    lineup_capacity_ = 0;
    status_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    leader_guid_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
    guild_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_player_phy_strength()) {
      if (player_phy_strength_ != NULL) player_phy_strength_->::protocols::common::PlayerPhyStrengthInfo::Clear();
    }
    map_instance_id_ = 0;
    follow_guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 6 [default = WIZARD];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job_level;
        break;
      }
      
      // optional int32 job_level = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_level_)));
          set_has_job_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // required string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 10 [default = MALE];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_end_sec;
        break;
      }
      
      // optional int32 vip_end_sec = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_end_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_end_sec_)));
          set_has_vip_end_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_status;
        break;
      }
      
      // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::GameStatus_IsValid(value)) {
            set_status(static_cast< protocols::common::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tid;
        break;
      }
      
      // optional int32 tid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_leader_guid;
        break;
      }
      
      // optional int64 leader_guid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lineup_capacity;
        break;
      }
      
      // optional int32 lineup_capacity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_capacity_)));
          set_has_lineup_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_map_instance_id;
        break;
      }
      
      // optional int32 map_instance_id = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_instance_id_)));
          set_has_map_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_player_phy_strength;
        break;
      }
      
      // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_phy_strength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_phy_strength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_follow_guid;
        break;
      }
      
      // optional int64 follow_guid = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &follow_guid_)));
          set_has_follow_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 map_id = 2 [default = 1];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_id(), output);
  }
  
  // optional int32 map_x = 3 [default = 1];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_x(), output);
  }
  
  // optional int32 map_y = 4 [default = 1];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_y(), output);
  }
  
  // optional int32 vip_level = 5 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_level(), output);
  }
  
  // optional .protocols.common.Profession job = 6 [default = WIZARD];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->job(), output);
  }
  
  // optional int32 job_level = 7 [default = 1];
  if (has_job_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job_level(), output);
  }
  
  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }
  
  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional .protocols.common.Gender gender = 10 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gender(), output);
  }
  
  // optional int32 hp = 11 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hp(), output);
  }
  
  // optional int32 exp = 12 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exp(), output);
  }
  
  // optional int32 vip_end_sec = 13 [default = 0];
  if (has_vip_end_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_end_sec(), output);
  }
  
  // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->status(), output);
  }
  
  // optional int32 tid = 16;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tid(), output);
  }
  
  // optional int64 leader_guid = 17;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->leader_guid(), output);
  }
  
  // optional int32 guild_id = 18 [default = 0];
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->guild_id(), output);
  }
  
  // optional string guild_name = 19 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->guild_name(), output);
  }
  
  // optional int32 server_id = 20;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->server_id(), output);
  }
  
  // optional int32 lineup_capacity = 21 [default = 0];
  if (has_lineup_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lineup_capacity(), output);
  }
  
  // optional int32 map_instance_id = 22 [default = 0];
  if (has_map_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->map_instance_id(), output);
  }
  
  // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
  if (has_player_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->player_phy_strength(), output);
  }
  
  // optional int64 follow_guid = 24 [default = 0];
  if (has_follow_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->follow_guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 map_id = 2 [default = 1];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_id(), target);
  }
  
  // optional int32 map_x = 3 [default = 1];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_x(), target);
  }
  
  // optional int32 map_y = 4 [default = 1];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_y(), target);
  }
  
  // optional int32 vip_level = 5 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_level(), target);
  }
  
  // optional .protocols.common.Profession job = 6 [default = WIZARD];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->job(), target);
  }
  
  // optional int32 job_level = 7 [default = 1];
  if (has_job_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job_level(), target);
  }
  
  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }
  
  // required string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional .protocols.common.Gender gender = 10 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gender(), target);
  }
  
  // optional int32 hp = 11 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hp(), target);
  }
  
  // optional int32 exp = 12 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exp(), target);
  }
  
  // optional int32 vip_end_sec = 13 [default = 0];
  if (has_vip_end_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_end_sec(), target);
  }
  
  // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->status(), target);
  }
  
  // optional int32 tid = 16;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tid(), target);
  }
  
  // optional int64 leader_guid = 17;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->leader_guid(), target);
  }
  
  // optional int32 guild_id = 18 [default = 0];
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->guild_id(), target);
  }
  
  // optional string guild_name = 19 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->guild_name(), target);
  }
  
  // optional int32 server_id = 20;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->server_id(), target);
  }
  
  // optional int32 lineup_capacity = 21 [default = 0];
  if (has_lineup_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lineup_capacity(), target);
  }
  
  // optional int32 map_instance_id = 22 [default = 0];
  if (has_map_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->map_instance_id(), target);
  }
  
  // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
  if (has_player_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->player_phy_strength(), target);
  }
  
  // optional int64 follow_guid = 24 [default = 0];
  if (has_follow_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->follow_guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 tid = 16;
    if (has_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 map_id = 2 [default = 1];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 3 [default = 1];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 4 [default = 1];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 vip_level = 5 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional .protocols.common.Profession job = 6 [default = WIZARD];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional int32 job_level = 7 [default = 1];
    if (has_job_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 flag = 8 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // required string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .protocols.common.Gender gender = 10 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 hp = 11 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 exp = 12 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 vip_end_sec = 13 [default = 0];
    if (has_vip_end_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_end_sec());
    }
    
    // optional int32 lineup_capacity = 21 [default = 0];
    if (has_lineup_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_capacity());
    }
    
    // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 leader_guid = 17;
    if (has_leader_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // optional int32 server_id = 20;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 guild_id = 18 [default = 0];
    if (has_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional string guild_name = 19 [default = ""];
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
    if (has_player_phy_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_phy_strength());
    }
    
    // optional int32 map_instance_id = 22 [default = 0];
    if (has_map_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_instance_id());
    }
    
    // optional int64 follow_guid = 24 [default = 0];
    if (has_follow_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->follow_guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_job_level()) {
      set_job_level(from.job_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vip_end_sec()) {
      set_vip_end_sec(from.vip_end_sec());
    }
    if (from.has_lineup_capacity()) {
      set_lineup_capacity(from.lineup_capacity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_player_phy_strength()) {
      mutable_player_phy_strength()->::protocols::common::PlayerPhyStrengthInfo::MergeFrom(from.player_phy_strength());
    }
    if (from.has_map_instance_id()) {
      set_map_instance_id(from.map_instance_id());
    }
    if (from.has_follow_guid()) {
      set_follow_guid(from.follow_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000201) != 0x00000201) return false;
  
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(job_, other->job_);
    std::swap(job_level_, other->job_level_);
    std::swap(flag_, other->flag_);
    std::swap(name_, other->name_);
    std::swap(gender_, other->gender_);
    std::swap(hp_, other->hp_);
    std::swap(exp_, other->exp_);
    std::swap(vip_end_sec_, other->vip_end_sec_);
    std::swap(lineup_capacity_, other->lineup_capacity_);
    std::swap(status_, other->status_);
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(player_phy_strength_, other->player_phy_strength_);
    std::swap(map_instance_id_, other->map_instance_id_);
    std::swap(follow_guid_, other->follow_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCInfo::kNpcIdFieldNumber;
const int NPCInfo::kNpcTidFieldNumber;
const int NPCInfo::kNpcNameFieldNumber;
const int NPCInfo::kNpcLevelFieldNumber;
#endif  // !_MSC_VER

NPCInfo::NPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCInfo::InitAsDefaultInstance() {
}

NPCInfo::NPCInfo(const NPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCInfo::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  npc_tid_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npc_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCInfo::~NPCInfo() {
  SharedDtor();
}

void NPCInfo::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

void NPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCInfo_descriptor_;
}

const NPCInfo& NPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

NPCInfo* NPCInfo::default_instance_ = NULL;

NPCInfo* NPCInfo::New() const {
  return new NPCInfo;
}

void NPCInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    npc_tid_ = 0;
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
        npc_name_->clear();
      }
    }
    npc_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_tid;
        break;
      }
      
      // optional int32 npc_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_tid_)));
          set_has_npc_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_level;
        break;
      }
      
      // optional int32 npc_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_level_)));
          set_has_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 npc_tid = 2;
  if (has_npc_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_tid(), output);
  }
  
  // optional string npc_name = 3;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->npc_name(), output);
  }
  
  // optional int32 npc_level = 4;
  if (has_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 npc_tid = 2;
  if (has_npc_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_tid(), target);
  }
  
  // optional string npc_name = 3;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->npc_name(), target);
  }
  
  // optional int32 npc_level = 4;
  if (has_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 npc_tid = 2;
    if (has_npc_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_tid());
    }
    
    // optional string npc_name = 3;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }
    
    // optional int32 npc_level = 4;
    if (has_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCInfo::MergeFrom(const NPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_npc_tid()) {
      set_npc_tid(from.npc_tid());
    }
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
    if (from.has_npc_level()) {
      set_npc_level(from.npc_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCInfo::CopyFrom(const NPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NPCInfo::Swap(NPCInfo* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(npc_tid_, other->npc_tid_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_level_, other->npc_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCInfo_descriptor_;
  metadata.reflection = NPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaojuInfo::kGuidFieldNumber;
#endif  // !_MSC_VER

BaojuInfo::BaojuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaojuInfo::InitAsDefaultInstance() {
}

BaojuInfo::BaojuInfo(const BaojuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaojuInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaojuInfo::~BaojuInfo() {
  SharedDtor();
}

void BaojuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaojuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaojuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaojuInfo_descriptor_;
}

const BaojuInfo& BaojuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BaojuInfo* BaojuInfo::default_instance_ = NULL;

BaojuInfo* BaojuInfo::New() const {
  return new BaojuInfo;
}

void BaojuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaojuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaojuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaojuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaojuInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaojuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaojuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaojuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaojuInfo::MergeFrom(const BaojuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaojuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaojuInfo::CopyFrom(const BaojuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaojuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BaojuInfo::Swap(BaojuInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaojuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaojuInfo_descriptor_;
  metadata.reflection = BaojuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kCountFieldNumber;
const int ItemInfo::kExpiredFieldNumber;
const int ItemInfo::kPosFieldNumber;
const int ItemInfo::kPosTypeFieldNumber;
const int ItemInfo::kBindFlagFieldNumber;
const int ItemInfo::kStrengthLevelFieldNumber;
const int ItemInfo::kMarkFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  expired_ = 0;
  pos_ = 0;
  pos_type_ = 0;
  bind_flag_ = false;
  strength_level_ = 0;
  mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    expired_ = 0;
    pos_ = 0;
    pos_type_ = 0;
    bind_flag_ = false;
    strength_level_ = 0;
    mark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos_type;
        break;
      }
      
      // optional int32 pos_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bind_flag;
        break;
      }
      
      // optional bool bind_flag = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_flag_)));
          set_has_bind_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 expired = 3 [default = 0];
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expired(), output);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }
  
  // optional int32 pos_type = 5;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_type(), output);
  }
  
  // optional bool bind_flag = 6 [default = false];
  if (has_bind_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bind_flag(), output);
  }
  
  // optional int32 strength_level = 7 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength_level(), output);
  }
  
  // optional int32 mark = 8 [default = 0];
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 expired = 3 [default = 0];
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expired(), target);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }
  
  // optional int32 pos_type = 5;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_type(), target);
  }
  
  // optional bool bind_flag = 6 [default = false];
  if (has_bind_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bind_flag(), target);
  }
  
  // optional int32 strength_level = 7 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength_level(), target);
  }
  
  // optional int32 mark = 8 [default = 0];
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 expired = 3 [default = 0];
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 pos_type = 5;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
    // optional bool bind_flag = 6 [default = false];
    if (has_bind_flag()) {
      total_size += 1 + 1;
    }
    
    // optional int32 strength_level = 7 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 mark = 8 [default = 0];
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
    if (from.has_bind_flag()) {
      set_bind_flag(from.bind_flag());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(expired_, other->expired_);
    std::swap(pos_, other->pos_);
    std::swap(pos_type_, other->pos_type_);
    std::swap(bind_flag_, other->bind_flag_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kLevelFieldNumber;
const int SkillInfo::kEquipSlotIndexFieldNumber;
const int SkillInfo::kExpFieldNumber;
const int SkillInfo::kIsPracticingFieldNumber;
const int SkillInfo::kDeltaTimeFieldNumber;
const int SkillInfo::kDeltaAddExpFieldNumber;
const int SkillInfo::kPracticeTimeFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  equip_slot_index_ = -1;
  exp_ = 0;
  is_practicing_ = 0;
  delta_time_ = 0;
  delta_add_exp_ = 0;
  practice_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    equip_slot_index_ = -1;
    exp_ = 0;
    is_practicing_ = 0;
    delta_time_ = 0;
    delta_add_exp_ = 0;
    practice_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_slot_index;
        break;
      }
      
      // optional int32 equip_slot_index = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_index_)));
          set_has_equip_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_practicing;
        break;
      }
      
      // optional int32 is_practicing = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_practicing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_practicing_)));
          set_has_is_practicing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delta_time;
        break;
      }
      
      // optional int32 delta_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_time_)));
          set_has_delta_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_delta_add_exp;
        break;
      }
      
      // optional int32 delta_add_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_add_exp_)));
          set_has_delta_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_practice_time;
        break;
      }
      
      // optional int32 practice_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_time_)));
          set_has_practice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 equip_slot_index = 3 [default = -1];
  if (has_equip_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_slot_index(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // optional int32 is_practicing = 5 [default = 0];
  if (has_is_practicing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_practicing(), output);
  }
  
  // optional int32 delta_time = 6;
  if (has_delta_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delta_time(), output);
  }
  
  // optional int32 delta_add_exp = 7;
  if (has_delta_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->delta_add_exp(), output);
  }
  
  // optional int32 practice_time = 8;
  if (has_practice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->practice_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 equip_slot_index = 3 [default = -1];
  if (has_equip_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_slot_index(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  // optional int32 is_practicing = 5 [default = 0];
  if (has_is_practicing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_practicing(), target);
  }
  
  // optional int32 delta_time = 6;
  if (has_delta_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delta_time(), target);
  }
  
  // optional int32 delta_add_exp = 7;
  if (has_delta_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->delta_add_exp(), target);
  }
  
  // optional int32 practice_time = 8;
  if (has_practice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->practice_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 equip_slot_index = 3 [default = -1];
    if (has_equip_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot_index());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 is_practicing = 5 [default = 0];
    if (has_is_practicing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_practicing());
    }
    
    // optional int32 delta_time = 6;
    if (has_delta_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_time());
    }
    
    // optional int32 delta_add_exp = 7;
    if (has_delta_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_add_exp());
    }
    
    // optional int32 practice_time = 8;
    if (has_practice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_equip_slot_index()) {
      set_equip_slot_index(from.equip_slot_index());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_is_practicing()) {
      set_is_practicing(from.is_practicing());
    }
    if (from.has_delta_time()) {
      set_delta_time(from.delta_time());
    }
    if (from.has_delta_add_exp()) {
      set_delta_add_exp(from.delta_add_exp());
    }
    if (from.has_practice_time()) {
      set_practice_time(from.practice_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(equip_slot_index_, other->equip_slot_index_);
    std::swap(exp_, other->exp_);
    std::swap(is_practicing_, other->is_practicing_);
    std::swap(delta_time_, other->delta_time_);
    std::swap(delta_add_exp_, other->delta_add_exp_);
    std::swap(practice_time_, other->practice_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSkillInfo::kSkillIdFieldNumber;
const int BattleSkillInfo::kLevelFieldNumber;
const int BattleSkillInfo::kBattleSkillTypeFieldNumber;
const int BattleSkillInfo::kExpFieldNumber;
#endif  // !_MSC_VER

BattleSkillInfo::BattleSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSkillInfo::InitAsDefaultInstance() {
}

BattleSkillInfo::BattleSkillInfo(const BattleSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  battle_skill_type_ = 2;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSkillInfo::~BattleSkillInfo() {
  SharedDtor();
}

void BattleSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSkillInfo_descriptor_;
}

const BattleSkillInfo& BattleSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BattleSkillInfo* BattleSkillInfo::default_instance_ = NULL;

BattleSkillInfo* BattleSkillInfo::New() const {
  return new BattleSkillInfo;
}

void BattleSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    battle_skill_type_ = 2;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_type;
        break;
      }
      
      // optional int32 battle_skill_type = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_skill_type_)));
          set_has_battle_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 battle_skill_type = 3 [default = 2];
  if (has_battle_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_skill_type(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 battle_skill_type = 3 [default = 2];
  if (has_battle_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_skill_type(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 battle_skill_type = 3 [default = 2];
    if (has_battle_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_skill_type());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSkillInfo::MergeFrom(const BattleSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battle_skill_type()) {
      set_battle_skill_type(from.battle_skill_type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSkillInfo::CopyFrom(const BattleSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BattleSkillInfo::Swap(BattleSkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(battle_skill_type_, other->battle_skill_type_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSkillInfo_descriptor_;
  metadata.reflection = BattleSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankInfo::kCoinFieldNumber;
const int BankInfo::kCouponFieldNumber;
const int BankInfo::kDiamondFieldNumber;
#endif  // !_MSC_VER

BankInfo::BankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankInfo::InitAsDefaultInstance() {
}

BankInfo::BankInfo(const BankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankInfo::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  coupon_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankInfo::~BankInfo() {
  SharedDtor();
}

void BankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankInfo_descriptor_;
}

const BankInfo& BankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BankInfo* BankInfo::default_instance_ = NULL;

BankInfo* BankInfo::New() const {
  return new BankInfo;
}

void BankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
    coupon_ = 0;
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coupon;
        break;
      }
      
      // optional int32 coupon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }
      
      // optional int32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }
  
  // optional int32 coupon = 2;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coupon(), output);
  }
  
  // optional int32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }
  
  // optional int32 coupon = 2;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coupon(), target);
  }
  
  // optional int32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 coupon = 2;
    if (has_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coupon());
    }
    
    // optional int32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankInfo::MergeFrom(const BankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankInfo::CopyFrom(const BankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankInfo::IsInitialized() const {
  
  return true;
}

void BankInfo::Swap(BankInfo* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(coupon_, other->coupon_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankInfo_descriptor_;
  metadata.reflection = BankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingInfo::kGuidFieldNumber;
const int YinglingInfo::kTidFieldNumber;
const int YinglingInfo::kJobFieldNumber;
const int YinglingInfo::kGenderFieldNumber;
const int YinglingInfo::kJobLevelFieldNumber;
const int YinglingInfo::kNameFieldNumber;
const int YinglingInfo::kQualityFieldNumber;
const int YinglingInfo::kFightCapacityFieldNumber;
const int YinglingInfo::kIsInFightLineupFieldNumber;
#endif  // !_MSC_VER

YinglingInfo::YinglingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingInfo::InitAsDefaultInstance() {
}

YinglingInfo::YinglingInfo(const YinglingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  job_ = 1;
  gender_ = 1;
  job_level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  fight_capacity_ = 0;
  is_in_fight_lineup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingInfo::~YinglingInfo() {
  SharedDtor();
}

void YinglingInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void YinglingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingInfo_descriptor_;
}

const YinglingInfo& YinglingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingInfo* YinglingInfo::default_instance_ = NULL;

YinglingInfo* YinglingInfo::New() const {
  return new YinglingInfo;
}

void YinglingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    job_ = 1;
    gender_ = 1;
    job_level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    fight_capacity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_in_fight_lineup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 2 [default = WIZARD];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_level;
        break;
      }
      
      // optional int32 job_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_level_)));
          set_has_job_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tid;
        break;
      }
      
      // required int32 tid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 15 [default = MALE];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_in_fight_lineup;
        break;
      }
      
      // optional int32 is_in_fight_lineup = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_fight_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_in_fight_lineup_)));
          set_has_is_in_fight_lineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional .protocols.common.Profession job = 2 [default = WIZARD];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job(), output);
  }
  
  // optional int32 job_level = 3 [default = 0];
  if (has_job_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_level(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 quality = 9 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }
  
  // optional int32 fight_capacity = 10 [default = 0];
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fight_capacity(), output);
  }
  
  // required int32 tid = 12;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tid(), output);
  }
  
  // optional .protocols.common.Gender gender = 15 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->gender(), output);
  }
  
  // optional int32 is_in_fight_lineup = 16 [default = 0];
  if (has_is_in_fight_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->is_in_fight_lineup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional .protocols.common.Profession job = 2 [default = WIZARD];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job(), target);
  }
  
  // optional int32 job_level = 3 [default = 0];
  if (has_job_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_level(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 quality = 9 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }
  
  // optional int32 fight_capacity = 10 [default = 0];
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fight_capacity(), target);
  }
  
  // required int32 tid = 12;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tid(), target);
  }
  
  // optional .protocols.common.Gender gender = 15 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->gender(), target);
  }
  
  // optional int32 is_in_fight_lineup = 16 [default = 0];
  if (has_is_in_fight_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->is_in_fight_lineup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 tid = 12;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional .protocols.common.Profession job = 2 [default = WIZARD];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional .protocols.common.Gender gender = 15 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 job_level = 3 [default = 0];
    if (has_job_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_level());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 quality = 9 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 fight_capacity = 10 [default = 0];
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_in_fight_lineup = 16 [default = 0];
    if (has_is_in_fight_lineup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_in_fight_lineup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingInfo::MergeFrom(const YinglingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_job_level()) {
      set_job_level(from.job_level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_in_fight_lineup()) {
      set_is_in_fight_lineup(from.is_in_fight_lineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingInfo::CopyFrom(const YinglingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  return true;
}

void YinglingInfo::Swap(YinglingInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(job_, other->job_);
    std::swap(gender_, other->gender_);
    std::swap(job_level_, other->job_level_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(is_in_fight_lineup_, other->is_in_fight_lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingInfo_descriptor_;
  metadata.reflection = YinglingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyDetailInfo::kGuidFieldNumber;
const int BuddyDetailInfo::kNameFieldNumber;
const int BuddyDetailInfo::kTotalAttrListFieldNumber;
const int BuddyDetailInfo::kBareAttrListFieldNumber;
const int BuddyDetailInfo::kEquipListFieldNumber;
const int BuddyDetailInfo::kExpFieldNumber;
const int BuddyDetailInfo::kHpFieldNumber;
const int BuddyDetailInfo::kCurSoulFieldNumber;
const int BuddyDetailInfo::kMaxSoulFieldNumber;
const int BuddyDetailInfo::kQualityFieldNumber;
const int BuddyDetailInfo::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

BuddyDetailInfo::BuddyDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyDetailInfo::InitAsDefaultInstance() {
}

BuddyDetailInfo::BuddyDetailInfo(const BuddyDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  hp_ = 0;
  cur_soul_ = 0;
  max_soul_ = 0;
  quality_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyDetailInfo::~BuddyDetailInfo() {
  SharedDtor();
}

void BuddyDetailInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BuddyDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyDetailInfo_descriptor_;
}

const BuddyDetailInfo& BuddyDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BuddyDetailInfo* BuddyDetailInfo::default_instance_ = NULL;

BuddyDetailInfo* BuddyDetailInfo::New() const {
  return new BuddyDetailInfo;
}

void BuddyDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    exp_ = 0;
    hp_ = 0;
    cur_soul_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_soul_ = 0;
    quality_ = 0;
    fight_capacity_ = 0;
  }
  total_attr_list_.Clear();
  bare_attr_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.AttributeData total_attr_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_attr_list;
        if (input->ExpectTag(50)) goto parse_bare_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData bare_attr_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bare_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bare_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bare_attr_list;
        if (input->ExpectTag(58)) goto parse_equip_list;
        break;
      }
      
      // repeated .protocols.common.EquipInfo equip_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_list;
        if (input->ExpectTag(64)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cur_soul;
        break;
      }
      
      // optional int32 cur_soul = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_soul_)));
          set_has_cur_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_max_soul;
        break;
      }
      
      // optional int32 max_soul = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_soul_)));
          set_has_max_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }
      
      // required string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->total_attr_list(i), output);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bare_attr_list(i), output);
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip_list(i), output);
  }
  
  // required int64 guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->guid(), output);
  }
  
  // optional int32 exp = 15 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->exp(), output);
  }
  
  // optional int32 hp = 16 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hp(), output);
  }
  
  // optional int32 cur_soul = 17 [default = 0];
  if (has_cur_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cur_soul(), output);
  }
  
  // optional int32 max_soul = 18 [default = 0];
  if (has_max_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_soul(), output);
  }
  
  // optional int32 quality = 19 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->quality(), output);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }
  
  // optional int32 fight_capacity = 21 [default = 0];
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->total_attr_list(i), target);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bare_attr_list(i), target);
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip_list(i), target);
  }
  
  // required int64 guid = 8;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->guid(), target);
  }
  
  // optional int32 exp = 15 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->exp(), target);
  }
  
  // optional int32 hp = 16 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hp(), target);
  }
  
  // optional int32 cur_soul = 17 [default = 0];
  if (has_cur_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cur_soul(), target);
  }
  
  // optional int32 max_soul = 18 [default = 0];
  if (has_max_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_soul(), target);
  }
  
  // optional int32 quality = 19 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->quality(), target);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }
  
  // optional int32 fight_capacity = 21 [default = 0];
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyDetailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 exp = 15 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 hp = 16 [default = 0];
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 cur_soul = 17 [default = 0];
    if (has_cur_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_soul());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_soul = 18 [default = 0];
    if (has_max_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_soul());
    }
    
    // optional int32 quality = 19 [default = 0];
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 fight_capacity = 21 [default = 0];
    if (has_fight_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  total_size += 1 * this->total_attr_list_size();
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  total_size += 1 * this->bare_attr_list_size();
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bare_attr_list(i));
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyDetailInfo::MergeFrom(const BuddyDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_attr_list_.MergeFrom(from.total_attr_list_);
  bare_attr_list_.MergeFrom(from.bare_attr_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_cur_soul()) {
      set_cur_soul(from.cur_soul());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_soul()) {
      set_max_soul(from.max_soul());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyDetailInfo::CopyFrom(const BuddyDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < equip_list_size(); i++) {
    if (!this->equip_list(i).IsInitialized()) return false;
  }
  return true;
}

void BuddyDetailInfo::Swap(BuddyDetailInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    total_attr_list_.Swap(&other->total_attr_list_);
    bare_attr_list_.Swap(&other->bare_attr_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(cur_soul_, other->cur_soul_);
    std::swap(max_soul_, other->max_soul_);
    std::swap(quality_, other->quality_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyDetailInfo_descriptor_;
  metadata.reflection = BuddyDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relation::kGuidFieldNumber;
const int Relation::kRelationFieldNumber;
#endif  // !_MSC_VER

Relation::Relation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Relation::InitAsDefaultInstance() {
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Relation::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  relation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New() const {
  return new Relation;
}

void Relation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    relation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relation;
        break;
      }
      
      // required int32 relation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 relation = 2;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 relation = 2;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Relation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 relation = 2;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Relation::Swap(Relation* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRelationData::kFriendFieldNumber;
#endif  // !_MSC_VER

PlayerRelationData::PlayerRelationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRelationData::InitAsDefaultInstance() {
}

PlayerRelationData::PlayerRelationData(const PlayerRelationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRelationData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRelationData::~PlayerRelationData() {
  SharedDtor();
}

void PlayerRelationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRelationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRelationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRelationData_descriptor_;
}

const PlayerRelationData& PlayerRelationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerRelationData* PlayerRelationData::default_instance_ = NULL;

PlayerRelationData* PlayerRelationData::New() const {
  return new PlayerRelationData;
}

void PlayerRelationData::Clear() {
  friend__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRelationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Relation friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRelationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Relation friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRelationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Relation friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRelationData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.Relation friend = 1;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRelationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRelationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRelationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRelationData::MergeFrom(const PlayerRelationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRelationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRelationData::CopyFrom(const PlayerRelationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRelationData::IsInitialized() const {
  
  for (int i = 0; i < friend__size(); i++) {
    if (!this->friend_(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerRelationData::Swap(PlayerRelationData* other) {
  if (other != this) {
    friend__.Swap(&other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRelationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRelationData_descriptor_;
  metadata.reflection = PlayerRelationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInfo::kInstanceIdFieldNumber;
const int InstanceInfo::kGradeFieldNumber;
#endif  // !_MSC_VER

InstanceInfo::InstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfo::InitAsDefaultInstance() {
}

InstanceInfo::InstanceInfo(const InstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfo::~InstanceInfo() {
  SharedDtor();
}

void InstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfo_descriptor_;
}

const InstanceInfo& InstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceInfo* InstanceInfo::default_instance_ = NULL;

InstanceInfo* InstanceInfo::New() const {
  return new InstanceInfo;
}

void InstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfo::MergeFrom(const InstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfo::CopyFrom(const InstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfo::IsInitialized() const {
  
  return true;
}

void InstanceInfo::Swap(InstanceInfo* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfo_descriptor_;
  metadata.reflection = InstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceDetail::kInstanceIdFieldNumber;
const int InstanceDetail::kGradeFieldNumber;
const int InstanceDetail::kMapIdFieldNumber;
const int InstanceDetail::kMapXFieldNumber;
const int InstanceDetail::kMapYFieldNumber;
const int InstanceDetail::kMonsterListFieldNumber;
const int InstanceDetail::kKilledListFieldNumber;
const int InstanceDetail::kLastTransportIdFieldNumber;
#endif  // !_MSC_VER

InstanceDetail::InstanceDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceDetail::InitAsDefaultInstance() {
}

InstanceDetail::InstanceDetail(const InstanceDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceDetail::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  grade_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  last_transport_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceDetail::~InstanceDetail() {
  SharedDtor();
}

void InstanceDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceDetail_descriptor_;
}

const InstanceDetail& InstanceDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceDetail* InstanceDetail::default_instance_ = NULL;

InstanceDetail* InstanceDetail::New() const {
  return new InstanceDetail;
}

void InstanceDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    grade_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
    last_transport_id_ = 0;
  }
  monster_list_.Clear();
  killed_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_list;
        break;
      }
      
      // repeated int32 monster_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_monster_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_list;
        if (input->ExpectTag(56)) goto parse_killed_list;
        break;
      }
      
      // repeated int32 killed_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_killed_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_killed_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_killed_list;
        if (input->ExpectTag(64)) goto parse_last_transport_id;
        break;
      }
      
      // optional int32 last_transport_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_transport_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_transport_id_)));
          set_has_last_transport_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  // repeated int32 monster_list = 6;
  for (int i = 0; i < this->monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->monster_list(i), output);
  }
  
  // repeated int32 killed_list = 7;
  for (int i = 0; i < this->killed_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->killed_list(i), output);
  }
  
  // optional int32 last_transport_id = 8;
  if (has_last_transport_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_transport_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  // repeated int32 monster_list = 6;
  for (int i = 0; i < this->monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->monster_list(i), target);
  }
  
  // repeated int32 killed_list = 7;
  for (int i = 0; i < this->killed_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->killed_list(i), target);
  }
  
  // optional int32 last_transport_id = 8;
  if (has_last_transport_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_transport_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 last_transport_id = 8;
    if (has_last_transport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_transport_id());
    }
    
  }
  // repeated int32 monster_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_list(i));
    }
    total_size += 1 * this->monster_list_size() + data_size;
  }
  
  // repeated int32 killed_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->killed_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->killed_list(i));
    }
    total_size += 1 * this->killed_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceDetail::MergeFrom(const InstanceDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_list_.MergeFrom(from.monster_list_);
  killed_list_.MergeFrom(from.killed_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_last_transport_id()) {
      set_last_transport_id(from.last_transport_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceDetail::CopyFrom(const InstanceDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceDetail::IsInitialized() const {
  
  return true;
}

void InstanceDetail::Swap(InstanceDetail* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(grade_, other->grade_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    monster_list_.Swap(&other->monster_list_);
    killed_list_.Swap(&other->killed_list_);
    std::swap(last_transport_id_, other->last_transport_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceDetail_descriptor_;
  metadata.reflection = InstanceDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterInfo::kGuidFieldNumber;
const int MonsterInfo::kNameFieldNumber;
const int MonsterInfo::kHpFieldNumber;
const int MonsterInfo::kLevelFieldNumber;
const int MonsterInfo::kDropIdFieldNumber;
const int MonsterInfo::kExpFieldNumber;
const int MonsterInfo::kModelIdFieldNumber;
const int MonsterInfo::kIconIdFieldNumber;
#endif  // !_MSC_VER

MonsterInfo::MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterInfo::InitAsDefaultInstance() {
}

MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  level_ = 0;
  drop_id_ = 0;
  exp_ = 0;
  model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterInfo::~MonsterInfo() {
  SharedDtor();
}

void MonsterInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (icon_id_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_id_;
  }
  if (this != default_instance_) {
  }
}

void MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterInfo_descriptor_;
}

const MonsterInfo& MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

MonsterInfo* MonsterInfo::default_instance_ = NULL;

MonsterInfo* MonsterInfo::New() const {
  return new MonsterInfo;
}

void MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0;
    level_ = 0;
    drop_id_ = 0;
    exp_ = 0;
    if (has_model_id()) {
      if (model_id_ != &::google::protobuf::internal::kEmptyString) {
        model_id_->clear();
      }
    }
    if (has_icon_id()) {
      if (icon_id_ != &::google::protobuf::internal::kEmptyString) {
        icon_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }
      
      // required int32 hp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drop_id;
        break;
      }
      
      // optional int32 drop_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_model_id;
        break;
      }
      
      // optional bytes model_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon_id;
        break;
      }
      
      // optional bytes icon_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 hp = 3 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }
  
  // optional int32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 drop_id = 5 [default = 0];
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drop_id(), output);
  }
  
  // optional int32 exp = 6 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }
  
  // optional bytes model_id = 7;
  if (has_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->model_id(), output);
  }
  
  // optional bytes icon_id = 8;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->icon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 hp = 3 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }
  
  // optional int32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 drop_id = 5 [default = 0];
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drop_id(), target);
  }
  
  // optional int32 exp = 6 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }
  
  // optional bytes model_id = 7;
  if (has_model_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->model_id(), target);
  }
  
  // optional bytes icon_id = 8;
  if (has_icon_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->icon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 hp = 3 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 drop_id = 5 [default = 0];
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_id());
    }
    
    // optional int32 exp = 6 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional bytes model_id = 7;
    if (has_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_id());
    }
    
    // optional bytes icon_id = 8;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_model_id()) {
      set_model_id(from.model_id());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MonsterInfo::Swap(MonsterInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(exp_, other->exp_);
    std::swap(model_id_, other->model_id_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterInfo_descriptor_;
  metadata.reflection = MonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kItemIdFieldNumber;
const int EquipInfo::kPositionFieldNumber;
const int EquipInfo::kStrengthLevelFieldNumber;
const int EquipInfo::kMarkFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  strength_level_ = 0;
  mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    strength_level_ = 0;
    mark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional .protocols.common.EquipPosition position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::EquipPosition_IsValid(value)) {
            set_position(static_cast< protocols::common::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional .protocols.common.EquipPosition position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strength_level(), output);
  }
  
  // optional int32 mark = 4;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional .protocols.common.EquipPosition position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strength_level(), target);
  }
  
  // optional int32 mark = 4;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional .protocols.common.EquipPosition position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }
    
    // optional int32 strength_level = 3 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 mark = 4;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(position_, other->position_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttributeData::kKeyFieldNumber;
const int AttributeData::kValueFieldNumber;
#endif  // !_MSC_VER

AttributeData::AttributeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttributeData::InitAsDefaultInstance() {
}

AttributeData::AttributeData(const AttributeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttributeData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributeData::~AttributeData() {
  SharedDtor();
}

void AttributeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttributeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeData_descriptor_;
}

const AttributeData& AttributeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

AttributeData* AttributeData::default_instance_ = NULL;

AttributeData* AttributeData::New() const {
  return new AttributeData;
}

void AttributeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttributeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttributeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttributeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttributeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttributeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttributeData::MergeFrom(const AttributeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttributeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeData::CopyFrom(const AttributeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeData::IsInitialized() const {
  
  return true;
}

void AttributeData::Swap(AttributeData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttributeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttributeData_descriptor_;
  metadata.reflection = AttributeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDetail::kItemIdFieldNumber;
const int EquipDetail::kExpiredFieldNumber;
const int EquipDetail::kStrengthLevelFieldNumber;
const int EquipDetail::kSlotCountFieldNumber;
const int EquipDetail::kAttrListFieldNumber;
const int EquipDetail::kBindFlagFieldNumber;
const int EquipDetail::kExtraAttrListFieldNumber;
const int EquipDetail::kStrengthAttrListFieldNumber;
const int EquipDetail::kMarkFieldNumber;
const int EquipDetail::kStoneAttrListFieldNumber;
const int EquipDetail::kLockedAttrBitsFieldNumber;
const int EquipDetail::kStoneDataFieldNumber;
#endif  // !_MSC_VER

EquipDetail::EquipDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDetail::InitAsDefaultInstance() {
  stone_data_ = const_cast< ::protocols::common::EquipStoneData*>(&::protocols::common::EquipStoneData::default_instance());
}

EquipDetail::EquipDetail(const EquipDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDetail::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  expired_ = 0;
  strength_level_ = 0;
  slot_count_ = 0;
  bind_flag_ = 0;
  mark_ = 0;
  locked_attr_bits_ = 0;
  stone_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDetail::~EquipDetail() {
  SharedDtor();
}

void EquipDetail::SharedDtor() {
  if (this != default_instance_) {
    delete stone_data_;
  }
}

void EquipDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDetail_descriptor_;
}

const EquipDetail& EquipDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipDetail* EquipDetail::default_instance_ = NULL;

EquipDetail* EquipDetail::New() const {
  return new EquipDetail;
}

void EquipDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    expired_ = 0;
    strength_level_ = 0;
    slot_count_ = 0;
    bind_flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mark_ = 0;
    locked_attr_bits_ = 0;
    if (has_stone_data()) {
      if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
    }
  }
  attr_list_.Clear();
  extra_attr_list_.Clear();
  strength_attr_list_.Clear();
  stone_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_count;
        break;
      }
      
      // optional int32 slot_count = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_count_)));
          set_has_slot_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData attr_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_list;
        if (input->ExpectTag(48)) goto parse_bind_flag;
        break;
      }
      
      // optional int32 bind_flag = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_flag_)));
          set_has_bind_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extra_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData extra_attr_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extra_attr_list;
        if (input->ExpectTag(74)) goto parse_strength_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData strength_attr_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strength_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strength_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strength_attr_list;
        if (input->ExpectTag(80)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stone_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData stone_attr_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stone_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stone_attr_list;
        if (input->ExpectTag(96)) goto parse_locked_attr_bits;
        break;
      }
      
      // optional int32 locked_attr_bits = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_attr_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_attr_bits_)));
          set_has_locked_attr_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_stone_data;
        break;
      }
      
      // optional .protocols.common.EquipStoneData stone_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expired(), output);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strength_level(), output);
  }
  
  // optional int32 slot_count = 4 [default = 0];
  if (has_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot_count(), output);
  }
  
  // repeated .protocols.common.AttributeData attr_list = 5;
  for (int i = 0; i < this->attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr_list(i), output);
  }
  
  // optional int32 bind_flag = 6 [default = 0];
  if (has_bind_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bind_flag(), output);
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extra_attr_list(i), output);
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->strength_attr_list(i), output);
  }
  
  // optional int32 mark = 10;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mark(), output);
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stone_attr_list(i), output);
  }
  
  // optional int32 locked_attr_bits = 12;
  if (has_locked_attr_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->locked_attr_bits(), output);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 13;
  if (has_stone_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stone_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expired(), target);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strength_level(), target);
  }
  
  // optional int32 slot_count = 4 [default = 0];
  if (has_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot_count(), target);
  }
  
  // repeated .protocols.common.AttributeData attr_list = 5;
  for (int i = 0; i < this->attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr_list(i), target);
  }
  
  // optional int32 bind_flag = 6 [default = 0];
  if (has_bind_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bind_flag(), target);
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extra_attr_list(i), target);
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->strength_attr_list(i), target);
  }
  
  // optional int32 mark = 10;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mark(), target);
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->stone_attr_list(i), target);
  }
  
  // optional int32 locked_attr_bits = 12;
  if (has_locked_attr_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->locked_attr_bits(), target);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 13;
  if (has_stone_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stone_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 expired = 2 [default = 0];
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
    // optional int32 strength_level = 3 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 slot_count = 4 [default = 0];
    if (has_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_count());
    }
    
    // optional int32 bind_flag = 6 [default = 0];
    if (has_bind_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_flag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mark = 10;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
    // optional int32 locked_attr_bits = 12;
    if (has_locked_attr_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked_attr_bits());
    }
    
    // optional .protocols.common.EquipStoneData stone_data = 13;
    if (has_stone_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stone_data());
    }
    
  }
  // repeated .protocols.common.AttributeData attr_list = 5;
  total_size += 1 * this->attr_list_size();
  for (int i = 0; i < this->attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  total_size += 1 * this->extra_attr_list_size();
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  total_size += 1 * this->strength_attr_list_size();
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strength_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  total_size += 1 * this->stone_attr_list_size();
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stone_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipDetail::MergeFrom(const EquipDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_list_.MergeFrom(from.attr_list_);
  extra_attr_list_.MergeFrom(from.extra_attr_list_);
  strength_attr_list_.MergeFrom(from.strength_attr_list_);
  stone_attr_list_.MergeFrom(from.stone_attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_slot_count()) {
      set_slot_count(from.slot_count());
    }
    if (from.has_bind_flag()) {
      set_bind_flag(from.bind_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_locked_attr_bits()) {
      set_locked_attr_bits(from.locked_attr_bits());
    }
    if (from.has_stone_data()) {
      mutable_stone_data()->::protocols::common::EquipStoneData::MergeFrom(from.stone_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDetail::CopyFrom(const EquipDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipDetail::Swap(EquipDetail* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(expired_, other->expired_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(slot_count_, other->slot_count_);
    attr_list_.Swap(&other->attr_list_);
    std::swap(bind_flag_, other->bind_flag_);
    extra_attr_list_.Swap(&other->extra_attr_list_);
    strength_attr_list_.Swap(&other->strength_attr_list_);
    std::swap(mark_, other->mark_);
    stone_attr_list_.Swap(&other->stone_attr_list_);
    std::swap(locked_attr_bits_, other->locked_attr_bits_);
    std::swap(stone_data_, other->stone_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDetail_descriptor_;
  metadata.reflection = EquipDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStoneData_StoneData::kSlotIndexFieldNumber;
const int EquipStoneData_StoneData::kStoneIdFieldNumber;
#endif  // !_MSC_VER

EquipStoneData_StoneData::EquipStoneData_StoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoneData_StoneData::InitAsDefaultInstance() {
}

EquipStoneData_StoneData::EquipStoneData_StoneData(const EquipStoneData_StoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoneData_StoneData::SharedCtor() {
  _cached_size_ = 0;
  slot_index_ = 0;
  stone_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoneData_StoneData::~EquipStoneData_StoneData() {
  SharedDtor();
}

void EquipStoneData_StoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoneData_StoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoneData_StoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoneData_StoneData_descriptor_;
}

const EquipStoneData_StoneData& EquipStoneData_StoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipStoneData_StoneData* EquipStoneData_StoneData::default_instance_ = NULL;

EquipStoneData_StoneData* EquipStoneData_StoneData::New() const {
  return new EquipStoneData_StoneData;
}

void EquipStoneData_StoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_index_ = 0;
    stone_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoneData_StoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_id;
        break;
      }
      
      // optional int32 stone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_id_)));
          set_has_stone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoneData_StoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_index = 1;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_index(), output);
  }
  
  // optional int32 stone_id = 2;
  if (has_stone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoneData_StoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_index = 1;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_index(), target);
  }
  
  // optional int32 stone_id = 2;
  if (has_stone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoneData_StoneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_index = 1;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_index());
    }
    
    // optional int32 stone_id = 2;
    if (has_stone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoneData_StoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoneData_StoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoneData_StoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoneData_StoneData::MergeFrom(const EquipStoneData_StoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
    if (from.has_stone_id()) {
      set_stone_id(from.stone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoneData_StoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoneData_StoneData::CopyFrom(const EquipStoneData_StoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoneData_StoneData::IsInitialized() const {
  
  return true;
}

void EquipStoneData_StoneData::Swap(EquipStoneData_StoneData* other) {
  if (other != this) {
    std::swap(slot_index_, other->slot_index_);
    std::swap(stone_id_, other->stone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoneData_StoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoneData_StoneData_descriptor_;
  metadata.reflection = EquipStoneData_StoneData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipStoneData::kStoneDataFieldNumber;
const int EquipStoneData::kCurSocketCountFieldNumber;
const int EquipStoneData::kMaxSocketCountFieldNumber;
const int EquipStoneData::kStrengthClientChanceFieldNumber;
#endif  // !_MSC_VER

EquipStoneData::EquipStoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoneData::InitAsDefaultInstance() {
}

EquipStoneData::EquipStoneData(const EquipStoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoneData::SharedCtor() {
  _cached_size_ = 0;
  cur_socket_count_ = 0;
  max_socket_count_ = 0;
  strength_client_chance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoneData::~EquipStoneData() {
  SharedDtor();
}

void EquipStoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoneData_descriptor_;
}

const EquipStoneData& EquipStoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipStoneData* EquipStoneData::default_instance_ = NULL;

EquipStoneData* EquipStoneData::New() const {
  return new EquipStoneData;
}

void EquipStoneData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_socket_count_ = 0;
    max_socket_count_ = 0;
    strength_client_chance_ = 0;
  }
  stone_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stone_data;
        if (input->ExpectTag(24)) goto parse_cur_socket_count;
        break;
      }
      
      // optional int32 cur_socket_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_socket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_socket_count_)));
          set_has_cur_socket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_socket_count;
        break;
      }
      
      // optional int32 max_socket_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_socket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_socket_count_)));
          set_has_max_socket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strength_client_chance;
        break;
      }
      
      // optional int32 strength_client_chance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_client_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_client_chance_)));
          set_has_strength_client_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  for (int i = 0; i < this->stone_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stone_data(i), output);
  }
  
  // optional int32 cur_socket_count = 3;
  if (has_cur_socket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_socket_count(), output);
  }
  
  // optional int32 max_socket_count = 4;
  if (has_max_socket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_socket_count(), output);
  }
  
  // optional int32 strength_client_chance = 5;
  if (has_strength_client_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strength_client_chance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  for (int i = 0; i < this->stone_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stone_data(i), target);
  }
  
  // optional int32 cur_socket_count = 3;
  if (has_cur_socket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_socket_count(), target);
  }
  
  // optional int32 max_socket_count = 4;
  if (has_max_socket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_socket_count(), target);
  }
  
  // optional int32 strength_client_chance = 5;
  if (has_strength_client_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strength_client_chance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 cur_socket_count = 3;
    if (has_cur_socket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_socket_count());
    }
    
    // optional int32 max_socket_count = 4;
    if (has_max_socket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_socket_count());
    }
    
    // optional int32 strength_client_chance = 5;
    if (has_strength_client_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_client_chance());
    }
    
  }
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  total_size += 1 * this->stone_data_size();
  for (int i = 0; i < this->stone_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stone_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoneData::MergeFrom(const EquipStoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stone_data_.MergeFrom(from.stone_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_socket_count()) {
      set_cur_socket_count(from.cur_socket_count());
    }
    if (from.has_max_socket_count()) {
      set_max_socket_count(from.max_socket_count());
    }
    if (from.has_strength_client_chance()) {
      set_strength_client_chance(from.strength_client_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoneData::CopyFrom(const EquipStoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoneData::IsInitialized() const {
  
  return true;
}

void EquipStoneData::Swap(EquipStoneData* other) {
  if (other != this) {
    stone_data_.Swap(&other->stone_data_);
    std::swap(cur_socket_count_, other->cur_socket_count_);
    std::swap(max_socket_count_, other->max_socket_count_);
    std::swap(strength_client_chance_, other->strength_client_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoneData_descriptor_;
  metadata.reflection = EquipStoneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBSlotData::kLockedAttrBitsFieldNumber;
const int DBSlotData::kStoneDataFieldNumber;
const int DBSlotData::kSocketNumFieldNumber;
const int DBSlotData::kStrengthFailNumFieldNumber;
const int DBSlotData::kStrengthChanceFieldNumber;
const int DBSlotData::kStrengthClientChanceFieldNumber;
#endif  // !_MSC_VER

DBSlotData::DBSlotData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBSlotData::InitAsDefaultInstance() {
  stone_data_ = const_cast< ::protocols::common::EquipStoneData*>(&::protocols::common::EquipStoneData::default_instance());
}

DBSlotData::DBSlotData(const DBSlotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBSlotData::SharedCtor() {
  _cached_size_ = 0;
  locked_attr_bits_ = 0;
  stone_data_ = NULL;
  socket_num_ = 0;
  strength_fail_num_ = 0;
  strength_chance_ = 0;
  strength_client_chance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBSlotData::~DBSlotData() {
  SharedDtor();
}

void DBSlotData::SharedDtor() {
  if (this != default_instance_) {
    delete stone_data_;
  }
}

void DBSlotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBSlotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBSlotData_descriptor_;
}

const DBSlotData& DBSlotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DBSlotData* DBSlotData::default_instance_ = NULL;

DBSlotData* DBSlotData::New() const {
  return new DBSlotData;
}

void DBSlotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    locked_attr_bits_ = 0;
    if (has_stone_data()) {
      if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
    }
    socket_num_ = 0;
    strength_fail_num_ = 0;
    strength_chance_ = 0;
    strength_client_chance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBSlotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 locked_attr_bits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_attr_bits_)));
          set_has_locked_attr_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stone_data;
        break;
      }
      
      // optional .protocols.common.EquipStoneData stone_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_socket_num;
        break;
      }
      
      // optional int32 socket_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socket_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_num_)));
          set_has_socket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strength_fail_num;
        break;
      }
      
      // optional int32 strength_fail_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_fail_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_fail_num_)));
          set_has_strength_fail_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strength_chance;
        break;
      }
      
      // optional int32 strength_chance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_chance_)));
          set_has_strength_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strength_client_chance;
        break;
      }
      
      // optional int32 strength_client_chance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_client_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_client_chance_)));
          set_has_strength_client_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBSlotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 locked_attr_bits = 1;
  if (has_locked_attr_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->locked_attr_bits(), output);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 2;
  if (has_stone_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stone_data(), output);
  }
  
  // optional int32 socket_num = 3;
  if (has_socket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socket_num(), output);
  }
  
  // optional int32 strength_fail_num = 4;
  if (has_strength_fail_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strength_fail_num(), output);
  }
  
  // optional int32 strength_chance = 5;
  if (has_strength_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strength_chance(), output);
  }
  
  // optional int32 strength_client_chance = 6;
  if (has_strength_client_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strength_client_chance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBSlotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 locked_attr_bits = 1;
  if (has_locked_attr_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->locked_attr_bits(), target);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 2;
  if (has_stone_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stone_data(), target);
  }
  
  // optional int32 socket_num = 3;
  if (has_socket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socket_num(), target);
  }
  
  // optional int32 strength_fail_num = 4;
  if (has_strength_fail_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->strength_fail_num(), target);
  }
  
  // optional int32 strength_chance = 5;
  if (has_strength_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strength_chance(), target);
  }
  
  // optional int32 strength_client_chance = 6;
  if (has_strength_client_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strength_client_chance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBSlotData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 locked_attr_bits = 1;
    if (has_locked_attr_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked_attr_bits());
    }
    
    // optional .protocols.common.EquipStoneData stone_data = 2;
    if (has_stone_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stone_data());
    }
    
    // optional int32 socket_num = 3;
    if (has_socket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_num());
    }
    
    // optional int32 strength_fail_num = 4;
    if (has_strength_fail_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_fail_num());
    }
    
    // optional int32 strength_chance = 5;
    if (has_strength_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_chance());
    }
    
    // optional int32 strength_client_chance = 6;
    if (has_strength_client_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_client_chance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBSlotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBSlotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBSlotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBSlotData::MergeFrom(const DBSlotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locked_attr_bits()) {
      set_locked_attr_bits(from.locked_attr_bits());
    }
    if (from.has_stone_data()) {
      mutable_stone_data()->::protocols::common::EquipStoneData::MergeFrom(from.stone_data());
    }
    if (from.has_socket_num()) {
      set_socket_num(from.socket_num());
    }
    if (from.has_strength_fail_num()) {
      set_strength_fail_num(from.strength_fail_num());
    }
    if (from.has_strength_chance()) {
      set_strength_chance(from.strength_chance());
    }
    if (from.has_strength_client_chance()) {
      set_strength_client_chance(from.strength_client_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBSlotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSlotData::CopyFrom(const DBSlotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSlotData::IsInitialized() const {
  
  return true;
}

void DBSlotData::Swap(DBSlotData* other) {
  if (other != this) {
    std::swap(locked_attr_bits_, other->locked_attr_bits_);
    std::swap(stone_data_, other->stone_data_);
    std::swap(socket_num_, other->socket_num_);
    std::swap(strength_fail_num_, other->strength_fail_num_);
    std::swap(strength_chance_, other->strength_chance_);
    std::swap(strength_client_chance_, other->strength_client_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBSlotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBSlotData_descriptor_;
  metadata.reflection = DBSlotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FighterInfo::kGuidFieldNumber;
const int FighterInfo::kBattleIndexFieldNumber;
#endif  // !_MSC_VER

FighterInfo::FighterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FighterInfo::InitAsDefaultInstance() {
}

FighterInfo::FighterInfo(const FighterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FighterInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  battle_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FighterInfo::~FighterInfo() {
  SharedDtor();
}

void FighterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FighterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FighterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FighterInfo_descriptor_;
}

const FighterInfo& FighterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

FighterInfo* FighterInfo::default_instance_ = NULL;

FighterInfo* FighterInfo::New() const {
  return new FighterInfo;
}

void FighterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    battle_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FighterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_index;
        break;
      }
      
      // required int32 battle_index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FighterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 battle_index = 2 [default = 0];
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FighterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 battle_index = 2 [default = 0];
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FighterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 battle_index = 2 [default = 0];
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FighterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FighterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FighterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FighterInfo::MergeFrom(const FighterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FighterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FighterInfo::CopyFrom(const FighterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FighterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FighterInfo::Swap(FighterInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(battle_index_, other->battle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FighterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FighterInfo_descriptor_;
  metadata.reflection = FighterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineupInfo::kLineupIdFieldNumber;
const int LineupInfo::kLineupNameFieldNumber;
const int LineupInfo::kBattleSkillIdFieldNumber;
const int LineupInfo::kFighterFieldNumber;
const int LineupInfo::kLineupFightCapacityFieldNumber;
#endif  // !_MSC_VER

LineupInfo::LineupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineupInfo::InitAsDefaultInstance() {
}

LineupInfo::LineupInfo(const LineupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineupInfo::SharedCtor() {
  _cached_size_ = 0;
  lineup_id_ = 0;
  lineup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lineup_fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineupInfo::~LineupInfo() {
  SharedDtor();
}

void LineupInfo::SharedDtor() {
  if (lineup_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lineup_name_;
  }
  if (this != default_instance_) {
  }
}

void LineupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineupInfo_descriptor_;
}

const LineupInfo& LineupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

LineupInfo* LineupInfo::default_instance_ = NULL;

LineupInfo* LineupInfo::New() const {
  return new LineupInfo;
}

void LineupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineup_id_ = 0;
    if (has_lineup_name()) {
      if (lineup_name_ != &::google::protobuf::internal::kEmptyString) {
        lineup_name_->clear();
      }
    }
    lineup_fight_capacity_ = 0;
  }
  battle_skill_id_.Clear();
  fighter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lineup_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_id_)));
          set_has_lineup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lineup_name;
        break;
      }
      
      // required string lineup_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lineup_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lineup_name().data(), this->lineup_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_id;
        break;
      }
      
      // repeated int32 battle_skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_battle_skill_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battle_skill_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_id;
        if (input->ExpectTag(34)) goto parse_fighter;
        break;
      }
      
      // repeated .protocols.common.FighterInfo fighter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fighter;
        if (input->ExpectTag(40)) goto parse_lineup_fight_capacity;
        break;
      }
      
      // optional int32 lineup_fight_capacity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_fight_capacity_)));
          set_has_lineup_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineup_id(), output);
  }
  
  // required string lineup_name = 2;
  if (has_lineup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lineup_name().data(), this->lineup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lineup_name(), output);
  }
  
  // repeated int32 battle_skill_id = 3;
  for (int i = 0; i < this->battle_skill_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->battle_skill_id(i), output);
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  for (int i = 0; i < this->fighter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fighter(i), output);
  }
  
  // optional int32 lineup_fight_capacity = 5;
  if (has_lineup_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lineup_fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineup_id(), target);
  }
  
  // required string lineup_name = 2;
  if (has_lineup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lineup_name().data(), this->lineup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lineup_name(), target);
  }
  
  // repeated int32 battle_skill_id = 3;
  for (int i = 0; i < this->battle_skill_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->battle_skill_id(i), target);
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  for (int i = 0; i < this->fighter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fighter(i), target);
  }
  
  // optional int32 lineup_fight_capacity = 5;
  if (has_lineup_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lineup_fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineupInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lineup_id = 1;
    if (has_lineup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_id());
    }
    
    // required string lineup_name = 2;
    if (has_lineup_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lineup_name());
    }
    
    // optional int32 lineup_fight_capacity = 5;
    if (has_lineup_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_fight_capacity());
    }
    
  }
  // repeated int32 battle_skill_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->battle_skill_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->battle_skill_id(i));
    }
    total_size += 1 * this->battle_skill_id_size() + data_size;
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  total_size += 1 * this->fighter_size();
  for (int i = 0; i < this->fighter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineupInfo::MergeFrom(const LineupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_skill_id_.MergeFrom(from.battle_skill_id_);
  fighter_.MergeFrom(from.fighter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineup_id()) {
      set_lineup_id(from.lineup_id());
    }
    if (from.has_lineup_name()) {
      set_lineup_name(from.lineup_name());
    }
    if (from.has_lineup_fight_capacity()) {
      set_lineup_fight_capacity(from.lineup_fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineupInfo::CopyFrom(const LineupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fighter_size(); i++) {
    if (!this->fighter(i).IsInitialized()) return false;
  }
  return true;
}

void LineupInfo::Swap(LineupInfo* other) {
  if (other != this) {
    std::swap(lineup_id_, other->lineup_id_);
    std::swap(lineup_name_, other->lineup_name_);
    battle_skill_id_.Swap(&other->battle_skill_id_);
    fighter_.Swap(&other->fighter_);
    std::swap(lineup_fight_capacity_, other->lineup_fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineupInfo_descriptor_;
  metadata.reflection = LineupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money1::kMoneyTypeFieldNumber;
const int Money1::kNumFieldNumber;
#endif  // !_MSC_VER

Money1::Money1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money1::InitAsDefaultInstance() {
}

Money1::Money1(const Money1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money1::SharedCtor() {
  _cached_size_ = 0;
  money_type_ = 1;
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money1::~Money1() {
  SharedDtor();
}

void Money1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Money1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money1_descriptor_;
}

const Money1& Money1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Money1* Money1::default_instance_ = NULL;

Money1* Money1::New() const {
  return new Money1;
}

void Money1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_type_ = 1;
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.MONEY_TYPE money_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::MONEY_TYPE_IsValid(value)) {
            set_money_type(static_cast< protocols::common::MONEY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.MONEY_TYPE money_type = 1;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->money_type(), output);
  }
  
  // required int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.MONEY_TYPE money_type = 1;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->money_type(), target);
  }
  
  // required int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.MONEY_TYPE money_type = 1;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->money_type());
    }
    
    // required int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money1::MergeFrom(const Money1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money1::CopyFrom(const Money1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Money1::Swap(Money1* other) {
  if (other != this) {
    std::swap(money_type_, other->money_type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money1_descriptor_;
  metadata.reflection = Money1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money::kMoneyFieldNumber;
#endif  // !_MSC_VER

Money::Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money::InitAsDefaultInstance() {
}

Money::Money(const Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money::~Money() {
  SharedDtor();
}

void Money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money_descriptor_;
}

const Money& Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Money* Money::default_instance_ = NULL;

Money* Money::New() const {
  return new Money;
}

void Money::Clear() {
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Money1 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_money;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Money1 money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->money(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Money1 money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->money(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.Money1 money = 1;
  total_size += 1 * this->money_size();
  for (int i = 0; i < this->money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  
  for (int i = 0; i < money_size(); i++) {
    if (!this->money(i).IsInitialized()) return false;
  }
  return true;
}

void Money::Swap(Money* other) {
  if (other != this) {
    money_.Swap(&other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money_descriptor_;
  metadata.reflection = Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestAction::kActionTypeFieldNumber;
const int QuestAction::kActionParamFieldNumber;
#endif  // !_MSC_VER

QuestAction::QuestAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestAction::InitAsDefaultInstance() {
}

QuestAction::QuestAction(const QuestAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestAction::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestAction::~QuestAction() {
  SharedDtor();
}

void QuestAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestAction_descriptor_;
}

const QuestAction& QuestAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestAction* QuestAction::default_instance_ = NULL;

QuestAction* QuestAction::New() const {
  return new QuestAction;
}

void QuestAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_type_ = 0;
  }
  action_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.QuestActionType action_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestActionType_IsValid(value)) {
            set_action_type(static_cast< protocols::common::QuestActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        break;
      }
      
      // repeated int32 action_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_action_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.QuestActionType action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }
  
  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->action_param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.QuestActionType action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }
  
  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->action_param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.QuestActionType action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }
    
  }
  // repeated int32 action_param = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_param(i));
    }
    total_size += 1 * this->action_param_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestAction::MergeFrom(const QuestAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_param_.MergeFrom(from.action_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestAction::CopyFrom(const QuestAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestAction::IsInitialized() const {
  
  return true;
}

void QuestAction::Swap(QuestAction* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    action_param_.Swap(&other->action_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestAction_descriptor_;
  metadata.reflection = QuestAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestActionsPb::kActionsFieldNumber;
#endif  // !_MSC_VER

QuestActionsPb::QuestActionsPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestActionsPb::InitAsDefaultInstance() {
}

QuestActionsPb::QuestActionsPb(const QuestActionsPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestActionsPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestActionsPb::~QuestActionsPb() {
  SharedDtor();
}

void QuestActionsPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestActionsPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestActionsPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestActionsPb_descriptor_;
}

const QuestActionsPb& QuestActionsPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestActionsPb* QuestActionsPb::default_instance_ = NULL;

QuestActionsPb* QuestActionsPb::New() const {
  return new QuestActionsPb;
}

void QuestActionsPb::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestActionsPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.QuestAction actions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestActionsPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.QuestAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestActionsPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.QuestAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestActionsPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.QuestAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestActionsPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestActionsPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestActionsPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestActionsPb::MergeFrom(const QuestActionsPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestActionsPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestActionsPb::CopyFrom(const QuestActionsPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestActionsPb::IsInitialized() const {
  
  return true;
}

void QuestActionsPb::Swap(QuestActionsPb* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestActionsPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestActionsPb_descriptor_;
  metadata.reflection = QuestActionsPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPb::kQuestIdFieldNumber;
const int QuestPb::kQuestStatusFieldNumber;
const int QuestPb::kActionsFieldNumber;
const int QuestPb::kQuestTypeFieldNumber;
const int QuestPb::kRewardExpFieldNumber;
const int QuestPb::kRewardCoinFieldNumber;
const int QuestPb::kCircleIndexFieldNumber;
#endif  // !_MSC_VER

QuestPb::QuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestPb::InitAsDefaultInstance() {
  actions_ = const_cast< ::protocols::common::QuestActionsPb*>(&::protocols::common::QuestActionsPb::default_instance());
}

QuestPb::QuestPb(const QuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestPb::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quest_status_ = 0;
  actions_ = NULL;
  quest_type_ = 1;
  reward_exp_ = 0;
  reward_coin_ = 0;
  circle_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPb::~QuestPb() {
  SharedDtor();
}

void QuestPb::SharedDtor() {
  if (this != default_instance_) {
    delete actions_;
  }
}

void QuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPb_descriptor_;
}

const QuestPb& QuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestPb* QuestPb::default_instance_ = NULL;

QuestPb* QuestPb::New() const {
  return new QuestPb;
}

void QuestPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    quest_status_ = 0;
    if (has_actions()) {
      if (actions_ != NULL) actions_->::protocols::common::QuestActionsPb::Clear();
    }
    quest_type_ = 1;
    reward_exp_ = 0;
    reward_coin_ = 0;
    circle_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_status;
        break;
      }
      
      // optional .protocols.common.QuestStatus quest_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestStatus_IsValid(value)) {
            set_quest_status(static_cast< protocols::common::QuestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actions;
        break;
      }
      
      // optional .protocols.common.QuestActionsPb actions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quest_type;
        break;
      }
      
      // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestType_IsValid(value)) {
            set_quest_type(static_cast< protocols::common::QuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_exp;
        break;
      }
      
      // optional int32 reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_coin;
        break;
      }
      
      // optional int32 reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_coin_)));
          set_has_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_circle_index;
        break;
      }
      
      // optional int32 circle_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circle_index_)));
          set_has_circle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // optional .protocols.common.QuestStatus quest_status = 2;
  if (has_quest_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->quest_status(), output);
  }
  
  // optional .protocols.common.QuestActionsPb actions = 3;
  if (has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(), output);
  }
  
  // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quest_type(), output);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_exp(), output);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_coin(), output);
  }
  
  // optional int32 circle_index = 7;
  if (has_circle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->circle_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // optional .protocols.common.QuestStatus quest_status = 2;
  if (has_quest_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->quest_status(), target);
  }
  
  // optional .protocols.common.QuestActionsPb actions = 3;
  if (has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actions(), target);
  }
  
  // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->quest_type(), target);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_exp(), target);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_coin(), target);
  }
  
  // optional int32 circle_index = 7;
  if (has_circle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->circle_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // optional .protocols.common.QuestStatus quest_status = 2;
    if (has_quest_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_status());
    }
    
    // optional .protocols.common.QuestActionsPb actions = 3;
    if (has_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions());
    }
    
    // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_type());
    }
    
    // optional int32 reward_exp = 5;
    if (has_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp());
    }
    
    // optional int32 reward_coin = 6;
    if (has_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_coin());
    }
    
    // optional int32 circle_index = 7;
    if (has_circle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circle_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPb::MergeFrom(const QuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_status()) {
      set_quest_status(from.quest_status());
    }
    if (from.has_actions()) {
      mutable_actions()->::protocols::common::QuestActionsPb::MergeFrom(from.actions());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
    if (from.has_reward_coin()) {
      set_reward_coin(from.reward_coin());
    }
    if (from.has_circle_index()) {
      set_circle_index(from.circle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPb::CopyFrom(const QuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPb::IsInitialized() const {
  
  return true;
}

void QuestPb::Swap(QuestPb* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_status_, other->quest_status_);
    std::swap(actions_, other->actions_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(reward_coin_, other->reward_coin_);
    std::swap(circle_index_, other->circle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPb_descriptor_;
  metadata.reflection = QuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPreCondition::kPreQuestIdFieldNumber;
const int QuestPreCondition::kPlayerLevelMinFieldNumber;
const int QuestPreCondition::kPlayerLevelMaxFieldNumber;
const int QuestPreCondition::kStartTimeFieldNumber;
const int QuestPreCondition::kEndTimeFieldNumber;
const int QuestPreCondition::kRegionIdFieldNumber;
const int QuestPreCondition::kAutoAcceptFieldNumber;
const int QuestPreCondition::kProLimitFieldNumber;
const int QuestPreCondition::kPreQuestIdsFieldNumber;
const int QuestPreCondition::kPostQuestIdsFieldNumber;
const int QuestPreCondition::kAutoCommitFieldNumber;
const int QuestPreCondition::kCanBeCancelledFieldNumber;
const int QuestPreCondition::kDailyResetFieldNumber;
#endif  // !_MSC_VER

QuestPreCondition::QuestPreCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestPreCondition::InitAsDefaultInstance() {
}

QuestPreCondition::QuestPreCondition(const QuestPreCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestPreCondition::SharedCtor() {
  _cached_size_ = 0;
  pre_quest_id_ = 0;
  player_level_min_ = 1;
  player_level_max_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  region_id_ = GOOGLE_LONGLONG(0);
  auto_accept_ = false;
  pro_limit_ = 1;
  auto_commit_ = false;
  can_be_cancelled_ = false;
  daily_reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPreCondition::~QuestPreCondition() {
  SharedDtor();
}

void QuestPreCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestPreCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPreCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPreCondition_descriptor_;
}

const QuestPreCondition& QuestPreCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestPreCondition* QuestPreCondition::default_instance_ = NULL;

QuestPreCondition* QuestPreCondition::New() const {
  return new QuestPreCondition;
}

void QuestPreCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pre_quest_id_ = 0;
    player_level_min_ = 1;
    player_level_max_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    region_id_ = GOOGLE_LONGLONG(0);
    auto_accept_ = false;
    pro_limit_ = 1;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    auto_commit_ = false;
    can_be_cancelled_ = false;
    daily_reset_ = false;
  }
  pre_quest_ids_.Clear();
  post_quest_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPreCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pre_quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_quest_id_)));
          set_has_pre_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_level_min;
        break;
      }
      
      // optional int32 player_level_min = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_level_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_min_)));
          set_has_player_level_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_level_max;
        break;
      }
      
      // optional int32 player_level_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_level_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_max_)));
          set_has_player_level_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }
      
      // optional int64 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }
      
      // optional int64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_region_id;
        break;
      }
      
      // optional int64 region_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_accept;
        break;
      }
      
      // optional bool auto_accept = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_accept_)));
          set_has_auto_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pro_limit;
        break;
      }
      
      // optional .protocols.common.Profession pro_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_limit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_pro_limit(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pre_quest_ids;
        break;
      }
      
      // repeated int32 pre_quest_ids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_quest_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_pre_quest_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_quest_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pre_quest_ids;
        if (input->ExpectTag(80)) goto parse_post_quest_ids;
        break;
      }
      
      // repeated int32 post_quest_ids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_quest_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_post_quest_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_post_quest_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_post_quest_ids;
        if (input->ExpectTag(88)) goto parse_auto_commit;
        break;
      }
      
      // optional bool auto_commit = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_commit_)));
          set_has_auto_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_can_be_cancelled;
        break;
      }
      
      // optional bool can_be_cancelled = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_cancelled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_be_cancelled_)));
          set_has_can_be_cancelled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_daily_reset;
        break;
      }
      
      // optional bool daily_reset = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_reset_)));
          set_has_daily_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestPreCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pre_quest_id = 1;
  if (has_pre_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pre_quest_id(), output);
  }
  
  // optional int32 player_level_min = 2 [default = 1];
  if (has_player_level_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_level_min(), output);
  }
  
  // optional int32 player_level_max = 3;
  if (has_player_level_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_level_max(), output);
  }
  
  // optional int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }
  
  // optional int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }
  
  // optional int64 region_id = 6;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->region_id(), output);
  }
  
  // optional bool auto_accept = 7 [default = false];
  if (has_auto_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->auto_accept(), output);
  }
  
  // optional .protocols.common.Profession pro_limit = 8;
  if (has_pro_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pro_limit(), output);
  }
  
  // repeated int32 pre_quest_ids = 9;
  for (int i = 0; i < this->pre_quest_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pre_quest_ids(i), output);
  }
  
  // repeated int32 post_quest_ids = 10;
  for (int i = 0; i < this->post_quest_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->post_quest_ids(i), output);
  }
  
  // optional bool auto_commit = 11 [default = false];
  if (has_auto_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_commit(), output);
  }
  
  // optional bool can_be_cancelled = 12 [default = false];
  if (has_can_be_cancelled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_be_cancelled(), output);
  }
  
  // optional bool daily_reset = 13 [default = false];
  if (has_daily_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->daily_reset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestPreCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pre_quest_id = 1;
  if (has_pre_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pre_quest_id(), target);
  }
  
  // optional int32 player_level_min = 2 [default = 1];
  if (has_player_level_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_level_min(), target);
  }
  
  // optional int32 player_level_max = 3;
  if (has_player_level_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_level_max(), target);
  }
  
  // optional int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }
  
  // optional int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }
  
  // optional int64 region_id = 6;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->region_id(), target);
  }
  
  // optional bool auto_accept = 7 [default = false];
  if (has_auto_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->auto_accept(), target);
  }
  
  // optional .protocols.common.Profession pro_limit = 8;
  if (has_pro_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pro_limit(), target);
  }
  
  // repeated int32 pre_quest_ids = 9;
  for (int i = 0; i < this->pre_quest_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->pre_quest_ids(i), target);
  }
  
  // repeated int32 post_quest_ids = 10;
  for (int i = 0; i < this->post_quest_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->post_quest_ids(i), target);
  }
  
  // optional bool auto_commit = 11 [default = false];
  if (has_auto_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_commit(), target);
  }
  
  // optional bool can_be_cancelled = 12 [default = false];
  if (has_can_be_cancelled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_be_cancelled(), target);
  }
  
  // optional bool daily_reset = 13 [default = false];
  if (has_daily_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->daily_reset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestPreCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pre_quest_id = 1;
    if (has_pre_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_quest_id());
    }
    
    // optional int32 player_level_min = 2 [default = 1];
    if (has_player_level_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level_min());
    }
    
    // optional int32 player_level_max = 3;
    if (has_player_level_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level_max());
    }
    
    // optional int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }
    
    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }
    
    // optional int64 region_id = 6;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->region_id());
    }
    
    // optional bool auto_accept = 7 [default = false];
    if (has_auto_accept()) {
      total_size += 1 + 1;
    }
    
    // optional .protocols.common.Profession pro_limit = 8;
    if (has_pro_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pro_limit());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool auto_commit = 11 [default = false];
    if (has_auto_commit()) {
      total_size += 1 + 1;
    }
    
    // optional bool can_be_cancelled = 12 [default = false];
    if (has_can_be_cancelled()) {
      total_size += 1 + 1;
    }
    
    // optional bool daily_reset = 13 [default = false];
    if (has_daily_reset()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 pre_quest_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_quest_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_quest_ids(i));
    }
    total_size += 1 * this->pre_quest_ids_size() + data_size;
  }
  
  // repeated int32 post_quest_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->post_quest_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->post_quest_ids(i));
    }
    total_size += 1 * this->post_quest_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPreCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPreCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPreCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPreCondition::MergeFrom(const QuestPreCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_quest_ids_.MergeFrom(from.pre_quest_ids_);
  post_quest_ids_.MergeFrom(from.post_quest_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pre_quest_id()) {
      set_pre_quest_id(from.pre_quest_id());
    }
    if (from.has_player_level_min()) {
      set_player_level_min(from.player_level_min());
    }
    if (from.has_player_level_max()) {
      set_player_level_max(from.player_level_max());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_auto_accept()) {
      set_auto_accept(from.auto_accept());
    }
    if (from.has_pro_limit()) {
      set_pro_limit(from.pro_limit());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_auto_commit()) {
      set_auto_commit(from.auto_commit());
    }
    if (from.has_can_be_cancelled()) {
      set_can_be_cancelled(from.can_be_cancelled());
    }
    if (from.has_daily_reset()) {
      set_daily_reset(from.daily_reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPreCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPreCondition::CopyFrom(const QuestPreCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPreCondition::IsInitialized() const {
  
  return true;
}

void QuestPreCondition::Swap(QuestPreCondition* other) {
  if (other != this) {
    std::swap(pre_quest_id_, other->pre_quest_id_);
    std::swap(player_level_min_, other->player_level_min_);
    std::swap(player_level_max_, other->player_level_max_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(region_id_, other->region_id_);
    std::swap(auto_accept_, other->auto_accept_);
    std::swap(pro_limit_, other->pro_limit_);
    pre_quest_ids_.Swap(&other->pre_quest_ids_);
    post_quest_ids_.Swap(&other->post_quest_ids_);
    std::swap(auto_commit_, other->auto_commit_);
    std::swap(can_be_cancelled_, other->can_be_cancelled_);
    std::swap(daily_reset_, other->daily_reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPreCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPreCondition_descriptor_;
  metadata.reflection = QuestPreCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRewards_QuestRewardItem::kItemIdFieldNumber;
const int QuestRewards_QuestRewardItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

QuestRewards_QuestRewardItem::QuestRewards_QuestRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRewards_QuestRewardItem::InitAsDefaultInstance() {
}

QuestRewards_QuestRewardItem::QuestRewards_QuestRewardItem(const QuestRewards_QuestRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRewards_QuestRewardItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRewards_QuestRewardItem::~QuestRewards_QuestRewardItem() {
  SharedDtor();
}

void QuestRewards_QuestRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRewards_QuestRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRewards_QuestRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRewards_QuestRewardItem_descriptor_;
}

const QuestRewards_QuestRewardItem& QuestRewards_QuestRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestRewards_QuestRewardItem* QuestRewards_QuestRewardItem::default_instance_ = NULL;

QuestRewards_QuestRewardItem* QuestRewards_QuestRewardItem::New() const {
  return new QuestRewards_QuestRewardItem;
}

void QuestRewards_QuestRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRewards_QuestRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRewards_QuestRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRewards_QuestRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRewards_QuestRewardItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRewards_QuestRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRewards_QuestRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRewards_QuestRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRewards_QuestRewardItem::MergeFrom(const QuestRewards_QuestRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRewards_QuestRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRewards_QuestRewardItem::CopyFrom(const QuestRewards_QuestRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRewards_QuestRewardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QuestRewards_QuestRewardItem::Swap(QuestRewards_QuestRewardItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRewards_QuestRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRewards_QuestRewardItem_descriptor_;
  metadata.reflection = QuestRewards_QuestRewardItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QuestRewards::kExpFieldNumber;
const int QuestRewards::kCoinFieldNumber;
const int QuestRewards::kItemFieldNumber;
#endif  // !_MSC_VER

QuestRewards::QuestRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRewards::InitAsDefaultInstance() {
}

QuestRewards::QuestRewards(const QuestRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRewards::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRewards::~QuestRewards() {
  SharedDtor();
}

void QuestRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRewards_descriptor_;
}

const QuestRewards& QuestRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestRewards* QuestRewards::default_instance_ = NULL;

QuestRewards* QuestRewards::New() const {
  return new QuestRewards;
}

void QuestRewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    coin_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin(), output);
  }
  
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin(), target);
  }
  
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRewards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
  }
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRewards::MergeFrom(const QuestRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRewards::CopyFrom(const QuestRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRewards::IsInitialized() const {
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void QuestRewards::Swap(QuestRewards* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRewards_descriptor_;
  metadata.reflection = QuestRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestProtoype::kQuestIdFieldNumber;
const int QuestProtoype::kQuestNameFieldNumber;
const int QuestProtoype::kPreConditionFieldNumber;
const int QuestProtoype::kActionsFieldNumber;
const int QuestProtoype::kRewardsFieldNumber;
const int QuestProtoype::kQuestTypeFieldNumber;
#endif  // !_MSC_VER

QuestProtoype::QuestProtoype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestProtoype::InitAsDefaultInstance() {
  pre_condition_ = const_cast< ::protocols::common::QuestPreCondition*>(&::protocols::common::QuestPreCondition::default_instance());
  rewards_ = const_cast< ::protocols::common::QuestRewards*>(&::protocols::common::QuestRewards::default_instance());
}

QuestProtoype::QuestProtoype(const QuestProtoype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestProtoype::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pre_condition_ = NULL;
  rewards_ = NULL;
  quest_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestProtoype::~QuestProtoype() {
  SharedDtor();
}

void QuestProtoype::SharedDtor() {
  if (quest_name_ != &::google::protobuf::internal::kEmptyString) {
    delete quest_name_;
  }
  if (this != default_instance_) {
    delete pre_condition_;
    delete rewards_;
  }
}

void QuestProtoype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestProtoype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestProtoype_descriptor_;
}

const QuestProtoype& QuestProtoype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestProtoype* QuestProtoype::default_instance_ = NULL;

QuestProtoype* QuestProtoype::New() const {
  return new QuestProtoype;
}

void QuestProtoype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    if (has_quest_name()) {
      if (quest_name_ != &::google::protobuf::internal::kEmptyString) {
        quest_name_->clear();
      }
    }
    if (has_pre_condition()) {
      if (pre_condition_ != NULL) pre_condition_->::protocols::common::QuestPreCondition::Clear();
    }
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::protocols::common::QuestRewards::Clear();
    }
    quest_type_ = 1;
  }
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestProtoype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest_name;
        break;
      }
      
      // optional bytes quest_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quest_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pre_condition;
        break;
      }
      
      // optional .protocols.common.QuestPreCondition pre_condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actions;
        break;
      }
      
      // repeated .protocols.common.QuestAction actions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actions;
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // optional .protocols.common.QuestRewards rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quest_type;
        break;
      }
      
      // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestType_IsValid(value)) {
            set_quest_type(static_cast< protocols::common::QuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestProtoype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // optional bytes quest_name = 2;
  if (has_quest_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->quest_name(), output);
  }
  
  // optional .protocols.common.QuestPreCondition pre_condition = 3;
  if (has_pre_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pre_condition(), output);
  }
  
  // repeated .protocols.common.QuestAction actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actions(i), output);
  }
  
  // optional .protocols.common.QuestRewards rewards = 5;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(), output);
  }
  
  // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->quest_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestProtoype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // optional bytes quest_name = 2;
  if (has_quest_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quest_name(), target);
  }
  
  // optional .protocols.common.QuestPreCondition pre_condition = 3;
  if (has_pre_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pre_condition(), target);
  }
  
  // repeated .protocols.common.QuestAction actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actions(i), target);
  }
  
  // optional .protocols.common.QuestRewards rewards = 5;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(), target);
  }
  
  // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->quest_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestProtoype::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // optional bytes quest_name = 2;
    if (has_quest_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quest_name());
    }
    
    // optional .protocols.common.QuestPreCondition pre_condition = 3;
    if (has_pre_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_condition());
    }
    
    // optional .protocols.common.QuestRewards rewards = 5;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_type());
    }
    
  }
  // repeated .protocols.common.QuestAction actions = 4;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestProtoype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestProtoype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestProtoype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestProtoype::MergeFrom(const QuestProtoype& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_name()) {
      set_quest_name(from.quest_name());
    }
    if (from.has_pre_condition()) {
      mutable_pre_condition()->::protocols::common::QuestPreCondition::MergeFrom(from.pre_condition());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::protocols::common::QuestRewards::MergeFrom(from.rewards());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestProtoype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestProtoype::CopyFrom(const QuestProtoype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestProtoype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void QuestProtoype::Swap(QuestProtoype* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_name_, other->quest_name_);
    std::swap(pre_condition_, other->pre_condition_);
    actions_.Swap(&other->actions_);
    std::swap(rewards_, other->rewards_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestProtoype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestProtoype_descriptor_;
  metadata.reflection = QuestProtoype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kSeqNoFieldNumber;
const int TeamMemberInfo::kGuidFieldNumber;
const int TeamMemberInfo::kNameFieldNumber;
const int TeamMemberInfo::kIsOnlineFieldNumber;
const int TeamMemberInfo::kJobFieldNumber;
const int TeamMemberInfo::kLevelFieldNumber;
const int TeamMemberInfo::kFightCapacityFieldNumber;
const int TeamMemberInfo::kYinglingInfoFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberInfo::InitAsDefaultInstance() {
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  seq_no_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = 0;
  job_ = 1;
  level_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberInfo_descriptor_;
}

const TeamMemberInfo& TeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_no_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_online_ = 0;
    job_ = 1;
    level_ = 0;
    fight_capacity_ = 0;
  }
  yingling_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_online;
        break;
      }
      
      // required int32 is_online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yingling_info;
        break;
      }
      
      // repeated .protocols.common.YinglingInfo yingling_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yingling_info;
        if (input->ExpectTag(64)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq_no(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required int32 is_online = 4;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_online(), output);
  }
  
  // optional .protocols.common.Profession job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->job(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  for (int i = 0; i < this->yingling_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yingling_info(i), output);
  }
  
  // optional int32 fight_capacity = 8;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq_no(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required int32 is_online = 4;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_online(), target);
  }
  
  // optional .protocols.common.Profession job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->job(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  for (int i = 0; i < this->yingling_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yingling_info(i), target);
  }
  
  // optional int32 fight_capacity = 8;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq_no = 1;
    if (has_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_no());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 is_online = 4;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_online());
    }
    
    // optional .protocols.common.Profession job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 fight_capacity = 8;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  total_size += 1 * this->yingling_info_size();
  for (int i = 0; i < this->yingling_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_info_.MergeFrom(from.yingling_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  for (int i = 0; i < yingling_info_size(); i++) {
    if (!this->yingling_info(i).IsInitialized()) return false;
  }
  return true;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(seq_no_, other->seq_no_);
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(is_online_, other->is_online_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(fight_capacity_, other->fight_capacity_);
    yingling_info_.Swap(&other->yingling_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberInfo_descriptor_;
  metadata.reflection = TeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kNameFieldNumber;
const int TeamInfo::kLeaderGuidFieldNumber;
const int TeamInfo::kTeamMemberLimitFieldNumber;
const int TeamInfo::kCurTeamMemberFieldNumber;
const int TeamInfo::kObjectiveFieldNumber;
const int TeamInfo::kCustomPassIdFieldNumber;
const int TeamInfo::kDifficultLevelFieldNumber;
const int TeamInfo::kMinLevelRequiredFieldNumber;
const int TeamInfo::kAddMemberTypeFieldNumber;
const int TeamInfo::kTeamMemberFieldNumber;
const int TeamInfo::kTeamBattleSkillIdFieldNumber;
const int TeamInfo::kFighterInfoFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_guid_ = GOOGLE_LONGLONG(0);
  team_member_limit_ = 0;
  cur_team_member_ = 0;
  objective_ = 1;
  custom_pass_id_ = 0;
  difficult_level_ = 1;
  min_level_required_ = 0;
  add_member_type_ = 1;
  team_battle_skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    leader_guid_ = GOOGLE_LONGLONG(0);
    team_member_limit_ = 0;
    cur_team_member_ = 0;
    objective_ = 1;
    custom_pass_id_ = 0;
    difficult_level_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    min_level_required_ = 0;
    add_member_type_ = 1;
    team_battle_skill_id_ = 0;
  }
  team_member_.Clear();
  fighter_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_guid;
        break;
      }
      
      // required int64 leader_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_member_limit;
        break;
      }
      
      // required int32 team_member_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_member_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_member_limit_)));
          set_has_team_member_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_team_member;
        break;
      }
      
      // optional int32 cur_team_member = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_team_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_team_member_)));
          set_has_cur_team_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objective;
        break;
      }
      
      // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objective:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_OBJECTIVE_TYPE_IsValid(value)) {
            set_objective(static_cast< protocols::common::TEAM_OBJECTIVE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_custom_pass_id;
        break;
      }
      
      // optional int32 custom_pass_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &custom_pass_id_)));
          set_has_custom_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_difficult_level;
        break;
      }
      
      // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::DIFFICULTY_LEVEL_IsValid(value)) {
            set_difficult_level(static_cast< protocols::common::DIFFICULTY_LEVEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_min_level_required;
        break;
      }
      
      // optional int32 min_level_required = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_required_)));
          set_has_min_level_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_add_member_type;
        break;
      }
      
      // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_member_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_ADD_TYPE_IsValid(value)) {
            set_add_member_type(static_cast< protocols::common::TEAM_ADD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_team_member;
        break;
      }
      
      // repeated .protocols.common.TeamMemberInfo team_member = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_team_member;
        if (input->ExpectTag(104)) goto parse_team_battle_skill_id;
        break;
      }
      
      // optional int32 team_battle_skill_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_battle_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_battle_skill_id_)));
          set_has_team_battle_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fighter_info;
        break;
      }
      
      // repeated .protocols.common.FighterInfo fighter_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fighter_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_guid(), output);
  }
  
  // required int32 team_member_limit = 4;
  if (has_team_member_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_member_limit(), output);
  }
  
  // optional int32 cur_team_member = 5;
  if (has_cur_team_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_team_member(), output);
  }
  
  // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->objective(), output);
  }
  
  // optional int32 custom_pass_id = 7;
  if (has_custom_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->custom_pass_id(), output);
  }
  
  // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
  if (has_difficult_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->difficult_level(), output);
  }
  
  // optional int32 min_level_required = 9;
  if (has_min_level_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->min_level_required(), output);
  }
  
  // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
  if (has_add_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->add_member_type(), output);
  }
  
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  for (int i = 0; i < this->team_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->team_member(i), output);
  }
  
  // optional int32 team_battle_skill_id = 13;
  if (has_team_battle_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team_battle_skill_id(), output);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->fighter_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_guid(), target);
  }
  
  // required int32 team_member_limit = 4;
  if (has_team_member_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_member_limit(), target);
  }
  
  // optional int32 cur_team_member = 5;
  if (has_cur_team_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_team_member(), target);
  }
  
  // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->objective(), target);
  }
  
  // optional int32 custom_pass_id = 7;
  if (has_custom_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->custom_pass_id(), target);
  }
  
  // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
  if (has_difficult_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->difficult_level(), target);
  }
  
  // optional int32 min_level_required = 9;
  if (has_min_level_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->min_level_required(), target);
  }
  
  // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
  if (has_add_member_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->add_member_type(), target);
  }
  
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  for (int i = 0; i < this->team_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->team_member(i), target);
  }
  
  // optional int32 team_battle_skill_id = 13;
  if (has_team_battle_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team_battle_skill_id(), target);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->fighter_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int64 leader_guid = 3;
    if (has_leader_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // required int32 team_member_limit = 4;
    if (has_team_member_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_member_limit());
    }
    
    // optional int32 cur_team_member = 5;
    if (has_cur_team_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_team_member());
    }
    
    // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objective());
    }
    
    // optional int32 custom_pass_id = 7;
    if (has_custom_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->custom_pass_id());
    }
    
    // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
    if (has_difficult_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficult_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 min_level_required = 9;
    if (has_min_level_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level_required());
    }
    
    // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
    if (has_add_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->add_member_type());
    }
    
    // optional int32 team_battle_skill_id = 13;
    if (has_team_battle_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_battle_skill_id());
    }
    
  }
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  total_size += 1 * this->team_member_size();
  for (int i = 0; i < this->team_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_member(i));
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  total_size += 1 * this->fighter_info_size();
  for (int i = 0; i < this->fighter_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_member_.MergeFrom(from.team_member_);
  fighter_info_.MergeFrom(from.fighter_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_team_member_limit()) {
      set_team_member_limit(from.team_member_limit());
    }
    if (from.has_cur_team_member()) {
      set_cur_team_member(from.cur_team_member());
    }
    if (from.has_objective()) {
      set_objective(from.objective());
    }
    if (from.has_custom_pass_id()) {
      set_custom_pass_id(from.custom_pass_id());
    }
    if (from.has_difficult_level()) {
      set_difficult_level(from.difficult_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_level_required()) {
      set_min_level_required(from.min_level_required());
    }
    if (from.has_add_member_type()) {
      set_add_member_type(from.add_member_type());
    }
    if (from.has_team_battle_skill_id()) {
      set_team_battle_skill_id(from.team_battle_skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < team_member_size(); i++) {
    if (!this->team_member(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fighter_info_size(); i++) {
    if (!this->fighter_info(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(team_member_limit_, other->team_member_limit_);
    std::swap(cur_team_member_, other->cur_team_member_);
    std::swap(objective_, other->objective_);
    std::swap(custom_pass_id_, other->custom_pass_id_);
    std::swap(difficult_level_, other->difficult_level_);
    std::swap(min_level_required_, other->min_level_required_);
    std::swap(add_member_type_, other->add_member_type_);
    team_member_.Swap(&other->team_member_);
    std::swap(team_battle_skill_id_, other->team_battle_skill_id_);
    fighter_info_.Swap(&other->fighter_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoolDown::kTypeFieldNumber;
const int CoolDown::kSecFieldNumber;
#endif  // !_MSC_VER

CoolDown::CoolDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoolDown::InitAsDefaultInstance() {
}

CoolDown::CoolDown(const CoolDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoolDown::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoolDown::~CoolDown() {
  SharedDtor();
}

void CoolDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoolDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoolDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoolDown_descriptor_;
}

const CoolDown& CoolDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

CoolDown* CoolDown::default_instance_ = NULL;

CoolDown* CoolDown::New() const {
  return new CoolDown;
}

void CoolDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoolDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }
      
      // required int32 sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoolDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoolDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoolDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoolDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoolDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoolDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoolDown::MergeFrom(const CoolDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoolDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoolDown::CopyFrom(const CoolDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoolDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CoolDown::Swap(CoolDown* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoolDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoolDown_descriptor_;
  metadata.reflection = CoolDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCoolDownPb::kCoolDownFieldNumber;
#endif  // !_MSC_VER

RoleCoolDownPb::RoleCoolDownPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownPb::InitAsDefaultInstance() {
}

RoleCoolDownPb::RoleCoolDownPb(const RoleCoolDownPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownPb::~RoleCoolDownPb() {
  SharedDtor();
}

void RoleCoolDownPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCoolDownPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownPb_descriptor_;
}

const RoleCoolDownPb& RoleCoolDownPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleCoolDownPb* RoleCoolDownPb::default_instance_ = NULL;

RoleCoolDownPb* RoleCoolDownPb::New() const {
  return new RoleCoolDownPb;
}

void RoleCoolDownPb::Clear() {
  cool_down_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.CoolDown cool_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cool_down:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cool_down()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cool_down;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCoolDownPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.CoolDown cool_down = 2;
  for (int i = 0; i < this->cool_down_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cool_down(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.CoolDown cool_down = 2;
  for (int i = 0; i < this->cool_down_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cool_down(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.CoolDown cool_down = 2;
  total_size += 1 * this->cool_down_size();
  for (int i = 0; i < this->cool_down_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cool_down(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownPb::MergeFrom(const RoleCoolDownPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  cool_down_.MergeFrom(from.cool_down_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownPb::CopyFrom(const RoleCoolDownPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownPb::IsInitialized() const {
  
  for (int i = 0; i < cool_down_size(); i++) {
    if (!this->cool_down(i).IsInitialized()) return false;
  }
  return true;
}

void RoleCoolDownPb::Swap(RoleCoolDownPb* other) {
  if (other != this) {
    cool_down_.Swap(&other->cool_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownPb_descriptor_;
  metadata.reflection = RoleCoolDownPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyCountLimit::kLimitTypeFieldNumber;
const int DailyCountLimit::kLimitCountFieldNumber;
const int DailyCountLimit::kCurrentCountFieldNumber;
const int DailyCountLimit::kLimitPurchaseCountFieldNumber;
const int DailyCountLimit::kCurrentPurchaseCountFieldNumber;
const int DailyCountLimit::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

DailyCountLimit::DailyCountLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyCountLimit::InitAsDefaultInstance() {
}

DailyCountLimit::DailyCountLimit(const DailyCountLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyCountLimit::SharedCtor() {
  _cached_size_ = 0;
  limit_type_ = 0;
  limit_count_ = 0;
  current_count_ = 0;
  limit_purchase_count_ = 0;
  current_purchase_count_ = 0;
  update_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyCountLimit::~DailyCountLimit() {
  SharedDtor();
}

void DailyCountLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyCountLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyCountLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyCountLimit_descriptor_;
}

const DailyCountLimit& DailyCountLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyCountLimit* DailyCountLimit::default_instance_ = NULL;

DailyCountLimit* DailyCountLimit::New() const {
  return new DailyCountLimit;
}

void DailyCountLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    limit_type_ = 0;
    limit_count_ = 0;
    current_count_ = 0;
    limit_purchase_count_ = 0;
    current_purchase_count_ = 0;
    update_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyCountLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 limit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit_count;
        break;
      }
      
      // required int32 limit_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_count_)));
          set_has_limit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_count;
        break;
      }
      
      // required int32 current_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit_purchase_count;
        break;
      }
      
      // required int32 limit_purchase_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_purchase_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_purchase_count_)));
          set_has_limit_purchase_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_purchase_count;
        break;
      }
      
      // required int32 current_purchase_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_purchase_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_purchase_count_)));
          set_has_current_purchase_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }
      
      // optional int32 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyCountLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 limit_type = 1;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit_type(), output);
  }
  
  // required int32 limit_count = 2;
  if (has_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_count(), output);
  }
  
  // required int32 current_count = 3;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_count(), output);
  }
  
  // required int32 limit_purchase_count = 4;
  if (has_limit_purchase_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit_purchase_count(), output);
  }
  
  // required int32 current_purchase_count = 5;
  if (has_current_purchase_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_purchase_count(), output);
  }
  
  // optional int32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->update_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyCountLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 limit_type = 1;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit_type(), target);
  }
  
  // required int32 limit_count = 2;
  if (has_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_count(), target);
  }
  
  // required int32 current_count = 3;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_count(), target);
  }
  
  // required int32 limit_purchase_count = 4;
  if (has_limit_purchase_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit_purchase_count(), target);
  }
  
  // required int32 current_purchase_count = 5;
  if (has_current_purchase_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_purchase_count(), target);
  }
  
  // optional int32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->update_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyCountLimit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 limit_type = 1;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_type());
    }
    
    // required int32 limit_count = 2;
    if (has_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_count());
    }
    
    // required int32 current_count = 3;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_count());
    }
    
    // required int32 limit_purchase_count = 4;
    if (has_limit_purchase_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_purchase_count());
    }
    
    // required int32 current_purchase_count = 5;
    if (has_current_purchase_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_purchase_count());
    }
    
    // optional int32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyCountLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyCountLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyCountLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyCountLimit::MergeFrom(const DailyCountLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_limit_count()) {
      set_limit_count(from.limit_count());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_limit_purchase_count()) {
      set_limit_purchase_count(from.limit_purchase_count());
    }
    if (from.has_current_purchase_count()) {
      set_current_purchase_count(from.current_purchase_count());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyCountLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyCountLimit::CopyFrom(const DailyCountLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyCountLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void DailyCountLimit::Swap(DailyCountLimit* other) {
  if (other != this) {
    std::swap(limit_type_, other->limit_type_);
    std::swap(limit_count_, other->limit_count_);
    std::swap(current_count_, other->current_count_);
    std::swap(limit_purchase_count_, other->limit_purchase_count_);
    std::swap(current_purchase_count_, other->current_purchase_count_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyCountLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyCountLimit_descriptor_;
  metadata.reflection = DailyCountLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDailyLimitPb::kDailyLimitFieldNumber;
#endif  // !_MSC_VER

RoleDailyLimitPb::RoleDailyLimitPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyLimitPb::InitAsDefaultInstance() {
}

RoleDailyLimitPb::RoleDailyLimitPb(const RoleDailyLimitPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyLimitPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyLimitPb::~RoleDailyLimitPb() {
  SharedDtor();
}

void RoleDailyLimitPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDailyLimitPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyLimitPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyLimitPb_descriptor_;
}

const RoleDailyLimitPb& RoleDailyLimitPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleDailyLimitPb* RoleDailyLimitPb::default_instance_ = NULL;

RoleDailyLimitPb* RoleDailyLimitPb::New() const {
  return new RoleDailyLimitPb;
}

void RoleDailyLimitPb::Clear() {
  daily_limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyLimitPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.DailyCountLimit daily_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_limit;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDailyLimitPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  for (int i = 0; i < this->daily_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_limit(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyLimitPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  for (int i = 0; i < this->daily_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_limit(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyLimitPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  total_size += 1 * this->daily_limit_size();
  for (int i = 0; i < this->daily_limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_limit(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyLimitPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyLimitPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyLimitPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyLimitPb::MergeFrom(const RoleDailyLimitPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_limit_.MergeFrom(from.daily_limit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyLimitPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyLimitPb::CopyFrom(const RoleDailyLimitPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyLimitPb::IsInitialized() const {
  
  for (int i = 0; i < daily_limit_size(); i++) {
    if (!this->daily_limit(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDailyLimitPb::Swap(RoleDailyLimitPb* other) {
  if (other != this) {
    daily_limit_.Swap(&other->daily_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyLimitPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyLimitPb_descriptor_;
  metadata.reflection = RoleDailyLimitPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBRoleLimitDataPb::kCoolDownFieldNumber;
const int DBRoleLimitDataPb::kCountLimitFieldNumber;
#endif  // !_MSC_VER

DBRoleLimitDataPb::DBRoleLimitDataPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBRoleLimitDataPb::InitAsDefaultInstance() {
  cool_down_ = const_cast< ::protocols::common::RoleCoolDownPb*>(&::protocols::common::RoleCoolDownPb::default_instance());
  count_limit_ = const_cast< ::protocols::common::RoleDailyLimitPb*>(&::protocols::common::RoleDailyLimitPb::default_instance());
}

DBRoleLimitDataPb::DBRoleLimitDataPb(const DBRoleLimitDataPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBRoleLimitDataPb::SharedCtor() {
  _cached_size_ = 0;
  cool_down_ = NULL;
  count_limit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBRoleLimitDataPb::~DBRoleLimitDataPb() {
  SharedDtor();
}

void DBRoleLimitDataPb::SharedDtor() {
  if (this != default_instance_) {
    delete cool_down_;
    delete count_limit_;
  }
}

void DBRoleLimitDataPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBRoleLimitDataPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBRoleLimitDataPb_descriptor_;
}

const DBRoleLimitDataPb& DBRoleLimitDataPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DBRoleLimitDataPb* DBRoleLimitDataPb::default_instance_ = NULL;

DBRoleLimitDataPb* DBRoleLimitDataPb::New() const {
  return new DBRoleLimitDataPb;
}

void DBRoleLimitDataPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cool_down()) {
      if (cool_down_ != NULL) cool_down_->::protocols::common::RoleCoolDownPb::Clear();
    }
    if (has_count_limit()) {
      if (count_limit_ != NULL) count_limit_->::protocols::common::RoleDailyLimitPb::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBRoleLimitDataPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.RoleCoolDownPb cool_down = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cool_down()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_count_limit;
        break;
      }
      
      // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBRoleLimitDataPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cool_down(), output);
  }
  
  // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
  if (has_count_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->count_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBRoleLimitDataPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cool_down(), target);
  }
  
  // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
  if (has_count_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->count_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBRoleLimitDataPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.RoleCoolDownPb cool_down = 1;
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cool_down());
    }
    
    // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
    if (has_count_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBRoleLimitDataPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBRoleLimitDataPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBRoleLimitDataPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBRoleLimitDataPb::MergeFrom(const DBRoleLimitDataPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cool_down()) {
      mutable_cool_down()->::protocols::common::RoleCoolDownPb::MergeFrom(from.cool_down());
    }
    if (from.has_count_limit()) {
      mutable_count_limit()->::protocols::common::RoleDailyLimitPb::MergeFrom(from.count_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBRoleLimitDataPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRoleLimitDataPb::CopyFrom(const DBRoleLimitDataPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleLimitDataPb::IsInitialized() const {
  
  if (has_cool_down()) {
    if (!this->cool_down().IsInitialized()) return false;
  }
  if (has_count_limit()) {
    if (!this->count_limit().IsInitialized()) return false;
  }
  return true;
}

void DBRoleLimitDataPb::Swap(DBRoleLimitDataPb* other) {
  if (other != this) {
    std::swap(cool_down_, other->cool_down_);
    std::swap(count_limit_, other->count_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBRoleLimitDataPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBRoleLimitDataPb_descriptor_;
  metadata.reflection = DBRoleLimitDataPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuest::kQuestIdFieldNumber;
const int DailyQuest::kQualityFieldNumber;
const int DailyQuest::kStatusFieldNumber;
const int DailyQuest::kCategoryFieldNumber;
const int DailyQuest::kRewardExpFieldNumber;
const int DailyQuest::kRewardCoinFieldNumber;
#endif  // !_MSC_VER

DailyQuest::DailyQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuest::InitAsDefaultInstance() {
}

DailyQuest::DailyQuest(const DailyQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quality_ = 0;
  status_ = 0;
  category_ = 0;
  reward_exp_ = 0;
  reward_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuest::~DailyQuest() {
  SharedDtor();
}

void DailyQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuest_descriptor_;
}

const DailyQuest& DailyQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyQuest* DailyQuest::default_instance_ = NULL;

DailyQuest* DailyQuest::New() const {
  return new DailyQuest;
}

void DailyQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    quality_ = 0;
    status_ = 0;
    category_ = 0;
    reward_exp_ = 0;
    reward_coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }
      
      // required int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_category;
        break;
      }
      
      // required int32 category = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_exp;
        break;
      }
      
      // optional int32 reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_coin;
        break;
      }
      
      // optional int32 reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_coin_)));
          set_has_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // required int32 category = 4;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->category(), output);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_exp(), output);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // required int32 category = 4;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->category(), target);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_exp(), target);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 category = 4;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
    // optional int32 reward_exp = 5;
    if (has_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp());
    }
    
    // optional int32 reward_coin = 6;
    if (has_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuest::MergeFrom(const DailyQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
    if (from.has_reward_coin()) {
      set_reward_coin(from.reward_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuest::CopyFrom(const DailyQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void DailyQuest::Swap(DailyQuest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quality_, other->quality_);
    std::swap(status_, other->status_);
    std::swap(category_, other->category_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(reward_coin_, other->reward_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuest_descriptor_;
  metadata.reflection = DailyQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuestPb::kDailyQuestsFieldNumber;
const int DailyQuestPb::kAcceptedDailyQuestsFieldNumber;
const int DailyQuestPb::kXunluoQuestFieldNumber;
#endif  // !_MSC_VER

DailyQuestPb::DailyQuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuestPb::InitAsDefaultInstance() {
  xunluo_quest_ = const_cast< ::protocols::common::XunluoQuestPb*>(&::protocols::common::XunluoQuestPb::default_instance());
}

DailyQuestPb::DailyQuestPb(const DailyQuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuestPb::SharedCtor() {
  _cached_size_ = 0;
  xunluo_quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuestPb::~DailyQuestPb() {
  SharedDtor();
}

void DailyQuestPb::SharedDtor() {
  if (this != default_instance_) {
    delete xunluo_quest_;
  }
}

void DailyQuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuestPb_descriptor_;
}

const DailyQuestPb& DailyQuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyQuestPb* DailyQuestPb::default_instance_ = NULL;

DailyQuestPb* DailyQuestPb::New() const {
  return new DailyQuestPb;
}

void DailyQuestPb::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_xunluo_quest()) {
      if (xunluo_quest_ != NULL) xunluo_quest_->::protocols::common::XunluoQuestPb::Clear();
    }
  }
  daily_quests_.Clear();
  accepted_daily_quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.DailyQuest daily_quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_quests;
        if (input->ExpectTag(18)) goto parse_accepted_daily_quests;
        break;
      }
      
      // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accepted_daily_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accepted_daily_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accepted_daily_quests;
        if (input->ExpectTag(26)) goto parse_xunluo_quest;
        break;
      }
      
      // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xunluo_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xunluo_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  for (int i = 0; i < this->daily_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_quests(i), output);
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accepted_daily_quests(i), output);
  }
  
  // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
  if (has_xunluo_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->xunluo_quest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  for (int i = 0; i < this->daily_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_quests(i), target);
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accepted_daily_quests(i), target);
  }
  
  // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
  if (has_xunluo_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->xunluo_quest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
    if (has_xunluo_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xunluo_quest());
    }
    
  }
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  total_size += 1 * this->daily_quests_size();
  for (int i = 0; i < this->daily_quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_quests(i));
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  total_size += 1 * this->accepted_daily_quests_size();
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accepted_daily_quests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuestPb::MergeFrom(const DailyQuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_quests_.MergeFrom(from.daily_quests_);
  accepted_daily_quests_.MergeFrom(from.accepted_daily_quests_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_xunluo_quest()) {
      mutable_xunluo_quest()->::protocols::common::XunluoQuestPb::MergeFrom(from.xunluo_quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuestPb::CopyFrom(const DailyQuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuestPb::IsInitialized() const {
  
  for (int i = 0; i < daily_quests_size(); i++) {
    if (!this->daily_quests(i).IsInitialized()) return false;
  }
  for (int i = 0; i < accepted_daily_quests_size(); i++) {
    if (!this->accepted_daily_quests(i).IsInitialized()) return false;
  }
  return true;
}

void DailyQuestPb::Swap(DailyQuestPb* other) {
  if (other != this) {
    daily_quests_.Swap(&other->daily_quests_);
    accepted_daily_quests_.Swap(&other->accepted_daily_quests_);
    std::swap(xunluo_quest_, other->xunluo_quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuestPb_descriptor_;
  metadata.reflection = DailyQuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XunluoQuestPb::kCurCircleIndexFieldNumber;
const int XunluoQuestPb::kXunluoQuestIdFieldNumber;
const int XunluoQuestPb::kXunluoRewardExpFieldNumber;
const int XunluoQuestPb::kXunluoRewardCoinFieldNumber;
#endif  // !_MSC_VER

XunluoQuestPb::XunluoQuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XunluoQuestPb::InitAsDefaultInstance() {
}

XunluoQuestPb::XunluoQuestPb(const XunluoQuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XunluoQuestPb::SharedCtor() {
  _cached_size_ = 0;
  cur_circle_index_ = 0;
  xunluo_quest_id_ = 0;
  xunluo_reward_exp_ = 0;
  xunluo_reward_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XunluoQuestPb::~XunluoQuestPb() {
  SharedDtor();
}

void XunluoQuestPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XunluoQuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XunluoQuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XunluoQuestPb_descriptor_;
}

const XunluoQuestPb& XunluoQuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

XunluoQuestPb* XunluoQuestPb::default_instance_ = NULL;

XunluoQuestPb* XunluoQuestPb::New() const {
  return new XunluoQuestPb;
}

void XunluoQuestPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_circle_index_ = 0;
    xunluo_quest_id_ = 0;
    xunluo_reward_exp_ = 0;
    xunluo_reward_coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XunluoQuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_circle_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_circle_index_)));
          set_has_cur_circle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_xunluo_quest_id;
        break;
      }
      
      // optional int32 xunluo_quest_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_quest_id_)));
          set_has_xunluo_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_xunluo_reward_exp;
        break;
      }
      
      // optional int32 xunluo_reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_reward_exp_)));
          set_has_xunluo_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xunluo_reward_coin;
        break;
      }
      
      // optional int32 xunluo_reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_reward_coin_)));
          set_has_xunluo_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XunluoQuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_circle_index = 3;
  if (has_cur_circle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_circle_index(), output);
  }
  
  // optional int32 xunluo_quest_id = 4;
  if (has_xunluo_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xunluo_quest_id(), output);
  }
  
  // optional int32 xunluo_reward_exp = 5;
  if (has_xunluo_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xunluo_reward_exp(), output);
  }
  
  // optional int32 xunluo_reward_coin = 6;
  if (has_xunluo_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xunluo_reward_coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XunluoQuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_circle_index = 3;
  if (has_cur_circle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_circle_index(), target);
  }
  
  // optional int32 xunluo_quest_id = 4;
  if (has_xunluo_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xunluo_quest_id(), target);
  }
  
  // optional int32 xunluo_reward_exp = 5;
  if (has_xunluo_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xunluo_reward_exp(), target);
  }
  
  // optional int32 xunluo_reward_coin = 6;
  if (has_xunluo_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xunluo_reward_coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XunluoQuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_circle_index = 3;
    if (has_cur_circle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_circle_index());
    }
    
    // optional int32 xunluo_quest_id = 4;
    if (has_xunluo_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_quest_id());
    }
    
    // optional int32 xunluo_reward_exp = 5;
    if (has_xunluo_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_reward_exp());
    }
    
    // optional int32 xunluo_reward_coin = 6;
    if (has_xunluo_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_reward_coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XunluoQuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XunluoQuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XunluoQuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XunluoQuestPb::MergeFrom(const XunluoQuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_circle_index()) {
      set_cur_circle_index(from.cur_circle_index());
    }
    if (from.has_xunluo_quest_id()) {
      set_xunluo_quest_id(from.xunluo_quest_id());
    }
    if (from.has_xunluo_reward_exp()) {
      set_xunluo_reward_exp(from.xunluo_reward_exp());
    }
    if (from.has_xunluo_reward_coin()) {
      set_xunluo_reward_coin(from.xunluo_reward_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XunluoQuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XunluoQuestPb::CopyFrom(const XunluoQuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XunluoQuestPb::IsInitialized() const {
  
  return true;
}

void XunluoQuestPb::Swap(XunluoQuestPb* other) {
  if (other != this) {
    std::swap(cur_circle_index_, other->cur_circle_index_);
    std::swap(xunluo_quest_id_, other->xunluo_quest_id_);
    std::swap(xunluo_reward_exp_, other->xunluo_reward_exp_);
    std::swap(xunluo_reward_coin_, other->xunluo_reward_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XunluoQuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XunluoQuestPb_descriptor_;
  metadata.reflection = XunluoQuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagPb::kTypeFieldNumber;
const int PlayerFlagPb::kValueFieldNumber;
#endif  // !_MSC_VER

PlayerFlagPb::PlayerFlagPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagPb::InitAsDefaultInstance() {
}

PlayerFlagPb::PlayerFlagPb(const PlayerFlagPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagPb::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagPb::~PlayerFlagPb() {
  SharedDtor();
}

void PlayerFlagPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlagPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagPb_descriptor_;
}

const PlayerFlagPb& PlayerFlagPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerFlagPb* PlayerFlagPb::default_instance_ = NULL;

PlayerFlagPb* PlayerFlagPb::New() const {
  return new PlayerFlagPb;
}

void PlayerFlagPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagPb::MergeFrom(const PlayerFlagPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagPb::CopyFrom(const PlayerFlagPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerFlagPb::Swap(PlayerFlagPb* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagPb_descriptor_;
  metadata.reflection = PlayerFlagPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagDataPb::kDataFieldNumber;
#endif  // !_MSC_VER

PlayerFlagDataPb::PlayerFlagDataPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagDataPb::InitAsDefaultInstance() {
}

PlayerFlagDataPb::PlayerFlagDataPb(const PlayerFlagDataPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagDataPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagDataPb::~PlayerFlagDataPb() {
  SharedDtor();
}

void PlayerFlagDataPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlagDataPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagDataPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagDataPb_descriptor_;
}

const PlayerFlagDataPb& PlayerFlagDataPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerFlagDataPb* PlayerFlagDataPb::default_instance_ = NULL;

PlayerFlagDataPb* PlayerFlagDataPb::New() const {
  return new PlayerFlagDataPb;
}

void PlayerFlagDataPb::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagDataPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.PlayerFlagPb data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagDataPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.PlayerFlagPb data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagDataPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.PlayerFlagPb data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagDataPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.PlayerFlagPb data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagDataPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagDataPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagDataPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagDataPb::MergeFrom(const PlayerFlagDataPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagDataPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagDataPb::CopyFrom(const PlayerFlagDataPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagDataPb::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerFlagDataPb::Swap(PlayerFlagDataPb* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagDataPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagDataPb_descriptor_;
  metadata.reflection = PlayerFlagDataPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayerInfo::kGuidFieldNumber;
const int ArenaPlayerInfo::kNameFieldNumber;
const int ArenaPlayerInfo::kLevelFieldNumber;
const int ArenaPlayerInfo::kCurRankFieldNumber;
const int ArenaPlayerInfo::kHighestRankFieldNumber;
const int ArenaPlayerInfo::kTitileFieldNumber;
const int ArenaPlayerInfo::kMaxContWinsFieldNumber;
const int ArenaPlayerInfo::kCurContWinsFieldNumber;
const int ArenaPlayerInfo::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

ArenaPlayerInfo::ArenaPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayerInfo::InitAsDefaultInstance() {
}

ArenaPlayerInfo::ArenaPlayerInfo(const ArenaPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  cur_rank_ = 0;
  highest_rank_ = 0;
  titile_ = 0;
  max_cont_wins_ = 0;
  cur_cont_wins_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayerInfo::~ArenaPlayerInfo() {
  SharedDtor();
}

void ArenaPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayerInfo_descriptor_;
}

const ArenaPlayerInfo& ArenaPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

ArenaPlayerInfo* ArenaPlayerInfo::default_instance_ = NULL;

ArenaPlayerInfo* ArenaPlayerInfo::New() const {
  return new ArenaPlayerInfo;
}

void ArenaPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    cur_rank_ = 0;
    highest_rank_ = 0;
    titile_ = 0;
    max_cont_wins_ = 0;
    cur_cont_wins_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fight_capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_rank;
        break;
      }
      
      // required int32 cur_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_titile;
        break;
      }
      
      // optional int32 titile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titile_)));
          set_has_titile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_cont_wins;
        break;
      }
      
      // optional int32 max_cont_wins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cont_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cont_wins_)));
          set_has_max_cont_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_highest_rank;
        break;
      }
      
      // optional int32 highest_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest_rank_)));
          set_has_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_cont_wins;
        break;
      }
      
      // optional int32 cur_cont_wins = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_cont_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_cont_wins_)));
          set_has_cur_cont_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // required int32 cur_rank = 4;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_rank(), output);
  }
  
  // optional int32 titile = 5;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->titile(), output);
  }
  
  // optional int32 max_cont_wins = 6;
  if (has_max_cont_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_cont_wins(), output);
  }
  
  // optional int32 highest_rank = 7;
  if (has_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->highest_rank(), output);
  }
  
  // optional int32 cur_cont_wins = 8;
  if (has_cur_cont_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_cont_wins(), output);
  }
  
  // optional int32 fight_capacity = 9;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // required int32 cur_rank = 4;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_rank(), target);
  }
  
  // optional int32 titile = 5;
  if (has_titile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->titile(), target);
  }
  
  // optional int32 max_cont_wins = 6;
  if (has_max_cont_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_cont_wins(), target);
  }
  
  // optional int32 highest_rank = 7;
  if (has_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->highest_rank(), target);
  }
  
  // optional int32 cur_cont_wins = 8;
  if (has_cur_cont_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_cont_wins(), target);
  }
  
  // optional int32 fight_capacity = 9;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 cur_rank = 4;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rank());
    }
    
    // optional int32 highest_rank = 7;
    if (has_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highest_rank());
    }
    
    // optional int32 titile = 5;
    if (has_titile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titile());
    }
    
    // optional int32 max_cont_wins = 6;
    if (has_max_cont_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cont_wins());
    }
    
    // optional int32 cur_cont_wins = 8;
    if (has_cur_cont_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_cont_wins());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fight_capacity = 9;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaPlayerInfo::MergeFrom(const ArenaPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_highest_rank()) {
      set_highest_rank(from.highest_rank());
    }
    if (from.has_titile()) {
      set_titile(from.titile());
    }
    if (from.has_max_cont_wins()) {
      set_max_cont_wins(from.max_cont_wins());
    }
    if (from.has_cur_cont_wins()) {
      set_cur_cont_wins(from.cur_cont_wins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaPlayerInfo::CopyFrom(const ArenaPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ArenaPlayerInfo::Swap(ArenaPlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(highest_rank_, other->highest_rank_);
    std::swap(titile_, other->titile_);
    std::swap(max_cont_wins_, other->max_cont_wins_);
    std::swap(cur_cont_wins_, other->cur_cont_wins_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayerInfo_descriptor_;
  metadata.reflection = ArenaPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureBox::kTypeFieldNumber;
const int TreasureBox::kItemInfoFieldNumber;
#endif  // !_MSC_VER

TreasureBox::TreasureBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureBox::InitAsDefaultInstance() {
}

TreasureBox::TreasureBox(const TreasureBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureBox::~TreasureBox() {
  SharedDtor();
}

void TreasureBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureBox_descriptor_;
}

const TreasureBox& TreasureBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TreasureBox* TreasureBox::default_instance_ = NULL;

TreasureBox* TreasureBox::New() const {
  return new TreasureBox;
}

void TreasureBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureBox::MergeFrom(const TreasureBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureBox::CopyFrom(const TreasureBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_info_size(); i++) {
    if (!this->item_info(i).IsInitialized()) return false;
  }
  return true;
}

void TreasureBox::Swap(TreasureBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureBox_descriptor_;
  metadata.reflection = TreasureBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsedName::kNameFieldNumber;
const int UsedName::kTypeFieldNumber;
const int UsedName::kServerIdFieldNumber;
const int UsedName::kStatusFieldNumber;
#endif  // !_MSC_VER

UsedName::UsedName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsedName::InitAsDefaultInstance() {
}

UsedName::UsedName(const UsedName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsedName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  server_id_ = 0;
  status_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsedName::~UsedName() {
  SharedDtor();
}

void UsedName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UsedName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsedName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsedName_descriptor_;
}

const UsedName& UsedName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UsedName* UsedName::default_instance_ = NULL;

UsedName* UsedName::New() const {
  return new UsedName;
}

void UsedName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    server_id_ = 0;
    status_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsedName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int64 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsedName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int64 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsedName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int64 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsedName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int64 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsedName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsedName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsedName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsedName::MergeFrom(const UsedName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsedName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsedName::CopyFrom(const UsedName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedName::IsInitialized() const {
  
  return true;
}

void UsedName::Swap(UsedName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(server_id_, other->server_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsedName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsedName_descriptor_;
  metadata.reflection = UsedName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsedNameData::kUsedNameFieldNumber;
#endif  // !_MSC_VER

UsedNameData::UsedNameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsedNameData::InitAsDefaultInstance() {
}

UsedNameData::UsedNameData(const UsedNameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsedNameData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsedNameData::~UsedNameData() {
  SharedDtor();
}

void UsedNameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UsedNameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsedNameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsedNameData_descriptor_;
}

const UsedNameData& UsedNameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UsedNameData* UsedNameData::default_instance_ = NULL;

UsedNameData* UsedNameData::New() const {
  return new UsedNameData;
}

void UsedNameData::Clear() {
  used_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsedNameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.UsedName used_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_used_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_used_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsedNameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.UsedName used_name = 1;
  for (int i = 0; i < this->used_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->used_name(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsedNameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.UsedName used_name = 1;
  for (int i = 0; i < this->used_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->used_name(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsedNameData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.UsedName used_name = 1;
  total_size += 1 * this->used_name_size();
  for (int i = 0; i < this->used_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->used_name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsedNameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsedNameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsedNameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsedNameData::MergeFrom(const UsedNameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  used_name_.MergeFrom(from.used_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsedNameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsedNameData::CopyFrom(const UsedNameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedNameData::IsInitialized() const {
  
  return true;
}

void UsedNameData::Swap(UsedNameData* other) {
  if (other != this) {
    used_name_.Swap(&other->used_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsedNameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsedNameData_descriptor_;
  metadata.reflection = UsedNameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnuseNameMsg::kNameFieldNumber;
#endif  // !_MSC_VER

UnuseNameMsg::UnuseNameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnuseNameMsg::InitAsDefaultInstance() {
  name_ = const_cast< ::protocols::common::UsedName*>(&::protocols::common::UsedName::default_instance());
}

UnuseNameMsg::UnuseNameMsg(const UnuseNameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnuseNameMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnuseNameMsg::~UnuseNameMsg() {
  SharedDtor();
}

void UnuseNameMsg::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void UnuseNameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnuseNameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnuseNameMsg_descriptor_;
}

const UnuseNameMsg& UnuseNameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UnuseNameMsg* UnuseNameMsg::default_instance_ = NULL;

UnuseNameMsg* UnuseNameMsg::New() const {
  return new UnuseNameMsg;
}

void UnuseNameMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::protocols::common::UsedName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnuseNameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.UsedName name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnuseNameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.UsedName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnuseNameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.UsedName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnuseNameMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.UsedName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnuseNameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnuseNameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnuseNameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnuseNameMsg::MergeFrom(const UnuseNameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::protocols::common::UsedName::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnuseNameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnuseNameMsg::CopyFrom(const UnuseNameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnuseNameMsg::IsInitialized() const {
  
  return true;
}

void UnuseNameMsg::Swap(UnuseNameMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnuseNameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnuseNameMsg_descriptor_;
  metadata.reflection = UnuseNameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HideNpcData::kNpcIdFieldNumber;
const int HideNpcData::kIsDisplayFieldNumber;
const int HideNpcData::kMapIdFieldNumber;
const int HideNpcData::kXFieldNumber;
const int HideNpcData::kYFieldNumber;
const int HideNpcData::kRotateFieldNumber;
#endif  // !_MSC_VER

HideNpcData::HideNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HideNpcData::InitAsDefaultInstance() {
}

HideNpcData::HideNpcData(const HideNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HideNpcData::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  is_display_ = false;
  map_id_ = 0;
  x_ = 0;
  y_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HideNpcData::~HideNpcData() {
  SharedDtor();
}

void HideNpcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HideNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HideNpcData_descriptor_;
}

const HideNpcData& HideNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

HideNpcData* HideNpcData::default_instance_ = NULL;

HideNpcData* HideNpcData::New() const {
  return new HideNpcData;
}

void HideNpcData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    is_display_ = false;
    map_id_ = 0;
    x_ = 0;
    y_ = 0;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HideNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_display;
        break;
      }
      
      // optional bool is_display = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_display_)));
          set_has_is_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }
      
      // optional int32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // optional int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rotate;
        break;
      }
      
      // optional int32 rotate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HideNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional bool is_display = 2 [default = false];
  if (has_is_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_display(), output);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }
  
  // optional int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }
  
  // optional int32 rotate = 6;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rotate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HideNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional bool is_display = 2 [default = false];
  if (has_is_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_display(), target);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x(), target);
  }
  
  // optional int32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }
  
  // optional int32 rotate = 6;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rotate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HideNpcData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional bool is_display = 2 [default = false];
    if (has_is_display()) {
      total_size += 1 + 1;
    }
    
    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 rotate = 6;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HideNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HideNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HideNpcData::MergeFrom(const HideNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_is_display()) {
      set_is_display(from.is_display());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HideNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideNpcData::CopyFrom(const HideNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideNpcData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HideNpcData::Swap(HideNpcData* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(is_display_, other->is_display_);
    std::swap(map_id_, other->map_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HideNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HideNpcData_descriptor_;
  metadata.reflection = HideNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HideNpcPb::kNpcIdsFieldNumber;
const int HideNpcPb::kHideDatasFieldNumber;
#endif  // !_MSC_VER

HideNpcPb::HideNpcPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HideNpcPb::InitAsDefaultInstance() {
}

HideNpcPb::HideNpcPb(const HideNpcPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HideNpcPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HideNpcPb::~HideNpcPb() {
  SharedDtor();
}

void HideNpcPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HideNpcPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideNpcPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HideNpcPb_descriptor_;
}

const HideNpcPb& HideNpcPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

HideNpcPb* HideNpcPb::default_instance_ = NULL;

HideNpcPb* HideNpcPb::New() const {
  return new HideNpcPb;
}

void HideNpcPb::Clear() {
  npc_ids_.Clear();
  hide_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HideNpcPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 npc_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_npc_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_npc_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_npc_ids;
        if (input->ExpectTag(18)) goto parse_hide_datas;
        break;
      }
      
      // repeated .protocols.common.HideNpcData hide_datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hide_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hide_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hide_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HideNpcPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 npc_ids = 1;
  for (int i = 0; i < this->npc_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->npc_ids(i), output);
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  for (int i = 0; i < this->hide_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hide_datas(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HideNpcPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 npc_ids = 1;
  for (int i = 0; i < this->npc_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->npc_ids(i), target);
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  for (int i = 0; i < this->hide_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hide_datas(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HideNpcPb::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 npc_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npc_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->npc_ids(i));
    }
    total_size += 1 * this->npc_ids_size() + data_size;
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  total_size += 1 * this->hide_datas_size();
  for (int i = 0; i < this->hide_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hide_datas(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideNpcPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HideNpcPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HideNpcPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HideNpcPb::MergeFrom(const HideNpcPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_ids_.MergeFrom(from.npc_ids_);
  hide_datas_.MergeFrom(from.hide_datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HideNpcPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideNpcPb::CopyFrom(const HideNpcPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideNpcPb::IsInitialized() const {
  
  for (int i = 0; i < hide_datas_size(); i++) {
    if (!this->hide_datas(i).IsInitialized()) return false;
  }
  return true;
}

void HideNpcPb::Swap(HideNpcPb* other) {
  if (other != this) {
    npc_ids_.Swap(&other->npc_ids_);
    hide_datas_.Swap(&other->hide_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HideNpcPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HideNpcPb_descriptor_;
  metadata.reflection = HideNpcPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcPosition::kMapIdFieldNumber;
const int NpcPosition::kXFieldNumber;
const int NpcPosition::kYFieldNumber;
const int NpcPosition::kRotateFieldNumber;
#endif  // !_MSC_VER

NpcPosition::NpcPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcPosition::InitAsDefaultInstance() {
}

NpcPosition::NpcPosition(const NpcPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcPosition::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  x_ = 0;
  y_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcPosition::~NpcPosition() {
  SharedDtor();
}

void NpcPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcPosition_descriptor_;
}

const NpcPosition& NpcPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

NpcPosition* NpcPosition::default_instance_ = NULL;

NpcPosition* NpcPosition::New() const {
  return new NpcPosition;
}

void NpcPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    x_ = 0;
    y_ = 0;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rotate;
        break;
      }
      
      // optional int32 rotate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 rotate = 4;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rotate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 rotate = 4;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rotate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 rotate = 4;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcPosition::MergeFrom(const NpcPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcPosition::CopyFrom(const NpcPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcPosition::IsInitialized() const {
  
  return true;
}

void NpcPosition::Swap(NpcPosition* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcPosition_descriptor_;
  metadata.reflection = NpcPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenedFunctionNotify::kOpenedFunctionFieldNumber;
#endif  // !_MSC_VER

OpenedFunctionNotify::OpenedFunctionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenedFunctionNotify::InitAsDefaultInstance() {
}

OpenedFunctionNotify::OpenedFunctionNotify(const OpenedFunctionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenedFunctionNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenedFunctionNotify::~OpenedFunctionNotify() {
  SharedDtor();
}

void OpenedFunctionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenedFunctionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenedFunctionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenedFunctionNotify_descriptor_;
}

const OpenedFunctionNotify& OpenedFunctionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

OpenedFunctionNotify* OpenedFunctionNotify::default_instance_ = NULL;

OpenedFunctionNotify* OpenedFunctionNotify::New() const {
  return new OpenedFunctionNotify;
}

void OpenedFunctionNotify::Clear() {
  opened_function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenedFunctionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 opened_function = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_opened_function())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opened_function())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_opened_function;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenedFunctionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 opened_function = 1;
  for (int i = 0; i < this->opened_function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->opened_function(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenedFunctionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 opened_function = 1;
  for (int i = 0; i < this->opened_function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->opened_function(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenedFunctionNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 opened_function = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->opened_function_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opened_function(i));
    }
    total_size += 1 * this->opened_function_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenedFunctionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenedFunctionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenedFunctionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenedFunctionNotify::MergeFrom(const OpenedFunctionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  opened_function_.MergeFrom(from.opened_function_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenedFunctionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenedFunctionNotify::CopyFrom(const OpenedFunctionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenedFunctionNotify::IsInitialized() const {
  
  return true;
}

void OpenedFunctionNotify::Swap(OpenedFunctionNotify* other) {
  if (other != this) {
    opened_function_.Swap(&other->opened_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenedFunctionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenedFunctionNotify_descriptor_;
  metadata.reflection = OpenedFunctionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBuddyTemplateAttributeRequest::kTidFieldNumber;
const int GetBuddyTemplateAttributeRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

GetBuddyTemplateAttributeRequest::GetBuddyTemplateAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuddyTemplateAttributeRequest::InitAsDefaultInstance() {
}

GetBuddyTemplateAttributeRequest::GetBuddyTemplateAttributeRequest(const GetBuddyTemplateAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuddyTemplateAttributeRequest::~GetBuddyTemplateAttributeRequest() {
  SharedDtor();
}

void GetBuddyTemplateAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuddyTemplateAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuddyTemplateAttributeRequest_descriptor_;
}

const GetBuddyTemplateAttributeRequest& GetBuddyTemplateAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GetBuddyTemplateAttributeRequest* GetBuddyTemplateAttributeRequest::default_instance_ = NULL;

GetBuddyTemplateAttributeRequest* GetBuddyTemplateAttributeRequest::New() const {
  return new GetBuddyTemplateAttributeRequest;
}

void GetBuddyTemplateAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuddyTemplateAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBuddyTemplateAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuddyTemplateAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuddyTemplateAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuddyTemplateAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuddyTemplateAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuddyTemplateAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuddyTemplateAttributeRequest::MergeFrom(const GetBuddyTemplateAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuddyTemplateAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeRequest::CopyFrom(const GetBuddyTemplateAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuddyTemplateAttributeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBuddyTemplateAttributeRequest::Swap(GetBuddyTemplateAttributeRequest* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuddyTemplateAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuddyTemplateAttributeRequest_descriptor_;
  metadata.reflection = GetBuddyTemplateAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBuddyTemplateAttributeResponse::kErrorCodeFieldNumber;
const int GetBuddyTemplateAttributeResponse::kBareAttrListFieldNumber;
#endif  // !_MSC_VER

GetBuddyTemplateAttributeResponse::GetBuddyTemplateAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuddyTemplateAttributeResponse::InitAsDefaultInstance() {
}

GetBuddyTemplateAttributeResponse::GetBuddyTemplateAttributeResponse(const GetBuddyTemplateAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuddyTemplateAttributeResponse::~GetBuddyTemplateAttributeResponse() {
  SharedDtor();
}

void GetBuddyTemplateAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuddyTemplateAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuddyTemplateAttributeResponse_descriptor_;
}

const GetBuddyTemplateAttributeResponse& GetBuddyTemplateAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GetBuddyTemplateAttributeResponse* GetBuddyTemplateAttributeResponse::default_instance_ = NULL;

GetBuddyTemplateAttributeResponse* GetBuddyTemplateAttributeResponse::New() const {
  return new GetBuddyTemplateAttributeResponse;
}

void GetBuddyTemplateAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  bare_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuddyTemplateAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bare_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData bare_attr_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bare_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bare_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bare_attr_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBuddyTemplateAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bare_attr_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuddyTemplateAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bare_attr_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuddyTemplateAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  total_size += 1 * this->bare_attr_list_size();
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bare_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuddyTemplateAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuddyTemplateAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuddyTemplateAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuddyTemplateAttributeResponse::MergeFrom(const GetBuddyTemplateAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bare_attr_list_.MergeFrom(from.bare_attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuddyTemplateAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeResponse::CopyFrom(const GetBuddyTemplateAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuddyTemplateAttributeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBuddyTemplateAttributeResponse::Swap(GetBuddyTemplateAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    bare_attr_list_.Swap(&other->bare_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuddyTemplateAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuddyTemplateAttributeResponse_descriptor_;
  metadata.reflection = GetBuddyTemplateAttributeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
