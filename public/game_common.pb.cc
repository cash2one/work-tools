// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

namespace {

const ::google::protobuf::Descriptor* InstanceCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceWantedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceWantedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fighter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fighter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPhyStrengthInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPhyStrengthInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaojuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaojuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuddyDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuddyDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBIntPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBIntPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRelationData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRelationData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSpiritInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSpiritInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingSpiritBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingSpiritBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritGeneratorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritGeneratorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttributeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttributeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipStoneData_StoneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipStoneData_StoneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBSlotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBSlotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* FighterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FighterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Money1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestActionsPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestActionsPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestPreCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestPreCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestRewards_QuestRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestRewards_QuestRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestProtoype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestProtoype_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCrystalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCrystalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureBoxReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureBoxReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCrystalTowerActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCrystalTowerActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPosBeforeInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPosBeforeInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoolDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoolDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCoolDownPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCoolDownPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyCountLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyCountLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyLimitPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyLimitPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBRoleLimitDataPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBRoleLimitDataPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* HiredYinglingCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HiredYinglingCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHiredYinglingCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHiredYinglingCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthEquipCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthEquipCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleStrengthEquipCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleStrengthEquipCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* XunluoQuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XunluoQuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCircleQuestPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCircleQuestPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFlagDataPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFlagDataPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsedName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsedName_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsedNameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsedNameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnuseNameMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnuseNameMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HideNpcData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HideNpcData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HideNpcPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HideNpcPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenedFunctionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenedFunctionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuddyTemplateAttributeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBuddyTemplateAttributeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouLiMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouLiMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YouLiMapData_GridData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YouLiMapData_GridData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingComboStatus_ComboMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingComboStatus_ComboMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingComboStatus_Combo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingComboStatus_Combo_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingComboStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingComboStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* YinglingTrainStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YinglingTrainStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageModule_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemPositionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DirectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttrChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_SELF_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ARENA_PUBLIC_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PUBLIC_NOTICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Profession_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LEVEL_UP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PRACTICE_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PAY_FUNCTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ENUM_ATTR_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SKIP_FIGHT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FIGHT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YinglingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YinglingQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RefreshYinglingListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AnnounceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LINE_UP_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UPDATE_BATTLE_SKILL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestAction_ClientActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TreasureBoxBonusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DIFFICULTY_LEVEL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_OBJECTIVE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_ADD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_APPLY_RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TEAM_LINEUP_OPERATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SERVER_SYNC_TEAM_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NumberLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VipSettingsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerBitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StartupActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientPlayerFlagType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrainType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUY_MORE_TIMES_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BUY_CLEAR_CD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UniqueNameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildSkillStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FunctionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LivenessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerConfigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendConfigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UpdateMonsterBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TeamChannelMemberNotifyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TitleId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ROOM_OPERATION_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fcommon_2eproto() {
  protobuf_AddDesc_game_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_common.proto");
  GOOGLE_CHECK(file != NULL);
  InstanceCardInfo_descriptor_ = file->message_type(0);
  static const int InstanceCardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, icon_id_),
  };
  InstanceCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCardInfo_descriptor_,
      InstanceCardInfo::default_instance_,
      InstanceCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCardInfo));
  InstanceWantedInfo_descriptor_ = file->message_type(1);
  static const int InstanceWantedInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, card_info_),
  };
  InstanceWantedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceWantedInfo_descriptor_,
      InstanceWantedInfo::default_instance_,
      InstanceWantedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceWantedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceWantedInfo));
  BuffInfo_descriptor_ = file->message_type(2);
  static const int BuffInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, left_time_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  Fighter_descriptor_ = file->message_type(3);
  static const int Fighter_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, is_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, is_team_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, phy_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, phy_defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, mag_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, mag_defence_),
  };
  Fighter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fighter_descriptor_,
      Fighter::default_instance_,
      Fighter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fighter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fighter));
  SkillBonus_descriptor_ = file->message_type(4);
  static const int SkillBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, exp_bonus_),
  };
  SkillBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBonus_descriptor_,
      SkillBonus::default_instance_,
      SkillBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBonus));
  PlayerPhyStrengthInfo_descriptor_ = file->message_type(5);
  static const int PlayerPhyStrengthInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, phy_strength_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, extra_phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, extra_phy_strength_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, time_for_recover_phy_strength_),
  };
  PlayerPhyStrengthInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPhyStrengthInfo_descriptor_,
      PlayerPhyStrengthInfo::default_instance_,
      PlayerPhyStrengthInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPhyStrengthInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPhyStrengthInfo));
  PlayerInfo_descriptor_ = file->message_type(6);
  static const int PlayerInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, job_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vip_end_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, lineup_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, player_phy_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, map_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, follow_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, role_create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, wing_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, guild_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, practice_exp_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  NPCInfo_descriptor_ = file->message_type(7);
  static const int NPCInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npc_level_),
  };
  NPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCInfo_descriptor_,
      NPCInfo::default_instance_,
      NPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCInfo));
  BaojuInfo_descriptor_ = file->message_type(8);
  static const int BaojuInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, guid_),
  };
  BaojuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaojuInfo_descriptor_,
      BaojuInfo::default_instance_,
      BaojuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaojuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaojuInfo));
  ItemInfo_descriptor_ = file->message_type(9);
  static const int ItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bind_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, mark_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  SkillInfo_descriptor_ = file->message_type(10);
  static const int SkillInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, equip_slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, is_practicing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, delta_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, delta_add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, practice_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, time_left_for_research_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, is_used_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  BattleSkillInfo_descriptor_ = file->message_type(11);
  static const int BattleSkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, battle_skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, exp_),
  };
  BattleSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleSkillInfo_descriptor_,
      BattleSkillInfo::default_instance_,
      BattleSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleSkillInfo));
  BankInfo_descriptor_ = file->message_type(12);
  static const int BankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, diamond_),
  };
  BankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BankInfo_descriptor_,
      BankInfo::default_instance_,
      BankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BankInfo));
  YinglingInfo_descriptor_ = file->message_type(13);
  static const int YinglingInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, job_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, fight_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, is_in_fight_lineup_),
  };
  YinglingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingInfo_descriptor_,
      YinglingInfo::default_instance_,
      YinglingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingInfo));
  BuddyDetailInfo_descriptor_ = file->message_type(14);
  static const int BuddyDetailInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, total_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, bare_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, cur_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, max_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, fight_capacity_),
  };
  BuddyDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuddyDetailInfo_descriptor_,
      BuddyDetailInfo::default_instance_,
      BuddyDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuddyDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuddyDetailInfo));
  PBIntPair_descriptor_ = file->message_type(15);
  static const int PBIntPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIntPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIntPair, value_),
  };
  PBIntPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBIntPair_descriptor_,
      PBIntPair::default_instance_,
      PBIntPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIntPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBIntPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBIntPair));
  Relation_descriptor_ = file->message_type(16);
  static const int Relation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, relation_),
  };
  Relation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relation));
  PlayerRelationData_descriptor_ = file->message_type(17);
  static const int PlayerRelationData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, friend__),
  };
  PlayerRelationData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRelationData_descriptor_,
      PlayerRelationData::default_instance_,
      PlayerRelationData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRelationData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRelationData));
  InstanceInfo_descriptor_ = file->message_type(18);
  static const int InstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, grade_),
  };
  InstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfo_descriptor_,
      InstanceInfo::default_instance_,
      InstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfo));
  InstanceDetail_descriptor_ = file->message_type(19);
  static const int InstanceDetail_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, monster_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, killed_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, last_transport_id_),
  };
  InstanceDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceDetail_descriptor_,
      InstanceDetail::default_instance_,
      InstanceDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceDetail));
  MonsterInfo_descriptor_ = file->message_type(20);
  static const int MonsterInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, drop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, icon_id_),
  };
  MonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterInfo_descriptor_,
      MonsterInfo::default_instance_,
      MonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterInfo));
  WingSpiritInfo_descriptor_ = file->message_type(21);
  static const int WingSpiritInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, t_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, is_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, self_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, max_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, attr_plus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, index_),
  };
  WingSpiritInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSpiritInfo_descriptor_,
      WingSpiritInfo::default_instance_,
      WingSpiritInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSpiritInfo));
  WingSlotInfo_descriptor_ = file->message_type(22);
  static const int WingSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSlotInfo, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSlotInfo, spirit_),
  };
  WingSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSlotInfo_descriptor_,
      WingSlotInfo::default_instance_,
      WingSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSlotInfo));
  WingItemInfo_descriptor_ = file->message_type(23);
  static const int WingItemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, wing_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, wing_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, equipt_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, point_),
  };
  WingItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingItemInfo_descriptor_,
      WingItemInfo::default_instance_,
      WingItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingItemInfo));
  WingSpiritBag_descriptor_ = file->message_type(24);
  static const int WingSpiritBag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritBag, max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritBag, open_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritBag, spirits_),
  };
  WingSpiritBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingSpiritBag_descriptor_,
      WingSpiritBag::default_instance_,
      WingSpiritBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingSpiritBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingSpiritBag));
  SpiritGeneratorInfo_descriptor_ = file->message_type(25);
  static const int SpiritGeneratorInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritGeneratorInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritGeneratorInfo, is_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritGeneratorInfo, cost_money_),
  };
  SpiritGeneratorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritGeneratorInfo_descriptor_,
      SpiritGeneratorInfo::default_instance_,
      SpiritGeneratorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritGeneratorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritGeneratorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritGeneratorInfo));
  EquipInfo_descriptor_ = file->message_type(26);
  static const int EquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, mark_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  AttributeData_descriptor_ = file->message_type(27);
  static const int AttributeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, value_),
  };
  AttributeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttributeData_descriptor_,
      AttributeData::default_instance_,
      AttributeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttributeData));
  EquipStoneData_descriptor_ = file->message_type(28);
  static const int EquipStoneData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, stone_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, cur_socket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, max_socket_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, strength_client_chance_),
  };
  EquipStoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoneData_descriptor_,
      EquipStoneData::default_instance_,
      EquipStoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoneData));
  EquipStoneData_StoneData_descriptor_ = EquipStoneData_descriptor_->nested_type(0);
  static const int EquipStoneData_StoneData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, slot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, stone_id_),
  };
  EquipStoneData_StoneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipStoneData_StoneData_descriptor_,
      EquipStoneData_StoneData::default_instance_,
      EquipStoneData_StoneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipStoneData_StoneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipStoneData_StoneData));
  DBSlotData_descriptor_ = file->message_type(29);
  static const int DBSlotData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, locked_attr_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, stone_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, socket_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_fail_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, strength_client_chance_),
  };
  DBSlotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBSlotData_descriptor_,
      DBSlotData::default_instance_,
      DBSlotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSlotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBSlotData));
  EquipDetail_descriptor_ = file->message_type(30);
  static const int EquipDetail_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, expired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, bind_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, extra_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, strength_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, stone_attr_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, locked_attr_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, stone_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, wing_info_),
  };
  EquipDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDetail_descriptor_,
      EquipDetail::default_instance_,
      EquipDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDetail));
  FighterInfo_descriptor_ = file->message_type(31);
  static const int FighterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, battle_index_),
  };
  FighterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FighterInfo_descriptor_,
      FighterInfo::default_instance_,
      FighterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FighterInfo));
  LineupInfo_descriptor_ = file->message_type(32);
  static const int LineupInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, fighter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, lineup_fight_capacity_),
  };
  LineupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineupInfo_descriptor_,
      LineupInfo::default_instance_,
      LineupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineupInfo));
  Money1_descriptor_ = file->message_type(33);
  static const int Money1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, num_),
  };
  Money1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money1_descriptor_,
      Money1::default_instance_,
      Money1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money1));
  Money_descriptor_ = file->message_type(34);
  static const int Money_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, money_),
  };
  Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money_descriptor_,
      Money::default_instance_,
      Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money));
  QuestAction_descriptor_ = file->message_type(35);
  static const int QuestAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, action_param_),
  };
  QuestAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestAction_descriptor_,
      QuestAction::default_instance_,
      QuestAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestAction));
  QuestActionsPb_descriptor_ = file->message_type(36);
  static const int QuestActionsPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, actions_),
  };
  QuestActionsPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestActionsPb_descriptor_,
      QuestActionsPb::default_instance_,
      QuestActionsPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestActionsPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestActionsPb));
  QuestPb_descriptor_ = file->message_type(37);
  static const int QuestPb_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, reward_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, circle_index_),
  };
  QuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPb_descriptor_,
      QuestPb::default_instance_,
      QuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPb));
  QuestPreCondition_descriptor_ = file->message_type(38);
  static const int QuestPreCondition_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pre_quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, player_level_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, player_level_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, auto_accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pro_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, pre_quest_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, post_quest_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, auto_commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, can_be_cancelled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, daily_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, need_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, need_guild_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, repeatable_),
  };
  QuestPreCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestPreCondition_descriptor_,
      QuestPreCondition::default_instance_,
      QuestPreCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestPreCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestPreCondition));
  QuestRewards_descriptor_ = file->message_type(39);
  static const int QuestRewards_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, guild_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, guild_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, guild_crystal_),
  };
  QuestRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRewards_descriptor_,
      QuestRewards::default_instance_,
      QuestRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRewards));
  QuestRewards_QuestRewardItem_descriptor_ = QuestRewards_descriptor_->nested_type(0);
  static const int QuestRewards_QuestRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, item_num_),
  };
  QuestRewards_QuestRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestRewards_QuestRewardItem_descriptor_,
      QuestRewards_QuestRewardItem::default_instance_,
      QuestRewards_QuestRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestRewards_QuestRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestRewards_QuestRewardItem));
  QuestProtoype_descriptor_ = file->message_type(40);
  static const int QuestProtoype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, pre_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, quest_type_),
  };
  QuestProtoype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestProtoype_descriptor_,
      QuestProtoype::default_instance_,
      QuestProtoype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestProtoype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestProtoype));
  GuildCrystalReward_descriptor_ = file->message_type(41);
  static const int GuildCrystalReward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, picked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, collecting_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, collecting_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, display_id_),
  };
  GuildCrystalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCrystalReward_descriptor_,
      GuildCrystalReward::default_instance_,
      GuildCrystalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCrystalReward));
  TreasureBoxReward_descriptor_ = file->message_type(42);
  static const int TreasureBoxReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, act_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, map_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, icon_id_),
  };
  TreasureBoxReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureBoxReward_descriptor_,
      TreasureBoxReward::default_instance_,
      TreasureBoxReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBoxReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureBoxReward));
  GuildCrystalTowerActivityData_descriptor_ = file->message_type(43);
  static const int GuildCrystalTowerActivityData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, last_activity_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, tower_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, start_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, activity_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, reward_count_down_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, piece_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, tower_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, activity_status_),
  };
  GuildCrystalTowerActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCrystalTowerActivityData_descriptor_,
      GuildCrystalTowerActivityData::default_instance_,
      GuildCrystalTowerActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCrystalTowerActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCrystalTowerActivityData));
  PlayerPosBeforeInstance_descriptor_ = file->message_type(44);
  static const int PlayerPosBeforeInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosBeforeInstance, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosBeforeInstance, map_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosBeforeInstance, map_y_),
  };
  PlayerPosBeforeInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPosBeforeInstance_descriptor_,
      PlayerPosBeforeInstance::default_instance_,
      PlayerPosBeforeInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosBeforeInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPosBeforeInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPosBeforeInstance));
  TeamMemberInfo_descriptor_ = file->message_type(45);
  static const int TeamMemberInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, seq_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, fight_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, yingling_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, is_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, wing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, titile_),
  };
  TeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberInfo_descriptor_,
      TeamMemberInfo::default_instance_,
      TeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberInfo));
  TeamInfo_descriptor_ = file->message_type(46);
  static const int TeamInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, leader_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_member_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, cur_team_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, objective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, custom_pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, difficult_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, min_level_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, add_member_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_battle_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, fighter_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_create_type_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  CoolDown_descriptor_ = file->message_type(47);
  static const int CoolDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, sec_),
  };
  CoolDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoolDown_descriptor_,
      CoolDown::default_instance_,
      CoolDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoolDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoolDown));
  RoleCoolDownPb_descriptor_ = file->message_type(48);
  static const int RoleCoolDownPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, cool_down_),
  };
  RoleCoolDownPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCoolDownPb_descriptor_,
      RoleCoolDownPb::default_instance_,
      RoleCoolDownPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCoolDownPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCoolDownPb));
  DailyCountLimit_descriptor_ = file->message_type(49);
  static const int DailyCountLimit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, limit_purchase_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, current_purchase_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, add_count_),
  };
  DailyCountLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyCountLimit_descriptor_,
      DailyCountLimit::default_instance_,
      DailyCountLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyCountLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyCountLimit));
  RoleDailyLimitPb_descriptor_ = file->message_type(50);
  static const int RoleDailyLimitPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, daily_limit_),
  };
  RoleDailyLimitPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyLimitPb_descriptor_,
      RoleDailyLimitPb::default_instance_,
      RoleDailyLimitPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyLimitPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyLimitPb));
  DBRoleLimitDataPb_descriptor_ = file->message_type(51);
  static const int DBRoleLimitDataPb_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, cool_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, count_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, hired_yingling_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, strength_equip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, guild_contrib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, youli_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, yingling_combo_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, yingling_train_status_),
  };
  DBRoleLimitDataPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBRoleLimitDataPb_descriptor_,
      DBRoleLimitDataPb::default_instance_,
      DBRoleLimitDataPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBRoleLimitDataPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBRoleLimitDataPb));
  HiredYinglingCount_descriptor_ = file->message_type(52);
  static const int HiredYinglingCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiredYinglingCount, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiredYinglingCount, count_),
  };
  HiredYinglingCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HiredYinglingCount_descriptor_,
      HiredYinglingCount::default_instance_,
      HiredYinglingCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiredYinglingCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiredYinglingCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HiredYinglingCount));
  RoleHiredYinglingCount_descriptor_ = file->message_type(53);
  static const int RoleHiredYinglingCount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, yingling_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, yingling_pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, yingling_quality_),
  };
  RoleHiredYinglingCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHiredYinglingCount_descriptor_,
      RoleHiredYinglingCount::default_instance_,
      RoleHiredYinglingCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHiredYinglingCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHiredYinglingCount));
  StrengthEquipCount_descriptor_ = file->message_type(54);
  static const int StrengthEquipCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipCount, strength_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipCount, count_),
  };
  StrengthEquipCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthEquipCount_descriptor_,
      StrengthEquipCount::default_instance_,
      StrengthEquipCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthEquipCount));
  RoleStrengthEquipCount_descriptor_ = file->message_type(55);
  static const int RoleStrengthEquipCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStrengthEquipCount, data_),
  };
  RoleStrengthEquipCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleStrengthEquipCount_descriptor_,
      RoleStrengthEquipCount::default_instance_,
      RoleStrengthEquipCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStrengthEquipCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleStrengthEquipCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleStrengthEquipCount));
  DailyQuest_descriptor_ = file->message_type(56);
  static const int DailyQuest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, reward_coin_),
  };
  DailyQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuest_descriptor_,
      DailyQuest::default_instance_,
      DailyQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuest));
  DailyQuestPb_descriptor_ = file->message_type(57);
  static const int DailyQuestPb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, daily_quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, accepted_daily_quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, xunluo_quest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, guild_circle_quest_),
  };
  DailyQuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuestPb_descriptor_,
      DailyQuestPb::default_instance_,
      DailyQuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuestPb));
  XunluoQuestPb_descriptor_ = file->message_type(58);
  static const int XunluoQuestPb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, cur_circle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, xunluo_reward_coin_),
  };
  XunluoQuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XunluoQuestPb_descriptor_,
      XunluoQuestPb::default_instance_,
      XunluoQuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XunluoQuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XunluoQuestPb));
  GuildCircleQuestPb_descriptor_ = file->message_type(59);
  static const int GuildCircleQuestPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCircleQuestPb, cur_circle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCircleQuestPb, quest_id_),
  };
  GuildCircleQuestPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCircleQuestPb_descriptor_,
      GuildCircleQuestPb::default_instance_,
      GuildCircleQuestPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCircleQuestPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCircleQuestPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCircleQuestPb));
  PlayerFlagPb_descriptor_ = file->message_type(60);
  static const int PlayerFlagPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, value_),
  };
  PlayerFlagPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagPb_descriptor_,
      PlayerFlagPb::default_instance_,
      PlayerFlagPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagPb));
  PlayerFlagDataPb_descriptor_ = file->message_type(61);
  static const int PlayerFlagDataPb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, data_),
  };
  PlayerFlagDataPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFlagDataPb_descriptor_,
      PlayerFlagDataPb::default_instance_,
      PlayerFlagDataPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFlagDataPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFlagDataPb));
  TrainAttribute_descriptor_ = file->message_type(62);
  static const int TrainAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttribute, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttribute, train_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttribute, unsave_train_attribute_),
  };
  TrainAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainAttribute_descriptor_,
      TrainAttribute::default_instance_,
      TrainAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainAttribute));
  ArenaPlayerInfo_descriptor_ = file->message_type(63);
  static const int ArenaPlayerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, titile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, max_cont_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, cur_cont_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, fight_capacity_),
  };
  ArenaPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayerInfo_descriptor_,
      ArenaPlayerInfo::default_instance_,
      ArenaPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayerInfo));
  TreasureBox_descriptor_ = file->message_type(64);
  static const int TreasureBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, item_info_),
  };
  TreasureBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureBox_descriptor_,
      TreasureBox::default_instance_,
      TreasureBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureBox));
  UsedName_descriptor_ = file->message_type(65);
  static const int UsedName_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, status_),
  };
  UsedName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsedName_descriptor_,
      UsedName::default_instance_,
      UsedName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsedName));
  UsedNameData_descriptor_ = file->message_type(66);
  static const int UsedNameData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, used_name_),
  };
  UsedNameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsedNameData_descriptor_,
      UsedNameData::default_instance_,
      UsedNameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsedNameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsedNameData));
  UnuseNameMsg_descriptor_ = file->message_type(67);
  static const int UnuseNameMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, name_),
  };
  UnuseNameMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnuseNameMsg_descriptor_,
      UnuseNameMsg::default_instance_,
      UnuseNameMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnuseNameMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnuseNameMsg));
  HideNpcData_descriptor_ = file->message_type(68);
  static const int HideNpcData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, is_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, rotate_),
  };
  HideNpcData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HideNpcData_descriptor_,
      HideNpcData::default_instance_,
      HideNpcData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HideNpcData));
  HideNpcPb_descriptor_ = file->message_type(69);
  static const int HideNpcPb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, npc_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, hide_datas_),
  };
  HideNpcPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HideNpcPb_descriptor_,
      HideNpcPb::default_instance_,
      HideNpcPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideNpcPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HideNpcPb));
  NpcPosition_descriptor_ = file->message_type(70);
  static const int NpcPosition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, rotate_),
  };
  NpcPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcPosition_descriptor_,
      NpcPosition::default_instance_,
      NpcPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcPosition));
  OpenedFunctionNotify_descriptor_ = file->message_type(71);
  static const int OpenedFunctionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, opened_function_),
  };
  OpenedFunctionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenedFunctionNotify_descriptor_,
      OpenedFunctionNotify::default_instance_,
      OpenedFunctionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedFunctionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenedFunctionNotify));
  GetBuddyTemplateAttributeRequest_descriptor_ = file->message_type(72);
  static const int GetBuddyTemplateAttributeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, level_),
  };
  GetBuddyTemplateAttributeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuddyTemplateAttributeRequest_descriptor_,
      GetBuddyTemplateAttributeRequest::default_instance_,
      GetBuddyTemplateAttributeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuddyTemplateAttributeRequest));
  GetBuddyTemplateAttributeResponse_descriptor_ = file->message_type(73);
  static const int GetBuddyTemplateAttributeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, bare_attr_list_),
  };
  GetBuddyTemplateAttributeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBuddyTemplateAttributeResponse_descriptor_,
      GetBuddyTemplateAttributeResponse::default_instance_,
      GetBuddyTemplateAttributeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBuddyTemplateAttributeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBuddyTemplateAttributeResponse));
  YouLiMapData_descriptor_ = file->message_type(74);
  static const int YouLiMapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, grid_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, cur_grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, youli_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, max_youli_num_),
  };
  YouLiMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouLiMapData_descriptor_,
      YouLiMapData::default_instance_,
      YouLiMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouLiMapData));
  YouLiMapData_GridData_descriptor_ = YouLiMapData_descriptor_->nested_type(0);
  static const int YouLiMapData_GridData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData_GridData, grid_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData_GridData, grid_type_),
  };
  YouLiMapData_GridData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YouLiMapData_GridData_descriptor_,
      YouLiMapData_GridData::default_instance_,
      YouLiMapData_GridData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData_GridData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YouLiMapData_GridData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YouLiMapData_GridData));
  YinglingComboStatus_ComboMember_descriptor_ = file->message_type(75);
  static const int YinglingComboStatus_ComboMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_ComboMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_ComboMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_ComboMember, status_),
  };
  YinglingComboStatus_ComboMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingComboStatus_ComboMember_descriptor_,
      YinglingComboStatus_ComboMember::default_instance_,
      YinglingComboStatus_ComboMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_ComboMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_ComboMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingComboStatus_ComboMember));
  YinglingComboStatus_Combo_descriptor_ = file->message_type(76);
  static const int YinglingComboStatus_Combo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, combo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, combo_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, combo_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, member_list_),
  };
  YinglingComboStatus_Combo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingComboStatus_Combo_descriptor_,
      YinglingComboStatus_Combo::default_instance_,
      YinglingComboStatus_Combo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus_Combo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingComboStatus_Combo));
  YinglingComboStatus_descriptor_ = file->message_type(77);
  static const int YinglingComboStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus, combo_list_),
  };
  YinglingComboStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingComboStatus_descriptor_,
      YinglingComboStatus::default_instance_,
      YinglingComboStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingComboStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingComboStatus));
  YinglingTrainStatus_descriptor_ = file->message_type(78);
  static const int YinglingTrainStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingTrainStatus, train_attribute_list_),
  };
  YinglingTrainStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YinglingTrainStatus_descriptor_,
      YinglingTrainStatus::default_instance_,
      YinglingTrainStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingTrainStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YinglingTrainStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YinglingTrainStatus));
  MessageModule_descriptor_ = file->enum_type(0);
  MessageType_descriptor_ = file->enum_type(1);
  ItemPositionType_descriptor_ = file->enum_type(2);
  DirectionType_descriptor_ = file->enum_type(3);
  MessageAction_descriptor_ = file->enum_type(4);
  AttrChangeType_descriptor_ = file->enum_type(5);
  ARENA_SELF_NOTICE_TYPE_descriptor_ = file->enum_type(6);
  ARENA_PUBLIC_NOTICE_TYPE_descriptor_ = file->enum_type(7);
  PUBLIC_NOTICE_TYPE_descriptor_ = file->enum_type(8);
  Profession_descriptor_ = file->enum_type(9);
  Gender_descriptor_ = file->enum_type(10);
  GameStatus_descriptor_ = file->enum_type(11);
  AccountStatus_descriptor_ = file->enum_type(12);
  LEVEL_UP_TYPE_descriptor_ = file->enum_type(13);
  PRACTICE_MODE_descriptor_ = file->enum_type(14);
  PAY_FUNCTION_TYPE_descriptor_ = file->enum_type(15);
  ENUM_ATTR_descriptor_ = file->enum_type(16);
  SKIP_FIGHT_TYPE_descriptor_ = file->enum_type(17);
  FIGHT_TYPE_descriptor_ = file->enum_type(18);
  YinglingStatus_descriptor_ = file->enum_type(19);
  YinglingQuality_descriptor_ = file->enum_type(20);
  RefreshYinglingListType_descriptor_ = file->enum_type(21);
  AnnounceType_descriptor_ = file->enum_type(22);
  ItemType_descriptor_ = file->enum_type(23);
  EquipPosition_descriptor_ = file->enum_type(24);
  LINE_UP_OPERATION_descriptor_ = file->enum_type(25);
  UPDATE_BATTLE_SKILL_TYPE_descriptor_ = file->enum_type(26);
  MONEY_TYPE_descriptor_ = file->enum_type(27);
  QuestActionType_descriptor_ = file->enum_type(28);
  QuestAction_ClientActionType_descriptor_ = file->enum_type(29);
  QuestStatus_descriptor_ = file->enum_type(30);
  QuestType_descriptor_ = file->enum_type(31);
  TreasureBoxBonusType_descriptor_ = file->enum_type(32);
  ActivityStatus_descriptor_ = file->enum_type(33);
  DIFFICULTY_LEVEL_descriptor_ = file->enum_type(34);
  TEAM_OBJECTIVE_TYPE_descriptor_ = file->enum_type(35);
  TEAM_ADD_TYPE_descriptor_ = file->enum_type(36);
  TEAM_OPERATION_descriptor_ = file->enum_type(37);
  TEAM_APPLY_RESULT_descriptor_ = file->enum_type(38);
  TEAM_LINEUP_OPERATION_descriptor_ = file->enum_type(39);
  SERVER_SYNC_TEAM_TYPE_descriptor_ = file->enum_type(40);
  RoleLimitType_descriptor_ = file->enum_type(41);
  FunctionLimitType_descriptor_ = file->enum_type(42);
  NumberLimitType_descriptor_ = file->enum_type(43);
  VipSettingsType_descriptor_ = file->enum_type(44);
  PlayerBitType_descriptor_ = file->enum_type(45);
  PlayerFlagType_descriptor_ = file->enum_type(46);
  StartupActivityType_descriptor_ = file->enum_type(47);
  ClientPlayerFlagType_descriptor_ = file->enum_type(48);
  TrainType_descriptor_ = file->enum_type(49);
  BUY_MORE_TIMES_TYPE_descriptor_ = file->enum_type(50);
  BUY_CLEAR_CD_TYPE_descriptor_ = file->enum_type(51);
  UniqueNameType_descriptor_ = file->enum_type(52);
  GuildSkillStatus_descriptor_ = file->enum_type(53);
  FunctionType_descriptor_ = file->enum_type(54);
  LivenessType_descriptor_ = file->enum_type(55);
  PlayerConfigType_descriptor_ = file->enum_type(56);
  FriendConfigType_descriptor_ = file->enum_type(57);
  UpdateMonsterBuffType_descriptor_ = file->enum_type(58);
  TeamChannelMemberNotifyType_descriptor_ = file->enum_type(59);
  TitleId_descriptor_ = file->enum_type(60);
  ROOM_OPERATION_descriptor_ = file->enum_type(61);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCardInfo_descriptor_, &InstanceCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceWantedInfo_descriptor_, &InstanceWantedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fighter_descriptor_, &Fighter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBonus_descriptor_, &SkillBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPhyStrengthInfo_descriptor_, &PlayerPhyStrengthInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCInfo_descriptor_, &NPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaojuInfo_descriptor_, &BaojuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleSkillInfo_descriptor_, &BattleSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BankInfo_descriptor_, &BankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingInfo_descriptor_, &YinglingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuddyDetailInfo_descriptor_, &BuddyDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBIntPair_descriptor_, &PBIntPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRelationData_descriptor_, &PlayerRelationData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfo_descriptor_, &InstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceDetail_descriptor_, &InstanceDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterInfo_descriptor_, &MonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSpiritInfo_descriptor_, &WingSpiritInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSlotInfo_descriptor_, &WingSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingItemInfo_descriptor_, &WingItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingSpiritBag_descriptor_, &WingSpiritBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritGeneratorInfo_descriptor_, &SpiritGeneratorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttributeData_descriptor_, &AttributeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoneData_descriptor_, &EquipStoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipStoneData_StoneData_descriptor_, &EquipStoneData_StoneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBSlotData_descriptor_, &DBSlotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDetail_descriptor_, &EquipDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FighterInfo_descriptor_, &FighterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineupInfo_descriptor_, &LineupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money1_descriptor_, &Money1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money_descriptor_, &Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestAction_descriptor_, &QuestAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestActionsPb_descriptor_, &QuestActionsPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPb_descriptor_, &QuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestPreCondition_descriptor_, &QuestPreCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRewards_descriptor_, &QuestRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestRewards_QuestRewardItem_descriptor_, &QuestRewards_QuestRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestProtoype_descriptor_, &QuestProtoype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCrystalReward_descriptor_, &GuildCrystalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureBoxReward_descriptor_, &TreasureBoxReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCrystalTowerActivityData_descriptor_, &GuildCrystalTowerActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPosBeforeInstance_descriptor_, &PlayerPosBeforeInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberInfo_descriptor_, &TeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoolDown_descriptor_, &CoolDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCoolDownPb_descriptor_, &RoleCoolDownPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyCountLimit_descriptor_, &DailyCountLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyLimitPb_descriptor_, &RoleDailyLimitPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBRoleLimitDataPb_descriptor_, &DBRoleLimitDataPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HiredYinglingCount_descriptor_, &HiredYinglingCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHiredYinglingCount_descriptor_, &RoleHiredYinglingCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthEquipCount_descriptor_, &StrengthEquipCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleStrengthEquipCount_descriptor_, &RoleStrengthEquipCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuest_descriptor_, &DailyQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuestPb_descriptor_, &DailyQuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XunluoQuestPb_descriptor_, &XunluoQuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCircleQuestPb_descriptor_, &GuildCircleQuestPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagPb_descriptor_, &PlayerFlagPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFlagDataPb_descriptor_, &PlayerFlagDataPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainAttribute_descriptor_, &TrainAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayerInfo_descriptor_, &ArenaPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureBox_descriptor_, &TreasureBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsedName_descriptor_, &UsedName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsedNameData_descriptor_, &UsedNameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnuseNameMsg_descriptor_, &UnuseNameMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HideNpcData_descriptor_, &HideNpcData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HideNpcPb_descriptor_, &HideNpcPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcPosition_descriptor_, &NpcPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenedFunctionNotify_descriptor_, &OpenedFunctionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuddyTemplateAttributeRequest_descriptor_, &GetBuddyTemplateAttributeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBuddyTemplateAttributeResponse_descriptor_, &GetBuddyTemplateAttributeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouLiMapData_descriptor_, &YouLiMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YouLiMapData_GridData_descriptor_, &YouLiMapData_GridData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingComboStatus_ComboMember_descriptor_, &YinglingComboStatus_ComboMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingComboStatus_Combo_descriptor_, &YinglingComboStatus_Combo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingComboStatus_descriptor_, &YinglingComboStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YinglingTrainStatus_descriptor_, &YinglingTrainStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fcommon_2eproto() {
  delete InstanceCardInfo::default_instance_;
  delete InstanceCardInfo_reflection_;
  delete InstanceWantedInfo::default_instance_;
  delete InstanceWantedInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete Fighter::default_instance_;
  delete Fighter_reflection_;
  delete SkillBonus::default_instance_;
  delete SkillBonus_reflection_;
  delete PlayerPhyStrengthInfo::default_instance_;
  delete PlayerPhyStrengthInfo_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete NPCInfo::default_instance_;
  delete NPCInfo_reflection_;
  delete BaojuInfo::default_instance_;
  delete BaojuInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete BattleSkillInfo::default_instance_;
  delete BattleSkillInfo_reflection_;
  delete BankInfo::default_instance_;
  delete BankInfo_reflection_;
  delete YinglingInfo::default_instance_;
  delete YinglingInfo_reflection_;
  delete BuddyDetailInfo::default_instance_;
  delete BuddyDetailInfo_reflection_;
  delete PBIntPair::default_instance_;
  delete PBIntPair_reflection_;
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete PlayerRelationData::default_instance_;
  delete PlayerRelationData_reflection_;
  delete InstanceInfo::default_instance_;
  delete InstanceInfo_reflection_;
  delete InstanceDetail::default_instance_;
  delete InstanceDetail_reflection_;
  delete MonsterInfo::default_instance_;
  delete MonsterInfo_reflection_;
  delete WingSpiritInfo::default_instance_;
  delete WingSpiritInfo_reflection_;
  delete WingSlotInfo::default_instance_;
  delete WingSlotInfo_reflection_;
  delete WingItemInfo::default_instance_;
  delete WingItemInfo_reflection_;
  delete WingSpiritBag::default_instance_;
  delete WingSpiritBag_reflection_;
  delete SpiritGeneratorInfo::default_instance_;
  delete SpiritGeneratorInfo_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete AttributeData::default_instance_;
  delete AttributeData_reflection_;
  delete EquipStoneData::default_instance_;
  delete EquipStoneData_reflection_;
  delete EquipStoneData_StoneData::default_instance_;
  delete EquipStoneData_StoneData_reflection_;
  delete DBSlotData::default_instance_;
  delete DBSlotData_reflection_;
  delete EquipDetail::default_instance_;
  delete EquipDetail_reflection_;
  delete FighterInfo::default_instance_;
  delete FighterInfo_reflection_;
  delete LineupInfo::default_instance_;
  delete LineupInfo_reflection_;
  delete Money1::default_instance_;
  delete Money1_reflection_;
  delete Money::default_instance_;
  delete Money_reflection_;
  delete QuestAction::default_instance_;
  delete QuestAction_reflection_;
  delete QuestActionsPb::default_instance_;
  delete QuestActionsPb_reflection_;
  delete QuestPb::default_instance_;
  delete QuestPb_reflection_;
  delete QuestPreCondition::default_instance_;
  delete QuestPreCondition_reflection_;
  delete QuestRewards::default_instance_;
  delete QuestRewards_reflection_;
  delete QuestRewards_QuestRewardItem::default_instance_;
  delete QuestRewards_QuestRewardItem_reflection_;
  delete QuestProtoype::default_instance_;
  delete QuestProtoype_reflection_;
  delete GuildCrystalReward::default_instance_;
  delete GuildCrystalReward_reflection_;
  delete TreasureBoxReward::default_instance_;
  delete TreasureBoxReward_reflection_;
  delete GuildCrystalTowerActivityData::default_instance_;
  delete GuildCrystalTowerActivityData_reflection_;
  delete PlayerPosBeforeInstance::default_instance_;
  delete PlayerPosBeforeInstance_reflection_;
  delete TeamMemberInfo::default_instance_;
  delete TeamMemberInfo_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete CoolDown::default_instance_;
  delete CoolDown_reflection_;
  delete RoleCoolDownPb::default_instance_;
  delete RoleCoolDownPb_reflection_;
  delete DailyCountLimit::default_instance_;
  delete DailyCountLimit_reflection_;
  delete RoleDailyLimitPb::default_instance_;
  delete RoleDailyLimitPb_reflection_;
  delete DBRoleLimitDataPb::default_instance_;
  delete DBRoleLimitDataPb_reflection_;
  delete HiredYinglingCount::default_instance_;
  delete HiredYinglingCount_reflection_;
  delete RoleHiredYinglingCount::default_instance_;
  delete RoleHiredYinglingCount_reflection_;
  delete StrengthEquipCount::default_instance_;
  delete StrengthEquipCount_reflection_;
  delete RoleStrengthEquipCount::default_instance_;
  delete RoleStrengthEquipCount_reflection_;
  delete DailyQuest::default_instance_;
  delete DailyQuest_reflection_;
  delete DailyQuestPb::default_instance_;
  delete DailyQuestPb_reflection_;
  delete XunluoQuestPb::default_instance_;
  delete XunluoQuestPb_reflection_;
  delete GuildCircleQuestPb::default_instance_;
  delete GuildCircleQuestPb_reflection_;
  delete PlayerFlagPb::default_instance_;
  delete PlayerFlagPb_reflection_;
  delete PlayerFlagDataPb::default_instance_;
  delete PlayerFlagDataPb_reflection_;
  delete TrainAttribute::default_instance_;
  delete TrainAttribute_reflection_;
  delete ArenaPlayerInfo::default_instance_;
  delete ArenaPlayerInfo_reflection_;
  delete TreasureBox::default_instance_;
  delete TreasureBox_reflection_;
  delete UsedName::default_instance_;
  delete UsedName_reflection_;
  delete UsedNameData::default_instance_;
  delete UsedNameData_reflection_;
  delete UnuseNameMsg::default_instance_;
  delete UnuseNameMsg_reflection_;
  delete HideNpcData::default_instance_;
  delete HideNpcData_reflection_;
  delete HideNpcPb::default_instance_;
  delete HideNpcPb_reflection_;
  delete NpcPosition::default_instance_;
  delete NpcPosition_reflection_;
  delete OpenedFunctionNotify::default_instance_;
  delete OpenedFunctionNotify_reflection_;
  delete GetBuddyTemplateAttributeRequest::default_instance_;
  delete GetBuddyTemplateAttributeRequest_reflection_;
  delete GetBuddyTemplateAttributeResponse::default_instance_;
  delete GetBuddyTemplateAttributeResponse_reflection_;
  delete YouLiMapData::default_instance_;
  delete YouLiMapData_reflection_;
  delete YouLiMapData_GridData::default_instance_;
  delete YouLiMapData_GridData_reflection_;
  delete YinglingComboStatus_ComboMember::default_instance_;
  delete YinglingComboStatus_ComboMember_reflection_;
  delete YinglingComboStatus_Combo::default_instance_;
  delete YinglingComboStatus_Combo_reflection_;
  delete YinglingComboStatus::default_instance_;
  delete YinglingComboStatus_reflection_;
  delete YinglingTrainStatus::default_instance_;
  delete YinglingTrainStatus_reflection_;
}

void protobuf_AddDesc_game_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocols::common::protobuf_AddDesc_error_5fcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021game_common.proto\022\020protocols.common\032\020e"
    "rror_code.proto\"V\n\020InstanceCardInfo\022\017\n\007i"
    "tem_id\030\001 \002(\005\022\022\n\nitem_count\030\002 \002(\005\022\014\n\004type"
    "\030\003 \002(\005\022\017\n\007icon_id\030\004 \002(\005\"s\n\022InstanceWante"
    "dInfo\022\023\n\013instance_id\030\001 \002(\005\022\021\n\tleft_time\030"
    "\002 \001(\005\0225\n\tcard_info\030\003 \003(\0132\".protocols.com"
    "mon.InstanceCardInfo\"B\n\010BuffInfo\022\017\n\007buff"
    "_id\030\001 \002(\005\022\022\n\nbuff_value\030\002 \001(\005\022\021\n\tleft_ti"
    "me\030\003 \001(\005\"\234\002\n\007Fighter\022\014\n\004camp\030\001 \001(\005\022\r\n\005in"
    "dex\030\002 \001(\005\022\014\n\004guid\030\003 \001(\003\022\013\n\003tid\030\004 \001(\005\022\n\n\002"
    "hp\030\005 \001(\005\022\016\n\006max_hp\030\020 \001(\005\022\r\n\005level\030\006 \001(\005\022"
    "\021\n\tis_player\030\007 \001(\005\022\026\n\016is_team_leader\030\010 \001"
    "(\005\022\014\n\004name\030\t \001(\t\022\022\n\nowner_name\030\017 \001(\t\022\017\n\007"
    "quality\030\n \001(\005\022\022\n\nphy_attack\030\013 \001(\005\022\023\n\013phy"
    "_defence\030\014 \001(\005\022\022\n\nmag_attack\030\r \001(\005\022\023\n\013ma"
    "g_defence\030\016 \001(\005\"F\n\nSkillBonus\022\020\n\010skill_i"
    "d\030\001 \002(\005\022\023\n\013skill_level\030\003 \002(\005\022\021\n\texp_bonu"
    "s\030\002 \002(\005\"\275\001\n\025PlayerPhyStrengthInfo\022\027\n\014phy"
    "_strength\030\001 \001(\005:\0010\022\035\n\022phy_strength_limit"
    "\030\002 \001(\005:\0010\022\035\n\022extra_phy_strength\030\003 \001(\005:\0010"
    "\022#\n\030extra_phy_strength_limit\030\004 \001(\005:\0010\022(\n"
    "\035time_for_recover_phy_strength\030\005 \001(\005:\0010\""
    "\356\005\n\nPlayerInfo\022\014\n\004guid\030\001 \002(\003\022\013\n\003tid\030\020 \001("
    "\005\022\021\n\006map_id\030\002 \001(\005:\0011\022\020\n\005map_x\030\003 \001(\005:\0011\022\020"
    "\n\005map_y\030\004 \001(\005:\0011\022\024\n\tvip_level\030\005 \001(\005:\0010\0221"
    "\n\003job\030\006 \001(\0162\034.protocols.common.Professio"
    "n:\006WIZARD\022\024\n\tjob_level\030\007 \001(\005:\0011\022\017\n\004flag\030"
    "\010 \001(\005:\0010\022\014\n\004name\030\t \001(\t\022.\n\006gender\030\n \001(\0162\030"
    ".protocols.common.Gender:\004MALE\022\r\n\002hp\030\013 \001"
    "(\005:\0010\022\016\n\003exp\030\014 \001(\005:\0010\022\026\n\013vip_end_sec\030\r \001"
    "(\005:\0010\022\032\n\017lineup_capacity\030\025 \001(\005:\0010\0228\n\006sta"
    "tus\030\017 \001(\0162\034.protocols.common.GameStatus:"
    "\nGS_OFFLINE\022\023\n\013leader_guid\030\021 \001(\003\022\021\n\tserv"
    "er_id\030\024 \001(\005\022\023\n\010guild_id\030\022 \001(\005:\0010\022\024\n\nguil"
    "d_name\030\023 \001(\t:\000\022D\n\023player_phy_strength\030\027 "
    "\001(\0132\'.protocols.common.PlayerPhyStrength"
    "Info\022\032\n\017map_instance_id\030\026 \001(\005:\0010\022\026\n\013foll"
    "ow_guid\030\030 \001(\003:\0010\022\024\n\tdirection\030\031 \001(\005:\0011\022\030"
    "\n\020role_create_time\030\032 \001(\003\022\023\n\010wing_tid\030\033 \001"
    "(\005:\0010\022\026\n\013guild_title\030\034 \001(\005:\0010\022\020\n\005title\030\035"
    " \001(\005:\0010\022\027\n\014practice_exp\030\036 \001(\005:\0010\"O\n\007NPCI"
    "nfo\022\016\n\006npc_id\030\001 \002(\005\022\017\n\007npc_tid\030\002 \001(\005\022\020\n\010"
    "npc_name\030\003 \001(\t\022\021\n\tnpc_level\030\004 \001(\005\"\031\n\tBao"
    "juInfo\022\014\n\004guid\030\001 \002(\003\"\246\001\n\010ItemInfo\022\017\n\007ite"
    "m_id\030\001 \002(\003\022\020\n\005count\030\002 \001(\005:\0010\022\022\n\007expired\030"
    "\003 \001(\005:\0010\022\013\n\003pos\030\004 \001(\005\022\020\n\010pos_type\030\005 \001(\005\022"
    "\030\n\tbind_flag\030\006 \001(\010:\005false\022\031\n\016strength_le"
    "vel\030\007 \001(\005:\0010\022\017\n\004mark\030\010 \001(\005:\0010\"\364\001\n\tSkillI"
    "nfo\022\020\n\010skill_id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\034\n\020"
    "equip_slot_index\030\003 \001(\005:\002-1\022\013\n\003exp\030\004 \001(\005\022"
    "\030\n\ris_practicing\030\005 \001(\005:\0010\022\022\n\ndelta_time\030"
    "\006 \001(\005\022\025\n\rdelta_add_exp\030\007 \001(\005\022\025\n\rpractice"
    "_time\030\010 \001(\005\022\016\n\006status\030\t \001(\005\022\036\n\026time_left"
    "_for_research\030\n \001(\005\022\017\n\007is_used\030\013 \001(\005\"]\n\017"
    "BattleSkillInfo\022\020\n\010skill_id\030\001 \002(\005\022\r\n\005lev"
    "el\030\002 \002(\005\022\034\n\021battle_skill_type\030\003 \001(\005:\0012\022\013"
    "\n\003exp\030\004 \001(\005\"9\n\010BankInfo\022\014\n\004coin\030\001 \001(\005\022\016\n"
    "\006coupon\030\002 \001(\005\022\017\n\007diamond\030\003 \001(\005\"\376\001\n\014Yingl"
    "ingInfo\022\014\n\004guid\030\001 \002(\003\022\013\n\003tid\030\014 \002(\005\0221\n\003jo"
    "b\030\002 \001(\0162\034.protocols.common.Profession:\006W"
    "IZARD\022.\n\006gender\030\017 \001(\0162\030.protocols.common"
    ".Gender:\004MALE\022\024\n\tjob_level\030\003 \001(\005:\0010\022\014\n\004n"
    "ame\030\004 \002(\t\022\022\n\007quality\030\t \001(\005:\0010\022\031\n\016fight_c"
    "apacity\030\n \001(\005:\0010\022\035\n\022is_in_fight_lineup\030\020"
    " \001(\005:\0010\"\311\002\n\017BuddyDetailInfo\022\014\n\004guid\030\010 \002("
    "\003\022\014\n\004name\030\024 \002(\t\0228\n\017total_attr_list\030\005 \003(\013"
    "2\037.protocols.common.AttributeData\0227\n\016bar"
    "e_attr_list\030\006 \003(\0132\037.protocols.common.Att"
    "ributeData\022/\n\nequip_list\030\007 \003(\0132\033.protoco"
    "ls.common.EquipInfo\022\016\n\003exp\030\017 \001(\005:\0010\022\r\n\002h"
    "p\030\020 \001(\005:\0010\022\023\n\010cur_soul\030\021 \001(\005:\0010\022\023\n\010max_s"
    "oul\030\022 \001(\005:\0010\022\022\n\007quality\030\023 \001(\005:\0010\022\031\n\016figh"
    "t_capacity\030\025 \001(\005:\0010\"\'\n\tPBIntPair\022\013\n\003key\030"
    "\001 \002(\005\022\r\n\005value\030\002 \002(\005\"*\n\010Relation\022\014\n\004guid"
    "\030\001 \002(\003\022\020\n\010relation\030\002 \002(\005\"@\n\022PlayerRelati"
    "onData\022*\n\006friend\030\001 \003(\0132\032.protocols.commo"
    "n.Relation\"2\n\014InstanceInfo\022\023\n\013instance_i"
    "d\030\001 \001(\005\022\r\n\005grade\030\002 \001(\005\"\250\001\n\016InstanceDetai"
    "l\022\023\n\013instance_id\030\001 \001(\005\022\r\n\005grade\030\002 \001(\005\022\016\n"
    "\006map_id\030\003 \001(\005\022\r\n\005map_x\030\004 \001(\005\022\r\n\005map_y\030\005 "
    "\001(\005\022\024\n\014monster_list\030\006 \003(\005\022\023\n\013killed_list"
    "\030\007 \003(\005\022\031\n\021last_transport_id\030\010 \001(\005\"\221\001\n\013Mo"
    "nsterInfo\022\014\n\004guid\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\r\n"
    "\002hp\030\003 \002(\005:\0010\022\020\n\005level\030\004 \001(\005:\0010\022\022\n\007drop_i"
    "d\030\005 \001(\005:\0010\022\016\n\003exp\030\006 \001(\005:\0010\022\020\n\010model_id\030\007"
    " \001(\014\022\017\n\007icon_id\030\010 \001(\014\"\312\001\n\016WingSpiritInfo"
    "\022\017\n\007item_id\030\001 \001(\003\022\014\n\004t_id\030\t \001(\005\022\023\n\013is_fr"
    "agment\030\002 \001(\010\022\r\n\005level\030\003 \001(\005\022\020\n\010self_exp\030"
    "\004 \001(\005\022\017\n\007add_exp\030\005 \001(\005\022\017\n\007max_exp\030\006 \001(\005\022"
    "2\n\tattr_plus\030\007 \003(\0132\037.protocols.common.At"
    "tributeData\022\r\n\005index\030\010 \001(\005\"R\n\014WingSlotIn"
    "fo\022\020\n\010slot_num\030\001 \001(\005\0220\n\006spirit\030\002 \001(\0132 .p"
    "rotocols.common.WingSpiritInfo\"\211\001\n\014WingI"
    "temInfo\022\020\n\010wing_tid\030\001 \001(\005\022\024\n\014wing_item_i"
    "d\030\005 \001(\003\022\023\n\013equipt_guid\030\002 \001(\003\022-\n\005slots\030\003 "
    "\003(\0132\036.protocols.common.WingSlotInfo\022\r\n\005p"
    "oint\030\004 \001(\003\"e\n\rWingSpiritBag\022\017\n\007max_num\030\001"
    " \001(\005\022\020\n\010open_num\030\002 \001(\005\0221\n\007spirits\030\003 \003(\0132"
    " .protocols.common.WingSpiritInfo\"G\n\023Spi"
    "ritGeneratorInfo\022\r\n\005level\030\001 \001(\005\022\r\n\005is_on"
    "\030\002 \001(\010\022\022\n\ncost_money\030\003 \001(\005\"x\n\tEquipInfo\022"
    "\017\n\007item_id\030\001 \002(\003\0221\n\010position\030\002 \001(\0162\037.pro"
    "tocols.common.EquipPosition\022\031\n\016strength_"
    "level\030\003 \001(\005:\0010\022\014\n\004mark\030\004 \001(\005\"+\n\rAttribut"
    "eData\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"\327\001\n\016Eq"
    "uipStoneData\022>\n\nstone_data\030\002 \003(\0132*.proto"
    "cols.common.EquipStoneData.StoneData\022\030\n\020"
    "cur_socket_count\030\003 \001(\005\022\030\n\020max_socket_cou"
    "nt\030\004 \001(\005\022\036\n\026strength_client_chance\030\005 \001(\005"
    "\0321\n\tStoneData\022\022\n\nslot_index\030\001 \001(\005\022\020\n\010sto"
    "ne_id\030\002 \001(\005\"\304\001\n\nDBSlotData\022\030\n\020locked_att"
    "r_bits\030\001 \001(\005\0224\n\nstone_data\030\002 \001(\0132 .proto"
    "cols.common.EquipStoneData\022\022\n\nsocket_num"
    "\030\003 \001(\005\022\031\n\021strength_fail_num\030\004 \001(\005\022\027\n\017str"
    "ength_chance\030\005 \001(\005\022\036\n\026strength_client_ch"
    "ance\030\006 \001(\005\"\360\003\n\013EquipDetail\022\017\n\007item_id\030\001 "
    "\002(\003\022\022\n\007expired\030\002 \001(\005:\0010\022\031\n\016strength_leve"
    "l\030\003 \001(\005:\0010\022\025\n\nslot_count\030\004 \001(\005:\0010\0222\n\tatt"
    "r_list\030\005 \003(\0132\037.protocols.common.Attribut"
    "eData\022\024\n\tbind_flag\030\006 \001(\005:\0010\0228\n\017extra_att"
    "r_list\030\007 \003(\0132\037.protocols.common.Attribut"
    "eData\022;\n\022strength_attr_list\030\t \003(\0132\037.prot"
    "ocols.common.AttributeData\022\014\n\004mark\030\n \001(\005"
    "\0228\n\017stone_attr_list\030\013 \003(\0132\037.protocols.co"
    "mmon.AttributeData\022\030\n\020locked_attr_bits\030\014"
    " \001(\005\0224\n\nstone_data\030\r \001(\0132 .protocols.com"
    "mon.EquipStoneData\0221\n\twing_info\030\016 \001(\0132\036."
    "protocols.common.WingItemInfo\"4\n\013Fighter"
    "Info\022\014\n\004guid\030\001 \002(\003\022\027\n\014battle_index\030\002 \002(\005"
    ":\0010\"\234\001\n\nLineupInfo\022\021\n\tlineup_id\030\001 \002(\005\022\023\n"
    "\013lineup_name\030\002 \002(\t\022\027\n\017battle_skill_id\030\003 "
    "\003(\005\022.\n\007fighter\030\004 \003(\0132\035.protocols.common."
    "FighterInfo\022\035\n\025lineup_fight_capacity\030\005 \001"
    "(\005\"G\n\006Money1\0220\n\nmoney_type\030\001 \002(\0162\034.proto"
    "cols.common.MONEY_TYPE\022\013\n\003num\030\002 \002(\003\"0\n\005M"
    "oney\022\'\n\005money\030\001 \003(\0132\030.protocols.common.M"
    "oney1\"[\n\013QuestAction\0226\n\013action_type\030\001 \001("
    "\0162!.protocols.common.QuestActionType\022\024\n\014"
    "action_param\030\002 \003(\005\"@\n\016QuestActionsPb\022.\n\007"
    "actions\030\001 \003(\0132\035.protocols.common.QuestAc"
    "tion\"\206\002\n\007QuestPb\022\020\n\010quest_id\030\001 \001(\005\0223\n\014qu"
    "est_status\030\002 \001(\0162\035.protocols.common.Ques"
    "tStatus\0221\n\007actions\030\003 \001(\0132 .protocols.com"
    "mon.QuestActionsPb\022B\n\nquest_type\030\004 \001(\0162\033"
    ".protocols.common.QuestType:\021QuestType_Z"
    "HUXIAN\022\022\n\nreward_exp\030\005 \001(\005\022\023\n\013reward_coi"
    "n\030\006 \001(\005\022\024\n\014circle_index\030\007 \001(\005\"\260\003\n\021QuestP"
    "reCondition\022\024\n\014pre_quest_id\030\001 \001(\005\022\033\n\020pla"
    "yer_level_min\030\002 \001(\005:\0011\022\030\n\020player_level_m"
    "ax\030\003 \001(\005\022\022\n\nstart_time\030\004 \001(\003\022\020\n\010end_time"
    "\030\005 \001(\003\022\021\n\tregion_id\030\006 \001(\003\022\032\n\013auto_accept"
    "\030\007 \001(\010:\005false\022/\n\tpro_limit\030\010 \001(\0162\034.proto"
    "cols.common.Profession\022\025\n\rpre_quest_ids\030"
    "\t \003(\005\022\026\n\016post_quest_ids\030\n \003(\005\022\032\n\013auto_co"
    "mmit\030\013 \001(\010:\005false\022\037\n\020can_be_cancelled\030\014 "
    "\001(\010:\005false\022\032\n\013daily_reset\030\r \001(\010:\005false\022\022"
    "\n\nneed_guild\030\016 \001(\010\022\030\n\020need_guild_check\030\017"
    " \001(\010\022\022\n\nrepeatable\030\020 \001(\010\"\343\001\n\014QuestReward"
    "s\022\013\n\003exp\030\001 \001(\005\022\014\n\004coin\030\002 \001(\005\022<\n\004item\030\003 \003"
    "(\0132..protocols.common.QuestRewards.Quest"
    "RewardItem\022\032\n\022guild_contribution\030\004 \001(\005\022\021"
    "\n\tguild_exp\030\005 \001(\005\022\025\n\rguild_crystal\030\006 \001(\005"
    "\0324\n\017QuestRewardItem\022\017\n\007item_id\030\001 \002(\005\022\020\n\010"
    "item_num\030\002 \001(\005\"\226\002\n\rQuestProtoype\022\020\n\010ques"
    "t_id\030\001 \002(\005\022\022\n\nquest_name\030\002 \001(\014\022:\n\rpre_co"
    "ndition\030\003 \001(\0132#.protocols.common.QuestPr"
    "eCondition\022.\n\007actions\030\004 \003(\0132\035.protocols."
    "common.QuestAction\022/\n\007rewards\030\005 \001(\0132\036.pr"
    "otocols.common.QuestRewards\022B\n\nquest_typ"
    "e\030\006 \001(\0162\033.protocols.common.QuestType:\021Qu"
    "estType_ZHUXIAN\"\252\001\n\022GuildCrystalReward\022\t"
    "\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\017\n\007item_id\030\003 \001(\005\022\022\n"
    "\nitem_count\030\004 \001(\005\022\016\n\006picked\030\005 \001(\010\022\034\n\024col"
    "lecting_player_id\030\006 \001(\005\022\027\n\017collecting_ti"
    "ck\030\007 \001(\005\022\022\n\ndisplay_id\030\010 \001(\005\"q\n\021Treasure"
    "BoxReward\022\016\n\006act_id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005"
    "\022\016\n\006map_id\030\003 \001(\005\022\r\n\005map_x\030\004 \001(\005\022\r\n\005map_y"
    "\030\005 \001(\005\022\017\n\007icon_id\030\006 \001(\005\"\300\002\n\035GuildCrystal"
    "TowerActivityData\022\036\n\026last_activity_time_"
    "sec\030\001 \001(\005\022\026\n\016tower_category\030\002 \001(\005\022\021\n\tsta"
    "rt_sec\030\003 \001(\005\022\031\n\021activity_duration\030\004 \001(\005\022"
    "\035\n\025reward_count_down_sec\030\005 \001(\005\022\023\n\013piece_"
    "count\030\006 \003(\005\0225\n\007rewards\030\007 \003(\0132$.protocols"
    ".common.GuildCrystalReward\022\023\n\013tower_leve"
    "l\030\010 \001(\005\0229\n\017activity_status\030\t \001(\0162 .proto"
    "cols.common.ActivityStatus\"G\n\027PlayerPosB"
    "eforeInstance\022\016\n\006map_id\030\001 \002(\005\022\r\n\005map_x\030\002"
    " \002(\005\022\r\n\005map_y\030\003 \002(\005\"\213\002\n\016TeamMemberInfo\022\016"
    "\n\006seq_no\030\001 \002(\005\022\014\n\004guid\030\002 \002(\003\022\014\n\004name\030\003 \001"
    "(\t\022\021\n\tis_online\030\004 \002(\005\022)\n\003job\030\005 \001(\0162\034.pro"
    "tocols.common.Profession\022\r\n\005level\030\006 \001(\005\022"
    "\026\n\016fight_capacity\030\010 \001(\005\0225\n\ryingling_info"
    "\030\007 \003(\0132\036.protocols.common.YinglingInfo\022\020"
    "\n\010is_ready\030\t \001(\010\022\017\n\007wing_id\030\n \001(\005\022\016\n\006tit"
    "ile\030\013 \001(\005\"\376\003\n\010TeamInfo\022\017\n\007team_id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\023\n\013leader_guid\030\003 \002(\003\022\031\n\021te"
    "am_member_limit\030\004 \002(\005\022\027\n\017cur_team_member"
    "\030\005 \001(\005\0228\n\tobjective\030\006 \001(\0162%.protocols.co"
    "mmon.TEAM_OBJECTIVE_TYPE\022\026\n\016custom_pass_"
    "id\030\007 \001(\005\022;\n\017difficult_level\030\010 \001(\0162\".prot"
    "ocols.common.DIFFICULTY_LEVEL\022\032\n\022min_lev"
    "el_required\030\t \001(\005\0228\n\017add_member_type\030\n \001"
    "(\0162\037.protocols.common.TEAM_ADD_TYPE\0225\n\013t"
    "eam_member\030\013 \003(\0132 .protocols.common.Team"
    "MemberInfo\022\034\n\024team_battle_skill_id\030\r \001(\005"
    "\0223\n\014fighter_info\030\016 \003(\0132\035.protocols.commo"
    "n.FighterInfo\022\033\n\020team_create_type\030\017 \001(\005:"
    "\0011\"%\n\010CoolDown\022\014\n\004type\030\001 \002(\005\022\013\n\003sec\030\002 \002("
    "\005\"\?\n\016RoleCoolDownPb\022-\n\tcool_down\030\002 \003(\0132\032"
    ".protocols.common.CoolDown\"\267\001\n\017DailyCoun"
    "tLimit\022\022\n\nlimit_type\030\001 \002(\005\022\023\n\013limit_coun"
    "t\030\002 \002(\005\022\025\n\rcurrent_count\030\003 \002(\005\022\034\n\024limit_"
    "purchase_count\030\004 \002(\005\022\036\n\026current_purchase"
    "_count\030\005 \002(\005\022\023\n\013update_time\030\006 \001(\005\022\021\n\tadd"
    "_count\030\007 \001(\005\"J\n\020RoleDailyLimitPb\0226\n\013dail"
    "y_limit\030\001 \003(\0132!.protocols.common.DailyCo"
    "untLimit\"\346\003\n\021DBRoleLimitDataPb\0223\n\tcool_d"
    "own\030\001 \001(\0132 .protocols.common.RoleCoolDow"
    "nPb\0227\n\013count_limit\030\002 \001(\0132\".protocols.com"
    "mon.RoleDailyLimitPb\022F\n\024hired_yingling_c"
    "ount\030\003 \001(\0132(.protocols.common.RoleHiredY"
    "inglingCount\022F\n\024strength_equip_count\030\004 \001"
    "(\0132(.protocols.common.RoleStrengthEquipC"
    "ount\022\025\n\rguild_contrib\030\005 \001(\005\0222\n\nyouli_dat"
    "a\030\006 \001(\0132\036.protocols.common.YouLiMapData\022"
    "B\n\023yingling_combo_data\030\007 \001(\0132%.protocols"
    ".common.YinglingComboStatus\022D\n\025yingling_"
    "train_status\030\010 \001(\0132%.protocols.common.Yi"
    "nglingTrainStatus\"4\n\022HiredYinglingCount\022"
    "\017\n\007quality\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"\336\001\n\026Role"
    "HiredYinglingCount\0222\n\004data\030\001 \003(\0132$.proto"
    "cols.common.HiredYinglingCount\022\024\n\014yingli"
    "ng_tid\030\002 \003(\005\022:\n\014yingling_pro\030\003 \003(\0132$.pro"
    "tocols.common.HiredYinglingCount\022>\n\020ying"
    "ling_quality\030\004 \003(\0132$.protocols.common.Hi"
    "redYinglingCount\";\n\022StrengthEquipCount\022\026"
    "\n\016strength_level\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"L\n"
    "\026RoleStrengthEquipCount\0222\n\004data\030\001 \003(\0132$."
    "protocols.common.StrengthEquipCount\"z\n\nD"
    "ailyQuest\022\020\n\010quest_id\030\001 \002(\005\022\017\n\007quality\030\002"
    " \002(\005\022\016\n\006status\030\003 \001(\005\022\020\n\010category\030\004 \002(\005\022\022"
    "\n\nreward_exp\030\005 \001(\005\022\023\n\013reward_coin\030\006 \001(\005\""
    "\370\001\n\014DailyQuestPb\0222\n\014daily_quests\030\001 \003(\0132\034"
    ".protocols.common.DailyQuest\022;\n\025accepted"
    "_daily_quests\030\002 \003(\0132\034.protocols.common.D"
    "ailyQuest\0225\n\014xunluo_quest\030\003 \001(\0132\037.protoc"
    "ols.common.XunluoQuestPb\022@\n\022guild_circle"
    "_quest\030\004 \001(\0132$.protocols.common.GuildCir"
    "cleQuestPb\"y\n\rXunluoQuestPb\022\030\n\020cur_circl"
    "e_index\030\003 \001(\005\022\027\n\017xunluo_quest_id\030\004 \001(\005\022\031"
    "\n\021xunluo_reward_exp\030\005 \001(\005\022\032\n\022xunluo_rewa"
    "rd_coin\030\006 \001(\005\"@\n\022GuildCircleQuestPb\022\030\n\020c"
    "ur_circle_index\030\001 \001(\005\022\020\n\010quest_id\030\002 \001(\005\""
    "+\n\014PlayerFlagPb\022\014\n\004type\030\001 \002(\005\022\r\n\005value\030\002"
    " \002(\005\"@\n\020PlayerFlagDataPb\022,\n\004data\030\001 \003(\0132\036"
    ".protocols.common.PlayerFlagPb\"\221\001\n\016Train"
    "Attribute\022\014\n\004guid\030\001 \001(\003\0224\n\017train_attribu"
    "te\030\002 \003(\0132\033.protocols.common.PBIntPair\022;\n"
    "\026unsave_train_attribute\030\003 \003(\0132\033.protocol"
    "s.common.PBIntPair\"\272\001\n\017ArenaPlayerInfo\022\014"
    "\n\004guid\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\r\n\005level\030\003 \002("
    "\005\022\020\n\010cur_rank\030\004 \002(\005\022\024\n\014highest_rank\030\007 \001("
    "\005\022\016\n\006titile\030\005 \001(\005\022\025\n\rmax_cont_wins\030\006 \001(\005"
    "\022\025\n\rcur_cont_wins\030\010 \001(\005\022\026\n\016fight_capacit"
    "y\030\t \001(\005\"J\n\013TreasureBox\022\014\n\004type\030\001 \002(\005\022-\n\t"
    "item_info\030\002 \003(\0132\032.protocols.common.ItemI"
    "nfo\"I\n\010UsedName\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 "
    "\001(\005\022\021\n\tserver_id\030\003 \001(\005\022\016\n\006status\030\004 \001(\003\"="
    "\n\014UsedNameData\022-\n\tused_name\030\001 \003(\0132\032.prot"
    "ocols.common.UsedName\"8\n\014UnuseNameMsg\022(\n"
    "\004name\030\001 \001(\0132\032.protocols.common.UsedName\""
    "n\n\013HideNpcData\022\016\n\006npc_id\030\001 \002(\005\022\031\n\nis_dis"
    "play\030\002 \001(\010:\005false\022\016\n\006map_id\030\003 \001(\005\022\t\n\001x\030\004"
    " \001(\005\022\t\n\001y\030\005 \001(\005\022\016\n\006rotate\030\006 \001(\005\"O\n\tHideN"
    "pcPb\022\017\n\007npc_ids\030\001 \003(\005\0221\n\nhide_datas\030\002 \003("
    "\0132\035.protocols.common.HideNpcData\"C\n\013NpcP"
    "osition\022\016\n\006map_id\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030"
    "\003 \001(\005\022\016\n\006rotate\030\004 \001(\005\"/\n\024OpenedFunctionN"
    "otify\022\027\n\017opened_function\030\001 \003(\005\">\n GetBud"
    "dyTemplateAttributeRequest\022\013\n\003tid\030\001 \002(\005\022"
    "\r\n\005level\030\002 \001(\005\"p\n!GetBuddyTemplateAttrib"
    "uteResponse\022\022\n\nerror_code\030\001 \002(\005\0227\n\016bare_"
    "attr_list\030\002 \003(\0132\037.protocols.common.Attri"
    "buteData\"\277\001\n\014YouLiMapData\022:\n\tgrid_data\030\001"
    " \003(\0132\'.protocols.common.YouLiMapData.Gri"
    "dData\022\026\n\016cur_grid_index\030\002 \001(\005\022\021\n\tyouli_n"
    "um\030\003 \001(\005\022\025\n\rmax_youli_num\030\004 \001(\005\0321\n\010GridD"
    "ata\022\022\n\ngrid_index\030\001 \002(\005\022\021\n\tgrid_type\030\002 \002"
    "(\005\"K\n\037YinglingComboStatus_ComboMember\022\014\n"
    "\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\""
    "\240\001\n\031YinglingComboStatus_Combo\022\020\n\010combo_i"
    "d\030\001 \001(\005\022\023\n\013combo_level\030\002 \001(\005\022\024\n\014combo_st"
    "atus\030\003 \001(\005\022F\n\013member_list\030\004 \003(\01321.protoc"
    "ols.common.YinglingComboStatus_ComboMemb"
    "er\"V\n\023YinglingComboStatus\022\?\n\ncombo_list\030"
    "\001 \003(\0132+.protocols.common.YinglingComboSt"
    "atus_Combo\"U\n\023YinglingTrainStatus\022>\n\024tra"
    "in_attribute_list\030\001 \003(\0132 .protocols.comm"
    "on.TrainAttribute*;\n\rMessageModule\022\023\n\017MS"
    "G_MODULE_GAME\020\000\022\025\n\021MSG_MODULE_SERVER\020\017*O"
    "\n\013MessageType\022\024\n\020MSG_TYPE_REQUEST\020\000\022\025\n\021M"
    "SG_TYPE_RESPONSE\020\001\022\023\n\017MSG_TYPE_NOTIFY\020\002*"
    "N\n\020ItemPositionType\022\013\n\007IPT_BAG\020\000\022\r\n\tIPT_"
    "EQUIP\020\001\022\r\n\tIPT_DEPOT\020\002\022\017\n\013IPT_BUYBACK\020\003*"
    "\236\001\n\rDirectionType\022\021\n\rDT_NORTH_WEST\020\004\022\014\n\010"
    "DT_NORTH\020\005\022\021\n\rDT_NORTH_EAST\020\006\022\013\n\007DT_WEST"
    "\020\003\022\013\n\007DT_SELF\020\000\022\013\n\007DT_EAST\020\007\022\021\n\rDT_SOUTH"
    "_WEST\020\002\022\014\n\010DT_SOUTH\020\001\022\021\n\rDT_SOUTH_EAST\020\010"
    "*\254R\n\rMessageAction\022\030\n\024MSG_ACTION_ACC_LOG"
    "IN\020\001\022\033\n\027MSG_ACTION_PLAYER_LOGIN\020\002\022\036\n\032MSG"
    "_ACTION_INIT_CONNECTION\020\003\022\034\n\030MSG_ACTION_"
    "PLAYER_LOGOUT\020\004\022\031\n\025MSG_ACTION_MOVE_START"
    "\020\005\022\032\n\026MSG_ACTION_FIND_PLAYER\020\006\022\034\n\030MSG_AC"
    "TION_CREATE_PLAYER\020\007\022\032\n\026MSG_ACTION_PLAYE"
    "R_INFO\020\010\022 \n\034MSG_ACTION_BUDDY_DETAIL_INFO"
    "\020\t\022\030\n\024MSG_ACTION_HEARTBEAT\020\n\022\032\n\026MSG_ACTI"
    "ON_KICK_PLAYER\020\013\022\034\n\030MSG_ACTION_FIRE_YING"
    "LING\020\014\022 \n\034MSG_ACTION_GET_YINGLING_LIST\020\r"
    "\022\034\n\030MSG_ACTION_HIRE_YINGLING\020\016\022!\n\035MSG_AC"
    "TION_OPEN_YINGLING_SLOT\020\017\022%\n!MSG_ACTION_"
    "YINGLING_HIRING_STATUS\020\020\022&\n\"MSG_ACTION_R"
    "EFRESH_HIRING_YINGLING\020\021\022*\n&MSG_ACTION_D"
    "EL_HIRABLE_YINGLING_NOTIFY\020\022\022\027\n\023MSG_ACTI"
    "ON_TELEPORT\020\023\022$\n MSG_ACTION_FIGHT_MONSTE"
    "R_REQUEST\020\024\022\032\n\026MSG_ACTION_LEAVE_FIGHT\020\025\022"
    "\036\n\032MSG_ACTION_GET_PLAYER_VIEW\020\026\022\030\n\024MSG_A"
    "CTION_ENTER_MAP\020\027\022\030\n\024MSG_ACTION_TRANSPOR"
    "T\020\030\022\031\n\025MSG_ACTION_OPEN_DEPOT\020\031\022\035\n\031MSG_AC"
    "TION_ENTER_INSTANCE\020\032\022\035\n\031MSG_ACTION_LEAV"
    "E_INSTANCE\020\033\022!\n\035MSG_ACTION_LIST_PASS_INS"
    "TANCE\020\034\022\"\n\036MSG_ACTION_GET_INSTANCE_DETAI"
    "L\020\035\022\035\n\031MSG_ACTION_GET_SKILL_LIST\020\036\022\034\n\030MS"
    "G_ACTION_GET_ITEM_LIST\020\037\022 \n\034MSG_ACTION_G"
    "ET_LINEUP_DETAIL\020 \022\037\n\033MSG_ACTION_GET_EQU"
    "IP_DETAIL\020!\022\036\n\032MSG_ACTION_GET_LINEUP_LIS"
    "T\020\"\022\031\n\025MSG_ACTION_SKIP_FIGHT\020#\022 \n\034MSG_AC"
    "TION_GET_INSTANCE_ITEM\020$\022\032\n\026MSG_ACTION_E"
    "QUIP_SKILL\020&\022\035\n\031MSG_ACTION_PRACTICE_SKIL"
    "L\020\'\022\"\n\036MSG_ACTION_STOP_PRACTICE_SKILL\020(\022"
    "\037\n\033MSG_ACTION_INJECT_SKILL_EXP\020)\022\033\n\027MSG_"
    "ACTION_UNLOAD_SKILL\020+\022 \n\034MSG_ACTION_LINE"
    "_UP_OPERATION\020,\022$\n MSG_ACTION_GET_BATTLE"
    "_SKILL_LIST\020-\022\"\n\036MSG_ACTION_FIGHT_RESULT"
    "_NOTIFY\020.\022\035\n\031MSG_ACTION_EXPAND_STORAGE\020/"
    "\022\033\n\027MSG_ACTION_REORDER_ITEM\0200\022\033\n\027MSG_ACT"
    "ION_DESTROY_ITEM\0201\022\027\n\023MSG_ACTION_BUY_ITE"
    "M\0202\022\030\n\024MSG_ACTION_SELL_ITEM\0203\022\033\n\027MSG_ACT"
    "ION_BUYBACK_ITEM\0204\022\037\n\033MSG_ACTION_GET_BUY"
    "BACK_LIST\0205\022\031\n\025MSG_ACTION_PLACE_ITEM\0206\022\027"
    "\n\023MSG_ACTION_USE_ITEM\0207\022\031\n\025MSG_ACTION_EQ"
    "UIP_ITEM\0208\022\030\n\024MSG_ACTION_SWAP_ITEM\0209\022\030\n\024"
    "MSG_ACTION_TAKE_GIFT\020:\022\034\n\030MSG_ACTION_EXC"
    "HANGE_ITEM\020;\022\031\n\025MSG_ACTION_QUEST_LIST\020<\022"
    "!\n\035MSG_ACTION_QUEST_ACCEPT_QUEST\020=\022!\n\035MS"
    "G_ACTION_QUEST_FINISH_QUEST\020>\022!\n\035MSG_ACT"
    "ION_QUEST_CANCEL_QUEST\020\?\022\036\n\032MSG_ACTION_Q"
    "UEST_DO_ACTION\020@\022&\n\"MSG_ACTION_GET_ONLIN"
    "E_TIME_REQUEST\020A\022,\n(MSG_ACTION_GET_INSTA"
    "NCE_WANTED_LIST_INFO\020B\022#\n\037MSG_ACTION_INS"
    "TANCE_WANTED_ONCE\020C\022#\n\037MSG_ACTION_FAST_I"
    "NSTANCE_WANTED\020D\022\033\n\027MSG_ACTION_XUNLUO_QU"
    "EST\020E\022\032\n\026MSG_ACTION_CREATE_TEAM\020F\022\032\n\026MSG"
    "_ACTION_SEARCH_TEAM\020G\022\036\n\032MSG_ACTION_TEAM"
    "_LINEUP_SET\020H\022\"\n\036MSG_ACTION_TEAM_SETTING"
    "_MODIFY\020I\022\035\n\031MSG_ACTION_TEAM_OPERATION\020J"
    "\022\036\n\032MSG_ACTION_APPLY_JOIN_TEAM\020K\022$\n MSG_"
    "ACTION_APPLY_JOIN_TEAM_REPLY\020L\022\037\n\033MSG_AC"
    "TION_INVITE_JOIN_TEAM\020M\022%\n!MSG_ACTION_IN"
    "VITE_JOIN_TEAM_REPLY\020N\022#\n\037MSG_ACTION_GET"
    "_TEAM_DETAIL_INFO\020O\022\"\n\036MSG_ACTION_RECRUI"
    "T_TEAM_MEMBER\020P\022*\n&MSG_ACTION_APPLY_JOIN"
    "_TEAM_LIST_NOTIFY\020Q\022\037\n\033MSG_ACTION_TEAM_I"
    "NFO_UPDATE\020R\022&\n\"MSG_ACTION_INVITE_JOIN_T"
    "EAM_NOTIFY\020S\022,\n(MSG_ACTION_INVITE_JOIN_T"
    "EAM_REPLY_NOTIFY\020T\022,\n(MSG_ACTION_TEAM_PL"
    "AYER_KICKED_OUT_NOTIFY\020U\022\031\n\025MSG_ACTION_A"
    "UTO_FIGHT\020V\022\"\n\036MSG_ACTION_SPEED_UP_AUTO_"
    "FIGHT\020W\022\036\n\032MSG_ACTION_STOP_AUTO_FIGHT\020X\022"
    "$\n MSG_ACTION_CHOOSE_AUTO_FIGHT_NPC\020Y\022\"\n"
    "\036MSG_ACTION_MONEY_UPDATE_NOTIFY\020Z\022\"\n\036MSG"
    "_ACTION_EQUIP_UPDATE_NOTIFY\020\\\022 \n\034MSG_ACT"
    "ION_EXP_UPDATE_NOTIFY\020]\022)\n%MSG_ACTION_GE"
    "T_LINE_UP_FIGHT_CAPACITY\020^\022+\n\'MSG_ACTION"
    "_GET_BUDDY_TEMPLATE_ATTRIBUTE\020_\022(\n$MSG_A"
    "CTION_INSTANCE_WANTED_ALL_RESET\020`\022)\n%MSG"
    "_ACTION_INSTANCE_WANTED_RESET_COST\020a\022\032\n\026"
    "MSG_ACTION_PLAYER_CHAT\020d\022%\n!MSG_ACTION_B"
    "ROADCAST_PLAYER_LOGIN\020e\022&\n\"MSG_ACTION_BR"
    "OADCAST_PLAYER_LOGOUT\020f\022#\n\037MSG_ACTION_BR"
    "OADCAST_MOVE_START\020g\022#\n\037MSG_ACTION_BROAD"
    "CAST_ENTER_VIEW\020h\022#\n\037MSG_ACTION_BROADCAS"
    "T_LEAVE_VIEW\020i\022$\n MSG_ACTION_BROADCAST_G"
    "AME_STATUS\020j\022%\n!MSG_ACTION_PRACTICE_SKIL"
    "L_NOTIFIY\020k\022\027\n\023MSG_ACTION_LEVEL_UP\020l\022\"\n\036"
    "MSG_ACTION_UPDATE_BATTLE_SKILL\020m\022\031\n\025MSG_"
    "ACTION_CHANGE_MAP\020n\022\033\n\027MSG_ACTION_UPDATE"
    "_SKILL\020o\022#\n\037MSG_ACTION_PASS_INSTANCE_NOT"
    "IFY\020p\022\034\n\030MSG_ACTION_SERVER_STATUS\020q\022\032\n\026M"
    "SG_ACTION_INJECT_SOUL\020s\022)\n%MSG_ACTION_BU"
    "DDY_CHANLLENGE_SPACETIME\020t\022%\n!MSG_ACTION"
    "_BUDDY_SPACETIME_STATUS\020u\022 \n\034MSG_ACTION_"
    "BUDDY_SOUL_UPDATE\020v\022\033\n\027MSG_ACTION_FOLLOW"
    "_BUDDY\020w\022#\n\037MSG_ACTION_EQUIP_SHENGXING_O"
    "PEN\020x\022\036\n\032MSG_ACTION_EQUIP_SHENGXING\020y\022 \n"
    "\034MSG_ACTION_EQUIP_XILIAN_LOCK\020z\022\033\n\027MSG_A"
    "CTION_EQUIP_XILIAN\020{\022$\n MSG_ACTION_OPEN_"
    "MONSTER_EXP_BUFF\020|\022$\n MSG_ACTION_TAKE_MO"
    "NSTER_EXP_BUFF\020}\0228\n3MSG_ACTION_TEAM_MEMB"
    "ER_OPEN_MONSTER_EXP_BUFF_NOTIFY\020\364\003\022\"\n\036MS"
    "G_ACTION_SEND_FIGHT_TO_WORLD\020~\022\035\n\031MSG_AC"
    "TION_GET_FIGHT_DATA\020\177\022&\n!MSG_ACTION_FIGH"
    "T_RESULT_BROADCAST\020\365\003\022$\n\037MSG_ACTION_GET_"
    "GUILD_SKILL_LIST\020\200\001\022$\n\037MSG_ACTION_GUILD_"
    "RESEARCH_SKILL\020\201\001\022!\n\034MSG_ACTION_GUILD_LE"
    "ARN_SKILL\020\204\001\0222\n-MSG_ACTION_GUILD_SKILL_R"
    "ESEARCH_FINISH_NOTIFY\020\374\003\022!\n\034MSG_ACTION_B"
    "UDDY_LIST_NOTIFY\020\202\001\022 \n\033MSG_ACTION_BAG_IT"
    "EMS_NOTIFY\020\203\001\022\035\n\030MSG_ACTION_GET_MAIL_LIS"
    "T\020\206\001\022\033\n\026MSG_ACTION_UPDATE_MAIL\020\207\001\022\037\n\032MSG"
    "_ACTION_NEW_MAIL_NOTIFY\020\210\001\022\035\n\030MSG_ACTION"
    "_ADD_BLACKLIST\020\211\001\022 \n\033MSG_ACTION_DELETE_B"
    "LACKLIST\020\212\001\022\035\n\030MSG_ACTION_GET_BLACKLIST\020"
    "\213\001\022\034\n\027MSG_ACTION_TALK_CHANNEL\020\214\001\022\033\n\026MSG_"
    "ACTION_TALK_PLAYER\020\215\001\022&\n!MSG_ACTION_CHAN"
    "NEL_MESSAGE_NOTIFY\020\216\001\022%\n MSG_ACTION_PLAY"
    "ER_MESSAGE_NOTIFY\020\217\001\022\034\n\027MSG_ACTION_APPLY"
    "_FRIEND\020\220\001\022\035\n\030MSG_ACTION_ANSWER_FRIEND\020\221"
    "\001\022\035\n\030MSG_ACTION_DELETE_FRIEND\020\222\001\022\037\n\032MSG_"
    "ACTION_GET_FRIEND_LIST\020\223\001\022 \n\033MSG_ACTION_"
    "GET_CONTACT_LIST\020\224\001\022$\n\037MSG_ACTION_FRIEND"
    "_STATUS_NOTIFY\020\225\001\022\036\n\031MSG_ACTION_GET_AREN"
    "A_INFO\020\226\001\022(\n#MSG_ACTION_UPDATE_ARENA_INF"
    "O_NOTIFY\020\227\001\022 \n\033MSG_ACTION_CHALLENGE_PLAY"
    "ER\020\230\001\022!\n\034MSG_ACTION_TAKE_TREASURE_BOX\020\233\001"
    "\022#\n\036MSG_ACTION_GET_ARENA_RANK_LIST\020\234\001\022\036\n"
    "\031MSG_ACTION_ACT_LUCKY_ONCE\020\235\001\022\037\n\032MSG_ACT"
    "ION_TAKE_TIME_BONUS\020\236\001\022!\n\034MSG_ACTION_ACT"
    "_EXCHANGE_ITEM\020\237\001\022#\n\036MSG_ACTION_HIRED_YI"
    "NGLING_SLOT\020\240\001\022\031\n\024MSG_ACTION_ENTER_PVP\020\241"
    "\001\022\031\n\024MSG_ACTION_LEAVE_PVP\020\242\001\022\034\n\027MSG_ACTI"
    "ON_GET_PVP_INFO\020\243\001\022\034\n\027MSG_ACTION_CLEAR_P"
    "VP_CD\020\244\001\022\036\n\031MSG_ACTION_PVP_ACT_NOTIFY\020\201\004"
    "\022 \n\033MSG_ACTION_PVP_ROBOT_NOTIFY\020\202\004\022\026\n\021MS"
    "G_ACTION_PVP_CD\020\203\004\022\031\n\024MSG_ACTION_PVP_BON"
    "US\020\204\004\022\032\n\025MSG_ACTION_GET_LINGLI\020\245\001\022\036\n\031MSG"
    "_ACTION_CONVERT_LINGLI\020\246\001\022\035\n\030MSG_ACTION_"
    "TAKE_PVP_GIFT\020\247\001\022\037\n\032MSG_ACTION_GET_DAILY"
    "_QUEST\020\252\001\022$\n\037MSG_ACTION_GENERATE_DAILY_Q"
    "UEST\020\253\001\022\035\n\030MSG_ACTION_GET_COOL_DOWN\020\257\001\022\037"
    "\n\032MSG_ACTION_CLEAR_COOL_DOWN\020\260\001\022 \n\033MSG_A"
    "CTION_UPDATE_COOL_DOWN\020\261\001\022\037\n\032MSG_ACTION_"
    "GET_LIMIT_COUNT\020\264\001\022$\n\037MSG_ACTION_PURCHAS"
    "E_LIMIT_COUNT\020\265\001\022\"\n\035MSG_ACTION_UPDATE_LI"
    "MIT_COUNT\020\266\001\022\035\n\030MSG_ACTION_EXCHANGE_CODE"
    "\020\271\001\022\034\n\027MSG_ACTION_PLAYER_FLAGS\020\276\001\022\037\n\032MSG"
    "_ACTION_SET_PLAYER_FLAG\020\277\001\022\033\n\026MSG_ACTION"
    "_RANDOM_NAME\020\300\001\022\037\n\032MSG_ACTION_PLAYER_HID"
    "E_NPC\020\301\001\022\035\n\030MSG_ACTION_START_COLLECT\020\303\001\022"
    "\036\n\031MSG_ACTION_FINISH_COLLECT\020\304\001\022\"\n\035MSG_A"
    "CTION_ADD_PLAYER_REQUEST\020\310\001\022#\n\036MSG_ACTIO"
    "N_ADD_PLAYER_RESPONSE\020\311\001\022\034\n\027MSG_ACTION_E"
    "RROR_NOTIFY\020\312\001\022\027\n\022MSG_ACTION_BUY_VIP\020\313\001\022"
    "\036\n\031MSG_ACTION_SYNC_TEAM_INFO\020\314\001\022\027\n\022MSG_F"
    "UNCTION_LIMIT\020\315\001\022#\n\036MSG_ACTION_GET_DAILY"
    "_GIFT_INFO\020\316\001\022 \n\033MSG_ACTION_APPLY_DAILY_"
    "GIFT\020\317\001\022.\n)MSG_ACTION_GET_STACKABLE_ONLI"
    "NE_GIFT_INFO\020\320\001\022+\n&MSG_ACTION_APPLY_STAC"
    "KABLE_ONLINE_GIFT\020\321\001\022\034\n\027MSG_ACTION_CREAT"
    "E_GUILD\020\323\001\022\034\n\027MSG_ACTION_DELETE_GUILD\020\324\001"
    "\022\036\n\031MSG_ACTION_GET_GUILD_LIST\020\325\001\022 \n\033MSG_"
    "ACTION_GET_GUILD_DETAIL\020\326\001\022 \n\033MSG_ACTION"
    "_APPLY_JOIN_GUILD\020\327\001\022!\n\034MSG_ACTION_ANSWE"
    "R_JOIN_GUILD\020\330\001\022!\n\034MSG_ACTION_INVITE_JOI"
    "N_GUILD\020\331\001\022 \n\033MSG_ACTION_REPLY_JOIN_GUIL"
    "D\020\332\001\022#\n\036MSG_ACTION_DELETE_GUILD_MEMBER\020\333"
    "\001\022%\n MSG_ACTION_GET_GUILD_MEMBER_LIST\020\334\001"
    "\022 \n\033MSG_ACTION_SET_MEMBER_TITLE\020\335\001\022#\n\036MS"
    "G_ACTION_GUILD_MEMBER_NOTIFY\020\336\001\022 \n\033MSG_A"
    "CTION_SET_GUILD_NOTICE\020\337\001\022%\n MSG_ACTION_"
    "GET_GUILD_INVITE_LIST\020\340\001\022$\n\037MSG_ACTION_G"
    "ET_GUILD_APPLY_LIST\020\341\001\022\037\n\032MSG_ACTION_ENT"
    "ER_GUILD_MAP\020\342\001\022\037\n\032MSG_ACTION_LEAVE_GUIL"
    "D_MAP\020\343\001\022\035\n\030MSG_ACTION_UPGRADE_GUILD\020\344\001\022"
    "\036\n\031MSG_ACTION_BUY_GUILD_ITEM\020\345\001\022\"\n\035MSG_A"
    "CTION_GET_GUILD_MAP_INFO\020\346\001\022%\n MSG_ACTIO"
    "N_GET_GUILD_DONATE_LIST\020\347\001\022\036\n\031MSG_ACTION"
    "_GET_GUILD_INFO\020\350\001\022\032\n\025MSG_ACTION_UPDATE_"
    "BIT\020\357\001\022!\n\034MSG_ACTION_GET_LIVENESS_INFO\020\360"
    "\001\022#\n\036MSG_ACTION_TAKE_LIVENESS_AWARD\020\361\001\022%"
    "\n MSG_ACTION_LIVENESS_UPDAE_NOTIFY\020\362\001\022!\n"
    "\034MSG_ACTION_GET_PLAYER_CONFIG\020\363\001\022!\n\034MSG_"
    "ACTION_SET_PLAYER_CONFIG\020\364\001\022%\n MSG_ACTIO"
    "N_ALIEN_BOSS_ACT_NOTIFY\020\375\003\022$\n\037MSG_ACTION"
    "_ALIEN_BOSS_HURT_RANK\020\376\003\022\"\n\035MSG_ACTION_A"
    "LIEN_BOSS_REWARDS\020\377\003\022 \n\033MSG_ACTION_UPDAT"
    "E_BOSS_BUFF\020\200\004\022\036\n\031MSG_ACTION_ENCOURAGE_B"
    "UFF\020\365\001\022\035\n\030MSG_ACTION_QUICK_RESPAWN\020\366\001\022$\n"
    "\037MSG_ACTION_ENTER_ALIEN_BOSS_MAP\020\367\001\022$\n\037M"
    "SG_ACTION_LEAVE_ALIEN_BOSS_MAP\020\370\001\022!\n\034MSG"
    "_ACTION_GET_BOSS_MAP_INFO\020\371\001\022\035\n\030MSG_ACTI"
    "ON_EQUIP_INHERIT\020\373\001\022\033\n\026MSG_ACTION_GEM_UP"
    "GRADE\020\374\001\022\032\n\025MSG_ACTION_GEM_INSERT\020\375\001\022\032\n\025"
    "MSG_ACTION_GEM_REMOVE\020\376\001\022\033\n\026MSG_ACTION_M"
    "AKE_SOCKET\020\377\001\022#\n\036MSG_ACTION_DIRECT_FINIS"
    "H_QUEST\020\200\002\022\'\n\"MSG_ACTION_FIGHT_WITH_OTHE"
    "R_PLAYER\020\204\002\022%\n MSG_ACTION_SEND_FIGHT_INV"
    "ITATION\020\366\003\022\"\n\035MSG_ACTION_FIGHT_INVITE_RE"
    "PLY\020\205\002\022\'\n\"MSG_ACTION_SPEED_UP_PRACTICE_S"
    "KILL\020\206\002\022&\n!MSG_ACTION_CRYSTAL_TOWER_ACTI"
    "VITY\020\211\002\022)\n$MSG_ACTION_CRYSTAL_TOWER_PICK"
    "_REWARD\020\212\002\022\034\n\027MSG_ACTION_GUILD_DONATE\020\213\002"
    "\022-\n(MSG_ACTION_CRYSTAL_TOWER_ACTIVITY_ST"
    "ATUS\020\214\002\022)\n$MSG_ACTION_STARTUP_ACTIVITIES"
    "_STATUS\020\216\002\022-\n(MSG_ACTION_AUTO_REFRESH_HI"
    "RABLE_YINGLING\020\217\002\022\036\n\031MSG_ACTION_YOULI_MA"
    "P_DATA\020\220\002\022\036\n\031MSG_ACTION_YOULI_MAP_DICE\020\221"
    "\002\022#\n\036MSG_ACTION_YOULI_MAP_RESET_MAP\020\222\002\022$"
    "\n\037MSG_ACTION_UPGRADE_BATTLE_SKILL\020\223\002\022#\n\036"
    "MSG_ACTION_UPDATE_YOULI_NOTIFY\020\224\002\022)\n$MSG"
    "_ACTION_CHECK_GUILD_XUNHUAN_QUEST\020\225\002\022#\n\036"
    "MSG_ACTION_ENTER_GUILD_WAR_MAP\020\226\002\022#\n\036MSG"
    "_ACTION_LEAVE_GUILD_WAR_MAP\020\227\002\022&\n!MSG_AC"
    "TION_GET_GUILD_WAR_MAP_INFO\020\230\002\022 \n\033MSG_AC"
    "TION_GUILD_WAR_NOTIFY\020\205\004\022\"\n\035MSG_ACTION_G"
    "UILD_WAR_SCHEDULE\020\206\004\022\"\n\035MSG_ACTION_GUILD"
    "_WAR_ADD_BUFF\020\231\002\022+\n&MSG_ACTION_GUILD_WAR"
    "_CONTRIBUTION_RANK\020\232\002\022\"\n\035MSG_ACTION_TREA"
    "SURE_BOX_BONUS\020\233\002\022(\n#MSG_ACTION_GET_AUTO"
    "_INSTANCE_STATUS\020\234\002\022)\n$MSG_ACTION_START_"
    "AUTO_FIGHT_INSTANCE\020\235\002\022(\n#MSG_ACTION_STO"
    "P_AUTO_FIGHT_INSTANCE\020\236\002\022*\n%MSG_ACTION_F"
    "INISH_AUTO_FIGHT_INSTANCE\020\240\002\022*\n%MSG_ACTI"
    "ON_AUTO_FIGHT_INSTANCE_NOTIFY\020\241\002\022*\n%MSG_"
    "ACTION_GUILD_WAR_COMPETITION_INFO\020\237\002\022#\n\036"
    "MSG_ACTION_GET_OPENED_ACTIVITY\020\242\002\022\'\n\"MSG"
    "_ACTION_ACTIVITY_MANAGER_NOTIFY\020\207\004\022 \n\033MS"
    "G_ACTION_PUBLISH_QUSETION\020\370\003\022\036\n\031MSG_ACTI"
    "ON_SEND_QA_RESULT\020\371\003\022#\n\036MSG_ACTION_UPDAT"
    "E_PHY_STRENGTH\020\372\003\022(\n#MSG_ACTION_ARENA_RE"
    "CENT_MSGS_NOTIFY\020\373\003\022)\n$MSG_ACTION_FIGHT_"
    "INVITE_REPLY_NOTIFY\020\367\003\022!\n\034MSG_ACTION_TIM"
    "E_BONUS_NOTIFY\020\254\002\022!\n\034MSG_ACTION_ARENA_SE"
    "LF_NOTICE\020\255\002\022#\n\036MSG_ACTION_ARENA_PUBLIC_"
    "NOTICE\020\256\002\022\035\n\030MSG_ACTION_SYSTEM_NOTICE\020\257\002"
    "\022\032\n\025MSG_ACTION_GUILD_INFO\020\265\002\022\030\n\023MSG_ACTI"
    "ON_VIP_INFO\020\266\002\022\030\n\023MSG_ACTION_ANNOUNCE\020\270\002"
    "\022(\n#MSG_ACTION_SKILL_POOL_CHANGE_NOTIFY\020"
    "\271\002\022\'\n\"MSG_ACTION_SERVER_SHUT_DOWN_NOTIFY"
    "\020\272\002\022#\n\036MSG_ACTION_UPDATE_MONSTER_BUFF\020\273\002"
    "\022*\n%MSG_ACTION_TEAM_CHANNEL_MEMBER_NOTIF"
    "Y\020\274\002\022\"\n\035MSG_ACTION_ATTR_CHANGE_NOTIFY\020\275\002"
    "\022*\n%MSG_ACTION_GUILD_CRYSTAL_TOWER_NOTIF"
    "Y\020\276\002\022\036\n\031MSG_ACTION_GET_TITLE_LIST\020\277\002\022\036\n\031"
    "MSG_ACTION_SET_ROLE_TITLE\020\300\002\022\036\n\031MSG_ACTI"
    "ON_YINGLING_COMBO\020\301\002\022&\n!MSG_ACTION_YINGL"
    "ING_COMBO_UPGRADE\020\302\002\022 \n\033MSG_ACTION_GET_O"
    "FFLINE_GIFT\020\303\002\022\031\n\024MSG_ACTION_GET_TRAIN\020\304"
    "\002\022\025\n\020MSG_ACTION_TRAIN\020\305\002\022\032\n\025MSG_ACTION_T"
    "RAIN_SAVE\020\306\002\022\034\n\027MSG_ACTION_PRACTICE_EXP\020"
    "\307\002\022\035\n\030MSG_ACTION_SOUL_EXCHANGE\020\310\002\022\037\n\032MSG"
    "_ACTION_HIT_YELLOW_DUCK\020\315\002\022\033\n\026MSG_ACTION"
    "_UNEQUIP_ALL\020\322\002\022#\n\036MSG_ACTION_YOULI_MAP_"
    "AUTO_DICE\020\323\002\022 \n\033MSG_ACTION_ROOM_INFO_UPD"
    "ATE\020\331\002\022\037\n\032MSG_ACTION_ROOM_INVITE_NTF\020\332\002\022"
    "!\n\034MSG_ACTION_LOBBY_PLAYER_LIST\020\333\002\022\"\n\035MS"
    "G_ACTION_ROOM_INVITE_PLAYER\020\334\002\022(\n#MSG_AC"
    "TION_QUIRE_PASS_TEAM_GEN_INFO\020\335\002\022\037\n\032MSG_"
    "ACTION_ENTER_PASS_ROOM\020\336\002\022\033\n\026MSG_ACTION_"
    "CREATE_ROOM\020\337\002\022\034\n\027MSG_ACTION_OPERATE_ROO"
    "M\020\340\002\022\037\n\032MSG_ACTION_PLAYER_KICK_NTF\020\341\002\022#\n"
    "\036MSG_ACTION_ROOM_START_INSTANCE\020\342\002\022\033\n\026MS"
    "G_ACTION_WING_SYSTEM\020\210\004*3\n\016AttrChangeTyp"
    "e\022!\n\035AttrChangeType_LineupCapacity\020\001*\370\001\n"
    "\026ARENA_SELF_NOTICE_TYPE\022(\n$ARENA_CHALLEN"
    "GE_WIN_WITH_RANK_CHANGE\020\001\022+\n\'ARENA_CHALL"
    "ENGE_WIN_WITH_RANK_NO_CHANGE\020\002\022\030\n\024ARENA_"
    "CHALLENGE_LOSE\020\003\022\026\n\022ARENA_ATTACKED_WIN\020\004"
    "\022(\n$ARENA_ATTACKED_LOSE_WITH_RANK_CHANGE"
    "\020\005\022+\n\'ARENA_ATTACKED_LOST_WITH_RANK_NO_C"
    "HANGE\020\006*[\n\030ARENA_PUBLIC_NOTICE_TYPE\022\024\n\020A"
    "RENA_RANK_TOP_3\020\001\022\025\n\021ARENA_RANK_TOP_50\020\002"
    "\022\022\n\016ARENA_CONT_WIN\020\003*.\n\022PUBLIC_NOTICE_TY"
    "PE\022\030\n\024SYSTEM_PUBLIC_NOTICE\020\000*2\n\nProfessi"
    "on\022\n\n\006WIZARD\020\001\022\n\n\006ARCHER\020\002\022\014\n\010SWORDMAN\020\003"
    "*\036\n\006Gender\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002*<\n\nGame"
    "Status\022\016\n\nGS_OFFLINE\020\000\022\r\n\tGS_ONLINE\020\001\022\017\n"
    "\013GS_FIGHTING\020\002*\257\001\n\rAccountStatus\022!\n\024Acco"
    "untStatus_BANNED\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025AccountSt"
    "atus_DEFAULT\020\000\022\037\n\033AccountStatus_FIRST_LO"
    "GINED\020\001\022\037\n\033AccountStatus_CREATING_ROLE\020\002"
    "\022\036\n\032AccountStatus_CREATED_ROLE\020\003*\205\001\n\rLEV"
    "EL_UP_TYPE\022\021\n\rROLE_LEVEL_UP\020\001\022\034\n\030ROLE_PR"
    "OFESSION_LEVEL_UP\020\002\022\024\n\020SERVENT_LEVEL_UP\020"
    "\003\022\022\n\016SKILL_LEVEL_UP\020\004\022\031\n\025BATTLE_SKILL_LE"
    "VEL_UP\020\005*M\n\rPRACTICE_MODE\022\023\n\017NORMAL_PRAC"
    "TICE\020\001\022\023\n\017EXPERT_PRACTICE\020\002\022\022\n\016SHURA_PRA"
    "CTICE\020\003*\221\002\n\021PAY_FUNCTION_TYPE\022\033\n\027PAY_FUN"
    "CTION_SKIP_FIGHT\020\001\022\033\n\027PAY_FUNCTION_UNLOC"
    "K_BAG\020\002\022!\n\035PAY_FUNCTION_DICE_MAP_DIAMOND"
    "\020\003\022 \n\034PAY_FUNCTION_DICE_MAP_NORMAL\020\004\022%\n!"
    "PAY_FUNCTION_FAST_DICE_MAP_NORMAL\020\005\022&\n\"P"
    "AY_FUNCTION_FAST_DICE_MAP_DIAMOND\020\006\022.\n*P"
    "AY_FUNCTION_FAST_AUTO_INSTANCE_UNIT_PRIC"
    "E\020\007*\307\013\n\tENUM_ATTR\022\010\n\004NONE\020\000\022\006\n\002HP\020\001\022\n\n\006M"
    "AX_HP\020\002\022\007\n\003STA\020\003\022\014\n\010STRENGTH\020\004\022\r\n\tTECHNI"
    "QUE\020\005\022\020\n\014INTELLIGENCE\020\006\022\n\n\006SPIRIT\020\007\022\t\n\005A"
    "GILE\020\010\022\016\n\nPHY_ATTACK\020\t\022\017\n\013PHY_DEFENCE\020\n\022"
    "\016\n\nMAG_ATTACK\020\013\022\017\n\013MAG_DEFENCE\020\014\022\016\n\nPHY_"
    "AT_HIT\020\r\022\016\n\nMAG_AT_HIT\020\016\022\020\n\014PHY_CRITICAL"
    "\020\017\022\030\n\024PHY_CRITICAL_DEFENCE\020\020\022\020\n\014MAG_CRIT"
    "ICAL\020\021\022\030\n\024MAG_CRITICAL_DEFENCE\020\022\022\020\n\014PHY_"
    "AT_DODGE\020\023\022\020\n\014MAG_AT_DODGE\020\024\022\023\n\017PHY_AT_H"
    "IT_RATE\020\025\022\023\n\017MAG_AT_HIT_RATE\020\026\022\025\n\021PHY_CR"
    "ITICAL_RATE\020\027\022\035\n\031PHY_CRITICAL_DEFENCE_RA"
    "TE\020\030\022\025\n\021MAG_CRITICAL_RATE\020\031\022\035\n\031MAG_CRITI"
    "CAL_DEFENCE_RATE\020\032\022\025\n\021PHY_AT_DODGE_RATE\020"
    "\033\022\025\n\021MAG_AT_DODGE_RATE\020\034\022\t\n\005SPEED\020\035\022\023\n\017F"
    "IRE_RESISTANCE\020\036\022\022\n\016ICE_RESISTANCE\020\037\022\024\n\020"
    "SHOCK_RESISTANCE\020 \022\030\n\024FIRE_DAMAGE_INCREA"
    "SE\020!\022\027\n\023ICE_DAMAGE_INCREASE\020\"\022\031\n\025SHOCK_D"
    "AMAGE_INCREASE\020#\022\035\n\031PHY_DAMAGE_REDUCTION"
    "_RATE\020$\022\026\n\022PHY_CRI_MULTI_RATE\020%\022\026\n\022MAG_C"
    "RI_MULTI_RATE\020&\022\022\n\016MAG_COMBO_RATE\020\'\022\027\n\023C"
    "OUNTER_ATTACK_RATE\020(\022\027\n\023DAMAGE_REBOUND_R"
    "ATE\020)\022\016\n\nBLOOD_SUCK\020*\022\022\n\016MAX_HP_PERCENT\020"
    "+\022\026\n\022PHY_ATTACK_PERCENT\020,\022\026\n\022MAG_ATTACK_"
    "PERCENT\020-\022\027\n\023PHY_DEFENCE_PERCENT\020.\022\027\n\023MA"
    "G_DEFENCE_PERCENT\020/\022\021\n\rSPEED_PERCENT\0200\022\024"
    "\n\020STRENGTH_PERCENT\0201\022\017\n\013STA_PERCENT\0202\022\030\n"
    "\024INTELLIGENCE_PERCENT\0203\022\022\n\016SPIRIT_PERCEN"
    "T\0204\022\025\n\021TECHNIQUE_PERCENT\0205\022\021\n\rAGILE_PERC"
    "ENT\0206\022\030\n\024TOTAL_MAX_HP_PERCENT\0208\022\034\n\030TOTAL"
    "_PHY_ATTACK_PERCENT\0209\022\034\n\030TOTAL_MAG_ATTAC"
    "K_PERCENT\020:\022\035\n\031TOTAL_PHY_DEFENCE_PERCENT"
    "\020;\022\035\n\031TOTAL_MAG_DEFENCE_PERCENT\020<\022\025\n\021EXT"
    "RA_CURE_EFFECT\020>\022\025\n\021EXTRA_FIRE_DAMAGE\020F\022"
    "\024\n\020EXTRA_ICE_DAMAGE\020G\022\026\n\022EXTRA_SHOCK_DAM"
    "AGE\020H\022\027\n\023EXTRA_PHYSIC_DAMAGE\020I\022\010\n\004STUN\020P"
    "\022\013\n\007SILENCE\020Q\022\t\n\005SLEEP\020R\022\n\n\006FROZEN\020S\022\031\n\025"
    "DAMAGE_APPEND_PERCENT\020[\022\024\n\020ENUM_ATTR_NUM"
    "BER\020\\*P\n\017SKIP_FIGHT_TYPE\022\024\n\020QUICK_SKIP_F"
    "IGHT\020\001\022\023\n\017FREE_SKIP_FIGHT\020\002\022\022\n\016PAY_SKIP_"
    "FIGHT\020\003*\335\002\n\nFIGHT_TYPE\022\030\n\024NORMAL_FIGHT_M"
    "ONSTER\020\001\022\032\n\026INSTANCE_FIGHT_MONSTER\020\002\022\027\n\023"
    "INSTANCE_FIGHT_BOSS\020\005\022\033\n\027CHALLENGE_SOUL_"
    "YINGLING\020\003\022\024\n\020CHALLENGE_PLAYER\020\004\022\036\n\032FIGH"
    "T_OTHER_PLAYER_OR_TEAM\020\006\022\030\n\024FIGHT_RANDOM"
    "_MONSTER\020\007\022\024\n\020FIGHT_ALIEN_BOSS\020\010\022\024\n\020FIGH"
    "T_GUILD_BOSS\020\t\022\024\n\020FIGHT_PVP_PLAYER\020\n\022\023\n\017"
    "FIGHT_PVP_ROBOT\020\013\022\030\n\024FIGHT_GUILD_WAR_BOS"
    "S\020\014\022\"\n\036FIGHT_GUILD_WAR_PLAYER_OR_TEAM\020\r*"
    "]\n\016YinglingStatus\022\027\n\023YinglingStatus_HOME"
    "\020\000\022\030\n\024YinglingStatus_HIRED\020\001\022\030\n\024Yingling"
    "Status_FIRED\020\002*\270\001\n\017YinglingQuality\022\032\n\026Yi"
    "nglingQuality_MYSEFL\020\000\022\032\n\026YinglingQualit"
    "y_NOBODY\020\001\022\035\n\031YinglingQuality_CELEBRITY\020"
    "\002\022\030\n\024YinglingQuality_HERO\020\003\022\032\n\026YinglingQ"
    "uality_LEGEND\020\004\022\030\n\024YinglingQuality_EPIC\020"
    "\005*\252\002\n\027RefreshYinglingListType\022\"\n\036Refresh"
    "YinglingListType_NORMAL\020\000\022\"\n\036RefreshYing"
    "lingListType_JUNIOR\020\001\022(\n$RefreshYingling"
    "ListType_INTERMEDIATE\020\002\022\"\n\036RefreshYingli"
    "ngListType_SENIOR\020\003\022%\n!RefreshYinglingLi"
    "stType_JUNIOR_YB\020\004\022+\n\'RefreshYinglingLis"
    "tType_INTERMEDIATE_YB\020\005\022%\n!RefreshYingli"
    "ngListType_SENIOR_YB\020\006*\207\004\n\014AnnounceType\022"
    "*\n&AnnounceType_GET_ITEM_BY_CLEAR_MISSIO"
    "N\020\001\022&\n\"AnnounceType_GET_ITEM_BY_OPEN_GIF"
    "T\020\002\022\034\n\030AnnounceType_ARENA_TOP_3\020\003\022\037\n\033Ann"
    "ounceType_ARENA_CONT_WIN\020\004\022$\n AnnounceTy"
    "pe_ARENA_LOSE_CONT_WIN\020\005\022&\n\"AnnounceType"
    "_ACT_EXCHANGE_YINGLING\020\006\022\037\n\033AnnounceType"
    "_STRENGTH_EQUIP\020e\022\037\n\032AnnounceType_HIRE_Y"
    "INGLING\020\311\001\022*\n%AnnounceType_CHALLENGE_SPA"
    "CETIME_SELF\020\255\002\022%\n AnnounceType_CHALLENGE"
    "_SPACETIME\020\221\003\022\"\n\035AnnounceType_INJECT_SOU"
    "L_SELF\020\365\003\022\035\n\030AnnounceType_INJECT_SOUL\020\331\004"
    "\022\037\n\032AnnounceType_CLEAR_MISSION\020\275\005\022\035\n\030Ann"
    "ounceType_WING_SPIRIT\020\276\005*\331\001\n\010ItemType\022\020\n"
    "\014IT_EQUIPMENT\020\001\022\014\n\010IT_STONE\020\002\022\017\n\013IT_TRAE"
    "SURE\020\003\022\021\n\rIT_SKILL_BOOK\020\004\022\017\n\013IT_EXP_BOOK"
    "\020\005\022\013\n\007IT_MISC\020\006\022\013\n\007IT_TASK\020\007\022\013\n\007IT_GIFT\020"
    "\010\022\017\n\013IT_YINGLING\020\t\022\022\n\016IT_CONSUMPTION\020\n\022\014"
    "\n\010IT_MONEY\020\013\022\n\n\006IT_VIP\020\014\022\022\n\016IT_LIMIT_COU"
    "NT\020\r*\327\001\n\rEquipPosition\022\014\n\010ET_RING2\020\000\022\r\n\t"
    "ET_HELMET\020\001\022\017\n\013ET_SHOULDER\020\002\022\r\n\tET_ARMOU"
    "R\020\003\022\013\n\007ET_BELT\020\004\022\014\n\010ET_GLOVE\020\005\022\013\n\007ET_CUF"
    "F\020\006\022\014\n\010ET_SHOES\020\007\022\017\n\013ET_NECKLACE\020\010\022\013\n\007ET"
    "_RING\020\t\022\r\n\tET_WEAPON\020\n\022\r\n\tET_ASSIST\020\013\022\013\n"
    "\007ET_WING\020\014\022\n\n\006ET_END\020\r*7\n\021LINE_UP_OPERAT"
    "ION\022\n\n\006CREATE\020\001\022\n\n\006MODIFY\020\002\022\n\n\006DELETE\020\003*"
    "R\n\030UPDATE_BATTLE_SKILL_TYPE\022\024\n\020NEW_BATTL"
    "E_SKILL\020\001\022\016\n\nUPDATE_EXP\020\002\022\020\n\014UPDATE_LEVE"
    "L\020\003*8\n\nMONEY_TYPE\022\013\n\007MT_COIN\020\001\022\r\n\tMT_COU"
    "PON\020\002\022\016\n\nMT_DIAMOND\020\003*\237\003\n\017QuestActionTyp"
    "e\022\030\n\024QuestActionType_None\020\000\022\032\n\026QuestActi"
    "onType_Dialog\020\001\022 \n\034QuestActionType_Clien"
    "tAction\020\002\022\033\n\027QuestActionType_KillNpc\020\003\022\030"
    "\n\024QuestActionType_Loot\020\004\022\033\n\027QuestActionT"
    "ype_Collect\020\005\022\036\n\032QuestActionType_FightCo"
    "unt\020\006\022!\n\035QuestActionType_FightWinCount\020\007"
    "\022\033\n\027QuestActionType_GetItem\020\010\022\034\n\030QuestAc"
    "tionType_Delivery\020\t\022\033\n\027QuestActionType_E"
    "xplore\020\n\022#\n\037QuestActionType_UseItemInReg"
    "ion\020\013\022 \n\034QuestActionType_WinBattleNpc\020\014*"
    "\240\001\n\034QuestAction_ClientActionType\022%\n!Ques"
    "tAction_ClientActionType_None\020\000\022.\n*Quest"
    "Action_ClientActionType_OpenInventory\020\001\022"
    ")\n%QuestAction_ClientActionType_OpenBank"
    "\020\002*\222\001\n\013QuestStatus\022\027\n\023QuestStatus_DEFAUL"
    "T\020\000\022\032\n\026QuestStatus_ACCEPTABLE\020\001\022\030\n\024Quest"
    "Status_ACCEPTED\020\002\022\032\n\026QuestStatus_FINISHA"
    "BLE\020\003\022\030\n\024QuestStatus_FINISHED\020\004*\323\001\n\tQues"
    "tType\022\025\n\021QuestType_DEFAULT\020\000\022\025\n\021QuestTyp"
    "e_ZHUXIAN\020\001\022\027\n\023QuestType_XUANSHANG\020\002\022\025\n\021"
    "QuestType_ZHIXIAN\020\003\022\025\n\021QuestType_RICHANG"
    "\020\004\022\024\n\020QuestType_XUNLUO\020\005\022\034\n\030QuestType_BA"
    "NGHUI_XUNLUO\020\006\022\035\n\031QuestType_BANGHUI_CRYS"
    "TAL\020\007*g\n\024TreasureBoxBonusType\022\'\n#Treasur"
    "eBoxBonusType_GUILD_WAR_BOSS\020\001\022&\n\"Treasu"
    "reBoxBonusType_GUILD_WAR_PvP\020\002*\230\001\n\016Activ"
    "ityStatus\022\034\n\030ActivityStatus_NOT_AVAIL\020\000\022"
    "\030\n\024ActivityStatus_AVAIL\020\001\022\030\n\024ActivitySta"
    "tus_START\020\002\022\031\n\025ActivityStatus_REWARD\020\003\022\031"
    "\n\025ActivityStatus_FINISH\020\004*Z\n\020DIFFICULTY_"
    "LEVEL\022\010\n\004EASY\020\001\022\n\n\006NORMAL\020\002\022\r\n\tDIFFICULT"
    "\020\003\022\n\n\006MASTER\020\004\022\010\n\004HERO\020\005\022\013\n\007LEGENDS\020\006*\?\n"
    "\023TEAM_OBJECTIVE_TYPE\022\017\n\013CUSTOM_PASS\020\001\022\t\n"
    "\005QUEST\020\002\022\014\n\010LEVEL_UP\020\003*0\n\rTEAM_ADD_TYPE\022"
    "\016\n\nNORMAL_ADD\020\001\022\017\n\013CONFIRM_ADD\020\002*_\n\016TEAM"
    "_OPERATION\022\026\n\022CHANGE_TEAM_LEADER\020\001\022\021\n\rKI"
    "CK_OUT_TEAM\020\002\022\016\n\nLEAVE_TEAM\020\003\022\022\n\016CLEAR_A"
    "PPLIERS\020\004*7\n\021TEAM_APPLY_RESULT\022\020\n\014APPLY_"
    "ACCEPT\020\001\022\020\n\014APPLY_REJECT\020\002*B\n\025TEAM_LINEU"
    "P_OPERATION\022\017\n\013SAVE_MODIFY\020\001\022\030\n\024RESET_DE"
    "FAULT_LINEUP\020\002*n\n\025SERVER_SYNC_TEAM_TYPE\022"
    "\017\n\013CREATE_TEAM\020\001\022\017\n\013DELETE_TEAM\020\002\022\021\n\rMEM"
    "BER_CHANGE\020\003\022\021\n\rLEADER_CHANGE\020\004\022\r\n\tLOAD_"
    "TEAM\020\005*\364\016\n\rRoleLimitType\022\035\n\031RoleLimitTyp"
    "e_DAILY_QUEST\020\002\022&\n\"RoleLimitType_DAILY_Q"
    "UEST_GENERATE\020\003\022&\n\"RoleLimitType_HIRE_YI"
    "NGLING_NORMAL\020\004\022&\n\"RoleLimitType_HIRE_YI"
    "NGLING_JUNIOR\020\005\022,\n(RoleLimitType_HIRE_YI"
    "NGLING_INTERMEDIATE\020\006\022&\n\"RoleLimitType_H"
    "IRE_YINGLING_SENIOR\020\007\022 \n\034RoleLimitType_D"
    "AILY_INSTANCE\020\010\022.\n*RoleLimitType_CHALLEN"
    "GE_SPACE_TIME_LEVEL_1\020\t\022.\n*RoleLimitType"
    "_CHALLENGE_SPACE_TIME_LEVEL_2\020\n\022.\n*RoleL"
    "imitType_CHALLENGE_SPACE_TIME_LEVEL_3\020\013\022"
    ".\n*RoleLimitType_CHALLENGE_SPACE_TIME_LE"
    "VEL_4\020\014\022.\n*RoleLimitType_CHALLENGE_SPACE"
    "_TIME_LEVEL_5\020\r\022.\n*RoleLimitType_CHALLEN"
    "GE_SPACE_TIME_LEVEL_6\020\016\022.\n*RoleLimitType"
    "_CHALLENGE_SPACE_TIME_LEVEL_7\020\017\022.\n*RoleL"
    "imitType_CHALLENGE_SPACE_TIME_LEVEL_8\020\020\022"
    ".\n*RoleLimitType_CHALLENGE_SPACE_TIME_LE"
    "VEL_9\020\021\022/\n+RoleLimitType_CHALLENGE_SPACE"
    "_TIME_LEVEL_10\020\022\022,\n(RoleLimitType_VIP_SK"
    "IP_FIGHT_DAILY_LIMIT\020\023\022&\n\"RoleLimitType_"
    "VIP_AUTO_FIGHT_LIMIT\020\024\022\"\n\036RoleLimitType_"
    "DAILY_GIFT_VIP_0\020\025\022\"\n\036RoleLimitType_DAIL"
    "Y_GIFT_VIP_1\020\026\022\"\n\036RoleLimitType_DAILY_GI"
    "FT_VIP_2\020\027\022\"\n\036RoleLimitType_DAILY_GIFT_V"
    "IP_3\020\030\022\"\n\036RoleLimitType_DAILY_GIFT_VIP_4"
    "\020\031\022\"\n\036RoleLimitType_DAILY_GIFT_VIP_5\020\032\022\""
    "\n\036RoleLimitType_DAILY_GIFT_VIP_6\020\033\022\"\n\036Ro"
    "leLimitType_DAILY_GIFT_VIP_7\020\034\022\"\n\036RoleLi"
    "mitType_DAILY_GIFT_VIP_8\020\035\022\"\n\036RoleLimitT"
    "ype_DAILY_GIFT_VIP_9\020\036\022#\n\037RoleLimitType_"
    "DAILY_GIFT_VIP_10\020\037\022#\n\037RoleLimitType_DAI"
    "LY_GIFT_VIP_11\020 \022#\n\037RoleLimitType_DAILY_"
    "GIFT_VIP_12\020!\022-\n)RoleLimitType_DAILY_ARE"
    "NA_CHALLENGE_TIMES\020#\022\'\n#RoleLimitType_DA"
    "ILY_FLY_SHOES_LIMIT\020$\022*\n&RoleLimitType_A"
    "RENA_CHALLENGE_COOLDOWN\020%\022\036\n\032RoleLimitTy"
    "pe_CARRYON_SHOP\020&\022\037\n\033RoleLimitType_CARRY"
    "ON_DEPOT\020\'\022\034\n\030RoleLimitType_HUNT_LIMIT\020("
    "\022\'\n#RoleLimitType_XUNLUO_QUEST_COOLDOWN\020"
    ")\022(\n$RoleLimitType_PHY_STRENGTH_BUY_LIMI"
    "T\020*\022/\n+RoleLimitType_VIP_FAST_PRACTICE_S"
    "KILL_LIMIT\020+\022\"\n\036RoleLimitType_YOULI_MAP_"
    "FINISH\020,\022!\n\035RoleLimitType_YOULI_MAP_RESE"
    "T\020-\022 \n\034RoleLimitType_YOULI_MAP_DICE\020.\022$\n"
    " RoleLimitType_GUILD_CIRCLE_QUEST\020/\022\'\n#R"
    "oleLimitType_HIT_YELLOW_DUCK_LIMIT\0200\022\'\n#"
    "RoleLimitType_WING_SPIRIT_GENERATOR\0201*\337\002"
    "\n\021FunctionLimitType\022*\n&FunctionLimitType"
    "_HIRE_YINGLING_SENIOR\020\001\022)\n%FunctionLimit"
    "Type_SPEED_UP_AUTO_FIGHT\020\002\022+\n\'FunctionLi"
    "mitType_SENIOR_PRACTICE_SKILL\020\003\022\"\n\036Funct"
    "ionLimitType_CARRYON_SHOP\020\004\022#\n\037FunctionL"
    "imitType_CARRYON_DEPOT\020\005\022,\n(FunctionLimi"
    "tType_WING_SPIRIT_ENABLE_LV4\020\006\022/\n+Functi"
    "onLimitType_WING_SPIRIT_BULK_GENERATE\020\007\022"
    "\036\n\032FunctionLimitType_MAXVALUE\020d*\215\n\n\017Numb"
    "erLimitType\022 \n\034NumberLimit_MAX_PLAYER_LE"
    "VEL\020\001\022\036\n\032NumberLimit_INIT_YOULI_NUM\020\002\022\037\n"
    "\033NumberLimit_HIRE_YINGLING_K\020\003\022\037\n\033Number"
    "Limit_HIRE_YINGLING_E\020\004\022\037\n\033NumberLimit_H"
    "IRE_YINGLING_N\020\005\022)\n%NumberLimit_HIRE_YIN"
    "GLING_PROTECT_NUM\020\006\022\"\n\036NumberLimit_LUCKY"
    "_ONCE_DIAMOND\020\007\022&\n\"NumberLimit_GUILD_CRY"
    "STAL_DURATION\020\010\022.\n*NumberLimit_GUILD_CRY"
    "STAL_REWARD_COUNTDOWN\020\t\022%\n!NumberLimit_P"
    "VP_ENTER_LEVEL_LIMIT\020\n\022\035\n\031NumberLimit_PV"
    "P_MAX_LEVEL\020\013\022 \n\034NumberLimit_PVP_NEW_LEV"
    "EL_CD\020\014\022\034\n\030NumberLimit_PVP_FIGHT_CD\020\r\022\037\n"
    "\033NumberLimit_PVP_RE_ENTER_CD\020\016\022!\n\035Number"
    "Limit_PVP_ROBOT_TIMEOUT\020\017\022$\n NumberLimit"
    "_PVP_LEVEL_UP_TIMEOUT\020\020\022,\n(NumberLimit_P"
    "VP_SHOW_CONT_WIN_RANK_LEVEL\020\021\022(\n$NumberL"
    "imit_PVP_FIGHT_AUTO_SKIP_TIME\020\022\022(\n$Numbe"
    "rLimit_PVP_TOP_5_ANNOUNCE_LEVEL\020\023\022$\n Num"
    "berLimit_PVP_ROBOT_CHECK_TIME\020\024\022\034\n\030Numbe"
    "rLimit_TRAIN_COIN_K\020\025\022$\n NumberLimit_TRA"
    "IN_MIDDLE_COST_YB\020\026\022\"\n\036NumberLimit_TRAIN"
    "_HIGH_COST_YB\020\027\022*\n&NumberLimit_TRAIN_MID"
    "DLE_ALTER_ITEM_ID\020\030\022+\n\'NumberLimit_TRAIN"
    "_MIDDLE_ALTER_ITEM_NUM\020\031\022)\n%NumberLimit_"
    "TRAIN_FUNCTION_OPEN_LEVEL\020\032\022.\n*NumberLim"
    "it_HIRE_HERO_YINGLING_PROTECT_NUM\020\033\022(\n$N"
    "umberLimit_VIP_0_AUTO_INSTANCE_TIME\020\034\022(\n"
    "$NumberLimit_VIP_1_AUTO_INSTANCE_TIME\020\035\022"
    "(\n$NumberLimit_VIP_2_AUTO_INSTANCE_TIME\020"
    "\036\022(\n$NumberLimit_VIP_3_AUTO_INSTANCE_TIM"
    "E\020\037\022(\n$NumberLimit_VIP_4_AUTO_INSTANCE_T"
    "IME\020 \022(\n$NumberLimit_VIP_5_AUTO_INSTANCE"
    "_TIME\020!*|\n\017VipSettingsType\022\035\n\031VipSetting"
    "sType_EXP_BONUS\020\001\022(\n$VipSettingsType_SKI"
    "LL_PRACTICE_LIMIT\020\002\022 \n\034VipSettingsType_F"
    "RIEND_LIMIT\020\003*h\n\rPlayerBitType\022\016\n\nPBT_FR"
    "EEZE\020\000\022\014\n\010PBT_MUTE\020\001\022\020\n\014PBT_OBSERVER\020\002\022\n"
    "\n\006PBT_GM\020\003\022\016\n\nPBT_HIDDEN\020\004\022\013\n\007PBT_MAX\020\016*"
    "\275%\n\016PlayerFlagType\022*\n&PlayerFlagType_FIR"
    "ST_GENERATE_YINGLING\020\001\022\'\n#PlayerFlagType"
    "_CONTINIUS_LOGIN_DAYS\020\002\022/\n+PlayerFlagTyp"
    "e_ACTIVITY_START_HIRE_YINGLING\020\003\022-\n)Play"
    "erFlagType_ACTIVITY_END_HIRE_YINGLING\020\004\022"
    "0\n,PlayerFlagType_ACTIVITY_START_STRENGT"
    "H_EQUIP\020\005\022.\n*PlayerFlagType_ACTIVITY_END"
    "_STRENGTH_EQUIP\020\006\0227\n3PlayerFlagType_CURR"
    "ENT_STACKABLE_HIRE_YINGLING_COST\020\007\022<\n8Pl"
    "ayerFlagType_CURRENT_STACKABLE_HIRE_HERO"
    "_YINGLING_COST\020\010\022\'\n#PlayerFlagType_FUNCT"
    "ION_LIMIT_START\020\026\022\"\n\036PlayerFlagType_FUNC"
    "TION_OPEN_1\020\027\022\"\n\036PlayerFlagType_FUNCTION"
    "_OPEN_2\020\030\022\"\n\036PlayerFlagType_FUNCTION_OPE"
    "N_3\020\031\022\"\n\036PlayerFlagType_FUNCTION_OPEN_4\020"
    "\032\022\"\n\036PlayerFlagType_FUNCTION_OPEN_5\020\033\022\"\n"
    "\036PlayerFlagType_FUNCTION_OPEN_6\020\034\022\"\n\036Pla"
    "yerFlagType_FUNCTION_OPEN_7\020\035\022\"\n\036PlayerF"
    "lagType_FUNCTION_OPEN_8\020\036\022\"\n\036PlayerFlagT"
    "ype_LEVELUP_GIFT_ID\020\037\022\037\n\033PlayerFlagType_"
    "ADD_FAVORITE\020 \022\037\n\033PlayerFlagType_FIRST_C"
    "HARGE\020!\022 \n\034PlayerFlagType_WEIXIN_VERIFY\020"
    "\"\022%\n!PlayerFlagType_DAILY_FIRST_CHARGE\020#"
    "\022)\n%PlayerFlagType_DAILY_FIRST_CHARGE_NU"
    "M\020$\022)\n%PlayerFlagType_DAILY_FIRST_CHARGE"
    "_CUR\020%\022&\n\"PlayerFlagType_ACC_CONSUME_DIA"
    "MOND\020&\022%\n!PlayerFlagType_LUCKY_ONCE_DIAM"
    "OND\020\'\022-\n)PlayerFlagType_EXCHANGE_YINGLIN"
    "G_1_STATUS\020(\022-\n)PlayerFlagType_EXCHANGE_"
    "YINGLING_2_STATUS\020)\022 \n\034PlayerFlagType_LU"
    "CKY_CREDITS\020*\022\"\n\036PlayerFlagType_LUCKY_ON"
    "CE_MORE\020+\022,\n(PlayerFlagType_LAST_ADD_EXT"
    "RA_LUCKY_TIME\020,\022\037\n\033PlayerFlagType_OFFLIN"
    "E_GIFT\020-\022&\n\"PlayerFlagType_IS_IN_AUTO_IN"
    "STANCE\020.\022\036\n\032PlayerFlagType_INSTANCE_ID\020/"
    "\022!\n\035PlayerFlagType_INSTANCE_GRADE\0200\022#\n\037P"
    "layerFlagType_STOP_ON_BAG_FULL\0201\022 \n\034Play"
    "erFlagType_SOUL_EXCHANGE\020c\022%\n!PlayerFlag"
    "Type_FUNCTION_LIMIT_END\020d\022 \n\034PlayerFlagT"
    "ype_GIFT_START_ID\020e\0226\n2PlayerFlagType_AP"
    "PLIED_STACKABLE_ONLINE_GIFT_DAY_1\020f\0226\n2P"
    "layerFlagType_APPLIED_STACKABLE_ONLINE_G"
    "IFT_DAY_2\020g\0226\n2PlayerFlagType_APPLIED_ST"
    "ACKABLE_ONLINE_GIFT_DAY_3\020h\0226\n2PlayerFla"
    "gType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_"
    "4\020i\0226\n2PlayerFlagType_APPLIED_STACKABLE_"
    "ONLINE_GIFT_DAY_5\020j\0226\n2PlayerFlagType_AP"
    "PLIED_STACKABLE_ONLINE_GIFT_DAY_6\020k\0226\n2P"
    "layerFlagType_APPLIED_STACKABLE_ONLINE_G"
    "IFT_DAY_7\020l\0226\n2PlayerFlagType_APPLIED_ST"
    "ACKABLE_ONLINE_GIFT_DAY_8\020m\0226\n2PlayerFla"
    "gType_APPLIED_STACKABLE_ONLINE_GIFT_DAY_"
    "9\020n\0227\n3PlayerFlagType_APPLIED_STACKABLE_"
    "ONLINE_GIFT_DAY_10\020o\022#\n\037PlayerFlagType_F"
    "IST_VIP_BONUS_1\020p\022#\n\037PlayerFlagType_FIST"
    "_VIP_BONUS_2\020q\022#\n\037PlayerFlagType_FIST_VI"
    "P_BONUS_3\020r\022#\n\037PlayerFlagType_FIST_VIP_B"
    "ONUS_4\020s\022#\n\037PlayerFlagType_FIST_VIP_BONU"
    "S_5\020t\022#\n\037PlayerFlagType_FIST_VIP_BONUS_6"
    "\020u\022#\n\037PlayerFlagType_FIST_VIP_BONUS_7\020v\022"
    "#\n\037PlayerFlagType_FIST_VIP_BONUS_8\020w\022#\n\037"
    "PlayerFlagType_FIST_VIP_BONUS_9\020x\022$\n Pla"
    "yerFlagType_FIST_VIP_BONUS_10\020y\022\'\n\"Playe"
    "rFlagType_EQUIP_STRENGTH_TIME\020\202\001\022#\n\036Play"
    "erFlagType_ARENA_WIN_COUNT\020\203\001\022%\n PlayerF"
    "lagType_TASK_WANTED_COUNT\020\204\001\022\"\n\035PlayerFl"
    "agType_PRACTICE_DAY_1\020\206\001\022\"\n\035PlayerFlagTy"
    "pe_PRACTICE_DAY_2\020\207\001\022\"\n\035PlayerFlagType_P"
    "RACTICE_DAY_3\020\210\001\022\"\n\035PlayerFlagType_PRACT"
    "ICE_DAY_4\020\211\001\022\"\n\035PlayerFlagType_PRACTICE_"
    "DAY_5\020\212\001\022\"\n\035PlayerFlagType_PRACTICE_DAY_"
    "6\020\213\001\022\"\n\035PlayerFlagType_PRACTICE_DAY_7\020\214\001"
    "\022(\n#PlayerFlagType_FIGHT_CAPACITY_INC_1\020"
    "\215\001\022(\n#PlayerFlagType_FIGHT_CAPACITY_INC_"
    "2\020\216\001\022(\n#PlayerFlagType_FIGHT_CAPACITY_IN"
    "C_3\020\217\001\022(\n#PlayerFlagType_FIGHT_CAPACITY_"
    "INC_4\020\220\001\022(\n#PlayerFlagType_FIGHT_CAPACIT"
    "Y_INC_5\020\221\001\022(\n#PlayerFlagType_FIGHT_CAPAC"
    "ITY_INC_6\020\222\001\022(\n#PlayerFlagType_FIGHT_CAP"
    "ACITY_INC_7\020\223\001\022(\n#PlayerFlagType_FIGHT_C"
    "APACITY_INC_8\020\224\001\022(\n#PlayerFlagType_FIGHT"
    "_CAPACITY_INC_9\020\225\001\022)\n$PlayerFlagType_FIG"
    "HT_CAPACITY_INC_10\020\226\001\022)\n$PlayerFlagType_"
    "FIGHT_CAPACITY_INC_11\020\227\001\022)\n$PlayerFlagTy"
    "pe_FIGHT_CAPACITY_INC_12\020\230\001\022)\n$PlayerFla"
    "gType_FIGHT_CAPACITY_INC_13\020\231\001\022)\n$Player"
    "FlagType_FIGHT_CAPACITY_INC_14\020\232\001\022)\n$Pla"
    "yerFlagType_FIGHT_CAPACITY_INC_15\020\233\001\022.\n)"
    "PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_"
    "1\020\240\001\022.\n)PlayerFlagType_HIRED_YINGLING_GI"
    "FT_FLAG_2\020\241\001\022.\n)PlayerFlagType_HIRED_YIN"
    "GLING_GIFT_FLAG_3\020\242\001\022.\n)PlayerFlagType_H"
    "IRED_YINGLING_GIFT_FLAG_4\020\243\001\022.\n)PlayerFl"
    "agType_HIRED_YINGLING_GIFT_FLAG_5\020\244\001\022.\n)"
    "PlayerFlagType_HIRED_YINGLING_GIFT_FLAG_"
    "6\020\245\001\022.\n)PlayerFlagType_HIRED_YINGLING_GI"
    "FT_FLAG_7\020\246\001\022.\n)PlayerFlagType_HIRED_YIN"
    "GLING_GIFT_FLAG_8\020\247\001\022.\n)PlayerFlagType_H"
    "IRED_YINGLING_GIFT_FLAG_9\020\250\001\022/\n*PlayerFl"
    "agType_HIRED_YINGLING_GIFT_FLAG_10\020\251\001\022.\n"
    ")PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG"
    "_1\020\252\001\022.\n)PlayerFlagType_STRENGTH_EQUIP_G"
    "IFT_FLAG_2\020\253\001\022.\n)PlayerFlagType_STRENGTH"
    "_EQUIP_GIFT_FLAG_3\020\254\001\022.\n)PlayerFlagType_"
    "STRENGTH_EQUIP_GIFT_FLAG_4\020\255\001\022.\n)PlayerF"
    "lagType_STRENGTH_EQUIP_GIFT_FLAG_5\020\256\001\022.\n"
    ")PlayerFlagType_STRENGTH_EQUIP_GIFT_FLAG"
    "_6\020\257\001\022.\n)PlayerFlagType_STRENGTH_EQUIP_G"
    "IFT_FLAG_7\020\260\001\022.\n)PlayerFlagType_STRENGTH"
    "_EQUIP_GIFT_FLAG_8\020\261\001\022.\n)PlayerFlagType_"
    "STRENGTH_EQUIP_GIFT_FLAG_9\020\262\001\022/\n*PlayerF"
    "lagType_STRENGTH_EQUIP_GIFT_FLAG_10\020\263\001\022\""
    "\n\035PlayerFlagType_CHARGE_LEVEL_1\020\265\001\022\"\n\035Pl"
    "ayerFlagType_CHARGE_LEVEL_2\020\266\001\022\"\n\035Player"
    "FlagType_CHARGE_LEVEL_3\020\267\001\022\"\n\035PlayerFlag"
    "Type_CHARGE_LEVEL_4\020\270\001\022\"\n\035PlayerFlagType"
    "_CHARGE_LEVEL_5\020\271\001\022\"\n\035PlayerFlagType_CHA"
    "RGE_LEVEL_6\020\272\001\022\"\n\035PlayerFlagType_CHARGE_"
    "LEVEL_7\020\273\001\022\"\n\035PlayerFlagType_CHARGE_LEVE"
    "L_8\020\274\001\022\037\n\032PlayerFlagType_GIFT_END_ID\020\327\004*"
    "\212\006\n\023StartupActivityType\022%\n!StartupActivi"
    "tyType_HIRE_YINGLING\020\001\022&\n\"StartupActivit"
    "yType_STRENGTH_EQUIP\020\002\022%\n!StartupActivit"
    "yType_SINGLE_CHARGE\020\003\022&\n\"StartupActivity"
    "Type_VIP_PRIVILEGES\020\004\022&\n\"StartupActivity"
    "Type_FIGHT_CAPACITY\020\005\022$\n StartupActivity"
    "Type_ADD_FAVORITE\020\006\022 \n\034StartupActivityTy"
    "pe_LEVEL_UP\020\007\022\"\n\036StartupActivityType_ALI"
    "EN_BOSS\020\010\022#\n\037StartupActivityType_LUCKY_W"
    "HEEL\020\t\022\037\n\033StartupActivityType_PVP_ACT\020\n\022"
    "%\n!StartupActivityType_Preliminaries\020\013\022&"
    "\n\"StartupActivityType_Quarter_Finals\020\014\022#"
    "\n\037StartupActivityType_Semi_Finals\020\r\022\036\n\032S"
    "tartupActivityType_Finals\020\016\0229\n5StartupAc"
    "tivityType_Preliminary_Advanced_Notifica"
    "tion\020\017\0227\n3StartupActivityType_Preliminar"
    "y_Hourly_Notification\020\020\022:\n6StartupActivi"
    "tyType_Preliminary_CountDown_Notificatio"
    "n\020\021\0227\n3StartupActivityType_Quarter_Compe"
    "titor_Notification\020\022*\226\002\n\024ClientPlayerFla"
    "gType\022)\n$PlayerFlagType_CLIENT_SCENE_STA"
    "RT_ID\020\220N\022\'\n\"PlayerFlagType_CLIENT_SCENE_"
    "END_ID\020\337]\022)\n$PlayerFlagType_CLIENT_GUIDE"
    "_START_ID\020\340]\022\'\n\"PlayerFlagType_CLIENT_GU"
    "IDE_END_ID\020\307e\022+\n%PlayerFlagType_CLIENT_S"
    "CENE_START_ID2\020\240\215\006\022)\n#PlayerFlagType_CLI"
    "ENT_SCENE_END_ID2\020\300\232\014*b\n\tTrainType\022\025\n\021Tr"
    "ainType_DEFAULT\020\000\022\024\n\020TrainType_NORMAL\020\001\022"
    "\024\n\020TrainType_MIDDLE\020\002\022\022\n\016TrainType_HIGH\020"
    "\003*3\n\023BUY_MORE_TIMES_TYPE\022\034\n\030BUY_ARENA_CH"
    "ALLENGE_TIME\020\001*R\n\021BUY_CLEAR_CD_TYPE\022\032\n\026B"
    "UY_CLEAR_CHALLENGE_CD\020\001\022!\n\035BUY_SPEED_UP_"
    "RACTICE_SKILL_CD\020\002*O\n\016UniqueNameType\022\036\n\032"
    "UniqueNameType_PLAYER_NAME\020\001\022\035\n\031UniqueNa"
    "meType_GUILD_NAME\020\002*\321\001\n\020GuildSkillStatus"
    "\022\034\n\030GuildSkill_CANT_RESEARCH\020\001\022\033\n\027GuildS"
    "kill_UNRESEARCHED\020\002\022\032\n\026GuildSkill_RESEAR"
    "CHING\020\003\022\031\n\025GuildSkill_RESEARCHED\020\004\022\031\n\025Gu"
    "ildSkill_CANT_LEARN\020\005\022\030\n\024GuildSkill_UNLE"
    "ARNED\020\006\022\026\n\022GuildSkill_LEARNED\020\007*F\n\014Funct"
    "ionType\022\036\n\032FunctionType_HIRE_YINGLING\020\001\022"
    "\026\n\022FunctionType_ARENA\020\002*\260\002\n\014LivenessType"
    "\022\033\n\027LIVENESS_MARKET_CONSUME\020\000\022\033\n\027LIVENES"
    "S_EQUIP_STRENGTH\020\001\022\034\n\030LIVENESS_SINGLE_IN"
    "STANCE\020\002\022\032\n\026LIVENESS_TEAM_INSTANCE\020\003\022\030\n\024"
    "LIVENESS_DAILY_QUEST\020\004\022\030\n\024LIVENESS_ARENA"
    "_FIGHT\020\005\022\022\n\016LIVENESS_LOGIN\020\006\022\027\n\023LIVENESS"
    "_AUTO_FIGHT\020\007\022\033\n\027LIVENESS_PRACTICE_SKILL"
    "\020\010\022\032\n\026LIVENESS_HIRE_YINGLING\020\t\022\022\n\016LIVENE"
    "SS_TOTAL\020\n*\217\001\n\020PlayerConfigType\022\031\n\025PC_DE"
    "NY_STRENGER_TEAM\020\000\022\032\n\026PC_DENY_STRENGER_G"
    "UILD\020\001\022\032\n\026PC_DENY_STRENGER_FIGHT\020\002\022\031\n\025PC"
    "_DENY_STRENGER_TALK\020\003\022\r\n\tPC_FRIEND\020\004*=\n\020"
    "FriendConfigType\022\r\n\tFC_VERIFY\020\000\022\013\n\007FC_DE"
    "NY\020\001\022\r\n\tFC_ACCEPT\020\002*R\n\025UpdateMonsterBuff"
    "Type\022\n\n\006MB_NEW\020\000\022\013\n\007MB_LOSE\020\001\022\021\n\rMB_SUBS"
    "TITUTE\020\002\022\r\n\tMB_UPDATE\020\003*d\n\033TeamChannelMe"
    "mberNotifyType\022\035\n\031TCMT_TEAM_MEMBER_LEVEL"
    "_UP\020\001\022&\n\"TCMT_TEAM_MEMBER_HIGH_QUALITY_I"
    "TEM\020\002*\244\003\n\007TitleId\022\025\n\020TITLE_ARENA_NO_1\020\233N"
    "\022\025\n\020TITLE_ARENA_NO_2\020\234N\022\025\n\020TITLE_ARENA_N"
    "O_3\020\235N\022\036\n\031TITLE_SWORDMAN_LEVEl_NO_1\020\245N\022\034"
    "\n\027TITLE_WIZARD_LEVEl_NO_1\020\246N\022\034\n\027TITLE_AR"
    "CHER_LEVEl_NO_1\020\247N\022\036\n\031TITLE_SWORDMAN_FIG"
    "HT_NO_1\020\250N\022\034\n\027TITLE_WIZARD_FIGHT_NO_1\020\251N"
    "\022\034\n\027TITLE_ARCHER_FIGHT_NO_1\020\252N\022\032\n\025TITLE_"
    "COINS_RANK_NO_1\020\253N\022\032\n\025TITLE_GUILD_RANK_N"
    "O_1\020\271N\022\032\n\025TITLE_WORLD_BOSS_NO_1\020\257N\022\023\n\016TI"
    "TLE_PVP_NO_1\020\303N\022\031\n\024TITLE_GUILD_WAR_NO_1\020"
    "\304N\022\030\n\023TITLE_GUILD_WAR_MVP\020\305N*y\n\016ROOM_OPE"
    "RATION\022\026\n\022CHANGE_ROOM_LEADER\020\001\022\021\n\rKICK_O"
    "UT_ROOM\020\002\022\016\n\nLEAVE_ROOM\020\003\022\027\n\023UPDATE_PLAY"
    "ER_READY\020\004\022\023\n\017UPDATE_ROOM_PWD\020\005", 41031);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_common.proto", &protobuf_RegisterTypes);
  InstanceCardInfo::default_instance_ = new InstanceCardInfo();
  InstanceWantedInfo::default_instance_ = new InstanceWantedInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  Fighter::default_instance_ = new Fighter();
  SkillBonus::default_instance_ = new SkillBonus();
  PlayerPhyStrengthInfo::default_instance_ = new PlayerPhyStrengthInfo();
  PlayerInfo::default_instance_ = new PlayerInfo();
  NPCInfo::default_instance_ = new NPCInfo();
  BaojuInfo::default_instance_ = new BaojuInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  SkillInfo::default_instance_ = new SkillInfo();
  BattleSkillInfo::default_instance_ = new BattleSkillInfo();
  BankInfo::default_instance_ = new BankInfo();
  YinglingInfo::default_instance_ = new YinglingInfo();
  BuddyDetailInfo::default_instance_ = new BuddyDetailInfo();
  PBIntPair::default_instance_ = new PBIntPair();
  Relation::default_instance_ = new Relation();
  PlayerRelationData::default_instance_ = new PlayerRelationData();
  InstanceInfo::default_instance_ = new InstanceInfo();
  InstanceDetail::default_instance_ = new InstanceDetail();
  MonsterInfo::default_instance_ = new MonsterInfo();
  WingSpiritInfo::default_instance_ = new WingSpiritInfo();
  WingSlotInfo::default_instance_ = new WingSlotInfo();
  WingItemInfo::default_instance_ = new WingItemInfo();
  WingSpiritBag::default_instance_ = new WingSpiritBag();
  SpiritGeneratorInfo::default_instance_ = new SpiritGeneratorInfo();
  EquipInfo::default_instance_ = new EquipInfo();
  AttributeData::default_instance_ = new AttributeData();
  EquipStoneData::default_instance_ = new EquipStoneData();
  EquipStoneData_StoneData::default_instance_ = new EquipStoneData_StoneData();
  DBSlotData::default_instance_ = new DBSlotData();
  EquipDetail::default_instance_ = new EquipDetail();
  FighterInfo::default_instance_ = new FighterInfo();
  LineupInfo::default_instance_ = new LineupInfo();
  Money1::default_instance_ = new Money1();
  Money::default_instance_ = new Money();
  QuestAction::default_instance_ = new QuestAction();
  QuestActionsPb::default_instance_ = new QuestActionsPb();
  QuestPb::default_instance_ = new QuestPb();
  QuestPreCondition::default_instance_ = new QuestPreCondition();
  QuestRewards::default_instance_ = new QuestRewards();
  QuestRewards_QuestRewardItem::default_instance_ = new QuestRewards_QuestRewardItem();
  QuestProtoype::default_instance_ = new QuestProtoype();
  GuildCrystalReward::default_instance_ = new GuildCrystalReward();
  TreasureBoxReward::default_instance_ = new TreasureBoxReward();
  GuildCrystalTowerActivityData::default_instance_ = new GuildCrystalTowerActivityData();
  PlayerPosBeforeInstance::default_instance_ = new PlayerPosBeforeInstance();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  TeamInfo::default_instance_ = new TeamInfo();
  CoolDown::default_instance_ = new CoolDown();
  RoleCoolDownPb::default_instance_ = new RoleCoolDownPb();
  DailyCountLimit::default_instance_ = new DailyCountLimit();
  RoleDailyLimitPb::default_instance_ = new RoleDailyLimitPb();
  DBRoleLimitDataPb::default_instance_ = new DBRoleLimitDataPb();
  HiredYinglingCount::default_instance_ = new HiredYinglingCount();
  RoleHiredYinglingCount::default_instance_ = new RoleHiredYinglingCount();
  StrengthEquipCount::default_instance_ = new StrengthEquipCount();
  RoleStrengthEquipCount::default_instance_ = new RoleStrengthEquipCount();
  DailyQuest::default_instance_ = new DailyQuest();
  DailyQuestPb::default_instance_ = new DailyQuestPb();
  XunluoQuestPb::default_instance_ = new XunluoQuestPb();
  GuildCircleQuestPb::default_instance_ = new GuildCircleQuestPb();
  PlayerFlagPb::default_instance_ = new PlayerFlagPb();
  PlayerFlagDataPb::default_instance_ = new PlayerFlagDataPb();
  TrainAttribute::default_instance_ = new TrainAttribute();
  ArenaPlayerInfo::default_instance_ = new ArenaPlayerInfo();
  TreasureBox::default_instance_ = new TreasureBox();
  UsedName::default_instance_ = new UsedName();
  UsedNameData::default_instance_ = new UsedNameData();
  UnuseNameMsg::default_instance_ = new UnuseNameMsg();
  HideNpcData::default_instance_ = new HideNpcData();
  HideNpcPb::default_instance_ = new HideNpcPb();
  NpcPosition::default_instance_ = new NpcPosition();
  OpenedFunctionNotify::default_instance_ = new OpenedFunctionNotify();
  GetBuddyTemplateAttributeRequest::default_instance_ = new GetBuddyTemplateAttributeRequest();
  GetBuddyTemplateAttributeResponse::default_instance_ = new GetBuddyTemplateAttributeResponse();
  YouLiMapData::default_instance_ = new YouLiMapData();
  YouLiMapData_GridData::default_instance_ = new YouLiMapData_GridData();
  YinglingComboStatus_ComboMember::default_instance_ = new YinglingComboStatus_ComboMember();
  YinglingComboStatus_Combo::default_instance_ = new YinglingComboStatus_Combo();
  YinglingComboStatus::default_instance_ = new YinglingComboStatus();
  YinglingTrainStatus::default_instance_ = new YinglingTrainStatus();
  InstanceCardInfo::default_instance_->InitAsDefaultInstance();
  InstanceWantedInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  Fighter::default_instance_->InitAsDefaultInstance();
  SkillBonus::default_instance_->InitAsDefaultInstance();
  PlayerPhyStrengthInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  NPCInfo::default_instance_->InitAsDefaultInstance();
  BaojuInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  BattleSkillInfo::default_instance_->InitAsDefaultInstance();
  BankInfo::default_instance_->InitAsDefaultInstance();
  YinglingInfo::default_instance_->InitAsDefaultInstance();
  BuddyDetailInfo::default_instance_->InitAsDefaultInstance();
  PBIntPair::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  PlayerRelationData::default_instance_->InitAsDefaultInstance();
  InstanceInfo::default_instance_->InitAsDefaultInstance();
  InstanceDetail::default_instance_->InitAsDefaultInstance();
  MonsterInfo::default_instance_->InitAsDefaultInstance();
  WingSpiritInfo::default_instance_->InitAsDefaultInstance();
  WingSlotInfo::default_instance_->InitAsDefaultInstance();
  WingItemInfo::default_instance_->InitAsDefaultInstance();
  WingSpiritBag::default_instance_->InitAsDefaultInstance();
  SpiritGeneratorInfo::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  AttributeData::default_instance_->InitAsDefaultInstance();
  EquipStoneData::default_instance_->InitAsDefaultInstance();
  EquipStoneData_StoneData::default_instance_->InitAsDefaultInstance();
  DBSlotData::default_instance_->InitAsDefaultInstance();
  EquipDetail::default_instance_->InitAsDefaultInstance();
  FighterInfo::default_instance_->InitAsDefaultInstance();
  LineupInfo::default_instance_->InitAsDefaultInstance();
  Money1::default_instance_->InitAsDefaultInstance();
  Money::default_instance_->InitAsDefaultInstance();
  QuestAction::default_instance_->InitAsDefaultInstance();
  QuestActionsPb::default_instance_->InitAsDefaultInstance();
  QuestPb::default_instance_->InitAsDefaultInstance();
  QuestPreCondition::default_instance_->InitAsDefaultInstance();
  QuestRewards::default_instance_->InitAsDefaultInstance();
  QuestRewards_QuestRewardItem::default_instance_->InitAsDefaultInstance();
  QuestProtoype::default_instance_->InitAsDefaultInstance();
  GuildCrystalReward::default_instance_->InitAsDefaultInstance();
  TreasureBoxReward::default_instance_->InitAsDefaultInstance();
  GuildCrystalTowerActivityData::default_instance_->InitAsDefaultInstance();
  PlayerPosBeforeInstance::default_instance_->InitAsDefaultInstance();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  CoolDown::default_instance_->InitAsDefaultInstance();
  RoleCoolDownPb::default_instance_->InitAsDefaultInstance();
  DailyCountLimit::default_instance_->InitAsDefaultInstance();
  RoleDailyLimitPb::default_instance_->InitAsDefaultInstance();
  DBRoleLimitDataPb::default_instance_->InitAsDefaultInstance();
  HiredYinglingCount::default_instance_->InitAsDefaultInstance();
  RoleHiredYinglingCount::default_instance_->InitAsDefaultInstance();
  StrengthEquipCount::default_instance_->InitAsDefaultInstance();
  RoleStrengthEquipCount::default_instance_->InitAsDefaultInstance();
  DailyQuest::default_instance_->InitAsDefaultInstance();
  DailyQuestPb::default_instance_->InitAsDefaultInstance();
  XunluoQuestPb::default_instance_->InitAsDefaultInstance();
  GuildCircleQuestPb::default_instance_->InitAsDefaultInstance();
  PlayerFlagPb::default_instance_->InitAsDefaultInstance();
  PlayerFlagDataPb::default_instance_->InitAsDefaultInstance();
  TrainAttribute::default_instance_->InitAsDefaultInstance();
  ArenaPlayerInfo::default_instance_->InitAsDefaultInstance();
  TreasureBox::default_instance_->InitAsDefaultInstance();
  UsedName::default_instance_->InitAsDefaultInstance();
  UsedNameData::default_instance_->InitAsDefaultInstance();
  UnuseNameMsg::default_instance_->InitAsDefaultInstance();
  HideNpcData::default_instance_->InitAsDefaultInstance();
  HideNpcPb::default_instance_->InitAsDefaultInstance();
  NpcPosition::default_instance_->InitAsDefaultInstance();
  OpenedFunctionNotify::default_instance_->InitAsDefaultInstance();
  GetBuddyTemplateAttributeRequest::default_instance_->InitAsDefaultInstance();
  GetBuddyTemplateAttributeResponse::default_instance_->InitAsDefaultInstance();
  YouLiMapData::default_instance_->InitAsDefaultInstance();
  YouLiMapData_GridData::default_instance_->InitAsDefaultInstance();
  YinglingComboStatus_ComboMember::default_instance_->InitAsDefaultInstance();
  YinglingComboStatus_Combo::default_instance_->InitAsDefaultInstance();
  YinglingComboStatus::default_instance_->InitAsDefaultInstance();
  YinglingTrainStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fcommon_2eproto {
  StaticDescriptorInitializer_game_5fcommon_2eproto() {
    protobuf_AddDesc_game_5fcommon_2eproto();
  }
} static_descriptor_initializer_game_5fcommon_2eproto_;

const ::google::protobuf::EnumDescriptor* MessageModule_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageModule_descriptor_;
}
bool MessageModule_IsValid(int value) {
  switch(value) {
    case 0:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemPositionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemPositionType_descriptor_;
}
bool ItemPositionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DirectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectionType_descriptor_;
}
bool DirectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageAction_descriptor_;
}
bool MessageAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
    case 39:
    case 40:
    case 41:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 171:
    case 175:
    case 176:
    case 177:
    case 180:
    case 181:
    case 182:
    case 185:
    case 190:
    case 191:
    case 192:
    case 193:
    case 195:
    case 196:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 260:
    case 261:
    case 262:
    case 265:
    case 266:
    case 267:
    case 268:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 300:
    case 301:
    case 302:
    case 303:
    case 309:
    case 310:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 333:
    case 338:
    case 339:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AttrChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrChangeType_descriptor_;
}
bool AttrChangeType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_SELF_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_SELF_NOTICE_TYPE_descriptor_;
}
bool ARENA_SELF_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ARENA_PUBLIC_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENA_PUBLIC_NOTICE_TYPE_descriptor_;
}
bool ARENA_PUBLIC_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PUBLIC_NOTICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PUBLIC_NOTICE_TYPE_descriptor_;
}
bool PUBLIC_NOTICE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Profession_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profession_descriptor_;
}
bool Profession_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStatus_descriptor_;
}
bool GameStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountStatus_descriptor_;
}
bool AccountStatus_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LEVEL_UP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LEVEL_UP_TYPE_descriptor_;
}
bool LEVEL_UP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PRACTICE_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRACTICE_MODE_descriptor_;
}
bool PRACTICE_MODE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PAY_FUNCTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAY_FUNCTION_TYPE_descriptor_;
}
bool PAY_FUNCTION_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENUM_ATTR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ENUM_ATTR_descriptor_;
}
bool ENUM_ATTR_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 70:
    case 71:
    case 72:
    case 73:
    case 80:
    case 81:
    case 82:
    case 83:
    case 91:
    case 92:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SKIP_FIGHT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SKIP_FIGHT_TYPE_descriptor_;
}
bool SKIP_FIGHT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FIGHT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FIGHT_TYPE_descriptor_;
}
bool FIGHT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YinglingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingStatus_descriptor_;
}
bool YinglingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YinglingQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingQuality_descriptor_;
}
bool YinglingQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RefreshYinglingListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshYinglingListType_descriptor_;
}
bool RefreshYinglingListType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AnnounceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceType_descriptor_;
}
bool AnnounceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 101:
    case 201:
    case 301:
    case 401:
    case 501:
    case 601:
    case 701:
    case 702:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemType_descriptor_;
}
bool ItemType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosition_descriptor_;
}
bool EquipPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LINE_UP_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LINE_UP_OPERATION_descriptor_;
}
bool LINE_UP_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UPDATE_BATTLE_SKILL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UPDATE_BATTLE_SKILL_TYPE_descriptor_;
}
bool UPDATE_BATTLE_SKILL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MONEY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MONEY_TYPE_descriptor_;
}
bool MONEY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestActionType_descriptor_;
}
bool QuestActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestAction_ClientActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestAction_ClientActionType_descriptor_;
}
bool QuestAction_ClientActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestStatus_descriptor_;
}
bool QuestStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TreasureBoxBonusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureBoxBonusType_descriptor_;
}
bool TreasureBoxBonusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivityStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStatus_descriptor_;
}
bool ActivityStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DIFFICULTY_LEVEL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DIFFICULTY_LEVEL_descriptor_;
}
bool DIFFICULTY_LEVEL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_OBJECTIVE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_OBJECTIVE_TYPE_descriptor_;
}
bool TEAM_OBJECTIVE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_ADD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_ADD_TYPE_descriptor_;
}
bool TEAM_ADD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_OPERATION_descriptor_;
}
bool TEAM_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_APPLY_RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_APPLY_RESULT_descriptor_;
}
bool TEAM_APPLY_RESULT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TEAM_LINEUP_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEAM_LINEUP_OPERATION_descriptor_;
}
bool TEAM_LINEUP_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SERVER_SYNC_TEAM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SERVER_SYNC_TEAM_TYPE_descriptor_;
}
bool SERVER_SYNC_TEAM_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleLimitType_descriptor_;
}
bool RoleLimitType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionLimitType_descriptor_;
}
bool FunctionLimitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NumberLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberLimitType_descriptor_;
}
bool NumberLimitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VipSettingsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipSettingsType_descriptor_;
}
bool VipSettingsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerBitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBitType_descriptor_;
}
bool PlayerBitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagType_descriptor_;
}
bool PlayerFlagType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 130:
    case 131:
    case 132:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 599:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StartupActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartupActivityType_descriptor_;
}
bool StartupActivityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClientPlayerFlagType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPlayerFlagType_descriptor_;
}
bool ClientPlayerFlagType_IsValid(int value) {
  switch(value) {
    case 10000:
    case 11999:
    case 12000:
    case 12999:
    case 100000:
    case 200000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrainType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainType_descriptor_;
}
bool TrainType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUY_MORE_TIMES_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUY_MORE_TIMES_TYPE_descriptor_;
}
bool BUY_MORE_TIMES_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BUY_CLEAR_CD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUY_CLEAR_CD_TYPE_descriptor_;
}
bool BUY_CLEAR_CD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UniqueNameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueNameType_descriptor_;
}
bool UniqueNameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildSkillStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSkillStatus_descriptor_;
}
bool GuildSkillStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionType_descriptor_;
}
bool FunctionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LivenessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessType_descriptor_;
}
bool LivenessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerConfigType_descriptor_;
}
bool PlayerConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendConfigType_descriptor_;
}
bool FriendConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UpdateMonsterBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMonsterBuffType_descriptor_;
}
bool UpdateMonsterBuffType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TeamChannelMemberNotifyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamChannelMemberNotifyType_descriptor_;
}
bool TeamChannelMemberNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TitleId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleId_descriptor_;
}
bool TitleId_IsValid(int value) {
  switch(value) {
    case 10011:
    case 10012:
    case 10013:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10031:
    case 10041:
    case 10051:
    case 10052:
    case 10053:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ROOM_OPERATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROOM_OPERATION_descriptor_;
}
bool ROOM_OPERATION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCardInfo::kItemIdFieldNumber;
const int InstanceCardInfo::kItemCountFieldNumber;
const int InstanceCardInfo::kTypeFieldNumber;
const int InstanceCardInfo::kIconIdFieldNumber;
#endif  // !_MSC_VER

InstanceCardInfo::InstanceCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceCardInfo::InitAsDefaultInstance() {
}

InstanceCardInfo::InstanceCardInfo(const InstanceCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceCardInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  type_ = 0;
  icon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCardInfo::~InstanceCardInfo() {
  SharedDtor();
}

void InstanceCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCardInfo_descriptor_;
}

const InstanceCardInfo& InstanceCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceCardInfo* InstanceCardInfo::default_instance_ = NULL;

InstanceCardInfo* InstanceCardInfo::New() const {
  return new InstanceCardInfo;
}

void InstanceCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
    type_ = 0;
    icon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }
      
      // required int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }
      
      // required int32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // required int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // required int32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // required int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // required int32 icon_id = 4;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->icon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceCardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // required int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCardInfo::MergeFrom(const InstanceCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCardInfo::CopyFrom(const InstanceCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void InstanceCardInfo::Swap(InstanceCardInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(type_, other->type_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCardInfo_descriptor_;
  metadata.reflection = InstanceCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceWantedInfo::kInstanceIdFieldNumber;
const int InstanceWantedInfo::kLeftTimeFieldNumber;
const int InstanceWantedInfo::kCardInfoFieldNumber;
#endif  // !_MSC_VER

InstanceWantedInfo::InstanceWantedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceWantedInfo::InitAsDefaultInstance() {
}

InstanceWantedInfo::InstanceWantedInfo(const InstanceWantedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceWantedInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceWantedInfo::~InstanceWantedInfo() {
  SharedDtor();
}

void InstanceWantedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceWantedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceWantedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceWantedInfo_descriptor_;
}

const InstanceWantedInfo& InstanceWantedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceWantedInfo* InstanceWantedInfo::default_instance_ = NULL;

InstanceWantedInfo* InstanceWantedInfo::New() const {
  return new InstanceWantedInfo;
}

void InstanceWantedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    left_time_ = 0;
  }
  card_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceWantedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_info;
        break;
      }
      
      // repeated .protocols.common.InstanceCardInfo card_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceWantedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_time(), output);
  }
  
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  for (int i = 0; i < this->card_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceWantedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 left_time = 2;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_time(), target);
  }
  
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  for (int i = 0; i < this->card_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceWantedInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 left_time = 2;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  // repeated .protocols.common.InstanceCardInfo card_info = 3;
  total_size += 1 * this->card_info_size();
  for (int i = 0; i < this->card_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceWantedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceWantedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceWantedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceWantedInfo::MergeFrom(const InstanceWantedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_info_.MergeFrom(from.card_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceWantedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceWantedInfo::CopyFrom(const InstanceWantedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceWantedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < card_info_size(); i++) {
    if (!this->card_info(i).IsInitialized()) return false;
  }
  return true;
}

void InstanceWantedInfo::Swap(InstanceWantedInfo* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(left_time_, other->left_time_);
    card_info_.Swap(&other->card_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceWantedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceWantedInfo_descriptor_;
  metadata.reflection = InstanceWantedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kBuffIdFieldNumber;
const int BuffInfo::kBuffValueFieldNumber;
const int BuffInfo::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  buff_value_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_id_ = 0;
    buff_value_ = 0;
    left_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_value;
        break;
      }
      
      // optional int32 buff_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_value_)));
          set_has_buff_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }
      
      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_value(), output);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }
  
  // optional int32 buff_value = 2;
  if (has_buff_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_value(), target);
  }
  
  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }
    
    // optional int32 buff_value = 2;
    if (has_buff_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_value());
    }
    
    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_buff_value()) {
      set_buff_value(from.buff_value());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(buff_value_, other->buff_value_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fighter::kCampFieldNumber;
const int Fighter::kIndexFieldNumber;
const int Fighter::kGuidFieldNumber;
const int Fighter::kTidFieldNumber;
const int Fighter::kHpFieldNumber;
const int Fighter::kMaxHpFieldNumber;
const int Fighter::kLevelFieldNumber;
const int Fighter::kIsPlayerFieldNumber;
const int Fighter::kIsTeamLeaderFieldNumber;
const int Fighter::kNameFieldNumber;
const int Fighter::kOwnerNameFieldNumber;
const int Fighter::kQualityFieldNumber;
const int Fighter::kPhyAttackFieldNumber;
const int Fighter::kPhyDefenceFieldNumber;
const int Fighter::kMagAttackFieldNumber;
const int Fighter::kMagDefenceFieldNumber;
#endif  // !_MSC_VER

Fighter::Fighter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fighter::InitAsDefaultInstance() {
}

Fighter::Fighter(const Fighter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fighter::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0;
  index_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  hp_ = 0;
  max_hp_ = 0;
  level_ = 0;
  is_player_ = 0;
  is_team_leader_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  phy_attack_ = 0;
  phy_defence_ = 0;
  mag_attack_ = 0;
  mag_defence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fighter::~Fighter() {
  SharedDtor();
}

void Fighter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_name_;
  }
  if (this != default_instance_) {
  }
}

void Fighter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fighter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fighter_descriptor_;
}

const Fighter& Fighter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Fighter* Fighter::default_instance_ = NULL;

Fighter* Fighter::New() const {
  return new Fighter;
}

void Fighter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0;
    index_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    hp_ = 0;
    max_hp_ = 0;
    level_ = 0;
    is_player_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_team_leader_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::kEmptyString) {
        owner_name_->clear();
      }
    }
    quality_ = 0;
    phy_attack_ = 0;
    phy_defence_ = 0;
    mag_attack_ = 0;
    mag_defence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fighter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }
      
      // optional int64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tid;
        break;
      }
      
      // optional int32 tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_player;
        break;
      }
      
      // optional int32 is_player = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_player_)));
          set_has_is_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_team_leader;
        break;
      }
      
      // optional int32 is_team_leader = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_team_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_team_leader_)));
          set_has_is_team_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phy_attack;
        break;
      }
      
      // optional int32 phy_attack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_attack_)));
          set_has_phy_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_phy_defence;
        break;
      }
      
      // optional int32 phy_defence = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_defence_)));
          set_has_phy_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mag_attack;
        break;
      }
      
      // optional int32 mag_attack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mag_attack_)));
          set_has_mag_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mag_defence;
        break;
      }
      
      // optional int32 mag_defence = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mag_defence_)));
          set_has_mag_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_owner_name;
        break;
      }
      
      // optional string owner_name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_max_hp;
        break;
      }
      
      // optional int32 max_hp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fighter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->camp(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->guid(), output);
  }
  
  // optional int32 tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tid(), output);
  }
  
  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // optional int32 is_player = 7;
  if (has_is_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_player(), output);
  }
  
  // optional int32 is_team_leader = 8;
  if (has_is_team_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_team_leader(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }
  
  // optional int32 phy_attack = 11;
  if (has_phy_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phy_attack(), output);
  }
  
  // optional int32 phy_defence = 12;
  if (has_phy_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->phy_defence(), output);
  }
  
  // optional int32 mag_attack = 13;
  if (has_mag_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mag_attack(), output);
  }
  
  // optional int32 mag_defence = 14;
  if (has_mag_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mag_defence(), output);
  }
  
  // optional string owner_name = 15;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->owner_name(), output);
  }
  
  // optional int32 max_hp = 16;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_hp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fighter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->camp(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->guid(), target);
  }
  
  // optional int32 tid = 4;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tid(), target);
  }
  
  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // optional int32 is_player = 7;
  if (has_is_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_player(), target);
  }
  
  // optional int32 is_team_leader = 8;
  if (has_is_team_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_team_leader(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }
  
  // optional int32 phy_attack = 11;
  if (has_phy_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->phy_attack(), target);
  }
  
  // optional int32 phy_defence = 12;
  if (has_phy_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->phy_defence(), target);
  }
  
  // optional int32 mag_attack = 13;
  if (has_mag_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mag_attack(), target);
  }
  
  // optional int32 mag_defence = 14;
  if (has_mag_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mag_defence(), target);
  }
  
  // optional string owner_name = 15;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->owner_name(), target);
  }
  
  // optional int32 max_hp = 16;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->max_hp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fighter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int64 guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 tid = 4;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 max_hp = 16;
    if (has_max_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_hp());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 is_player = 7;
    if (has_is_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_player());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_team_leader = 8;
    if (has_is_team_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_team_leader());
    }
    
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string owner_name = 15;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }
    
    // optional int32 quality = 10;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 phy_attack = 11;
    if (has_phy_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_attack());
    }
    
    // optional int32 phy_defence = 12;
    if (has_phy_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_defence());
    }
    
    // optional int32 mag_attack = 13;
    if (has_mag_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mag_attack());
    }
    
    // optional int32 mag_defence = 14;
    if (has_mag_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mag_defence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fighter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fighter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fighter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fighter::MergeFrom(const Fighter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_player()) {
      set_is_player(from.is_player());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_team_leader()) {
      set_is_team_leader(from.is_team_leader());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_phy_attack()) {
      set_phy_attack(from.phy_attack());
    }
    if (from.has_phy_defence()) {
      set_phy_defence(from.phy_defence());
    }
    if (from.has_mag_attack()) {
      set_mag_attack(from.mag_attack());
    }
    if (from.has_mag_defence()) {
      set_mag_defence(from.mag_defence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fighter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fighter::CopyFrom(const Fighter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fighter::IsInitialized() const {
  
  return true;
}

void Fighter::Swap(Fighter* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(index_, other->index_);
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(level_, other->level_);
    std::swap(is_player_, other->is_player_);
    std::swap(is_team_leader_, other->is_team_leader_);
    std::swap(name_, other->name_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(quality_, other->quality_);
    std::swap(phy_attack_, other->phy_attack_);
    std::swap(phy_defence_, other->phy_defence_);
    std::swap(mag_attack_, other->mag_attack_);
    std::swap(mag_defence_, other->mag_defence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fighter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fighter_descriptor_;
  metadata.reflection = Fighter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBonus::kSkillIdFieldNumber;
const int SkillBonus::kSkillLevelFieldNumber;
const int SkillBonus::kExpBonusFieldNumber;
#endif  // !_MSC_VER

SkillBonus::SkillBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBonus::InitAsDefaultInstance() {
}

SkillBonus::SkillBonus(const SkillBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBonus::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  exp_bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBonus::~SkillBonus() {
  SharedDtor();
}

void SkillBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBonus_descriptor_;
}

const SkillBonus& SkillBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

SkillBonus* SkillBonus::default_instance_ = NULL;

SkillBonus* SkillBonus::New() const {
  return new SkillBonus;
}

void SkillBonus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 0;
    exp_bonus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp_bonus;
        break;
      }
      
      // required int32 exp_bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_bonus_)));
          set_has_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_level;
        break;
      }
      
      // required int32 skill_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_bonus(), output);
  }
  
  // required int32 skill_level = 3;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 exp_bonus = 2;
  if (has_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_bonus(), target);
  }
  
  // required int32 skill_level = 3;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBonus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 skill_level = 3;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }
    
    // required int32 exp_bonus = 2;
    if (has_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_bonus());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillBonus::MergeFrom(const SkillBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_exp_bonus()) {
      set_exp_bonus(from.exp_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillBonus::CopyFrom(const SkillBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SkillBonus::Swap(SkillBonus* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(exp_bonus_, other->exp_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBonus_descriptor_;
  metadata.reflection = SkillBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPhyStrengthInfo::kPhyStrengthFieldNumber;
const int PlayerPhyStrengthInfo::kPhyStrengthLimitFieldNumber;
const int PlayerPhyStrengthInfo::kExtraPhyStrengthFieldNumber;
const int PlayerPhyStrengthInfo::kExtraPhyStrengthLimitFieldNumber;
const int PlayerPhyStrengthInfo::kTimeForRecoverPhyStrengthFieldNumber;
#endif  // !_MSC_VER

PlayerPhyStrengthInfo::PlayerPhyStrengthInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPhyStrengthInfo::InitAsDefaultInstance() {
}

PlayerPhyStrengthInfo::PlayerPhyStrengthInfo(const PlayerPhyStrengthInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPhyStrengthInfo::SharedCtor() {
  _cached_size_ = 0;
  phy_strength_ = 0;
  phy_strength_limit_ = 0;
  extra_phy_strength_ = 0;
  extra_phy_strength_limit_ = 0;
  time_for_recover_phy_strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPhyStrengthInfo::~PlayerPhyStrengthInfo() {
  SharedDtor();
}

void PlayerPhyStrengthInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPhyStrengthInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPhyStrengthInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPhyStrengthInfo_descriptor_;
}

const PlayerPhyStrengthInfo& PlayerPhyStrengthInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerPhyStrengthInfo* PlayerPhyStrengthInfo::default_instance_ = NULL;

PlayerPhyStrengthInfo* PlayerPhyStrengthInfo::New() const {
  return new PlayerPhyStrengthInfo;
}

void PlayerPhyStrengthInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phy_strength_ = 0;
    phy_strength_limit_ = 0;
    extra_phy_strength_ = 0;
    extra_phy_strength_limit_ = 0;
    time_for_recover_phy_strength_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPhyStrengthInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 phy_strength = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_strength_)));
          set_has_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phy_strength_limit;
        break;
      }
      
      // optional int32 phy_strength_limit = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phy_strength_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_strength_limit_)));
          set_has_phy_strength_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extra_phy_strength;
        break;
      }
      
      // optional int32 extra_phy_strength = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_phy_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_phy_strength_)));
          set_has_extra_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_extra_phy_strength_limit;
        break;
      }
      
      // optional int32 extra_phy_strength_limit = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_phy_strength_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_phy_strength_limit_)));
          set_has_extra_phy_strength_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_for_recover_phy_strength;
        break;
      }
      
      // optional int32 time_for_recover_phy_strength = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_for_recover_phy_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_for_recover_phy_strength_)));
          set_has_time_for_recover_phy_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPhyStrengthInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 phy_strength = 1 [default = 0];
  if (has_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phy_strength(), output);
  }
  
  // optional int32 phy_strength_limit = 2 [default = 0];
  if (has_phy_strength_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phy_strength_limit(), output);
  }
  
  // optional int32 extra_phy_strength = 3 [default = 0];
  if (has_extra_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->extra_phy_strength(), output);
  }
  
  // optional int32 extra_phy_strength_limit = 4 [default = 0];
  if (has_extra_phy_strength_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->extra_phy_strength_limit(), output);
  }
  
  // optional int32 time_for_recover_phy_strength = 5 [default = 0];
  if (has_time_for_recover_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_for_recover_phy_strength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPhyStrengthInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 phy_strength = 1 [default = 0];
  if (has_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phy_strength(), target);
  }
  
  // optional int32 phy_strength_limit = 2 [default = 0];
  if (has_phy_strength_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phy_strength_limit(), target);
  }
  
  // optional int32 extra_phy_strength = 3 [default = 0];
  if (has_extra_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->extra_phy_strength(), target);
  }
  
  // optional int32 extra_phy_strength_limit = 4 [default = 0];
  if (has_extra_phy_strength_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->extra_phy_strength_limit(), target);
  }
  
  // optional int32 time_for_recover_phy_strength = 5 [default = 0];
  if (has_time_for_recover_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_for_recover_phy_strength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPhyStrengthInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 phy_strength = 1 [default = 0];
    if (has_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_strength());
    }
    
    // optional int32 phy_strength_limit = 2 [default = 0];
    if (has_phy_strength_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_strength_limit());
    }
    
    // optional int32 extra_phy_strength = 3 [default = 0];
    if (has_extra_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_phy_strength());
    }
    
    // optional int32 extra_phy_strength_limit = 4 [default = 0];
    if (has_extra_phy_strength_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_phy_strength_limit());
    }
    
    // optional int32 time_for_recover_phy_strength = 5 [default = 0];
    if (has_time_for_recover_phy_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_for_recover_phy_strength());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPhyStrengthInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPhyStrengthInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPhyStrengthInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPhyStrengthInfo::MergeFrom(const PlayerPhyStrengthInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phy_strength()) {
      set_phy_strength(from.phy_strength());
    }
    if (from.has_phy_strength_limit()) {
      set_phy_strength_limit(from.phy_strength_limit());
    }
    if (from.has_extra_phy_strength()) {
      set_extra_phy_strength(from.extra_phy_strength());
    }
    if (from.has_extra_phy_strength_limit()) {
      set_extra_phy_strength_limit(from.extra_phy_strength_limit());
    }
    if (from.has_time_for_recover_phy_strength()) {
      set_time_for_recover_phy_strength(from.time_for_recover_phy_strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPhyStrengthInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPhyStrengthInfo::CopyFrom(const PlayerPhyStrengthInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPhyStrengthInfo::IsInitialized() const {
  
  return true;
}

void PlayerPhyStrengthInfo::Swap(PlayerPhyStrengthInfo* other) {
  if (other != this) {
    std::swap(phy_strength_, other->phy_strength_);
    std::swap(phy_strength_limit_, other->phy_strength_limit_);
    std::swap(extra_phy_strength_, other->extra_phy_strength_);
    std::swap(extra_phy_strength_limit_, other->extra_phy_strength_limit_);
    std::swap(time_for_recover_phy_strength_, other->time_for_recover_phy_strength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPhyStrengthInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPhyStrengthInfo_descriptor_;
  metadata.reflection = PlayerPhyStrengthInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kGuidFieldNumber;
const int PlayerInfo::kTidFieldNumber;
const int PlayerInfo::kMapIdFieldNumber;
const int PlayerInfo::kMapXFieldNumber;
const int PlayerInfo::kMapYFieldNumber;
const int PlayerInfo::kVipLevelFieldNumber;
const int PlayerInfo::kJobFieldNumber;
const int PlayerInfo::kJobLevelFieldNumber;
const int PlayerInfo::kFlagFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kGenderFieldNumber;
const int PlayerInfo::kHpFieldNumber;
const int PlayerInfo::kExpFieldNumber;
const int PlayerInfo::kVipEndSecFieldNumber;
const int PlayerInfo::kLineupCapacityFieldNumber;
const int PlayerInfo::kStatusFieldNumber;
const int PlayerInfo::kLeaderGuidFieldNumber;
const int PlayerInfo::kServerIdFieldNumber;
const int PlayerInfo::kGuildIdFieldNumber;
const int PlayerInfo::kGuildNameFieldNumber;
const int PlayerInfo::kPlayerPhyStrengthFieldNumber;
const int PlayerInfo::kMapInstanceIdFieldNumber;
const int PlayerInfo::kFollowGuidFieldNumber;
const int PlayerInfo::kDirectionFieldNumber;
const int PlayerInfo::kRoleCreateTimeFieldNumber;
const int PlayerInfo::kWingTidFieldNumber;
const int PlayerInfo::kGuildTitleFieldNumber;
const int PlayerInfo::kTitleFieldNumber;
const int PlayerInfo::kPracticeExpFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  player_phy_strength_ = const_cast< ::protocols::common::PlayerPhyStrengthInfo*>(&::protocols::common::PlayerPhyStrengthInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  map_id_ = 1;
  map_x_ = 1;
  map_y_ = 1;
  vip_level_ = 0;
  job_ = 1;
  job_level_ = 1;
  flag_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 1;
  hp_ = 0;
  exp_ = 0;
  vip_end_sec_ = 0;
  lineup_capacity_ = 0;
  status_ = 0;
  leader_guid_ = GOOGLE_LONGLONG(0);
  server_id_ = 0;
  guild_id_ = 0;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_phy_strength_ = NULL;
  map_instance_id_ = 0;
  follow_guid_ = GOOGLE_LONGLONG(0);
  direction_ = 1;
  role_create_time_ = GOOGLE_LONGLONG(0);
  wing_tid_ = 0;
  guild_title_ = 0;
  title_ = 0;
  practice_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete player_phy_strength_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    map_id_ = 1;
    map_x_ = 1;
    map_y_ = 1;
    vip_level_ = 0;
    job_ = 1;
    job_level_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flag_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gender_ = 1;
    hp_ = 0;
    exp_ = 0;
    vip_end_sec_ = 0;
    lineup_capacity_ = 0;
    status_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    leader_guid_ = GOOGLE_LONGLONG(0);
    server_id_ = 0;
    guild_id_ = 0;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    if (has_player_phy_strength()) {
      if (player_phy_strength_ != NULL) player_phy_strength_->::protocols::common::PlayerPhyStrengthInfo::Clear();
    }
    map_instance_id_ = 0;
    follow_guid_ = GOOGLE_LONGLONG(0);
    direction_ = 1;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    role_create_time_ = GOOGLE_LONGLONG(0);
    wing_tid_ = 0;
    guild_title_ = 0;
    title_ = 0;
    practice_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip_level;
        break;
      }
      
      // optional int32 vip_level = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 6 [default = WIZARD];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job_level;
        break;
      }
      
      // optional int32 job_level = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_level_)));
          set_has_job_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }
      
      // optional int32 flag = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }
      
      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 10 [default = MALE];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_end_sec;
        break;
      }
      
      // optional int32 vip_end_sec = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_end_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_end_sec_)));
          set_has_vip_end_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_status;
        break;
      }
      
      // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::GameStatus_IsValid(value)) {
            set_status(static_cast< protocols::common::GameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tid;
        break;
      }
      
      // optional int32 tid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_leader_guid;
        break;
      }
      
      // optional int64 leader_guid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_guild_id;
        break;
      }
      
      // optional int32 guild_id = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_guild_name;
        break;
      }
      
      // optional string guild_name = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_lineup_capacity;
        break;
      }
      
      // optional int32 lineup_capacity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_capacity_)));
          set_has_lineup_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_map_instance_id;
        break;
      }
      
      // optional int32 map_instance_id = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_instance_id_)));
          set_has_map_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_player_phy_strength;
        break;
      }
      
      // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_phy_strength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_phy_strength()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_follow_guid;
        break;
      }
      
      // optional int64 follow_guid = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &follow_guid_)));
          set_has_follow_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_direction;
        break;
      }
      
      // optional int32 direction = 25 [default = 1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_role_create_time;
        break;
      }
      
      // optional int64 role_create_time = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &role_create_time_)));
          set_has_role_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_wing_tid;
        break;
      }
      
      // optional int32 wing_tid = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_tid_)));
          set_has_wing_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_guild_title;
        break;
      }
      
      // optional int32 guild_title = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_title_)));
          set_has_guild_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_title;
        break;
      }
      
      // optional int32 title = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_practice_exp;
        break;
      }
      
      // optional int32 practice_exp = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_exp_)));
          set_has_practice_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional int32 map_id = 2 [default = 1];
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_id(), output);
  }
  
  // optional int32 map_x = 3 [default = 1];
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_x(), output);
  }
  
  // optional int32 map_y = 4 [default = 1];
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_y(), output);
  }
  
  // optional int32 vip_level = 5 [default = 0];
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_level(), output);
  }
  
  // optional .protocols.common.Profession job = 6 [default = WIZARD];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->job(), output);
  }
  
  // optional int32 job_level = 7 [default = 1];
  if (has_job_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job_level(), output);
  }
  
  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }
  
  // optional .protocols.common.Gender gender = 10 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gender(), output);
  }
  
  // optional int32 hp = 11 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hp(), output);
  }
  
  // optional int32 exp = 12 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exp(), output);
  }
  
  // optional int32 vip_end_sec = 13 [default = 0];
  if (has_vip_end_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vip_end_sec(), output);
  }
  
  // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->status(), output);
  }
  
  // optional int32 tid = 16;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tid(), output);
  }
  
  // optional int64 leader_guid = 17;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->leader_guid(), output);
  }
  
  // optional int32 guild_id = 18 [default = 0];
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->guild_id(), output);
  }
  
  // optional string guild_name = 19 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->guild_name(), output);
  }
  
  // optional int32 server_id = 20;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->server_id(), output);
  }
  
  // optional int32 lineup_capacity = 21 [default = 0];
  if (has_lineup_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lineup_capacity(), output);
  }
  
  // optional int32 map_instance_id = 22 [default = 0];
  if (has_map_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->map_instance_id(), output);
  }
  
  // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
  if (has_player_phy_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->player_phy_strength(), output);
  }
  
  // optional int64 follow_guid = 24 [default = 0];
  if (has_follow_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->follow_guid(), output);
  }
  
  // optional int32 direction = 25 [default = 1];
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->direction(), output);
  }
  
  // optional int64 role_create_time = 26;
  if (has_role_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->role_create_time(), output);
  }
  
  // optional int32 wing_tid = 27 [default = 0];
  if (has_wing_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->wing_tid(), output);
  }
  
  // optional int32 guild_title = 28 [default = 0];
  if (has_guild_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->guild_title(), output);
  }
  
  // optional int32 title = 29 [default = 0];
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->title(), output);
  }
  
  // optional int32 practice_exp = 30 [default = 0];
  if (has_practice_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->practice_exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional int32 map_id = 2 [default = 1];
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_id(), target);
  }
  
  // optional int32 map_x = 3 [default = 1];
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_x(), target);
  }
  
  // optional int32 map_y = 4 [default = 1];
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_y(), target);
  }
  
  // optional int32 vip_level = 5 [default = 0];
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_level(), target);
  }
  
  // optional .protocols.common.Profession job = 6 [default = WIZARD];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->job(), target);
  }
  
  // optional int32 job_level = 7 [default = 1];
  if (has_job_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job_level(), target);
  }
  
  // optional int32 flag = 8 [default = 0];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }
  
  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }
  
  // optional .protocols.common.Gender gender = 10 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gender(), target);
  }
  
  // optional int32 hp = 11 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hp(), target);
  }
  
  // optional int32 exp = 12 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exp(), target);
  }
  
  // optional int32 vip_end_sec = 13 [default = 0];
  if (has_vip_end_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vip_end_sec(), target);
  }
  
  // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->status(), target);
  }
  
  // optional int32 tid = 16;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tid(), target);
  }
  
  // optional int64 leader_guid = 17;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->leader_guid(), target);
  }
  
  // optional int32 guild_id = 18 [default = 0];
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->guild_id(), target);
  }
  
  // optional string guild_name = 19 [default = ""];
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->guild_name(), target);
  }
  
  // optional int32 server_id = 20;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->server_id(), target);
  }
  
  // optional int32 lineup_capacity = 21 [default = 0];
  if (has_lineup_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lineup_capacity(), target);
  }
  
  // optional int32 map_instance_id = 22 [default = 0];
  if (has_map_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->map_instance_id(), target);
  }
  
  // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
  if (has_player_phy_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->player_phy_strength(), target);
  }
  
  // optional int64 follow_guid = 24 [default = 0];
  if (has_follow_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->follow_guid(), target);
  }
  
  // optional int32 direction = 25 [default = 1];
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->direction(), target);
  }
  
  // optional int64 role_create_time = 26;
  if (has_role_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->role_create_time(), target);
  }
  
  // optional int32 wing_tid = 27 [default = 0];
  if (has_wing_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->wing_tid(), target);
  }
  
  // optional int32 guild_title = 28 [default = 0];
  if (has_guild_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->guild_title(), target);
  }
  
  // optional int32 title = 29 [default = 0];
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->title(), target);
  }
  
  // optional int32 practice_exp = 30 [default = 0];
  if (has_practice_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->practice_exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional int32 tid = 16;
    if (has_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 map_id = 2 [default = 1];
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 3 [default = 1];
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 4 [default = 1];
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 vip_level = 5 [default = 0];
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }
    
    // optional .protocols.common.Profession job = 6 [default = WIZARD];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional int32 job_level = 7 [default = 1];
    if (has_job_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 flag = 8 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }
    
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional .protocols.common.Gender gender = 10 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 hp = 11 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 exp = 12 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 vip_end_sec = 13 [default = 0];
    if (has_vip_end_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_end_sec());
    }
    
    // optional int32 lineup_capacity = 21 [default = 0];
    if (has_lineup_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_capacity());
    }
    
    // optional .protocols.common.GameStatus status = 15 [default = GS_OFFLINE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 leader_guid = 17;
    if (has_leader_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // optional int32 server_id = 20;
    if (has_server_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int32 guild_id = 18 [default = 0];
    if (has_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_id());
    }
    
    // optional string guild_name = 19 [default = ""];
    if (has_guild_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }
    
    // optional .protocols.common.PlayerPhyStrengthInfo player_phy_strength = 23;
    if (has_player_phy_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_phy_strength());
    }
    
    // optional int32 map_instance_id = 22 [default = 0];
    if (has_map_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_instance_id());
    }
    
    // optional int64 follow_guid = 24 [default = 0];
    if (has_follow_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->follow_guid());
    }
    
    // optional int32 direction = 25 [default = 1];
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 role_create_time = 26;
    if (has_role_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->role_create_time());
    }
    
    // optional int32 wing_tid = 27 [default = 0];
    if (has_wing_tid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_tid());
    }
    
    // optional int32 guild_title = 28 [default = 0];
    if (has_guild_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_title());
    }
    
    // optional int32 title = 29 [default = 0];
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }
    
    // optional int32 practice_exp = 30 [default = 0];
    if (has_practice_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_job_level()) {
      set_job_level(from.job_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vip_end_sec()) {
      set_vip_end_sec(from.vip_end_sec());
    }
    if (from.has_lineup_capacity()) {
      set_lineup_capacity(from.lineup_capacity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_player_phy_strength()) {
      mutable_player_phy_strength()->::protocols::common::PlayerPhyStrengthInfo::MergeFrom(from.player_phy_strength());
    }
    if (from.has_map_instance_id()) {
      set_map_instance_id(from.map_instance_id());
    }
    if (from.has_follow_guid()) {
      set_follow_guid(from.follow_guid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_role_create_time()) {
      set_role_create_time(from.role_create_time());
    }
    if (from.has_wing_tid()) {
      set_wing_tid(from.wing_tid());
    }
    if (from.has_guild_title()) {
      set_guild_title(from.guild_title());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_practice_exp()) {
      set_practice_exp(from.practice_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(job_, other->job_);
    std::swap(job_level_, other->job_level_);
    std::swap(flag_, other->flag_);
    std::swap(name_, other->name_);
    std::swap(gender_, other->gender_);
    std::swap(hp_, other->hp_);
    std::swap(exp_, other->exp_);
    std::swap(vip_end_sec_, other->vip_end_sec_);
    std::swap(lineup_capacity_, other->lineup_capacity_);
    std::swap(status_, other->status_);
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(player_phy_strength_, other->player_phy_strength_);
    std::swap(map_instance_id_, other->map_instance_id_);
    std::swap(follow_guid_, other->follow_guid_);
    std::swap(direction_, other->direction_);
    std::swap(role_create_time_, other->role_create_time_);
    std::swap(wing_tid_, other->wing_tid_);
    std::swap(guild_title_, other->guild_title_);
    std::swap(title_, other->title_);
    std::swap(practice_exp_, other->practice_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCInfo::kNpcIdFieldNumber;
const int NPCInfo::kNpcTidFieldNumber;
const int NPCInfo::kNpcNameFieldNumber;
const int NPCInfo::kNpcLevelFieldNumber;
#endif  // !_MSC_VER

NPCInfo::NPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NPCInfo::InitAsDefaultInstance() {
}

NPCInfo::NPCInfo(const NPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NPCInfo::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  npc_tid_ = 0;
  npc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npc_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCInfo::~NPCInfo() {
  SharedDtor();
}

void NPCInfo::SharedDtor() {
  if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_name_;
  }
  if (this != default_instance_) {
  }
}

void NPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCInfo_descriptor_;
}

const NPCInfo& NPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

NPCInfo* NPCInfo::default_instance_ = NULL;

NPCInfo* NPCInfo::New() const {
  return new NPCInfo;
}

void NPCInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    npc_tid_ = 0;
    if (has_npc_name()) {
      if (npc_name_ != &::google::protobuf::internal::kEmptyString) {
        npc_name_->clear();
      }
    }
    npc_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_tid;
        break;
      }
      
      // optional int32 npc_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_tid_)));
          set_has_npc_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_npc_name;
        break;
      }
      
      // optional string npc_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_level;
        break;
      }
      
      // optional int32 npc_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_level_)));
          set_has_npc_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional int32 npc_tid = 2;
  if (has_npc_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_tid(), output);
  }
  
  // optional string npc_name = 3;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->npc_name(), output);
  }
  
  // optional int32 npc_level = 4;
  if (has_npc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional int32 npc_tid = 2;
  if (has_npc_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_tid(), target);
  }
  
  // optional string npc_name = 3;
  if (has_npc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->npc_name(), target);
  }
  
  // optional int32 npc_level = 4;
  if (has_npc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NPCInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional int32 npc_tid = 2;
    if (has_npc_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_tid());
    }
    
    // optional string npc_name = 3;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }
    
    // optional int32 npc_level = 4;
    if (has_npc_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCInfo::MergeFrom(const NPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_npc_tid()) {
      set_npc_tid(from.npc_tid());
    }
    if (from.has_npc_name()) {
      set_npc_name(from.npc_name());
    }
    if (from.has_npc_level()) {
      set_npc_level(from.npc_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCInfo::CopyFrom(const NPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NPCInfo::Swap(NPCInfo* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(npc_tid_, other->npc_tid_);
    std::swap(npc_name_, other->npc_name_);
    std::swap(npc_level_, other->npc_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCInfo_descriptor_;
  metadata.reflection = NPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaojuInfo::kGuidFieldNumber;
#endif  // !_MSC_VER

BaojuInfo::BaojuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaojuInfo::InitAsDefaultInstance() {
}

BaojuInfo::BaojuInfo(const BaojuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaojuInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaojuInfo::~BaojuInfo() {
  SharedDtor();
}

void BaojuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaojuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaojuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaojuInfo_descriptor_;
}

const BaojuInfo& BaojuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BaojuInfo* BaojuInfo::default_instance_ = NULL;

BaojuInfo* BaojuInfo::New() const {
  return new BaojuInfo;
}

void BaojuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaojuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaojuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaojuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaojuInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaojuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaojuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaojuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaojuInfo::MergeFrom(const BaojuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaojuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaojuInfo::CopyFrom(const BaojuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaojuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BaojuInfo::Swap(BaojuInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaojuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaojuInfo_descriptor_;
  metadata.reflection = BaojuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kCountFieldNumber;
const int ItemInfo::kExpiredFieldNumber;
const int ItemInfo::kPosFieldNumber;
const int ItemInfo::kPosTypeFieldNumber;
const int ItemInfo::kBindFlagFieldNumber;
const int ItemInfo::kStrengthLevelFieldNumber;
const int ItemInfo::kMarkFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  expired_ = 0;
  pos_ = 0;
  pos_type_ = 0;
  bind_flag_ = false;
  strength_level_ = 0;
  mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    expired_ = 0;
    pos_ = 0;
    pos_type_ = 0;
    bind_flag_ = false;
    strength_level_ = 0;
    mark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }
      
      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos_type;
        break;
      }
      
      // optional int32 pos_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bind_flag;
        break;
      }
      
      // optional bool bind_flag = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bind_flag_)));
          set_has_bind_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 expired = 3 [default = 0];
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->expired(), output);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }
  
  // optional int32 pos_type = 5;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos_type(), output);
  }
  
  // optional bool bind_flag = 6 [default = false];
  if (has_bind_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bind_flag(), output);
  }
  
  // optional int32 strength_level = 7 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength_level(), output);
  }
  
  // optional int32 mark = 8 [default = 0];
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 expired = 3 [default = 0];
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->expired(), target);
  }
  
  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }
  
  // optional int32 pos_type = 5;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos_type(), target);
  }
  
  // optional bool bind_flag = 6 [default = false];
  if (has_bind_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bind_flag(), target);
  }
  
  // optional int32 strength_level = 7 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength_level(), target);
  }
  
  // optional int32 mark = 8 [default = 0];
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 expired = 3 [default = 0];
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
    // optional int32 pos_type = 5;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }
    
    // optional bool bind_flag = 6 [default = false];
    if (has_bind_flag()) {
      total_size += 1 + 1;
    }
    
    // optional int32 strength_level = 7 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 mark = 8 [default = 0];
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
    if (from.has_bind_flag()) {
      set_bind_flag(from.bind_flag());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(count_, other->count_);
    std::swap(expired_, other->expired_);
    std::swap(pos_, other->pos_);
    std::swap(pos_type_, other->pos_type_);
    std::swap(bind_flag_, other->bind_flag_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kLevelFieldNumber;
const int SkillInfo::kEquipSlotIndexFieldNumber;
const int SkillInfo::kExpFieldNumber;
const int SkillInfo::kIsPracticingFieldNumber;
const int SkillInfo::kDeltaTimeFieldNumber;
const int SkillInfo::kDeltaAddExpFieldNumber;
const int SkillInfo::kPracticeTimeFieldNumber;
const int SkillInfo::kStatusFieldNumber;
const int SkillInfo::kTimeLeftForResearchFieldNumber;
const int SkillInfo::kIsUsedFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  equip_slot_index_ = -1;
  exp_ = 0;
  is_practicing_ = 0;
  delta_time_ = 0;
  delta_add_exp_ = 0;
  practice_time_ = 0;
  status_ = 0;
  time_left_for_research_ = 0;
  is_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    equip_slot_index_ = -1;
    exp_ = 0;
    is_practicing_ = 0;
    delta_time_ = 0;
    delta_add_exp_ = 0;
    practice_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
    time_left_for_research_ = 0;
    is_used_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_slot_index;
        break;
      }
      
      // optional int32 equip_slot_index = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_index_)));
          set_has_equip_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_practicing;
        break;
      }
      
      // optional int32 is_practicing = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_practicing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_practicing_)));
          set_has_is_practicing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_delta_time;
        break;
      }
      
      // optional int32 delta_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_time_)));
          set_has_delta_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_delta_add_exp;
        break;
      }
      
      // optional int32 delta_add_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delta_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_add_exp_)));
          set_has_delta_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_practice_time;
        break;
      }
      
      // optional int32 practice_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practice_time_)));
          set_has_practice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }
      
      // optional int32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_time_left_for_research;
        break;
      }
      
      // optional int32 time_left_for_research = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_left_for_research:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_left_for_research_)));
          set_has_time_left_for_research();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_used;
        break;
      }
      
      // optional int32 is_used = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_used_)));
          set_has_is_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 equip_slot_index = 3 [default = -1];
  if (has_equip_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_slot_index(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // optional int32 is_practicing = 5 [default = 0];
  if (has_is_practicing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_practicing(), output);
  }
  
  // optional int32 delta_time = 6;
  if (has_delta_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delta_time(), output);
  }
  
  // optional int32 delta_add_exp = 7;
  if (has_delta_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->delta_add_exp(), output);
  }
  
  // optional int32 practice_time = 8;
  if (has_practice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->practice_time(), output);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }
  
  // optional int32 time_left_for_research = 10;
  if (has_time_left_for_research()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->time_left_for_research(), output);
  }
  
  // optional int32 is_used = 11;
  if (has_is_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_used(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 equip_slot_index = 3 [default = -1];
  if (has_equip_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_slot_index(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  // optional int32 is_practicing = 5 [default = 0];
  if (has_is_practicing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_practicing(), target);
  }
  
  // optional int32 delta_time = 6;
  if (has_delta_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delta_time(), target);
  }
  
  // optional int32 delta_add_exp = 7;
  if (has_delta_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->delta_add_exp(), target);
  }
  
  // optional int32 practice_time = 8;
  if (has_practice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->practice_time(), target);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }
  
  // optional int32 time_left_for_research = 10;
  if (has_time_left_for_research()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->time_left_for_research(), target);
  }
  
  // optional int32 is_used = 11;
  if (has_is_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_used(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 equip_slot_index = 3 [default = -1];
    if (has_equip_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot_index());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 is_practicing = 5 [default = 0];
    if (has_is_practicing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_practicing());
    }
    
    // optional int32 delta_time = 6;
    if (has_delta_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_time());
    }
    
    // optional int32 delta_add_exp = 7;
    if (has_delta_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_add_exp());
    }
    
    // optional int32 practice_time = 8;
    if (has_practice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practice_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 time_left_for_research = 10;
    if (has_time_left_for_research()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_left_for_research());
    }
    
    // optional int32 is_used = 11;
    if (has_is_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_used());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_equip_slot_index()) {
      set_equip_slot_index(from.equip_slot_index());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_is_practicing()) {
      set_is_practicing(from.is_practicing());
    }
    if (from.has_delta_time()) {
      set_delta_time(from.delta_time());
    }
    if (from.has_delta_add_exp()) {
      set_delta_add_exp(from.delta_add_exp());
    }
    if (from.has_practice_time()) {
      set_practice_time(from.practice_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_time_left_for_research()) {
      set_time_left_for_research(from.time_left_for_research());
    }
    if (from.has_is_used()) {
      set_is_used(from.is_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(equip_slot_index_, other->equip_slot_index_);
    std::swap(exp_, other->exp_);
    std::swap(is_practicing_, other->is_practicing_);
    std::swap(delta_time_, other->delta_time_);
    std::swap(delta_add_exp_, other->delta_add_exp_);
    std::swap(practice_time_, other->practice_time_);
    std::swap(status_, other->status_);
    std::swap(time_left_for_research_, other->time_left_for_research_);
    std::swap(is_used_, other->is_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleSkillInfo::kSkillIdFieldNumber;
const int BattleSkillInfo::kLevelFieldNumber;
const int BattleSkillInfo::kBattleSkillTypeFieldNumber;
const int BattleSkillInfo::kExpFieldNumber;
#endif  // !_MSC_VER

BattleSkillInfo::BattleSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleSkillInfo::InitAsDefaultInstance() {
}

BattleSkillInfo::BattleSkillInfo(const BattleSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  level_ = 0;
  battle_skill_type_ = 2;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleSkillInfo::~BattleSkillInfo() {
  SharedDtor();
}

void BattleSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleSkillInfo_descriptor_;
}

const BattleSkillInfo& BattleSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BattleSkillInfo* BattleSkillInfo::default_instance_ = NULL;

BattleSkillInfo* BattleSkillInfo::New() const {
  return new BattleSkillInfo;
}

void BattleSkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    level_ = 0;
    battle_skill_type_ = 2;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_type;
        break;
      }
      
      // optional int32 battle_skill_type = 3 [default = 2];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_skill_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_skill_type_)));
          set_has_battle_skill_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional int32 battle_skill_type = 3 [default = 2];
  if (has_battle_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_skill_type(), output);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional int32 battle_skill_type = 3 [default = 2];
  if (has_battle_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_skill_type(), target);
  }
  
  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleSkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 battle_skill_type = 3 [default = 2];
    if (has_battle_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_skill_type());
    }
    
    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleSkillInfo::MergeFrom(const BattleSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battle_skill_type()) {
      set_battle_skill_type(from.battle_skill_type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleSkillInfo::CopyFrom(const BattleSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BattleSkillInfo::Swap(BattleSkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(battle_skill_type_, other->battle_skill_type_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleSkillInfo_descriptor_;
  metadata.reflection = BattleSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BankInfo::kCoinFieldNumber;
const int BankInfo::kCouponFieldNumber;
const int BankInfo::kDiamondFieldNumber;
#endif  // !_MSC_VER

BankInfo::BankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BankInfo::InitAsDefaultInstance() {
}

BankInfo::BankInfo(const BankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BankInfo::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0;
  coupon_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BankInfo::~BankInfo() {
  SharedDtor();
}

void BankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BankInfo_descriptor_;
}

const BankInfo& BankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BankInfo* BankInfo::default_instance_ = NULL;

BankInfo* BankInfo::New() const {
  return new BankInfo;
}

void BankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0;
    coupon_ = 0;
    diamond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coupon;
        break;
      }
      
      // optional int32 coupon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }
      
      // optional int32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coin(), output);
  }
  
  // optional int32 coupon = 2;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coupon(), output);
  }
  
  // optional int32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diamond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coin(), target);
  }
  
  // optional int32 coupon = 2;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coupon(), target);
  }
  
  // optional int32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diamond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BankInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 coupon = 2;
    if (has_coupon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coupon());
    }
    
    // optional int32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diamond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BankInfo::MergeFrom(const BankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BankInfo::CopyFrom(const BankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BankInfo::IsInitialized() const {
  
  return true;
}

void BankInfo::Swap(BankInfo* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(coupon_, other->coupon_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BankInfo_descriptor_;
  metadata.reflection = BankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingInfo::kGuidFieldNumber;
const int YinglingInfo::kTidFieldNumber;
const int YinglingInfo::kJobFieldNumber;
const int YinglingInfo::kGenderFieldNumber;
const int YinglingInfo::kJobLevelFieldNumber;
const int YinglingInfo::kNameFieldNumber;
const int YinglingInfo::kQualityFieldNumber;
const int YinglingInfo::kFightCapacityFieldNumber;
const int YinglingInfo::kIsInFightLineupFieldNumber;
#endif  // !_MSC_VER

YinglingInfo::YinglingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingInfo::InitAsDefaultInstance() {
}

YinglingInfo::YinglingInfo(const YinglingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  job_ = 1;
  gender_ = 1;
  job_level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  fight_capacity_ = 0;
  is_in_fight_lineup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingInfo::~YinglingInfo() {
  SharedDtor();
}

void YinglingInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void YinglingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingInfo_descriptor_;
}

const YinglingInfo& YinglingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingInfo* YinglingInfo::default_instance_ = NULL;

YinglingInfo* YinglingInfo::New() const {
  return new YinglingInfo;
}

void YinglingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    tid_ = 0;
    job_ = 1;
    gender_ = 1;
    job_level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0;
    fight_capacity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_in_fight_lineup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 2 [default = WIZARD];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_level;
        break;
      }
      
      // optional int32 job_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_level_)));
          set_has_job_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tid;
        break;
      }
      
      // required int32 tid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gender;
        break;
      }
      
      // optional .protocols.common.Gender gender = 15 [default = MALE];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Gender_IsValid(value)) {
            set_gender(static_cast< protocols::common::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_is_in_fight_lineup;
        break;
      }
      
      // optional int32 is_in_fight_lineup = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_in_fight_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_in_fight_lineup_)));
          set_has_is_in_fight_lineup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // optional .protocols.common.Profession job = 2 [default = WIZARD];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job(), output);
  }
  
  // optional int32 job_level = 3 [default = 0];
  if (has_job_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_level(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 quality = 9 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->quality(), output);
  }
  
  // optional int32 fight_capacity = 10 [default = 0];
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fight_capacity(), output);
  }
  
  // required int32 tid = 12;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tid(), output);
  }
  
  // optional .protocols.common.Gender gender = 15 [default = MALE];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->gender(), output);
  }
  
  // optional int32 is_in_fight_lineup = 16 [default = 0];
  if (has_is_in_fight_lineup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->is_in_fight_lineup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // optional .protocols.common.Profession job = 2 [default = WIZARD];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job(), target);
  }
  
  // optional int32 job_level = 3 [default = 0];
  if (has_job_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_level(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 quality = 9 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quality(), target);
  }
  
  // optional int32 fight_capacity = 10 [default = 0];
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fight_capacity(), target);
  }
  
  // required int32 tid = 12;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tid(), target);
  }
  
  // optional .protocols.common.Gender gender = 15 [default = MALE];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->gender(), target);
  }
  
  // optional int32 is_in_fight_lineup = 16 [default = 0];
  if (has_is_in_fight_lineup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->is_in_fight_lineup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 tid = 12;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional .protocols.common.Profession job = 2 [default = WIZARD];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional .protocols.common.Gender gender = 15 [default = MALE];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // optional int32 job_level = 3 [default = 0];
    if (has_job_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_level());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 quality = 9 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 fight_capacity = 10 [default = 0];
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 is_in_fight_lineup = 16 [default = 0];
    if (has_is_in_fight_lineup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_in_fight_lineup());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingInfo::MergeFrom(const YinglingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_job_level()) {
      set_job_level(from.job_level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_in_fight_lineup()) {
      set_is_in_fight_lineup(from.is_in_fight_lineup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingInfo::CopyFrom(const YinglingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  
  return true;
}

void YinglingInfo::Swap(YinglingInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(tid_, other->tid_);
    std::swap(job_, other->job_);
    std::swap(gender_, other->gender_);
    std::swap(job_level_, other->job_level_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(is_in_fight_lineup_, other->is_in_fight_lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingInfo_descriptor_;
  metadata.reflection = YinglingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuddyDetailInfo::kGuidFieldNumber;
const int BuddyDetailInfo::kNameFieldNumber;
const int BuddyDetailInfo::kTotalAttrListFieldNumber;
const int BuddyDetailInfo::kBareAttrListFieldNumber;
const int BuddyDetailInfo::kEquipListFieldNumber;
const int BuddyDetailInfo::kExpFieldNumber;
const int BuddyDetailInfo::kHpFieldNumber;
const int BuddyDetailInfo::kCurSoulFieldNumber;
const int BuddyDetailInfo::kMaxSoulFieldNumber;
const int BuddyDetailInfo::kQualityFieldNumber;
const int BuddyDetailInfo::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

BuddyDetailInfo::BuddyDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuddyDetailInfo::InitAsDefaultInstance() {
}

BuddyDetailInfo::BuddyDetailInfo(const BuddyDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuddyDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0;
  hp_ = 0;
  cur_soul_ = 0;
  max_soul_ = 0;
  quality_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuddyDetailInfo::~BuddyDetailInfo() {
  SharedDtor();
}

void BuddyDetailInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BuddyDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuddyDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuddyDetailInfo_descriptor_;
}

const BuddyDetailInfo& BuddyDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

BuddyDetailInfo* BuddyDetailInfo::default_instance_ = NULL;

BuddyDetailInfo* BuddyDetailInfo::New() const {
  return new BuddyDetailInfo;
}

void BuddyDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    exp_ = 0;
    hp_ = 0;
    cur_soul_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_soul_ = 0;
    quality_ = 0;
    fight_capacity_ = 0;
  }
  total_attr_list_.Clear();
  bare_attr_list_.Clear();
  equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuddyDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.AttributeData total_attr_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_total_attr_list;
        if (input->ExpectTag(50)) goto parse_bare_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData bare_attr_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bare_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bare_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bare_attr_list;
        if (input->ExpectTag(58)) goto parse_equip_list;
        break;
      }
      
      // repeated .protocols.common.EquipInfo equip_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_list;
        if (input->ExpectTag(64)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cur_soul;
        break;
      }
      
      // optional int32 cur_soul = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_soul_)));
          set_has_cur_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_max_soul;
        break;
      }
      
      // optional int32 max_soul = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_soul_)));
          set_has_max_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }
      
      // required string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuddyDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->total_attr_list(i), output);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bare_attr_list(i), output);
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip_list(i), output);
  }
  
  // required int64 guid = 8;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->guid(), output);
  }
  
  // optional int32 exp = 15 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->exp(), output);
  }
  
  // optional int32 hp = 16 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->hp(), output);
  }
  
  // optional int32 cur_soul = 17 [default = 0];
  if (has_cur_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cur_soul(), output);
  }
  
  // optional int32 max_soul = 18 [default = 0];
  if (has_max_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_soul(), output);
  }
  
  // optional int32 quality = 19 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->quality(), output);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }
  
  // optional int32 fight_capacity = 21 [default = 0];
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuddyDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->total_attr_list(i), target);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bare_attr_list(i), target);
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip_list(i), target);
  }
  
  // required int64 guid = 8;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->guid(), target);
  }
  
  // optional int32 exp = 15 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->exp(), target);
  }
  
  // optional int32 hp = 16 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->hp(), target);
  }
  
  // optional int32 cur_soul = 17 [default = 0];
  if (has_cur_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cur_soul(), target);
  }
  
  // optional int32 max_soul = 18 [default = 0];
  if (has_max_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_soul(), target);
  }
  
  // optional int32 quality = 19 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->quality(), target);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }
  
  // optional int32 fight_capacity = 21 [default = 0];
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuddyDetailInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 8;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 exp = 15 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 hp = 16 [default = 0];
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 cur_soul = 17 [default = 0];
    if (has_cur_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_soul());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_soul = 18 [default = 0];
    if (has_max_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_soul());
    }
    
    // optional int32 quality = 19 [default = 0];
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 fight_capacity = 21 [default = 0];
    if (has_fight_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  // repeated .protocols.common.AttributeData total_attr_list = 5;
  total_size += 1 * this->total_attr_list_size();
  for (int i = 0; i < this->total_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 6;
  total_size += 1 * this->bare_attr_list_size();
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bare_attr_list(i));
  }
  
  // repeated .protocols.common.EquipInfo equip_list = 7;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuddyDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuddyDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuddyDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuddyDetailInfo::MergeFrom(const BuddyDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_attr_list_.MergeFrom(from.total_attr_list_);
  bare_attr_list_.MergeFrom(from.bare_attr_list_);
  equip_list_.MergeFrom(from.equip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_cur_soul()) {
      set_cur_soul(from.cur_soul());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_soul()) {
      set_max_soul(from.max_soul());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuddyDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuddyDetailInfo::CopyFrom(const BuddyDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuddyDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < equip_list_size(); i++) {
    if (!this->equip_list(i).IsInitialized()) return false;
  }
  return true;
}

void BuddyDetailInfo::Swap(BuddyDetailInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    total_attr_list_.Swap(&other->total_attr_list_);
    bare_attr_list_.Swap(&other->bare_attr_list_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(cur_soul_, other->cur_soul_);
    std::swap(max_soul_, other->max_soul_);
    std::swap(quality_, other->quality_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuddyDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuddyDetailInfo_descriptor_;
  metadata.reflection = BuddyDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBIntPair::kKeyFieldNumber;
const int PBIntPair::kValueFieldNumber;
#endif  // !_MSC_VER

PBIntPair::PBIntPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBIntPair::InitAsDefaultInstance() {
}

PBIntPair::PBIntPair(const PBIntPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBIntPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBIntPair::~PBIntPair() {
  SharedDtor();
}

void PBIntPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBIntPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBIntPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBIntPair_descriptor_;
}

const PBIntPair& PBIntPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PBIntPair* PBIntPair::default_instance_ = NULL;

PBIntPair* PBIntPair::New() const {
  return new PBIntPair;
}

void PBIntPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBIntPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBIntPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBIntPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBIntPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBIntPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBIntPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBIntPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBIntPair::MergeFrom(const PBIntPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBIntPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBIntPair::CopyFrom(const PBIntPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBIntPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PBIntPair::Swap(PBIntPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBIntPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBIntPair_descriptor_;
  metadata.reflection = PBIntPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relation::kGuidFieldNumber;
const int Relation::kRelationFieldNumber;
#endif  // !_MSC_VER

Relation::Relation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Relation::InitAsDefaultInstance() {
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Relation::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  relation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New() const {
  return new Relation;
}

void Relation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    relation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relation;
        break;
      }
      
      // required int32 relation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 relation = 2;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 relation = 2;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Relation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 relation = 2;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Relation::Swap(Relation* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRelationData::kFriendFieldNumber;
#endif  // !_MSC_VER

PlayerRelationData::PlayerRelationData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRelationData::InitAsDefaultInstance() {
}

PlayerRelationData::PlayerRelationData(const PlayerRelationData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRelationData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRelationData::~PlayerRelationData() {
  SharedDtor();
}

void PlayerRelationData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRelationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRelationData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRelationData_descriptor_;
}

const PlayerRelationData& PlayerRelationData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerRelationData* PlayerRelationData::default_instance_ = NULL;

PlayerRelationData* PlayerRelationData::New() const {
  return new PlayerRelationData;
}

void PlayerRelationData::Clear() {
  friend__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRelationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Relation friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRelationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Relation friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRelationData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Relation friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRelationData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.Relation friend = 1;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRelationData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRelationData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRelationData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRelationData::MergeFrom(const PlayerRelationData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRelationData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRelationData::CopyFrom(const PlayerRelationData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRelationData::IsInitialized() const {
  
  for (int i = 0; i < friend__size(); i++) {
    if (!this->friend_(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerRelationData::Swap(PlayerRelationData* other) {
  if (other != this) {
    friend__.Swap(&other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRelationData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRelationData_descriptor_;
  metadata.reflection = PlayerRelationData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInfo::kInstanceIdFieldNumber;
const int InstanceInfo::kGradeFieldNumber;
#endif  // !_MSC_VER

InstanceInfo::InstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfo::InitAsDefaultInstance() {
}

InstanceInfo::InstanceInfo(const InstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfo::~InstanceInfo() {
  SharedDtor();
}

void InstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfo_descriptor_;
}

const InstanceInfo& InstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceInfo* InstanceInfo::default_instance_ = NULL;

InstanceInfo* InstanceInfo::New() const {
  return new InstanceInfo;
}

void InstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfo::MergeFrom(const InstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfo::CopyFrom(const InstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfo::IsInitialized() const {
  
  return true;
}

void InstanceInfo::Swap(InstanceInfo* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfo_descriptor_;
  metadata.reflection = InstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceDetail::kInstanceIdFieldNumber;
const int InstanceDetail::kGradeFieldNumber;
const int InstanceDetail::kMapIdFieldNumber;
const int InstanceDetail::kMapXFieldNumber;
const int InstanceDetail::kMapYFieldNumber;
const int InstanceDetail::kMonsterListFieldNumber;
const int InstanceDetail::kKilledListFieldNumber;
const int InstanceDetail::kLastTransportIdFieldNumber;
#endif  // !_MSC_VER

InstanceDetail::InstanceDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceDetail::InitAsDefaultInstance() {
}

InstanceDetail::InstanceDetail(const InstanceDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceDetail::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = 0;
  grade_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  last_transport_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceDetail::~InstanceDetail() {
  SharedDtor();
}

void InstanceDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceDetail_descriptor_;
}

const InstanceDetail& InstanceDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

InstanceDetail* InstanceDetail::default_instance_ = NULL;

InstanceDetail* InstanceDetail::New() const {
  return new InstanceDetail;
}

void InstanceDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_id_ = 0;
    grade_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
    last_transport_id_ = 0;
  }
  monster_list_.Clear();
  killed_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_list;
        break;
      }
      
      // repeated int32 monster_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_monster_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_list;
        if (input->ExpectTag(56)) goto parse_killed_list;
        break;
      }
      
      // repeated int32 killed_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_killed_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_killed_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_killed_list;
        if (input->ExpectTag(64)) goto parse_last_transport_id;
        break;
      }
      
      // optional int32 last_transport_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_transport_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_transport_id_)));
          set_has_last_transport_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance_id(), output);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  // repeated int32 monster_list = 6;
  for (int i = 0; i < this->monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->monster_list(i), output);
  }
  
  // repeated int32 killed_list = 7;
  for (int i = 0; i < this->killed_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->killed_list(i), output);
  }
  
  // optional int32 last_transport_id = 8;
  if (has_last_transport_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_transport_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instance_id = 1;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance_id(), target);
  }
  
  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  // repeated int32 monster_list = 6;
  for (int i = 0; i < this->monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->monster_list(i), target);
  }
  
  // repeated int32 killed_list = 7;
  for (int i = 0; i < this->killed_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->killed_list(i), target);
  }
  
  // optional int32 last_transport_id = 8;
  if (has_last_transport_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_transport_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instance_id = 1;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }
    
    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 last_transport_id = 8;
    if (has_last_transport_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_transport_id());
    }
    
  }
  // repeated int32 monster_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_list(i));
    }
    total_size += 1 * this->monster_list_size() + data_size;
  }
  
  // repeated int32 killed_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->killed_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->killed_list(i));
    }
    total_size += 1 * this->killed_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceDetail::MergeFrom(const InstanceDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_list_.MergeFrom(from.monster_list_);
  killed_list_.MergeFrom(from.killed_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_last_transport_id()) {
      set_last_transport_id(from.last_transport_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceDetail::CopyFrom(const InstanceDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceDetail::IsInitialized() const {
  
  return true;
}

void InstanceDetail::Swap(InstanceDetail* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(grade_, other->grade_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    monster_list_.Swap(&other->monster_list_);
    killed_list_.Swap(&other->killed_list_);
    std::swap(last_transport_id_, other->last_transport_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceDetail_descriptor_;
  metadata.reflection = InstanceDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterInfo::kGuidFieldNumber;
const int MonsterInfo::kNameFieldNumber;
const int MonsterInfo::kHpFieldNumber;
const int MonsterInfo::kLevelFieldNumber;
const int MonsterInfo::kDropIdFieldNumber;
const int MonsterInfo::kExpFieldNumber;
const int MonsterInfo::kModelIdFieldNumber;
const int MonsterInfo::kIconIdFieldNumber;
#endif  // !_MSC_VER

MonsterInfo::MonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterInfo::InitAsDefaultInstance() {
}

MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  level_ = 0;
  drop_id_ = 0;
  exp_ = 0;
  model_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterInfo::~MonsterInfo() {
  SharedDtor();
}

void MonsterInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (model_id_ != &::google::protobuf::internal::kEmptyString) {
    delete model_id_;
  }
  if (icon_id_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_id_;
  }
  if (this != default_instance_) {
  }
}

void MonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterInfo_descriptor_;
}

const MonsterInfo& MonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

MonsterInfo* MonsterInfo::default_instance_ = NULL;

MonsterInfo* MonsterInfo::New() const {
  return new MonsterInfo;
}

void MonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0;
    level_ = 0;
    drop_id_ = 0;
    exp_ = 0;
    if (has_model_id()) {
      if (model_id_ != &::google::protobuf::internal::kEmptyString) {
        model_id_->clear();
      }
    }
    if (has_icon_id()) {
      if (icon_id_ != &::google::protobuf::internal::kEmptyString) {
        icon_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }
      
      // required int32 hp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drop_id;
        break;
      }
      
      // optional int32 drop_id = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_id_)));
          set_has_drop_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // optional int32 exp = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_model_id;
        break;
      }
      
      // optional bytes model_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_icon_id;
        break;
      }
      
      // optional bytes icon_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 hp = 3 [default = 0];
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }
  
  // optional int32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional int32 drop_id = 5 [default = 0];
  if (has_drop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drop_id(), output);
  }
  
  // optional int32 exp = 6 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }
  
  // optional bytes model_id = 7;
  if (has_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->model_id(), output);
  }
  
  // optional bytes icon_id = 8;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->icon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 hp = 3 [default = 0];
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }
  
  // optional int32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional int32 drop_id = 5 [default = 0];
  if (has_drop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drop_id(), target);
  }
  
  // optional int32 exp = 6 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }
  
  // optional bytes model_id = 7;
  if (has_model_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->model_id(), target);
  }
  
  // optional bytes icon_id = 8;
  if (has_icon_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->icon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 hp = 3 [default = 0];
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 drop_id = 5 [default = 0];
    if (has_drop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_id());
    }
    
    // optional int32 exp = 6 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional bytes model_id = 7;
    if (has_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->model_id());
    }
    
    // optional bytes icon_id = 8;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterInfo::MergeFrom(const MonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_drop_id()) {
      set_drop_id(from.drop_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_model_id()) {
      set_model_id(from.model_id());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MonsterInfo::Swap(MonsterInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(level_, other->level_);
    std::swap(drop_id_, other->drop_id_);
    std::swap(exp_, other->exp_);
    std::swap(model_id_, other->model_id_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterInfo_descriptor_;
  metadata.reflection = MonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSpiritInfo::kItemIdFieldNumber;
const int WingSpiritInfo::kTIdFieldNumber;
const int WingSpiritInfo::kIsFragmentFieldNumber;
const int WingSpiritInfo::kLevelFieldNumber;
const int WingSpiritInfo::kSelfExpFieldNumber;
const int WingSpiritInfo::kAddExpFieldNumber;
const int WingSpiritInfo::kMaxExpFieldNumber;
const int WingSpiritInfo::kAttrPlusFieldNumber;
const int WingSpiritInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

WingSpiritInfo::WingSpiritInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingSpiritInfo::InitAsDefaultInstance() {
}

WingSpiritInfo::WingSpiritInfo(const WingSpiritInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingSpiritInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  t_id_ = 0;
  is_fragment_ = false;
  level_ = 0;
  self_exp_ = 0;
  add_exp_ = 0;
  max_exp_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSpiritInfo::~WingSpiritInfo() {
  SharedDtor();
}

void WingSpiritInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingSpiritInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSpiritInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSpiritInfo_descriptor_;
}

const WingSpiritInfo& WingSpiritInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

WingSpiritInfo* WingSpiritInfo::default_instance_ = NULL;

WingSpiritInfo* WingSpiritInfo::New() const {
  return new WingSpiritInfo;
}

void WingSpiritInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    t_id_ = 0;
    is_fragment_ = false;
    level_ = 0;
    self_exp_ = 0;
    add_exp_ = 0;
    max_exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    index_ = 0;
  }
  attr_plus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSpiritInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_fragment;
        break;
      }
      
      // optional bool is_fragment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fragment_)));
          set_has_is_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_self_exp;
        break;
      }
      
      // optional int32 self_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_exp_)));
          set_has_self_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_exp;
        break;
      }
      
      // optional int32 add_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_exp;
        break;
      }
      
      // optional int32 max_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_exp_)));
          set_has_max_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr_plus;
        break;
      }
      
      // repeated .protocols.common.AttributeData attr_plus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_plus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_plus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attr_plus;
        if (input->ExpectTag(64)) goto parse_index;
        break;
      }
      
      // optional int32 index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t_id;
        break;
      }
      
      // optional int32 t_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_id_)));
          set_has_t_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingSpiritInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional bool is_fragment = 2;
  if (has_is_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_fragment(), output);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional int32 self_exp = 4;
  if (has_self_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->self_exp(), output);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_exp(), output);
  }
  
  // optional int32 max_exp = 6;
  if (has_max_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_exp(), output);
  }
  
  // repeated .protocols.common.AttributeData attr_plus = 7;
  for (int i = 0; i < this->attr_plus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attr_plus(i), output);
  }
  
  // optional int32 index = 8;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->index(), output);
  }
  
  // optional int32 t_id = 9;
  if (has_t_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->t_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingSpiritInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional bool is_fragment = 2;
  if (has_is_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_fragment(), target);
  }
  
  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional int32 self_exp = 4;
  if (has_self_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->self_exp(), target);
  }
  
  // optional int32 add_exp = 5;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_exp(), target);
  }
  
  // optional int32 max_exp = 6;
  if (has_max_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_exp(), target);
  }
  
  // repeated .protocols.common.AttributeData attr_plus = 7;
  for (int i = 0; i < this->attr_plus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attr_plus(i), target);
  }
  
  // optional int32 index = 8;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->index(), target);
  }
  
  // optional int32 t_id = 9;
  if (has_t_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->t_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingSpiritInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 t_id = 9;
    if (has_t_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_id());
    }
    
    // optional bool is_fragment = 2;
    if (has_is_fragment()) {
      total_size += 1 + 1;
    }
    
    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 self_exp = 4;
    if (has_self_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_exp());
    }
    
    // optional int32 add_exp = 5;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_exp());
    }
    
    // optional int32 max_exp = 6;
    if (has_max_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_exp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 index = 8;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  // repeated .protocols.common.AttributeData attr_plus = 7;
  total_size += 1 * this->attr_plus_size();
  for (int i = 0; i < this->attr_plus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_plus(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSpiritInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSpiritInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSpiritInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSpiritInfo::MergeFrom(const WingSpiritInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_plus_.MergeFrom(from.attr_plus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_t_id()) {
      set_t_id(from.t_id());
    }
    if (from.has_is_fragment()) {
      set_is_fragment(from.is_fragment());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_self_exp()) {
      set_self_exp(from.self_exp());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_max_exp()) {
      set_max_exp(from.max_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSpiritInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSpiritInfo::CopyFrom(const WingSpiritInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSpiritInfo::IsInitialized() const {
  
  return true;
}

void WingSpiritInfo::Swap(WingSpiritInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(t_id_, other->t_id_);
    std::swap(is_fragment_, other->is_fragment_);
    std::swap(level_, other->level_);
    std::swap(self_exp_, other->self_exp_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(max_exp_, other->max_exp_);
    attr_plus_.Swap(&other->attr_plus_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSpiritInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSpiritInfo_descriptor_;
  metadata.reflection = WingSpiritInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSlotInfo::kSlotNumFieldNumber;
const int WingSlotInfo::kSpiritFieldNumber;
#endif  // !_MSC_VER

WingSlotInfo::WingSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingSlotInfo::InitAsDefaultInstance() {
  spirit_ = const_cast< ::protocols::common::WingSpiritInfo*>(&::protocols::common::WingSpiritInfo::default_instance());
}

WingSlotInfo::WingSlotInfo(const WingSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_num_ = 0;
  spirit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSlotInfo::~WingSlotInfo() {
  SharedDtor();
}

void WingSlotInfo::SharedDtor() {
  if (this != default_instance_) {
    delete spirit_;
  }
}

void WingSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSlotInfo_descriptor_;
}

const WingSlotInfo& WingSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

WingSlotInfo* WingSlotInfo::default_instance_ = NULL;

WingSlotInfo* WingSlotInfo::New() const {
  return new WingSlotInfo;
}

void WingSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_num_ = 0;
    if (has_spirit()) {
      if (spirit_ != NULL) spirit_->::protocols::common::WingSpiritInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_spirit;
        break;
      }
      
      // optional .protocols.common.WingSpiritInfo spirit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spirit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_num = 1;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_num(), output);
  }
  
  // optional .protocols.common.WingSpiritInfo spirit = 2;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->spirit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_num = 1;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_num(), target);
  }
  
  // optional .protocols.common.WingSpiritInfo spirit = 2;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->spirit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingSlotInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_num = 1;
    if (has_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_num());
    }
    
    // optional .protocols.common.WingSpiritInfo spirit = 2;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spirit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSlotInfo::MergeFrom(const WingSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
    if (from.has_spirit()) {
      mutable_spirit()->::protocols::common::WingSpiritInfo::MergeFrom(from.spirit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSlotInfo::CopyFrom(const WingSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSlotInfo::IsInitialized() const {
  
  return true;
}

void WingSlotInfo::Swap(WingSlotInfo* other) {
  if (other != this) {
    std::swap(slot_num_, other->slot_num_);
    std::swap(spirit_, other->spirit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSlotInfo_descriptor_;
  metadata.reflection = WingSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingItemInfo::kWingTidFieldNumber;
const int WingItemInfo::kWingItemIdFieldNumber;
const int WingItemInfo::kEquiptGuidFieldNumber;
const int WingItemInfo::kSlotsFieldNumber;
const int WingItemInfo::kPointFieldNumber;
#endif  // !_MSC_VER

WingItemInfo::WingItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingItemInfo::InitAsDefaultInstance() {
}

WingItemInfo::WingItemInfo(const WingItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingItemInfo::SharedCtor() {
  _cached_size_ = 0;
  wing_tid_ = 0;
  wing_item_id_ = GOOGLE_LONGLONG(0);
  equipt_guid_ = GOOGLE_LONGLONG(0);
  point_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingItemInfo::~WingItemInfo() {
  SharedDtor();
}

void WingItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingItemInfo_descriptor_;
}

const WingItemInfo& WingItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

WingItemInfo* WingItemInfo::default_instance_ = NULL;

WingItemInfo* WingItemInfo::New() const {
  return new WingItemInfo;
}

void WingItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wing_tid_ = 0;
    wing_item_id_ = GOOGLE_LONGLONG(0);
    equipt_guid_ = GOOGLE_LONGLONG(0);
    point_ = GOOGLE_LONGLONG(0);
  }
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wing_tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_tid_)));
          set_has_wing_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipt_guid;
        break;
      }
      
      // optional int64 equipt_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipt_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equipt_guid_)));
          set_has_equipt_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        break;
      }
      
      // repeated .protocols.common.WingSlotInfo slots = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }
      
      // optional int64 point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wing_item_id;
        break;
      }
      
      // optional int64 wing_item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wing_item_id_)));
          set_has_wing_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wing_tid = 1;
  if (has_wing_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wing_tid(), output);
  }
  
  // optional int64 equipt_guid = 2;
  if (has_equipt_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->equipt_guid(), output);
  }
  
  // repeated .protocols.common.WingSlotInfo slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }
  
  // optional int64 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->point(), output);
  }
  
  // optional int64 wing_item_id = 5;
  if (has_wing_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->wing_item_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wing_tid = 1;
  if (has_wing_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wing_tid(), target);
  }
  
  // optional int64 equipt_guid = 2;
  if (has_equipt_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->equipt_guid(), target);
  }
  
  // repeated .protocols.common.WingSlotInfo slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots(i), target);
  }
  
  // optional int64 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->point(), target);
  }
  
  // optional int64 wing_item_id = 5;
  if (has_wing_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->wing_item_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wing_tid = 1;
    if (has_wing_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_tid());
    }
    
    // optional int64 wing_item_id = 5;
    if (has_wing_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wing_item_id());
    }
    
    // optional int64 equipt_guid = 2;
    if (has_equipt_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equipt_guid());
    }
    
    // optional int64 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->point());
    }
    
  }
  // repeated .protocols.common.WingSlotInfo slots = 3;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingItemInfo::MergeFrom(const WingItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wing_tid()) {
      set_wing_tid(from.wing_tid());
    }
    if (from.has_wing_item_id()) {
      set_wing_item_id(from.wing_item_id());
    }
    if (from.has_equipt_guid()) {
      set_equipt_guid(from.equipt_guid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingItemInfo::CopyFrom(const WingItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingItemInfo::IsInitialized() const {
  
  return true;
}

void WingItemInfo::Swap(WingItemInfo* other) {
  if (other != this) {
    std::swap(wing_tid_, other->wing_tid_);
    std::swap(wing_item_id_, other->wing_item_id_);
    std::swap(equipt_guid_, other->equipt_guid_);
    slots_.Swap(&other->slots_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingItemInfo_descriptor_;
  metadata.reflection = WingItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingSpiritBag::kMaxNumFieldNumber;
const int WingSpiritBag::kOpenNumFieldNumber;
const int WingSpiritBag::kSpiritsFieldNumber;
#endif  // !_MSC_VER

WingSpiritBag::WingSpiritBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingSpiritBag::InitAsDefaultInstance() {
}

WingSpiritBag::WingSpiritBag(const WingSpiritBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingSpiritBag::SharedCtor() {
  _cached_size_ = 0;
  max_num_ = 0;
  open_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingSpiritBag::~WingSpiritBag() {
  SharedDtor();
}

void WingSpiritBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingSpiritBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingSpiritBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingSpiritBag_descriptor_;
}

const WingSpiritBag& WingSpiritBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

WingSpiritBag* WingSpiritBag::default_instance_ = NULL;

WingSpiritBag* WingSpiritBag::New() const {
  return new WingSpiritBag;
}

void WingSpiritBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_num_ = 0;
    open_num_ = 0;
  }
  spirits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingSpiritBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_num;
        break;
      }
      
      // optional int32 open_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_num_)));
          set_has_open_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        break;
      }
      
      // repeated .protocols.common.WingSpiritInfo spirits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spirits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingSpiritBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_num = 1;
  if (has_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_num(), output);
  }
  
  // optional int32 open_num = 2;
  if (has_open_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_num(), output);
  }
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spirits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingSpiritBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_num = 1;
  if (has_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_num(), target);
  }
  
  // optional int32 open_num = 2;
  if (has_open_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_num(), target);
  }
  
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  for (int i = 0; i < this->spirits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spirits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingSpiritBag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_num = 1;
    if (has_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }
    
    // optional int32 open_num = 2;
    if (has_open_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_num());
    }
    
  }
  // repeated .protocols.common.WingSpiritInfo spirits = 3;
  total_size += 1 * this->spirits_size();
  for (int i = 0; i < this->spirits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingSpiritBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingSpiritBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingSpiritBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingSpiritBag::MergeFrom(const WingSpiritBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirits_.MergeFrom(from.spirits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_open_num()) {
      set_open_num(from.open_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingSpiritBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingSpiritBag::CopyFrom(const WingSpiritBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingSpiritBag::IsInitialized() const {
  
  return true;
}

void WingSpiritBag::Swap(WingSpiritBag* other) {
  if (other != this) {
    std::swap(max_num_, other->max_num_);
    std::swap(open_num_, other->open_num_);
    spirits_.Swap(&other->spirits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingSpiritBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingSpiritBag_descriptor_;
  metadata.reflection = WingSpiritBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritGeneratorInfo::kLevelFieldNumber;
const int SpiritGeneratorInfo::kIsOnFieldNumber;
const int SpiritGeneratorInfo::kCostMoneyFieldNumber;
#endif  // !_MSC_VER

SpiritGeneratorInfo::SpiritGeneratorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpiritGeneratorInfo::InitAsDefaultInstance() {
}

SpiritGeneratorInfo::SpiritGeneratorInfo(const SpiritGeneratorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpiritGeneratorInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  is_on_ = false;
  cost_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritGeneratorInfo::~SpiritGeneratorInfo() {
  SharedDtor();
}

void SpiritGeneratorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritGeneratorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritGeneratorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritGeneratorInfo_descriptor_;
}

const SpiritGeneratorInfo& SpiritGeneratorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

SpiritGeneratorInfo* SpiritGeneratorInfo::default_instance_ = NULL;

SpiritGeneratorInfo* SpiritGeneratorInfo::New() const {
  return new SpiritGeneratorInfo;
}

void SpiritGeneratorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    is_on_ = false;
    cost_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritGeneratorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_on;
        break;
      }
      
      // optional bool is_on = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_on:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_)));
          set_has_is_on();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_money;
        break;
      }
      
      // optional int32 cost_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_money_)));
          set_has_cost_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpiritGeneratorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional bool is_on = 2;
  if (has_is_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_on(), output);
  }
  
  // optional int32 cost_money = 3;
  if (has_cost_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_money(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpiritGeneratorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional bool is_on = 2;
  if (has_is_on()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_on(), target);
  }
  
  // optional int32 cost_money = 3;
  if (has_cost_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_money(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpiritGeneratorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional bool is_on = 2;
    if (has_is_on()) {
      total_size += 1 + 1;
    }
    
    // optional int32 cost_money = 3;
    if (has_cost_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_money());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritGeneratorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritGeneratorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritGeneratorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritGeneratorInfo::MergeFrom(const SpiritGeneratorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_is_on()) {
      set_is_on(from.is_on());
    }
    if (from.has_cost_money()) {
      set_cost_money(from.cost_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritGeneratorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritGeneratorInfo::CopyFrom(const SpiritGeneratorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritGeneratorInfo::IsInitialized() const {
  
  return true;
}

void SpiritGeneratorInfo::Swap(SpiritGeneratorInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(is_on_, other->is_on_);
    std::swap(cost_money_, other->cost_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritGeneratorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritGeneratorInfo_descriptor_;
  metadata.reflection = SpiritGeneratorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kItemIdFieldNumber;
const int EquipInfo::kPositionFieldNumber;
const int EquipInfo::kStrengthLevelFieldNumber;
const int EquipInfo::kMarkFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  position_ = 0;
  strength_level_ = 0;
  mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    position_ = 0;
    strength_level_ = 0;
    mark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional .protocols.common.EquipPosition position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::EquipPosition_IsValid(value)) {
            set_position(static_cast< protocols::common::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional .protocols.common.EquipPosition position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strength_level(), output);
  }
  
  // optional int32 mark = 4;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional .protocols.common.EquipPosition position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strength_level(), target);
  }
  
  // optional int32 mark = 4;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional .protocols.common.EquipPosition position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }
    
    // optional int32 strength_level = 3 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 mark = 4;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(position_, other->position_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(mark_, other->mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttributeData::kKeyFieldNumber;
const int AttributeData::kValueFieldNumber;
#endif  // !_MSC_VER

AttributeData::AttributeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttributeData::InitAsDefaultInstance() {
}

AttributeData::AttributeData(const AttributeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttributeData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributeData::~AttributeData() {
  SharedDtor();
}

void AttributeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttributeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeData_descriptor_;
}

const AttributeData& AttributeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

AttributeData* AttributeData::default_instance_ = NULL;

AttributeData* AttributeData::New() const {
  return new AttributeData;
}

void AttributeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttributeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttributeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttributeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttributeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttributeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttributeData::MergeFrom(const AttributeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttributeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeData::CopyFrom(const AttributeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeData::IsInitialized() const {
  
  return true;
}

void AttributeData::Swap(AttributeData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttributeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttributeData_descriptor_;
  metadata.reflection = AttributeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipStoneData_StoneData::kSlotIndexFieldNumber;
const int EquipStoneData_StoneData::kStoneIdFieldNumber;
#endif  // !_MSC_VER

EquipStoneData_StoneData::EquipStoneData_StoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoneData_StoneData::InitAsDefaultInstance() {
}

EquipStoneData_StoneData::EquipStoneData_StoneData(const EquipStoneData_StoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoneData_StoneData::SharedCtor() {
  _cached_size_ = 0;
  slot_index_ = 0;
  stone_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoneData_StoneData::~EquipStoneData_StoneData() {
  SharedDtor();
}

void EquipStoneData_StoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoneData_StoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoneData_StoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoneData_StoneData_descriptor_;
}

const EquipStoneData_StoneData& EquipStoneData_StoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipStoneData_StoneData* EquipStoneData_StoneData::default_instance_ = NULL;

EquipStoneData_StoneData* EquipStoneData_StoneData::New() const {
  return new EquipStoneData_StoneData;
}

void EquipStoneData_StoneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_index_ = 0;
    stone_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoneData_StoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stone_id;
        break;
      }
      
      // optional int32 stone_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_id_)));
          set_has_stone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoneData_StoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_index = 1;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_index(), output);
  }
  
  // optional int32 stone_id = 2;
  if (has_stone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stone_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoneData_StoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_index = 1;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_index(), target);
  }
  
  // optional int32 stone_id = 2;
  if (has_stone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stone_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoneData_StoneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_index = 1;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_index());
    }
    
    // optional int32 stone_id = 2;
    if (has_stone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoneData_StoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoneData_StoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoneData_StoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoneData_StoneData::MergeFrom(const EquipStoneData_StoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
    if (from.has_stone_id()) {
      set_stone_id(from.stone_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoneData_StoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoneData_StoneData::CopyFrom(const EquipStoneData_StoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoneData_StoneData::IsInitialized() const {
  
  return true;
}

void EquipStoneData_StoneData::Swap(EquipStoneData_StoneData* other) {
  if (other != this) {
    std::swap(slot_index_, other->slot_index_);
    std::swap(stone_id_, other->stone_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoneData_StoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoneData_StoneData_descriptor_;
  metadata.reflection = EquipStoneData_StoneData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipStoneData::kStoneDataFieldNumber;
const int EquipStoneData::kCurSocketCountFieldNumber;
const int EquipStoneData::kMaxSocketCountFieldNumber;
const int EquipStoneData::kStrengthClientChanceFieldNumber;
#endif  // !_MSC_VER

EquipStoneData::EquipStoneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipStoneData::InitAsDefaultInstance() {
}

EquipStoneData::EquipStoneData(const EquipStoneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipStoneData::SharedCtor() {
  _cached_size_ = 0;
  cur_socket_count_ = 0;
  max_socket_count_ = 0;
  strength_client_chance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipStoneData::~EquipStoneData() {
  SharedDtor();
}

void EquipStoneData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipStoneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipStoneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipStoneData_descriptor_;
}

const EquipStoneData& EquipStoneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipStoneData* EquipStoneData::default_instance_ = NULL;

EquipStoneData* EquipStoneData::New() const {
  return new EquipStoneData;
}

void EquipStoneData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_socket_count_ = 0;
    max_socket_count_ = 0;
    strength_client_chance_ = 0;
  }
  stone_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipStoneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stone_data;
        if (input->ExpectTag(24)) goto parse_cur_socket_count;
        break;
      }
      
      // optional int32 cur_socket_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_socket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_socket_count_)));
          set_has_cur_socket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_socket_count;
        break;
      }
      
      // optional int32 max_socket_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_socket_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_socket_count_)));
          set_has_max_socket_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strength_client_chance;
        break;
      }
      
      // optional int32 strength_client_chance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_client_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_client_chance_)));
          set_has_strength_client_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipStoneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  for (int i = 0; i < this->stone_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stone_data(i), output);
  }
  
  // optional int32 cur_socket_count = 3;
  if (has_cur_socket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_socket_count(), output);
  }
  
  // optional int32 max_socket_count = 4;
  if (has_max_socket_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_socket_count(), output);
  }
  
  // optional int32 strength_client_chance = 5;
  if (has_strength_client_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strength_client_chance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipStoneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  for (int i = 0; i < this->stone_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stone_data(i), target);
  }
  
  // optional int32 cur_socket_count = 3;
  if (has_cur_socket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_socket_count(), target);
  }
  
  // optional int32 max_socket_count = 4;
  if (has_max_socket_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_socket_count(), target);
  }
  
  // optional int32 strength_client_chance = 5;
  if (has_strength_client_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strength_client_chance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipStoneData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 cur_socket_count = 3;
    if (has_cur_socket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_socket_count());
    }
    
    // optional int32 max_socket_count = 4;
    if (has_max_socket_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_socket_count());
    }
    
    // optional int32 strength_client_chance = 5;
    if (has_strength_client_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_client_chance());
    }
    
  }
  // repeated .protocols.common.EquipStoneData.StoneData stone_data = 2;
  total_size += 1 * this->stone_data_size();
  for (int i = 0; i < this->stone_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stone_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipStoneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipStoneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipStoneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipStoneData::MergeFrom(const EquipStoneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stone_data_.MergeFrom(from.stone_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_socket_count()) {
      set_cur_socket_count(from.cur_socket_count());
    }
    if (from.has_max_socket_count()) {
      set_max_socket_count(from.max_socket_count());
    }
    if (from.has_strength_client_chance()) {
      set_strength_client_chance(from.strength_client_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipStoneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipStoneData::CopyFrom(const EquipStoneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipStoneData::IsInitialized() const {
  
  return true;
}

void EquipStoneData::Swap(EquipStoneData* other) {
  if (other != this) {
    stone_data_.Swap(&other->stone_data_);
    std::swap(cur_socket_count_, other->cur_socket_count_);
    std::swap(max_socket_count_, other->max_socket_count_);
    std::swap(strength_client_chance_, other->strength_client_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipStoneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipStoneData_descriptor_;
  metadata.reflection = EquipStoneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBSlotData::kLockedAttrBitsFieldNumber;
const int DBSlotData::kStoneDataFieldNumber;
const int DBSlotData::kSocketNumFieldNumber;
const int DBSlotData::kStrengthFailNumFieldNumber;
const int DBSlotData::kStrengthChanceFieldNumber;
const int DBSlotData::kStrengthClientChanceFieldNumber;
#endif  // !_MSC_VER

DBSlotData::DBSlotData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBSlotData::InitAsDefaultInstance() {
  stone_data_ = const_cast< ::protocols::common::EquipStoneData*>(&::protocols::common::EquipStoneData::default_instance());
}

DBSlotData::DBSlotData(const DBSlotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBSlotData::SharedCtor() {
  _cached_size_ = 0;
  locked_attr_bits_ = 0;
  stone_data_ = NULL;
  socket_num_ = 0;
  strength_fail_num_ = 0;
  strength_chance_ = 0;
  strength_client_chance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBSlotData::~DBSlotData() {
  SharedDtor();
}

void DBSlotData::SharedDtor() {
  if (this != default_instance_) {
    delete stone_data_;
  }
}

void DBSlotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBSlotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBSlotData_descriptor_;
}

const DBSlotData& DBSlotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DBSlotData* DBSlotData::default_instance_ = NULL;

DBSlotData* DBSlotData::New() const {
  return new DBSlotData;
}

void DBSlotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    locked_attr_bits_ = 0;
    if (has_stone_data()) {
      if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
    }
    socket_num_ = 0;
    strength_fail_num_ = 0;
    strength_chance_ = 0;
    strength_client_chance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBSlotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 locked_attr_bits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_attr_bits_)));
          set_has_locked_attr_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stone_data;
        break;
      }
      
      // optional .protocols.common.EquipStoneData stone_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_socket_num;
        break;
      }
      
      // optional int32 socket_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_socket_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_num_)));
          set_has_socket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_strength_fail_num;
        break;
      }
      
      // optional int32 strength_fail_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_fail_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_fail_num_)));
          set_has_strength_fail_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strength_chance;
        break;
      }
      
      // optional int32 strength_chance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_chance_)));
          set_has_strength_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strength_client_chance;
        break;
      }
      
      // optional int32 strength_client_chance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_client_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_client_chance_)));
          set_has_strength_client_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBSlotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 locked_attr_bits = 1;
  if (has_locked_attr_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->locked_attr_bits(), output);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 2;
  if (has_stone_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stone_data(), output);
  }
  
  // optional int32 socket_num = 3;
  if (has_socket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socket_num(), output);
  }
  
  // optional int32 strength_fail_num = 4;
  if (has_strength_fail_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strength_fail_num(), output);
  }
  
  // optional int32 strength_chance = 5;
  if (has_strength_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strength_chance(), output);
  }
  
  // optional int32 strength_client_chance = 6;
  if (has_strength_client_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strength_client_chance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBSlotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 locked_attr_bits = 1;
  if (has_locked_attr_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->locked_attr_bits(), target);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 2;
  if (has_stone_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stone_data(), target);
  }
  
  // optional int32 socket_num = 3;
  if (has_socket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socket_num(), target);
  }
  
  // optional int32 strength_fail_num = 4;
  if (has_strength_fail_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->strength_fail_num(), target);
  }
  
  // optional int32 strength_chance = 5;
  if (has_strength_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strength_chance(), target);
  }
  
  // optional int32 strength_client_chance = 6;
  if (has_strength_client_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strength_client_chance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBSlotData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 locked_attr_bits = 1;
    if (has_locked_attr_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked_attr_bits());
    }
    
    // optional .protocols.common.EquipStoneData stone_data = 2;
    if (has_stone_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stone_data());
    }
    
    // optional int32 socket_num = 3;
    if (has_socket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->socket_num());
    }
    
    // optional int32 strength_fail_num = 4;
    if (has_strength_fail_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_fail_num());
    }
    
    // optional int32 strength_chance = 5;
    if (has_strength_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_chance());
    }
    
    // optional int32 strength_client_chance = 6;
    if (has_strength_client_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_client_chance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBSlotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBSlotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBSlotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBSlotData::MergeFrom(const DBSlotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locked_attr_bits()) {
      set_locked_attr_bits(from.locked_attr_bits());
    }
    if (from.has_stone_data()) {
      mutable_stone_data()->::protocols::common::EquipStoneData::MergeFrom(from.stone_data());
    }
    if (from.has_socket_num()) {
      set_socket_num(from.socket_num());
    }
    if (from.has_strength_fail_num()) {
      set_strength_fail_num(from.strength_fail_num());
    }
    if (from.has_strength_chance()) {
      set_strength_chance(from.strength_chance());
    }
    if (from.has_strength_client_chance()) {
      set_strength_client_chance(from.strength_client_chance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBSlotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSlotData::CopyFrom(const DBSlotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSlotData::IsInitialized() const {
  
  return true;
}

void DBSlotData::Swap(DBSlotData* other) {
  if (other != this) {
    std::swap(locked_attr_bits_, other->locked_attr_bits_);
    std::swap(stone_data_, other->stone_data_);
    std::swap(socket_num_, other->socket_num_);
    std::swap(strength_fail_num_, other->strength_fail_num_);
    std::swap(strength_chance_, other->strength_chance_);
    std::swap(strength_client_chance_, other->strength_client_chance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBSlotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBSlotData_descriptor_;
  metadata.reflection = DBSlotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDetail::kItemIdFieldNumber;
const int EquipDetail::kExpiredFieldNumber;
const int EquipDetail::kStrengthLevelFieldNumber;
const int EquipDetail::kSlotCountFieldNumber;
const int EquipDetail::kAttrListFieldNumber;
const int EquipDetail::kBindFlagFieldNumber;
const int EquipDetail::kExtraAttrListFieldNumber;
const int EquipDetail::kStrengthAttrListFieldNumber;
const int EquipDetail::kMarkFieldNumber;
const int EquipDetail::kStoneAttrListFieldNumber;
const int EquipDetail::kLockedAttrBitsFieldNumber;
const int EquipDetail::kStoneDataFieldNumber;
const int EquipDetail::kWingInfoFieldNumber;
#endif  // !_MSC_VER

EquipDetail::EquipDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDetail::InitAsDefaultInstance() {
  stone_data_ = const_cast< ::protocols::common::EquipStoneData*>(&::protocols::common::EquipStoneData::default_instance());
  wing_info_ = const_cast< ::protocols::common::WingItemInfo*>(&::protocols::common::WingItemInfo::default_instance());
}

EquipDetail::EquipDetail(const EquipDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDetail::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  expired_ = 0;
  strength_level_ = 0;
  slot_count_ = 0;
  bind_flag_ = 0;
  mark_ = 0;
  locked_attr_bits_ = 0;
  stone_data_ = NULL;
  wing_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDetail::~EquipDetail() {
  SharedDtor();
}

void EquipDetail::SharedDtor() {
  if (this != default_instance_) {
    delete stone_data_;
    delete wing_info_;
  }
}

void EquipDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDetail_descriptor_;
}

const EquipDetail& EquipDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

EquipDetail* EquipDetail::default_instance_ = NULL;

EquipDetail* EquipDetail::New() const {
  return new EquipDetail;
}

void EquipDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_LONGLONG(0);
    expired_ = 0;
    strength_level_ = 0;
    slot_count_ = 0;
    bind_flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mark_ = 0;
    locked_attr_bits_ = 0;
    if (has_stone_data()) {
      if (stone_data_ != NULL) stone_data_->::protocols::common::EquipStoneData::Clear();
    }
    if (has_wing_info()) {
      if (wing_info_ != NULL) wing_info_->::protocols::common::WingItemInfo::Clear();
    }
  }
  attr_list_.Clear();
  extra_attr_list_.Clear();
  strength_attr_list_.Clear();
  stone_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expired;
        break;
      }
      
      // optional int32 expired = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expired_)));
          set_has_expired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength_level;
        break;
      }
      
      // optional int32 strength_level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_count;
        break;
      }
      
      // optional int32 slot_count = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_count_)));
          set_has_slot_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData attr_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr_list;
        if (input->ExpectTag(48)) goto parse_bind_flag;
        break;
      }
      
      // optional int32 bind_flag = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_flag_)));
          set_has_bind_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extra_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData extra_attr_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extra_attr_list;
        if (input->ExpectTag(74)) goto parse_strength_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData strength_attr_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strength_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strength_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strength_attr_list;
        if (input->ExpectTag(80)) goto parse_mark;
        break;
      }
      
      // optional int32 mark = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stone_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData stone_attr_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stone_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stone_attr_list;
        if (input->ExpectTag(96)) goto parse_locked_attr_bits;
        break;
      }
      
      // optional int32 locked_attr_bits = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked_attr_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_attr_bits_)));
          set_has_locked_attr_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_stone_data;
        break;
      }
      
      // optional .protocols.common.EquipStoneData stone_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stone_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stone_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_wing_info;
        break;
      }
      
      // optional .protocols.common.WingItemInfo wing_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wing_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expired(), output);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strength_level(), output);
  }
  
  // optional int32 slot_count = 4 [default = 0];
  if (has_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot_count(), output);
  }
  
  // repeated .protocols.common.AttributeData attr_list = 5;
  for (int i = 0; i < this->attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr_list(i), output);
  }
  
  // optional int32 bind_flag = 6 [default = 0];
  if (has_bind_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bind_flag(), output);
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extra_attr_list(i), output);
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->strength_attr_list(i), output);
  }
  
  // optional int32 mark = 10;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mark(), output);
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stone_attr_list(i), output);
  }
  
  // optional int32 locked_attr_bits = 12;
  if (has_locked_attr_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->locked_attr_bits(), output);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 13;
  if (has_stone_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stone_data(), output);
  }
  
  // optional .protocols.common.WingItemInfo wing_info = 14;
  if (has_wing_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->wing_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }
  
  // optional int32 expired = 2 [default = 0];
  if (has_expired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expired(), target);
  }
  
  // optional int32 strength_level = 3 [default = 0];
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strength_level(), target);
  }
  
  // optional int32 slot_count = 4 [default = 0];
  if (has_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot_count(), target);
  }
  
  // repeated .protocols.common.AttributeData attr_list = 5;
  for (int i = 0; i < this->attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr_list(i), target);
  }
  
  // optional int32 bind_flag = 6 [default = 0];
  if (has_bind_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bind_flag(), target);
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extra_attr_list(i), target);
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->strength_attr_list(i), target);
  }
  
  // optional int32 mark = 10;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mark(), target);
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->stone_attr_list(i), target);
  }
  
  // optional int32 locked_attr_bits = 12;
  if (has_locked_attr_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->locked_attr_bits(), target);
  }
  
  // optional .protocols.common.EquipStoneData stone_data = 13;
  if (has_stone_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stone_data(), target);
  }
  
  // optional .protocols.common.WingItemInfo wing_info = 14;
  if (has_wing_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->wing_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }
    
    // optional int32 expired = 2 [default = 0];
    if (has_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expired());
    }
    
    // optional int32 strength_level = 3 [default = 0];
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // optional int32 slot_count = 4 [default = 0];
    if (has_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_count());
    }
    
    // optional int32 bind_flag = 6 [default = 0];
    if (has_bind_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_flag());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mark = 10;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }
    
    // optional int32 locked_attr_bits = 12;
    if (has_locked_attr_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked_attr_bits());
    }
    
    // optional .protocols.common.EquipStoneData stone_data = 13;
    if (has_stone_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stone_data());
    }
    
    // optional .protocols.common.WingItemInfo wing_info = 14;
    if (has_wing_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_info());
    }
    
  }
  // repeated .protocols.common.AttributeData attr_list = 5;
  total_size += 1 * this->attr_list_size();
  for (int i = 0; i < this->attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData extra_attr_list = 7;
  total_size += 1 * this->extra_attr_list_size();
  for (int i = 0; i < this->extra_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData strength_attr_list = 9;
  total_size += 1 * this->strength_attr_list_size();
  for (int i = 0; i < this->strength_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strength_attr_list(i));
  }
  
  // repeated .protocols.common.AttributeData stone_attr_list = 11;
  total_size += 1 * this->stone_attr_list_size();
  for (int i = 0; i < this->stone_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stone_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipDetail::MergeFrom(const EquipDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_list_.MergeFrom(from.attr_list_);
  extra_attr_list_.MergeFrom(from.extra_attr_list_);
  strength_attr_list_.MergeFrom(from.strength_attr_list_);
  stone_attr_list_.MergeFrom(from.stone_attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_expired()) {
      set_expired(from.expired());
    }
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_slot_count()) {
      set_slot_count(from.slot_count());
    }
    if (from.has_bind_flag()) {
      set_bind_flag(from.bind_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_locked_attr_bits()) {
      set_locked_attr_bits(from.locked_attr_bits());
    }
    if (from.has_stone_data()) {
      mutable_stone_data()->::protocols::common::EquipStoneData::MergeFrom(from.stone_data());
    }
    if (from.has_wing_info()) {
      mutable_wing_info()->::protocols::common::WingItemInfo::MergeFrom(from.wing_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipDetail::CopyFrom(const EquipDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipDetail::Swap(EquipDetail* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(expired_, other->expired_);
    std::swap(strength_level_, other->strength_level_);
    std::swap(slot_count_, other->slot_count_);
    attr_list_.Swap(&other->attr_list_);
    std::swap(bind_flag_, other->bind_flag_);
    extra_attr_list_.Swap(&other->extra_attr_list_);
    strength_attr_list_.Swap(&other->strength_attr_list_);
    std::swap(mark_, other->mark_);
    stone_attr_list_.Swap(&other->stone_attr_list_);
    std::swap(locked_attr_bits_, other->locked_attr_bits_);
    std::swap(stone_data_, other->stone_data_);
    std::swap(wing_info_, other->wing_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDetail_descriptor_;
  metadata.reflection = EquipDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FighterInfo::kGuidFieldNumber;
const int FighterInfo::kBattleIndexFieldNumber;
#endif  // !_MSC_VER

FighterInfo::FighterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FighterInfo::InitAsDefaultInstance() {
}

FighterInfo::FighterInfo(const FighterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FighterInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  battle_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FighterInfo::~FighterInfo() {
  SharedDtor();
}

void FighterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FighterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FighterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FighterInfo_descriptor_;
}

const FighterInfo& FighterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

FighterInfo* FighterInfo::default_instance_ = NULL;

FighterInfo* FighterInfo::New() const {
  return new FighterInfo;
}

void FighterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    battle_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FighterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_index;
        break;
      }
      
      // required int32 battle_index = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_index_)));
          set_has_battle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FighterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required int32 battle_index = 2 [default = 0];
  if (has_battle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FighterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required int32 battle_index = 2 [default = 0];
  if (has_battle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FighterInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required int32 battle_index = 2 [default = 0];
    if (has_battle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FighterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FighterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FighterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FighterInfo::MergeFrom(const FighterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_battle_index()) {
      set_battle_index(from.battle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FighterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FighterInfo::CopyFrom(const FighterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FighterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FighterInfo::Swap(FighterInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(battle_index_, other->battle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FighterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FighterInfo_descriptor_;
  metadata.reflection = FighterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineupInfo::kLineupIdFieldNumber;
const int LineupInfo::kLineupNameFieldNumber;
const int LineupInfo::kBattleSkillIdFieldNumber;
const int LineupInfo::kFighterFieldNumber;
const int LineupInfo::kLineupFightCapacityFieldNumber;
#endif  // !_MSC_VER

LineupInfo::LineupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineupInfo::InitAsDefaultInstance() {
}

LineupInfo::LineupInfo(const LineupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineupInfo::SharedCtor() {
  _cached_size_ = 0;
  lineup_id_ = 0;
  lineup_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lineup_fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineupInfo::~LineupInfo() {
  SharedDtor();
}

void LineupInfo::SharedDtor() {
  if (lineup_name_ != &::google::protobuf::internal::kEmptyString) {
    delete lineup_name_;
  }
  if (this != default_instance_) {
  }
}

void LineupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineupInfo_descriptor_;
}

const LineupInfo& LineupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

LineupInfo* LineupInfo::default_instance_ = NULL;

LineupInfo* LineupInfo::New() const {
  return new LineupInfo;
}

void LineupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lineup_id_ = 0;
    if (has_lineup_name()) {
      if (lineup_name_ != &::google::protobuf::internal::kEmptyString) {
        lineup_name_->clear();
      }
    }
    lineup_fight_capacity_ = 0;
  }
  battle_skill_id_.Clear();
  fighter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lineup_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_id_)));
          set_has_lineup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lineup_name;
        break;
      }
      
      // required string lineup_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineup_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lineup_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lineup_name().data(), this->lineup_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_id;
        break;
      }
      
      // repeated int32 battle_skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_battle_skill_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battle_skill_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_skill_id;
        if (input->ExpectTag(34)) goto parse_fighter;
        break;
      }
      
      // repeated .protocols.common.FighterInfo fighter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fighter;
        if (input->ExpectTag(40)) goto parse_lineup_fight_capacity;
        break;
      }
      
      // optional int32 lineup_fight_capacity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineup_fight_capacity_)));
          set_has_lineup_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lineup_id(), output);
  }
  
  // required string lineup_name = 2;
  if (has_lineup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lineup_name().data(), this->lineup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lineup_name(), output);
  }
  
  // repeated int32 battle_skill_id = 3;
  for (int i = 0; i < this->battle_skill_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->battle_skill_id(i), output);
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  for (int i = 0; i < this->fighter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fighter(i), output);
  }
  
  // optional int32 lineup_fight_capacity = 5;
  if (has_lineup_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lineup_fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lineup_id = 1;
  if (has_lineup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lineup_id(), target);
  }
  
  // required string lineup_name = 2;
  if (has_lineup_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lineup_name().data(), this->lineup_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lineup_name(), target);
  }
  
  // repeated int32 battle_skill_id = 3;
  for (int i = 0; i < this->battle_skill_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->battle_skill_id(i), target);
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  for (int i = 0; i < this->fighter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fighter(i), target);
  }
  
  // optional int32 lineup_fight_capacity = 5;
  if (has_lineup_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lineup_fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineupInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lineup_id = 1;
    if (has_lineup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_id());
    }
    
    // required string lineup_name = 2;
    if (has_lineup_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lineup_name());
    }
    
    // optional int32 lineup_fight_capacity = 5;
    if (has_lineup_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lineup_fight_capacity());
    }
    
  }
  // repeated int32 battle_skill_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->battle_skill_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->battle_skill_id(i));
    }
    total_size += 1 * this->battle_skill_id_size() + data_size;
  }
  
  // repeated .protocols.common.FighterInfo fighter = 4;
  total_size += 1 * this->fighter_size();
  for (int i = 0; i < this->fighter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineupInfo::MergeFrom(const LineupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_skill_id_.MergeFrom(from.battle_skill_id_);
  fighter_.MergeFrom(from.fighter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineup_id()) {
      set_lineup_id(from.lineup_id());
    }
    if (from.has_lineup_name()) {
      set_lineup_name(from.lineup_name());
    }
    if (from.has_lineup_fight_capacity()) {
      set_lineup_fight_capacity(from.lineup_fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineupInfo::CopyFrom(const LineupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fighter_size(); i++) {
    if (!this->fighter(i).IsInitialized()) return false;
  }
  return true;
}

void LineupInfo::Swap(LineupInfo* other) {
  if (other != this) {
    std::swap(lineup_id_, other->lineup_id_);
    std::swap(lineup_name_, other->lineup_name_);
    battle_skill_id_.Swap(&other->battle_skill_id_);
    fighter_.Swap(&other->fighter_);
    std::swap(lineup_fight_capacity_, other->lineup_fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineupInfo_descriptor_;
  metadata.reflection = LineupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money1::kMoneyTypeFieldNumber;
const int Money1::kNumFieldNumber;
#endif  // !_MSC_VER

Money1::Money1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money1::InitAsDefaultInstance() {
}

Money1::Money1(const Money1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money1::SharedCtor() {
  _cached_size_ = 0;
  money_type_ = 1;
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money1::~Money1() {
  SharedDtor();
}

void Money1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Money1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money1_descriptor_;
}

const Money1& Money1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Money1* Money1::default_instance_ = NULL;

Money1* Money1::New() const {
  return new Money1;
}

void Money1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_type_ = 1;
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocols.common.MONEY_TYPE money_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::MONEY_TYPE_IsValid(value)) {
            set_money_type(static_cast< protocols::common::MONEY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // required int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .protocols.common.MONEY_TYPE money_type = 1;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->money_type(), output);
  }
  
  // required int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .protocols.common.MONEY_TYPE money_type = 1;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->money_type(), target);
  }
  
  // required int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money1::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocols.common.MONEY_TYPE money_type = 1;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->money_type());
    }
    
    // required int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money1::MergeFrom(const Money1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money1::CopyFrom(const Money1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Money1::Swap(Money1* other) {
  if (other != this) {
    std::swap(money_type_, other->money_type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money1_descriptor_;
  metadata.reflection = Money1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money::kMoneyFieldNumber;
#endif  // !_MSC_VER

Money::Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money::InitAsDefaultInstance() {
}

Money::Money(const Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money::~Money() {
  SharedDtor();
}

void Money::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money_descriptor_;
}

const Money& Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

Money* Money::default_instance_ = NULL;

Money* Money::New() const {
  return new Money;
}

void Money::Clear() {
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.Money1 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_money;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.Money1 money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->money(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.Money1 money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->money(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.Money1 money = 1;
  total_size += 1 * this->money_size();
  for (int i = 0; i < this->money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  
  for (int i = 0; i < money_size(); i++) {
    if (!this->money(i).IsInitialized()) return false;
  }
  return true;
}

void Money::Swap(Money* other) {
  if (other != this) {
    money_.Swap(&other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money_descriptor_;
  metadata.reflection = Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestAction::kActionTypeFieldNumber;
const int QuestAction::kActionParamFieldNumber;
#endif  // !_MSC_VER

QuestAction::QuestAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestAction::InitAsDefaultInstance() {
}

QuestAction::QuestAction(const QuestAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestAction::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestAction::~QuestAction() {
  SharedDtor();
}

void QuestAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestAction_descriptor_;
}

const QuestAction& QuestAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestAction* QuestAction::default_instance_ = NULL;

QuestAction* QuestAction::New() const {
  return new QuestAction;
}

void QuestAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_type_ = 0;
  }
  action_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.QuestActionType action_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestActionType_IsValid(value)) {
            set_action_type(static_cast< protocols::common::QuestActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        break;
      }
      
      // repeated int32 action_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_action_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.QuestActionType action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }
  
  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->action_param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.QuestActionType action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }
  
  // repeated int32 action_param = 2;
  for (int i = 0; i < this->action_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->action_param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.QuestActionType action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }
    
  }
  // repeated int32 action_param = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_param(i));
    }
    total_size += 1 * this->action_param_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestAction::MergeFrom(const QuestAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_param_.MergeFrom(from.action_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestAction::CopyFrom(const QuestAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestAction::IsInitialized() const {
  
  return true;
}

void QuestAction::Swap(QuestAction* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    action_param_.Swap(&other->action_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestAction_descriptor_;
  metadata.reflection = QuestAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestActionsPb::kActionsFieldNumber;
#endif  // !_MSC_VER

QuestActionsPb::QuestActionsPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestActionsPb::InitAsDefaultInstance() {
}

QuestActionsPb::QuestActionsPb(const QuestActionsPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestActionsPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestActionsPb::~QuestActionsPb() {
  SharedDtor();
}

void QuestActionsPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestActionsPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestActionsPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestActionsPb_descriptor_;
}

const QuestActionsPb& QuestActionsPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestActionsPb* QuestActionsPb::default_instance_ = NULL;

QuestActionsPb* QuestActionsPb::New() const {
  return new QuestActionsPb;
}

void QuestActionsPb::Clear() {
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestActionsPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.QuestAction actions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestActionsPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.QuestAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestActionsPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.QuestAction actions = 1;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestActionsPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.QuestAction actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestActionsPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestActionsPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestActionsPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestActionsPb::MergeFrom(const QuestActionsPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestActionsPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestActionsPb::CopyFrom(const QuestActionsPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestActionsPb::IsInitialized() const {
  
  return true;
}

void QuestActionsPb::Swap(QuestActionsPb* other) {
  if (other != this) {
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestActionsPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestActionsPb_descriptor_;
  metadata.reflection = QuestActionsPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPb::kQuestIdFieldNumber;
const int QuestPb::kQuestStatusFieldNumber;
const int QuestPb::kActionsFieldNumber;
const int QuestPb::kQuestTypeFieldNumber;
const int QuestPb::kRewardExpFieldNumber;
const int QuestPb::kRewardCoinFieldNumber;
const int QuestPb::kCircleIndexFieldNumber;
#endif  // !_MSC_VER

QuestPb::QuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestPb::InitAsDefaultInstance() {
  actions_ = const_cast< ::protocols::common::QuestActionsPb*>(&::protocols::common::QuestActionsPb::default_instance());
}

QuestPb::QuestPb(const QuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestPb::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quest_status_ = 0;
  actions_ = NULL;
  quest_type_ = 1;
  reward_exp_ = 0;
  reward_coin_ = 0;
  circle_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPb::~QuestPb() {
  SharedDtor();
}

void QuestPb::SharedDtor() {
  if (this != default_instance_) {
    delete actions_;
  }
}

void QuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPb_descriptor_;
}

const QuestPb& QuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestPb* QuestPb::default_instance_ = NULL;

QuestPb* QuestPb::New() const {
  return new QuestPb;
}

void QuestPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    quest_status_ = 0;
    if (has_actions()) {
      if (actions_ != NULL) actions_->::protocols::common::QuestActionsPb::Clear();
    }
    quest_type_ = 1;
    reward_exp_ = 0;
    reward_coin_ = 0;
    circle_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_status;
        break;
      }
      
      // optional .protocols.common.QuestStatus quest_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestStatus_IsValid(value)) {
            set_quest_status(static_cast< protocols::common::QuestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actions;
        break;
      }
      
      // optional .protocols.common.QuestActionsPb actions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quest_type;
        break;
      }
      
      // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestType_IsValid(value)) {
            set_quest_type(static_cast< protocols::common::QuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_exp;
        break;
      }
      
      // optional int32 reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_coin;
        break;
      }
      
      // optional int32 reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_coin_)));
          set_has_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_circle_index;
        break;
      }
      
      // optional int32 circle_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circle_index_)));
          set_has_circle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // optional .protocols.common.QuestStatus quest_status = 2;
  if (has_quest_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->quest_status(), output);
  }
  
  // optional .protocols.common.QuestActionsPb actions = 3;
  if (has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(), output);
  }
  
  // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quest_type(), output);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_exp(), output);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_coin(), output);
  }
  
  // optional int32 circle_index = 7;
  if (has_circle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->circle_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // optional .protocols.common.QuestStatus quest_status = 2;
  if (has_quest_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->quest_status(), target);
  }
  
  // optional .protocols.common.QuestActionsPb actions = 3;
  if (has_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actions(), target);
  }
  
  // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->quest_type(), target);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_exp(), target);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_coin(), target);
  }
  
  // optional int32 circle_index = 7;
  if (has_circle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->circle_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // optional .protocols.common.QuestStatus quest_status = 2;
    if (has_quest_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_status());
    }
    
    // optional .protocols.common.QuestActionsPb actions = 3;
    if (has_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions());
    }
    
    // optional .protocols.common.QuestType quest_type = 4 [default = QuestType_ZHUXIAN];
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_type());
    }
    
    // optional int32 reward_exp = 5;
    if (has_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp());
    }
    
    // optional int32 reward_coin = 6;
    if (has_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_coin());
    }
    
    // optional int32 circle_index = 7;
    if (has_circle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circle_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPb::MergeFrom(const QuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_status()) {
      set_quest_status(from.quest_status());
    }
    if (from.has_actions()) {
      mutable_actions()->::protocols::common::QuestActionsPb::MergeFrom(from.actions());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
    if (from.has_reward_coin()) {
      set_reward_coin(from.reward_coin());
    }
    if (from.has_circle_index()) {
      set_circle_index(from.circle_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPb::CopyFrom(const QuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPb::IsInitialized() const {
  
  return true;
}

void QuestPb::Swap(QuestPb* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_status_, other->quest_status_);
    std::swap(actions_, other->actions_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(reward_coin_, other->reward_coin_);
    std::swap(circle_index_, other->circle_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPb_descriptor_;
  metadata.reflection = QuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestPreCondition::kPreQuestIdFieldNumber;
const int QuestPreCondition::kPlayerLevelMinFieldNumber;
const int QuestPreCondition::kPlayerLevelMaxFieldNumber;
const int QuestPreCondition::kStartTimeFieldNumber;
const int QuestPreCondition::kEndTimeFieldNumber;
const int QuestPreCondition::kRegionIdFieldNumber;
const int QuestPreCondition::kAutoAcceptFieldNumber;
const int QuestPreCondition::kProLimitFieldNumber;
const int QuestPreCondition::kPreQuestIdsFieldNumber;
const int QuestPreCondition::kPostQuestIdsFieldNumber;
const int QuestPreCondition::kAutoCommitFieldNumber;
const int QuestPreCondition::kCanBeCancelledFieldNumber;
const int QuestPreCondition::kDailyResetFieldNumber;
const int QuestPreCondition::kNeedGuildFieldNumber;
const int QuestPreCondition::kNeedGuildCheckFieldNumber;
const int QuestPreCondition::kRepeatableFieldNumber;
#endif  // !_MSC_VER

QuestPreCondition::QuestPreCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestPreCondition::InitAsDefaultInstance() {
}

QuestPreCondition::QuestPreCondition(const QuestPreCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestPreCondition::SharedCtor() {
  _cached_size_ = 0;
  pre_quest_id_ = 0;
  player_level_min_ = 1;
  player_level_max_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  region_id_ = GOOGLE_LONGLONG(0);
  auto_accept_ = false;
  pro_limit_ = 1;
  auto_commit_ = false;
  can_be_cancelled_ = false;
  daily_reset_ = false;
  need_guild_ = false;
  need_guild_check_ = false;
  repeatable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestPreCondition::~QuestPreCondition() {
  SharedDtor();
}

void QuestPreCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestPreCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestPreCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestPreCondition_descriptor_;
}

const QuestPreCondition& QuestPreCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestPreCondition* QuestPreCondition::default_instance_ = NULL;

QuestPreCondition* QuestPreCondition::New() const {
  return new QuestPreCondition;
}

void QuestPreCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pre_quest_id_ = 0;
    player_level_min_ = 1;
    player_level_max_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    region_id_ = GOOGLE_LONGLONG(0);
    auto_accept_ = false;
    pro_limit_ = 1;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    auto_commit_ = false;
    can_be_cancelled_ = false;
    daily_reset_ = false;
    need_guild_ = false;
    need_guild_check_ = false;
    repeatable_ = false;
  }
  pre_quest_ids_.Clear();
  post_quest_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestPreCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pre_quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_quest_id_)));
          set_has_pre_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_level_min;
        break;
      }
      
      // optional int32 player_level_min = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_level_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_min_)));
          set_has_player_level_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_level_max;
        break;
      }
      
      // optional int32 player_level_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_level_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_level_max_)));
          set_has_player_level_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }
      
      // optional int64 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }
      
      // optional int64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_region_id;
        break;
      }
      
      // optional int64 region_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_region_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_accept;
        break;
      }
      
      // optional bool auto_accept = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_accept_)));
          set_has_auto_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pro_limit;
        break;
      }
      
      // optional .protocols.common.Profession pro_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_limit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_pro_limit(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pre_quest_ids;
        break;
      }
      
      // repeated int32 pre_quest_ids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_quest_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_pre_quest_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_quest_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pre_quest_ids;
        if (input->ExpectTag(80)) goto parse_post_quest_ids;
        break;
      }
      
      // repeated int32 post_quest_ids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_quest_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_post_quest_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_post_quest_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_post_quest_ids;
        if (input->ExpectTag(88)) goto parse_auto_commit;
        break;
      }
      
      // optional bool auto_commit = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_commit_)));
          set_has_auto_commit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_can_be_cancelled;
        break;
      }
      
      // optional bool can_be_cancelled = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_be_cancelled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_be_cancelled_)));
          set_has_can_be_cancelled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_daily_reset;
        break;
      }
      
      // optional bool daily_reset = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &daily_reset_)));
          set_has_daily_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_need_guild;
        break;
      }
      
      // optional bool need_guild = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_guild_)));
          set_has_need_guild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_need_guild_check;
        break;
      }
      
      // optional bool need_guild_check = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_guild_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_guild_check_)));
          set_has_need_guild_check();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_repeatable;
        break;
      }
      
      // optional bool repeatable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeatable_)));
          set_has_repeatable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestPreCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pre_quest_id = 1;
  if (has_pre_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pre_quest_id(), output);
  }
  
  // optional int32 player_level_min = 2 [default = 1];
  if (has_player_level_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_level_min(), output);
  }
  
  // optional int32 player_level_max = 3;
  if (has_player_level_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_level_max(), output);
  }
  
  // optional int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }
  
  // optional int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }
  
  // optional int64 region_id = 6;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->region_id(), output);
  }
  
  // optional bool auto_accept = 7 [default = false];
  if (has_auto_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->auto_accept(), output);
  }
  
  // optional .protocols.common.Profession pro_limit = 8;
  if (has_pro_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pro_limit(), output);
  }
  
  // repeated int32 pre_quest_ids = 9;
  for (int i = 0; i < this->pre_quest_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pre_quest_ids(i), output);
  }
  
  // repeated int32 post_quest_ids = 10;
  for (int i = 0; i < this->post_quest_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->post_quest_ids(i), output);
  }
  
  // optional bool auto_commit = 11 [default = false];
  if (has_auto_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_commit(), output);
  }
  
  // optional bool can_be_cancelled = 12 [default = false];
  if (has_can_be_cancelled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_be_cancelled(), output);
  }
  
  // optional bool daily_reset = 13 [default = false];
  if (has_daily_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->daily_reset(), output);
  }
  
  // optional bool need_guild = 14;
  if (has_need_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->need_guild(), output);
  }
  
  // optional bool need_guild_check = 15;
  if (has_need_guild_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->need_guild_check(), output);
  }
  
  // optional bool repeatable = 16;
  if (has_repeatable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->repeatable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestPreCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pre_quest_id = 1;
  if (has_pre_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pre_quest_id(), target);
  }
  
  // optional int32 player_level_min = 2 [default = 1];
  if (has_player_level_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_level_min(), target);
  }
  
  // optional int32 player_level_max = 3;
  if (has_player_level_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_level_max(), target);
  }
  
  // optional int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }
  
  // optional int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }
  
  // optional int64 region_id = 6;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->region_id(), target);
  }
  
  // optional bool auto_accept = 7 [default = false];
  if (has_auto_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->auto_accept(), target);
  }
  
  // optional .protocols.common.Profession pro_limit = 8;
  if (has_pro_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pro_limit(), target);
  }
  
  // repeated int32 pre_quest_ids = 9;
  for (int i = 0; i < this->pre_quest_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->pre_quest_ids(i), target);
  }
  
  // repeated int32 post_quest_ids = 10;
  for (int i = 0; i < this->post_quest_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->post_quest_ids(i), target);
  }
  
  // optional bool auto_commit = 11 [default = false];
  if (has_auto_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_commit(), target);
  }
  
  // optional bool can_be_cancelled = 12 [default = false];
  if (has_can_be_cancelled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_be_cancelled(), target);
  }
  
  // optional bool daily_reset = 13 [default = false];
  if (has_daily_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->daily_reset(), target);
  }
  
  // optional bool need_guild = 14;
  if (has_need_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->need_guild(), target);
  }
  
  // optional bool need_guild_check = 15;
  if (has_need_guild_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->need_guild_check(), target);
  }
  
  // optional bool repeatable = 16;
  if (has_repeatable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->repeatable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestPreCondition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pre_quest_id = 1;
    if (has_pre_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_quest_id());
    }
    
    // optional int32 player_level_min = 2 [default = 1];
    if (has_player_level_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level_min());
    }
    
    // optional int32 player_level_max = 3;
    if (has_player_level_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_level_max());
    }
    
    // optional int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }
    
    // optional int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }
    
    // optional int64 region_id = 6;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->region_id());
    }
    
    // optional bool auto_accept = 7 [default = false];
    if (has_auto_accept()) {
      total_size += 1 + 1;
    }
    
    // optional .protocols.common.Profession pro_limit = 8;
    if (has_pro_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pro_limit());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool auto_commit = 11 [default = false];
    if (has_auto_commit()) {
      total_size += 1 + 1;
    }
    
    // optional bool can_be_cancelled = 12 [default = false];
    if (has_can_be_cancelled()) {
      total_size += 1 + 1;
    }
    
    // optional bool daily_reset = 13 [default = false];
    if (has_daily_reset()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_guild = 14;
    if (has_need_guild()) {
      total_size += 1 + 1;
    }
    
    // optional bool need_guild_check = 15;
    if (has_need_guild_check()) {
      total_size += 1 + 1;
    }
    
    // optional bool repeatable = 16;
    if (has_repeatable()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated int32 pre_quest_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_quest_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_quest_ids(i));
    }
    total_size += 1 * this->pre_quest_ids_size() + data_size;
  }
  
  // repeated int32 post_quest_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->post_quest_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->post_quest_ids(i));
    }
    total_size += 1 * this->post_quest_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestPreCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestPreCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestPreCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestPreCondition::MergeFrom(const QuestPreCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_quest_ids_.MergeFrom(from.pre_quest_ids_);
  post_quest_ids_.MergeFrom(from.post_quest_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pre_quest_id()) {
      set_pre_quest_id(from.pre_quest_id());
    }
    if (from.has_player_level_min()) {
      set_player_level_min(from.player_level_min());
    }
    if (from.has_player_level_max()) {
      set_player_level_max(from.player_level_max());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_auto_accept()) {
      set_auto_accept(from.auto_accept());
    }
    if (from.has_pro_limit()) {
      set_pro_limit(from.pro_limit());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_auto_commit()) {
      set_auto_commit(from.auto_commit());
    }
    if (from.has_can_be_cancelled()) {
      set_can_be_cancelled(from.can_be_cancelled());
    }
    if (from.has_daily_reset()) {
      set_daily_reset(from.daily_reset());
    }
    if (from.has_need_guild()) {
      set_need_guild(from.need_guild());
    }
    if (from.has_need_guild_check()) {
      set_need_guild_check(from.need_guild_check());
    }
    if (from.has_repeatable()) {
      set_repeatable(from.repeatable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestPreCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestPreCondition::CopyFrom(const QuestPreCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestPreCondition::IsInitialized() const {
  
  return true;
}

void QuestPreCondition::Swap(QuestPreCondition* other) {
  if (other != this) {
    std::swap(pre_quest_id_, other->pre_quest_id_);
    std::swap(player_level_min_, other->player_level_min_);
    std::swap(player_level_max_, other->player_level_max_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(region_id_, other->region_id_);
    std::swap(auto_accept_, other->auto_accept_);
    std::swap(pro_limit_, other->pro_limit_);
    pre_quest_ids_.Swap(&other->pre_quest_ids_);
    post_quest_ids_.Swap(&other->post_quest_ids_);
    std::swap(auto_commit_, other->auto_commit_);
    std::swap(can_be_cancelled_, other->can_be_cancelled_);
    std::swap(daily_reset_, other->daily_reset_);
    std::swap(need_guild_, other->need_guild_);
    std::swap(need_guild_check_, other->need_guild_check_);
    std::swap(repeatable_, other->repeatable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestPreCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestPreCondition_descriptor_;
  metadata.reflection = QuestPreCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestRewards_QuestRewardItem::kItemIdFieldNumber;
const int QuestRewards_QuestRewardItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

QuestRewards_QuestRewardItem::QuestRewards_QuestRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRewards_QuestRewardItem::InitAsDefaultInstance() {
}

QuestRewards_QuestRewardItem::QuestRewards_QuestRewardItem(const QuestRewards_QuestRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRewards_QuestRewardItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRewards_QuestRewardItem::~QuestRewards_QuestRewardItem() {
  SharedDtor();
}

void QuestRewards_QuestRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRewards_QuestRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRewards_QuestRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRewards_QuestRewardItem_descriptor_;
}

const QuestRewards_QuestRewardItem& QuestRewards_QuestRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestRewards_QuestRewardItem* QuestRewards_QuestRewardItem::default_instance_ = NULL;

QuestRewards_QuestRewardItem* QuestRewards_QuestRewardItem::New() const {
  return new QuestRewards_QuestRewardItem;
}

void QuestRewards_QuestRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRewards_QuestRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }
      
      // optional int32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRewards_QuestRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }
  
  // optional int32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRewards_QuestRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }
  
  // optional int32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRewards_QuestRewardItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRewards_QuestRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRewards_QuestRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRewards_QuestRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRewards_QuestRewardItem::MergeFrom(const QuestRewards_QuestRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRewards_QuestRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRewards_QuestRewardItem::CopyFrom(const QuestRewards_QuestRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRewards_QuestRewardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QuestRewards_QuestRewardItem::Swap(QuestRewards_QuestRewardItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRewards_QuestRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRewards_QuestRewardItem_descriptor_;
  metadata.reflection = QuestRewards_QuestRewardItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QuestRewards::kExpFieldNumber;
const int QuestRewards::kCoinFieldNumber;
const int QuestRewards::kItemFieldNumber;
const int QuestRewards::kGuildContributionFieldNumber;
const int QuestRewards::kGuildExpFieldNumber;
const int QuestRewards::kGuildCrystalFieldNumber;
#endif  // !_MSC_VER

QuestRewards::QuestRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestRewards::InitAsDefaultInstance() {
}

QuestRewards::QuestRewards(const QuestRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestRewards::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  coin_ = 0;
  guild_contribution_ = 0;
  guild_exp_ = 0;
  guild_crystal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestRewards::~QuestRewards() {
  SharedDtor();
}

void QuestRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestRewards_descriptor_;
}

const QuestRewards& QuestRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestRewards* QuestRewards::default_instance_ = NULL;

QuestRewards* QuestRewards::New() const {
  return new QuestRewards;
}

void QuestRewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    coin_ = 0;
    guild_contribution_ = 0;
    guild_exp_ = 0;
    guild_crystal_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }
      
      // optional int32 coin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }
      
      // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_guild_contribution;
        break;
      }
      
      // optional int32 guild_contribution = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_contribution_)));
          set_has_guild_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_exp;
        break;
      }
      
      // optional int32 guild_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_exp_)));
          set_has_guild_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guild_crystal;
        break;
      }
      
      // optional int32 guild_crystal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_crystal_)));
          set_has_guild_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coin(), output);
  }
  
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }
  
  // optional int32 guild_contribution = 4;
  if (has_guild_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_contribution(), output);
  }
  
  // optional int32 guild_exp = 5;
  if (has_guild_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_exp(), output);
  }
  
  // optional int32 guild_crystal = 6;
  if (has_guild_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_crystal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }
  
  // optional int32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coin(), target);
  }
  
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }
  
  // optional int32 guild_contribution = 4;
  if (has_guild_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_contribution(), target);
  }
  
  // optional int32 guild_exp = 5;
  if (has_guild_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_exp(), target);
  }
  
  // optional int32 guild_crystal = 6;
  if (has_guild_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guild_crystal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestRewards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // optional int32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }
    
    // optional int32 guild_contribution = 4;
    if (has_guild_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_contribution());
    }
    
    // optional int32 guild_exp = 5;
    if (has_guild_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_exp());
    }
    
    // optional int32 guild_crystal = 6;
    if (has_guild_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_crystal());
    }
    
  }
  // repeated .protocols.common.QuestRewards.QuestRewardItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestRewards::MergeFrom(const QuestRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_guild_contribution()) {
      set_guild_contribution(from.guild_contribution());
    }
    if (from.has_guild_exp()) {
      set_guild_exp(from.guild_exp());
    }
    if (from.has_guild_crystal()) {
      set_guild_crystal(from.guild_crystal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestRewards::CopyFrom(const QuestRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestRewards::IsInitialized() const {
  
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void QuestRewards::Swap(QuestRewards* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    item_.Swap(&other->item_);
    std::swap(guild_contribution_, other->guild_contribution_);
    std::swap(guild_exp_, other->guild_exp_);
    std::swap(guild_crystal_, other->guild_crystal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestRewards_descriptor_;
  metadata.reflection = QuestRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestProtoype::kQuestIdFieldNumber;
const int QuestProtoype::kQuestNameFieldNumber;
const int QuestProtoype::kPreConditionFieldNumber;
const int QuestProtoype::kActionsFieldNumber;
const int QuestProtoype::kRewardsFieldNumber;
const int QuestProtoype::kQuestTypeFieldNumber;
#endif  // !_MSC_VER

QuestProtoype::QuestProtoype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestProtoype::InitAsDefaultInstance() {
  pre_condition_ = const_cast< ::protocols::common::QuestPreCondition*>(&::protocols::common::QuestPreCondition::default_instance());
  rewards_ = const_cast< ::protocols::common::QuestRewards*>(&::protocols::common::QuestRewards::default_instance());
}

QuestProtoype::QuestProtoype(const QuestProtoype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestProtoype::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quest_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pre_condition_ = NULL;
  rewards_ = NULL;
  quest_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestProtoype::~QuestProtoype() {
  SharedDtor();
}

void QuestProtoype::SharedDtor() {
  if (quest_name_ != &::google::protobuf::internal::kEmptyString) {
    delete quest_name_;
  }
  if (this != default_instance_) {
    delete pre_condition_;
    delete rewards_;
  }
}

void QuestProtoype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestProtoype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestProtoype_descriptor_;
}

const QuestProtoype& QuestProtoype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

QuestProtoype* QuestProtoype::default_instance_ = NULL;

QuestProtoype* QuestProtoype::New() const {
  return new QuestProtoype;
}

void QuestProtoype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    if (has_quest_name()) {
      if (quest_name_ != &::google::protobuf::internal::kEmptyString) {
        quest_name_->clear();
      }
    }
    if (has_pre_condition()) {
      if (pre_condition_ != NULL) pre_condition_->::protocols::common::QuestPreCondition::Clear();
    }
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::protocols::common::QuestRewards::Clear();
    }
    quest_type_ = 1;
  }
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestProtoype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quest_name;
        break;
      }
      
      // optional bytes quest_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quest_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quest_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pre_condition;
        break;
      }
      
      // optional .protocols.common.QuestPreCondition pre_condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pre_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actions;
        break;
      }
      
      // repeated .protocols.common.QuestAction actions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actions;
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // optional .protocols.common.QuestRewards rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quest_type;
        break;
      }
      
      // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::QuestType_IsValid(value)) {
            set_quest_type(static_cast< protocols::common::QuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestProtoype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // optional bytes quest_name = 2;
  if (has_quest_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->quest_name(), output);
  }
  
  // optional .protocols.common.QuestPreCondition pre_condition = 3;
  if (has_pre_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pre_condition(), output);
  }
  
  // repeated .protocols.common.QuestAction actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actions(i), output);
  }
  
  // optional .protocols.common.QuestRewards rewards = 5;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(), output);
  }
  
  // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->quest_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestProtoype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // optional bytes quest_name = 2;
  if (has_quest_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quest_name(), target);
  }
  
  // optional .protocols.common.QuestPreCondition pre_condition = 3;
  if (has_pre_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pre_condition(), target);
  }
  
  // repeated .protocols.common.QuestAction actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actions(i), target);
  }
  
  // optional .protocols.common.QuestRewards rewards = 5;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(), target);
  }
  
  // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
  if (has_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->quest_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestProtoype::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // optional bytes quest_name = 2;
    if (has_quest_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quest_name());
    }
    
    // optional .protocols.common.QuestPreCondition pre_condition = 3;
    if (has_pre_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_condition());
    }
    
    // optional .protocols.common.QuestRewards rewards = 5;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // optional .protocols.common.QuestType quest_type = 6 [default = QuestType_ZHUXIAN];
    if (has_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quest_type());
    }
    
  }
  // repeated .protocols.common.QuestAction actions = 4;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestProtoype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestProtoype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestProtoype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestProtoype::MergeFrom(const QuestProtoype& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_name()) {
      set_quest_name(from.quest_name());
    }
    if (from.has_pre_condition()) {
      mutable_pre_condition()->::protocols::common::QuestPreCondition::MergeFrom(from.pre_condition());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::protocols::common::QuestRewards::MergeFrom(from.rewards());
    }
    if (from.has_quest_type()) {
      set_quest_type(from.quest_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestProtoype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestProtoype::CopyFrom(const QuestProtoype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestProtoype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void QuestProtoype::Swap(QuestProtoype* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_name_, other->quest_name_);
    std::swap(pre_condition_, other->pre_condition_);
    actions_.Swap(&other->actions_);
    std::swap(rewards_, other->rewards_);
    std::swap(quest_type_, other->quest_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestProtoype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestProtoype_descriptor_;
  metadata.reflection = QuestProtoype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCrystalReward::kXFieldNumber;
const int GuildCrystalReward::kYFieldNumber;
const int GuildCrystalReward::kItemIdFieldNumber;
const int GuildCrystalReward::kItemCountFieldNumber;
const int GuildCrystalReward::kPickedFieldNumber;
const int GuildCrystalReward::kCollectingPlayerIdFieldNumber;
const int GuildCrystalReward::kCollectingTickFieldNumber;
const int GuildCrystalReward::kDisplayIdFieldNumber;
#endif  // !_MSC_VER

GuildCrystalReward::GuildCrystalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCrystalReward::InitAsDefaultInstance() {
}

GuildCrystalReward::GuildCrystalReward(const GuildCrystalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCrystalReward::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  picked_ = false;
  collecting_player_id_ = 0;
  collecting_tick_ = 0;
  display_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCrystalReward::~GuildCrystalReward() {
  SharedDtor();
}

void GuildCrystalReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCrystalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCrystalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCrystalReward_descriptor_;
}

const GuildCrystalReward& GuildCrystalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GuildCrystalReward* GuildCrystalReward::default_instance_ = NULL;

GuildCrystalReward* GuildCrystalReward::New() const {
  return new GuildCrystalReward;
}

void GuildCrystalReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    item_id_ = 0;
    item_count_ = 0;
    picked_ = false;
    collecting_player_id_ = 0;
    collecting_tick_ = 0;
    display_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCrystalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }
      
      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_count;
        break;
      }
      
      // optional int32 item_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_picked;
        break;
      }
      
      // optional bool picked = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &picked_)));
          set_has_picked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_collecting_player_id;
        break;
      }
      
      // optional int32 collecting_player_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collecting_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collecting_player_id_)));
          set_has_collecting_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_collecting_tick;
        break;
      }
      
      // optional int32 collecting_tick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collecting_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collecting_tick_)));
          set_has_collecting_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_display_id;
        break;
      }
      
      // optional int32 display_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_id_)));
          set_has_display_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCrystalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }
  
  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }
  
  // optional int32 item_count = 4;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_count(), output);
  }
  
  // optional bool picked = 5;
  if (has_picked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->picked(), output);
  }
  
  // optional int32 collecting_player_id = 6;
  if (has_collecting_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->collecting_player_id(), output);
  }
  
  // optional int32 collecting_tick = 7;
  if (has_collecting_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->collecting_tick(), output);
  }
  
  // optional int32 display_id = 8;
  if (has_display_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->display_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCrystalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }
  
  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }
  
  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }
  
  // optional int32 item_count = 4;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_count(), target);
  }
  
  // optional bool picked = 5;
  if (has_picked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->picked(), target);
  }
  
  // optional int32 collecting_player_id = 6;
  if (has_collecting_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->collecting_player_id(), target);
  }
  
  // optional int32 collecting_tick = 7;
  if (has_collecting_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->collecting_tick(), target);
  }
  
  // optional int32 display_id = 8;
  if (has_display_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->display_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCrystalReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }
    
    // optional int32 item_count = 4;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }
    
    // optional bool picked = 5;
    if (has_picked()) {
      total_size += 1 + 1;
    }
    
    // optional int32 collecting_player_id = 6;
    if (has_collecting_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collecting_player_id());
    }
    
    // optional int32 collecting_tick = 7;
    if (has_collecting_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collecting_tick());
    }
    
    // optional int32 display_id = 8;
    if (has_display_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCrystalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCrystalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCrystalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCrystalReward::MergeFrom(const GuildCrystalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_picked()) {
      set_picked(from.picked());
    }
    if (from.has_collecting_player_id()) {
      set_collecting_player_id(from.collecting_player_id());
    }
    if (from.has_collecting_tick()) {
      set_collecting_tick(from.collecting_tick());
    }
    if (from.has_display_id()) {
      set_display_id(from.display_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCrystalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCrystalReward::CopyFrom(const GuildCrystalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCrystalReward::IsInitialized() const {
  
  return true;
}

void GuildCrystalReward::Swap(GuildCrystalReward* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(picked_, other->picked_);
    std::swap(collecting_player_id_, other->collecting_player_id_);
    std::swap(collecting_tick_, other->collecting_tick_);
    std::swap(display_id_, other->display_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCrystalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCrystalReward_descriptor_;
  metadata.reflection = GuildCrystalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureBoxReward::kActIdFieldNumber;
const int TreasureBoxReward::kIndexFieldNumber;
const int TreasureBoxReward::kMapIdFieldNumber;
const int TreasureBoxReward::kMapXFieldNumber;
const int TreasureBoxReward::kMapYFieldNumber;
const int TreasureBoxReward::kIconIdFieldNumber;
#endif  // !_MSC_VER

TreasureBoxReward::TreasureBoxReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureBoxReward::InitAsDefaultInstance() {
}

TreasureBoxReward::TreasureBoxReward(const TreasureBoxReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureBoxReward::SharedCtor() {
  _cached_size_ = 0;
  act_id_ = 0;
  index_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  icon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureBoxReward::~TreasureBoxReward() {
  SharedDtor();
}

void TreasureBoxReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureBoxReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureBoxReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureBoxReward_descriptor_;
}

const TreasureBoxReward& TreasureBoxReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TreasureBoxReward* TreasureBoxReward::default_instance_ = NULL;

TreasureBoxReward* TreasureBoxReward::New() const {
  return new TreasureBoxReward;
}

void TreasureBoxReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_id_ = 0;
    index_ = 0;
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
    icon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureBoxReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 act_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_id_)));
          set_has_act_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_map_x;
        break;
      }
      
      // optional int32 map_x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_y;
        break;
      }
      
      // optional int32 map_y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_icon_id;
        break;
      }
      
      // optional int32 icon_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureBoxReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->act_id(), output);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_x(), output);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_y(), output);
  }
  
  // optional int32 icon_id = 6;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icon_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureBoxReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 act_id = 1;
  if (has_act_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->act_id(), target);
  }
  
  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 map_x = 4;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_x(), target);
  }
  
  // optional int32 map_y = 5;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_y(), target);
  }
  
  // optional int32 icon_id = 6;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icon_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureBoxReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 act_id = 1;
    if (has_act_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_id());
    }
    
    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 map_x = 4;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // optional int32 map_y = 5;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
    // optional int32 icon_id = 6;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureBoxReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureBoxReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureBoxReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureBoxReward::MergeFrom(const TreasureBoxReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act_id()) {
      set_act_id(from.act_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureBoxReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureBoxReward::CopyFrom(const TreasureBoxReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureBoxReward::IsInitialized() const {
  
  return true;
}

void TreasureBoxReward::Swap(TreasureBoxReward* other) {
  if (other != this) {
    std::swap(act_id_, other->act_id_);
    std::swap(index_, other->index_);
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureBoxReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureBoxReward_descriptor_;
  metadata.reflection = TreasureBoxReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCrystalTowerActivityData::kLastActivityTimeSecFieldNumber;
const int GuildCrystalTowerActivityData::kTowerCategoryFieldNumber;
const int GuildCrystalTowerActivityData::kStartSecFieldNumber;
const int GuildCrystalTowerActivityData::kActivityDurationFieldNumber;
const int GuildCrystalTowerActivityData::kRewardCountDownSecFieldNumber;
const int GuildCrystalTowerActivityData::kPieceCountFieldNumber;
const int GuildCrystalTowerActivityData::kRewardsFieldNumber;
const int GuildCrystalTowerActivityData::kTowerLevelFieldNumber;
const int GuildCrystalTowerActivityData::kActivityStatusFieldNumber;
#endif  // !_MSC_VER

GuildCrystalTowerActivityData::GuildCrystalTowerActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCrystalTowerActivityData::InitAsDefaultInstance() {
}

GuildCrystalTowerActivityData::GuildCrystalTowerActivityData(const GuildCrystalTowerActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCrystalTowerActivityData::SharedCtor() {
  _cached_size_ = 0;
  last_activity_time_sec_ = 0;
  tower_category_ = 0;
  start_sec_ = 0;
  activity_duration_ = 0;
  reward_count_down_sec_ = 0;
  tower_level_ = 0;
  activity_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCrystalTowerActivityData::~GuildCrystalTowerActivityData() {
  SharedDtor();
}

void GuildCrystalTowerActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCrystalTowerActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCrystalTowerActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCrystalTowerActivityData_descriptor_;
}

const GuildCrystalTowerActivityData& GuildCrystalTowerActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GuildCrystalTowerActivityData* GuildCrystalTowerActivityData::default_instance_ = NULL;

GuildCrystalTowerActivityData* GuildCrystalTowerActivityData::New() const {
  return new GuildCrystalTowerActivityData;
}

void GuildCrystalTowerActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_activity_time_sec_ = 0;
    tower_category_ = 0;
    start_sec_ = 0;
    activity_duration_ = 0;
    reward_count_down_sec_ = 0;
    tower_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activity_status_ = 0;
  }
  piece_count_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCrystalTowerActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 last_activity_time_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_activity_time_sec_)));
          set_has_last_activity_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_category;
        break;
      }
      
      // optional int32 tower_category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_category_)));
          set_has_tower_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_sec;
        break;
      }
      
      // optional int32 start_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_sec_)));
          set_has_start_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_activity_duration;
        break;
      }
      
      // optional int32 activity_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_duration_)));
          set_has_activity_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_count_down_sec;
        break;
      }
      
      // optional int32 reward_count_down_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count_down_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_down_sec_)));
          set_has_reward_count_down_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_piece_count;
        break;
      }
      
      // repeated int32 piece_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_piece_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_piece_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piece_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_piece_count;
        if (input->ExpectTag(58)) goto parse_rewards;
        break;
      }
      
      // repeated .protocols.common.GuildCrystalReward rewards = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rewards;
        if (input->ExpectTag(64)) goto parse_tower_level;
        break;
      }
      
      // optional int32 tower_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_level_)));
          set_has_tower_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_activity_status;
        break;
      }
      
      // optional .protocols.common.ActivityStatus activity_status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::ActivityStatus_IsValid(value)) {
            set_activity_status(static_cast< protocols::common::ActivityStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCrystalTowerActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 last_activity_time_sec = 1;
  if (has_last_activity_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->last_activity_time_sec(), output);
  }
  
  // optional int32 tower_category = 2;
  if (has_tower_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tower_category(), output);
  }
  
  // optional int32 start_sec = 3;
  if (has_start_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_sec(), output);
  }
  
  // optional int32 activity_duration = 4;
  if (has_activity_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->activity_duration(), output);
  }
  
  // optional int32 reward_count_down_sec = 5;
  if (has_reward_count_down_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count_down_sec(), output);
  }
  
  // repeated int32 piece_count = 6;
  for (int i = 0; i < this->piece_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->piece_count(i), output);
  }
  
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rewards(i), output);
  }
  
  // optional int32 tower_level = 8;
  if (has_tower_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tower_level(), output);
  }
  
  // optional .protocols.common.ActivityStatus activity_status = 9;
  if (has_activity_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->activity_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCrystalTowerActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 last_activity_time_sec = 1;
  if (has_last_activity_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->last_activity_time_sec(), target);
  }
  
  // optional int32 tower_category = 2;
  if (has_tower_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tower_category(), target);
  }
  
  // optional int32 start_sec = 3;
  if (has_start_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_sec(), target);
  }
  
  // optional int32 activity_duration = 4;
  if (has_activity_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->activity_duration(), target);
  }
  
  // optional int32 reward_count_down_sec = 5;
  if (has_reward_count_down_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count_down_sec(), target);
  }
  
  // repeated int32 piece_count = 6;
  for (int i = 0; i < this->piece_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->piece_count(i), target);
  }
  
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rewards(i), target);
  }
  
  // optional int32 tower_level = 8;
  if (has_tower_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tower_level(), target);
  }
  
  // optional .protocols.common.ActivityStatus activity_status = 9;
  if (has_activity_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->activity_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCrystalTowerActivityData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 last_activity_time_sec = 1;
    if (has_last_activity_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_activity_time_sec());
    }
    
    // optional int32 tower_category = 2;
    if (has_tower_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_category());
    }
    
    // optional int32 start_sec = 3;
    if (has_start_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_sec());
    }
    
    // optional int32 activity_duration = 4;
    if (has_activity_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_duration());
    }
    
    // optional int32 reward_count_down_sec = 5;
    if (has_reward_count_down_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count_down_sec());
    }
    
    // optional int32 tower_level = 8;
    if (has_tower_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocols.common.ActivityStatus activity_status = 9;
    if (has_activity_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_status());
    }
    
  }
  // repeated int32 piece_count = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->piece_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piece_count(i));
    }
    total_size += 1 * this->piece_count_size() + data_size;
  }
  
  // repeated .protocols.common.GuildCrystalReward rewards = 7;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCrystalTowerActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCrystalTowerActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCrystalTowerActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCrystalTowerActivityData::MergeFrom(const GuildCrystalTowerActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  piece_count_.MergeFrom(from.piece_count_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_activity_time_sec()) {
      set_last_activity_time_sec(from.last_activity_time_sec());
    }
    if (from.has_tower_category()) {
      set_tower_category(from.tower_category());
    }
    if (from.has_start_sec()) {
      set_start_sec(from.start_sec());
    }
    if (from.has_activity_duration()) {
      set_activity_duration(from.activity_duration());
    }
    if (from.has_reward_count_down_sec()) {
      set_reward_count_down_sec(from.reward_count_down_sec());
    }
    if (from.has_tower_level()) {
      set_tower_level(from.tower_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activity_status()) {
      set_activity_status(from.activity_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCrystalTowerActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCrystalTowerActivityData::CopyFrom(const GuildCrystalTowerActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCrystalTowerActivityData::IsInitialized() const {
  
  return true;
}

void GuildCrystalTowerActivityData::Swap(GuildCrystalTowerActivityData* other) {
  if (other != this) {
    std::swap(last_activity_time_sec_, other->last_activity_time_sec_);
    std::swap(tower_category_, other->tower_category_);
    std::swap(start_sec_, other->start_sec_);
    std::swap(activity_duration_, other->activity_duration_);
    std::swap(reward_count_down_sec_, other->reward_count_down_sec_);
    piece_count_.Swap(&other->piece_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(tower_level_, other->tower_level_);
    std::swap(activity_status_, other->activity_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCrystalTowerActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCrystalTowerActivityData_descriptor_;
  metadata.reflection = GuildCrystalTowerActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPosBeforeInstance::kMapIdFieldNumber;
const int PlayerPosBeforeInstance::kMapXFieldNumber;
const int PlayerPosBeforeInstance::kMapYFieldNumber;
#endif  // !_MSC_VER

PlayerPosBeforeInstance::PlayerPosBeforeInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPosBeforeInstance::InitAsDefaultInstance() {
}

PlayerPosBeforeInstance::PlayerPosBeforeInstance(const PlayerPosBeforeInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPosBeforeInstance::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  map_x_ = 0;
  map_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPosBeforeInstance::~PlayerPosBeforeInstance() {
  SharedDtor();
}

void PlayerPosBeforeInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPosBeforeInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPosBeforeInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPosBeforeInstance_descriptor_;
}

const PlayerPosBeforeInstance& PlayerPosBeforeInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerPosBeforeInstance* PlayerPosBeforeInstance::default_instance_ = NULL;

PlayerPosBeforeInstance* PlayerPosBeforeInstance::New() const {
  return new PlayerPosBeforeInstance;
}

void PlayerPosBeforeInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    map_x_ = 0;
    map_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPosBeforeInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_x;
        break;
      }
      
      // required int32 map_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_x_)));
          set_has_map_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_y;
        break;
      }
      
      // required int32 map_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_y_)));
          set_has_map_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPosBeforeInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // required int32 map_x = 2;
  if (has_map_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_x(), output);
  }
  
  // required int32 map_y = 3;
  if (has_map_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPosBeforeInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // required int32 map_x = 2;
  if (has_map_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_x(), target);
  }
  
  // required int32 map_y = 3;
  if (has_map_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPosBeforeInstance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // required int32 map_x = 2;
    if (has_map_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_x());
    }
    
    // required int32 map_y = 3;
    if (has_map_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPosBeforeInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPosBeforeInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPosBeforeInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPosBeforeInstance::MergeFrom(const PlayerPosBeforeInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_map_x()) {
      set_map_x(from.map_x());
    }
    if (from.has_map_y()) {
      set_map_y(from.map_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPosBeforeInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPosBeforeInstance::CopyFrom(const PlayerPosBeforeInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPosBeforeInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PlayerPosBeforeInstance::Swap(PlayerPosBeforeInstance* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(map_x_, other->map_x_);
    std::swap(map_y_, other->map_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPosBeforeInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPosBeforeInstance_descriptor_;
  metadata.reflection = PlayerPosBeforeInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kSeqNoFieldNumber;
const int TeamMemberInfo::kGuidFieldNumber;
const int TeamMemberInfo::kNameFieldNumber;
const int TeamMemberInfo::kIsOnlineFieldNumber;
const int TeamMemberInfo::kJobFieldNumber;
const int TeamMemberInfo::kLevelFieldNumber;
const int TeamMemberInfo::kFightCapacityFieldNumber;
const int TeamMemberInfo::kYinglingInfoFieldNumber;
const int TeamMemberInfo::kIsReadyFieldNumber;
const int TeamMemberInfo::kWingIdFieldNumber;
const int TeamMemberInfo::kTitileFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberInfo::InitAsDefaultInstance() {
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  seq_no_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = 0;
  job_ = 1;
  level_ = 0;
  fight_capacity_ = 0;
  is_ready_ = false;
  wing_id_ = 0;
  titile_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberInfo_descriptor_;
}

const TeamMemberInfo& TeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_no_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_online_ = 0;
    job_ = 1;
    level_ = 0;
    fight_capacity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_ready_ = false;
    wing_id_ = 0;
    titile_ = 0;
  }
  yingling_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seq_no = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_no_)));
          set_has_seq_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }
      
      // required int64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_online;
        break;
      }
      
      // required int32 is_online = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }
      
      // optional .protocols.common.Profession job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::Profession_IsValid(value)) {
            set_job(static_cast< protocols::common::Profession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yingling_info;
        break;
      }
      
      // repeated .protocols.common.YinglingInfo yingling_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yingling_info;
        if (input->ExpectTag(64)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_ready;
        break;
      }
      
      // optional bool is_ready = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
          set_has_is_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wing_id;
        break;
      }
      
      // optional int32 wing_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wing_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_id_)));
          set_has_wing_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_titile;
        break;
      }
      
      // optional int32 titile = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titile_)));
          set_has_titile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seq_no(), output);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guid(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required int32 is_online = 4;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_online(), output);
  }
  
  // optional .protocols.common.Profession job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->job(), output);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  for (int i = 0; i < this->yingling_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yingling_info(i), output);
  }
  
  // optional int32 fight_capacity = 8;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fight_capacity(), output);
  }
  
  // optional bool is_ready = 9;
  if (has_is_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_ready(), output);
  }
  
  // optional int32 wing_id = 10;
  if (has_wing_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->wing_id(), output);
  }
  
  // optional int32 titile = 11;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->titile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seq_no = 1;
  if (has_seq_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seq_no(), target);
  }
  
  // required int64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guid(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required int32 is_online = 4;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_online(), target);
  }
  
  // optional .protocols.common.Profession job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->job(), target);
  }
  
  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }
  
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  for (int i = 0; i < this->yingling_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yingling_info(i), target);
  }
  
  // optional int32 fight_capacity = 8;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fight_capacity(), target);
  }
  
  // optional bool is_ready = 9;
  if (has_is_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_ready(), target);
  }
  
  // optional int32 wing_id = 10;
  if (has_wing_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->wing_id(), target);
  }
  
  // optional int32 titile = 11;
  if (has_titile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->titile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seq_no = 1;
    if (has_seq_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_no());
    }
    
    // required int64 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 is_online = 4;
    if (has_is_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_online());
    }
    
    // optional .protocols.common.Profession job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }
    
    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional int32 fight_capacity = 8;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_ready = 9;
    if (has_is_ready()) {
      total_size += 1 + 1;
    }
    
    // optional int32 wing_id = 10;
    if (has_wing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_id());
    }
    
    // optional int32 titile = 11;
    if (has_titile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titile());
    }
    
  }
  // repeated .protocols.common.YinglingInfo yingling_info = 7;
  total_size += 1 * this->yingling_info_size();
  for (int i = 0; i < this->yingling_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  yingling_info_.MergeFrom(from.yingling_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_no()) {
      set_seq_no(from.seq_no());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_ready()) {
      set_is_ready(from.is_ready());
    }
    if (from.has_wing_id()) {
      set_wing_id(from.wing_id());
    }
    if (from.has_titile()) {
      set_titile(from.titile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  for (int i = 0; i < yingling_info_size(); i++) {
    if (!this->yingling_info(i).IsInitialized()) return false;
  }
  return true;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(seq_no_, other->seq_no_);
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(is_online_, other->is_online_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(fight_capacity_, other->fight_capacity_);
    yingling_info_.Swap(&other->yingling_info_);
    std::swap(is_ready_, other->is_ready_);
    std::swap(wing_id_, other->wing_id_);
    std::swap(titile_, other->titile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberInfo_descriptor_;
  metadata.reflection = TeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kNameFieldNumber;
const int TeamInfo::kLeaderGuidFieldNumber;
const int TeamInfo::kTeamMemberLimitFieldNumber;
const int TeamInfo::kCurTeamMemberFieldNumber;
const int TeamInfo::kObjectiveFieldNumber;
const int TeamInfo::kCustomPassIdFieldNumber;
const int TeamInfo::kDifficultLevelFieldNumber;
const int TeamInfo::kMinLevelRequiredFieldNumber;
const int TeamInfo::kAddMemberTypeFieldNumber;
const int TeamInfo::kTeamMemberFieldNumber;
const int TeamInfo::kTeamBattleSkillIdFieldNumber;
const int TeamInfo::kFighterInfoFieldNumber;
const int TeamInfo::kTeamCreateTypeFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_guid_ = GOOGLE_LONGLONG(0);
  team_member_limit_ = 0;
  cur_team_member_ = 0;
  objective_ = 1;
  custom_pass_id_ = 0;
  difficult_level_ = 1;
  min_level_required_ = 0;
  add_member_type_ = 1;
  team_battle_skill_id_ = 0;
  team_create_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    team_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    leader_guid_ = GOOGLE_LONGLONG(0);
    team_member_limit_ = 0;
    cur_team_member_ = 0;
    objective_ = 1;
    custom_pass_id_ = 0;
    difficult_level_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    min_level_required_ = 0;
    add_member_type_ = 1;
    team_battle_skill_id_ = 0;
    team_create_type_ = 1;
  }
  team_member_.Clear();
  fighter_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 team_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_guid;
        break;
      }
      
      // required int64 leader_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_guid_)));
          set_has_leader_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_member_limit;
        break;
      }
      
      // required int32 team_member_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_member_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_member_limit_)));
          set_has_team_member_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_team_member;
        break;
      }
      
      // optional int32 cur_team_member = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_team_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_team_member_)));
          set_has_cur_team_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_objective;
        break;
      }
      
      // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objective:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_OBJECTIVE_TYPE_IsValid(value)) {
            set_objective(static_cast< protocols::common::TEAM_OBJECTIVE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_custom_pass_id;
        break;
      }
      
      // optional int32 custom_pass_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custom_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &custom_pass_id_)));
          set_has_custom_pass_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_difficult_level;
        break;
      }
      
      // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::DIFFICULTY_LEVEL_IsValid(value)) {
            set_difficult_level(static_cast< protocols::common::DIFFICULTY_LEVEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_min_level_required;
        break;
      }
      
      // optional int32 min_level_required = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_required_)));
          set_has_min_level_required();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_add_member_type;
        break;
      }
      
      // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_member_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (protocols::common::TEAM_ADD_TYPE_IsValid(value)) {
            set_add_member_type(static_cast< protocols::common::TEAM_ADD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_team_member;
        break;
      }
      
      // repeated .protocols.common.TeamMemberInfo team_member = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_team_member;
        if (input->ExpectTag(104)) goto parse_team_battle_skill_id;
        break;
      }
      
      // optional int32 team_battle_skill_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_battle_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_battle_skill_id_)));
          set_has_team_battle_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fighter_info;
        break;
      }
      
      // repeated .protocols.common.FighterInfo fighter_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fighter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighter_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fighter_info;
        if (input->ExpectTag(120)) goto parse_team_create_type;
        break;
      }
      
      // optional int32 team_create_type = 15 [default = 1];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_create_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_create_type_)));
          set_has_team_create_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->team_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->leader_guid(), output);
  }
  
  // required int32 team_member_limit = 4;
  if (has_team_member_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team_member_limit(), output);
  }
  
  // optional int32 cur_team_member = 5;
  if (has_cur_team_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_team_member(), output);
  }
  
  // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
  if (has_objective()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->objective(), output);
  }
  
  // optional int32 custom_pass_id = 7;
  if (has_custom_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->custom_pass_id(), output);
  }
  
  // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
  if (has_difficult_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->difficult_level(), output);
  }
  
  // optional int32 min_level_required = 9;
  if (has_min_level_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->min_level_required(), output);
  }
  
  // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
  if (has_add_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->add_member_type(), output);
  }
  
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  for (int i = 0; i < this->team_member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->team_member(i), output);
  }
  
  // optional int32 team_battle_skill_id = 13;
  if (has_team_battle_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team_battle_skill_id(), output);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->fighter_info(i), output);
  }
  
  // optional int32 team_create_type = 15 [default = 1];
  if (has_team_create_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->team_create_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->team_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int64 leader_guid = 3;
  if (has_leader_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->leader_guid(), target);
  }
  
  // required int32 team_member_limit = 4;
  if (has_team_member_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team_member_limit(), target);
  }
  
  // optional int32 cur_team_member = 5;
  if (has_cur_team_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_team_member(), target);
  }
  
  // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
  if (has_objective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->objective(), target);
  }
  
  // optional int32 custom_pass_id = 7;
  if (has_custom_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->custom_pass_id(), target);
  }
  
  // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
  if (has_difficult_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->difficult_level(), target);
  }
  
  // optional int32 min_level_required = 9;
  if (has_min_level_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->min_level_required(), target);
  }
  
  // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
  if (has_add_member_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->add_member_type(), target);
  }
  
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  for (int i = 0; i < this->team_member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->team_member(i), target);
  }
  
  // optional int32 team_battle_skill_id = 13;
  if (has_team_battle_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team_battle_skill_id(), target);
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  for (int i = 0; i < this->fighter_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->fighter_info(i), target);
  }
  
  // optional int32 team_create_type = 15 [default = 1];
  if (has_team_create_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->team_create_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int64 leader_guid = 3;
    if (has_leader_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_guid());
    }
    
    // required int32 team_member_limit = 4;
    if (has_team_member_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_member_limit());
    }
    
    // optional int32 cur_team_member = 5;
    if (has_cur_team_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_team_member());
    }
    
    // optional .protocols.common.TEAM_OBJECTIVE_TYPE objective = 6;
    if (has_objective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objective());
    }
    
    // optional int32 custom_pass_id = 7;
    if (has_custom_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->custom_pass_id());
    }
    
    // optional .protocols.common.DIFFICULTY_LEVEL difficult_level = 8;
    if (has_difficult_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficult_level());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 min_level_required = 9;
    if (has_min_level_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level_required());
    }
    
    // optional .protocols.common.TEAM_ADD_TYPE add_member_type = 10;
    if (has_add_member_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->add_member_type());
    }
    
    // optional int32 team_battle_skill_id = 13;
    if (has_team_battle_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_battle_skill_id());
    }
    
    // optional int32 team_create_type = 15 [default = 1];
    if (has_team_create_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_create_type());
    }
    
  }
  // repeated .protocols.common.TeamMemberInfo team_member = 11;
  total_size += 1 * this->team_member_size();
  for (int i = 0; i < this->team_member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team_member(i));
  }
  
  // repeated .protocols.common.FighterInfo fighter_info = 14;
  total_size += 1 * this->fighter_info_size();
  for (int i = 0; i < this->fighter_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighter_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_member_.MergeFrom(from.team_member_);
  fighter_info_.MergeFrom(from.fighter_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leader_guid()) {
      set_leader_guid(from.leader_guid());
    }
    if (from.has_team_member_limit()) {
      set_team_member_limit(from.team_member_limit());
    }
    if (from.has_cur_team_member()) {
      set_cur_team_member(from.cur_team_member());
    }
    if (from.has_objective()) {
      set_objective(from.objective());
    }
    if (from.has_custom_pass_id()) {
      set_custom_pass_id(from.custom_pass_id());
    }
    if (from.has_difficult_level()) {
      set_difficult_level(from.difficult_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_min_level_required()) {
      set_min_level_required(from.min_level_required());
    }
    if (from.has_add_member_type()) {
      set_add_member_type(from.add_member_type());
    }
    if (from.has_team_battle_skill_id()) {
      set_team_battle_skill_id(from.team_battle_skill_id());
    }
    if (from.has_team_create_type()) {
      set_team_create_type(from.team_create_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < team_member_size(); i++) {
    if (!this->team_member(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fighter_info_size(); i++) {
    if (!this->fighter_info(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(team_id_, other->team_id_);
    std::swap(name_, other->name_);
    std::swap(leader_guid_, other->leader_guid_);
    std::swap(team_member_limit_, other->team_member_limit_);
    std::swap(cur_team_member_, other->cur_team_member_);
    std::swap(objective_, other->objective_);
    std::swap(custom_pass_id_, other->custom_pass_id_);
    std::swap(difficult_level_, other->difficult_level_);
    std::swap(min_level_required_, other->min_level_required_);
    std::swap(add_member_type_, other->add_member_type_);
    team_member_.Swap(&other->team_member_);
    std::swap(team_battle_skill_id_, other->team_battle_skill_id_);
    fighter_info_.Swap(&other->fighter_info_);
    std::swap(team_create_type_, other->team_create_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoolDown::kTypeFieldNumber;
const int CoolDown::kSecFieldNumber;
#endif  // !_MSC_VER

CoolDown::CoolDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoolDown::InitAsDefaultInstance() {
}

CoolDown::CoolDown(const CoolDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoolDown::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoolDown::~CoolDown() {
  SharedDtor();
}

void CoolDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoolDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoolDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoolDown_descriptor_;
}

const CoolDown& CoolDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

CoolDown* CoolDown::default_instance_ = NULL;

CoolDown* CoolDown::New() const {
  return new CoolDown;
}

void CoolDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    sec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoolDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sec;
        break;
      }
      
      // required int32 sec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoolDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 sec = 2;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoolDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 sec = 2;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoolDown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 sec = 2;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoolDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoolDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoolDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoolDown::MergeFrom(const CoolDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoolDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoolDown::CopyFrom(const CoolDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoolDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CoolDown::Swap(CoolDown* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sec_, other->sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoolDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoolDown_descriptor_;
  metadata.reflection = CoolDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCoolDownPb::kCoolDownFieldNumber;
#endif  // !_MSC_VER

RoleCoolDownPb::RoleCoolDownPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCoolDownPb::InitAsDefaultInstance() {
}

RoleCoolDownPb::RoleCoolDownPb(const RoleCoolDownPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCoolDownPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCoolDownPb::~RoleCoolDownPb() {
  SharedDtor();
}

void RoleCoolDownPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCoolDownPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCoolDownPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCoolDownPb_descriptor_;
}

const RoleCoolDownPb& RoleCoolDownPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleCoolDownPb* RoleCoolDownPb::default_instance_ = NULL;

RoleCoolDownPb* RoleCoolDownPb::New() const {
  return new RoleCoolDownPb;
}

void RoleCoolDownPb::Clear() {
  cool_down_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCoolDownPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.CoolDown cool_down = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cool_down:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cool_down()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cool_down;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCoolDownPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.CoolDown cool_down = 2;
  for (int i = 0; i < this->cool_down_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cool_down(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCoolDownPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.CoolDown cool_down = 2;
  for (int i = 0; i < this->cool_down_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cool_down(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCoolDownPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.CoolDown cool_down = 2;
  total_size += 1 * this->cool_down_size();
  for (int i = 0; i < this->cool_down_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cool_down(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCoolDownPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCoolDownPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCoolDownPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCoolDownPb::MergeFrom(const RoleCoolDownPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  cool_down_.MergeFrom(from.cool_down_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCoolDownPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCoolDownPb::CopyFrom(const RoleCoolDownPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCoolDownPb::IsInitialized() const {
  
  for (int i = 0; i < cool_down_size(); i++) {
    if (!this->cool_down(i).IsInitialized()) return false;
  }
  return true;
}

void RoleCoolDownPb::Swap(RoleCoolDownPb* other) {
  if (other != this) {
    cool_down_.Swap(&other->cool_down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCoolDownPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCoolDownPb_descriptor_;
  metadata.reflection = RoleCoolDownPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyCountLimit::kLimitTypeFieldNumber;
const int DailyCountLimit::kLimitCountFieldNumber;
const int DailyCountLimit::kCurrentCountFieldNumber;
const int DailyCountLimit::kLimitPurchaseCountFieldNumber;
const int DailyCountLimit::kCurrentPurchaseCountFieldNumber;
const int DailyCountLimit::kUpdateTimeFieldNumber;
const int DailyCountLimit::kAddCountFieldNumber;
#endif  // !_MSC_VER

DailyCountLimit::DailyCountLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyCountLimit::InitAsDefaultInstance() {
}

DailyCountLimit::DailyCountLimit(const DailyCountLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyCountLimit::SharedCtor() {
  _cached_size_ = 0;
  limit_type_ = 0;
  limit_count_ = 0;
  current_count_ = 0;
  limit_purchase_count_ = 0;
  current_purchase_count_ = 0;
  update_time_ = 0;
  add_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyCountLimit::~DailyCountLimit() {
  SharedDtor();
}

void DailyCountLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyCountLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyCountLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyCountLimit_descriptor_;
}

const DailyCountLimit& DailyCountLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyCountLimit* DailyCountLimit::default_instance_ = NULL;

DailyCountLimit* DailyCountLimit::New() const {
  return new DailyCountLimit;
}

void DailyCountLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    limit_type_ = 0;
    limit_count_ = 0;
    current_count_ = 0;
    limit_purchase_count_ = 0;
    current_purchase_count_ = 0;
    update_time_ = 0;
    add_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyCountLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 limit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit_count;
        break;
      }
      
      // required int32 limit_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_count_)));
          set_has_limit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_current_count;
        break;
      }
      
      // required int32 current_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));
          set_has_current_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit_purchase_count;
        break;
      }
      
      // required int32 limit_purchase_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_purchase_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_purchase_count_)));
          set_has_limit_purchase_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_current_purchase_count;
        break;
      }
      
      // required int32 current_purchase_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_purchase_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_purchase_count_)));
          set_has_current_purchase_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }
      
      // optional int32 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_add_count;
        break;
      }
      
      // optional int32 add_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_count_)));
          set_has_add_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyCountLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 limit_type = 1;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit_type(), output);
  }
  
  // required int32 limit_count = 2;
  if (has_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_count(), output);
  }
  
  // required int32 current_count = 3;
  if (has_current_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current_count(), output);
  }
  
  // required int32 limit_purchase_count = 4;
  if (has_limit_purchase_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit_purchase_count(), output);
  }
  
  // required int32 current_purchase_count = 5;
  if (has_current_purchase_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->current_purchase_count(), output);
  }
  
  // optional int32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->update_time(), output);
  }
  
  // optional int32 add_count = 7;
  if (has_add_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->add_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyCountLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 limit_type = 1;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit_type(), target);
  }
  
  // required int32 limit_count = 2;
  if (has_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_count(), target);
  }
  
  // required int32 current_count = 3;
  if (has_current_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current_count(), target);
  }
  
  // required int32 limit_purchase_count = 4;
  if (has_limit_purchase_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit_purchase_count(), target);
  }
  
  // required int32 current_purchase_count = 5;
  if (has_current_purchase_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->current_purchase_count(), target);
  }
  
  // optional int32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->update_time(), target);
  }
  
  // optional int32 add_count = 7;
  if (has_add_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->add_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyCountLimit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 limit_type = 1;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_type());
    }
    
    // required int32 limit_count = 2;
    if (has_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_count());
    }
    
    // required int32 current_count = 3;
    if (has_current_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_count());
    }
    
    // required int32 limit_purchase_count = 4;
    if (has_limit_purchase_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_purchase_count());
    }
    
    // required int32 current_purchase_count = 5;
    if (has_current_purchase_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_purchase_count());
    }
    
    // optional int32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }
    
    // optional int32 add_count = 7;
    if (has_add_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyCountLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyCountLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyCountLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyCountLimit::MergeFrom(const DailyCountLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_limit_count()) {
      set_limit_count(from.limit_count());
    }
    if (from.has_current_count()) {
      set_current_count(from.current_count());
    }
    if (from.has_limit_purchase_count()) {
      set_limit_purchase_count(from.limit_purchase_count());
    }
    if (from.has_current_purchase_count()) {
      set_current_purchase_count(from.current_purchase_count());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_add_count()) {
      set_add_count(from.add_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyCountLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyCountLimit::CopyFrom(const DailyCountLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyCountLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void DailyCountLimit::Swap(DailyCountLimit* other) {
  if (other != this) {
    std::swap(limit_type_, other->limit_type_);
    std::swap(limit_count_, other->limit_count_);
    std::swap(current_count_, other->current_count_);
    std::swap(limit_purchase_count_, other->limit_purchase_count_);
    std::swap(current_purchase_count_, other->current_purchase_count_);
    std::swap(update_time_, other->update_time_);
    std::swap(add_count_, other->add_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyCountLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyCountLimit_descriptor_;
  metadata.reflection = DailyCountLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDailyLimitPb::kDailyLimitFieldNumber;
#endif  // !_MSC_VER

RoleDailyLimitPb::RoleDailyLimitPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyLimitPb::InitAsDefaultInstance() {
}

RoleDailyLimitPb::RoleDailyLimitPb(const RoleDailyLimitPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyLimitPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyLimitPb::~RoleDailyLimitPb() {
  SharedDtor();
}

void RoleDailyLimitPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDailyLimitPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyLimitPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyLimitPb_descriptor_;
}

const RoleDailyLimitPb& RoleDailyLimitPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleDailyLimitPb* RoleDailyLimitPb::default_instance_ = NULL;

RoleDailyLimitPb* RoleDailyLimitPb::New() const {
  return new RoleDailyLimitPb;
}

void RoleDailyLimitPb::Clear() {
  daily_limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyLimitPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.DailyCountLimit daily_limit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_limit;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDailyLimitPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  for (int i = 0; i < this->daily_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_limit(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyLimitPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  for (int i = 0; i < this->daily_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_limit(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyLimitPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.DailyCountLimit daily_limit = 1;
  total_size += 1 * this->daily_limit_size();
  for (int i = 0; i < this->daily_limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_limit(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyLimitPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyLimitPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyLimitPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyLimitPb::MergeFrom(const RoleDailyLimitPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_limit_.MergeFrom(from.daily_limit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyLimitPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyLimitPb::CopyFrom(const RoleDailyLimitPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyLimitPb::IsInitialized() const {
  
  for (int i = 0; i < daily_limit_size(); i++) {
    if (!this->daily_limit(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDailyLimitPb::Swap(RoleDailyLimitPb* other) {
  if (other != this) {
    daily_limit_.Swap(&other->daily_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyLimitPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyLimitPb_descriptor_;
  metadata.reflection = RoleDailyLimitPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBRoleLimitDataPb::kCoolDownFieldNumber;
const int DBRoleLimitDataPb::kCountLimitFieldNumber;
const int DBRoleLimitDataPb::kHiredYinglingCountFieldNumber;
const int DBRoleLimitDataPb::kStrengthEquipCountFieldNumber;
const int DBRoleLimitDataPb::kGuildContribFieldNumber;
const int DBRoleLimitDataPb::kYouliDataFieldNumber;
const int DBRoleLimitDataPb::kYinglingComboDataFieldNumber;
const int DBRoleLimitDataPb::kYinglingTrainStatusFieldNumber;
#endif  // !_MSC_VER

DBRoleLimitDataPb::DBRoleLimitDataPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBRoleLimitDataPb::InitAsDefaultInstance() {
  cool_down_ = const_cast< ::protocols::common::RoleCoolDownPb*>(&::protocols::common::RoleCoolDownPb::default_instance());
  count_limit_ = const_cast< ::protocols::common::RoleDailyLimitPb*>(&::protocols::common::RoleDailyLimitPb::default_instance());
  hired_yingling_count_ = const_cast< ::protocols::common::RoleHiredYinglingCount*>(&::protocols::common::RoleHiredYinglingCount::default_instance());
  strength_equip_count_ = const_cast< ::protocols::common::RoleStrengthEquipCount*>(&::protocols::common::RoleStrengthEquipCount::default_instance());
  youli_data_ = const_cast< ::protocols::common::YouLiMapData*>(&::protocols::common::YouLiMapData::default_instance());
  yingling_combo_data_ = const_cast< ::protocols::common::YinglingComboStatus*>(&::protocols::common::YinglingComboStatus::default_instance());
  yingling_train_status_ = const_cast< ::protocols::common::YinglingTrainStatus*>(&::protocols::common::YinglingTrainStatus::default_instance());
}

DBRoleLimitDataPb::DBRoleLimitDataPb(const DBRoleLimitDataPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBRoleLimitDataPb::SharedCtor() {
  _cached_size_ = 0;
  cool_down_ = NULL;
  count_limit_ = NULL;
  hired_yingling_count_ = NULL;
  strength_equip_count_ = NULL;
  guild_contrib_ = 0;
  youli_data_ = NULL;
  yingling_combo_data_ = NULL;
  yingling_train_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBRoleLimitDataPb::~DBRoleLimitDataPb() {
  SharedDtor();
}

void DBRoleLimitDataPb::SharedDtor() {
  if (this != default_instance_) {
    delete cool_down_;
    delete count_limit_;
    delete hired_yingling_count_;
    delete strength_equip_count_;
    delete youli_data_;
    delete yingling_combo_data_;
    delete yingling_train_status_;
  }
}

void DBRoleLimitDataPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBRoleLimitDataPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBRoleLimitDataPb_descriptor_;
}

const DBRoleLimitDataPb& DBRoleLimitDataPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DBRoleLimitDataPb* DBRoleLimitDataPb::default_instance_ = NULL;

DBRoleLimitDataPb* DBRoleLimitDataPb::New() const {
  return new DBRoleLimitDataPb;
}

void DBRoleLimitDataPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cool_down()) {
      if (cool_down_ != NULL) cool_down_->::protocols::common::RoleCoolDownPb::Clear();
    }
    if (has_count_limit()) {
      if (count_limit_ != NULL) count_limit_->::protocols::common::RoleDailyLimitPb::Clear();
    }
    if (has_hired_yingling_count()) {
      if (hired_yingling_count_ != NULL) hired_yingling_count_->::protocols::common::RoleHiredYinglingCount::Clear();
    }
    if (has_strength_equip_count()) {
      if (strength_equip_count_ != NULL) strength_equip_count_->::protocols::common::RoleStrengthEquipCount::Clear();
    }
    guild_contrib_ = 0;
    if (has_youli_data()) {
      if (youli_data_ != NULL) youli_data_->::protocols::common::YouLiMapData::Clear();
    }
    if (has_yingling_combo_data()) {
      if (yingling_combo_data_ != NULL) yingling_combo_data_->::protocols::common::YinglingComboStatus::Clear();
    }
    if (has_yingling_train_status()) {
      if (yingling_train_status_ != NULL) yingling_train_status_->::protocols::common::YinglingTrainStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBRoleLimitDataPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.RoleCoolDownPb cool_down = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cool_down()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_count_limit;
        break;
      }
      
      // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hired_yingling_count;
        break;
      }
      
      // optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hired_yingling_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hired_yingling_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strength_equip_count;
        break;
      }
      
      // optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strength_equip_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strength_equip_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_contrib;
        break;
      }
      
      // optional int32 guild_contrib = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_contrib:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_contrib_)));
          set_has_guild_contrib();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_youli_data;
        break;
      }
      
      // optional .protocols.common.YouLiMapData youli_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_youli_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youli_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yingling_combo_data;
        break;
      }
      
      // optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_combo_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yingling_combo_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_yingling_train_status;
        break;
      }
      
      // optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_train_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yingling_train_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBRoleLimitDataPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cool_down(), output);
  }
  
  // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
  if (has_count_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->count_limit(), output);
  }
  
  // optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
  if (has_hired_yingling_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hired_yingling_count(), output);
  }
  
  // optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
  if (has_strength_equip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->strength_equip_count(), output);
  }
  
  // optional int32 guild_contrib = 5;
  if (has_guild_contrib()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_contrib(), output);
  }
  
  // optional .protocols.common.YouLiMapData youli_data = 6;
  if (has_youli_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->youli_data(), output);
  }
  
  // optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
  if (has_yingling_combo_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yingling_combo_data(), output);
  }
  
  // optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
  if (has_yingling_train_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->yingling_train_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBRoleLimitDataPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.RoleCoolDownPb cool_down = 1;
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cool_down(), target);
  }
  
  // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
  if (has_count_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->count_limit(), target);
  }
  
  // optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
  if (has_hired_yingling_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hired_yingling_count(), target);
  }
  
  // optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
  if (has_strength_equip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->strength_equip_count(), target);
  }
  
  // optional int32 guild_contrib = 5;
  if (has_guild_contrib()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_contrib(), target);
  }
  
  // optional .protocols.common.YouLiMapData youli_data = 6;
  if (has_youli_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->youli_data(), target);
  }
  
  // optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
  if (has_yingling_combo_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yingling_combo_data(), target);
  }
  
  // optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
  if (has_yingling_train_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->yingling_train_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBRoleLimitDataPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.RoleCoolDownPb cool_down = 1;
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cool_down());
    }
    
    // optional .protocols.common.RoleDailyLimitPb count_limit = 2;
    if (has_count_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count_limit());
    }
    
    // optional .protocols.common.RoleHiredYinglingCount hired_yingling_count = 3;
    if (has_hired_yingling_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hired_yingling_count());
    }
    
    // optional .protocols.common.RoleStrengthEquipCount strength_equip_count = 4;
    if (has_strength_equip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strength_equip_count());
    }
    
    // optional int32 guild_contrib = 5;
    if (has_guild_contrib()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_contrib());
    }
    
    // optional .protocols.common.YouLiMapData youli_data = 6;
    if (has_youli_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->youli_data());
    }
    
    // optional .protocols.common.YinglingComboStatus yingling_combo_data = 7;
    if (has_yingling_combo_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yingling_combo_data());
    }
    
    // optional .protocols.common.YinglingTrainStatus yingling_train_status = 8;
    if (has_yingling_train_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yingling_train_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBRoleLimitDataPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBRoleLimitDataPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBRoleLimitDataPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBRoleLimitDataPb::MergeFrom(const DBRoleLimitDataPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cool_down()) {
      mutable_cool_down()->::protocols::common::RoleCoolDownPb::MergeFrom(from.cool_down());
    }
    if (from.has_count_limit()) {
      mutable_count_limit()->::protocols::common::RoleDailyLimitPb::MergeFrom(from.count_limit());
    }
    if (from.has_hired_yingling_count()) {
      mutable_hired_yingling_count()->::protocols::common::RoleHiredYinglingCount::MergeFrom(from.hired_yingling_count());
    }
    if (from.has_strength_equip_count()) {
      mutable_strength_equip_count()->::protocols::common::RoleStrengthEquipCount::MergeFrom(from.strength_equip_count());
    }
    if (from.has_guild_contrib()) {
      set_guild_contrib(from.guild_contrib());
    }
    if (from.has_youli_data()) {
      mutable_youli_data()->::protocols::common::YouLiMapData::MergeFrom(from.youli_data());
    }
    if (from.has_yingling_combo_data()) {
      mutable_yingling_combo_data()->::protocols::common::YinglingComboStatus::MergeFrom(from.yingling_combo_data());
    }
    if (from.has_yingling_train_status()) {
      mutable_yingling_train_status()->::protocols::common::YinglingTrainStatus::MergeFrom(from.yingling_train_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBRoleLimitDataPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBRoleLimitDataPb::CopyFrom(const DBRoleLimitDataPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleLimitDataPb::IsInitialized() const {
  
  if (has_cool_down()) {
    if (!this->cool_down().IsInitialized()) return false;
  }
  if (has_count_limit()) {
    if (!this->count_limit().IsInitialized()) return false;
  }
  if (has_hired_yingling_count()) {
    if (!this->hired_yingling_count().IsInitialized()) return false;
  }
  if (has_strength_equip_count()) {
    if (!this->strength_equip_count().IsInitialized()) return false;
  }
  if (has_youli_data()) {
    if (!this->youli_data().IsInitialized()) return false;
  }
  if (has_yingling_train_status()) {
    if (!this->yingling_train_status().IsInitialized()) return false;
  }
  return true;
}

void DBRoleLimitDataPb::Swap(DBRoleLimitDataPb* other) {
  if (other != this) {
    std::swap(cool_down_, other->cool_down_);
    std::swap(count_limit_, other->count_limit_);
    std::swap(hired_yingling_count_, other->hired_yingling_count_);
    std::swap(strength_equip_count_, other->strength_equip_count_);
    std::swap(guild_contrib_, other->guild_contrib_);
    std::swap(youli_data_, other->youli_data_);
    std::swap(yingling_combo_data_, other->yingling_combo_data_);
    std::swap(yingling_train_status_, other->yingling_train_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBRoleLimitDataPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBRoleLimitDataPb_descriptor_;
  metadata.reflection = DBRoleLimitDataPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HiredYinglingCount::kQualityFieldNumber;
const int HiredYinglingCount::kCountFieldNumber;
#endif  // !_MSC_VER

HiredYinglingCount::HiredYinglingCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HiredYinglingCount::InitAsDefaultInstance() {
}

HiredYinglingCount::HiredYinglingCount(const HiredYinglingCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HiredYinglingCount::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HiredYinglingCount::~HiredYinglingCount() {
  SharedDtor();
}

void HiredYinglingCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HiredYinglingCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiredYinglingCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HiredYinglingCount_descriptor_;
}

const HiredYinglingCount& HiredYinglingCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

HiredYinglingCount* HiredYinglingCount::default_instance_ = NULL;

HiredYinglingCount* HiredYinglingCount::New() const {
  return new HiredYinglingCount;
}

void HiredYinglingCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HiredYinglingCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HiredYinglingCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quality(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HiredYinglingCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quality(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HiredYinglingCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiredYinglingCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HiredYinglingCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HiredYinglingCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HiredYinglingCount::MergeFrom(const HiredYinglingCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HiredYinglingCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiredYinglingCount::CopyFrom(const HiredYinglingCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiredYinglingCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HiredYinglingCount::Swap(HiredYinglingCount* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HiredYinglingCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HiredYinglingCount_descriptor_;
  metadata.reflection = HiredYinglingCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHiredYinglingCount::kDataFieldNumber;
const int RoleHiredYinglingCount::kYinglingTidFieldNumber;
const int RoleHiredYinglingCount::kYinglingProFieldNumber;
const int RoleHiredYinglingCount::kYinglingQualityFieldNumber;
#endif  // !_MSC_VER

RoleHiredYinglingCount::RoleHiredYinglingCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleHiredYinglingCount::InitAsDefaultInstance() {
}

RoleHiredYinglingCount::RoleHiredYinglingCount(const RoleHiredYinglingCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleHiredYinglingCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHiredYinglingCount::~RoleHiredYinglingCount() {
  SharedDtor();
}

void RoleHiredYinglingCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHiredYinglingCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHiredYinglingCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHiredYinglingCount_descriptor_;
}

const RoleHiredYinglingCount& RoleHiredYinglingCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleHiredYinglingCount* RoleHiredYinglingCount::default_instance_ = NULL;

RoleHiredYinglingCount* RoleHiredYinglingCount::New() const {
  return new RoleHiredYinglingCount;
}

void RoleHiredYinglingCount::Clear() {
  data_.Clear();
  yingling_tid_.Clear();
  yingling_pro_.Clear();
  yingling_quality_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHiredYinglingCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.HiredYinglingCount data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_yingling_tid;
        break;
      }
      
      // repeated int32 yingling_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yingling_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_yingling_tid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_yingling_tid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yingling_tid;
        if (input->ExpectTag(26)) goto parse_yingling_pro;
        break;
      }
      
      // repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_pro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yingling_pro;
        if (input->ExpectTag(34)) goto parse_yingling_quality;
        break;
      }
      
      // repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yingling_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yingling_quality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yingling_quality;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleHiredYinglingCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.HiredYinglingCount data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  // repeated int32 yingling_tid = 2;
  for (int i = 0; i < this->yingling_tid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->yingling_tid(i), output);
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
  for (int i = 0; i < this->yingling_pro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yingling_pro(i), output);
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
  for (int i = 0; i < this->yingling_quality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->yingling_quality(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleHiredYinglingCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.HiredYinglingCount data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  // repeated int32 yingling_tid = 2;
  for (int i = 0; i < this->yingling_tid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->yingling_tid(i), target);
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
  for (int i = 0; i < this->yingling_pro_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->yingling_pro(i), target);
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
  for (int i = 0; i < this->yingling_quality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->yingling_quality(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleHiredYinglingCount::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.HiredYinglingCount data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  // repeated int32 yingling_tid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->yingling_tid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->yingling_tid(i));
    }
    total_size += 1 * this->yingling_tid_size() + data_size;
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_pro = 3;
  total_size += 1 * this->yingling_pro_size();
  for (int i = 0; i < this->yingling_pro_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_pro(i));
  }
  
  // repeated .protocols.common.HiredYinglingCount yingling_quality = 4;
  total_size += 1 * this->yingling_quality_size();
  for (int i = 0; i < this->yingling_quality_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yingling_quality(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHiredYinglingCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHiredYinglingCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHiredYinglingCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHiredYinglingCount::MergeFrom(const RoleHiredYinglingCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  yingling_tid_.MergeFrom(from.yingling_tid_);
  yingling_pro_.MergeFrom(from.yingling_pro_);
  yingling_quality_.MergeFrom(from.yingling_quality_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHiredYinglingCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHiredYinglingCount::CopyFrom(const RoleHiredYinglingCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHiredYinglingCount::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yingling_pro_size(); i++) {
    if (!this->yingling_pro(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yingling_quality_size(); i++) {
    if (!this->yingling_quality(i).IsInitialized()) return false;
  }
  return true;
}

void RoleHiredYinglingCount::Swap(RoleHiredYinglingCount* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    yingling_tid_.Swap(&other->yingling_tid_);
    yingling_pro_.Swap(&other->yingling_pro_);
    yingling_quality_.Swap(&other->yingling_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHiredYinglingCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHiredYinglingCount_descriptor_;
  metadata.reflection = RoleHiredYinglingCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthEquipCount::kStrengthLevelFieldNumber;
const int StrengthEquipCount::kCountFieldNumber;
#endif  // !_MSC_VER

StrengthEquipCount::StrengthEquipCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthEquipCount::InitAsDefaultInstance() {
}

StrengthEquipCount::StrengthEquipCount(const StrengthEquipCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthEquipCount::SharedCtor() {
  _cached_size_ = 0;
  strength_level_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthEquipCount::~StrengthEquipCount() {
  SharedDtor();
}

void StrengthEquipCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengthEquipCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthEquipCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthEquipCount_descriptor_;
}

const StrengthEquipCount& StrengthEquipCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

StrengthEquipCount* StrengthEquipCount::default_instance_ = NULL;

StrengthEquipCount* StrengthEquipCount::New() const {
  return new StrengthEquipCount;
}

void StrengthEquipCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strength_level_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthEquipCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 strength_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_level_)));
          set_has_strength_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthEquipCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 strength_level = 1;
  if (has_strength_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->strength_level(), output);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthEquipCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 strength_level = 1;
  if (has_strength_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->strength_level(), target);
  }
  
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthEquipCount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 strength_level = 1;
    if (has_strength_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_level());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthEquipCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthEquipCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthEquipCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthEquipCount::MergeFrom(const StrengthEquipCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strength_level()) {
      set_strength_level(from.strength_level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthEquipCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthEquipCount::CopyFrom(const StrengthEquipCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthEquipCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StrengthEquipCount::Swap(StrengthEquipCount* other) {
  if (other != this) {
    std::swap(strength_level_, other->strength_level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthEquipCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthEquipCount_descriptor_;
  metadata.reflection = StrengthEquipCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleStrengthEquipCount::kDataFieldNumber;
#endif  // !_MSC_VER

RoleStrengthEquipCount::RoleStrengthEquipCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleStrengthEquipCount::InitAsDefaultInstance() {
}

RoleStrengthEquipCount::RoleStrengthEquipCount(const RoleStrengthEquipCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleStrengthEquipCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleStrengthEquipCount::~RoleStrengthEquipCount() {
  SharedDtor();
}

void RoleStrengthEquipCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleStrengthEquipCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleStrengthEquipCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleStrengthEquipCount_descriptor_;
}

const RoleStrengthEquipCount& RoleStrengthEquipCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

RoleStrengthEquipCount* RoleStrengthEquipCount::default_instance_ = NULL;

RoleStrengthEquipCount* RoleStrengthEquipCount::New() const {
  return new RoleStrengthEquipCount;
}

void RoleStrengthEquipCount::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleStrengthEquipCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.StrengthEquipCount data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleStrengthEquipCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.StrengthEquipCount data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleStrengthEquipCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.StrengthEquipCount data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleStrengthEquipCount::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.StrengthEquipCount data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleStrengthEquipCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleStrengthEquipCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleStrengthEquipCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleStrengthEquipCount::MergeFrom(const RoleStrengthEquipCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleStrengthEquipCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleStrengthEquipCount::CopyFrom(const RoleStrengthEquipCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleStrengthEquipCount::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void RoleStrengthEquipCount::Swap(RoleStrengthEquipCount* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleStrengthEquipCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleStrengthEquipCount_descriptor_;
  metadata.reflection = RoleStrengthEquipCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuest::kQuestIdFieldNumber;
const int DailyQuest::kQualityFieldNumber;
const int DailyQuest::kStatusFieldNumber;
const int DailyQuest::kCategoryFieldNumber;
const int DailyQuest::kRewardExpFieldNumber;
const int DailyQuest::kRewardCoinFieldNumber;
#endif  // !_MSC_VER

DailyQuest::DailyQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuest::InitAsDefaultInstance() {
}

DailyQuest::DailyQuest(const DailyQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quality_ = 0;
  status_ = 0;
  category_ = 0;
  reward_exp_ = 0;
  reward_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuest::~DailyQuest() {
  SharedDtor();
}

void DailyQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuest_descriptor_;
}

const DailyQuest& DailyQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyQuest* DailyQuest::default_instance_ = NULL;

DailyQuest* DailyQuest::New() const {
  return new DailyQuest;
}

void DailyQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quest_id_ = 0;
    quality_ = 0;
    status_ = 0;
    category_ = 0;
    reward_exp_ = 0;
    reward_coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }
      
      // required int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_category;
        break;
      }
      
      // required int32 category = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_exp;
        break;
      }
      
      // optional int32 reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reward_coin;
        break;
      }
      
      // optional int32 reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_coin_)));
          set_has_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }
  
  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // required int32 category = 4;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->category(), output);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_exp(), output);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }
  
  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // required int32 category = 4;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->category(), target);
  }
  
  // optional int32 reward_exp = 5;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_exp(), target);
  }
  
  // optional int32 reward_coin = 6;
  if (has_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 category = 4;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }
    
    // optional int32 reward_exp = 5;
    if (has_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp());
    }
    
    // optional int32 reward_coin = 6;
    if (has_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuest::MergeFrom(const DailyQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
    if (from.has_reward_coin()) {
      set_reward_coin(from.reward_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuest::CopyFrom(const DailyQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void DailyQuest::Swap(DailyQuest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quality_, other->quality_);
    std::swap(status_, other->status_);
    std::swap(category_, other->category_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(reward_coin_, other->reward_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuest_descriptor_;
  metadata.reflection = DailyQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuestPb::kDailyQuestsFieldNumber;
const int DailyQuestPb::kAcceptedDailyQuestsFieldNumber;
const int DailyQuestPb::kXunluoQuestFieldNumber;
const int DailyQuestPb::kGuildCircleQuestFieldNumber;
#endif  // !_MSC_VER

DailyQuestPb::DailyQuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuestPb::InitAsDefaultInstance() {
  xunluo_quest_ = const_cast< ::protocols::common::XunluoQuestPb*>(&::protocols::common::XunluoQuestPb::default_instance());
  guild_circle_quest_ = const_cast< ::protocols::common::GuildCircleQuestPb*>(&::protocols::common::GuildCircleQuestPb::default_instance());
}

DailyQuestPb::DailyQuestPb(const DailyQuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuestPb::SharedCtor() {
  _cached_size_ = 0;
  xunluo_quest_ = NULL;
  guild_circle_quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuestPb::~DailyQuestPb() {
  SharedDtor();
}

void DailyQuestPb::SharedDtor() {
  if (this != default_instance_) {
    delete xunluo_quest_;
    delete guild_circle_quest_;
  }
}

void DailyQuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuestPb_descriptor_;
}

const DailyQuestPb& DailyQuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

DailyQuestPb* DailyQuestPb::default_instance_ = NULL;

DailyQuestPb* DailyQuestPb::New() const {
  return new DailyQuestPb;
}

void DailyQuestPb::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_xunluo_quest()) {
      if (xunluo_quest_ != NULL) xunluo_quest_->::protocols::common::XunluoQuestPb::Clear();
    }
    if (has_guild_circle_quest()) {
      if (guild_circle_quest_ != NULL) guild_circle_quest_->::protocols::common::GuildCircleQuestPb::Clear();
    }
  }
  daily_quests_.Clear();
  accepted_daily_quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.DailyQuest daily_quests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_daily_quests;
        if (input->ExpectTag(18)) goto parse_accepted_daily_quests;
        break;
      }
      
      // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accepted_daily_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accepted_daily_quests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accepted_daily_quests;
        if (input->ExpectTag(26)) goto parse_xunluo_quest;
        break;
      }
      
      // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xunluo_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xunluo_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_circle_quest;
        break;
      }
      
      // optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_circle_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_circle_quest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  for (int i = 0; i < this->daily_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_quests(i), output);
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accepted_daily_quests(i), output);
  }
  
  // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
  if (has_xunluo_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->xunluo_quest(), output);
  }
  
  // optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
  if (has_guild_circle_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guild_circle_quest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  for (int i = 0; i < this->daily_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_quests(i), target);
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accepted_daily_quests(i), target);
  }
  
  // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
  if (has_xunluo_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->xunluo_quest(), target);
  }
  
  // optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
  if (has_guild_circle_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guild_circle_quest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .protocols.common.XunluoQuestPb xunluo_quest = 3;
    if (has_xunluo_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xunluo_quest());
    }
    
    // optional .protocols.common.GuildCircleQuestPb guild_circle_quest = 4;
    if (has_guild_circle_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_circle_quest());
    }
    
  }
  // repeated .protocols.common.DailyQuest daily_quests = 1;
  total_size += 1 * this->daily_quests_size();
  for (int i = 0; i < this->daily_quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_quests(i));
  }
  
  // repeated .protocols.common.DailyQuest accepted_daily_quests = 2;
  total_size += 1 * this->accepted_daily_quests_size();
  for (int i = 0; i < this->accepted_daily_quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accepted_daily_quests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuestPb::MergeFrom(const DailyQuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_quests_.MergeFrom(from.daily_quests_);
  accepted_daily_quests_.MergeFrom(from.accepted_daily_quests_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_xunluo_quest()) {
      mutable_xunluo_quest()->::protocols::common::XunluoQuestPb::MergeFrom(from.xunluo_quest());
    }
    if (from.has_guild_circle_quest()) {
      mutable_guild_circle_quest()->::protocols::common::GuildCircleQuestPb::MergeFrom(from.guild_circle_quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuestPb::CopyFrom(const DailyQuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuestPb::IsInitialized() const {
  
  for (int i = 0; i < daily_quests_size(); i++) {
    if (!this->daily_quests(i).IsInitialized()) return false;
  }
  for (int i = 0; i < accepted_daily_quests_size(); i++) {
    if (!this->accepted_daily_quests(i).IsInitialized()) return false;
  }
  return true;
}

void DailyQuestPb::Swap(DailyQuestPb* other) {
  if (other != this) {
    daily_quests_.Swap(&other->daily_quests_);
    accepted_daily_quests_.Swap(&other->accepted_daily_quests_);
    std::swap(xunluo_quest_, other->xunluo_quest_);
    std::swap(guild_circle_quest_, other->guild_circle_quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuestPb_descriptor_;
  metadata.reflection = DailyQuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int XunluoQuestPb::kCurCircleIndexFieldNumber;
const int XunluoQuestPb::kXunluoQuestIdFieldNumber;
const int XunluoQuestPb::kXunluoRewardExpFieldNumber;
const int XunluoQuestPb::kXunluoRewardCoinFieldNumber;
#endif  // !_MSC_VER

XunluoQuestPb::XunluoQuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XunluoQuestPb::InitAsDefaultInstance() {
}

XunluoQuestPb::XunluoQuestPb(const XunluoQuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XunluoQuestPb::SharedCtor() {
  _cached_size_ = 0;
  cur_circle_index_ = 0;
  xunluo_quest_id_ = 0;
  xunluo_reward_exp_ = 0;
  xunluo_reward_coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XunluoQuestPb::~XunluoQuestPb() {
  SharedDtor();
}

void XunluoQuestPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XunluoQuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XunluoQuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XunluoQuestPb_descriptor_;
}

const XunluoQuestPb& XunluoQuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

XunluoQuestPb* XunluoQuestPb::default_instance_ = NULL;

XunluoQuestPb* XunluoQuestPb::New() const {
  return new XunluoQuestPb;
}

void XunluoQuestPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_circle_index_ = 0;
    xunluo_quest_id_ = 0;
    xunluo_reward_exp_ = 0;
    xunluo_reward_coin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool XunluoQuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_circle_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_circle_index_)));
          set_has_cur_circle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_xunluo_quest_id;
        break;
      }
      
      // optional int32 xunluo_quest_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_quest_id_)));
          set_has_xunluo_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_xunluo_reward_exp;
        break;
      }
      
      // optional int32 xunluo_reward_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_reward_exp_)));
          set_has_xunluo_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xunluo_reward_coin;
        break;
      }
      
      // optional int32 xunluo_reward_coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xunluo_reward_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xunluo_reward_coin_)));
          set_has_xunluo_reward_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void XunluoQuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_circle_index = 3;
  if (has_cur_circle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_circle_index(), output);
  }
  
  // optional int32 xunluo_quest_id = 4;
  if (has_xunluo_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->xunluo_quest_id(), output);
  }
  
  // optional int32 xunluo_reward_exp = 5;
  if (has_xunluo_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xunluo_reward_exp(), output);
  }
  
  // optional int32 xunluo_reward_coin = 6;
  if (has_xunluo_reward_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xunluo_reward_coin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XunluoQuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_circle_index = 3;
  if (has_cur_circle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_circle_index(), target);
  }
  
  // optional int32 xunluo_quest_id = 4;
  if (has_xunluo_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->xunluo_quest_id(), target);
  }
  
  // optional int32 xunluo_reward_exp = 5;
  if (has_xunluo_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xunluo_reward_exp(), target);
  }
  
  // optional int32 xunluo_reward_coin = 6;
  if (has_xunluo_reward_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xunluo_reward_coin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XunluoQuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_circle_index = 3;
    if (has_cur_circle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_circle_index());
    }
    
    // optional int32 xunluo_quest_id = 4;
    if (has_xunluo_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_quest_id());
    }
    
    // optional int32 xunluo_reward_exp = 5;
    if (has_xunluo_reward_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_reward_exp());
    }
    
    // optional int32 xunluo_reward_coin = 6;
    if (has_xunluo_reward_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xunluo_reward_coin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XunluoQuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XunluoQuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XunluoQuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void XunluoQuestPb::MergeFrom(const XunluoQuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_circle_index()) {
      set_cur_circle_index(from.cur_circle_index());
    }
    if (from.has_xunluo_quest_id()) {
      set_xunluo_quest_id(from.xunluo_quest_id());
    }
    if (from.has_xunluo_reward_exp()) {
      set_xunluo_reward_exp(from.xunluo_reward_exp());
    }
    if (from.has_xunluo_reward_coin()) {
      set_xunluo_reward_coin(from.xunluo_reward_coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void XunluoQuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XunluoQuestPb::CopyFrom(const XunluoQuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XunluoQuestPb::IsInitialized() const {
  
  return true;
}

void XunluoQuestPb::Swap(XunluoQuestPb* other) {
  if (other != this) {
    std::swap(cur_circle_index_, other->cur_circle_index_);
    std::swap(xunluo_quest_id_, other->xunluo_quest_id_);
    std::swap(xunluo_reward_exp_, other->xunluo_reward_exp_);
    std::swap(xunluo_reward_coin_, other->xunluo_reward_coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata XunluoQuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XunluoQuestPb_descriptor_;
  metadata.reflection = XunluoQuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCircleQuestPb::kCurCircleIndexFieldNumber;
const int GuildCircleQuestPb::kQuestIdFieldNumber;
#endif  // !_MSC_VER

GuildCircleQuestPb::GuildCircleQuestPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCircleQuestPb::InitAsDefaultInstance() {
}

GuildCircleQuestPb::GuildCircleQuestPb(const GuildCircleQuestPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCircleQuestPb::SharedCtor() {
  _cached_size_ = 0;
  cur_circle_index_ = 0;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCircleQuestPb::~GuildCircleQuestPb() {
  SharedDtor();
}

void GuildCircleQuestPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCircleQuestPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCircleQuestPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCircleQuestPb_descriptor_;
}

const GuildCircleQuestPb& GuildCircleQuestPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GuildCircleQuestPb* GuildCircleQuestPb::default_instance_ = NULL;

GuildCircleQuestPb* GuildCircleQuestPb::New() const {
  return new GuildCircleQuestPb;
}

void GuildCircleQuestPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_circle_index_ = 0;
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCircleQuestPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_circle_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_circle_index_)));
          set_has_cur_circle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }
      
      // optional int32 quest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCircleQuestPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_circle_index = 1;
  if (has_cur_circle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_circle_index(), output);
  }
  
  // optional int32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCircleQuestPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_circle_index = 1;
  if (has_cur_circle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_circle_index(), target);
  }
  
  // optional int32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCircleQuestPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_circle_index = 1;
    if (has_cur_circle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_circle_index());
    }
    
    // optional int32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCircleQuestPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCircleQuestPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCircleQuestPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCircleQuestPb::MergeFrom(const GuildCircleQuestPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_circle_index()) {
      set_cur_circle_index(from.cur_circle_index());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCircleQuestPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCircleQuestPb::CopyFrom(const GuildCircleQuestPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCircleQuestPb::IsInitialized() const {
  
  return true;
}

void GuildCircleQuestPb::Swap(GuildCircleQuestPb* other) {
  if (other != this) {
    std::swap(cur_circle_index_, other->cur_circle_index_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCircleQuestPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCircleQuestPb_descriptor_;
  metadata.reflection = GuildCircleQuestPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagPb::kTypeFieldNumber;
const int PlayerFlagPb::kValueFieldNumber;
#endif  // !_MSC_VER

PlayerFlagPb::PlayerFlagPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagPb::InitAsDefaultInstance() {
}

PlayerFlagPb::PlayerFlagPb(const PlayerFlagPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagPb::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagPb::~PlayerFlagPb() {
  SharedDtor();
}

void PlayerFlagPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlagPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagPb_descriptor_;
}

const PlayerFlagPb& PlayerFlagPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerFlagPb* PlayerFlagPb::default_instance_ = NULL;

PlayerFlagPb* PlayerFlagPb::New() const {
  return new PlayerFlagPb;
}

void PlayerFlagPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagPb::MergeFrom(const PlayerFlagPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagPb::CopyFrom(const PlayerFlagPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagPb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerFlagPb::Swap(PlayerFlagPb* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagPb_descriptor_;
  metadata.reflection = PlayerFlagPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFlagDataPb::kDataFieldNumber;
#endif  // !_MSC_VER

PlayerFlagDataPb::PlayerFlagDataPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerFlagDataPb::InitAsDefaultInstance() {
}

PlayerFlagDataPb::PlayerFlagDataPb(const PlayerFlagDataPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerFlagDataPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFlagDataPb::~PlayerFlagDataPb() {
  SharedDtor();
}

void PlayerFlagDataPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFlagDataPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFlagDataPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFlagDataPb_descriptor_;
}

const PlayerFlagDataPb& PlayerFlagDataPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

PlayerFlagDataPb* PlayerFlagDataPb::default_instance_ = NULL;

PlayerFlagDataPb* PlayerFlagDataPb::New() const {
  return new PlayerFlagDataPb;
}

void PlayerFlagDataPb::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFlagDataPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.PlayerFlagPb data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerFlagDataPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.PlayerFlagPb data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerFlagDataPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.PlayerFlagPb data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerFlagDataPb::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.PlayerFlagPb data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFlagDataPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFlagDataPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFlagDataPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFlagDataPb::MergeFrom(const PlayerFlagDataPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFlagDataPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFlagDataPb::CopyFrom(const PlayerFlagDataPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFlagDataPb::IsInitialized() const {
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerFlagDataPb::Swap(PlayerFlagDataPb* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFlagDataPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFlagDataPb_descriptor_;
  metadata.reflection = PlayerFlagDataPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainAttribute::kGuidFieldNumber;
const int TrainAttribute::kTrainAttributeFieldNumber;
const int TrainAttribute::kUnsaveTrainAttributeFieldNumber;
#endif  // !_MSC_VER

TrainAttribute::TrainAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainAttribute::InitAsDefaultInstance() {
}

TrainAttribute::TrainAttribute(const TrainAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainAttribute::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainAttribute::~TrainAttribute() {
  SharedDtor();
}

void TrainAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrainAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainAttribute_descriptor_;
}

const TrainAttribute& TrainAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TrainAttribute* TrainAttribute::default_instance_ = NULL;

TrainAttribute* TrainAttribute::New() const {
  return new TrainAttribute;
}

void TrainAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
  }
  train_attribute_.Clear();
  unsave_train_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_train_attribute;
        break;
      }
      
      // repeated .protocols.common.PBIntPair train_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_train_attribute;
        if (input->ExpectTag(26)) goto parse_unsave_train_attribute;
        break;
      }
      
      // repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unsave_train_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unsave_train_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unsave_train_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // repeated .protocols.common.PBIntPair train_attribute = 2;
  for (int i = 0; i < this->train_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->train_attribute(i), output);
  }
  
  // repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
  for (int i = 0; i < this->unsave_train_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unsave_train_attribute(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // repeated .protocols.common.PBIntPair train_attribute = 2;
  for (int i = 0; i < this->train_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->train_attribute(i), target);
  }
  
  // repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
  for (int i = 0; i < this->unsave_train_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unsave_train_attribute(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
  }
  // repeated .protocols.common.PBIntPair train_attribute = 2;
  total_size += 1 * this->train_attribute_size();
  for (int i = 0; i < this->train_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train_attribute(i));
  }
  
  // repeated .protocols.common.PBIntPair unsave_train_attribute = 3;
  total_size += 1 * this->unsave_train_attribute_size();
  for (int i = 0; i < this->unsave_train_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unsave_train_attribute(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainAttribute::MergeFrom(const TrainAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_attribute_.MergeFrom(from.train_attribute_);
  unsave_train_attribute_.MergeFrom(from.unsave_train_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainAttribute::CopyFrom(const TrainAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainAttribute::IsInitialized() const {
  
  for (int i = 0; i < train_attribute_size(); i++) {
    if (!this->train_attribute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < unsave_train_attribute_size(); i++) {
    if (!this->unsave_train_attribute(i).IsInitialized()) return false;
  }
  return true;
}

void TrainAttribute::Swap(TrainAttribute* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    train_attribute_.Swap(&other->train_attribute_);
    unsave_train_attribute_.Swap(&other->unsave_train_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainAttribute_descriptor_;
  metadata.reflection = TrainAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayerInfo::kGuidFieldNumber;
const int ArenaPlayerInfo::kNameFieldNumber;
const int ArenaPlayerInfo::kLevelFieldNumber;
const int ArenaPlayerInfo::kCurRankFieldNumber;
const int ArenaPlayerInfo::kHighestRankFieldNumber;
const int ArenaPlayerInfo::kTitileFieldNumber;
const int ArenaPlayerInfo::kMaxContWinsFieldNumber;
const int ArenaPlayerInfo::kCurContWinsFieldNumber;
const int ArenaPlayerInfo::kFightCapacityFieldNumber;
#endif  // !_MSC_VER

ArenaPlayerInfo::ArenaPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayerInfo::InitAsDefaultInstance() {
}

ArenaPlayerInfo::ArenaPlayerInfo(const ArenaPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  cur_rank_ = 0;
  highest_rank_ = 0;
  titile_ = 0;
  max_cont_wins_ = 0;
  cur_cont_wins_ = 0;
  fight_capacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayerInfo::~ArenaPlayerInfo() {
  SharedDtor();
}

void ArenaPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayerInfo_descriptor_;
}

const ArenaPlayerInfo& ArenaPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

ArenaPlayerInfo* ArenaPlayerInfo::default_instance_ = NULL;

ArenaPlayerInfo* ArenaPlayerInfo::New() const {
  return new ArenaPlayerInfo;
}

void ArenaPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    cur_rank_ = 0;
    highest_rank_ = 0;
    titile_ = 0;
    max_cont_wins_ = 0;
    cur_cont_wins_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fight_capacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_rank;
        break;
      }
      
      // required int32 cur_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_titile;
        break;
      }
      
      // optional int32 titile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titile_)));
          set_has_titile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_cont_wins;
        break;
      }
      
      // optional int32 max_cont_wins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cont_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cont_wins_)));
          set_has_max_cont_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_highest_rank;
        break;
      }
      
      // optional int32 highest_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highest_rank_)));
          set_has_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cur_cont_wins;
        break;
      }
      
      // optional int32 cur_cont_wins = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_cont_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_cont_wins_)));
          set_has_cur_cont_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fight_capacity;
        break;
      }
      
      // optional int32 fight_capacity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_capacity_)));
          set_has_fight_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // required int32 cur_rank = 4;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_rank(), output);
  }
  
  // optional int32 titile = 5;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->titile(), output);
  }
  
  // optional int32 max_cont_wins = 6;
  if (has_max_cont_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_cont_wins(), output);
  }
  
  // optional int32 highest_rank = 7;
  if (has_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->highest_rank(), output);
  }
  
  // optional int32 cur_cont_wins = 8;
  if (has_cur_cont_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cur_cont_wins(), output);
  }
  
  // optional int32 fight_capacity = 9;
  if (has_fight_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fight_capacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // required int32 cur_rank = 4;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_rank(), target);
  }
  
  // optional int32 titile = 5;
  if (has_titile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->titile(), target);
  }
  
  // optional int32 max_cont_wins = 6;
  if (has_max_cont_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_cont_wins(), target);
  }
  
  // optional int32 highest_rank = 7;
  if (has_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->highest_rank(), target);
  }
  
  // optional int32 cur_cont_wins = 8;
  if (has_cur_cont_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cur_cont_wins(), target);
  }
  
  // optional int32 fight_capacity = 9;
  if (has_fight_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fight_capacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 cur_rank = 4;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_rank());
    }
    
    // optional int32 highest_rank = 7;
    if (has_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->highest_rank());
    }
    
    // optional int32 titile = 5;
    if (has_titile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titile());
    }
    
    // optional int32 max_cont_wins = 6;
    if (has_max_cont_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cont_wins());
    }
    
    // optional int32 cur_cont_wins = 8;
    if (has_cur_cont_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_cont_wins());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fight_capacity = 9;
    if (has_fight_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight_capacity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaPlayerInfo::MergeFrom(const ArenaPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_highest_rank()) {
      set_highest_rank(from.highest_rank());
    }
    if (from.has_titile()) {
      set_titile(from.titile());
    }
    if (from.has_max_cont_wins()) {
      set_max_cont_wins(from.max_cont_wins());
    }
    if (from.has_cur_cont_wins()) {
      set_cur_cont_wins(from.cur_cont_wins());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fight_capacity()) {
      set_fight_capacity(from.fight_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaPlayerInfo::CopyFrom(const ArenaPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ArenaPlayerInfo::Swap(ArenaPlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(highest_rank_, other->highest_rank_);
    std::swap(titile_, other->titile_);
    std::swap(max_cont_wins_, other->max_cont_wins_);
    std::swap(cur_cont_wins_, other->cur_cont_wins_);
    std::swap(fight_capacity_, other->fight_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayerInfo_descriptor_;
  metadata.reflection = ArenaPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureBox::kTypeFieldNumber;
const int TreasureBox::kItemInfoFieldNumber;
#endif  // !_MSC_VER

TreasureBox::TreasureBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreasureBox::InitAsDefaultInstance() {
}

TreasureBox::TreasureBox(const TreasureBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreasureBox::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureBox::~TreasureBox() {
  SharedDtor();
}

void TreasureBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureBox_descriptor_;
}

const TreasureBox& TreasureBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

TreasureBox* TreasureBox::default_instance_ = NULL;

TreasureBox* TreasureBox::New() const {
  return new TreasureBox;
}

void TreasureBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  item_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        break;
      }
      
      // repeated .protocols.common.ItemInfo item_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreasureBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreasureBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .protocols.common.ItemInfo item_info = 2;
  for (int i = 0; i < this->item_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreasureBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .protocols.common.ItemInfo item_info = 2;
  total_size += 1 * this->item_info_size();
  for (int i = 0; i < this->item_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureBox::MergeFrom(const TreasureBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_info_.MergeFrom(from.item_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureBox::CopyFrom(const TreasureBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < item_info_size(); i++) {
    if (!this->item_info(i).IsInitialized()) return false;
  }
  return true;
}

void TreasureBox::Swap(TreasureBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    item_info_.Swap(&other->item_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureBox_descriptor_;
  metadata.reflection = TreasureBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsedName::kNameFieldNumber;
const int UsedName::kTypeFieldNumber;
const int UsedName::kServerIdFieldNumber;
const int UsedName::kStatusFieldNumber;
#endif  // !_MSC_VER

UsedName::UsedName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsedName::InitAsDefaultInstance() {
}

UsedName::UsedName(const UsedName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsedName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  server_id_ = 0;
  status_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsedName::~UsedName() {
  SharedDtor();
}

void UsedName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UsedName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsedName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsedName_descriptor_;
}

const UsedName& UsedName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UsedName* UsedName::default_instance_ = NULL;

UsedName* UsedName::New() const {
  return new UsedName;
}

void UsedName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    server_id_ = 0;
    status_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsedName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_id;
        break;
      }
      
      // optional int32 server_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // optional int64 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsedName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_id(), output);
  }
  
  // optional int64 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsedName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 server_id = 3;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_id(), target);
  }
  
  // optional int64 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsedName::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 server_id = 3;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }
    
    // optional int64 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsedName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsedName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsedName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsedName::MergeFrom(const UsedName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsedName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsedName::CopyFrom(const UsedName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedName::IsInitialized() const {
  
  return true;
}

void UsedName::Swap(UsedName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(server_id_, other->server_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsedName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsedName_descriptor_;
  metadata.reflection = UsedName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsedNameData::kUsedNameFieldNumber;
#endif  // !_MSC_VER

UsedNameData::UsedNameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsedNameData::InitAsDefaultInstance() {
}

UsedNameData::UsedNameData(const UsedNameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsedNameData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsedNameData::~UsedNameData() {
  SharedDtor();
}

void UsedNameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UsedNameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsedNameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsedNameData_descriptor_;
}

const UsedNameData& UsedNameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UsedNameData* UsedNameData::default_instance_ = NULL;

UsedNameData* UsedNameData::New() const {
  return new UsedNameData;
}

void UsedNameData::Clear() {
  used_name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsedNameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.UsedName used_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_used_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_used_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsedNameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.UsedName used_name = 1;
  for (int i = 0; i < this->used_name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->used_name(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsedNameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.UsedName used_name = 1;
  for (int i = 0; i < this->used_name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->used_name(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsedNameData::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.UsedName used_name = 1;
  total_size += 1 * this->used_name_size();
  for (int i = 0; i < this->used_name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->used_name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsedNameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsedNameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsedNameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsedNameData::MergeFrom(const UsedNameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  used_name_.MergeFrom(from.used_name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsedNameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsedNameData::CopyFrom(const UsedNameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsedNameData::IsInitialized() const {
  
  return true;
}

void UsedNameData::Swap(UsedNameData* other) {
  if (other != this) {
    used_name_.Swap(&other->used_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsedNameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsedNameData_descriptor_;
  metadata.reflection = UsedNameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnuseNameMsg::kNameFieldNumber;
#endif  // !_MSC_VER

UnuseNameMsg::UnuseNameMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnuseNameMsg::InitAsDefaultInstance() {
  name_ = const_cast< ::protocols::common::UsedName*>(&::protocols::common::UsedName::default_instance());
}

UnuseNameMsg::UnuseNameMsg(const UnuseNameMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnuseNameMsg::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnuseNameMsg::~UnuseNameMsg() {
  SharedDtor();
}

void UnuseNameMsg::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void UnuseNameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnuseNameMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnuseNameMsg_descriptor_;
}

const UnuseNameMsg& UnuseNameMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

UnuseNameMsg* UnuseNameMsg::default_instance_ = NULL;

UnuseNameMsg* UnuseNameMsg::New() const {
  return new UnuseNameMsg;
}

void UnuseNameMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::protocols::common::UsedName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnuseNameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocols.common.UsedName name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnuseNameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocols.common.UsedName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnuseNameMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocols.common.UsedName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnuseNameMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocols.common.UsedName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnuseNameMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnuseNameMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnuseNameMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnuseNameMsg::MergeFrom(const UnuseNameMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::protocols::common::UsedName::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnuseNameMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnuseNameMsg::CopyFrom(const UnuseNameMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnuseNameMsg::IsInitialized() const {
  
  return true;
}

void UnuseNameMsg::Swap(UnuseNameMsg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnuseNameMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnuseNameMsg_descriptor_;
  metadata.reflection = UnuseNameMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HideNpcData::kNpcIdFieldNumber;
const int HideNpcData::kIsDisplayFieldNumber;
const int HideNpcData::kMapIdFieldNumber;
const int HideNpcData::kXFieldNumber;
const int HideNpcData::kYFieldNumber;
const int HideNpcData::kRotateFieldNumber;
#endif  // !_MSC_VER

HideNpcData::HideNpcData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HideNpcData::InitAsDefaultInstance() {
}

HideNpcData::HideNpcData(const HideNpcData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HideNpcData::SharedCtor() {
  _cached_size_ = 0;
  npc_id_ = 0;
  is_display_ = false;
  map_id_ = 0;
  x_ = 0;
  y_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HideNpcData::~HideNpcData() {
  SharedDtor();
}

void HideNpcData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HideNpcData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideNpcData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HideNpcData_descriptor_;
}

const HideNpcData& HideNpcData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

HideNpcData* HideNpcData::default_instance_ = NULL;

HideNpcData* HideNpcData::New() const {
  return new HideNpcData;
}

void HideNpcData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npc_id_ = 0;
    is_display_ = false;
    map_id_ = 0;
    x_ = 0;
    y_ = 0;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HideNpcData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npc_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_display;
        break;
      }
      
      // optional bool is_display = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_display_)));
          set_has_is_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }
      
      // optional int32 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_x;
        break;
      }
      
      // optional int32 x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_y;
        break;
      }
      
      // optional int32 y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rotate;
        break;
      }
      
      // optional int32 rotate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HideNpcData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npc_id(), output);
  }
  
  // optional bool is_display = 2 [default = false];
  if (has_is_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_display(), output);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_id(), output);
  }
  
  // optional int32 x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }
  
  // optional int32 y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }
  
  // optional int32 rotate = 6;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rotate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HideNpcData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 npc_id = 1;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npc_id(), target);
  }
  
  // optional bool is_display = 2 [default = false];
  if (has_is_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_display(), target);
  }
  
  // optional int32 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_id(), target);
  }
  
  // optional int32 x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x(), target);
  }
  
  // optional int32 y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }
  
  // optional int32 rotate = 6;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rotate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HideNpcData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npc_id = 1;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }
    
    // optional bool is_display = 2 [default = false];
    if (has_is_display()) {
      total_size += 1 + 1;
    }
    
    // optional int32 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 rotate = 6;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideNpcData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HideNpcData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HideNpcData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HideNpcData::MergeFrom(const HideNpcData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_is_display()) {
      set_is_display(from.is_display());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HideNpcData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideNpcData::CopyFrom(const HideNpcData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideNpcData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HideNpcData::Swap(HideNpcData* other) {
  if (other != this) {
    std::swap(npc_id_, other->npc_id_);
    std::swap(is_display_, other->is_display_);
    std::swap(map_id_, other->map_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HideNpcData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HideNpcData_descriptor_;
  metadata.reflection = HideNpcData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HideNpcPb::kNpcIdsFieldNumber;
const int HideNpcPb::kHideDatasFieldNumber;
#endif  // !_MSC_VER

HideNpcPb::HideNpcPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HideNpcPb::InitAsDefaultInstance() {
}

HideNpcPb::HideNpcPb(const HideNpcPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HideNpcPb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HideNpcPb::~HideNpcPb() {
  SharedDtor();
}

void HideNpcPb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HideNpcPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideNpcPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HideNpcPb_descriptor_;
}

const HideNpcPb& HideNpcPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

HideNpcPb* HideNpcPb::default_instance_ = NULL;

HideNpcPb* HideNpcPb::New() const {
  return new HideNpcPb;
}

void HideNpcPb::Clear() {
  npc_ids_.Clear();
  hide_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HideNpcPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 npc_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_npc_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_npc_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_npc_ids;
        if (input->ExpectTag(18)) goto parse_hide_datas;
        break;
      }
      
      // repeated .protocols.common.HideNpcData hide_datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hide_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hide_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hide_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HideNpcPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 npc_ids = 1;
  for (int i = 0; i < this->npc_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->npc_ids(i), output);
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  for (int i = 0; i < this->hide_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hide_datas(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HideNpcPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 npc_ids = 1;
  for (int i = 0; i < this->npc_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->npc_ids(i), target);
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  for (int i = 0; i < this->hide_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hide_datas(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HideNpcPb::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 npc_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->npc_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->npc_ids(i));
    }
    total_size += 1 * this->npc_ids_size() + data_size;
  }
  
  // repeated .protocols.common.HideNpcData hide_datas = 2;
  total_size += 1 * this->hide_datas_size();
  for (int i = 0; i < this->hide_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hide_datas(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideNpcPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HideNpcPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HideNpcPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HideNpcPb::MergeFrom(const HideNpcPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_ids_.MergeFrom(from.npc_ids_);
  hide_datas_.MergeFrom(from.hide_datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HideNpcPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideNpcPb::CopyFrom(const HideNpcPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideNpcPb::IsInitialized() const {
  
  for (int i = 0; i < hide_datas_size(); i++) {
    if (!this->hide_datas(i).IsInitialized()) return false;
  }
  return true;
}

void HideNpcPb::Swap(HideNpcPb* other) {
  if (other != this) {
    npc_ids_.Swap(&other->npc_ids_);
    hide_datas_.Swap(&other->hide_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HideNpcPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HideNpcPb_descriptor_;
  metadata.reflection = HideNpcPb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcPosition::kMapIdFieldNumber;
const int NpcPosition::kXFieldNumber;
const int NpcPosition::kYFieldNumber;
const int NpcPosition::kRotateFieldNumber;
#endif  // !_MSC_VER

NpcPosition::NpcPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcPosition::InitAsDefaultInstance() {
}

NpcPosition::NpcPosition(const NpcPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcPosition::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0;
  x_ = 0;
  y_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcPosition::~NpcPosition() {
  SharedDtor();
}

void NpcPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcPosition_descriptor_;
}

const NpcPosition& NpcPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

NpcPosition* NpcPosition::default_instance_ = NULL;

NpcPosition* NpcPosition::New() const {
  return new NpcPosition;
}

void NpcPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0;
    x_ = 0;
    y_ = 0;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }
      
      // optional int32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }
      
      // optional int32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rotate;
        break;
      }
      
      // optional int32 rotate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_id(), output);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }
  
  // optional int32 rotate = 4;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rotate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_id(), target);
  }
  
  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }
  
  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }
  
  // optional int32 rotate = 4;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rotate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }
    
    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 rotate = 4;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcPosition::MergeFrom(const NpcPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcPosition::CopyFrom(const NpcPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcPosition::IsInitialized() const {
  
  return true;
}

void NpcPosition::Swap(NpcPosition* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcPosition_descriptor_;
  metadata.reflection = NpcPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenedFunctionNotify::kOpenedFunctionFieldNumber;
#endif  // !_MSC_VER

OpenedFunctionNotify::OpenedFunctionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenedFunctionNotify::InitAsDefaultInstance() {
}

OpenedFunctionNotify::OpenedFunctionNotify(const OpenedFunctionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenedFunctionNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenedFunctionNotify::~OpenedFunctionNotify() {
  SharedDtor();
}

void OpenedFunctionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenedFunctionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenedFunctionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenedFunctionNotify_descriptor_;
}

const OpenedFunctionNotify& OpenedFunctionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

OpenedFunctionNotify* OpenedFunctionNotify::default_instance_ = NULL;

OpenedFunctionNotify* OpenedFunctionNotify::New() const {
  return new OpenedFunctionNotify;
}

void OpenedFunctionNotify::Clear() {
  opened_function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenedFunctionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 opened_function = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened_function:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_opened_function())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opened_function())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_opened_function;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenedFunctionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 opened_function = 1;
  for (int i = 0; i < this->opened_function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->opened_function(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenedFunctionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 opened_function = 1;
  for (int i = 0; i < this->opened_function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->opened_function(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenedFunctionNotify::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 opened_function = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->opened_function_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opened_function(i));
    }
    total_size += 1 * this->opened_function_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenedFunctionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenedFunctionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenedFunctionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenedFunctionNotify::MergeFrom(const OpenedFunctionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  opened_function_.MergeFrom(from.opened_function_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenedFunctionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenedFunctionNotify::CopyFrom(const OpenedFunctionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenedFunctionNotify::IsInitialized() const {
  
  return true;
}

void OpenedFunctionNotify::Swap(OpenedFunctionNotify* other) {
  if (other != this) {
    opened_function_.Swap(&other->opened_function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenedFunctionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenedFunctionNotify_descriptor_;
  metadata.reflection = OpenedFunctionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBuddyTemplateAttributeRequest::kTidFieldNumber;
const int GetBuddyTemplateAttributeRequest::kLevelFieldNumber;
#endif  // !_MSC_VER

GetBuddyTemplateAttributeRequest::GetBuddyTemplateAttributeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuddyTemplateAttributeRequest::InitAsDefaultInstance() {
}

GetBuddyTemplateAttributeRequest::GetBuddyTemplateAttributeRequest(const GetBuddyTemplateAttributeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeRequest::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuddyTemplateAttributeRequest::~GetBuddyTemplateAttributeRequest() {
  SharedDtor();
}

void GetBuddyTemplateAttributeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuddyTemplateAttributeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuddyTemplateAttributeRequest_descriptor_;
}

const GetBuddyTemplateAttributeRequest& GetBuddyTemplateAttributeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GetBuddyTemplateAttributeRequest* GetBuddyTemplateAttributeRequest::default_instance_ = NULL;

GetBuddyTemplateAttributeRequest* GetBuddyTemplateAttributeRequest::New() const {
  return new GetBuddyTemplateAttributeRequest;
}

void GetBuddyTemplateAttributeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tid_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuddyTemplateAttributeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBuddyTemplateAttributeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuddyTemplateAttributeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuddyTemplateAttributeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuddyTemplateAttributeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuddyTemplateAttributeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuddyTemplateAttributeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuddyTemplateAttributeRequest::MergeFrom(const GetBuddyTemplateAttributeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuddyTemplateAttributeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeRequest::CopyFrom(const GetBuddyTemplateAttributeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuddyTemplateAttributeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBuddyTemplateAttributeRequest::Swap(GetBuddyTemplateAttributeRequest* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuddyTemplateAttributeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuddyTemplateAttributeRequest_descriptor_;
  metadata.reflection = GetBuddyTemplateAttributeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBuddyTemplateAttributeResponse::kErrorCodeFieldNumber;
const int GetBuddyTemplateAttributeResponse::kBareAttrListFieldNumber;
#endif  // !_MSC_VER

GetBuddyTemplateAttributeResponse::GetBuddyTemplateAttributeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBuddyTemplateAttributeResponse::InitAsDefaultInstance() {
}

GetBuddyTemplateAttributeResponse::GetBuddyTemplateAttributeResponse(const GetBuddyTemplateAttributeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBuddyTemplateAttributeResponse::~GetBuddyTemplateAttributeResponse() {
  SharedDtor();
}

void GetBuddyTemplateAttributeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetBuddyTemplateAttributeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBuddyTemplateAttributeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBuddyTemplateAttributeResponse_descriptor_;
}

const GetBuddyTemplateAttributeResponse& GetBuddyTemplateAttributeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

GetBuddyTemplateAttributeResponse* GetBuddyTemplateAttributeResponse::default_instance_ = NULL;

GetBuddyTemplateAttributeResponse* GetBuddyTemplateAttributeResponse::New() const {
  return new GetBuddyTemplateAttributeResponse;
}

void GetBuddyTemplateAttributeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  bare_attr_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBuddyTemplateAttributeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bare_attr_list;
        break;
      }
      
      // repeated .protocols.common.AttributeData bare_attr_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bare_attr_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bare_attr_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bare_attr_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBuddyTemplateAttributeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bare_attr_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBuddyTemplateAttributeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bare_attr_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBuddyTemplateAttributeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
  }
  // repeated .protocols.common.AttributeData bare_attr_list = 2;
  total_size += 1 * this->bare_attr_list_size();
  for (int i = 0; i < this->bare_attr_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bare_attr_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBuddyTemplateAttributeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBuddyTemplateAttributeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBuddyTemplateAttributeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBuddyTemplateAttributeResponse::MergeFrom(const GetBuddyTemplateAttributeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  bare_attr_list_.MergeFrom(from.bare_attr_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBuddyTemplateAttributeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBuddyTemplateAttributeResponse::CopyFrom(const GetBuddyTemplateAttributeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBuddyTemplateAttributeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBuddyTemplateAttributeResponse::Swap(GetBuddyTemplateAttributeResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    bare_attr_list_.Swap(&other->bare_attr_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBuddyTemplateAttributeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBuddyTemplateAttributeResponse_descriptor_;
  metadata.reflection = GetBuddyTemplateAttributeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YouLiMapData_GridData::kGridIndexFieldNumber;
const int YouLiMapData_GridData::kGridTypeFieldNumber;
#endif  // !_MSC_VER

YouLiMapData_GridData::YouLiMapData_GridData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouLiMapData_GridData::InitAsDefaultInstance() {
}

YouLiMapData_GridData::YouLiMapData_GridData(const YouLiMapData_GridData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouLiMapData_GridData::SharedCtor() {
  _cached_size_ = 0;
  grid_index_ = 0;
  grid_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouLiMapData_GridData::~YouLiMapData_GridData() {
  SharedDtor();
}

void YouLiMapData_GridData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouLiMapData_GridData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouLiMapData_GridData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouLiMapData_GridData_descriptor_;
}

const YouLiMapData_GridData& YouLiMapData_GridData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YouLiMapData_GridData* YouLiMapData_GridData::default_instance_ = NULL;

YouLiMapData_GridData* YouLiMapData_GridData::New() const {
  return new YouLiMapData_GridData;
}

void YouLiMapData_GridData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grid_index_ = 0;
    grid_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouLiMapData_GridData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grid_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_index_)));
          set_has_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grid_type;
        break;
      }
      
      // required int32 grid_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grid_type_)));
          set_has_grid_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouLiMapData_GridData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 grid_index = 1;
  if (has_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grid_index(), output);
  }
  
  // required int32 grid_type = 2;
  if (has_grid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grid_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouLiMapData_GridData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 grid_index = 1;
  if (has_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grid_index(), target);
  }
  
  // required int32 grid_type = 2;
  if (has_grid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grid_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouLiMapData_GridData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grid_index = 1;
    if (has_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_index());
    }
    
    // required int32 grid_type = 2;
    if (has_grid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grid_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouLiMapData_GridData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouLiMapData_GridData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouLiMapData_GridData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouLiMapData_GridData::MergeFrom(const YouLiMapData_GridData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_index()) {
      set_grid_index(from.grid_index());
    }
    if (from.has_grid_type()) {
      set_grid_type(from.grid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouLiMapData_GridData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouLiMapData_GridData::CopyFrom(const YouLiMapData_GridData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouLiMapData_GridData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void YouLiMapData_GridData::Swap(YouLiMapData_GridData* other) {
  if (other != this) {
    std::swap(grid_index_, other->grid_index_);
    std::swap(grid_type_, other->grid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouLiMapData_GridData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouLiMapData_GridData_descriptor_;
  metadata.reflection = YouLiMapData_GridData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int YouLiMapData::kGridDataFieldNumber;
const int YouLiMapData::kCurGridIndexFieldNumber;
const int YouLiMapData::kYouliNumFieldNumber;
const int YouLiMapData::kMaxYouliNumFieldNumber;
#endif  // !_MSC_VER

YouLiMapData::YouLiMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YouLiMapData::InitAsDefaultInstance() {
}

YouLiMapData::YouLiMapData(const YouLiMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YouLiMapData::SharedCtor() {
  _cached_size_ = 0;
  cur_grid_index_ = 0;
  youli_num_ = 0;
  max_youli_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouLiMapData::~YouLiMapData() {
  SharedDtor();
}

void YouLiMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YouLiMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YouLiMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YouLiMapData_descriptor_;
}

const YouLiMapData& YouLiMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YouLiMapData* YouLiMapData::default_instance_ = NULL;

YouLiMapData* YouLiMapData::New() const {
  return new YouLiMapData;
}

void YouLiMapData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_grid_index_ = 0;
    youli_num_ = 0;
    max_youli_num_ = 0;
  }
  grid_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YouLiMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grid_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grid_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grid_data;
        if (input->ExpectTag(16)) goto parse_cur_grid_index;
        break;
      }
      
      // optional int32 cur_grid_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grid_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_grid_index_)));
          set_has_cur_grid_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_youli_num;
        break;
      }
      
      // optional int32 youli_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_youli_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &youli_num_)));
          set_has_youli_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_youli_num;
        break;
      }
      
      // optional int32 max_youli_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_youli_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_youli_num_)));
          set_has_max_youli_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YouLiMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
  for (int i = 0; i < this->grid_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_data(i), output);
  }
  
  // optional int32 cur_grid_index = 2;
  if (has_cur_grid_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_grid_index(), output);
  }
  
  // optional int32 youli_num = 3;
  if (has_youli_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->youli_num(), output);
  }
  
  // optional int32 max_youli_num = 4;
  if (has_max_youli_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_youli_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YouLiMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
  for (int i = 0; i < this->grid_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grid_data(i), target);
  }
  
  // optional int32 cur_grid_index = 2;
  if (has_cur_grid_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_grid_index(), target);
  }
  
  // optional int32 youli_num = 3;
  if (has_youli_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->youli_num(), target);
  }
  
  // optional int32 max_youli_num = 4;
  if (has_max_youli_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_youli_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YouLiMapData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 cur_grid_index = 2;
    if (has_cur_grid_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_grid_index());
    }
    
    // optional int32 youli_num = 3;
    if (has_youli_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->youli_num());
    }
    
    // optional int32 max_youli_num = 4;
    if (has_max_youli_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_youli_num());
    }
    
  }
  // repeated .protocols.common.YouLiMapData.GridData grid_data = 1;
  total_size += 1 * this->grid_data_size();
  for (int i = 0; i < this->grid_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouLiMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YouLiMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YouLiMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YouLiMapData::MergeFrom(const YouLiMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  grid_data_.MergeFrom(from.grid_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_grid_index()) {
      set_cur_grid_index(from.cur_grid_index());
    }
    if (from.has_youli_num()) {
      set_youli_num(from.youli_num());
    }
    if (from.has_max_youli_num()) {
      set_max_youli_num(from.max_youli_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YouLiMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YouLiMapData::CopyFrom(const YouLiMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouLiMapData::IsInitialized() const {
  
  for (int i = 0; i < grid_data_size(); i++) {
    if (!this->grid_data(i).IsInitialized()) return false;
  }
  return true;
}

void YouLiMapData::Swap(YouLiMapData* other) {
  if (other != this) {
    grid_data_.Swap(&other->grid_data_);
    std::swap(cur_grid_index_, other->cur_grid_index_);
    std::swap(youli_num_, other->youli_num_);
    std::swap(max_youli_num_, other->max_youli_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YouLiMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YouLiMapData_descriptor_;
  metadata.reflection = YouLiMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingComboStatus_ComboMember::kTypeFieldNumber;
const int YinglingComboStatus_ComboMember::kIdFieldNumber;
const int YinglingComboStatus_ComboMember::kStatusFieldNumber;
#endif  // !_MSC_VER

YinglingComboStatus_ComboMember::YinglingComboStatus_ComboMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingComboStatus_ComboMember::InitAsDefaultInstance() {
}

YinglingComboStatus_ComboMember::YinglingComboStatus_ComboMember(const YinglingComboStatus_ComboMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingComboStatus_ComboMember::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingComboStatus_ComboMember::~YinglingComboStatus_ComboMember() {
  SharedDtor();
}

void YinglingComboStatus_ComboMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingComboStatus_ComboMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingComboStatus_ComboMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingComboStatus_ComboMember_descriptor_;
}

const YinglingComboStatus_ComboMember& YinglingComboStatus_ComboMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingComboStatus_ComboMember* YinglingComboStatus_ComboMember::default_instance_ = NULL;

YinglingComboStatus_ComboMember* YinglingComboStatus_ComboMember::New() const {
  return new YinglingComboStatus_ComboMember;
}

void YinglingComboStatus_ComboMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingComboStatus_ComboMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingComboStatus_ComboMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingComboStatus_ComboMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingComboStatus_ComboMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingComboStatus_ComboMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingComboStatus_ComboMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingComboStatus_ComboMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingComboStatus_ComboMember::MergeFrom(const YinglingComboStatus_ComboMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingComboStatus_ComboMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingComboStatus_ComboMember::CopyFrom(const YinglingComboStatus_ComboMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingComboStatus_ComboMember::IsInitialized() const {
  
  return true;
}

void YinglingComboStatus_ComboMember::Swap(YinglingComboStatus_ComboMember* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingComboStatus_ComboMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingComboStatus_ComboMember_descriptor_;
  metadata.reflection = YinglingComboStatus_ComboMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingComboStatus_Combo::kComboIdFieldNumber;
const int YinglingComboStatus_Combo::kComboLevelFieldNumber;
const int YinglingComboStatus_Combo::kComboStatusFieldNumber;
const int YinglingComboStatus_Combo::kMemberListFieldNumber;
#endif  // !_MSC_VER

YinglingComboStatus_Combo::YinglingComboStatus_Combo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingComboStatus_Combo::InitAsDefaultInstance() {
}

YinglingComboStatus_Combo::YinglingComboStatus_Combo(const YinglingComboStatus_Combo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingComboStatus_Combo::SharedCtor() {
  _cached_size_ = 0;
  combo_id_ = 0;
  combo_level_ = 0;
  combo_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingComboStatus_Combo::~YinglingComboStatus_Combo() {
  SharedDtor();
}

void YinglingComboStatus_Combo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingComboStatus_Combo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingComboStatus_Combo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingComboStatus_Combo_descriptor_;
}

const YinglingComboStatus_Combo& YinglingComboStatus_Combo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingComboStatus_Combo* YinglingComboStatus_Combo::default_instance_ = NULL;

YinglingComboStatus_Combo* YinglingComboStatus_Combo::New() const {
  return new YinglingComboStatus_Combo;
}

void YinglingComboStatus_Combo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combo_id_ = 0;
    combo_level_ = 0;
    combo_status_ = 0;
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingComboStatus_Combo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 combo_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_id_)));
          set_has_combo_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combo_level;
        break;
      }
      
      // optional int32 combo_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combo_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_level_)));
          set_has_combo_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combo_status;
        break;
      }
      
      // optional int32 combo_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combo_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combo_status_)));
          set_has_combo_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        break;
      }
      
      // repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingComboStatus_Combo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 combo_id = 1;
  if (has_combo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->combo_id(), output);
  }
  
  // optional int32 combo_level = 2;
  if (has_combo_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combo_level(), output);
  }
  
  // optional int32 combo_status = 3;
  if (has_combo_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->combo_status(), output);
  }
  
  // repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->member_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingComboStatus_Combo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 combo_id = 1;
  if (has_combo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->combo_id(), target);
  }
  
  // optional int32 combo_level = 2;
  if (has_combo_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->combo_level(), target);
  }
  
  // optional int32 combo_status = 3;
  if (has_combo_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->combo_status(), target);
  }
  
  // repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->member_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingComboStatus_Combo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 combo_id = 1;
    if (has_combo_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo_id());
    }
    
    // optional int32 combo_level = 2;
    if (has_combo_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo_level());
    }
    
    // optional int32 combo_status = 3;
    if (has_combo_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combo_status());
    }
    
  }
  // repeated .protocols.common.YinglingComboStatus_ComboMember member_list = 4;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingComboStatus_Combo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingComboStatus_Combo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingComboStatus_Combo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingComboStatus_Combo::MergeFrom(const YinglingComboStatus_Combo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combo_id()) {
      set_combo_id(from.combo_id());
    }
    if (from.has_combo_level()) {
      set_combo_level(from.combo_level());
    }
    if (from.has_combo_status()) {
      set_combo_status(from.combo_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingComboStatus_Combo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingComboStatus_Combo::CopyFrom(const YinglingComboStatus_Combo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingComboStatus_Combo::IsInitialized() const {
  
  return true;
}

void YinglingComboStatus_Combo::Swap(YinglingComboStatus_Combo* other) {
  if (other != this) {
    std::swap(combo_id_, other->combo_id_);
    std::swap(combo_level_, other->combo_level_);
    std::swap(combo_status_, other->combo_status_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingComboStatus_Combo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingComboStatus_Combo_descriptor_;
  metadata.reflection = YinglingComboStatus_Combo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingComboStatus::kComboListFieldNumber;
#endif  // !_MSC_VER

YinglingComboStatus::YinglingComboStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingComboStatus::InitAsDefaultInstance() {
}

YinglingComboStatus::YinglingComboStatus(const YinglingComboStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingComboStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingComboStatus::~YinglingComboStatus() {
  SharedDtor();
}

void YinglingComboStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingComboStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingComboStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingComboStatus_descriptor_;
}

const YinglingComboStatus& YinglingComboStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingComboStatus* YinglingComboStatus::default_instance_ = NULL;

YinglingComboStatus* YinglingComboStatus::New() const {
  return new YinglingComboStatus;
}

void YinglingComboStatus::Clear() {
  combo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingComboStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combo_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combo_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingComboStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
  for (int i = 0; i < this->combo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combo_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingComboStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
  for (int i = 0; i < this->combo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combo_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingComboStatus::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.YinglingComboStatus_Combo combo_list = 1;
  total_size += 1 * this->combo_list_size();
  for (int i = 0; i < this->combo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combo_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingComboStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingComboStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingComboStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingComboStatus::MergeFrom(const YinglingComboStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  combo_list_.MergeFrom(from.combo_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingComboStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingComboStatus::CopyFrom(const YinglingComboStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingComboStatus::IsInitialized() const {
  
  return true;
}

void YinglingComboStatus::Swap(YinglingComboStatus* other) {
  if (other != this) {
    combo_list_.Swap(&other->combo_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingComboStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingComboStatus_descriptor_;
  metadata.reflection = YinglingComboStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YinglingTrainStatus::kTrainAttributeListFieldNumber;
#endif  // !_MSC_VER

YinglingTrainStatus::YinglingTrainStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YinglingTrainStatus::InitAsDefaultInstance() {
}

YinglingTrainStatus::YinglingTrainStatus(const YinglingTrainStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YinglingTrainStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YinglingTrainStatus::~YinglingTrainStatus() {
  SharedDtor();
}

void YinglingTrainStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YinglingTrainStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YinglingTrainStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YinglingTrainStatus_descriptor_;
}

const YinglingTrainStatus& YinglingTrainStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_game_5fcommon_2eproto();  return *default_instance_;
}

YinglingTrainStatus* YinglingTrainStatus::default_instance_ = NULL;

YinglingTrainStatus* YinglingTrainStatus::New() const {
  return new YinglingTrainStatus;
}

void YinglingTrainStatus::Clear() {
  train_attribute_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YinglingTrainStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocols.common.TrainAttribute train_attribute_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_attribute_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train_attribute_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_train_attribute_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YinglingTrainStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protocols.common.TrainAttribute train_attribute_list = 1;
  for (int i = 0; i < this->train_attribute_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->train_attribute_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YinglingTrainStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protocols.common.TrainAttribute train_attribute_list = 1;
  for (int i = 0; i < this->train_attribute_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->train_attribute_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YinglingTrainStatus::ByteSize() const {
  int total_size = 0;
  
  // repeated .protocols.common.TrainAttribute train_attribute_list = 1;
  total_size += 1 * this->train_attribute_list_size();
  for (int i = 0; i < this->train_attribute_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train_attribute_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YinglingTrainStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YinglingTrainStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YinglingTrainStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YinglingTrainStatus::MergeFrom(const YinglingTrainStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_attribute_list_.MergeFrom(from.train_attribute_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YinglingTrainStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YinglingTrainStatus::CopyFrom(const YinglingTrainStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YinglingTrainStatus::IsInitialized() const {
  
  for (int i = 0; i < train_attribute_list_size(); i++) {
    if (!this->train_attribute_list(i).IsInitialized()) return false;
  }
  return true;
}

void YinglingTrainStatus::Swap(YinglingTrainStatus* other) {
  if (other != this) {
    train_attribute_list_.Swap(&other->train_attribute_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YinglingTrainStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YinglingTrainStatus_descriptor_;
  metadata.reflection = YinglingTrainStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

// @@protoc_insertion_point(global_scope)
