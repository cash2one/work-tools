// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_code.proto

#ifndef PROTOBUF_error_5fcode_2eproto__INCLUDED
#define PROTOBUF_error_5fcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace protocols {
namespace common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_error_5fcode_2eproto();
void protobuf_AssignDesc_error_5fcode_2eproto();
void protobuf_ShutdownFile_error_5fcode_2eproto();


enum ErrorCode {
  EC_SUCCESS = 0,
  EC_INVALID_REQUEST = 1,
  EC_ACTION_DENY = 2,
  EC_DATA_ERROR = 3,
  EC_INVALID_ARGUMENT = 4,
  EC_DISCONNECT_BY_ANOTHER_LOGIN = 5,
  EC_SERVER_IS_SHUT_DOWN = 6,
  EC_PLAYER_BANNED = 7,
  EC_USER_ID_EXHAUSED = 8,
  EC_INVALID_NAME = 9,
  EC_NAME_LENGTH_TOO_SHORT = 10,
  EC_NAME_LENGTH_TOO_LONG = 33,
  EC_NAME_WITH_INVALID_CHARACTER = 11,
  EC_NAME_EXIST = 12,
  EC_CONDITION_NOT_SATISFIED = 13,
  EC_PROFESSION_INVALID = 14,
  EC_NO_ENOUGH_MONEY = 15,
  EC_NO_ENOUGH_DIAMOND = 16,
  EC_LEVEL_LIMIT = 17,
  EC_NUMBER_LIMIT = 18,
  EC_TIME_NOT_SATISFIED = 19,
  EC_PLAYER_EXIST = 20,
  EC_PLAYER_NOT_EXIST = 21,
  EC_STILL_COOL_DOWN = 22,
  EC_CONFIG_NOT_FOUND = 23,
  EC_DAILY_GIFT_ACCEPTED = 24,
  EC_PLAYER_OFFLINE = 25,
  EC_CREATE_PLAYER_NAME_USED = 26,
  EC_PLAYER_FLAG_ALREAD_SET = 27,
  EC_NPC_NOT_FOUND = 28,
  EC_ENTER_INSTANCE_COUNT_LIMIT = 29,
  EC_SERVER_ERROR = 30,
  EC_FUNCTION_LIMIT = 31,
  EC_NO_ENOUGH_COUPON = 32,
  EC_NO_ENOUGH_MONSTER_EXP_BUFF_TIMES_LEFT = 34,
  EC_DAILY_LIMIT_CANT_FIND = 35,
  EC_DAILY_HUNT_LIMIT_CANT_FIND = 36,
  EC_CANT_FIND_FIGHT_DATA = 37,
  EC_SAVE_FIGHT_ERROR = 38,
  EC_NPC_CONFIG_NOT_FOUND = 39,
  EC_NPC_TOO_LONG_DISTANCE = 40,
  EC_PLAYER_FREEZE = 41,
  EC_PHY_STR_NOT_ENOUGH = 42,
  EC_NOT_VIP = 43,
  EC_VIP_LEVEL_LIMIT = 44
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = EC_SUCCESS;
const ErrorCode ErrorCode_MAX = EC_VIP_LEVEL_LIMIT;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum BuddyErrorCode {
  EC_YINGLING_EXIST = 101,
  EC_YINGLING_NOT_EXIST = 102,
  EC_CREATE_YINGLING_FAIL = 103,
  EC_NOT_HAVE_YINGLING = 104,
  EC_YINGLING_NOT_EXIST_ON_FIRE = 105,
  EC_YINGLING_NO_FIRE_MYSELF = 106,
  EC_YINGLING_SLOT_OPENED = 107,
  EC_YINGLING_ILLEGAL_HIRING_SLOT = 108,
  EC_YINGLING_ILLEGAL_HIRE_POS = 109,
  EC_YINGLING_ON_LINEUP = 110,
  EC_YINGLING_ALREADY_HIRED = 111,
  EC_YINGLING_HIRE_NOT_ENOUGH_LINGLI = 112,
  EC_YINGLING_NO_CHALLENGE_SPACE_TIME = 113,
  EC_YINGLING_ILLEGAL_SLOT = 114,
  EC_YINGLING_HIRE_REACH_MAX_NUM = 115,
  EC_YINGLING_SLOT_OPENED_MAX = 116,
  EC_YINGLING_HIRING_SLOT_OPENED = 117,
  EC_YINGLING_NO_FIRE_WITH_EQUIPMENT = 118,
  EC_YINGLING_NO_FIRE_WITH_PRACTICE_SKILL = 119,
  EC_YINGLING_NO_SOUL_STONE = 120,
  EC_YINGLING_NOT_ENOUGH_SOUL_STONE = 121,
  EC_YINGLING_NO_FOUND_BUDDY = 122,
  EC_YINGLING_REACH_MAX_SOUL = 123,
  EC_YINGLING_NOT_ENOUGH_COIN = 124,
  EC_YINGLING_REACH_MAX_SPACETIME = 125,
  EC_YINGLING_NOT_LINEUP_ON_CHALLENGE = 126,
  EC_YINGLING_NO_PROTECT_ITEM = 127,
  EC_YINGLING_NO_CHALLENGE_IN_TEAM = 128,
  EC_YINGLING_CHALLENGE_STILL_COOL_DOWN = 129,
  EC_YINGLING_NO_FIRE_WITH_FOLLOW = 130
};
bool BuddyErrorCode_IsValid(int value);
const BuddyErrorCode BuddyErrorCode_MIN = EC_YINGLING_EXIST;
const BuddyErrorCode BuddyErrorCode_MAX = EC_YINGLING_NO_FIRE_WITH_FOLLOW;
const int BuddyErrorCode_ARRAYSIZE = BuddyErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuddyErrorCode_descriptor();
inline const ::std::string& BuddyErrorCode_Name(BuddyErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuddyErrorCode_descriptor(), value);
}
inline bool BuddyErrorCode_Parse(
    const ::std::string& name, BuddyErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuddyErrorCode>(
    BuddyErrorCode_descriptor(), name, value);
}
enum SkillErrorCode {
  EC_SKILL_NOT_IMPLEMENT = 201,
  EC_SKILL_NOT_FOUND = 202,
  EC_SKILL_INVALID = 203,
  EC_SKILL_SLOT_NOT_OPEN = 204,
  EC_ALREADY_LEARNED = 205,
  EC_SKILL_LEVEL_NO_CONFIG = 206,
  EC_SKILL_LEVEL_LIMIT = 207,
  EC_SKILL_IN_PRACTICING = 208,
  EC_SKILL_CONFIG_INVALID = 209,
  EC_SKILL_TYPE_INVALID = 210,
  EC_SKILL_IS_MAX_LEVEL = 211,
  EC_SKILL_PRACTICE_MAX_LIMIT = 212,
  EC_SKILL_CANT_DROP_WHILE_EQUIPED = 213
};
bool SkillErrorCode_IsValid(int value);
const SkillErrorCode SkillErrorCode_MIN = EC_SKILL_NOT_IMPLEMENT;
const SkillErrorCode SkillErrorCode_MAX = EC_SKILL_CANT_DROP_WHILE_EQUIPED;
const int SkillErrorCode_ARRAYSIZE = SkillErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkillErrorCode_descriptor();
inline const ::std::string& SkillErrorCode_Name(SkillErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillErrorCode_descriptor(), value);
}
inline bool SkillErrorCode_Parse(
    const ::std::string& name, SkillErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillErrorCode>(
    SkillErrorCode_descriptor(), name, value);
}
enum ItemErrorCode {
  EC_ITEM_SUCCESS = 301,
  EC_ITEM_INVALID_PLAYER = 302,
  EC_ITEM_INVALID_SHOP = 303,
  EC_ITEM_INVALID_ITEM = 304,
  EC_ITEM_INVALID_COUNT = 305,
  EC_ITEM_INVALID_POSITION = 306,
  EC_ITEM_NO_ENOUGH_MONEY = 307,
  EC_ITEM_CANNOT_USE = 308,
  EC_ITEM_MISMATCHED_JOB = 309,
  EC_ITEM_MISMATCHED_POSITION = 310,
  EC_ITEM_NOT_FOUND = 311,
  EC_BAG_IS_FULL = 312,
  EC_ADD_ITEM_TO_BAG_FAILED = 313,
  EC_SHENGXING_NOT_FOUND_EQUIPMENT = 314,
  EC_SHENGXING_NOT_ENOUGH_MATERIAL = 315,
  EC_SHENGXING_NOT_ENOUGH_MONEY = 316,
  EC_SHENGXING_REACH_MAX_STRENGTH_LEVEL = 317,
  EC_SHENGXING_UNSTRENGTHABLE = 318,
  EC_XILIAN_NOT_ENOUGH_MATERIAL = 319,
  EC_XILIAN_NOT_ENOUGH_MONEY = 320,
  EC_XILIAN_UNXILIANABLE = 321,
  EC_NO_MOVE_QUEST_ITEM = 322,
  EC_INHERIT_LEVEL_OUT_RANGE = 325,
  EC_INHERIT_EQUIP_POS_MISMATCH = 326,
  EC_INHERIT_NOT_ENOUGH_MATERIAL = 327,
  EC_MAKE_SOCKET_REACH_MAX = 330,
  EC_NOT_ENOUGH_MATERIAL = 331,
  EC_GEM_NO_INSERT_EQUIP = 332
};
bool ItemErrorCode_IsValid(int value);
const ItemErrorCode ItemErrorCode_MIN = EC_ITEM_SUCCESS;
const ItemErrorCode ItemErrorCode_MAX = EC_GEM_NO_INSERT_EQUIP;
const int ItemErrorCode_ARRAYSIZE = ItemErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemErrorCode_descriptor();
inline const ::std::string& ItemErrorCode_Name(ItemErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemErrorCode_descriptor(), value);
}
inline bool ItemErrorCode_Parse(
    const ::std::string& name, ItemErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemErrorCode>(
    ItemErrorCode_descriptor(), name, value);
}
enum LineupErrorCode {
  EC_LINEUP_NAME_INVALID = 401,
  EC_LINEUP_CREATE_FAILED = 402,
  EC_LINEUP_NOT_EXIST = 403,
  EC_LINEUP_MEMBER_FULL = 404,
  EC_LINEUP_NO_MAIN_ROLE = 405,
  EC_LINEUP_NUMBER_LIMIT = 406,
  EC_LINEUP_MEMBER_LIMIT = 407,
  EC_LINEUP_ONE_YINGLING_LIMIT = 408,
  EC_LINEUP_TWO_YINGLING_MAX = 409,
  EC_CREATE_LINEUP_FAILED = 410,
  EC_LINEUP_INDEX_OVERFLOW = 411
};
bool LineupErrorCode_IsValid(int value);
const LineupErrorCode LineupErrorCode_MIN = EC_LINEUP_NAME_INVALID;
const LineupErrorCode LineupErrorCode_MAX = EC_LINEUP_INDEX_OVERFLOW;
const int LineupErrorCode_ARRAYSIZE = LineupErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LineupErrorCode_descriptor();
inline const ::std::string& LineupErrorCode_Name(LineupErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LineupErrorCode_descriptor(), value);
}
inline bool LineupErrorCode_Parse(
    const ::std::string& name, LineupErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineupErrorCode>(
    LineupErrorCode_descriptor(), name, value);
}
enum ArenaErrorCode {
  EC_SELF_RANK_CHANGED = 501,
  EC_CHALLEGEE_RANK_CHANGED = 502,
  EC_SNAP_PLAYER_NOT_FOUND = 503,
  EC_CHALLENGE_TIME_USE_OUT = 504,
  EC_BOX_ALREADY_TAKEN = 505,
  EC_ARENA_CHALLENGEE_IN_COOL_DOWN = 506,
  EC_CHALLENGE_LEVEL_LIMIT = 507,
  EC_ARENA_CHALLENGEE_NOT_ENOUGH = 508
};
bool ArenaErrorCode_IsValid(int value);
const ArenaErrorCode ArenaErrorCode_MIN = EC_SELF_RANK_CHANGED;
const ArenaErrorCode ArenaErrorCode_MAX = EC_ARENA_CHALLENGEE_NOT_ENOUGH;
const int ArenaErrorCode_ARRAYSIZE = ArenaErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArenaErrorCode_descriptor();
inline const ::std::string& ArenaErrorCode_Name(ArenaErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArenaErrorCode_descriptor(), value);
}
inline bool ArenaErrorCode_Parse(
    const ::std::string& name, ArenaErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArenaErrorCode>(
    ArenaErrorCode_descriptor(), name, value);
}
enum QuestErrorCode {
  EC_QUEST_ALREADY_ACCEPTED = 601,
  EC_QUEST_NOT_ACCEPTED = 602,
  EC_QUEST_INVENTORY_FULL_ON_ACCEPT = 603,
  EC_QUEST_CONDITION_NOT_SATISFIED = 604,
  EC_QUEST_DAILY_STILL_COOL_DOWN = 605,
  EC_QUEST_DAILY_QUEST_NO_CANCEL = 606,
  EC_QUEST_REFRESH_DAILY_QUEST_NO_YUANBAO = 607,
  EC_QUEST_REACH_MAX_PURCHASE_COUNT = 608,
  EC_QUEST_REACH_MAX_DAILY_COUNT = 609,
  EC_QUEST_GENERATE_REACH_MAX_PURCHASE_COUNT = 610,
  EC_QUEST_GENERATE_REACH_MAX_DAILY_COUNT = 611,
  EC_QUEST_REACH_MAX_DAILY_ACCEPTED_COUNT = 612,
  EC_DAILY_QUEST_COUNT_LIMIT = 613,
  EC_DAILY_QUEST_COME_MAX = 614,
  EC_XUNLUO_QUEST_ACCEPT_NOT_IN_TEAM = 615,
  EC_XUNLUO_QUEST_ACCEPT_LESS_TEAM_MEMBER = 616,
  EC_XUNLUO_QUEST_ACCEPT_MEMBER_LEVEL_LESS = 617,
  EC_XUNLUO_QUEST_ACCEPT_MEMBER_ALREADY_ACCEPT = 618,
  EC_XUNLUO_QUEST_ACCEPT_MEMBER_STILL_COOLDOWN = 619
};
bool QuestErrorCode_IsValid(int value);
const QuestErrorCode QuestErrorCode_MIN = EC_QUEST_ALREADY_ACCEPTED;
const QuestErrorCode QuestErrorCode_MAX = EC_XUNLUO_QUEST_ACCEPT_MEMBER_STILL_COOLDOWN;
const int QuestErrorCode_ARRAYSIZE = QuestErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestErrorCode_descriptor();
inline const ::std::string& QuestErrorCode_Name(QuestErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestErrorCode_descriptor(), value);
}
inline bool QuestErrorCode_Parse(
    const ::std::string& name, QuestErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestErrorCode>(
    QuestErrorCode_descriptor(), name, value);
}
enum TeamErrorCode {
  EC_TEAM_INVALID_REQUEST = 701,
  EC_TEAM_NO_SUITABLE_TEAM = 702,
  EC_TEAM_PLAYER_IN_TEAM = 703,
  EC_TEAM_ALREADY_APPLIED = 704,
  EC_TEAM_PLAYER_OFFLINE = 705,
  EC_TEAM_PLAYER_IN_CUSTOM_PASS = 706,
  EC_TEAM_PLAYER_NOT_EXIST = 707,
  EC_TEAM_IS_FULL = 708,
  EC_TEAM_PLAYER_LEVEL_NOT_SATISFIED = 709,
  EC_TEAM_CREATE_FAILED = 710,
  EC_TEAM_NOT_EXIST = 711,
  EC_TEAM_NO_LEADER = 712,
  EC_TEAM_INVITE_REJECTED = 713,
  EC_TEAM_FIGHTER_NOT_FOUND = 714,
  EC_CANT_CHALLENGE_IN_TEAM = 715,
  EC_TEAM_NOT_AT_SAME_MAP = 716,
  EC_TEAM_NOT_ALLOWED_IN_INSTANCE = 717,
  EC_TEAM_MEMBER_ACTION_DENY = 718
};
bool TeamErrorCode_IsValid(int value);
const TeamErrorCode TeamErrorCode_MIN = EC_TEAM_INVALID_REQUEST;
const TeamErrorCode TeamErrorCode_MAX = EC_TEAM_MEMBER_ACTION_DENY;
const int TeamErrorCode_ARRAYSIZE = TeamErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamErrorCode_descriptor();
inline const ::std::string& TeamErrorCode_Name(TeamErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamErrorCode_descriptor(), value);
}
inline bool TeamErrorCode_Parse(
    const ::std::string& name, TeamErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamErrorCode>(
    TeamErrorCode_descriptor(), name, value);
}
enum FightErrorCode {
  EC_FIGHT_ERROR = 801,
  EC_DEFENDER_NOT_FOUND = 802,
  EC_DEFENDER_SKILL_NOT_FOUND = 803,
  EC_SKILL_HIT_TYPE_INVALID = 804,
  EC_SKILL_TARGET_INVALID = 805,
  EC_CHOOSE_COWORKER_FAIL = 806,
  EC_PLAYER_FIGHT_IN_COOL_DOWN = 807,
  EC_PLAYER_NO_FREE_SKIP_FIGHT = 808,
  EC_PLAYER_NOT_IN_AUTO_FIGHT = 809,
  EC_BATTLE_GROUP_CONFIG_NOT_FOUND = 817,
  EC_ALREADY_IN_AUTO_FIGHT = 810,
  EC_SCENE_AUTO_FIGHT_LIMIT = 811,
  EC_SCENE_AUTO_FIGHT_LEVEL_LIMIT = 812,
  EC_TEAM_AUTO_FIGHT_LIMIT = 813,
  EC_AUTO_FIGHT_NO_ENOUGH_TIMES = 814,
  EC_SERVER_CREATE_AUTO_FIGHT_TIMER_FAILED = 815,
  EC_CANT_JOIN_TEAM_WHILE_IN_AUTO_FIGHT = 817,
  EC_SPEED_UP_VIP_LIMIT = 816,
  EC_SENDER_IN_FIGHT = 820,
  EC_INVITEE_IN_FIGHT = 821,
  EC_SENDER_NOT_IN_FIGHT_SCENE = 822,
  EC_INVITEE_NOT_IN_FIGHT_SCENE = 823,
  EC_TEAM_MEMBER_CANT_INVITE_FIGHT = 824,
  EC_INVITEE_NO_RESPONSE = 825,
  EC_INVITEE_NOT_ONLINE = 826,
  EC_TEAM_MEMBER_CANT_ACCEPT_FIGHT = 827,
  EC_CANT_FIGHT_WITH_OWN_TEAM = 828
};
bool FightErrorCode_IsValid(int value);
const FightErrorCode FightErrorCode_MIN = EC_FIGHT_ERROR;
const FightErrorCode FightErrorCode_MAX = EC_CANT_FIGHT_WITH_OWN_TEAM;
const int FightErrorCode_ARRAYSIZE = FightErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FightErrorCode_descriptor();
inline const ::std::string& FightErrorCode_Name(FightErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FightErrorCode_descriptor(), value);
}
inline bool FightErrorCode_Parse(
    const ::std::string& name, FightErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FightErrorCode>(
    FightErrorCode_descriptor(), name, value);
}
enum ChatErrorCode {
  EC_CHAT_INVALID_CHANNEL = 901,
  EC_CHAT_INVALID_PLAYER = 902,
  EC_CHAT_TOO_FAST = 903,
  EC_CHAT_TOO_LONG = 904,
  EC_CHAT_BLACKLIST = 905,
  EC_CHAT_WORLD_LEVEL_LIMIT = 906,
  EC_CHAT_MUTE = 907
};
bool ChatErrorCode_IsValid(int value);
const ChatErrorCode ChatErrorCode_MIN = EC_CHAT_INVALID_CHANNEL;
const ChatErrorCode ChatErrorCode_MAX = EC_CHAT_MUTE;
const int ChatErrorCode_ARRAYSIZE = ChatErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatErrorCode_descriptor();
inline const ::std::string& ChatErrorCode_Name(ChatErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatErrorCode_descriptor(), value);
}
inline bool ChatErrorCode_Parse(
    const ::std::string& name, ChatErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatErrorCode>(
    ChatErrorCode_descriptor(), name, value);
}
enum FriendErrorCode {
  EC_FRIEND_INVALID_PLAYER = 1001,
  EC_FRIEND_NOT_FRIEND = 1002,
  EC_FRIEND_ALREADY_FRIEND = 1003,
  EC_FRIEND_TOO_MANY_FRIEND = 1004,
  EC_FRIEND_IN_BLACKLIST = 1005,
  EC_FRIEND_DENY = 1006
};
bool FriendErrorCode_IsValid(int value);
const FriendErrorCode FriendErrorCode_MIN = EC_FRIEND_INVALID_PLAYER;
const FriendErrorCode FriendErrorCode_MAX = EC_FRIEND_DENY;
const int FriendErrorCode_ARRAYSIZE = FriendErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendErrorCode_descriptor();
inline const ::std::string& FriendErrorCode_Name(FriendErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendErrorCode_descriptor(), value);
}
inline bool FriendErrorCode_Parse(
    const ::std::string& name, FriendErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendErrorCode>(
    FriendErrorCode_descriptor(), name, value);
}
enum GuildErrorCode {
  EC_GUILD_CREATE_LEVEL_NOT_ENOUGH = 1101,
  EC_GUILD_INVALID_NAME = 1102,
  EC_GUILD_NAME_LENGTH_LIMIT = 1103,
  EC_GUILD_EXIST = 1104,
  EC_GUILD_NOT_EXIST = 1105,
  EC_GUILD_MEMBER_EXIST = 1106,
  EC_GUILD_MEMBER_NOT_EXIST = 1107,
  EC_GUILD_PERMISSION_DENY = 1108,
  EC_CREATE_GUILD_FAILED = 1109,
  EC_INVITE_MEMBER_ALREADY_IN_GUILD = 1110,
  EC_GUILD_JOIN_LEVEL_LIMIT = 1111,
  EC_GUILD_MEMBER_FULL = 1112,
  EC_GUILD_TIME_LIMIT = 1113
};
bool GuildErrorCode_IsValid(int value);
const GuildErrorCode GuildErrorCode_MIN = EC_GUILD_CREATE_LEVEL_NOT_ENOUGH;
const GuildErrorCode GuildErrorCode_MAX = EC_GUILD_TIME_LIMIT;
const int GuildErrorCode_ARRAYSIZE = GuildErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildErrorCode_descriptor();
inline const ::std::string& GuildErrorCode_Name(GuildErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildErrorCode_descriptor(), value);
}
inline bool GuildErrorCode_Parse(
    const ::std::string& name, GuildErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildErrorCode>(
    GuildErrorCode_descriptor(), name, value);
}
enum GiftErrorCode {
  EC_INVALID_EXCHANGE_CODE = 1201,
  EC_USED_EXCHANGE_CODE = 1202,
  EC_ALREADY_EXCHANGED_THIS_TYPE = 1203
};
bool GiftErrorCode_IsValid(int value);
const GiftErrorCode GiftErrorCode_MIN = EC_INVALID_EXCHANGE_CODE;
const GiftErrorCode GiftErrorCode_MAX = EC_ALREADY_EXCHANGED_THIS_TYPE;
const int GiftErrorCode_ARRAYSIZE = GiftErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* GiftErrorCode_descriptor();
inline const ::std::string& GiftErrorCode_Name(GiftErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    GiftErrorCode_descriptor(), value);
}
inline bool GiftErrorCode_Parse(
    const ::std::string& name, GiftErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GiftErrorCode>(
    GiftErrorCode_descriptor(), name, value);
}
enum LivenessErrorCode {
  EC_LIVENESS_INVALID_AWARD = 1251,
  EC_LIVENESS_TAKEN_AWARD = 1252,
  EC_LIVENESS_CONDITION_LIMIT = 1253
};
bool LivenessErrorCode_IsValid(int value);
const LivenessErrorCode LivenessErrorCode_MIN = EC_LIVENESS_INVALID_AWARD;
const LivenessErrorCode LivenessErrorCode_MAX = EC_LIVENESS_CONDITION_LIMIT;
const int LivenessErrorCode_ARRAYSIZE = LivenessErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LivenessErrorCode_descriptor();
inline const ::std::string& LivenessErrorCode_Name(LivenessErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LivenessErrorCode_descriptor(), value);
}
inline bool LivenessErrorCode_Parse(
    const ::std::string& name, LivenessErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LivenessErrorCode>(
    LivenessErrorCode_descriptor(), name, value);
}
enum ConfigErrorCode {
  EC_CONFIG_DENY_TEAM_INVITE = 1281,
  EC_CONFIG_DENY_GUILD_INVITE = 1282,
  EC_CONFIG_DENY_FIGHT = 1283,
  EC_CONFIG_DENY_TALK = 1284
};
bool ConfigErrorCode_IsValid(int value);
const ConfigErrorCode ConfigErrorCode_MIN = EC_CONFIG_DENY_TEAM_INVITE;
const ConfigErrorCode ConfigErrorCode_MAX = EC_CONFIG_DENY_TALK;
const int ConfigErrorCode_ARRAYSIZE = ConfigErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigErrorCode_descriptor();
inline const ::std::string& ConfigErrorCode_Name(ConfigErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigErrorCode_descriptor(), value);
}
inline bool ConfigErrorCode_Parse(
    const ::std::string& name, ConfigErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigErrorCode>(
    ConfigErrorCode_descriptor(), name, value);
}
enum InstanceErrorCode {
  EC_INSTANCE_TELEPORT_LIMIT = 1301,
  EC_INSTANCE_NEED_TEAM = 1302,
  EC_INSTANCE_NEED_SINGLE = 1303,
  EC_INSTANCE_GRADE_LIMIT = 1304,
  EC_NO_INSTANCE_DATA_FOUND = 1305,
  EC_INSTANCE_WANTED_DB_DATA_ERROR = 1306,
  EC_NO_INSTANCE_WANTED_TIME_LEFT = 1307,
  EC_INSTANCE_CARD_ALREADY_FLIPPED = 1308,
  EC_NO_INSTANCE_WANTED_CONFIG_DATA = 1309,
  EC_WRONG_INSTANCE_WANTED_CONFIG_DATA = 1310,
  EC_INSTANCE_USE_ITEM_DENY = 1311
};
bool InstanceErrorCode_IsValid(int value);
const InstanceErrorCode InstanceErrorCode_MIN = EC_INSTANCE_TELEPORT_LIMIT;
const InstanceErrorCode InstanceErrorCode_MAX = EC_INSTANCE_USE_ITEM_DENY;
const int InstanceErrorCode_ARRAYSIZE = InstanceErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstanceErrorCode_descriptor();
inline const ::std::string& InstanceErrorCode_Name(InstanceErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstanceErrorCode_descriptor(), value);
}
inline bool InstanceErrorCode_Parse(
    const ::std::string& name, InstanceErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstanceErrorCode>(
    InstanceErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace protocols

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ErrorCode>() {
  return protocols::common::ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::BuddyErrorCode>() {
  return protocols::common::BuddyErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::SkillErrorCode>() {
  return protocols::common::SkillErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ItemErrorCode>() {
  return protocols::common::ItemErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::LineupErrorCode>() {
  return protocols::common::LineupErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ArenaErrorCode>() {
  return protocols::common::ArenaErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::QuestErrorCode>() {
  return protocols::common::QuestErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::TeamErrorCode>() {
  return protocols::common::TeamErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FightErrorCode>() {
  return protocols::common::FightErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ChatErrorCode>() {
  return protocols::common::ChatErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::FriendErrorCode>() {
  return protocols::common::FriendErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GuildErrorCode>() {
  return protocols::common::GuildErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::GiftErrorCode>() {
  return protocols::common::GiftErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::LivenessErrorCode>() {
  return protocols::common::LivenessErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::ConfigErrorCode>() {
  return protocols::common::ConfigErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< protocols::common::InstanceErrorCode>() {
  return protocols::common::InstanceErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_error_5fcode_2eproto__INCLUDED
